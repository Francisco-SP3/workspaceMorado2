
tractorDeere_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a448  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  0800a6e8  0800a6e8  0001a6e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a860  0800a860  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800a860  0800a860  0001a860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a868  0800a868  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a868  0800a868  0001a868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a86c  0800a86c  0001a86c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  0800a870  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ce4  24000078  0800a8e8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24004d5c  0800a8e8  00024d5c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000295b3  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044b1  00000000  00000000  00049659  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001eb0  00000000  00000000  0004db10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d18  00000000  00000000  0004f9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003e35b  00000000  00000000  000516d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000238db  00000000  00000000  0008fa33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019f0dd  00000000  00000000  000b330e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002523eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ab8  00000000  00000000  0025243c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a6d0 	.word	0x0800a6d0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	0800a6d0 	.word	0x0800a6d0

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e8:	4b3d      	ldr	r3, [pc, #244]	; (80006e0 <SystemInit+0xfc>)
 80005ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005ee:	4a3c      	ldr	r2, [pc, #240]	; (80006e0 <SystemInit+0xfc>)
 80005f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f8:	4b39      	ldr	r3, [pc, #228]	; (80006e0 <SystemInit+0xfc>)
 80005fa:	691b      	ldr	r3, [r3, #16]
 80005fc:	4a38      	ldr	r2, [pc, #224]	; (80006e0 <SystemInit+0xfc>)
 80005fe:	f043 0310 	orr.w	r3, r3, #16
 8000602:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000604:	4b37      	ldr	r3, [pc, #220]	; (80006e4 <SystemInit+0x100>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f003 030f 	and.w	r3, r3, #15
 800060c:	2b06      	cmp	r3, #6
 800060e:	d807      	bhi.n	8000620 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000610:	4b34      	ldr	r3, [pc, #208]	; (80006e4 <SystemInit+0x100>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f023 030f 	bic.w	r3, r3, #15
 8000618:	4a32      	ldr	r2, [pc, #200]	; (80006e4 <SystemInit+0x100>)
 800061a:	f043 0307 	orr.w	r3, r3, #7
 800061e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000620:	4b31      	ldr	r3, [pc, #196]	; (80006e8 <SystemInit+0x104>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a30      	ldr	r2, [pc, #192]	; (80006e8 <SystemInit+0x104>)
 8000626:	f043 0301 	orr.w	r3, r3, #1
 800062a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800062c:	4b2e      	ldr	r3, [pc, #184]	; (80006e8 <SystemInit+0x104>)
 800062e:	2200      	movs	r2, #0
 8000630:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000632:	4b2d      	ldr	r3, [pc, #180]	; (80006e8 <SystemInit+0x104>)
 8000634:	681a      	ldr	r2, [r3, #0]
 8000636:	492c      	ldr	r1, [pc, #176]	; (80006e8 <SystemInit+0x104>)
 8000638:	4b2c      	ldr	r3, [pc, #176]	; (80006ec <SystemInit+0x108>)
 800063a:	4013      	ands	r3, r2
 800063c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800063e:	4b29      	ldr	r3, [pc, #164]	; (80006e4 <SystemInit+0x100>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f003 0308 	and.w	r3, r3, #8
 8000646:	2b00      	cmp	r3, #0
 8000648:	d007      	beq.n	800065a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800064a:	4b26      	ldr	r3, [pc, #152]	; (80006e4 <SystemInit+0x100>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	f023 030f 	bic.w	r3, r3, #15
 8000652:	4a24      	ldr	r2, [pc, #144]	; (80006e4 <SystemInit+0x100>)
 8000654:	f043 0307 	orr.w	r3, r3, #7
 8000658:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800065a:	4b23      	ldr	r3, [pc, #140]	; (80006e8 <SystemInit+0x104>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000660:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <SystemInit+0x104>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000666:	4b20      	ldr	r3, [pc, #128]	; (80006e8 <SystemInit+0x104>)
 8000668:	2200      	movs	r2, #0
 800066a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800066c:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <SystemInit+0x104>)
 800066e:	4a20      	ldr	r2, [pc, #128]	; (80006f0 <SystemInit+0x10c>)
 8000670:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000672:	4b1d      	ldr	r3, [pc, #116]	; (80006e8 <SystemInit+0x104>)
 8000674:	4a1f      	ldr	r2, [pc, #124]	; (80006f4 <SystemInit+0x110>)
 8000676:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000678:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <SystemInit+0x104>)
 800067a:	4a1f      	ldr	r2, [pc, #124]	; (80006f8 <SystemInit+0x114>)
 800067c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800067e:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <SystemInit+0x104>)
 8000680:	2200      	movs	r2, #0
 8000682:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000684:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <SystemInit+0x104>)
 8000686:	4a1c      	ldr	r2, [pc, #112]	; (80006f8 <SystemInit+0x114>)
 8000688:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800068a:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <SystemInit+0x104>)
 800068c:	2200      	movs	r2, #0
 800068e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000690:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <SystemInit+0x104>)
 8000692:	4a19      	ldr	r2, [pc, #100]	; (80006f8 <SystemInit+0x114>)
 8000694:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000696:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <SystemInit+0x104>)
 8000698:	2200      	movs	r2, #0
 800069a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <SystemInit+0x104>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a11      	ldr	r2, [pc, #68]	; (80006e8 <SystemInit+0x104>)
 80006a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <SystemInit+0x104>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006ae:	4b13      	ldr	r3, [pc, #76]	; (80006fc <SystemInit+0x118>)
 80006b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006b2:	4a12      	ldr	r2, [pc, #72]	; (80006fc <SystemInit+0x118>)
 80006b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x11c>)
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <SystemInit+0x120>)
 80006c0:	4013      	ands	r3, r2
 80006c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006c6:	d202      	bcs.n	80006ce <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <SystemInit+0x124>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ce:	4b0f      	ldr	r3, [pc, #60]	; (800070c <SystemInit+0x128>)
 80006d0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006d4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006d6:	bf00      	nop
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	e000ed00 	.word	0xe000ed00
 80006e4:	52002000 	.word	0x52002000
 80006e8:	58024400 	.word	0x58024400
 80006ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80006f0:	02020200 	.word	0x02020200
 80006f4:	01ff0000 	.word	0x01ff0000
 80006f8:	01010280 	.word	0x01010280
 80006fc:	580000c0 	.word	0x580000c0
 8000700:	5c001000 	.word	0x5c001000
 8000704:	ffff0000 	.word	0xffff0000
 8000708:	51008108 	.word	0x51008108
 800070c:	52004000 	.word	0x52004000

08000710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000716:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800071a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800071c:	bf00      	nop
 800071e:	4b2f      	ldr	r3, [pc, #188]	; (80007dc <main+0xcc>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000726:	2b00      	cmp	r3, #0
 8000728:	d004      	beq.n	8000734 <main+0x24>
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	1e5a      	subs	r2, r3, #1
 800072e:	607a      	str	r2, [r7, #4]
 8000730:	2b00      	cmp	r3, #0
 8000732:	dcf4      	bgt.n	800071e <main+0xe>
  if ( timeout < 0 )
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2b00      	cmp	r3, #0
 8000738:	da01      	bge.n	800073e <main+0x2e>
  {
  Error_Handler();
 800073a:	f000 fc2d 	bl	8000f98 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073e:	f000 ff89 	bl	8001654 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000742:	f000 f857 	bl	80007f4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000746:	4b25      	ldr	r3, [pc, #148]	; (80007dc <main+0xcc>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074c:	4a23      	ldr	r2, [pc, #140]	; (80007dc <main+0xcc>)
 800074e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000752:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000756:	4b21      	ldr	r3, [pc, #132]	; (80007dc <main+0xcc>)
 8000758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800075c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000760:	603b      	str	r3, [r7, #0]
 8000762:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000764:	2000      	movs	r0, #0
 8000766:	f001 fdeb 	bl	8002340 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800076a:	2100      	movs	r1, #0
 800076c:	2000      	movs	r0, #0
 800076e:	f001 fe01 	bl	8002374 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000772:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000776:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000778:	bf00      	nop
 800077a:	4b18      	ldr	r3, [pc, #96]	; (80007dc <main+0xcc>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000782:	2b00      	cmp	r3, #0
 8000784:	d104      	bne.n	8000790 <main+0x80>
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	1e5a      	subs	r2, r3, #1
 800078a:	607a      	str	r2, [r7, #4]
 800078c:	2b00      	cmp	r3, #0
 800078e:	dcf4      	bgt.n	800077a <main+0x6a>
if ( timeout < 0 )
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2b00      	cmp	r3, #0
 8000794:	da01      	bge.n	800079a <main+0x8a>
{
Error_Handler();
 8000796:	f000 fbff 	bl	8000f98 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800079a:	f000 fa4d 	bl	8000c38 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800079e:	f000 f8a7 	bl	80008f0 <MX_FDCAN1_Init>
  MX_USART3_UART_Init();
 80007a2:	f000 f9fd 	bl	8000ba0 <MX_USART3_UART_Init>
  MX_SPI4_Init();
 80007a6:	f000 f907 	bl	80009b8 <MX_SPI4_Init>
  MX_TIM13_Init();
 80007aa:	f000 f95d 	bl	8000a68 <MX_TIM13_Init>
  MX_TIM14_Init();
 80007ae:	f000 f9a9 	bl	8000b04 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim14,TIM_CHANNEL_1);
 80007b2:	2100      	movs	r1, #0
 80007b4:	480a      	ldr	r0, [pc, #40]	; (80007e0 <main+0xd0>)
 80007b6:	f004 fc01 	bl	8004fbc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim13,TIM_CHANNEL_1);
 80007ba:	2100      	movs	r1, #0
 80007bc:	4809      	ldr	r0, [pc, #36]	; (80007e4 <main+0xd4>)
 80007be:	f004 fbfd 	bl	8004fbc <HAL_TIM_PWM_Start>
  */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007c2:	f006 fc63 	bl	800708c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80007c6:	4a08      	ldr	r2, [pc, #32]	; (80007e8 <main+0xd8>)
 80007c8:	2100      	movs	r1, #0
 80007ca:	4808      	ldr	r0, [pc, #32]	; (80007ec <main+0xdc>)
 80007cc:	f006 fca8 	bl	8007120 <osThreadNew>
 80007d0:	4603      	mov	r3, r0
 80007d2:	4a07      	ldr	r2, [pc, #28]	; (80007f0 <main+0xe0>)
 80007d4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80007d6:	f006 fc7d 	bl	80070d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007da:	e7fe      	b.n	80007da <main+0xca>
 80007dc:	58024400 	.word	0x58024400
 80007e0:	24000208 	.word	0x24000208
 80007e4:	240001bc 	.word	0x240001bc
 80007e8:	0800a7b0 	.word	0x0800a7b0
 80007ec:	08000d89 	.word	0x08000d89
 80007f0:	240002e4 	.word	0x240002e4

080007f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b09c      	sub	sp, #112	; 0x70
 80007f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fe:	224c      	movs	r2, #76	; 0x4c
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f009 faeb 	bl	8009dde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	2220      	movs	r2, #32
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f009 fae5 	bl	8009dde <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000814:	2004      	movs	r0, #4
 8000816:	f001 fdc1 	bl	800239c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800081a:	2300      	movs	r3, #0
 800081c:	603b      	str	r3, [r7, #0]
 800081e:	4b32      	ldr	r3, [pc, #200]	; (80008e8 <SystemClock_Config+0xf4>)
 8000820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000822:	4a31      	ldr	r2, [pc, #196]	; (80008e8 <SystemClock_Config+0xf4>)
 8000824:	f023 0301 	bic.w	r3, r3, #1
 8000828:	62d3      	str	r3, [r2, #44]	; 0x2c
 800082a:	4b2f      	ldr	r3, [pc, #188]	; (80008e8 <SystemClock_Config+0xf4>)
 800082c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	4b2d      	ldr	r3, [pc, #180]	; (80008ec <SystemClock_Config+0xf8>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800083c:	4a2b      	ldr	r2, [pc, #172]	; (80008ec <SystemClock_Config+0xf8>)
 800083e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000842:	6193      	str	r3, [r2, #24]
 8000844:	4b29      	ldr	r3, [pc, #164]	; (80008ec <SystemClock_Config+0xf8>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800084c:	603b      	str	r3, [r7, #0]
 800084e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000850:	bf00      	nop
 8000852:	4b26      	ldr	r3, [pc, #152]	; (80008ec <SystemClock_Config+0xf8>)
 8000854:	699b      	ldr	r3, [r3, #24]
 8000856:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800085a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800085e:	d1f8      	bne.n	8000852 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000860:	2301      	movs	r3, #1
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000864:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000868:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800086a:	2302      	movs	r3, #2
 800086c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800086e:	2302      	movs	r3, #2
 8000870:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000872:	2301      	movs	r3, #1
 8000874:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000876:	2312      	movs	r3, #18
 8000878:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800087a:	2302      	movs	r3, #2
 800087c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800087e:	2303      	movs	r3, #3
 8000880:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000882:	2302      	movs	r3, #2
 8000884:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000886:	230c      	movs	r3, #12
 8000888:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800088a:	2302      	movs	r3, #2
 800088c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 800088e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000892:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000898:	4618      	mov	r0, r3
 800089a:	f001 fdd9 	bl	8002450 <HAL_RCC_OscConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80008a4:	f000 fb78 	bl	8000f98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a8:	233f      	movs	r3, #63	; 0x3f
 80008aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ac:	2303      	movs	r3, #3
 80008ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008b4:	2300      	movs	r3, #0
 80008b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008bc:	2340      	movs	r3, #64	; 0x40
 80008be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008c6:	2300      	movs	r3, #0
 80008c8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	2101      	movs	r1, #1
 80008ce:	4618      	mov	r0, r3
 80008d0:	f002 f9ec 	bl	8002cac <HAL_RCC_ClockConfig>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <SystemClock_Config+0xea>
  {
    Error_Handler();
 80008da:	f000 fb5d 	bl	8000f98 <Error_Handler>
  }
}
 80008de:	bf00      	nop
 80008e0:	3770      	adds	r7, #112	; 0x70
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	58000400 	.word	0x58000400
 80008ec:	58024800 	.word	0x58024800

080008f0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80008f4:	4b2e      	ldr	r3, [pc, #184]	; (80009b0 <MX_FDCAN1_Init+0xc0>)
 80008f6:	4a2f      	ldr	r2, [pc, #188]	; (80009b4 <MX_FDCAN1_Init+0xc4>)
 80008f8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80008fa:	4b2d      	ldr	r3, [pc, #180]	; (80009b0 <MX_FDCAN1_Init+0xc0>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000900:	4b2b      	ldr	r3, [pc, #172]	; (80009b0 <MX_FDCAN1_Init+0xc0>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000906:	4b2a      	ldr	r3, [pc, #168]	; (80009b0 <MX_FDCAN1_Init+0xc0>)
 8000908:	2200      	movs	r2, #0
 800090a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800090c:	4b28      	ldr	r3, [pc, #160]	; (80009b0 <MX_FDCAN1_Init+0xc0>)
 800090e:	2200      	movs	r2, #0
 8000910:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000912:	4b27      	ldr	r3, [pc, #156]	; (80009b0 <MX_FDCAN1_Init+0xc0>)
 8000914:	2200      	movs	r2, #0
 8000916:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000918:	4b25      	ldr	r3, [pc, #148]	; (80009b0 <MX_FDCAN1_Init+0xc0>)
 800091a:	2210      	movs	r2, #16
 800091c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800091e:	4b24      	ldr	r3, [pc, #144]	; (80009b0 <MX_FDCAN1_Init+0xc0>)
 8000920:	2201      	movs	r2, #1
 8000922:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000924:	4b22      	ldr	r3, [pc, #136]	; (80009b0 <MX_FDCAN1_Init+0xc0>)
 8000926:	2202      	movs	r2, #2
 8000928:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800092a:	4b21      	ldr	r3, [pc, #132]	; (80009b0 <MX_FDCAN1_Init+0xc0>)
 800092c:	2202      	movs	r2, #2
 800092e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000930:	4b1f      	ldr	r3, [pc, #124]	; (80009b0 <MX_FDCAN1_Init+0xc0>)
 8000932:	2201      	movs	r2, #1
 8000934:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000936:	4b1e      	ldr	r3, [pc, #120]	; (80009b0 <MX_FDCAN1_Init+0xc0>)
 8000938:	2201      	movs	r2, #1
 800093a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800093c:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <MX_FDCAN1_Init+0xc0>)
 800093e:	2201      	movs	r2, #1
 8000940:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000942:	4b1b      	ldr	r3, [pc, #108]	; (80009b0 <MX_FDCAN1_Init+0xc0>)
 8000944:	2201      	movs	r2, #1
 8000946:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000948:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <MX_FDCAN1_Init+0xc0>)
 800094a:	2200      	movs	r2, #0
 800094c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800094e:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <MX_FDCAN1_Init+0xc0>)
 8000950:	2200      	movs	r2, #0
 8000952:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000954:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <MX_FDCAN1_Init+0xc0>)
 8000956:	2200      	movs	r2, #0
 8000958:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <MX_FDCAN1_Init+0xc0>)
 800095c:	2200      	movs	r2, #0
 800095e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000960:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <MX_FDCAN1_Init+0xc0>)
 8000962:	2204      	movs	r2, #4
 8000964:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000966:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <MX_FDCAN1_Init+0xc0>)
 8000968:	2200      	movs	r2, #0
 800096a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800096c:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <MX_FDCAN1_Init+0xc0>)
 800096e:	2204      	movs	r2, #4
 8000970:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000972:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <MX_FDCAN1_Init+0xc0>)
 8000974:	2200      	movs	r2, #0
 8000976:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000978:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <MX_FDCAN1_Init+0xc0>)
 800097a:	2204      	movs	r2, #4
 800097c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <MX_FDCAN1_Init+0xc0>)
 8000980:	2200      	movs	r2, #0
 8000982:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000984:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <MX_FDCAN1_Init+0xc0>)
 8000986:	2200      	movs	r2, #0
 8000988:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_FDCAN1_Init+0xc0>)
 800098c:	2200      	movs	r2, #0
 800098e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000990:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <MX_FDCAN1_Init+0xc0>)
 8000992:	2200      	movs	r2, #0
 8000994:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_FDCAN1_Init+0xc0>)
 8000998:	2204      	movs	r2, #4
 800099a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800099c:	4804      	ldr	r0, [pc, #16]	; (80009b0 <MX_FDCAN1_Init+0xc0>)
 800099e:	f000 ffa1 	bl	80018e4 <HAL_FDCAN_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80009a8:	f000 faf6 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	24000094 	.word	0x24000094
 80009b4:	4000a000 	.word	0x4000a000

080009b8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80009bc:	4b28      	ldr	r3, [pc, #160]	; (8000a60 <MX_SPI4_Init+0xa8>)
 80009be:	4a29      	ldr	r2, [pc, #164]	; (8000a64 <MX_SPI4_Init+0xac>)
 80009c0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80009c2:	4b27      	ldr	r3, [pc, #156]	; (8000a60 <MX_SPI4_Init+0xa8>)
 80009c4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80009c8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80009ca:	4b25      	ldr	r3, [pc, #148]	; (8000a60 <MX_SPI4_Init+0xa8>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80009d0:	4b23      	ldr	r3, [pc, #140]	; (8000a60 <MX_SPI4_Init+0xa8>)
 80009d2:	2207      	movs	r2, #7
 80009d4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80009d6:	4b22      	ldr	r3, [pc, #136]	; (8000a60 <MX_SPI4_Init+0xa8>)
 80009d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80009dc:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 80009de:	4b20      	ldr	r3, [pc, #128]	; (8000a60 <MX_SPI4_Init+0xa8>)
 80009e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80009e4:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80009e6:	4b1e      	ldr	r3, [pc, #120]	; (8000a60 <MX_SPI4_Init+0xa8>)
 80009e8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80009ec:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80009ee:	4b1c      	ldr	r3, [pc, #112]	; (8000a60 <MX_SPI4_Init+0xa8>)
 80009f0:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80009f4:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009f6:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <MX_SPI4_Init+0xa8>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80009fc:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <MX_SPI4_Init+0xa8>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a02:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <MX_SPI4_Init+0xa8>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000a08:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <MX_SPI4_Init+0xa8>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a0e:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <MX_SPI4_Init+0xa8>)
 8000a10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a14:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a16:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <MX_SPI4_Init+0xa8>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a1c:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <MX_SPI4_Init+0xa8>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a22:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <MX_SPI4_Init+0xa8>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a28:	4b0d      	ldr	r3, [pc, #52]	; (8000a60 <MX_SPI4_Init+0xa8>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <MX_SPI4_Init+0xa8>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a34:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <MX_SPI4_Init+0xa8>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a3a:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <MX_SPI4_Init+0xa8>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a40:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <MX_SPI4_Init+0xa8>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a46:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <MX_SPI4_Init+0xa8>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000a4c:	4804      	ldr	r0, [pc, #16]	; (8000a60 <MX_SPI4_Init+0xa8>)
 8000a4e:	f004 f863 	bl	8004b18 <HAL_SPI_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_SPI4_Init+0xa4>
  {
    Error_Handler();
 8000a58:	f000 fa9e 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	24000134 	.word	0x24000134
 8000a64:	40013400 	.word	0x40013400

08000a68 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b088      	sub	sp, #32
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
 8000a7c:	615a      	str	r2, [r3, #20]
 8000a7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000a80:	4b1e      	ldr	r3, [pc, #120]	; (8000afc <MX_TIM13_Init+0x94>)
 8000a82:	4a1f      	ldr	r2, [pc, #124]	; (8000b00 <MX_TIM13_Init+0x98>)
 8000a84:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 22;
 8000a86:	4b1d      	ldr	r3, [pc, #116]	; (8000afc <MX_TIM13_Init+0x94>)
 8000a88:	2216      	movs	r2, #22
 8000a8a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8c:	4b1b      	ldr	r3, [pc, #108]	; (8000afc <MX_TIM13_Init+0x94>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8000a92:	4b1a      	ldr	r3, [pc, #104]	; (8000afc <MX_TIM13_Init+0x94>)
 8000a94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a98:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a9a:	4b18      	ldr	r3, [pc, #96]	; (8000afc <MX_TIM13_Init+0x94>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000aa0:	4b16      	ldr	r3, [pc, #88]	; (8000afc <MX_TIM13_Init+0x94>)
 8000aa2:	2280      	movs	r2, #128	; 0x80
 8000aa4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000aa6:	4815      	ldr	r0, [pc, #84]	; (8000afc <MX_TIM13_Init+0x94>)
 8000aa8:	f004 f957 	bl	8004d5a <HAL_TIM_Base_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8000ab2:	f000 fa71 	bl	8000f98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8000ab6:	4811      	ldr	r0, [pc, #68]	; (8000afc <MX_TIM13_Init+0x94>)
 8000ab8:	f004 fa1e 	bl	8004ef8 <HAL_TIM_PWM_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8000ac2:	f000 fa69 	bl	8000f98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ac6:	2360      	movs	r3, #96	; 0x60
 8000ac8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	2200      	movs	r2, #0
 8000ada:	4619      	mov	r1, r3
 8000adc:	4807      	ldr	r0, [pc, #28]	; (8000afc <MX_TIM13_Init+0x94>)
 8000ade:	f004 fc9b 	bl	8005418 <HAL_TIM_PWM_ConfigChannel>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8000ae8:	f000 fa56 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8000aec:	4803      	ldr	r0, [pc, #12]	; (8000afc <MX_TIM13_Init+0x94>)
 8000aee:	f000 fb8d 	bl	800120c <HAL_TIM_MspPostInit>

}
 8000af2:	bf00      	nop
 8000af4:	3720      	adds	r7, #32
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	240001bc 	.word	0x240001bc
 8000b00:	40001c00 	.word	0x40001c00

08000b04 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b088      	sub	sp, #32
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
 8000b18:	615a      	str	r2, [r3, #20]
 8000b1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000b1c:	4b1e      	ldr	r3, [pc, #120]	; (8000b98 <MX_TIM14_Init+0x94>)
 8000b1e:	4a1f      	ldr	r2, [pc, #124]	; (8000b9c <MX_TIM14_Init+0x98>)
 8000b20:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 22;
 8000b22:	4b1d      	ldr	r3, [pc, #116]	; (8000b98 <MX_TIM14_Init+0x94>)
 8000b24:	2216      	movs	r2, #22
 8000b26:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b28:	4b1b      	ldr	r3, [pc, #108]	; (8000b98 <MX_TIM14_Init+0x94>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000b2e:	4b1a      	ldr	r3, [pc, #104]	; (8000b98 <MX_TIM14_Init+0x94>)
 8000b30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b34:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b36:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <MX_TIM14_Init+0x94>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b3c:	4b16      	ldr	r3, [pc, #88]	; (8000b98 <MX_TIM14_Init+0x94>)
 8000b3e:	2280      	movs	r2, #128	; 0x80
 8000b40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000b42:	4815      	ldr	r0, [pc, #84]	; (8000b98 <MX_TIM14_Init+0x94>)
 8000b44:	f004 f909 	bl	8004d5a <HAL_TIM_Base_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8000b4e:	f000 fa23 	bl	8000f98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000b52:	4811      	ldr	r0, [pc, #68]	; (8000b98 <MX_TIM14_Init+0x94>)
 8000b54:	f004 f9d0 	bl	8004ef8 <HAL_TIM_PWM_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8000b5e:	f000 fa1b 	bl	8000f98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b62:	2360      	movs	r3, #96	; 0x60
 8000b64:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b72:	1d3b      	adds	r3, r7, #4
 8000b74:	2200      	movs	r2, #0
 8000b76:	4619      	mov	r1, r3
 8000b78:	4807      	ldr	r0, [pc, #28]	; (8000b98 <MX_TIM14_Init+0x94>)
 8000b7a:	f004 fc4d 	bl	8005418 <HAL_TIM_PWM_ConfigChannel>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000b84:	f000 fa08 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000b88:	4803      	ldr	r0, [pc, #12]	; (8000b98 <MX_TIM14_Init+0x94>)
 8000b8a:	f000 fb3f 	bl	800120c <HAL_TIM_MspPostInit>

}
 8000b8e:	bf00      	nop
 8000b90:	3720      	adds	r7, #32
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	24000208 	.word	0x24000208
 8000b9c:	40002000 	.word	0x40002000

08000ba0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ba4:	4b22      	ldr	r3, [pc, #136]	; (8000c30 <MX_USART3_UART_Init+0x90>)
 8000ba6:	4a23      	ldr	r2, [pc, #140]	; (8000c34 <MX_USART3_UART_Init+0x94>)
 8000ba8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000baa:	4b21      	ldr	r3, [pc, #132]	; (8000c30 <MX_USART3_UART_Init+0x90>)
 8000bac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb2:	4b1f      	ldr	r3, [pc, #124]	; (8000c30 <MX_USART3_UART_Init+0x90>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bb8:	4b1d      	ldr	r3, [pc, #116]	; (8000c30 <MX_USART3_UART_Init+0x90>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bbe:	4b1c      	ldr	r3, [pc, #112]	; (8000c30 <MX_USART3_UART_Init+0x90>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bc4:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <MX_USART3_UART_Init+0x90>)
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bca:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <MX_USART3_UART_Init+0x90>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd0:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <MX_USART3_UART_Init+0x90>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bd6:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <MX_USART3_UART_Init+0x90>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bdc:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <MX_USART3_UART_Init+0x90>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000be2:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <MX_USART3_UART_Init+0x90>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000be8:	4811      	ldr	r0, [pc, #68]	; (8000c30 <MX_USART3_UART_Init+0x90>)
 8000bea:	f005 f904 	bl	8005df6 <HAL_UART_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000bf4:	f000 f9d0 	bl	8000f98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	480d      	ldr	r0, [pc, #52]	; (8000c30 <MX_USART3_UART_Init+0x90>)
 8000bfc:	f006 f938 	bl	8006e70 <HAL_UARTEx_SetTxFifoThreshold>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c06:	f000 f9c7 	bl	8000f98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4808      	ldr	r0, [pc, #32]	; (8000c30 <MX_USART3_UART_Init+0x90>)
 8000c0e:	f006 f96d 	bl	8006eec <HAL_UARTEx_SetRxFifoThreshold>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c18:	f000 f9be 	bl	8000f98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c1c:	4804      	ldr	r0, [pc, #16]	; (8000c30 <MX_USART3_UART_Init+0x90>)
 8000c1e:	f006 f8ee 	bl	8006dfe <HAL_UARTEx_DisableFifoMode>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c28:	f000 f9b6 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	24000254 	.word	0x24000254
 8000c34:	40004800 	.word	0x40004800

08000c38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08c      	sub	sp, #48	; 0x30
 8000c3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]
 8000c4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c4e:	4b4a      	ldr	r3, [pc, #296]	; (8000d78 <MX_GPIO_Init+0x140>)
 8000c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c54:	4a48      	ldr	r2, [pc, #288]	; (8000d78 <MX_GPIO_Init+0x140>)
 8000c56:	f043 0310 	orr.w	r3, r3, #16
 8000c5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c5e:	4b46      	ldr	r3, [pc, #280]	; (8000d78 <MX_GPIO_Init+0x140>)
 8000c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c64:	f003 0310 	and.w	r3, r3, #16
 8000c68:	61bb      	str	r3, [r7, #24]
 8000c6a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6c:	4b42      	ldr	r3, [pc, #264]	; (8000d78 <MX_GPIO_Init+0x140>)
 8000c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c72:	4a41      	ldr	r2, [pc, #260]	; (8000d78 <MX_GPIO_Init+0x140>)
 8000c74:	f043 0304 	orr.w	r3, r3, #4
 8000c78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c7c:	4b3e      	ldr	r3, [pc, #248]	; (8000d78 <MX_GPIO_Init+0x140>)
 8000c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c82:	f003 0304 	and.w	r3, r3, #4
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c8a:	4b3b      	ldr	r3, [pc, #236]	; (8000d78 <MX_GPIO_Init+0x140>)
 8000c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c90:	4a39      	ldr	r2, [pc, #228]	; (8000d78 <MX_GPIO_Init+0x140>)
 8000c92:	f043 0320 	orr.w	r3, r3, #32
 8000c96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c9a:	4b37      	ldr	r3, [pc, #220]	; (8000d78 <MX_GPIO_Init+0x140>)
 8000c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca0:	f003 0320 	and.w	r3, r3, #32
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ca8:	4b33      	ldr	r3, [pc, #204]	; (8000d78 <MX_GPIO_Init+0x140>)
 8000caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cae:	4a32      	ldr	r2, [pc, #200]	; (8000d78 <MX_GPIO_Init+0x140>)
 8000cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb8:	4b2f      	ldr	r3, [pc, #188]	; (8000d78 <MX_GPIO_Init+0x140>)
 8000cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc6:	4b2c      	ldr	r3, [pc, #176]	; (8000d78 <MX_GPIO_Init+0x140>)
 8000cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ccc:	4a2a      	ldr	r2, [pc, #168]	; (8000d78 <MX_GPIO_Init+0x140>)
 8000cce:	f043 0302 	orr.w	r3, r3, #2
 8000cd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cd6:	4b28      	ldr	r3, [pc, #160]	; (8000d78 <MX_GPIO_Init+0x140>)
 8000cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cdc:	f003 0302 	and.w	r3, r3, #2
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce4:	4b24      	ldr	r3, [pc, #144]	; (8000d78 <MX_GPIO_Init+0x140>)
 8000ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cea:	4a23      	ldr	r2, [pc, #140]	; (8000d78 <MX_GPIO_Init+0x140>)
 8000cec:	f043 0308 	orr.w	r3, r3, #8
 8000cf0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cf4:	4b20      	ldr	r3, [pc, #128]	; (8000d78 <MX_GPIO_Init+0x140>)
 8000cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cfa:	f003 0308 	and.w	r3, r3, #8
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_W_Pin|CS_I_Pin|CE_W_Pin, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8000d08:	481c      	ldr	r0, [pc, #112]	; (8000d7c <MX_GPIO_Init+0x144>)
 8000d0a:	f001 faff 	bl	800230c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f244 0101 	movw	r1, #16385	; 0x4001
 8000d14:	481a      	ldr	r0, [pc, #104]	; (8000d80 <MX_GPIO_Init+0x148>)
 8000d16:	f001 faf9 	bl	800230c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_W_Pin CS_I_Pin CE_W_Pin */
  GPIO_InitStruct.Pin = CS_W_Pin|CS_I_Pin|CE_W_Pin;
 8000d1a:	f44f 6383 	mov.w	r3, #1048	; 0x418
 8000d1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d20:	2301      	movs	r3, #1
 8000d22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d2c:	f107 031c 	add.w	r3, r7, #28
 8000d30:	4619      	mov	r1, r3
 8000d32:	4812      	ldr	r0, [pc, #72]	; (8000d7c <MX_GPIO_Init+0x144>)
 8000d34:	f001 f93a 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d46:	f107 031c 	add.w	r3, r7, #28
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	480d      	ldr	r0, [pc, #52]	; (8000d84 <MX_GPIO_Init+0x14c>)
 8000d4e:	f001 f92d 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000d52:	f244 0301 	movw	r3, #16385	; 0x4001
 8000d56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d64:	f107 031c 	add.w	r3, r7, #28
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4805      	ldr	r0, [pc, #20]	; (8000d80 <MX_GPIO_Init+0x148>)
 8000d6c:	f001 f91e 	bl	8001fac <HAL_GPIO_Init>

}
 8000d70:	bf00      	nop
 8000d72:	3730      	adds	r7, #48	; 0x30
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	58024400 	.word	0x58024400
 8000d7c:	58021000 	.word	0x58021000
 8000d80:	58020400 	.word	0x58020400
 8000d84:	58020800 	.word	0x58020800

08000d88 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08c      	sub	sp, #48	; 0x30
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
	}
   */


	  //ESC
	  	  double pulseWidthServo= 0.0015;
 8000d90:	a376      	add	r3, pc, #472	; (adr r3, 8000f6c <StartDefaultTask+0x1e4>)
 8000d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d96:	e9c7 2308 	strd	r2, r3, [r7, #32]
	  	  double pulseWidth= 0.0015;
 8000d9a:	a374      	add	r3, pc, #464	; (adr r3, 8000f6c <StartDefaultTask+0x1e4>)
 8000d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000da0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	  	  double ccr = 0;
 8000da4:	f04f 0200 	mov.w	r2, #0
 8000da8:	f04f 0300 	mov.w	r3, #0
 8000dac:	e9c7 2306 	strd	r2, r3, [r7, #24]
	  	  double ccrservo=0;
 8000db0:	f04f 0200 	mov.w	r2, #0
 8000db4:	f04f 0300 	mov.w	r3, #0
 8000db8:	e9c7 2304 	strd	r2, r3, [r7, #16]

	  	  ccrservo=(pulseWidthServo * htim13.Init.Period )/0.02;
 8000dbc:	4b64      	ldr	r3, [pc, #400]	; (8000f50 <StartDefaultTask+0x1c8>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	ee07 3a90 	vmov	s15, r3
 8000dc4:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000dc8:	ed97 7b08 	vldr	d7, [r7, #32]
 8000dcc:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000dd0:	ed9f 5b57 	vldr	d5, [pc, #348]	; 8000f30 <StartDefaultTask+0x1a8>
 8000dd4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000dd8:	ed87 7b04 	vstr	d7, [r7, #16]
	  	  htim13.Instance -> CCR1=ccrservo;
 8000ddc:	4b5c      	ldr	r3, [pc, #368]	; (8000f50 <StartDefaultTask+0x1c8>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	ed97 7b04 	vldr	d7, [r7, #16]
 8000de4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000de8:	ee17 2a90 	vmov	r2, s15
 8000dec:	635a      	str	r2, [r3, #52]	; 0x34
	  	  osDelay(2000);
 8000dee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000df2:	f006 fa27 	bl	8007244 <osDelay>

	  	  pulseWidthServo= 0.0011;
 8000df6:	a350      	add	r3, pc, #320	; (adr r3, 8000f38 <StartDefaultTask+0x1b0>)
 8000df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dfc:	e9c7 2308 	strd	r2, r3, [r7, #32]
	  	  ccrservo=(pulseWidthServo * htim13.Init.Period )/0.02;
 8000e00:	4b53      	ldr	r3, [pc, #332]	; (8000f50 <StartDefaultTask+0x1c8>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	ee07 3a90 	vmov	s15, r3
 8000e08:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000e0c:	ed97 7b08 	vldr	d7, [r7, #32]
 8000e10:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000e14:	ed9f 5b46 	vldr	d5, [pc, #280]	; 8000f30 <StartDefaultTask+0x1a8>
 8000e18:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e1c:	ed87 7b04 	vstr	d7, [r7, #16]
	  	  htim13.Instance -> CCR1=ccrservo;
 8000e20:	4b4b      	ldr	r3, [pc, #300]	; (8000f50 <StartDefaultTask+0x1c8>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	ed97 7b04 	vldr	d7, [r7, #16]
 8000e28:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e2c:	ee17 2a90 	vmov	r2, s15
 8000e30:	635a      	str	r2, [r3, #52]	; 0x34

	  	  ccr = (pulseWidth * htim14.Init.Period )/0.02;
 8000e32:	4b48      	ldr	r3, [pc, #288]	; (8000f54 <StartDefaultTask+0x1cc>)
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	ee07 3a90 	vmov	s15, r3
 8000e3a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000e3e:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000e42:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000e46:	ed9f 5b3a 	vldr	d5, [pc, #232]	; 8000f30 <StartDefaultTask+0x1a8>
 8000e4a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e4e:	ed87 7b06 	vstr	d7, [r7, #24]
	  	  htim14.Instance -> CCR1 = ccr;
 8000e52:	4b40      	ldr	r3, [pc, #256]	; (8000f54 <StartDefaultTask+0x1cc>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	ed97 7b06 	vldr	d7, [r7, #24]
 8000e5a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e5e:	ee17 2a90 	vmov	r2, s15
 8000e62:	635a      	str	r2, [r3, #52]	; 0x34
	  	  printf("Hello tupu \r\n");
 8000e64:	483c      	ldr	r0, [pc, #240]	; (8000f58 <StartDefaultTask+0x1d0>)
 8000e66:	f009 f8c5 	bl	8009ff4 <puts>
	  	  osDelay(2000);
 8000e6a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e6e:	f006 f9e9 	bl	8007244 <osDelay>
	  	  printf("hi World \r\n");
 8000e72:	483a      	ldr	r0, [pc, #232]	; (8000f5c <StartDefaultTask+0x1d4>)
 8000e74:	f009 f8be 	bl	8009ff4 <puts>
//	  	  HAL_Delay(2000);

	  	  double i=0.00001;
 8000e78:	a331      	add	r3, pc, #196	; (adr r3, 8000f40 <StartDefaultTask+0x1b8>)
 8000e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	  	  while(pulseWidth<0.002){
 8000e82:	e029      	b.n	8000ed8 <StartDefaultTask+0x150>
	  		  ccr=(pulseWidth*htim14.Init.Period)/0.02;
 8000e84:	4b33      	ldr	r3, [pc, #204]	; (8000f54 <StartDefaultTask+0x1cc>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	ee07 3a90 	vmov	s15, r3
 8000e8c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000e90:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000e94:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000e98:	ed9f 5b25 	vldr	d5, [pc, #148]	; 8000f30 <StartDefaultTask+0x1a8>
 8000e9c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ea0:	ed87 7b06 	vstr	d7, [r7, #24]
	  		  htim14.Instance -> CCR1=ccr;
 8000ea4:	4b2b      	ldr	r3, [pc, #172]	; (8000f54 <StartDefaultTask+0x1cc>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	ed97 7b06 	vldr	d7, [r7, #24]
 8000eac:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000eb0:	ee17 2a90 	vmov	r2, s15
 8000eb4:	635a      	str	r2, [r3, #52]	; 0x34
	 // 		  HAL_Delay(50);
	  		  printf("antes os  \r\n");
 8000eb6:	482a      	ldr	r0, [pc, #168]	; (8000f60 <StartDefaultTask+0x1d8>)
 8000eb8:	f009 f89c 	bl	8009ff4 <puts>
	  		  	  osDelay(50);
 8000ebc:	2032      	movs	r0, #50	; 0x32
 8000ebe:	f006 f9c1 	bl	8007244 <osDelay>
	  		   printf("despues os \r\n");
 8000ec2:	4828      	ldr	r0, [pc, #160]	; (8000f64 <StartDefaultTask+0x1dc>)
 8000ec4:	f009 f896 	bl	8009ff4 <puts>
	  		  pulseWidth += i;
 8000ec8:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8000ecc:	ed97 7b02 	vldr	d7, [r7, #8]
 8000ed0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000ed4:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	  	  while(pulseWidth<0.002){
 8000ed8:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000edc:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8000f48 <StartDefaultTask+0x1c0>
 8000ee0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ee8:	d4cc      	bmi.n	8000e84 <StartDefaultTask+0xfc>
	  	  }
	  	  ccr = (pulseWidth * htim14.Init.Period)/0.02;
 8000eea:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <StartDefaultTask+0x1cc>)
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	ee07 3a90 	vmov	s15, r3
 8000ef2:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000ef6:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000efa:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000efe:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8000f30 <StartDefaultTask+0x1a8>
 8000f02:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f06:	ed87 7b06 	vstr	d7, [r7, #24]
	  	  htim14.Instance-> CCR1 = ccr;
 8000f0a:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <StartDefaultTask+0x1cc>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	ed97 7b06 	vldr	d7, [r7, #24]
 8000f12:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f16:	ee17 2a90 	vmov	r2, s15
 8000f1a:	635a      	str	r2, [r3, #52]	; 0x34
	  	//  HAL_Delay(2000);
	  	  osDelay(2000);
 8000f1c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f20:	f006 f990 	bl	8007244 <osDelay>
	  	printf("Hello World \r\n");
 8000f24:	4810      	ldr	r0, [pc, #64]	; (8000f68 <StartDefaultTask+0x1e0>)
 8000f26:	f009 f865 	bl	8009ff4 <puts>
  {
 8000f2a:	e731      	b.n	8000d90 <StartDefaultTask+0x8>
 8000f2c:	f3af 8000 	nop.w
 8000f30:	47ae147b 	.word	0x47ae147b
 8000f34:	3f947ae1 	.word	0x3f947ae1
 8000f38:	01a36e2f 	.word	0x01a36e2f
 8000f3c:	3f5205bc 	.word	0x3f5205bc
 8000f40:	88e368f1 	.word	0x88e368f1
 8000f44:	3ee4f8b5 	.word	0x3ee4f8b5
 8000f48:	d2f1a9fc 	.word	0xd2f1a9fc
 8000f4c:	3f60624d 	.word	0x3f60624d
 8000f50:	240001bc 	.word	0x240001bc
 8000f54:	24000208 	.word	0x24000208
 8000f58:	0800a6f4 	.word	0x0800a6f4
 8000f5c:	0800a704 	.word	0x0800a704
 8000f60:	0800a710 	.word	0x0800a710
 8000f64:	0800a71c 	.word	0x0800a71c
 8000f68:	0800a72c 	.word	0x0800a72c
 8000f6c:	bc6a7efa 	.word	0xbc6a7efa
 8000f70:	3f589374 	.word	0x3f589374

08000f74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a04      	ldr	r2, [pc, #16]	; (8000f94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d101      	bne.n	8000f8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f86:	f000 fba1 	bl	80016cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40001400 	.word	0x40001400

08000f98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f9c:	b672      	cpsid	i
}
 8000f9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <Error_Handler+0x8>
	...

08000fa4 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000fac:	1d39      	adds	r1, r7, #4
 8000fae:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	4803      	ldr	r0, [pc, #12]	; (8000fc4 <__io_putchar+0x20>)
 8000fb6:	f004 ff6e 	bl	8005e96 <HAL_UART_Transmit>
  return ch;
 8000fba:	687b      	ldr	r3, [r7, #4]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	24000254 	.word	0x24000254

08000fc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fce:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <HAL_MspInit+0x38>)
 8000fd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fd4:	4a0a      	ldr	r2, [pc, #40]	; (8001000 <HAL_MspInit+0x38>)
 8000fd6:	f043 0302 	orr.w	r3, r3, #2
 8000fda:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000fde:	4b08      	ldr	r3, [pc, #32]	; (8001000 <HAL_MspInit+0x38>)
 8000fe0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fe4:	f003 0302 	and.w	r3, r3, #2
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fec:	2200      	movs	r2, #0
 8000fee:	210f      	movs	r1, #15
 8000ff0:	f06f 0001 	mvn.w	r0, #1
 8000ff4:	f000 fc4e 	bl	8001894 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	58024400 	.word	0x58024400

08001004 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b0b8      	sub	sp, #224	; 0xe0
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800101c:	f107 0310 	add.w	r3, r7, #16
 8001020:	22bc      	movs	r2, #188	; 0xbc
 8001022:	2100      	movs	r1, #0
 8001024:	4618      	mov	r0, r3
 8001026:	f008 feda 	bl	8009dde <memset>
  if(hfdcan->Instance==FDCAN1)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a25      	ldr	r2, [pc, #148]	; (80010c4 <HAL_FDCAN_MspInit+0xc0>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d142      	bne.n	80010ba <HAL_FDCAN_MspInit+0xb6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001034:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001038:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800103a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800103e:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001040:	f107 0310 	add.w	r3, r7, #16
 8001044:	4618      	mov	r0, r3
 8001046:	f002 f9ff 	bl	8003448 <HAL_RCCEx_PeriphCLKConfig>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001050:	f7ff ffa2 	bl	8000f98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001054:	4b1c      	ldr	r3, [pc, #112]	; (80010c8 <HAL_FDCAN_MspInit+0xc4>)
 8001056:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800105a:	4a1b      	ldr	r2, [pc, #108]	; (80010c8 <HAL_FDCAN_MspInit+0xc4>)
 800105c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001060:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001064:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <HAL_FDCAN_MspInit+0xc4>)
 8001066:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800106a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001072:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <HAL_FDCAN_MspInit+0xc4>)
 8001074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001078:	4a13      	ldr	r2, [pc, #76]	; (80010c8 <HAL_FDCAN_MspInit+0xc4>)
 800107a:	f043 0308 	orr.w	r3, r3, #8
 800107e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <HAL_FDCAN_MspInit+0xc4>)
 8001084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001088:	f003 0308 	and.w	r3, r3, #8
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001090:	2303      	movs	r3, #3
 8001092:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	2300      	movs	r3, #0
 80010a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80010a8:	2309      	movs	r3, #9
 80010aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ae:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010b2:	4619      	mov	r1, r3
 80010b4:	4805      	ldr	r0, [pc, #20]	; (80010cc <HAL_FDCAN_MspInit+0xc8>)
 80010b6:	f000 ff79 	bl	8001fac <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80010ba:	bf00      	nop
 80010bc:	37e0      	adds	r7, #224	; 0xe0
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	4000a000 	.word	0x4000a000
 80010c8:	58024400 	.word	0x58024400
 80010cc:	58020c00 	.word	0x58020c00

080010d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b0b8      	sub	sp, #224	; 0xe0
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010e8:	f107 0310 	add.w	r3, r7, #16
 80010ec:	22bc      	movs	r2, #188	; 0xbc
 80010ee:	2100      	movs	r1, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f008 fe74 	bl	8009dde <memset>
  if(hspi->Instance==SPI4)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a24      	ldr	r2, [pc, #144]	; (800118c <HAL_SPI_MspInit+0xbc>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d141      	bne.n	8001184 <HAL_SPI_MspInit+0xb4>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001100:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001104:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001106:	2300      	movs	r3, #0
 8001108:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800110a:	f107 0310 	add.w	r3, r7, #16
 800110e:	4618      	mov	r0, r3
 8001110:	f002 f99a 	bl	8003448 <HAL_RCCEx_PeriphCLKConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800111a:	f7ff ff3d 	bl	8000f98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800111e:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <HAL_SPI_MspInit+0xc0>)
 8001120:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001124:	4a1a      	ldr	r2, [pc, #104]	; (8001190 <HAL_SPI_MspInit+0xc0>)
 8001126:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800112a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800112e:	4b18      	ldr	r3, [pc, #96]	; (8001190 <HAL_SPI_MspInit+0xc0>)
 8001130:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001134:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800113c:	4b14      	ldr	r3, [pc, #80]	; (8001190 <HAL_SPI_MspInit+0xc0>)
 800113e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001142:	4a13      	ldr	r2, [pc, #76]	; (8001190 <HAL_SPI_MspInit+0xc0>)
 8001144:	f043 0310 	orr.w	r3, r3, #16
 8001148:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800114c:	4b10      	ldr	r3, [pc, #64]	; (8001190 <HAL_SPI_MspInit+0xc0>)
 800114e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001152:	f003 0310 	and.w	r3, r3, #16
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800115a:	2364      	movs	r3, #100	; 0x64
 800115c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001160:	2302      	movs	r3, #2
 8001162:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	2300      	movs	r3, #0
 800116e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001172:	2305      	movs	r3, #5
 8001174:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001178:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800117c:	4619      	mov	r1, r3
 800117e:	4805      	ldr	r0, [pc, #20]	; (8001194 <HAL_SPI_MspInit+0xc4>)
 8001180:	f000 ff14 	bl	8001fac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001184:	bf00      	nop
 8001186:	37e0      	adds	r7, #224	; 0xe0
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40013400 	.word	0x40013400
 8001190:	58024400 	.word	0x58024400
 8001194:	58021000 	.word	0x58021000

08001198 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a16      	ldr	r2, [pc, #88]	; (8001200 <HAL_TIM_Base_MspInit+0x68>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d10f      	bne.n	80011ca <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80011aa:	4b16      	ldr	r3, [pc, #88]	; (8001204 <HAL_TIM_Base_MspInit+0x6c>)
 80011ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011b0:	4a14      	ldr	r2, [pc, #80]	; (8001204 <HAL_TIM_Base_MspInit+0x6c>)
 80011b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011ba:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HAL_TIM_Base_MspInit+0x6c>)
 80011bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80011c8:	e013      	b.n	80011f2 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM14)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a0e      	ldr	r2, [pc, #56]	; (8001208 <HAL_TIM_Base_MspInit+0x70>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d10e      	bne.n	80011f2 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <HAL_TIM_Base_MspInit+0x6c>)
 80011d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011da:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <HAL_TIM_Base_MspInit+0x6c>)
 80011dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011e4:	4b07      	ldr	r3, [pc, #28]	; (8001204 <HAL_TIM_Base_MspInit+0x6c>)
 80011e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
}
 80011f2:	bf00      	nop
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	40001c00 	.word	0x40001c00
 8001204:	58024400 	.word	0x58024400
 8001208:	40002000 	.word	0x40002000

0800120c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	; 0x28
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a26      	ldr	r2, [pc, #152]	; (80012c4 <HAL_TIM_MspPostInit+0xb8>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d120      	bne.n	8001270 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800122e:	4b26      	ldr	r3, [pc, #152]	; (80012c8 <HAL_TIM_MspPostInit+0xbc>)
 8001230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001234:	4a24      	ldr	r2, [pc, #144]	; (80012c8 <HAL_TIM_MspPostInit+0xbc>)
 8001236:	f043 0320 	orr.w	r3, r3, #32
 800123a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800123e:	4b22      	ldr	r3, [pc, #136]	; (80012c8 <HAL_TIM_MspPostInit+0xbc>)
 8001240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001244:	f003 0320 	and.w	r3, r3, #32
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	693b      	ldr	r3, [r7, #16]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800124c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001252:	2302      	movs	r3, #2
 8001254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2300      	movs	r3, #0
 800125c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800125e:	2309      	movs	r3, #9
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	4619      	mov	r1, r3
 8001268:	4818      	ldr	r0, [pc, #96]	; (80012cc <HAL_TIM_MspPostInit+0xc0>)
 800126a:	f000 fe9f 	bl	8001fac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 800126e:	e024      	b.n	80012ba <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM14)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a16      	ldr	r2, [pc, #88]	; (80012d0 <HAL_TIM_MspPostInit+0xc4>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d11f      	bne.n	80012ba <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800127a:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <HAL_TIM_MspPostInit+0xbc>)
 800127c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001280:	4a11      	ldr	r2, [pc, #68]	; (80012c8 <HAL_TIM_MspPostInit+0xbc>)
 8001282:	f043 0320 	orr.w	r3, r3, #32
 8001286:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800128a:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <HAL_TIM_MspPostInit+0xbc>)
 800128c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001290:	f003 0320 	and.w	r3, r3, #32
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001298:	f44f 7300 	mov.w	r3, #512	; 0x200
 800129c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129e:	2302      	movs	r3, #2
 80012a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a6:	2300      	movs	r3, #0
 80012a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80012aa:	2309      	movs	r3, #9
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	4619      	mov	r1, r3
 80012b4:	4805      	ldr	r0, [pc, #20]	; (80012cc <HAL_TIM_MspPostInit+0xc0>)
 80012b6:	f000 fe79 	bl	8001fac <HAL_GPIO_Init>
}
 80012ba:	bf00      	nop
 80012bc:	3728      	adds	r7, #40	; 0x28
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40001c00 	.word	0x40001c00
 80012c8:	58024400 	.word	0x58024400
 80012cc:	58021400 	.word	0x58021400
 80012d0:	40002000 	.word	0x40002000

080012d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b0b8      	sub	sp, #224	; 0xe0
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012ec:	f107 0310 	add.w	r3, r7, #16
 80012f0:	22bc      	movs	r2, #188	; 0xbc
 80012f2:	2100      	movs	r1, #0
 80012f4:	4618      	mov	r0, r3
 80012f6:	f008 fd72 	bl	8009dde <memset>
  if(huart->Instance==USART3)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a25      	ldr	r2, [pc, #148]	; (8001394 <HAL_UART_MspInit+0xc0>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d142      	bne.n	800138a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001304:	2302      	movs	r3, #2
 8001306:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001308:	2300      	movs	r3, #0
 800130a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800130e:	f107 0310 	add.w	r3, r7, #16
 8001312:	4618      	mov	r0, r3
 8001314:	f002 f898 	bl	8003448 <HAL_RCCEx_PeriphCLKConfig>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800131e:	f7ff fe3b 	bl	8000f98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001322:	4b1d      	ldr	r3, [pc, #116]	; (8001398 <HAL_UART_MspInit+0xc4>)
 8001324:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001328:	4a1b      	ldr	r2, [pc, #108]	; (8001398 <HAL_UART_MspInit+0xc4>)
 800132a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800132e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001332:	4b19      	ldr	r3, [pc, #100]	; (8001398 <HAL_UART_MspInit+0xc4>)
 8001334:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001338:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001340:	4b15      	ldr	r3, [pc, #84]	; (8001398 <HAL_UART_MspInit+0xc4>)
 8001342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001346:	4a14      	ldr	r2, [pc, #80]	; (8001398 <HAL_UART_MspInit+0xc4>)
 8001348:	f043 0308 	orr.w	r3, r3, #8
 800134c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <HAL_UART_MspInit+0xc4>)
 8001352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001356:	f003 0308 	and.w	r3, r3, #8
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800135e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001362:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001366:	2302      	movs	r3, #2
 8001368:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2300      	movs	r3, #0
 8001374:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001378:	2307      	movs	r3, #7
 800137a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800137e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001382:	4619      	mov	r1, r3
 8001384:	4805      	ldr	r0, [pc, #20]	; (800139c <HAL_UART_MspInit+0xc8>)
 8001386:	f000 fe11 	bl	8001fac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800138a:	bf00      	nop
 800138c:	37e0      	adds	r7, #224	; 0xe0
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40004800 	.word	0x40004800
 8001398:	58024400 	.word	0x58024400
 800139c:	58020c00 	.word	0x58020c00

080013a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b090      	sub	sp, #64	; 0x40
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b0f      	cmp	r3, #15
 80013ac:	d827      	bhi.n	80013fe <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 80013ae:	2200      	movs	r2, #0
 80013b0:	6879      	ldr	r1, [r7, #4]
 80013b2:	2037      	movs	r0, #55	; 0x37
 80013b4:	f000 fa6e 	bl	8001894 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80013b8:	2037      	movs	r0, #55	; 0x37
 80013ba:	f000 fa85 	bl	80018c8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80013be:	4a29      	ldr	r2, [pc, #164]	; (8001464 <HAL_InitTick+0xc4>)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80013c4:	4b28      	ldr	r3, [pc, #160]	; (8001468 <HAL_InitTick+0xc8>)
 80013c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013ca:	4a27      	ldr	r2, [pc, #156]	; (8001468 <HAL_InitTick+0xc8>)
 80013cc:	f043 0320 	orr.w	r3, r3, #32
 80013d0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80013d4:	4b24      	ldr	r3, [pc, #144]	; (8001468 <HAL_InitTick+0xc8>)
 80013d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013da:	f003 0320 	and.w	r3, r3, #32
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013e2:	f107 0210 	add.w	r2, r7, #16
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	4611      	mov	r1, r2
 80013ec:	4618      	mov	r0, r3
 80013ee:	f001 ffe9 	bl	80033c4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f4:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d106      	bne.n	800140a <HAL_InitTick+0x6a>
 80013fc:	e001      	b.n	8001402 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e02b      	b.n	800145a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001402:	f001 ffb3 	bl	800336c <HAL_RCC_GetPCLK1Freq>
 8001406:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001408:	e004      	b.n	8001414 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800140a:	f001 ffaf 	bl	800336c <HAL_RCC_GetPCLK1Freq>
 800140e:	4603      	mov	r3, r0
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001416:	4a15      	ldr	r2, [pc, #84]	; (800146c <HAL_InitTick+0xcc>)
 8001418:	fba2 2303 	umull	r2, r3, r2, r3
 800141c:	0c9b      	lsrs	r3, r3, #18
 800141e:	3b01      	subs	r3, #1
 8001420:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001422:	4b13      	ldr	r3, [pc, #76]	; (8001470 <HAL_InitTick+0xd0>)
 8001424:	4a13      	ldr	r2, [pc, #76]	; (8001474 <HAL_InitTick+0xd4>)
 8001426:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001428:	4b11      	ldr	r3, [pc, #68]	; (8001470 <HAL_InitTick+0xd0>)
 800142a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800142e:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001430:	4a0f      	ldr	r2, [pc, #60]	; (8001470 <HAL_InitTick+0xd0>)
 8001432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001434:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001436:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <HAL_InitTick+0xd0>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143c:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <HAL_InitTick+0xd0>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001442:	480b      	ldr	r0, [pc, #44]	; (8001470 <HAL_InitTick+0xd0>)
 8001444:	f003 fc89 	bl	8004d5a <HAL_TIM_Base_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d104      	bne.n	8001458 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 800144e:	4808      	ldr	r0, [pc, #32]	; (8001470 <HAL_InitTick+0xd0>)
 8001450:	f003 fcda 	bl	8004e08 <HAL_TIM_Base_Start_IT>
 8001454:	4603      	mov	r3, r0
 8001456:	e000      	b.n	800145a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
}
 800145a:	4618      	mov	r0, r3
 800145c:	3740      	adds	r7, #64	; 0x40
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	24000008 	.word	0x24000008
 8001468:	58024400 	.word	0x58024400
 800146c:	431bde83 	.word	0x431bde83
 8001470:	240002e8 	.word	0x240002e8
 8001474:	40001400 	.word	0x40001400

08001478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800147c:	e7fe      	b.n	800147c <NMI_Handler+0x4>

0800147e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001482:	e7fe      	b.n	8001482 <HardFault_Handler+0x4>

08001484 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <MemManage_Handler+0x4>

0800148a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148e:	e7fe      	b.n	800148e <BusFault_Handler+0x4>

08001490 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <UsageFault_Handler+0x4>

08001496 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80014a8:	4802      	ldr	r0, [pc, #8]	; (80014b4 <TIM7_IRQHandler+0x10>)
 80014aa:	f003 fe95 	bl	80051d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	240002e8 	.word	0x240002e8

080014b8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	e00a      	b.n	80014e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014ca:	f3af 8000 	nop.w
 80014ce:	4601      	mov	r1, r0
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	1c5a      	adds	r2, r3, #1
 80014d4:	60ba      	str	r2, [r7, #8]
 80014d6:	b2ca      	uxtb	r2, r1
 80014d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	3301      	adds	r3, #1
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	697a      	ldr	r2, [r7, #20]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	dbf0      	blt.n	80014ca <_read+0x12>
	}

return len;
 80014e8:	687b      	ldr	r3, [r7, #4]
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b086      	sub	sp, #24
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	60f8      	str	r0, [r7, #12]
 80014fa:	60b9      	str	r1, [r7, #8]
 80014fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
 8001502:	e009      	b.n	8001518 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	1c5a      	adds	r2, r3, #1
 8001508:	60ba      	str	r2, [r7, #8]
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fd49 	bl	8000fa4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	3301      	adds	r3, #1
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	697a      	ldr	r2, [r7, #20]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	429a      	cmp	r2, r3
 800151e:	dbf1      	blt.n	8001504 <_write+0x12>
	}
	return len;
 8001520:	687b      	ldr	r3, [r7, #4]
}
 8001522:	4618      	mov	r0, r3
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <_close>:

int _close(int file)
{
 800152a:	b480      	push	{r7}
 800152c:	b083      	sub	sp, #12
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
	return -1;
 8001532:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001536:	4618      	mov	r0, r3
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
 800154a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001552:	605a      	str	r2, [r3, #4]
	return 0;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <_isatty>:

int _isatty(int file)
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
	return 1;
 800156a:	2301      	movs	r3, #1
}
 800156c:	4618      	mov	r0, r3
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
	return 0;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
	...

08001594 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800159c:	4a14      	ldr	r2, [pc, #80]	; (80015f0 <_sbrk+0x5c>)
 800159e:	4b15      	ldr	r3, [pc, #84]	; (80015f4 <_sbrk+0x60>)
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015a8:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <_sbrk+0x64>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d102      	bne.n	80015b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015b0:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <_sbrk+0x64>)
 80015b2:	4a12      	ldr	r2, [pc, #72]	; (80015fc <_sbrk+0x68>)
 80015b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015b6:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <_sbrk+0x64>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4413      	add	r3, r2
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d207      	bcs.n	80015d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015c4:	f008 fada 	bl	8009b7c <__errno>
 80015c8:	4603      	mov	r3, r0
 80015ca:	220c      	movs	r2, #12
 80015cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ce:	f04f 33ff 	mov.w	r3, #4294967295
 80015d2:	e009      	b.n	80015e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015d4:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <_sbrk+0x64>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015da:	4b07      	ldr	r3, [pc, #28]	; (80015f8 <_sbrk+0x64>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4413      	add	r3, r2
 80015e2:	4a05      	ldr	r2, [pc, #20]	; (80015f8 <_sbrk+0x64>)
 80015e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015e6:	68fb      	ldr	r3, [r7, #12]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	24080000 	.word	0x24080000
 80015f4:	00000400 	.word	0x00000400
 80015f8:	24000334 	.word	0x24000334
 80015fc:	24004d60 	.word	0x24004d60

08001600 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001600:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001638 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001604:	f7fe ffee 	bl	80005e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001608:	480c      	ldr	r0, [pc, #48]	; (800163c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800160a:	490d      	ldr	r1, [pc, #52]	; (8001640 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800160c:	4a0d      	ldr	r2, [pc, #52]	; (8001644 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800160e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001610:	e002      	b.n	8001618 <LoopCopyDataInit>

08001612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001616:	3304      	adds	r3, #4

08001618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800161a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800161c:	d3f9      	bcc.n	8001612 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800161e:	4a0a      	ldr	r2, [pc, #40]	; (8001648 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001620:	4c0a      	ldr	r4, [pc, #40]	; (800164c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001624:	e001      	b.n	800162a <LoopFillZerobss>

08001626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001628:	3204      	adds	r2, #4

0800162a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800162a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800162c:	d3fb      	bcc.n	8001626 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800162e:	f008 fba1 	bl	8009d74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001632:	f7ff f86d 	bl	8000710 <main>
  bx  lr
 8001636:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001638:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800163c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001640:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8001644:	0800a870 	.word	0x0800a870
  ldr r2, =_sbss
 8001648:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 800164c:	24004d5c 	.word	0x24004d5c

08001650 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001650:	e7fe      	b.n	8001650 <ADC3_IRQHandler>
	...

08001654 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800165a:	2003      	movs	r0, #3
 800165c:	f000 f90f 	bl	800187e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001660:	f001 fcda 	bl	8003018 <HAL_RCC_GetSysClockFreq>
 8001664:	4602      	mov	r2, r0
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <HAL_Init+0x68>)
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	0a1b      	lsrs	r3, r3, #8
 800166c:	f003 030f 	and.w	r3, r3, #15
 8001670:	4913      	ldr	r1, [pc, #76]	; (80016c0 <HAL_Init+0x6c>)
 8001672:	5ccb      	ldrb	r3, [r1, r3]
 8001674:	f003 031f 	and.w	r3, r3, #31
 8001678:	fa22 f303 	lsr.w	r3, r2, r3
 800167c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800167e:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <HAL_Init+0x68>)
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	f003 030f 	and.w	r3, r3, #15
 8001686:	4a0e      	ldr	r2, [pc, #56]	; (80016c0 <HAL_Init+0x6c>)
 8001688:	5cd3      	ldrb	r3, [r2, r3]
 800168a:	f003 031f 	and.w	r3, r3, #31
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	fa22 f303 	lsr.w	r3, r2, r3
 8001694:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <HAL_Init+0x70>)
 8001696:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001698:	4a0b      	ldr	r2, [pc, #44]	; (80016c8 <HAL_Init+0x74>)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800169e:	200f      	movs	r0, #15
 80016a0:	f7ff fe7e 	bl	80013a0 <HAL_InitTick>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e002      	b.n	80016b4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016ae:	f7ff fc8b 	bl	8000fc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	58024400 	.word	0x58024400
 80016c0:	0800a7a0 	.word	0x0800a7a0
 80016c4:	24000004 	.word	0x24000004
 80016c8:	24000000 	.word	0x24000000

080016cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <HAL_IncTick+0x20>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_IncTick+0x24>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4413      	add	r3, r2
 80016dc:	4a04      	ldr	r2, [pc, #16]	; (80016f0 <HAL_IncTick+0x24>)
 80016de:	6013      	str	r3, [r2, #0]
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	2400000c 	.word	0x2400000c
 80016f0:	24000338 	.word	0x24000338

080016f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return uwTick;
 80016f8:	4b03      	ldr	r3, [pc, #12]	; (8001708 <HAL_GetTick+0x14>)
 80016fa:	681b      	ldr	r3, [r3, #0]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	24000338 	.word	0x24000338

0800170c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001710:	4b03      	ldr	r3, [pc, #12]	; (8001720 <HAL_GetREVID+0x14>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	0c1b      	lsrs	r3, r3, #16
}
 8001716:	4618      	mov	r0, r3
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	5c001000 	.word	0x5c001000

08001724 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001734:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <__NVIC_SetPriorityGrouping+0x40>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800173a:	68ba      	ldr	r2, [r7, #8]
 800173c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001740:	4013      	ands	r3, r2
 8001742:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <__NVIC_SetPriorityGrouping+0x44>)
 800174e:	4313      	orrs	r3, r2
 8001750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001752:	4a04      	ldr	r2, [pc, #16]	; (8001764 <__NVIC_SetPriorityGrouping+0x40>)
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	60d3      	str	r3, [r2, #12]
}
 8001758:	bf00      	nop
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000ed00 	.word	0xe000ed00
 8001768:	05fa0000 	.word	0x05fa0000

0800176c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001770:	4b04      	ldr	r3, [pc, #16]	; (8001784 <__NVIC_GetPriorityGrouping+0x18>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	0a1b      	lsrs	r3, r3, #8
 8001776:	f003 0307 	and.w	r3, r3, #7
}
 800177a:	4618      	mov	r0, r3
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001792:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001796:	2b00      	cmp	r3, #0
 8001798:	db0b      	blt.n	80017b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800179a:	88fb      	ldrh	r3, [r7, #6]
 800179c:	f003 021f 	and.w	r2, r3, #31
 80017a0:	4907      	ldr	r1, [pc, #28]	; (80017c0 <__NVIC_EnableIRQ+0x38>)
 80017a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017a6:	095b      	lsrs	r3, r3, #5
 80017a8:	2001      	movs	r0, #1
 80017aa:	fa00 f202 	lsl.w	r2, r0, r2
 80017ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	e000e100 	.word	0xe000e100

080017c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	6039      	str	r1, [r7, #0]
 80017ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	db0a      	blt.n	80017ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	490c      	ldr	r1, [pc, #48]	; (8001810 <__NVIC_SetPriority+0x4c>)
 80017de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017e2:	0112      	lsls	r2, r2, #4
 80017e4:	b2d2      	uxtb	r2, r2
 80017e6:	440b      	add	r3, r1
 80017e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017ec:	e00a      	b.n	8001804 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	4908      	ldr	r1, [pc, #32]	; (8001814 <__NVIC_SetPriority+0x50>)
 80017f4:	88fb      	ldrh	r3, [r7, #6]
 80017f6:	f003 030f 	and.w	r3, r3, #15
 80017fa:	3b04      	subs	r3, #4
 80017fc:	0112      	lsls	r2, r2, #4
 80017fe:	b2d2      	uxtb	r2, r2
 8001800:	440b      	add	r3, r1
 8001802:	761a      	strb	r2, [r3, #24]
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	e000e100 	.word	0xe000e100
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001818:	b480      	push	{r7}
 800181a:	b089      	sub	sp, #36	; 0x24
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	f1c3 0307 	rsb	r3, r3, #7
 8001832:	2b04      	cmp	r3, #4
 8001834:	bf28      	it	cs
 8001836:	2304      	movcs	r3, #4
 8001838:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	3304      	adds	r3, #4
 800183e:	2b06      	cmp	r3, #6
 8001840:	d902      	bls.n	8001848 <NVIC_EncodePriority+0x30>
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	3b03      	subs	r3, #3
 8001846:	e000      	b.n	800184a <NVIC_EncodePriority+0x32>
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800184c:	f04f 32ff 	mov.w	r2, #4294967295
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43da      	mvns	r2, r3
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	401a      	ands	r2, r3
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001860:	f04f 31ff 	mov.w	r1, #4294967295
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	fa01 f303 	lsl.w	r3, r1, r3
 800186a:	43d9      	mvns	r1, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001870:	4313      	orrs	r3, r2
         );
}
 8001872:	4618      	mov	r0, r3
 8001874:	3724      	adds	r7, #36	; 0x24
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ff4c 	bl	8001724 <__NVIC_SetPriorityGrouping>
}
 800188c:	bf00      	nop
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
 80018a0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018a2:	f7ff ff63 	bl	800176c <__NVIC_GetPriorityGrouping>
 80018a6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	68b9      	ldr	r1, [r7, #8]
 80018ac:	6978      	ldr	r0, [r7, #20]
 80018ae:	f7ff ffb3 	bl	8001818 <NVIC_EncodePriority>
 80018b2:	4602      	mov	r2, r0
 80018b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018b8:	4611      	mov	r1, r2
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff ff82 	bl	80017c4 <__NVIC_SetPriority>
}
 80018c0:	bf00      	nop
 80018c2:	3718      	adds	r7, #24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff ff56 	bl	8001788 <__NVIC_EnableIRQ>
}
 80018dc:	bf00      	nop
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b098      	sub	sp, #96	; 0x60
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80018ec:	4a84      	ldr	r2, [pc, #528]	; (8001b00 <HAL_FDCAN_Init+0x21c>)
 80018ee:	f107 030c 	add.w	r3, r7, #12
 80018f2:	4611      	mov	r1, r2
 80018f4:	224c      	movs	r2, #76	; 0x4c
 80018f6:	4618      	mov	r0, r3
 80018f8:	f008 fa63 	bl	8009dc2 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e1c6      	b.n	8001c94 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a7e      	ldr	r2, [pc, #504]	; (8001b04 <HAL_FDCAN_Init+0x220>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d106      	bne.n	800191e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001918:	461a      	mov	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	d106      	bne.n	8001938 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7ff fb66 	bl	8001004 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	699a      	ldr	r2, [r3, #24]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 0210 	bic.w	r2, r2, #16
 8001946:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001948:	f7ff fed4 	bl	80016f4 <HAL_GetTick>
 800194c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800194e:	e014      	b.n	800197a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001950:	f7ff fed0 	bl	80016f4 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b0a      	cmp	r3, #10
 800195c:	d90d      	bls.n	800197a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001964:	f043 0201 	orr.w	r2, r3, #1
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2203      	movs	r2, #3
 8001972:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e18c      	b.n	8001c94 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	f003 0308 	and.w	r3, r3, #8
 8001984:	2b08      	cmp	r3, #8
 8001986:	d0e3      	beq.n	8001950 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	699a      	ldr	r2, [r3, #24]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f042 0201 	orr.w	r2, r2, #1
 8001996:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001998:	f7ff feac 	bl	80016f4 <HAL_GetTick>
 800199c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800199e:	e014      	b.n	80019ca <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80019a0:	f7ff fea8 	bl	80016f4 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b0a      	cmp	r3, #10
 80019ac:	d90d      	bls.n	80019ca <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80019b4:	f043 0201 	orr.w	r2, r3, #1
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2203      	movs	r2, #3
 80019c2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e164      	b.n	8001c94 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0e3      	beq.n	80019a0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	699a      	ldr	r2, [r3, #24]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f042 0202 	orr.w	r2, r2, #2
 80019e6:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	7c1b      	ldrb	r3, [r3, #16]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d108      	bne.n	8001a02 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	699a      	ldr	r2, [r3, #24]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019fe:	619a      	str	r2, [r3, #24]
 8001a00:	e007      	b.n	8001a12 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	699a      	ldr	r2, [r3, #24]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a10:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	7c5b      	ldrb	r3, [r3, #17]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d108      	bne.n	8001a2c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	699a      	ldr	r2, [r3, #24]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a28:	619a      	str	r2, [r3, #24]
 8001a2a:	e007      	b.n	8001a3c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	699a      	ldr	r2, [r3, #24]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001a3a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	7c9b      	ldrb	r3, [r3, #18]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d108      	bne.n	8001a56 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	699a      	ldr	r2, [r3, #24]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a52:	619a      	str	r2, [r3, #24]
 8001a54:	e007      	b.n	8001a66 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	699a      	ldr	r2, [r3, #24]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001a64:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	699a      	ldr	r2, [r3, #24]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001a8a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	691a      	ldr	r2, [r3, #16]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 0210 	bic.w	r2, r2, #16
 8001a9a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d108      	bne.n	8001ab6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	699a      	ldr	r2, [r3, #24]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f042 0204 	orr.w	r2, r2, #4
 8001ab2:	619a      	str	r2, [r3, #24]
 8001ab4:	e030      	b.n	8001b18 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d02c      	beq.n	8001b18 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d020      	beq.n	8001b08 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	699a      	ldr	r2, [r3, #24]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ad4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	691a      	ldr	r2, [r3, #16]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f042 0210 	orr.w	r2, r2, #16
 8001ae4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	2b03      	cmp	r3, #3
 8001aec:	d114      	bne.n	8001b18 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	699a      	ldr	r2, [r3, #24]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f042 0220 	orr.w	r2, r2, #32
 8001afc:	619a      	str	r2, [r3, #24]
 8001afe:	e00b      	b.n	8001b18 <HAL_FDCAN_Init+0x234>
 8001b00:	0800a73c 	.word	0x0800a73c
 8001b04:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	699a      	ldr	r2, [r3, #24]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f042 0220 	orr.w	r2, r2, #32
 8001b16:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	69db      	ldr	r3, [r3, #28]
 8001b24:	3b01      	subs	r3, #1
 8001b26:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001b28:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
 8001b2e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001b30:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001b40:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001b42:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001b4c:	d115      	bne.n	8001b7a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b52:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001b5c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	3b01      	subs	r3, #1
 8001b64:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001b66:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001b76:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001b78:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00a      	beq.n	8001b98 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	430a      	orrs	r2, r1
 8001b94:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ba0:	4413      	add	r3, r2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d011      	beq.n	8001bca <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001bae:	f023 0107 	bic.w	r1, r3, #7
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	3360      	adds	r3, #96	; 0x60
 8001bba:	443b      	add	r3, r7
 8001bbc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d011      	beq.n	8001bf6 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001bda:	f023 0107 	bic.w	r1, r3, #7
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	3360      	adds	r3, #96	; 0x60
 8001be6:	443b      	add	r3, r7
 8001be8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d012      	beq.n	8001c24 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001c06:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	3360      	adds	r3, #96	; 0x60
 8001c12:	443b      	add	r3, r7
 8001c14:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001c18:	011a      	lsls	r2, r3, #4
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d012      	beq.n	8001c52 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001c34:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	3360      	adds	r3, #96	; 0x60
 8001c40:	443b      	add	r3, r7
 8001c42:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001c46:	021a      	lsls	r2, r3, #8
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a11      	ldr	r2, [pc, #68]	; (8001c9c <HAL_FDCAN_Init+0x3b8>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d107      	bne.n	8001c6c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	689a      	ldr	r2, [r3, #8]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f022 0203 	bic.w	r2, r2, #3
 8001c6a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f80b 	bl	8001ca0 <FDCAN_CalcultateRamBlockAddresses>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8001c90:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3760      	adds	r7, #96	; 0x60
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	4000a000 	.word	0x4000a000

08001ca0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cac:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001cb6:	4ba7      	ldr	r3, [pc, #668]	; (8001f54 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001cb8:	4013      	ands	r3, r2
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	0091      	lsls	r1, r2, #2
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6812      	ldr	r2, [r2, #0]
 8001cc2:	430b      	orrs	r3, r1
 8001cc4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cd0:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd8:	041a      	lsls	r2, r3, #16
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce8:	68ba      	ldr	r2, [r7, #8]
 8001cea:	4413      	add	r3, r2
 8001cec:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001cf6:	4b97      	ldr	r3, [pc, #604]	; (8001f54 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	0091      	lsls	r1, r2, #2
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	6812      	ldr	r2, [r2, #0]
 8001d02:	430b      	orrs	r3, r1
 8001d04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d10:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d18:	041a      	lsls	r2, r3, #16
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	68ba      	ldr	r2, [r7, #8]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001d38:	4b86      	ldr	r3, [pc, #536]	; (8001f54 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	68ba      	ldr	r2, [r7, #8]
 8001d3e:	0091      	lsls	r1, r2, #2
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	6812      	ldr	r2, [r2, #0]
 8001d44:	430b      	orrs	r3, r1
 8001d46:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001d52:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	041a      	lsls	r2, r3, #16
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	430a      	orrs	r2, r1
 8001d62:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d6e:	fb02 f303 	mul.w	r3, r2, r3
 8001d72:	68ba      	ldr	r2, [r7, #8]
 8001d74:	4413      	add	r3, r2
 8001d76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001d80:	4b74      	ldr	r3, [pc, #464]	; (8001f54 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d82:	4013      	ands	r3, r2
 8001d84:	68ba      	ldr	r2, [r7, #8]
 8001d86:	0091      	lsls	r1, r2, #2
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6812      	ldr	r2, [r2, #0]
 8001d8c:	430b      	orrs	r3, r1
 8001d8e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001d9a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001da2:	041a      	lsls	r2, r3, #16
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	430a      	orrs	r2, r1
 8001daa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001db6:	fb02 f303 	mul.w	r3, r2, r3
 8001dba:	68ba      	ldr	r2, [r7, #8]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001dc8:	4b62      	ldr	r3, [pc, #392]	; (8001f54 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001dca:	4013      	ands	r3, r2
 8001dcc:	68ba      	ldr	r2, [r7, #8]
 8001dce:	0091      	lsls	r1, r2, #2
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	6812      	ldr	r2, [r2, #0]
 8001dd4:	430b      	orrs	r3, r1
 8001dd6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001de2:	fb02 f303 	mul.w	r3, r2, r3
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	4413      	add	r3, r2
 8001dea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001df4:	4b57      	ldr	r3, [pc, #348]	; (8001f54 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001df6:	4013      	ands	r3, r2
 8001df8:	68ba      	ldr	r2, [r7, #8]
 8001dfa:	0091      	lsls	r1, r2, #2
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	6812      	ldr	r2, [r2, #0]
 8001e00:	430b      	orrs	r3, r1
 8001e02:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e0e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e16:	041a      	lsls	r2, r3, #16
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	68ba      	ldr	r2, [r7, #8]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001e36:	4b47      	ldr	r3, [pc, #284]	; (8001f54 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e38:	4013      	ands	r3, r2
 8001e3a:	68ba      	ldr	r2, [r7, #8]
 8001e3c:	0091      	lsls	r1, r2, #2
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6812      	ldr	r2, [r2, #0]
 8001e42:	430b      	orrs	r3, r1
 8001e44:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001e50:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e58:	041a      	lsls	r2, r3, #16
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001e6c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e74:	061a      	lsls	r2, r3, #24
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e84:	4b34      	ldr	r3, [pc, #208]	; (8001f58 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8001e86:	4413      	add	r3, r2
 8001e88:	009a      	lsls	r2, r3, #2
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	441a      	add	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	441a      	add	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8001eba:	fb01 f303 	mul.w	r3, r1, r3
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	441a      	add	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8001ed2:	fb01 f303 	mul.w	r3, r1, r3
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	441a      	add	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8001eea:	fb01 f303 	mul.w	r3, r1, r3
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	441a      	add	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	441a      	add	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001f1a:	fb01 f303 	mul.w	r3, r1, r3
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	441a      	add	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001f36:	fb01 f303 	mul.w	r3, r1, r3
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	441a      	add	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f4a:	4a04      	ldr	r2, [pc, #16]	; (8001f5c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d915      	bls.n	8001f7c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8001f50:	e006      	b.n	8001f60 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8001f52:	bf00      	nop
 8001f54:	ffff0003 	.word	0xffff0003
 8001f58:	10002b00 	.word	0x10002b00
 8001f5c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001f66:	f043 0220 	orr.w	r2, r3, #32
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2203      	movs	r2, #3
 8001f74:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e010      	b.n	8001f9e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	e005      	b.n	8001f90 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d3f3      	bcc.n	8001f84 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3714      	adds	r7, #20
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop

08001fac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b089      	sub	sp, #36	; 0x24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001fba:	4b89      	ldr	r3, [pc, #548]	; (80021e0 <HAL_GPIO_Init+0x234>)
 8001fbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001fbe:	e194      	b.n	80022ea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fcc:	4013      	ands	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f000 8186 	beq.w	80022e4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 0303 	and.w	r3, r3, #3
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d005      	beq.n	8001ff0 <HAL_GPIO_Init+0x44>
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 0303 	and.w	r3, r3, #3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d130      	bne.n	8002052 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4013      	ands	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	68da      	ldr	r2, [r3, #12]
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4313      	orrs	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002026:	2201      	movs	r2, #1
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43db      	mvns	r3, r3
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4013      	ands	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	091b      	lsrs	r3, r3, #4
 800203c:	f003 0201 	and.w	r2, r3, #1
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4313      	orrs	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	2b03      	cmp	r3, #3
 800205c:	d017      	beq.n	800208e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	2203      	movs	r2, #3
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4013      	ands	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4313      	orrs	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d123      	bne.n	80020e2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	08da      	lsrs	r2, r3, #3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	3208      	adds	r2, #8
 80020a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	220f      	movs	r2, #15
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4013      	ands	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	691a      	ldr	r2, [r3, #16]
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	08da      	lsrs	r2, r3, #3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3208      	adds	r2, #8
 80020dc:	69b9      	ldr	r1, [r7, #24]
 80020de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	2203      	movs	r2, #3
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4013      	ands	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f003 0203 	and.w	r2, r3, #3
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 80e0 	beq.w	80022e4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002124:	4b2f      	ldr	r3, [pc, #188]	; (80021e4 <HAL_GPIO_Init+0x238>)
 8002126:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800212a:	4a2e      	ldr	r2, [pc, #184]	; (80021e4 <HAL_GPIO_Init+0x238>)
 800212c:	f043 0302 	orr.w	r3, r3, #2
 8002130:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002134:	4b2b      	ldr	r3, [pc, #172]	; (80021e4 <HAL_GPIO_Init+0x238>)
 8002136:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002142:	4a29      	ldr	r2, [pc, #164]	; (80021e8 <HAL_GPIO_Init+0x23c>)
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	089b      	lsrs	r3, r3, #2
 8002148:	3302      	adds	r3, #2
 800214a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	220f      	movs	r2, #15
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a20      	ldr	r2, [pc, #128]	; (80021ec <HAL_GPIO_Init+0x240>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d052      	beq.n	8002214 <HAL_GPIO_Init+0x268>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a1f      	ldr	r2, [pc, #124]	; (80021f0 <HAL_GPIO_Init+0x244>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d031      	beq.n	80021da <HAL_GPIO_Init+0x22e>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a1e      	ldr	r2, [pc, #120]	; (80021f4 <HAL_GPIO_Init+0x248>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d02b      	beq.n	80021d6 <HAL_GPIO_Init+0x22a>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a1d      	ldr	r2, [pc, #116]	; (80021f8 <HAL_GPIO_Init+0x24c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d025      	beq.n	80021d2 <HAL_GPIO_Init+0x226>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a1c      	ldr	r2, [pc, #112]	; (80021fc <HAL_GPIO_Init+0x250>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d01f      	beq.n	80021ce <HAL_GPIO_Init+0x222>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a1b      	ldr	r2, [pc, #108]	; (8002200 <HAL_GPIO_Init+0x254>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d019      	beq.n	80021ca <HAL_GPIO_Init+0x21e>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a1a      	ldr	r2, [pc, #104]	; (8002204 <HAL_GPIO_Init+0x258>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d013      	beq.n	80021c6 <HAL_GPIO_Init+0x21a>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a19      	ldr	r2, [pc, #100]	; (8002208 <HAL_GPIO_Init+0x25c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d00d      	beq.n	80021c2 <HAL_GPIO_Init+0x216>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a18      	ldr	r2, [pc, #96]	; (800220c <HAL_GPIO_Init+0x260>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d007      	beq.n	80021be <HAL_GPIO_Init+0x212>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a17      	ldr	r2, [pc, #92]	; (8002210 <HAL_GPIO_Init+0x264>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d101      	bne.n	80021ba <HAL_GPIO_Init+0x20e>
 80021b6:	2309      	movs	r3, #9
 80021b8:	e02d      	b.n	8002216 <HAL_GPIO_Init+0x26a>
 80021ba:	230a      	movs	r3, #10
 80021bc:	e02b      	b.n	8002216 <HAL_GPIO_Init+0x26a>
 80021be:	2308      	movs	r3, #8
 80021c0:	e029      	b.n	8002216 <HAL_GPIO_Init+0x26a>
 80021c2:	2307      	movs	r3, #7
 80021c4:	e027      	b.n	8002216 <HAL_GPIO_Init+0x26a>
 80021c6:	2306      	movs	r3, #6
 80021c8:	e025      	b.n	8002216 <HAL_GPIO_Init+0x26a>
 80021ca:	2305      	movs	r3, #5
 80021cc:	e023      	b.n	8002216 <HAL_GPIO_Init+0x26a>
 80021ce:	2304      	movs	r3, #4
 80021d0:	e021      	b.n	8002216 <HAL_GPIO_Init+0x26a>
 80021d2:	2303      	movs	r3, #3
 80021d4:	e01f      	b.n	8002216 <HAL_GPIO_Init+0x26a>
 80021d6:	2302      	movs	r3, #2
 80021d8:	e01d      	b.n	8002216 <HAL_GPIO_Init+0x26a>
 80021da:	2301      	movs	r3, #1
 80021dc:	e01b      	b.n	8002216 <HAL_GPIO_Init+0x26a>
 80021de:	bf00      	nop
 80021e0:	58000080 	.word	0x58000080
 80021e4:	58024400 	.word	0x58024400
 80021e8:	58000400 	.word	0x58000400
 80021ec:	58020000 	.word	0x58020000
 80021f0:	58020400 	.word	0x58020400
 80021f4:	58020800 	.word	0x58020800
 80021f8:	58020c00 	.word	0x58020c00
 80021fc:	58021000 	.word	0x58021000
 8002200:	58021400 	.word	0x58021400
 8002204:	58021800 	.word	0x58021800
 8002208:	58021c00 	.word	0x58021c00
 800220c:	58022000 	.word	0x58022000
 8002210:	58022400 	.word	0x58022400
 8002214:	2300      	movs	r3, #0
 8002216:	69fa      	ldr	r2, [r7, #28]
 8002218:	f002 0203 	and.w	r2, r2, #3
 800221c:	0092      	lsls	r2, r2, #2
 800221e:	4093      	lsls	r3, r2
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4313      	orrs	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002226:	4938      	ldr	r1, [pc, #224]	; (8002308 <HAL_GPIO_Init+0x35c>)
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	089b      	lsrs	r3, r3, #2
 800222c:	3302      	adds	r3, #2
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	43db      	mvns	r3, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4013      	ands	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	4313      	orrs	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800225a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002288:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	43db      	mvns	r3, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4013      	ands	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	43db      	mvns	r3, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4013      	ands	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	3301      	adds	r3, #1
 80022e8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	fa22 f303 	lsr.w	r3, r2, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f47f ae63 	bne.w	8001fc0 <HAL_GPIO_Init+0x14>
  }
}
 80022fa:	bf00      	nop
 80022fc:	bf00      	nop
 80022fe:	3724      	adds	r7, #36	; 0x24
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	58000400 	.word	0x58000400

0800230c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	460b      	mov	r3, r1
 8002316:	807b      	strh	r3, [r7, #2]
 8002318:	4613      	mov	r3, r2
 800231a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800231c:	787b      	ldrb	r3, [r7, #1]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002322:	887a      	ldrh	r2, [r7, #2]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002328:	e003      	b.n	8002332 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800232a:	887b      	ldrh	r3, [r7, #2]
 800232c:	041a      	lsls	r2, r3, #16
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	619a      	str	r2, [r3, #24]
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
	...

08002340 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002348:	4a08      	ldr	r2, [pc, #32]	; (800236c <HAL_HSEM_FastTake+0x2c>)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	3320      	adds	r3, #32
 800234e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002352:	4a07      	ldr	r2, [pc, #28]	; (8002370 <HAL_HSEM_FastTake+0x30>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d101      	bne.n	800235c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002358:	2300      	movs	r3, #0
 800235a:	e000      	b.n	800235e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
}
 800235e:	4618      	mov	r0, r3
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	58026400 	.word	0x58026400
 8002370:	80000300 	.word	0x80000300

08002374 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800237e:	4906      	ldr	r1, [pc, #24]	; (8002398 <HAL_HSEM_Release+0x24>)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	58026400 	.word	0x58026400

0800239c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80023a4:	4b29      	ldr	r3, [pc, #164]	; (800244c <HAL_PWREx_ConfigSupply+0xb0>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	2b06      	cmp	r3, #6
 80023ae:	d00a      	beq.n	80023c6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80023b0:	4b26      	ldr	r3, [pc, #152]	; (800244c <HAL_PWREx_ConfigSupply+0xb0>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d001      	beq.n	80023c2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e040      	b.n	8002444 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80023c2:	2300      	movs	r3, #0
 80023c4:	e03e      	b.n	8002444 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80023c6:	4b21      	ldr	r3, [pc, #132]	; (800244c <HAL_PWREx_ConfigSupply+0xb0>)
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80023ce:	491f      	ldr	r1, [pc, #124]	; (800244c <HAL_PWREx_ConfigSupply+0xb0>)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80023d6:	f7ff f98d 	bl	80016f4 <HAL_GetTick>
 80023da:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80023dc:	e009      	b.n	80023f2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80023de:	f7ff f989 	bl	80016f4 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023ec:	d901      	bls.n	80023f2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e028      	b.n	8002444 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80023f2:	4b16      	ldr	r3, [pc, #88]	; (800244c <HAL_PWREx_ConfigSupply+0xb0>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023fe:	d1ee      	bne.n	80023de <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b1e      	cmp	r3, #30
 8002404:	d008      	beq.n	8002418 <HAL_PWREx_ConfigSupply+0x7c>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b2e      	cmp	r3, #46	; 0x2e
 800240a:	d005      	beq.n	8002418 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b1d      	cmp	r3, #29
 8002410:	d002      	beq.n	8002418 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b2d      	cmp	r3, #45	; 0x2d
 8002416:	d114      	bne.n	8002442 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002418:	f7ff f96c 	bl	80016f4 <HAL_GetTick>
 800241c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800241e:	e009      	b.n	8002434 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002420:	f7ff f968 	bl	80016f4 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800242e:	d901      	bls.n	8002434 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e007      	b.n	8002444 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002434:	4b05      	ldr	r3, [pc, #20]	; (800244c <HAL_PWREx_ConfigSupply+0xb0>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800243c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002440:	d1ee      	bne.n	8002420 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	58024800 	.word	0x58024800

08002450 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b08c      	sub	sp, #48	; 0x30
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d102      	bne.n	8002464 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	f000 bc1d 	b.w	8002c9e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b00      	cmp	r3, #0
 800246e:	f000 8087 	beq.w	8002580 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002472:	4b99      	ldr	r3, [pc, #612]	; (80026d8 <HAL_RCC_OscConfig+0x288>)
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800247a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800247c:	4b96      	ldr	r3, [pc, #600]	; (80026d8 <HAL_RCC_OscConfig+0x288>)
 800247e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002480:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002484:	2b10      	cmp	r3, #16
 8002486:	d007      	beq.n	8002498 <HAL_RCC_OscConfig+0x48>
 8002488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248a:	2b18      	cmp	r3, #24
 800248c:	d110      	bne.n	80024b0 <HAL_RCC_OscConfig+0x60>
 800248e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002490:	f003 0303 	and.w	r3, r3, #3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d10b      	bne.n	80024b0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002498:	4b8f      	ldr	r3, [pc, #572]	; (80026d8 <HAL_RCC_OscConfig+0x288>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d06c      	beq.n	800257e <HAL_RCC_OscConfig+0x12e>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d168      	bne.n	800257e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e3f6      	b.n	8002c9e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024b8:	d106      	bne.n	80024c8 <HAL_RCC_OscConfig+0x78>
 80024ba:	4b87      	ldr	r3, [pc, #540]	; (80026d8 <HAL_RCC_OscConfig+0x288>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a86      	ldr	r2, [pc, #536]	; (80026d8 <HAL_RCC_OscConfig+0x288>)
 80024c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	e02e      	b.n	8002526 <HAL_RCC_OscConfig+0xd6>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10c      	bne.n	80024ea <HAL_RCC_OscConfig+0x9a>
 80024d0:	4b81      	ldr	r3, [pc, #516]	; (80026d8 <HAL_RCC_OscConfig+0x288>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a80      	ldr	r2, [pc, #512]	; (80026d8 <HAL_RCC_OscConfig+0x288>)
 80024d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024da:	6013      	str	r3, [r2, #0]
 80024dc:	4b7e      	ldr	r3, [pc, #504]	; (80026d8 <HAL_RCC_OscConfig+0x288>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a7d      	ldr	r2, [pc, #500]	; (80026d8 <HAL_RCC_OscConfig+0x288>)
 80024e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024e6:	6013      	str	r3, [r2, #0]
 80024e8:	e01d      	b.n	8002526 <HAL_RCC_OscConfig+0xd6>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024f2:	d10c      	bne.n	800250e <HAL_RCC_OscConfig+0xbe>
 80024f4:	4b78      	ldr	r3, [pc, #480]	; (80026d8 <HAL_RCC_OscConfig+0x288>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a77      	ldr	r2, [pc, #476]	; (80026d8 <HAL_RCC_OscConfig+0x288>)
 80024fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024fe:	6013      	str	r3, [r2, #0]
 8002500:	4b75      	ldr	r3, [pc, #468]	; (80026d8 <HAL_RCC_OscConfig+0x288>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a74      	ldr	r2, [pc, #464]	; (80026d8 <HAL_RCC_OscConfig+0x288>)
 8002506:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800250a:	6013      	str	r3, [r2, #0]
 800250c:	e00b      	b.n	8002526 <HAL_RCC_OscConfig+0xd6>
 800250e:	4b72      	ldr	r3, [pc, #456]	; (80026d8 <HAL_RCC_OscConfig+0x288>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a71      	ldr	r2, [pc, #452]	; (80026d8 <HAL_RCC_OscConfig+0x288>)
 8002514:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	4b6f      	ldr	r3, [pc, #444]	; (80026d8 <HAL_RCC_OscConfig+0x288>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a6e      	ldr	r2, [pc, #440]	; (80026d8 <HAL_RCC_OscConfig+0x288>)
 8002520:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002524:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d013      	beq.n	8002556 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252e:	f7ff f8e1 	bl	80016f4 <HAL_GetTick>
 8002532:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002536:	f7ff f8dd 	bl	80016f4 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b64      	cmp	r3, #100	; 0x64
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e3aa      	b.n	8002c9e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002548:	4b63      	ldr	r3, [pc, #396]	; (80026d8 <HAL_RCC_OscConfig+0x288>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0f0      	beq.n	8002536 <HAL_RCC_OscConfig+0xe6>
 8002554:	e014      	b.n	8002580 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002556:	f7ff f8cd 	bl	80016f4 <HAL_GetTick>
 800255a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800255e:	f7ff f8c9 	bl	80016f4 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b64      	cmp	r3, #100	; 0x64
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e396      	b.n	8002c9e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002570:	4b59      	ldr	r3, [pc, #356]	; (80026d8 <HAL_RCC_OscConfig+0x288>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1f0      	bne.n	800255e <HAL_RCC_OscConfig+0x10e>
 800257c:	e000      	b.n	8002580 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800257e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 80cb 	beq.w	8002724 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800258e:	4b52      	ldr	r3, [pc, #328]	; (80026d8 <HAL_RCC_OscConfig+0x288>)
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002596:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002598:	4b4f      	ldr	r3, [pc, #316]	; (80026d8 <HAL_RCC_OscConfig+0x288>)
 800259a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800259e:	6a3b      	ldr	r3, [r7, #32]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d007      	beq.n	80025b4 <HAL_RCC_OscConfig+0x164>
 80025a4:	6a3b      	ldr	r3, [r7, #32]
 80025a6:	2b18      	cmp	r3, #24
 80025a8:	d156      	bne.n	8002658 <HAL_RCC_OscConfig+0x208>
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	f003 0303 	and.w	r3, r3, #3
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d151      	bne.n	8002658 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025b4:	4b48      	ldr	r3, [pc, #288]	; (80026d8 <HAL_RCC_OscConfig+0x288>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d005      	beq.n	80025cc <HAL_RCC_OscConfig+0x17c>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e368      	b.n	8002c9e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80025cc:	4b42      	ldr	r3, [pc, #264]	; (80026d8 <HAL_RCC_OscConfig+0x288>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f023 0219 	bic.w	r2, r3, #25
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	493f      	ldr	r1, [pc, #252]	; (80026d8 <HAL_RCC_OscConfig+0x288>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025de:	f7ff f889 	bl	80016f4 <HAL_GetTick>
 80025e2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025e6:	f7ff f885 	bl	80016f4 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e352      	b.n	8002c9e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025f8:	4b37      	ldr	r3, [pc, #220]	; (80026d8 <HAL_RCC_OscConfig+0x288>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0f0      	beq.n	80025e6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002604:	f7ff f882 	bl	800170c <HAL_GetREVID>
 8002608:	4603      	mov	r3, r0
 800260a:	f241 0203 	movw	r2, #4099	; 0x1003
 800260e:	4293      	cmp	r3, r2
 8002610:	d817      	bhi.n	8002642 <HAL_RCC_OscConfig+0x1f2>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	2b40      	cmp	r3, #64	; 0x40
 8002618:	d108      	bne.n	800262c <HAL_RCC_OscConfig+0x1dc>
 800261a:	4b2f      	ldr	r3, [pc, #188]	; (80026d8 <HAL_RCC_OscConfig+0x288>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002622:	4a2d      	ldr	r2, [pc, #180]	; (80026d8 <HAL_RCC_OscConfig+0x288>)
 8002624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002628:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800262a:	e07b      	b.n	8002724 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800262c:	4b2a      	ldr	r3, [pc, #168]	; (80026d8 <HAL_RCC_OscConfig+0x288>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	031b      	lsls	r3, r3, #12
 800263a:	4927      	ldr	r1, [pc, #156]	; (80026d8 <HAL_RCC_OscConfig+0x288>)
 800263c:	4313      	orrs	r3, r2
 800263e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002640:	e070      	b.n	8002724 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002642:	4b25      	ldr	r3, [pc, #148]	; (80026d8 <HAL_RCC_OscConfig+0x288>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	061b      	lsls	r3, r3, #24
 8002650:	4921      	ldr	r1, [pc, #132]	; (80026d8 <HAL_RCC_OscConfig+0x288>)
 8002652:	4313      	orrs	r3, r2
 8002654:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002656:	e065      	b.n	8002724 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d048      	beq.n	80026f2 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002660:	4b1d      	ldr	r3, [pc, #116]	; (80026d8 <HAL_RCC_OscConfig+0x288>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f023 0219 	bic.w	r2, r3, #25
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	491a      	ldr	r1, [pc, #104]	; (80026d8 <HAL_RCC_OscConfig+0x288>)
 800266e:	4313      	orrs	r3, r2
 8002670:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002672:	f7ff f83f 	bl	80016f4 <HAL_GetTick>
 8002676:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002678:	e008      	b.n	800268c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800267a:	f7ff f83b 	bl	80016f4 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e308      	b.n	8002c9e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800268c:	4b12      	ldr	r3, [pc, #72]	; (80026d8 <HAL_RCC_OscConfig+0x288>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0f0      	beq.n	800267a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002698:	f7ff f838 	bl	800170c <HAL_GetREVID>
 800269c:	4603      	mov	r3, r0
 800269e:	f241 0203 	movw	r2, #4099	; 0x1003
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d81a      	bhi.n	80026dc <HAL_RCC_OscConfig+0x28c>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	2b40      	cmp	r3, #64	; 0x40
 80026ac:	d108      	bne.n	80026c0 <HAL_RCC_OscConfig+0x270>
 80026ae:	4b0a      	ldr	r3, [pc, #40]	; (80026d8 <HAL_RCC_OscConfig+0x288>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80026b6:	4a08      	ldr	r2, [pc, #32]	; (80026d8 <HAL_RCC_OscConfig+0x288>)
 80026b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026bc:	6053      	str	r3, [r2, #4]
 80026be:	e031      	b.n	8002724 <HAL_RCC_OscConfig+0x2d4>
 80026c0:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <HAL_RCC_OscConfig+0x288>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	031b      	lsls	r3, r3, #12
 80026ce:	4902      	ldr	r1, [pc, #8]	; (80026d8 <HAL_RCC_OscConfig+0x288>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	604b      	str	r3, [r1, #4]
 80026d4:	e026      	b.n	8002724 <HAL_RCC_OscConfig+0x2d4>
 80026d6:	bf00      	nop
 80026d8:	58024400 	.word	0x58024400
 80026dc:	4b9a      	ldr	r3, [pc, #616]	; (8002948 <HAL_RCC_OscConfig+0x4f8>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	061b      	lsls	r3, r3, #24
 80026ea:	4997      	ldr	r1, [pc, #604]	; (8002948 <HAL_RCC_OscConfig+0x4f8>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	604b      	str	r3, [r1, #4]
 80026f0:	e018      	b.n	8002724 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026f2:	4b95      	ldr	r3, [pc, #596]	; (8002948 <HAL_RCC_OscConfig+0x4f8>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a94      	ldr	r2, [pc, #592]	; (8002948 <HAL_RCC_OscConfig+0x4f8>)
 80026f8:	f023 0301 	bic.w	r3, r3, #1
 80026fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026fe:	f7fe fff9 	bl	80016f4 <HAL_GetTick>
 8002702:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002704:	e008      	b.n	8002718 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002706:	f7fe fff5 	bl	80016f4 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e2c2      	b.n	8002c9e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002718:	4b8b      	ldr	r3, [pc, #556]	; (8002948 <HAL_RCC_OscConfig+0x4f8>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1f0      	bne.n	8002706 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0310 	and.w	r3, r3, #16
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 80a9 	beq.w	8002884 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002732:	4b85      	ldr	r3, [pc, #532]	; (8002948 <HAL_RCC_OscConfig+0x4f8>)
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800273a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800273c:	4b82      	ldr	r3, [pc, #520]	; (8002948 <HAL_RCC_OscConfig+0x4f8>)
 800273e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002740:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	2b08      	cmp	r3, #8
 8002746:	d007      	beq.n	8002758 <HAL_RCC_OscConfig+0x308>
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	2b18      	cmp	r3, #24
 800274c:	d13a      	bne.n	80027c4 <HAL_RCC_OscConfig+0x374>
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f003 0303 	and.w	r3, r3, #3
 8002754:	2b01      	cmp	r3, #1
 8002756:	d135      	bne.n	80027c4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002758:	4b7b      	ldr	r3, [pc, #492]	; (8002948 <HAL_RCC_OscConfig+0x4f8>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002760:	2b00      	cmp	r3, #0
 8002762:	d005      	beq.n	8002770 <HAL_RCC_OscConfig+0x320>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	69db      	ldr	r3, [r3, #28]
 8002768:	2b80      	cmp	r3, #128	; 0x80
 800276a:	d001      	beq.n	8002770 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e296      	b.n	8002c9e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002770:	f7fe ffcc 	bl	800170c <HAL_GetREVID>
 8002774:	4603      	mov	r3, r0
 8002776:	f241 0203 	movw	r2, #4099	; 0x1003
 800277a:	4293      	cmp	r3, r2
 800277c:	d817      	bhi.n	80027ae <HAL_RCC_OscConfig+0x35e>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	2b20      	cmp	r3, #32
 8002784:	d108      	bne.n	8002798 <HAL_RCC_OscConfig+0x348>
 8002786:	4b70      	ldr	r3, [pc, #448]	; (8002948 <HAL_RCC_OscConfig+0x4f8>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800278e:	4a6e      	ldr	r2, [pc, #440]	; (8002948 <HAL_RCC_OscConfig+0x4f8>)
 8002790:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002794:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002796:	e075      	b.n	8002884 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002798:	4b6b      	ldr	r3, [pc, #428]	; (8002948 <HAL_RCC_OscConfig+0x4f8>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	069b      	lsls	r3, r3, #26
 80027a6:	4968      	ldr	r1, [pc, #416]	; (8002948 <HAL_RCC_OscConfig+0x4f8>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027ac:	e06a      	b.n	8002884 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027ae:	4b66      	ldr	r3, [pc, #408]	; (8002948 <HAL_RCC_OscConfig+0x4f8>)
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	061b      	lsls	r3, r3, #24
 80027bc:	4962      	ldr	r1, [pc, #392]	; (8002948 <HAL_RCC_OscConfig+0x4f8>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027c2:	e05f      	b.n	8002884 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	69db      	ldr	r3, [r3, #28]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d042      	beq.n	8002852 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80027cc:	4b5e      	ldr	r3, [pc, #376]	; (8002948 <HAL_RCC_OscConfig+0x4f8>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a5d      	ldr	r2, [pc, #372]	; (8002948 <HAL_RCC_OscConfig+0x4f8>)
 80027d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d8:	f7fe ff8c 	bl	80016f4 <HAL_GetTick>
 80027dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80027e0:	f7fe ff88 	bl	80016f4 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e255      	b.n	8002c9e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027f2:	4b55      	ldr	r3, [pc, #340]	; (8002948 <HAL_RCC_OscConfig+0x4f8>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0f0      	beq.n	80027e0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027fe:	f7fe ff85 	bl	800170c <HAL_GetREVID>
 8002802:	4603      	mov	r3, r0
 8002804:	f241 0203 	movw	r2, #4099	; 0x1003
 8002808:	4293      	cmp	r3, r2
 800280a:	d817      	bhi.n	800283c <HAL_RCC_OscConfig+0x3ec>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	2b20      	cmp	r3, #32
 8002812:	d108      	bne.n	8002826 <HAL_RCC_OscConfig+0x3d6>
 8002814:	4b4c      	ldr	r3, [pc, #304]	; (8002948 <HAL_RCC_OscConfig+0x4f8>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800281c:	4a4a      	ldr	r2, [pc, #296]	; (8002948 <HAL_RCC_OscConfig+0x4f8>)
 800281e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002822:	6053      	str	r3, [r2, #4]
 8002824:	e02e      	b.n	8002884 <HAL_RCC_OscConfig+0x434>
 8002826:	4b48      	ldr	r3, [pc, #288]	; (8002948 <HAL_RCC_OscConfig+0x4f8>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	069b      	lsls	r3, r3, #26
 8002834:	4944      	ldr	r1, [pc, #272]	; (8002948 <HAL_RCC_OscConfig+0x4f8>)
 8002836:	4313      	orrs	r3, r2
 8002838:	604b      	str	r3, [r1, #4]
 800283a:	e023      	b.n	8002884 <HAL_RCC_OscConfig+0x434>
 800283c:	4b42      	ldr	r3, [pc, #264]	; (8002948 <HAL_RCC_OscConfig+0x4f8>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	061b      	lsls	r3, r3, #24
 800284a:	493f      	ldr	r1, [pc, #252]	; (8002948 <HAL_RCC_OscConfig+0x4f8>)
 800284c:	4313      	orrs	r3, r2
 800284e:	60cb      	str	r3, [r1, #12]
 8002850:	e018      	b.n	8002884 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002852:	4b3d      	ldr	r3, [pc, #244]	; (8002948 <HAL_RCC_OscConfig+0x4f8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a3c      	ldr	r2, [pc, #240]	; (8002948 <HAL_RCC_OscConfig+0x4f8>)
 8002858:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800285c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285e:	f7fe ff49 	bl	80016f4 <HAL_GetTick>
 8002862:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002866:	f7fe ff45 	bl	80016f4 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e212      	b.n	8002c9e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002878:	4b33      	ldr	r3, [pc, #204]	; (8002948 <HAL_RCC_OscConfig+0x4f8>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1f0      	bne.n	8002866 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0308 	and.w	r3, r3, #8
 800288c:	2b00      	cmp	r3, #0
 800288e:	d036      	beq.n	80028fe <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d019      	beq.n	80028cc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002898:	4b2b      	ldr	r3, [pc, #172]	; (8002948 <HAL_RCC_OscConfig+0x4f8>)
 800289a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800289c:	4a2a      	ldr	r2, [pc, #168]	; (8002948 <HAL_RCC_OscConfig+0x4f8>)
 800289e:	f043 0301 	orr.w	r3, r3, #1
 80028a2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a4:	f7fe ff26 	bl	80016f4 <HAL_GetTick>
 80028a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028ac:	f7fe ff22 	bl	80016f4 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e1ef      	b.n	8002c9e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028be:	4b22      	ldr	r3, [pc, #136]	; (8002948 <HAL_RCC_OscConfig+0x4f8>)
 80028c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0f0      	beq.n	80028ac <HAL_RCC_OscConfig+0x45c>
 80028ca:	e018      	b.n	80028fe <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028cc:	4b1e      	ldr	r3, [pc, #120]	; (8002948 <HAL_RCC_OscConfig+0x4f8>)
 80028ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028d0:	4a1d      	ldr	r2, [pc, #116]	; (8002948 <HAL_RCC_OscConfig+0x4f8>)
 80028d2:	f023 0301 	bic.w	r3, r3, #1
 80028d6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d8:	f7fe ff0c 	bl	80016f4 <HAL_GetTick>
 80028dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028e0:	f7fe ff08 	bl	80016f4 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e1d5      	b.n	8002c9e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028f2:	4b15      	ldr	r3, [pc, #84]	; (8002948 <HAL_RCC_OscConfig+0x4f8>)
 80028f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0320 	and.w	r3, r3, #32
 8002906:	2b00      	cmp	r3, #0
 8002908:	d039      	beq.n	800297e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d01c      	beq.n	800294c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002912:	4b0d      	ldr	r3, [pc, #52]	; (8002948 <HAL_RCC_OscConfig+0x4f8>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a0c      	ldr	r2, [pc, #48]	; (8002948 <HAL_RCC_OscConfig+0x4f8>)
 8002918:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800291c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800291e:	f7fe fee9 	bl	80016f4 <HAL_GetTick>
 8002922:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002926:	f7fe fee5 	bl	80016f4 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e1b2      	b.n	8002c9e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002938:	4b03      	ldr	r3, [pc, #12]	; (8002948 <HAL_RCC_OscConfig+0x4f8>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0f0      	beq.n	8002926 <HAL_RCC_OscConfig+0x4d6>
 8002944:	e01b      	b.n	800297e <HAL_RCC_OscConfig+0x52e>
 8002946:	bf00      	nop
 8002948:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800294c:	4b9b      	ldr	r3, [pc, #620]	; (8002bbc <HAL_RCC_OscConfig+0x76c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a9a      	ldr	r2, [pc, #616]	; (8002bbc <HAL_RCC_OscConfig+0x76c>)
 8002952:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002956:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002958:	f7fe fecc 	bl	80016f4 <HAL_GetTick>
 800295c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002960:	f7fe fec8 	bl	80016f4 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e195      	b.n	8002c9e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002972:	4b92      	ldr	r3, [pc, #584]	; (8002bbc <HAL_RCC_OscConfig+0x76c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0304 	and.w	r3, r3, #4
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 8081 	beq.w	8002a8e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800298c:	4b8c      	ldr	r3, [pc, #560]	; (8002bc0 <HAL_RCC_OscConfig+0x770>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a8b      	ldr	r2, [pc, #556]	; (8002bc0 <HAL_RCC_OscConfig+0x770>)
 8002992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002996:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002998:	f7fe feac 	bl	80016f4 <HAL_GetTick>
 800299c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80029a0:	f7fe fea8 	bl	80016f4 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b64      	cmp	r3, #100	; 0x64
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e175      	b.n	8002c9e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029b2:	4b83      	ldr	r3, [pc, #524]	; (8002bc0 <HAL_RCC_OscConfig+0x770>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0f0      	beq.n	80029a0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d106      	bne.n	80029d4 <HAL_RCC_OscConfig+0x584>
 80029c6:	4b7d      	ldr	r3, [pc, #500]	; (8002bbc <HAL_RCC_OscConfig+0x76c>)
 80029c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ca:	4a7c      	ldr	r2, [pc, #496]	; (8002bbc <HAL_RCC_OscConfig+0x76c>)
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	6713      	str	r3, [r2, #112]	; 0x70
 80029d2:	e02d      	b.n	8002a30 <HAL_RCC_OscConfig+0x5e0>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10c      	bne.n	80029f6 <HAL_RCC_OscConfig+0x5a6>
 80029dc:	4b77      	ldr	r3, [pc, #476]	; (8002bbc <HAL_RCC_OscConfig+0x76c>)
 80029de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e0:	4a76      	ldr	r2, [pc, #472]	; (8002bbc <HAL_RCC_OscConfig+0x76c>)
 80029e2:	f023 0301 	bic.w	r3, r3, #1
 80029e6:	6713      	str	r3, [r2, #112]	; 0x70
 80029e8:	4b74      	ldr	r3, [pc, #464]	; (8002bbc <HAL_RCC_OscConfig+0x76c>)
 80029ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ec:	4a73      	ldr	r2, [pc, #460]	; (8002bbc <HAL_RCC_OscConfig+0x76c>)
 80029ee:	f023 0304 	bic.w	r3, r3, #4
 80029f2:	6713      	str	r3, [r2, #112]	; 0x70
 80029f4:	e01c      	b.n	8002a30 <HAL_RCC_OscConfig+0x5e0>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	2b05      	cmp	r3, #5
 80029fc:	d10c      	bne.n	8002a18 <HAL_RCC_OscConfig+0x5c8>
 80029fe:	4b6f      	ldr	r3, [pc, #444]	; (8002bbc <HAL_RCC_OscConfig+0x76c>)
 8002a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a02:	4a6e      	ldr	r2, [pc, #440]	; (8002bbc <HAL_RCC_OscConfig+0x76c>)
 8002a04:	f043 0304 	orr.w	r3, r3, #4
 8002a08:	6713      	str	r3, [r2, #112]	; 0x70
 8002a0a:	4b6c      	ldr	r3, [pc, #432]	; (8002bbc <HAL_RCC_OscConfig+0x76c>)
 8002a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0e:	4a6b      	ldr	r2, [pc, #428]	; (8002bbc <HAL_RCC_OscConfig+0x76c>)
 8002a10:	f043 0301 	orr.w	r3, r3, #1
 8002a14:	6713      	str	r3, [r2, #112]	; 0x70
 8002a16:	e00b      	b.n	8002a30 <HAL_RCC_OscConfig+0x5e0>
 8002a18:	4b68      	ldr	r3, [pc, #416]	; (8002bbc <HAL_RCC_OscConfig+0x76c>)
 8002a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1c:	4a67      	ldr	r2, [pc, #412]	; (8002bbc <HAL_RCC_OscConfig+0x76c>)
 8002a1e:	f023 0301 	bic.w	r3, r3, #1
 8002a22:	6713      	str	r3, [r2, #112]	; 0x70
 8002a24:	4b65      	ldr	r3, [pc, #404]	; (8002bbc <HAL_RCC_OscConfig+0x76c>)
 8002a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a28:	4a64      	ldr	r2, [pc, #400]	; (8002bbc <HAL_RCC_OscConfig+0x76c>)
 8002a2a:	f023 0304 	bic.w	r3, r3, #4
 8002a2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d015      	beq.n	8002a64 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a38:	f7fe fe5c 	bl	80016f4 <HAL_GetTick>
 8002a3c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a3e:	e00a      	b.n	8002a56 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a40:	f7fe fe58 	bl	80016f4 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e123      	b.n	8002c9e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a56:	4b59      	ldr	r3, [pc, #356]	; (8002bbc <HAL_RCC_OscConfig+0x76c>)
 8002a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0ee      	beq.n	8002a40 <HAL_RCC_OscConfig+0x5f0>
 8002a62:	e014      	b.n	8002a8e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a64:	f7fe fe46 	bl	80016f4 <HAL_GetTick>
 8002a68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a6a:	e00a      	b.n	8002a82 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a6c:	f7fe fe42 	bl	80016f4 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e10d      	b.n	8002c9e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a82:	4b4e      	ldr	r3, [pc, #312]	; (8002bbc <HAL_RCC_OscConfig+0x76c>)
 8002a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1ee      	bne.n	8002a6c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 8102 	beq.w	8002c9c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002a98:	4b48      	ldr	r3, [pc, #288]	; (8002bbc <HAL_RCC_OscConfig+0x76c>)
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002aa0:	2b18      	cmp	r3, #24
 8002aa2:	f000 80bd 	beq.w	8002c20 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	f040 809e 	bne.w	8002bec <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab0:	4b42      	ldr	r3, [pc, #264]	; (8002bbc <HAL_RCC_OscConfig+0x76c>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a41      	ldr	r2, [pc, #260]	; (8002bbc <HAL_RCC_OscConfig+0x76c>)
 8002ab6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002aba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abc:	f7fe fe1a 	bl	80016f4 <HAL_GetTick>
 8002ac0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ac4:	f7fe fe16 	bl	80016f4 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e0e3      	b.n	8002c9e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ad6:	4b39      	ldr	r3, [pc, #228]	; (8002bbc <HAL_RCC_OscConfig+0x76c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1f0      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ae2:	4b36      	ldr	r3, [pc, #216]	; (8002bbc <HAL_RCC_OscConfig+0x76c>)
 8002ae4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ae6:	4b37      	ldr	r3, [pc, #220]	; (8002bc4 <HAL_RCC_OscConfig+0x774>)
 8002ae8:	4013      	ands	r3, r2
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002af2:	0112      	lsls	r2, r2, #4
 8002af4:	430a      	orrs	r2, r1
 8002af6:	4931      	ldr	r1, [pc, #196]	; (8002bbc <HAL_RCC_OscConfig+0x76c>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	628b      	str	r3, [r1, #40]	; 0x28
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b00:	3b01      	subs	r3, #1
 8002b02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	025b      	lsls	r3, r3, #9
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	431a      	orrs	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b16:	3b01      	subs	r3, #1
 8002b18:	041b      	lsls	r3, r3, #16
 8002b1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b24:	3b01      	subs	r3, #1
 8002b26:	061b      	lsls	r3, r3, #24
 8002b28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002b2c:	4923      	ldr	r1, [pc, #140]	; (8002bbc <HAL_RCC_OscConfig+0x76c>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002b32:	4b22      	ldr	r3, [pc, #136]	; (8002bbc <HAL_RCC_OscConfig+0x76c>)
 8002b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b36:	4a21      	ldr	r2, [pc, #132]	; (8002bbc <HAL_RCC_OscConfig+0x76c>)
 8002b38:	f023 0301 	bic.w	r3, r3, #1
 8002b3c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b3e:	4b1f      	ldr	r3, [pc, #124]	; (8002bbc <HAL_RCC_OscConfig+0x76c>)
 8002b40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b42:	4b21      	ldr	r3, [pc, #132]	; (8002bc8 <HAL_RCC_OscConfig+0x778>)
 8002b44:	4013      	ands	r3, r2
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b4a:	00d2      	lsls	r2, r2, #3
 8002b4c:	491b      	ldr	r1, [pc, #108]	; (8002bbc <HAL_RCC_OscConfig+0x76c>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002b52:	4b1a      	ldr	r3, [pc, #104]	; (8002bbc <HAL_RCC_OscConfig+0x76c>)
 8002b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b56:	f023 020c 	bic.w	r2, r3, #12
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	4917      	ldr	r1, [pc, #92]	; (8002bbc <HAL_RCC_OscConfig+0x76c>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002b64:	4b15      	ldr	r3, [pc, #84]	; (8002bbc <HAL_RCC_OscConfig+0x76c>)
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	f023 0202 	bic.w	r2, r3, #2
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b70:	4912      	ldr	r1, [pc, #72]	; (8002bbc <HAL_RCC_OscConfig+0x76c>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002b76:	4b11      	ldr	r3, [pc, #68]	; (8002bbc <HAL_RCC_OscConfig+0x76c>)
 8002b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7a:	4a10      	ldr	r2, [pc, #64]	; (8002bbc <HAL_RCC_OscConfig+0x76c>)
 8002b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b82:	4b0e      	ldr	r3, [pc, #56]	; (8002bbc <HAL_RCC_OscConfig+0x76c>)
 8002b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b86:	4a0d      	ldr	r2, [pc, #52]	; (8002bbc <HAL_RCC_OscConfig+0x76c>)
 8002b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b8c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002b8e:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <HAL_RCC_OscConfig+0x76c>)
 8002b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b92:	4a0a      	ldr	r2, [pc, #40]	; (8002bbc <HAL_RCC_OscConfig+0x76c>)
 8002b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002b9a:	4b08      	ldr	r3, [pc, #32]	; (8002bbc <HAL_RCC_OscConfig+0x76c>)
 8002b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9e:	4a07      	ldr	r2, [pc, #28]	; (8002bbc <HAL_RCC_OscConfig+0x76c>)
 8002ba0:	f043 0301 	orr.w	r3, r3, #1
 8002ba4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ba6:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <HAL_RCC_OscConfig+0x76c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a04      	ldr	r2, [pc, #16]	; (8002bbc <HAL_RCC_OscConfig+0x76c>)
 8002bac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb2:	f7fe fd9f 	bl	80016f4 <HAL_GetTick>
 8002bb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bb8:	e011      	b.n	8002bde <HAL_RCC_OscConfig+0x78e>
 8002bba:	bf00      	nop
 8002bbc:	58024400 	.word	0x58024400
 8002bc0:	58024800 	.word	0x58024800
 8002bc4:	fffffc0c 	.word	0xfffffc0c
 8002bc8:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bcc:	f7fe fd92 	bl	80016f4 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e05f      	b.n	8002c9e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bde:	4b32      	ldr	r3, [pc, #200]	; (8002ca8 <HAL_RCC_OscConfig+0x858>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0f0      	beq.n	8002bcc <HAL_RCC_OscConfig+0x77c>
 8002bea:	e057      	b.n	8002c9c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bec:	4b2e      	ldr	r3, [pc, #184]	; (8002ca8 <HAL_RCC_OscConfig+0x858>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a2d      	ldr	r2, [pc, #180]	; (8002ca8 <HAL_RCC_OscConfig+0x858>)
 8002bf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf8:	f7fe fd7c 	bl	80016f4 <HAL_GetTick>
 8002bfc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c00:	f7fe fd78 	bl	80016f4 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e045      	b.n	8002c9e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c12:	4b25      	ldr	r3, [pc, #148]	; (8002ca8 <HAL_RCC_OscConfig+0x858>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f0      	bne.n	8002c00 <HAL_RCC_OscConfig+0x7b0>
 8002c1e:	e03d      	b.n	8002c9c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002c20:	4b21      	ldr	r3, [pc, #132]	; (8002ca8 <HAL_RCC_OscConfig+0x858>)
 8002c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c24:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002c26:	4b20      	ldr	r3, [pc, #128]	; (8002ca8 <HAL_RCC_OscConfig+0x858>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d031      	beq.n	8002c98 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	f003 0203 	and.w	r2, r3, #3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d12a      	bne.n	8002c98 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	091b      	lsrs	r3, r3, #4
 8002c46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d122      	bne.n	8002c98 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d11a      	bne.n	8002c98 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	0a5b      	lsrs	r3, r3, #9
 8002c66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c6e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d111      	bne.n	8002c98 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	0c1b      	lsrs	r3, r3, #16
 8002c78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c80:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d108      	bne.n	8002c98 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	0e1b      	lsrs	r3, r3, #24
 8002c8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c92:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d001      	beq.n	8002c9c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e000      	b.n	8002c9e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3730      	adds	r7, #48	; 0x30
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	58024400 	.word	0x58024400

08002cac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e19c      	b.n	8002ffa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cc0:	4b8a      	ldr	r3, [pc, #552]	; (8002eec <HAL_RCC_ClockConfig+0x240>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 030f 	and.w	r3, r3, #15
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d910      	bls.n	8002cf0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cce:	4b87      	ldr	r3, [pc, #540]	; (8002eec <HAL_RCC_ClockConfig+0x240>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f023 020f 	bic.w	r2, r3, #15
 8002cd6:	4985      	ldr	r1, [pc, #532]	; (8002eec <HAL_RCC_ClockConfig+0x240>)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cde:	4b83      	ldr	r3, [pc, #524]	; (8002eec <HAL_RCC_ClockConfig+0x240>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d001      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e184      	b.n	8002ffa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d010      	beq.n	8002d1e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	691a      	ldr	r2, [r3, #16]
 8002d00:	4b7b      	ldr	r3, [pc, #492]	; (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d908      	bls.n	8002d1e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d0c:	4b78      	ldr	r3, [pc, #480]	; (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	4975      	ldr	r1, [pc, #468]	; (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d010      	beq.n	8002d4c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	695a      	ldr	r2, [r3, #20]
 8002d2e:	4b70      	ldr	r3, [pc, #448]	; (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d908      	bls.n	8002d4c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d3a:	4b6d      	ldr	r3, [pc, #436]	; (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	496a      	ldr	r1, [pc, #424]	; (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0310 	and.w	r3, r3, #16
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d010      	beq.n	8002d7a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	699a      	ldr	r2, [r3, #24]
 8002d5c:	4b64      	ldr	r3, [pc, #400]	; (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002d5e:	69db      	ldr	r3, [r3, #28]
 8002d60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d908      	bls.n	8002d7a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d68:	4b61      	ldr	r3, [pc, #388]	; (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002d6a:	69db      	ldr	r3, [r3, #28]
 8002d6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	495e      	ldr	r1, [pc, #376]	; (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0320 	and.w	r3, r3, #32
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d010      	beq.n	8002da8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69da      	ldr	r2, [r3, #28]
 8002d8a:	4b59      	ldr	r3, [pc, #356]	; (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d908      	bls.n	8002da8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002d96:	4b56      	ldr	r3, [pc, #344]	; (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	4953      	ldr	r1, [pc, #332]	; (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d010      	beq.n	8002dd6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68da      	ldr	r2, [r3, #12]
 8002db8:	4b4d      	ldr	r3, [pc, #308]	; (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	f003 030f 	and.w	r3, r3, #15
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d908      	bls.n	8002dd6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dc4:	4b4a      	ldr	r3, [pc, #296]	; (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	f023 020f 	bic.w	r2, r3, #15
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	4947      	ldr	r1, [pc, #284]	; (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d055      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002de2:	4b43      	ldr	r3, [pc, #268]	; (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	4940      	ldr	r1, [pc, #256]	; (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d107      	bne.n	8002e0c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002dfc:	4b3c      	ldr	r3, [pc, #240]	; (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d121      	bne.n	8002e4c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e0f6      	b.n	8002ffa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b03      	cmp	r3, #3
 8002e12:	d107      	bne.n	8002e24 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e14:	4b36      	ldr	r3, [pc, #216]	; (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d115      	bne.n	8002e4c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e0ea      	b.n	8002ffa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d107      	bne.n	8002e3c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e2c:	4b30      	ldr	r3, [pc, #192]	; (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d109      	bne.n	8002e4c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e0de      	b.n	8002ffa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e3c:	4b2c      	ldr	r3, [pc, #176]	; (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d101      	bne.n	8002e4c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e0d6      	b.n	8002ffa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e4c:	4b28      	ldr	r3, [pc, #160]	; (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	f023 0207 	bic.w	r2, r3, #7
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	4925      	ldr	r1, [pc, #148]	; (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e5e:	f7fe fc49 	bl	80016f4 <HAL_GetTick>
 8002e62:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e64:	e00a      	b.n	8002e7c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e66:	f7fe fc45 	bl	80016f4 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e0be      	b.n	8002ffa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7c:	4b1c      	ldr	r3, [pc, #112]	; (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d1eb      	bne.n	8002e66 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d010      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68da      	ldr	r2, [r3, #12]
 8002e9e:	4b14      	ldr	r3, [pc, #80]	; (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	f003 030f 	and.w	r3, r3, #15
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d208      	bcs.n	8002ebc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eaa:	4b11      	ldr	r3, [pc, #68]	; (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	f023 020f 	bic.w	r2, r3, #15
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	490e      	ldr	r1, [pc, #56]	; (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ebc:	4b0b      	ldr	r3, [pc, #44]	; (8002eec <HAL_RCC_ClockConfig+0x240>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 030f 	and.w	r3, r3, #15
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d214      	bcs.n	8002ef4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eca:	4b08      	ldr	r3, [pc, #32]	; (8002eec <HAL_RCC_ClockConfig+0x240>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f023 020f 	bic.w	r2, r3, #15
 8002ed2:	4906      	ldr	r1, [pc, #24]	; (8002eec <HAL_RCC_ClockConfig+0x240>)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eda:	4b04      	ldr	r3, [pc, #16]	; (8002eec <HAL_RCC_ClockConfig+0x240>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d005      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e086      	b.n	8002ffa <HAL_RCC_ClockConfig+0x34e>
 8002eec:	52002000 	.word	0x52002000
 8002ef0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d010      	beq.n	8002f22 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	691a      	ldr	r2, [r3, #16]
 8002f04:	4b3f      	ldr	r3, [pc, #252]	; (8003004 <HAL_RCC_ClockConfig+0x358>)
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d208      	bcs.n	8002f22 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f10:	4b3c      	ldr	r3, [pc, #240]	; (8003004 <HAL_RCC_ClockConfig+0x358>)
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	4939      	ldr	r1, [pc, #228]	; (8003004 <HAL_RCC_ClockConfig+0x358>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d010      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	695a      	ldr	r2, [r3, #20]
 8002f32:	4b34      	ldr	r3, [pc, #208]	; (8003004 <HAL_RCC_ClockConfig+0x358>)
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d208      	bcs.n	8002f50 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f3e:	4b31      	ldr	r3, [pc, #196]	; (8003004 <HAL_RCC_ClockConfig+0x358>)
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	492e      	ldr	r1, [pc, #184]	; (8003004 <HAL_RCC_ClockConfig+0x358>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0310 	and.w	r3, r3, #16
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d010      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	699a      	ldr	r2, [r3, #24]
 8002f60:	4b28      	ldr	r3, [pc, #160]	; (8003004 <HAL_RCC_ClockConfig+0x358>)
 8002f62:	69db      	ldr	r3, [r3, #28]
 8002f64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d208      	bcs.n	8002f7e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f6c:	4b25      	ldr	r3, [pc, #148]	; (8003004 <HAL_RCC_ClockConfig+0x358>)
 8002f6e:	69db      	ldr	r3, [r3, #28]
 8002f70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	4922      	ldr	r1, [pc, #136]	; (8003004 <HAL_RCC_ClockConfig+0x358>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0320 	and.w	r3, r3, #32
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d010      	beq.n	8002fac <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69da      	ldr	r2, [r3, #28]
 8002f8e:	4b1d      	ldr	r3, [pc, #116]	; (8003004 <HAL_RCC_ClockConfig+0x358>)
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d208      	bcs.n	8002fac <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002f9a:	4b1a      	ldr	r3, [pc, #104]	; (8003004 <HAL_RCC_ClockConfig+0x358>)
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	4917      	ldr	r1, [pc, #92]	; (8003004 <HAL_RCC_ClockConfig+0x358>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002fac:	f000 f834 	bl	8003018 <HAL_RCC_GetSysClockFreq>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	4b14      	ldr	r3, [pc, #80]	; (8003004 <HAL_RCC_ClockConfig+0x358>)
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	0a1b      	lsrs	r3, r3, #8
 8002fb8:	f003 030f 	and.w	r3, r3, #15
 8002fbc:	4912      	ldr	r1, [pc, #72]	; (8003008 <HAL_RCC_ClockConfig+0x35c>)
 8002fbe:	5ccb      	ldrb	r3, [r1, r3]
 8002fc0:	f003 031f 	and.w	r3, r3, #31
 8002fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002fca:	4b0e      	ldr	r3, [pc, #56]	; (8003004 <HAL_RCC_ClockConfig+0x358>)
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	f003 030f 	and.w	r3, r3, #15
 8002fd2:	4a0d      	ldr	r2, [pc, #52]	; (8003008 <HAL_RCC_ClockConfig+0x35c>)
 8002fd4:	5cd3      	ldrb	r3, [r2, r3]
 8002fd6:	f003 031f 	and.w	r3, r3, #31
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe0:	4a0a      	ldr	r2, [pc, #40]	; (800300c <HAL_RCC_ClockConfig+0x360>)
 8002fe2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002fe4:	4a0a      	ldr	r2, [pc, #40]	; (8003010 <HAL_RCC_ClockConfig+0x364>)
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002fea:	4b0a      	ldr	r3, [pc, #40]	; (8003014 <HAL_RCC_ClockConfig+0x368>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fe f9d6 	bl	80013a0 <HAL_InitTick>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3718      	adds	r7, #24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	58024400 	.word	0x58024400
 8003008:	0800a7a0 	.word	0x0800a7a0
 800300c:	24000004 	.word	0x24000004
 8003010:	24000000 	.word	0x24000000
 8003014:	24000008 	.word	0x24000008

08003018 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003018:	b480      	push	{r7}
 800301a:	b089      	sub	sp, #36	; 0x24
 800301c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800301e:	4bb3      	ldr	r3, [pc, #716]	; (80032ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003026:	2b18      	cmp	r3, #24
 8003028:	f200 8155 	bhi.w	80032d6 <HAL_RCC_GetSysClockFreq+0x2be>
 800302c:	a201      	add	r2, pc, #4	; (adr r2, 8003034 <HAL_RCC_GetSysClockFreq+0x1c>)
 800302e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003032:	bf00      	nop
 8003034:	08003099 	.word	0x08003099
 8003038:	080032d7 	.word	0x080032d7
 800303c:	080032d7 	.word	0x080032d7
 8003040:	080032d7 	.word	0x080032d7
 8003044:	080032d7 	.word	0x080032d7
 8003048:	080032d7 	.word	0x080032d7
 800304c:	080032d7 	.word	0x080032d7
 8003050:	080032d7 	.word	0x080032d7
 8003054:	080030bf 	.word	0x080030bf
 8003058:	080032d7 	.word	0x080032d7
 800305c:	080032d7 	.word	0x080032d7
 8003060:	080032d7 	.word	0x080032d7
 8003064:	080032d7 	.word	0x080032d7
 8003068:	080032d7 	.word	0x080032d7
 800306c:	080032d7 	.word	0x080032d7
 8003070:	080032d7 	.word	0x080032d7
 8003074:	080030c5 	.word	0x080030c5
 8003078:	080032d7 	.word	0x080032d7
 800307c:	080032d7 	.word	0x080032d7
 8003080:	080032d7 	.word	0x080032d7
 8003084:	080032d7 	.word	0x080032d7
 8003088:	080032d7 	.word	0x080032d7
 800308c:	080032d7 	.word	0x080032d7
 8003090:	080032d7 	.word	0x080032d7
 8003094:	080030cb 	.word	0x080030cb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003098:	4b94      	ldr	r3, [pc, #592]	; (80032ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0320 	and.w	r3, r3, #32
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d009      	beq.n	80030b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80030a4:	4b91      	ldr	r3, [pc, #580]	; (80032ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	08db      	lsrs	r3, r3, #3
 80030aa:	f003 0303 	and.w	r3, r3, #3
 80030ae:	4a90      	ldr	r2, [pc, #576]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030b0:	fa22 f303 	lsr.w	r3, r2, r3
 80030b4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80030b6:	e111      	b.n	80032dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80030b8:	4b8d      	ldr	r3, [pc, #564]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030ba:	61bb      	str	r3, [r7, #24]
    break;
 80030bc:	e10e      	b.n	80032dc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80030be:	4b8d      	ldr	r3, [pc, #564]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80030c0:	61bb      	str	r3, [r7, #24]
    break;
 80030c2:	e10b      	b.n	80032dc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80030c4:	4b8c      	ldr	r3, [pc, #560]	; (80032f8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80030c6:	61bb      	str	r3, [r7, #24]
    break;
 80030c8:	e108      	b.n	80032dc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80030ca:	4b88      	ldr	r3, [pc, #544]	; (80032ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80030d4:	4b85      	ldr	r3, [pc, #532]	; (80032ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d8:	091b      	lsrs	r3, r3, #4
 80030da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030de:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80030e0:	4b82      	ldr	r3, [pc, #520]	; (80032ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80030ea:	4b80      	ldr	r3, [pc, #512]	; (80032ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ee:	08db      	lsrs	r3, r3, #3
 80030f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	fb02 f303 	mul.w	r3, r2, r3
 80030fa:	ee07 3a90 	vmov	s15, r3
 80030fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003102:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 80e1 	beq.w	80032d0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	2b02      	cmp	r3, #2
 8003112:	f000 8083 	beq.w	800321c <HAL_RCC_GetSysClockFreq+0x204>
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	2b02      	cmp	r3, #2
 800311a:	f200 80a1 	bhi.w	8003260 <HAL_RCC_GetSysClockFreq+0x248>
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d003      	beq.n	800312c <HAL_RCC_GetSysClockFreq+0x114>
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d056      	beq.n	80031d8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800312a:	e099      	b.n	8003260 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800312c:	4b6f      	ldr	r3, [pc, #444]	; (80032ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0320 	and.w	r3, r3, #32
 8003134:	2b00      	cmp	r3, #0
 8003136:	d02d      	beq.n	8003194 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003138:	4b6c      	ldr	r3, [pc, #432]	; (80032ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	08db      	lsrs	r3, r3, #3
 800313e:	f003 0303 	and.w	r3, r3, #3
 8003142:	4a6b      	ldr	r2, [pc, #428]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003144:	fa22 f303 	lsr.w	r3, r2, r3
 8003148:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	ee07 3a90 	vmov	s15, r3
 8003150:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	ee07 3a90 	vmov	s15, r3
 800315a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800315e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003162:	4b62      	ldr	r3, [pc, #392]	; (80032ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800316a:	ee07 3a90 	vmov	s15, r3
 800316e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003172:	ed97 6a02 	vldr	s12, [r7, #8]
 8003176:	eddf 5a61 	vldr	s11, [pc, #388]	; 80032fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800317a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800317e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003182:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800318a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800318e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003192:	e087      	b.n	80032a4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	ee07 3a90 	vmov	s15, r3
 800319a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800319e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003300 <HAL_RCC_GetSysClockFreq+0x2e8>
 80031a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031a6:	4b51      	ldr	r3, [pc, #324]	; (80032ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ae:	ee07 3a90 	vmov	s15, r3
 80031b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80031ba:	eddf 5a50 	vldr	s11, [pc, #320]	; 80032fc <HAL_RCC_GetSysClockFreq+0x2e4>
 80031be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80031d6:	e065      	b.n	80032a4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	ee07 3a90 	vmov	s15, r3
 80031de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031e2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003304 <HAL_RCC_GetSysClockFreq+0x2ec>
 80031e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031ea:	4b40      	ldr	r3, [pc, #256]	; (80032ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031f2:	ee07 3a90 	vmov	s15, r3
 80031f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80031fe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80032fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800320a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800320e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003216:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800321a:	e043      	b.n	80032a4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	ee07 3a90 	vmov	s15, r3
 8003222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003226:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003308 <HAL_RCC_GetSysClockFreq+0x2f0>
 800322a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800322e:	4b2f      	ldr	r3, [pc, #188]	; (80032ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003236:	ee07 3a90 	vmov	s15, r3
 800323a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800323e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003242:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80032fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800324a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800324e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800325a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800325e:	e021      	b.n	80032a4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	ee07 3a90 	vmov	s15, r3
 8003266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800326a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003304 <HAL_RCC_GetSysClockFreq+0x2ec>
 800326e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003272:	4b1e      	ldr	r3, [pc, #120]	; (80032ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800327a:	ee07 3a90 	vmov	s15, r3
 800327e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003282:	ed97 6a02 	vldr	s12, [r7, #8]
 8003286:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80032fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800328a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800328e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003292:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800329a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800329e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80032a2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80032a4:	4b11      	ldr	r3, [pc, #68]	; (80032ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a8:	0a5b      	lsrs	r3, r3, #9
 80032aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032ae:	3301      	adds	r3, #1
 80032b0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	ee07 3a90 	vmov	s15, r3
 80032b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80032c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032c8:	ee17 3a90 	vmov	r3, s15
 80032cc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80032ce:	e005      	b.n	80032dc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80032d0:	2300      	movs	r3, #0
 80032d2:	61bb      	str	r3, [r7, #24]
    break;
 80032d4:	e002      	b.n	80032dc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80032d6:	4b07      	ldr	r3, [pc, #28]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80032d8:	61bb      	str	r3, [r7, #24]
    break;
 80032da:	bf00      	nop
  }

  return sysclockfreq;
 80032dc:	69bb      	ldr	r3, [r7, #24]
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3724      	adds	r7, #36	; 0x24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	58024400 	.word	0x58024400
 80032f0:	03d09000 	.word	0x03d09000
 80032f4:	003d0900 	.word	0x003d0900
 80032f8:	007a1200 	.word	0x007a1200
 80032fc:	46000000 	.word	0x46000000
 8003300:	4c742400 	.word	0x4c742400
 8003304:	4a742400 	.word	0x4a742400
 8003308:	4af42400 	.word	0x4af42400

0800330c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003312:	f7ff fe81 	bl	8003018 <HAL_RCC_GetSysClockFreq>
 8003316:	4602      	mov	r2, r0
 8003318:	4b10      	ldr	r3, [pc, #64]	; (800335c <HAL_RCC_GetHCLKFreq+0x50>)
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	0a1b      	lsrs	r3, r3, #8
 800331e:	f003 030f 	and.w	r3, r3, #15
 8003322:	490f      	ldr	r1, [pc, #60]	; (8003360 <HAL_RCC_GetHCLKFreq+0x54>)
 8003324:	5ccb      	ldrb	r3, [r1, r3]
 8003326:	f003 031f 	and.w	r3, r3, #31
 800332a:	fa22 f303 	lsr.w	r3, r2, r3
 800332e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003330:	4b0a      	ldr	r3, [pc, #40]	; (800335c <HAL_RCC_GetHCLKFreq+0x50>)
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	f003 030f 	and.w	r3, r3, #15
 8003338:	4a09      	ldr	r2, [pc, #36]	; (8003360 <HAL_RCC_GetHCLKFreq+0x54>)
 800333a:	5cd3      	ldrb	r3, [r2, r3]
 800333c:	f003 031f 	and.w	r3, r3, #31
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	fa22 f303 	lsr.w	r3, r2, r3
 8003346:	4a07      	ldr	r2, [pc, #28]	; (8003364 <HAL_RCC_GetHCLKFreq+0x58>)
 8003348:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800334a:	4a07      	ldr	r2, [pc, #28]	; (8003368 <HAL_RCC_GetHCLKFreq+0x5c>)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003350:	4b04      	ldr	r3, [pc, #16]	; (8003364 <HAL_RCC_GetHCLKFreq+0x58>)
 8003352:	681b      	ldr	r3, [r3, #0]
}
 8003354:	4618      	mov	r0, r3
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	58024400 	.word	0x58024400
 8003360:	0800a7a0 	.word	0x0800a7a0
 8003364:	24000004 	.word	0x24000004
 8003368:	24000000 	.word	0x24000000

0800336c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003370:	f7ff ffcc 	bl	800330c <HAL_RCC_GetHCLKFreq>
 8003374:	4602      	mov	r2, r0
 8003376:	4b06      	ldr	r3, [pc, #24]	; (8003390 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	091b      	lsrs	r3, r3, #4
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	4904      	ldr	r1, [pc, #16]	; (8003394 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003382:	5ccb      	ldrb	r3, [r1, r3]
 8003384:	f003 031f 	and.w	r3, r3, #31
 8003388:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800338c:	4618      	mov	r0, r3
 800338e:	bd80      	pop	{r7, pc}
 8003390:	58024400 	.word	0x58024400
 8003394:	0800a7a0 	.word	0x0800a7a0

08003398 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800339c:	f7ff ffb6 	bl	800330c <HAL_RCC_GetHCLKFreq>
 80033a0:	4602      	mov	r2, r0
 80033a2:	4b06      	ldr	r3, [pc, #24]	; (80033bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	0a1b      	lsrs	r3, r3, #8
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	4904      	ldr	r1, [pc, #16]	; (80033c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80033ae:	5ccb      	ldrb	r3, [r1, r3]
 80033b0:	f003 031f 	and.w	r3, r3, #31
 80033b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	58024400 	.word	0x58024400
 80033c0:	0800a7a0 	.word	0x0800a7a0

080033c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	223f      	movs	r2, #63	; 0x3f
 80033d2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80033d4:	4b1a      	ldr	r3, [pc, #104]	; (8003440 <HAL_RCC_GetClockConfig+0x7c>)
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	f003 0207 	and.w	r2, r3, #7
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80033e0:	4b17      	ldr	r3, [pc, #92]	; (8003440 <HAL_RCC_GetClockConfig+0x7c>)
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80033ec:	4b14      	ldr	r3, [pc, #80]	; (8003440 <HAL_RCC_GetClockConfig+0x7c>)
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	f003 020f 	and.w	r2, r3, #15
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80033f8:	4b11      	ldr	r3, [pc, #68]	; (8003440 <HAL_RCC_GetClockConfig+0x7c>)
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003404:	4b0e      	ldr	r3, [pc, #56]	; (8003440 <HAL_RCC_GetClockConfig+0x7c>)
 8003406:	69db      	ldr	r3, [r3, #28]
 8003408:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003410:	4b0b      	ldr	r3, [pc, #44]	; (8003440 <HAL_RCC_GetClockConfig+0x7c>)
 8003412:	69db      	ldr	r3, [r3, #28]
 8003414:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800341c:	4b08      	ldr	r3, [pc, #32]	; (8003440 <HAL_RCC_GetClockConfig+0x7c>)
 800341e:	6a1b      	ldr	r3, [r3, #32]
 8003420:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003428:	4b06      	ldr	r3, [pc, #24]	; (8003444 <HAL_RCC_GetClockConfig+0x80>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 020f 	and.w	r2, r3, #15
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	601a      	str	r2, [r3, #0]
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	58024400 	.word	0x58024400
 8003444:	52002000 	.word	0x52002000

08003448 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003450:	2300      	movs	r3, #0
 8003452:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003454:	2300      	movs	r3, #0
 8003456:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d03f      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003468:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800346c:	d02a      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800346e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003472:	d824      	bhi.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003474:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003478:	d018      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800347a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800347e:	d81e      	bhi.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003480:	2b00      	cmp	r3, #0
 8003482:	d003      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003484:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003488:	d007      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800348a:	e018      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800348c:	4ba3      	ldr	r3, [pc, #652]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800348e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003490:	4aa2      	ldr	r2, [pc, #648]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003492:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003496:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003498:	e015      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	3304      	adds	r3, #4
 800349e:	2102      	movs	r1, #2
 80034a0:	4618      	mov	r0, r3
 80034a2:	f001 f9d5 	bl	8004850 <RCCEx_PLL2_Config>
 80034a6:	4603      	mov	r3, r0
 80034a8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80034aa:	e00c      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3324      	adds	r3, #36	; 0x24
 80034b0:	2102      	movs	r1, #2
 80034b2:	4618      	mov	r0, r3
 80034b4:	f001 fa7e 	bl	80049b4 <RCCEx_PLL3_Config>
 80034b8:	4603      	mov	r3, r0
 80034ba:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80034bc:	e003      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	75fb      	strb	r3, [r7, #23]
      break;
 80034c2:	e000      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80034c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034c6:	7dfb      	ldrb	r3, [r7, #23]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d109      	bne.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80034cc:	4b93      	ldr	r3, [pc, #588]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80034ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034d8:	4990      	ldr	r1, [pc, #576]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	650b      	str	r3, [r1, #80]	; 0x50
 80034de:	e001      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034e0:	7dfb      	ldrb	r3, [r7, #23]
 80034e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d03d      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f4:	2b04      	cmp	r3, #4
 80034f6:	d826      	bhi.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80034f8:	a201      	add	r2, pc, #4	; (adr r2, 8003500 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80034fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fe:	bf00      	nop
 8003500:	08003515 	.word	0x08003515
 8003504:	08003523 	.word	0x08003523
 8003508:	08003535 	.word	0x08003535
 800350c:	0800354d 	.word	0x0800354d
 8003510:	0800354d 	.word	0x0800354d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003514:	4b81      	ldr	r3, [pc, #516]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003518:	4a80      	ldr	r2, [pc, #512]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800351a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800351e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003520:	e015      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	3304      	adds	r3, #4
 8003526:	2100      	movs	r1, #0
 8003528:	4618      	mov	r0, r3
 800352a:	f001 f991 	bl	8004850 <RCCEx_PLL2_Config>
 800352e:	4603      	mov	r3, r0
 8003530:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003532:	e00c      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3324      	adds	r3, #36	; 0x24
 8003538:	2100      	movs	r1, #0
 800353a:	4618      	mov	r0, r3
 800353c:	f001 fa3a 	bl	80049b4 <RCCEx_PLL3_Config>
 8003540:	4603      	mov	r3, r0
 8003542:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003544:	e003      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	75fb      	strb	r3, [r7, #23]
      break;
 800354a:	e000      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800354c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800354e:	7dfb      	ldrb	r3, [r7, #23]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d109      	bne.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003554:	4b71      	ldr	r3, [pc, #452]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003558:	f023 0207 	bic.w	r2, r3, #7
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003560:	496e      	ldr	r1, [pc, #440]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003562:	4313      	orrs	r3, r2
 8003564:	650b      	str	r3, [r1, #80]	; 0x50
 8003566:	e001      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003568:	7dfb      	ldrb	r3, [r7, #23]
 800356a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003574:	2b00      	cmp	r3, #0
 8003576:	d042      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003580:	d02b      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003582:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003586:	d825      	bhi.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003588:	2bc0      	cmp	r3, #192	; 0xc0
 800358a:	d028      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x196>
 800358c:	2bc0      	cmp	r3, #192	; 0xc0
 800358e:	d821      	bhi.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003590:	2b80      	cmp	r3, #128	; 0x80
 8003592:	d016      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003594:	2b80      	cmp	r3, #128	; 0x80
 8003596:	d81d      	bhi.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003598:	2b00      	cmp	r3, #0
 800359a:	d002      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800359c:	2b40      	cmp	r3, #64	; 0x40
 800359e:	d007      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80035a0:	e018      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035a2:	4b5e      	ldr	r3, [pc, #376]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a6:	4a5d      	ldr	r2, [pc, #372]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80035ae:	e017      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	3304      	adds	r3, #4
 80035b4:	2100      	movs	r1, #0
 80035b6:	4618      	mov	r0, r3
 80035b8:	f001 f94a 	bl	8004850 <RCCEx_PLL2_Config>
 80035bc:	4603      	mov	r3, r0
 80035be:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80035c0:	e00e      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	3324      	adds	r3, #36	; 0x24
 80035c6:	2100      	movs	r1, #0
 80035c8:	4618      	mov	r0, r3
 80035ca:	f001 f9f3 	bl	80049b4 <RCCEx_PLL3_Config>
 80035ce:	4603      	mov	r3, r0
 80035d0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80035d2:	e005      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	75fb      	strb	r3, [r7, #23]
      break;
 80035d8:	e002      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80035da:	bf00      	nop
 80035dc:	e000      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80035de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035e0:	7dfb      	ldrb	r3, [r7, #23]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d109      	bne.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80035e6:	4b4d      	ldr	r3, [pc, #308]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ea:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f2:	494a      	ldr	r1, [pc, #296]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	650b      	str	r3, [r1, #80]	; 0x50
 80035f8:	e001      	b.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035fa:	7dfb      	ldrb	r3, [r7, #23]
 80035fc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003606:	2b00      	cmp	r3, #0
 8003608:	d049      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003610:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003614:	d030      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003616:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800361a:	d82a      	bhi.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800361c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003620:	d02c      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003622:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003626:	d824      	bhi.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003628:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800362c:	d018      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800362e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003632:	d81e      	bhi.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003634:	2b00      	cmp	r3, #0
 8003636:	d003      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003638:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800363c:	d007      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800363e:	e018      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003640:	4b36      	ldr	r3, [pc, #216]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003644:	4a35      	ldr	r2, [pc, #212]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003646:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800364a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800364c:	e017      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	3304      	adds	r3, #4
 8003652:	2100      	movs	r1, #0
 8003654:	4618      	mov	r0, r3
 8003656:	f001 f8fb 	bl	8004850 <RCCEx_PLL2_Config>
 800365a:	4603      	mov	r3, r0
 800365c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800365e:	e00e      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3324      	adds	r3, #36	; 0x24
 8003664:	2100      	movs	r1, #0
 8003666:	4618      	mov	r0, r3
 8003668:	f001 f9a4 	bl	80049b4 <RCCEx_PLL3_Config>
 800366c:	4603      	mov	r3, r0
 800366e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003670:	e005      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	75fb      	strb	r3, [r7, #23]
      break;
 8003676:	e002      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003678:	bf00      	nop
 800367a:	e000      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800367c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800367e:	7dfb      	ldrb	r3, [r7, #23]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d10a      	bne.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003684:	4b25      	ldr	r3, [pc, #148]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003688:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003692:	4922      	ldr	r1, [pc, #136]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003694:	4313      	orrs	r3, r2
 8003696:	658b      	str	r3, [r1, #88]	; 0x58
 8003698:	e001      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800369a:	7dfb      	ldrb	r3, [r7, #23]
 800369c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d04b      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80036b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036b4:	d030      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80036b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036ba:	d82a      	bhi.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80036bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036c0:	d02e      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80036c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036c6:	d824      	bhi.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80036c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036cc:	d018      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80036ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036d2:	d81e      	bhi.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d003      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80036d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036dc:	d007      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80036de:	e018      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036e0:	4b0e      	ldr	r3, [pc, #56]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e4:	4a0d      	ldr	r2, [pc, #52]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036ec:	e019      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	3304      	adds	r3, #4
 80036f2:	2100      	movs	r1, #0
 80036f4:	4618      	mov	r0, r3
 80036f6:	f001 f8ab 	bl	8004850 <RCCEx_PLL2_Config>
 80036fa:	4603      	mov	r3, r0
 80036fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80036fe:	e010      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	3324      	adds	r3, #36	; 0x24
 8003704:	2100      	movs	r1, #0
 8003706:	4618      	mov	r0, r3
 8003708:	f001 f954 	bl	80049b4 <RCCEx_PLL3_Config>
 800370c:	4603      	mov	r3, r0
 800370e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003710:	e007      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	75fb      	strb	r3, [r7, #23]
      break;
 8003716:	e004      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003718:	bf00      	nop
 800371a:	e002      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800371c:	58024400 	.word	0x58024400
      break;
 8003720:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003722:	7dfb      	ldrb	r3, [r7, #23]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10a      	bne.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003728:	4b99      	ldr	r3, [pc, #612]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800372a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003736:	4996      	ldr	r1, [pc, #600]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003738:	4313      	orrs	r3, r2
 800373a:	658b      	str	r3, [r1, #88]	; 0x58
 800373c:	e001      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800373e:	7dfb      	ldrb	r3, [r7, #23]
 8003740:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d032      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003752:	2b30      	cmp	r3, #48	; 0x30
 8003754:	d01c      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003756:	2b30      	cmp	r3, #48	; 0x30
 8003758:	d817      	bhi.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800375a:	2b20      	cmp	r3, #32
 800375c:	d00c      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800375e:	2b20      	cmp	r3, #32
 8003760:	d813      	bhi.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003762:	2b00      	cmp	r3, #0
 8003764:	d016      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003766:	2b10      	cmp	r3, #16
 8003768:	d10f      	bne.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800376a:	4b89      	ldr	r3, [pc, #548]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800376c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376e:	4a88      	ldr	r2, [pc, #544]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003774:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003776:	e00e      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	3304      	adds	r3, #4
 800377c:	2102      	movs	r1, #2
 800377e:	4618      	mov	r0, r3
 8003780:	f001 f866 	bl	8004850 <RCCEx_PLL2_Config>
 8003784:	4603      	mov	r3, r0
 8003786:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003788:	e005      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	75fb      	strb	r3, [r7, #23]
      break;
 800378e:	e002      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003790:	bf00      	nop
 8003792:	e000      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003794:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003796:	7dfb      	ldrb	r3, [r7, #23]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d109      	bne.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800379c:	4b7c      	ldr	r3, [pc, #496]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800379e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037a8:	4979      	ldr	r1, [pc, #484]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	64cb      	str	r3, [r1, #76]	; 0x4c
 80037ae:	e001      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b0:	7dfb      	ldrb	r3, [r7, #23]
 80037b2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d047      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037c8:	d030      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80037ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037ce:	d82a      	bhi.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80037d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80037d4:	d02c      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80037d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80037da:	d824      	bhi.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80037dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037e0:	d018      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80037e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037e6:	d81e      	bhi.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80037ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037f0:	d007      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80037f2:	e018      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037f4:	4b66      	ldr	r3, [pc, #408]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f8:	4a65      	ldr	r2, [pc, #404]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003800:	e017      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	3304      	adds	r3, #4
 8003806:	2100      	movs	r1, #0
 8003808:	4618      	mov	r0, r3
 800380a:	f001 f821 	bl	8004850 <RCCEx_PLL2_Config>
 800380e:	4603      	mov	r3, r0
 8003810:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003812:	e00e      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3324      	adds	r3, #36	; 0x24
 8003818:	2100      	movs	r1, #0
 800381a:	4618      	mov	r0, r3
 800381c:	f001 f8ca 	bl	80049b4 <RCCEx_PLL3_Config>
 8003820:	4603      	mov	r3, r0
 8003822:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003824:	e005      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	75fb      	strb	r3, [r7, #23]
      break;
 800382a:	e002      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800382c:	bf00      	nop
 800382e:	e000      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003830:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003832:	7dfb      	ldrb	r3, [r7, #23]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d109      	bne.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003838:	4b55      	ldr	r3, [pc, #340]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800383a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800383c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003844:	4952      	ldr	r1, [pc, #328]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003846:	4313      	orrs	r3, r2
 8003848:	650b      	str	r3, [r1, #80]	; 0x50
 800384a:	e001      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800384c:	7dfb      	ldrb	r3, [r7, #23]
 800384e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d049      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003860:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003864:	d02e      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003866:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800386a:	d828      	bhi.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x476>
 800386c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003870:	d02a      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8003872:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003876:	d822      	bhi.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003878:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800387c:	d026      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x484>
 800387e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003882:	d81c      	bhi.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003884:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003888:	d010      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x464>
 800388a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800388e:	d816      	bhi.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003890:	2b00      	cmp	r3, #0
 8003892:	d01d      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003898:	d111      	bne.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	3304      	adds	r3, #4
 800389e:	2101      	movs	r1, #1
 80038a0:	4618      	mov	r0, r3
 80038a2:	f000 ffd5 	bl	8004850 <RCCEx_PLL2_Config>
 80038a6:	4603      	mov	r3, r0
 80038a8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80038aa:	e012      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3324      	adds	r3, #36	; 0x24
 80038b0:	2101      	movs	r1, #1
 80038b2:	4618      	mov	r0, r3
 80038b4:	f001 f87e 	bl	80049b4 <RCCEx_PLL3_Config>
 80038b8:	4603      	mov	r3, r0
 80038ba:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80038bc:	e009      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	75fb      	strb	r3, [r7, #23]
      break;
 80038c2:	e006      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80038c4:	bf00      	nop
 80038c6:	e004      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80038c8:	bf00      	nop
 80038ca:	e002      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80038cc:	bf00      	nop
 80038ce:	e000      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80038d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038d2:	7dfb      	ldrb	r3, [r7, #23]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d109      	bne.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80038d8:	4b2d      	ldr	r3, [pc, #180]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038dc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038e4:	492a      	ldr	r1, [pc, #168]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	650b      	str	r3, [r1, #80]	; 0x50
 80038ea:	e001      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ec:	7dfb      	ldrb	r3, [r7, #23]
 80038ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d04d      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003902:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003906:	d02e      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003908:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800390c:	d828      	bhi.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800390e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003912:	d02a      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003918:	d822      	bhi.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800391a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800391e:	d026      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8003920:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003924:	d81c      	bhi.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003926:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800392a:	d010      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800392c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003930:	d816      	bhi.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003932:	2b00      	cmp	r3, #0
 8003934:	d01d      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003936:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800393a:	d111      	bne.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	3304      	adds	r3, #4
 8003940:	2101      	movs	r1, #1
 8003942:	4618      	mov	r0, r3
 8003944:	f000 ff84 	bl	8004850 <RCCEx_PLL2_Config>
 8003948:	4603      	mov	r3, r0
 800394a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800394c:	e012      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	3324      	adds	r3, #36	; 0x24
 8003952:	2101      	movs	r1, #1
 8003954:	4618      	mov	r0, r3
 8003956:	f001 f82d 	bl	80049b4 <RCCEx_PLL3_Config>
 800395a:	4603      	mov	r3, r0
 800395c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800395e:	e009      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	75fb      	strb	r3, [r7, #23]
      break;
 8003964:	e006      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003966:	bf00      	nop
 8003968:	e004      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800396a:	bf00      	nop
 800396c:	e002      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800396e:	bf00      	nop
 8003970:	e000      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003972:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003974:	7dfb      	ldrb	r3, [r7, #23]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10c      	bne.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800397a:	4b05      	ldr	r3, [pc, #20]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800397c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800397e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003988:	4901      	ldr	r1, [pc, #4]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800398a:	4313      	orrs	r3, r2
 800398c:	658b      	str	r3, [r1, #88]	; 0x58
 800398e:	e003      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003990:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003994:	7dfb      	ldrb	r3, [r7, #23]
 8003996:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d02f      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039ac:	d00e      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x584>
 80039ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039b2:	d814      	bhi.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x596>
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d015      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80039b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039bc:	d10f      	bne.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039be:	4baf      	ldr	r3, [pc, #700]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c2:	4aae      	ldr	r2, [pc, #696]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80039ca:	e00c      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	3304      	adds	r3, #4
 80039d0:	2101      	movs	r1, #1
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 ff3c 	bl	8004850 <RCCEx_PLL2_Config>
 80039d8:	4603      	mov	r3, r0
 80039da:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80039dc:	e003      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	75fb      	strb	r3, [r7, #23]
      break;
 80039e2:	e000      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80039e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039e6:	7dfb      	ldrb	r3, [r7, #23]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d109      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80039ec:	4ba3      	ldr	r3, [pc, #652]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039f8:	49a0      	ldr	r1, [pc, #640]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	650b      	str	r3, [r1, #80]	; 0x50
 80039fe:	e001      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a00:	7dfb      	ldrb	r3, [r7, #23]
 8003a02:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d032      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a14:	2b03      	cmp	r3, #3
 8003a16:	d81b      	bhi.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003a18:	a201      	add	r2, pc, #4	; (adr r2, 8003a20 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8003a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1e:	bf00      	nop
 8003a20:	08003a57 	.word	0x08003a57
 8003a24:	08003a31 	.word	0x08003a31
 8003a28:	08003a3f 	.word	0x08003a3f
 8003a2c:	08003a57 	.word	0x08003a57
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a30:	4b92      	ldr	r3, [pc, #584]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a34:	4a91      	ldr	r2, [pc, #580]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003a3c:	e00c      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	3304      	adds	r3, #4
 8003a42:	2102      	movs	r1, #2
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 ff03 	bl	8004850 <RCCEx_PLL2_Config>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003a4e:	e003      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	75fb      	strb	r3, [r7, #23]
      break;
 8003a54:	e000      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003a56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a58:	7dfb      	ldrb	r3, [r7, #23]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d109      	bne.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003a5e:	4b87      	ldr	r3, [pc, #540]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a62:	f023 0203 	bic.w	r2, r3, #3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6a:	4984      	ldr	r1, [pc, #528]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003a70:	e001      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a72:	7dfb      	ldrb	r3, [r7, #23]
 8003a74:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 8086 	beq.w	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a84:	4b7e      	ldr	r3, [pc, #504]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a7d      	ldr	r2, [pc, #500]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a90:	f7fd fe30 	bl	80016f4 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a96:	e009      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a98:	f7fd fe2c 	bl	80016f4 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b64      	cmp	r3, #100	; 0x64
 8003aa4:	d902      	bls.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	75fb      	strb	r3, [r7, #23]
        break;
 8003aaa:	e005      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003aac:	4b74      	ldr	r3, [pc, #464]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d0ef      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003ab8:	7dfb      	ldrb	r3, [r7, #23]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d166      	bne.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003abe:	4b6f      	ldr	r3, [pc, #444]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ac0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ac8:	4053      	eors	r3, r2
 8003aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d013      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ad2:	4b6a      	ldr	r3, [pc, #424]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ada:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003adc:	4b67      	ldr	r3, [pc, #412]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae0:	4a66      	ldr	r2, [pc, #408]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ae2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ae6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ae8:	4b64      	ldr	r3, [pc, #400]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aec:	4a63      	ldr	r2, [pc, #396]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003af2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003af4:	4a61      	ldr	r2, [pc, #388]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b04:	d115      	bne.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b06:	f7fd fdf5 	bl	80016f4 <HAL_GetTick>
 8003b0a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b0c:	e00b      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b0e:	f7fd fdf1 	bl	80016f4 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d902      	bls.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	75fb      	strb	r3, [r7, #23]
            break;
 8003b24:	e005      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b26:	4b55      	ldr	r3, [pc, #340]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0ed      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003b32:	7dfb      	ldrb	r3, [r7, #23]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d126      	bne.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b46:	d10d      	bne.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003b48:	4b4c      	ldr	r3, [pc, #304]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b56:	0919      	lsrs	r1, r3, #4
 8003b58:	4b4a      	ldr	r3, [pc, #296]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003b5a:	400b      	ands	r3, r1
 8003b5c:	4947      	ldr	r1, [pc, #284]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	610b      	str	r3, [r1, #16]
 8003b62:	e005      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003b64:	4b45      	ldr	r3, [pc, #276]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	4a44      	ldr	r2, [pc, #272]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b6a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003b6e:	6113      	str	r3, [r2, #16]
 8003b70:	4b42      	ldr	r3, [pc, #264]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b7e:	493f      	ldr	r1, [pc, #252]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	670b      	str	r3, [r1, #112]	; 0x70
 8003b84:	e004      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b86:	7dfb      	ldrb	r3, [r7, #23]
 8003b88:	75bb      	strb	r3, [r7, #22]
 8003b8a:	e001      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b8c:	7dfb      	ldrb	r3, [r7, #23]
 8003b8e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 8085 	beq.w	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ba2:	2b28      	cmp	r3, #40	; 0x28
 8003ba4:	d866      	bhi.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003ba6:	a201      	add	r2, pc, #4	; (adr r2, 8003bac <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bac:	08003c89 	.word	0x08003c89
 8003bb0:	08003c75 	.word	0x08003c75
 8003bb4:	08003c75 	.word	0x08003c75
 8003bb8:	08003c75 	.word	0x08003c75
 8003bbc:	08003c75 	.word	0x08003c75
 8003bc0:	08003c75 	.word	0x08003c75
 8003bc4:	08003c75 	.word	0x08003c75
 8003bc8:	08003c75 	.word	0x08003c75
 8003bcc:	08003c51 	.word	0x08003c51
 8003bd0:	08003c75 	.word	0x08003c75
 8003bd4:	08003c75 	.word	0x08003c75
 8003bd8:	08003c75 	.word	0x08003c75
 8003bdc:	08003c75 	.word	0x08003c75
 8003be0:	08003c75 	.word	0x08003c75
 8003be4:	08003c75 	.word	0x08003c75
 8003be8:	08003c75 	.word	0x08003c75
 8003bec:	08003c63 	.word	0x08003c63
 8003bf0:	08003c75 	.word	0x08003c75
 8003bf4:	08003c75 	.word	0x08003c75
 8003bf8:	08003c75 	.word	0x08003c75
 8003bfc:	08003c75 	.word	0x08003c75
 8003c00:	08003c75 	.word	0x08003c75
 8003c04:	08003c75 	.word	0x08003c75
 8003c08:	08003c75 	.word	0x08003c75
 8003c0c:	08003c89 	.word	0x08003c89
 8003c10:	08003c75 	.word	0x08003c75
 8003c14:	08003c75 	.word	0x08003c75
 8003c18:	08003c75 	.word	0x08003c75
 8003c1c:	08003c75 	.word	0x08003c75
 8003c20:	08003c75 	.word	0x08003c75
 8003c24:	08003c75 	.word	0x08003c75
 8003c28:	08003c75 	.word	0x08003c75
 8003c2c:	08003c89 	.word	0x08003c89
 8003c30:	08003c75 	.word	0x08003c75
 8003c34:	08003c75 	.word	0x08003c75
 8003c38:	08003c75 	.word	0x08003c75
 8003c3c:	08003c75 	.word	0x08003c75
 8003c40:	08003c75 	.word	0x08003c75
 8003c44:	08003c75 	.word	0x08003c75
 8003c48:	08003c75 	.word	0x08003c75
 8003c4c:	08003c89 	.word	0x08003c89
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	3304      	adds	r3, #4
 8003c54:	2101      	movs	r1, #1
 8003c56:	4618      	mov	r0, r3
 8003c58:	f000 fdfa 	bl	8004850 <RCCEx_PLL2_Config>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003c60:	e013      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	3324      	adds	r3, #36	; 0x24
 8003c66:	2101      	movs	r1, #1
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f000 fea3 	bl	80049b4 <RCCEx_PLL3_Config>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003c72:	e00a      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	75fb      	strb	r3, [r7, #23]
      break;
 8003c78:	e007      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003c7a:	bf00      	nop
 8003c7c:	58024400 	.word	0x58024400
 8003c80:	58024800 	.word	0x58024800
 8003c84:	00ffffcf 	.word	0x00ffffcf
      break;
 8003c88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c8a:	7dfb      	ldrb	r3, [r7, #23]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d109      	bne.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003c90:	4b96      	ldr	r3, [pc, #600]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c94:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c9c:	4993      	ldr	r1, [pc, #588]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	654b      	str	r3, [r1, #84]	; 0x54
 8003ca2:	e001      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca4:	7dfb      	ldrb	r3, [r7, #23]
 8003ca6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d038      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cb8:	2b05      	cmp	r3, #5
 8003cba:	d821      	bhi.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003cbc:	a201      	add	r2, pc, #4	; (adr r2, 8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8003cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc2:	bf00      	nop
 8003cc4:	08003d07 	.word	0x08003d07
 8003cc8:	08003cdd 	.word	0x08003cdd
 8003ccc:	08003cef 	.word	0x08003cef
 8003cd0:	08003d07 	.word	0x08003d07
 8003cd4:	08003d07 	.word	0x08003d07
 8003cd8:	08003d07 	.word	0x08003d07
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3304      	adds	r3, #4
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 fdb4 	bl	8004850 <RCCEx_PLL2_Config>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003cec:	e00c      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	3324      	adds	r3, #36	; 0x24
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f000 fe5d 	bl	80049b4 <RCCEx_PLL3_Config>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003cfe:	e003      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	75fb      	strb	r3, [r7, #23]
      break;
 8003d04:	e000      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003d06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d08:	7dfb      	ldrb	r3, [r7, #23]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d109      	bne.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003d0e:	4b77      	ldr	r3, [pc, #476]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d12:	f023 0207 	bic.w	r2, r3, #7
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d1a:	4974      	ldr	r1, [pc, #464]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	654b      	str	r3, [r1, #84]	; 0x54
 8003d20:	e001      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d22:	7dfb      	ldrb	r3, [r7, #23]
 8003d24:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0304 	and.w	r3, r3, #4
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d03a      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d38:	2b05      	cmp	r3, #5
 8003d3a:	d821      	bhi.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003d3c:	a201      	add	r2, pc, #4	; (adr r2, 8003d44 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8003d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d42:	bf00      	nop
 8003d44:	08003d87 	.word	0x08003d87
 8003d48:	08003d5d 	.word	0x08003d5d
 8003d4c:	08003d6f 	.word	0x08003d6f
 8003d50:	08003d87 	.word	0x08003d87
 8003d54:	08003d87 	.word	0x08003d87
 8003d58:	08003d87 	.word	0x08003d87
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3304      	adds	r3, #4
 8003d60:	2101      	movs	r1, #1
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 fd74 	bl	8004850 <RCCEx_PLL2_Config>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003d6c:	e00c      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	3324      	adds	r3, #36	; 0x24
 8003d72:	2101      	movs	r1, #1
 8003d74:	4618      	mov	r0, r3
 8003d76:	f000 fe1d 	bl	80049b4 <RCCEx_PLL3_Config>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003d7e:	e003      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	75fb      	strb	r3, [r7, #23]
      break;
 8003d84:	e000      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003d86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d88:	7dfb      	ldrb	r3, [r7, #23]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10a      	bne.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d8e:	4b57      	ldr	r3, [pc, #348]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d92:	f023 0207 	bic.w	r2, r3, #7
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9c:	4953      	ldr	r1, [pc, #332]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	658b      	str	r3, [r1, #88]	; 0x58
 8003da2:	e001      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003da4:	7dfb      	ldrb	r3, [r7, #23]
 8003da6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0320 	and.w	r3, r3, #32
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d04b      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dbe:	d02e      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003dc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dc4:	d828      	bhi.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dca:	d02a      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd0:	d822      	bhi.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003dd2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003dd6:	d026      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003dd8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ddc:	d81c      	bhi.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003dde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003de2:	d010      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003de4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003de8:	d816      	bhi.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d01d      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8003dee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003df2:	d111      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	3304      	adds	r3, #4
 8003df8:	2100      	movs	r1, #0
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 fd28 	bl	8004850 <RCCEx_PLL2_Config>
 8003e00:	4603      	mov	r3, r0
 8003e02:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003e04:	e012      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	3324      	adds	r3, #36	; 0x24
 8003e0a:	2102      	movs	r1, #2
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 fdd1 	bl	80049b4 <RCCEx_PLL3_Config>
 8003e12:	4603      	mov	r3, r0
 8003e14:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003e16:	e009      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e1c:	e006      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003e1e:	bf00      	nop
 8003e20:	e004      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003e22:	bf00      	nop
 8003e24:	e002      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003e26:	bf00      	nop
 8003e28:	e000      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003e2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e2c:	7dfb      	ldrb	r3, [r7, #23]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10a      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e32:	4b2e      	ldr	r3, [pc, #184]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e36:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e40:	492a      	ldr	r1, [pc, #168]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	654b      	str	r3, [r1, #84]	; 0x54
 8003e46:	e001      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e48:	7dfb      	ldrb	r3, [r7, #23]
 8003e4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d04d      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e5e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003e62:	d02e      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003e64:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003e68:	d828      	bhi.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e6e:	d02a      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003e70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e74:	d822      	bhi.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003e76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e7a:	d026      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003e7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e80:	d81c      	bhi.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003e82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e86:	d010      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003e88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e8c:	d816      	bhi.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d01d      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e96:	d111      	bne.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	3304      	adds	r3, #4
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 fcd6 	bl	8004850 <RCCEx_PLL2_Config>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003ea8:	e012      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	3324      	adds	r3, #36	; 0x24
 8003eae:	2102      	movs	r1, #2
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f000 fd7f 	bl	80049b4 <RCCEx_PLL3_Config>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003eba:	e009      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	75fb      	strb	r3, [r7, #23]
      break;
 8003ec0:	e006      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003ec2:	bf00      	nop
 8003ec4:	e004      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003ec6:	bf00      	nop
 8003ec8:	e002      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003eca:	bf00      	nop
 8003ecc:	e000      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003ece:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ed0:	7dfb      	ldrb	r3, [r7, #23]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d10c      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ed6:	4b05      	ldr	r3, [pc, #20]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eda:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ee4:	4901      	ldr	r1, [pc, #4]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	658b      	str	r3, [r1, #88]	; 0x58
 8003eea:	e003      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003eec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef0:	7dfb      	ldrb	r3, [r7, #23]
 8003ef2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d04b      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f06:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003f0a:	d02e      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003f0c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003f10:	d828      	bhi.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003f12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f16:	d02a      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003f18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f1c:	d822      	bhi.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003f1e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003f22:	d026      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003f24:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003f28:	d81c      	bhi.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003f2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f2e:	d010      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003f30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f34:	d816      	bhi.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d01d      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003f3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f3e:	d111      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	3304      	adds	r3, #4
 8003f44:	2100      	movs	r1, #0
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 fc82 	bl	8004850 <RCCEx_PLL2_Config>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003f50:	e012      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	3324      	adds	r3, #36	; 0x24
 8003f56:	2102      	movs	r1, #2
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 fd2b 	bl	80049b4 <RCCEx_PLL3_Config>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003f62:	e009      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	75fb      	strb	r3, [r7, #23]
      break;
 8003f68:	e006      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003f6a:	bf00      	nop
 8003f6c:	e004      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003f6e:	bf00      	nop
 8003f70:	e002      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003f72:	bf00      	nop
 8003f74:	e000      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003f76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f78:	7dfb      	ldrb	r3, [r7, #23]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10a      	bne.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003f7e:	4b9d      	ldr	r3, [pc, #628]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f8c:	4999      	ldr	r1, [pc, #612]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	658b      	str	r3, [r1, #88]	; 0x58
 8003f92:	e001      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f94:	7dfb      	ldrb	r3, [r7, #23]
 8003f96:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0308 	and.w	r3, r3, #8
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d01a      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fae:	d10a      	bne.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	3324      	adds	r3, #36	; 0x24
 8003fb4:	2102      	movs	r1, #2
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 fcfc 	bl	80049b4 <RCCEx_PLL3_Config>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003fc6:	4b8b      	ldr	r3, [pc, #556]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fd4:	4987      	ldr	r1, [pc, #540]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0310 	and.w	r3, r3, #16
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d01a      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ff0:	d10a      	bne.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	3324      	adds	r3, #36	; 0x24
 8003ff6:	2102      	movs	r1, #2
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f000 fcdb 	bl	80049b4 <RCCEx_PLL3_Config>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d001      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004008:	4b7a      	ldr	r3, [pc, #488]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800400a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800400c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004016:	4977      	ldr	r1, [pc, #476]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004018:	4313      	orrs	r3, r2
 800401a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d034      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800402e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004032:	d01d      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004034:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004038:	d817      	bhi.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800403e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004042:	d009      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004044:	e011      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	3304      	adds	r3, #4
 800404a:	2100      	movs	r1, #0
 800404c:	4618      	mov	r0, r3
 800404e:	f000 fbff 	bl	8004850 <RCCEx_PLL2_Config>
 8004052:	4603      	mov	r3, r0
 8004054:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004056:	e00c      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3324      	adds	r3, #36	; 0x24
 800405c:	2102      	movs	r1, #2
 800405e:	4618      	mov	r0, r3
 8004060:	f000 fca8 	bl	80049b4 <RCCEx_PLL3_Config>
 8004064:	4603      	mov	r3, r0
 8004066:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004068:	e003      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	75fb      	strb	r3, [r7, #23]
      break;
 800406e:	e000      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004070:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004072:	7dfb      	ldrb	r3, [r7, #23]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10a      	bne.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004078:	4b5e      	ldr	r3, [pc, #376]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800407a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004086:	495b      	ldr	r1, [pc, #364]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004088:	4313      	orrs	r3, r2
 800408a:	658b      	str	r3, [r1, #88]	; 0x58
 800408c:	e001      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800408e:	7dfb      	ldrb	r3, [r7, #23]
 8004090:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d033      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040a8:	d01c      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80040aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040ae:	d816      	bhi.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80040b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040b4:	d003      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80040b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040ba:	d007      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80040bc:	e00f      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040be:	4b4d      	ldr	r3, [pc, #308]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c2:	4a4c      	ldr	r2, [pc, #304]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80040ca:	e00c      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	3324      	adds	r3, #36	; 0x24
 80040d0:	2101      	movs	r1, #1
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 fc6e 	bl	80049b4 <RCCEx_PLL3_Config>
 80040d8:	4603      	mov	r3, r0
 80040da:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80040dc:	e003      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	75fb      	strb	r3, [r7, #23]
      break;
 80040e2:	e000      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80040e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040e6:	7dfb      	ldrb	r3, [r7, #23]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10a      	bne.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040ec:	4b41      	ldr	r3, [pc, #260]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040fa:	493e      	ldr	r1, [pc, #248]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	654b      	str	r3, [r1, #84]	; 0x54
 8004100:	e001      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004102:	7dfb      	ldrb	r3, [r7, #23]
 8004104:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d029      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800411a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800411e:	d007      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8004120:	e00f      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004122:	4b34      	ldr	r3, [pc, #208]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004126:	4a33      	ldr	r2, [pc, #204]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800412c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800412e:	e00b      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3304      	adds	r3, #4
 8004134:	2102      	movs	r1, #2
 8004136:	4618      	mov	r0, r3
 8004138:	f000 fb8a 	bl	8004850 <RCCEx_PLL2_Config>
 800413c:	4603      	mov	r3, r0
 800413e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004140:	e002      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	75fb      	strb	r3, [r7, #23]
      break;
 8004146:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004148:	7dfb      	ldrb	r3, [r7, #23]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d109      	bne.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800414e:	4b29      	ldr	r3, [pc, #164]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004152:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800415a:	4926      	ldr	r1, [pc, #152]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800415c:	4313      	orrs	r3, r2
 800415e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004160:	e001      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004162:	7dfb      	ldrb	r3, [r7, #23]
 8004164:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	3324      	adds	r3, #36	; 0x24
 8004176:	2102      	movs	r1, #2
 8004178:	4618      	mov	r0, r3
 800417a:	f000 fc1b 	bl	80049b4 <RCCEx_PLL3_Config>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d001      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d033      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004198:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800419c:	d017      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800419e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041a2:	d811      	bhi.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80041a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041a8:	d013      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80041aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041ae:	d80b      	bhi.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d010      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80041b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041b8:	d106      	bne.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041ba:	4b0e      	ldr	r3, [pc, #56]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041be:	4a0d      	ldr	r2, [pc, #52]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80041c6:	e007      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	75fb      	strb	r3, [r7, #23]
      break;
 80041cc:	e004      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80041ce:	bf00      	nop
 80041d0:	e002      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80041d2:	bf00      	nop
 80041d4:	e000      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80041d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041d8:	7dfb      	ldrb	r3, [r7, #23]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10c      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041de:	4b05      	ldr	r3, [pc, #20]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041ea:	4902      	ldr	r1, [pc, #8]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	654b      	str	r3, [r1, #84]	; 0x54
 80041f0:	e004      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80041f2:	bf00      	nop
 80041f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041f8:	7dfb      	ldrb	r3, [r7, #23]
 80041fa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d008      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004208:	4b31      	ldr	r3, [pc, #196]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800420a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800420c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004214:	492e      	ldr	r1, [pc, #184]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004216:	4313      	orrs	r3, r2
 8004218:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d009      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004226:	4b2a      	ldr	r3, [pc, #168]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004234:	4926      	ldr	r1, [pc, #152]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004236:	4313      	orrs	r3, r2
 8004238:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d008      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004246:	4b22      	ldr	r3, [pc, #136]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800424a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004252:	491f      	ldr	r1, [pc, #124]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004254:	4313      	orrs	r3, r2
 8004256:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00d      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004264:	4b1a      	ldr	r3, [pc, #104]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	4a19      	ldr	r2, [pc, #100]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800426a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800426e:	6113      	str	r3, [r2, #16]
 8004270:	4b17      	ldr	r3, [pc, #92]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004272:	691a      	ldr	r2, [r3, #16]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800427a:	4915      	ldr	r1, [pc, #84]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800427c:	4313      	orrs	r3, r2
 800427e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	da08      	bge.n	800429a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004288:	4b11      	ldr	r3, [pc, #68]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800428a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800428c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004294:	490e      	ldr	r1, [pc, #56]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004296:	4313      	orrs	r3, r2
 8004298:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d009      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80042a6:	4b0a      	ldr	r3, [pc, #40]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b4:	4906      	ldr	r1, [pc, #24]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80042ba:	7dbb      	ldrb	r3, [r7, #22]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d101      	bne.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80042c0:	2300      	movs	r3, #0
 80042c2:	e000      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3718      	adds	r7, #24
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	58024400 	.word	0x58024400

080042d4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80042d8:	f7ff f818 	bl	800330c <HAL_RCC_GetHCLKFreq>
 80042dc:	4602      	mov	r2, r0
 80042de:	4b06      	ldr	r3, [pc, #24]	; (80042f8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	091b      	lsrs	r3, r3, #4
 80042e4:	f003 0307 	and.w	r3, r3, #7
 80042e8:	4904      	ldr	r1, [pc, #16]	; (80042fc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80042ea:	5ccb      	ldrb	r3, [r1, r3]
 80042ec:	f003 031f 	and.w	r3, r3, #31
 80042f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	58024400 	.word	0x58024400
 80042fc:	0800a7a0 	.word	0x0800a7a0

08004300 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004300:	b480      	push	{r7}
 8004302:	b089      	sub	sp, #36	; 0x24
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004308:	4ba1      	ldr	r3, [pc, #644]	; (8004590 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800430a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430c:	f003 0303 	and.w	r3, r3, #3
 8004310:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004312:	4b9f      	ldr	r3, [pc, #636]	; (8004590 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004316:	0b1b      	lsrs	r3, r3, #12
 8004318:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800431c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800431e:	4b9c      	ldr	r3, [pc, #624]	; (8004590 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004322:	091b      	lsrs	r3, r3, #4
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800432a:	4b99      	ldr	r3, [pc, #612]	; (8004590 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800432c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432e:	08db      	lsrs	r3, r3, #3
 8004330:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	fb02 f303 	mul.w	r3, r2, r3
 800433a:	ee07 3a90 	vmov	s15, r3
 800433e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004342:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 8111 	beq.w	8004570 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	2b02      	cmp	r3, #2
 8004352:	f000 8083 	beq.w	800445c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	2b02      	cmp	r3, #2
 800435a:	f200 80a1 	bhi.w	80044a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d003      	beq.n	800436c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d056      	beq.n	8004418 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800436a:	e099      	b.n	80044a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800436c:	4b88      	ldr	r3, [pc, #544]	; (8004590 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0320 	and.w	r3, r3, #32
 8004374:	2b00      	cmp	r3, #0
 8004376:	d02d      	beq.n	80043d4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004378:	4b85      	ldr	r3, [pc, #532]	; (8004590 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	08db      	lsrs	r3, r3, #3
 800437e:	f003 0303 	and.w	r3, r3, #3
 8004382:	4a84      	ldr	r2, [pc, #528]	; (8004594 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004384:	fa22 f303 	lsr.w	r3, r2, r3
 8004388:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	ee07 3a90 	vmov	s15, r3
 8004390:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	ee07 3a90 	vmov	s15, r3
 800439a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800439e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043a2:	4b7b      	ldr	r3, [pc, #492]	; (8004590 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043aa:	ee07 3a90 	vmov	s15, r3
 80043ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80043b6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004598 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ce:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80043d2:	e087      	b.n	80044e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	ee07 3a90 	vmov	s15, r3
 80043da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043de:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800459c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80043e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043e6:	4b6a      	ldr	r3, [pc, #424]	; (8004590 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ee:	ee07 3a90 	vmov	s15, r3
 80043f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80043fa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004598 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800440a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800440e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004412:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004416:	e065      	b.n	80044e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	ee07 3a90 	vmov	s15, r3
 800441e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004422:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80045a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800442a:	4b59      	ldr	r3, [pc, #356]	; (8004590 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800442c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004432:	ee07 3a90 	vmov	s15, r3
 8004436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800443a:	ed97 6a03 	vldr	s12, [r7, #12]
 800443e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004598 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800444a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800444e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004456:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800445a:	e043      	b.n	80044e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	ee07 3a90 	vmov	s15, r3
 8004462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004466:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80045a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800446a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800446e:	4b48      	ldr	r3, [pc, #288]	; (8004590 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004476:	ee07 3a90 	vmov	s15, r3
 800447a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800447e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004482:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004598 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800448a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800448e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800449a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800449e:	e021      	b.n	80044e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	ee07 3a90 	vmov	s15, r3
 80044a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044aa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80045a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80044ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044b2:	4b37      	ldr	r3, [pc, #220]	; (8004590 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ba:	ee07 3a90 	vmov	s15, r3
 80044be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80044c6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004598 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044e2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80044e4:	4b2a      	ldr	r3, [pc, #168]	; (8004590 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e8:	0a5b      	lsrs	r3, r3, #9
 80044ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044ee:	ee07 3a90 	vmov	s15, r3
 80044f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004502:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004506:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800450a:	ee17 2a90 	vmov	r2, s15
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004512:	4b1f      	ldr	r3, [pc, #124]	; (8004590 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004516:	0c1b      	lsrs	r3, r3, #16
 8004518:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800451c:	ee07 3a90 	vmov	s15, r3
 8004520:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004524:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004528:	ee37 7a87 	vadd.f32	s14, s15, s14
 800452c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004530:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004534:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004538:	ee17 2a90 	vmov	r2, s15
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004540:	4b13      	ldr	r3, [pc, #76]	; (8004590 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004544:	0e1b      	lsrs	r3, r3, #24
 8004546:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800454a:	ee07 3a90 	vmov	s15, r3
 800454e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004552:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004556:	ee37 7a87 	vadd.f32	s14, s15, s14
 800455a:	edd7 6a07 	vldr	s13, [r7, #28]
 800455e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004562:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004566:	ee17 2a90 	vmov	r2, s15
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800456e:	e008      	b.n	8004582 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	609a      	str	r2, [r3, #8]
}
 8004582:	bf00      	nop
 8004584:	3724      	adds	r7, #36	; 0x24
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	58024400 	.word	0x58024400
 8004594:	03d09000 	.word	0x03d09000
 8004598:	46000000 	.word	0x46000000
 800459c:	4c742400 	.word	0x4c742400
 80045a0:	4a742400 	.word	0x4a742400
 80045a4:	4af42400 	.word	0x4af42400

080045a8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b089      	sub	sp, #36	; 0x24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045b0:	4ba1      	ldr	r3, [pc, #644]	; (8004838 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b4:	f003 0303 	and.w	r3, r3, #3
 80045b8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80045ba:	4b9f      	ldr	r3, [pc, #636]	; (8004838 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045be:	0d1b      	lsrs	r3, r3, #20
 80045c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045c4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80045c6:	4b9c      	ldr	r3, [pc, #624]	; (8004838 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ca:	0a1b      	lsrs	r3, r3, #8
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80045d2:	4b99      	ldr	r3, [pc, #612]	; (8004838 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d6:	08db      	lsrs	r3, r3, #3
 80045d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	fb02 f303 	mul.w	r3, r2, r3
 80045e2:	ee07 3a90 	vmov	s15, r3
 80045e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f000 8111 	beq.w	8004818 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	f000 8083 	beq.w	8004704 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	2b02      	cmp	r3, #2
 8004602:	f200 80a1 	bhi.w	8004748 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d003      	beq.n	8004614 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d056      	beq.n	80046c0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004612:	e099      	b.n	8004748 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004614:	4b88      	ldr	r3, [pc, #544]	; (8004838 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0320 	and.w	r3, r3, #32
 800461c:	2b00      	cmp	r3, #0
 800461e:	d02d      	beq.n	800467c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004620:	4b85      	ldr	r3, [pc, #532]	; (8004838 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	08db      	lsrs	r3, r3, #3
 8004626:	f003 0303 	and.w	r3, r3, #3
 800462a:	4a84      	ldr	r2, [pc, #528]	; (800483c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800462c:	fa22 f303 	lsr.w	r3, r2, r3
 8004630:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	ee07 3a90 	vmov	s15, r3
 8004638:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	ee07 3a90 	vmov	s15, r3
 8004642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004646:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800464a:	4b7b      	ldr	r3, [pc, #492]	; (8004838 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004652:	ee07 3a90 	vmov	s15, r3
 8004656:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800465a:	ed97 6a03 	vldr	s12, [r7, #12]
 800465e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004840 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004662:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004666:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800466a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800466e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004676:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800467a:	e087      	b.n	800478c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	ee07 3a90 	vmov	s15, r3
 8004682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004686:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004844 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800468a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800468e:	4b6a      	ldr	r3, [pc, #424]	; (8004838 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004696:	ee07 3a90 	vmov	s15, r3
 800469a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800469e:	ed97 6a03 	vldr	s12, [r7, #12]
 80046a2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004840 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046be:	e065      	b.n	800478c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	ee07 3a90 	vmov	s15, r3
 80046c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004848 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80046ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046d2:	4b59      	ldr	r3, [pc, #356]	; (8004838 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046da:	ee07 3a90 	vmov	s15, r3
 80046de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80046e6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004840 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004702:	e043      	b.n	800478c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	ee07 3a90 	vmov	s15, r3
 800470a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800470e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800484c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004716:	4b48      	ldr	r3, [pc, #288]	; (8004838 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800471e:	ee07 3a90 	vmov	s15, r3
 8004722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004726:	ed97 6a03 	vldr	s12, [r7, #12]
 800472a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004840 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800472e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004736:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800473a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800473e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004742:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004746:	e021      	b.n	800478c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	ee07 3a90 	vmov	s15, r3
 800474e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004752:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004848 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800475a:	4b37      	ldr	r3, [pc, #220]	; (8004838 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004762:	ee07 3a90 	vmov	s15, r3
 8004766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800476a:	ed97 6a03 	vldr	s12, [r7, #12]
 800476e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004840 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800477a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800477e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004786:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800478a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800478c:	4b2a      	ldr	r3, [pc, #168]	; (8004838 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800478e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004790:	0a5b      	lsrs	r3, r3, #9
 8004792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004796:	ee07 3a90 	vmov	s15, r3
 800479a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800479e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80047aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047b2:	ee17 2a90 	vmov	r2, s15
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80047ba:	4b1f      	ldr	r3, [pc, #124]	; (8004838 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047be:	0c1b      	lsrs	r3, r3, #16
 80047c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047c4:	ee07 3a90 	vmov	s15, r3
 80047c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80047d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047e0:	ee17 2a90 	vmov	r2, s15
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80047e8:	4b13      	ldr	r3, [pc, #76]	; (8004838 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ec:	0e1b      	lsrs	r3, r3, #24
 80047ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047f2:	ee07 3a90 	vmov	s15, r3
 80047f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004802:	edd7 6a07 	vldr	s13, [r7, #28]
 8004806:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800480a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800480e:	ee17 2a90 	vmov	r2, s15
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004816:	e008      	b.n	800482a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	609a      	str	r2, [r3, #8]
}
 800482a:	bf00      	nop
 800482c:	3724      	adds	r7, #36	; 0x24
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	58024400 	.word	0x58024400
 800483c:	03d09000 	.word	0x03d09000
 8004840:	46000000 	.word	0x46000000
 8004844:	4c742400 	.word	0x4c742400
 8004848:	4a742400 	.word	0x4a742400
 800484c:	4af42400 	.word	0x4af42400

08004850 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800485a:	2300      	movs	r3, #0
 800485c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800485e:	4b53      	ldr	r3, [pc, #332]	; (80049ac <RCCEx_PLL2_Config+0x15c>)
 8004860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004862:	f003 0303 	and.w	r3, r3, #3
 8004866:	2b03      	cmp	r3, #3
 8004868:	d101      	bne.n	800486e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e099      	b.n	80049a2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800486e:	4b4f      	ldr	r3, [pc, #316]	; (80049ac <RCCEx_PLL2_Config+0x15c>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a4e      	ldr	r2, [pc, #312]	; (80049ac <RCCEx_PLL2_Config+0x15c>)
 8004874:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004878:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800487a:	f7fc ff3b 	bl	80016f4 <HAL_GetTick>
 800487e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004880:	e008      	b.n	8004894 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004882:	f7fc ff37 	bl	80016f4 <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	2b02      	cmp	r3, #2
 800488e:	d901      	bls.n	8004894 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e086      	b.n	80049a2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004894:	4b45      	ldr	r3, [pc, #276]	; (80049ac <RCCEx_PLL2_Config+0x15c>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1f0      	bne.n	8004882 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80048a0:	4b42      	ldr	r3, [pc, #264]	; (80049ac <RCCEx_PLL2_Config+0x15c>)
 80048a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	031b      	lsls	r3, r3, #12
 80048ae:	493f      	ldr	r1, [pc, #252]	; (80049ac <RCCEx_PLL2_Config+0x15c>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	628b      	str	r3, [r1, #40]	; 0x28
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	3b01      	subs	r3, #1
 80048ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	3b01      	subs	r3, #1
 80048c4:	025b      	lsls	r3, r3, #9
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	431a      	orrs	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	3b01      	subs	r3, #1
 80048d0:	041b      	lsls	r3, r3, #16
 80048d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80048d6:	431a      	orrs	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	3b01      	subs	r3, #1
 80048de:	061b      	lsls	r3, r3, #24
 80048e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80048e4:	4931      	ldr	r1, [pc, #196]	; (80049ac <RCCEx_PLL2_Config+0x15c>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80048ea:	4b30      	ldr	r3, [pc, #192]	; (80049ac <RCCEx_PLL2_Config+0x15c>)
 80048ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	492d      	ldr	r1, [pc, #180]	; (80049ac <RCCEx_PLL2_Config+0x15c>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80048fc:	4b2b      	ldr	r3, [pc, #172]	; (80049ac <RCCEx_PLL2_Config+0x15c>)
 80048fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004900:	f023 0220 	bic.w	r2, r3, #32
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	4928      	ldr	r1, [pc, #160]	; (80049ac <RCCEx_PLL2_Config+0x15c>)
 800490a:	4313      	orrs	r3, r2
 800490c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800490e:	4b27      	ldr	r3, [pc, #156]	; (80049ac <RCCEx_PLL2_Config+0x15c>)
 8004910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004912:	4a26      	ldr	r2, [pc, #152]	; (80049ac <RCCEx_PLL2_Config+0x15c>)
 8004914:	f023 0310 	bic.w	r3, r3, #16
 8004918:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800491a:	4b24      	ldr	r3, [pc, #144]	; (80049ac <RCCEx_PLL2_Config+0x15c>)
 800491c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800491e:	4b24      	ldr	r3, [pc, #144]	; (80049b0 <RCCEx_PLL2_Config+0x160>)
 8004920:	4013      	ands	r3, r2
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	69d2      	ldr	r2, [r2, #28]
 8004926:	00d2      	lsls	r2, r2, #3
 8004928:	4920      	ldr	r1, [pc, #128]	; (80049ac <RCCEx_PLL2_Config+0x15c>)
 800492a:	4313      	orrs	r3, r2
 800492c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800492e:	4b1f      	ldr	r3, [pc, #124]	; (80049ac <RCCEx_PLL2_Config+0x15c>)
 8004930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004932:	4a1e      	ldr	r2, [pc, #120]	; (80049ac <RCCEx_PLL2_Config+0x15c>)
 8004934:	f043 0310 	orr.w	r3, r3, #16
 8004938:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d106      	bne.n	800494e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004940:	4b1a      	ldr	r3, [pc, #104]	; (80049ac <RCCEx_PLL2_Config+0x15c>)
 8004942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004944:	4a19      	ldr	r2, [pc, #100]	; (80049ac <RCCEx_PLL2_Config+0x15c>)
 8004946:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800494a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800494c:	e00f      	b.n	800496e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d106      	bne.n	8004962 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004954:	4b15      	ldr	r3, [pc, #84]	; (80049ac <RCCEx_PLL2_Config+0x15c>)
 8004956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004958:	4a14      	ldr	r2, [pc, #80]	; (80049ac <RCCEx_PLL2_Config+0x15c>)
 800495a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800495e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004960:	e005      	b.n	800496e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004962:	4b12      	ldr	r3, [pc, #72]	; (80049ac <RCCEx_PLL2_Config+0x15c>)
 8004964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004966:	4a11      	ldr	r2, [pc, #68]	; (80049ac <RCCEx_PLL2_Config+0x15c>)
 8004968:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800496c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800496e:	4b0f      	ldr	r3, [pc, #60]	; (80049ac <RCCEx_PLL2_Config+0x15c>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a0e      	ldr	r2, [pc, #56]	; (80049ac <RCCEx_PLL2_Config+0x15c>)
 8004974:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004978:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800497a:	f7fc febb 	bl	80016f4 <HAL_GetTick>
 800497e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004980:	e008      	b.n	8004994 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004982:	f7fc feb7 	bl	80016f4 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	d901      	bls.n	8004994 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e006      	b.n	80049a2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004994:	4b05      	ldr	r3, [pc, #20]	; (80049ac <RCCEx_PLL2_Config+0x15c>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d0f0      	beq.n	8004982 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80049a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3710      	adds	r7, #16
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	58024400 	.word	0x58024400
 80049b0:	ffff0007 	.word	0xffff0007

080049b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049be:	2300      	movs	r3, #0
 80049c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80049c2:	4b53      	ldr	r3, [pc, #332]	; (8004b10 <RCCEx_PLL3_Config+0x15c>)
 80049c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c6:	f003 0303 	and.w	r3, r3, #3
 80049ca:	2b03      	cmp	r3, #3
 80049cc:	d101      	bne.n	80049d2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e099      	b.n	8004b06 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80049d2:	4b4f      	ldr	r3, [pc, #316]	; (8004b10 <RCCEx_PLL3_Config+0x15c>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a4e      	ldr	r2, [pc, #312]	; (8004b10 <RCCEx_PLL3_Config+0x15c>)
 80049d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049de:	f7fc fe89 	bl	80016f4 <HAL_GetTick>
 80049e2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80049e4:	e008      	b.n	80049f8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80049e6:	f7fc fe85 	bl	80016f4 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d901      	bls.n	80049f8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e086      	b.n	8004b06 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80049f8:	4b45      	ldr	r3, [pc, #276]	; (8004b10 <RCCEx_PLL3_Config+0x15c>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1f0      	bne.n	80049e6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004a04:	4b42      	ldr	r3, [pc, #264]	; (8004b10 <RCCEx_PLL3_Config+0x15c>)
 8004a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a08:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	051b      	lsls	r3, r3, #20
 8004a12:	493f      	ldr	r1, [pc, #252]	; (8004b10 <RCCEx_PLL3_Config+0x15c>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	628b      	str	r3, [r1, #40]	; 0x28
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	3b01      	subs	r3, #1
 8004a28:	025b      	lsls	r3, r3, #9
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	3b01      	subs	r3, #1
 8004a34:	041b      	lsls	r3, r3, #16
 8004a36:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	3b01      	subs	r3, #1
 8004a42:	061b      	lsls	r3, r3, #24
 8004a44:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004a48:	4931      	ldr	r1, [pc, #196]	; (8004b10 <RCCEx_PLL3_Config+0x15c>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004a4e:	4b30      	ldr	r3, [pc, #192]	; (8004b10 <RCCEx_PLL3_Config+0x15c>)
 8004a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a52:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	492d      	ldr	r1, [pc, #180]	; (8004b10 <RCCEx_PLL3_Config+0x15c>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004a60:	4b2b      	ldr	r3, [pc, #172]	; (8004b10 <RCCEx_PLL3_Config+0x15c>)
 8004a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a64:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	4928      	ldr	r1, [pc, #160]	; (8004b10 <RCCEx_PLL3_Config+0x15c>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004a72:	4b27      	ldr	r3, [pc, #156]	; (8004b10 <RCCEx_PLL3_Config+0x15c>)
 8004a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a76:	4a26      	ldr	r2, [pc, #152]	; (8004b10 <RCCEx_PLL3_Config+0x15c>)
 8004a78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004a7e:	4b24      	ldr	r3, [pc, #144]	; (8004b10 <RCCEx_PLL3_Config+0x15c>)
 8004a80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a82:	4b24      	ldr	r3, [pc, #144]	; (8004b14 <RCCEx_PLL3_Config+0x160>)
 8004a84:	4013      	ands	r3, r2
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	69d2      	ldr	r2, [r2, #28]
 8004a8a:	00d2      	lsls	r2, r2, #3
 8004a8c:	4920      	ldr	r1, [pc, #128]	; (8004b10 <RCCEx_PLL3_Config+0x15c>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004a92:	4b1f      	ldr	r3, [pc, #124]	; (8004b10 <RCCEx_PLL3_Config+0x15c>)
 8004a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a96:	4a1e      	ldr	r2, [pc, #120]	; (8004b10 <RCCEx_PLL3_Config+0x15c>)
 8004a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d106      	bne.n	8004ab2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004aa4:	4b1a      	ldr	r3, [pc, #104]	; (8004b10 <RCCEx_PLL3_Config+0x15c>)
 8004aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa8:	4a19      	ldr	r2, [pc, #100]	; (8004b10 <RCCEx_PLL3_Config+0x15c>)
 8004aaa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004aae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ab0:	e00f      	b.n	8004ad2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d106      	bne.n	8004ac6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004ab8:	4b15      	ldr	r3, [pc, #84]	; (8004b10 <RCCEx_PLL3_Config+0x15c>)
 8004aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abc:	4a14      	ldr	r2, [pc, #80]	; (8004b10 <RCCEx_PLL3_Config+0x15c>)
 8004abe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ac2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ac4:	e005      	b.n	8004ad2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004ac6:	4b12      	ldr	r3, [pc, #72]	; (8004b10 <RCCEx_PLL3_Config+0x15c>)
 8004ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aca:	4a11      	ldr	r2, [pc, #68]	; (8004b10 <RCCEx_PLL3_Config+0x15c>)
 8004acc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ad0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004ad2:	4b0f      	ldr	r3, [pc, #60]	; (8004b10 <RCCEx_PLL3_Config+0x15c>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a0e      	ldr	r2, [pc, #56]	; (8004b10 <RCCEx_PLL3_Config+0x15c>)
 8004ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004adc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ade:	f7fc fe09 	bl	80016f4 <HAL_GetTick>
 8004ae2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ae4:	e008      	b.n	8004af8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004ae6:	f7fc fe05 	bl	80016f4 <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d901      	bls.n	8004af8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e006      	b.n	8004b06 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004af8:	4b05      	ldr	r3, [pc, #20]	; (8004b10 <RCCEx_PLL3_Config+0x15c>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d0f0      	beq.n	8004ae6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	58024400 	.word	0x58024400
 8004b14:	ffff0007 	.word	0xffff0007

08004b18 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e0f1      	b.n	8004d0e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a78      	ldr	r2, [pc, #480]	; (8004d18 <HAL_SPI_Init+0x200>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d00f      	beq.n	8004b5a <HAL_SPI_Init+0x42>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a77      	ldr	r2, [pc, #476]	; (8004d1c <HAL_SPI_Init+0x204>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d00a      	beq.n	8004b5a <HAL_SPI_Init+0x42>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a75      	ldr	r2, [pc, #468]	; (8004d20 <HAL_SPI_Init+0x208>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d005      	beq.n	8004b5a <HAL_SPI_Init+0x42>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	2b0f      	cmp	r3, #15
 8004b54:	d901      	bls.n	8004b5a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e0d9      	b.n	8004d0e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f8e2 	bl	8004d24 <SPI_GetPacketSize>
 8004b60:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a6c      	ldr	r2, [pc, #432]	; (8004d18 <HAL_SPI_Init+0x200>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d00c      	beq.n	8004b86 <HAL_SPI_Init+0x6e>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a6a      	ldr	r2, [pc, #424]	; (8004d1c <HAL_SPI_Init+0x204>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d007      	beq.n	8004b86 <HAL_SPI_Init+0x6e>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a69      	ldr	r2, [pc, #420]	; (8004d20 <HAL_SPI_Init+0x208>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d002      	beq.n	8004b86 <HAL_SPI_Init+0x6e>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2b08      	cmp	r3, #8
 8004b84:	d811      	bhi.n	8004baa <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004b8a:	4a63      	ldr	r2, [pc, #396]	; (8004d18 <HAL_SPI_Init+0x200>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d009      	beq.n	8004ba4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a61      	ldr	r2, [pc, #388]	; (8004d1c <HAL_SPI_Init+0x204>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d004      	beq.n	8004ba4 <HAL_SPI_Init+0x8c>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a60      	ldr	r2, [pc, #384]	; (8004d20 <HAL_SPI_Init+0x208>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d104      	bne.n	8004bae <HAL_SPI_Init+0x96>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b10      	cmp	r3, #16
 8004ba8:	d901      	bls.n	8004bae <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e0af      	b.n	8004d0e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d106      	bne.n	8004bc8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7fc fa84 	bl	80010d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f022 0201 	bic.w	r2, r2, #1
 8004bde:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8004bea:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bf4:	d119      	bne.n	8004c2a <HAL_SPI_Init+0x112>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bfe:	d103      	bne.n	8004c08 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d008      	beq.n	8004c1a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10c      	bne.n	8004c2a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004c14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c18:	d107      	bne.n	8004c2a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c28:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	69da      	ldr	r2, [r3, #28]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c32:	431a      	orrs	r2, r3
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	431a      	orrs	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c3c:	ea42 0103 	orr.w	r1, r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	68da      	ldr	r2, [r3, #12]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c54:	431a      	orrs	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	431a      	orrs	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	431a      	orrs	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	695b      	ldr	r3, [r3, #20]
 8004c6c:	431a      	orrs	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	431a      	orrs	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	431a      	orrs	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	431a      	orrs	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c8a:	ea42 0103 	orr.w	r1, r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d113      	bne.n	8004cca <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cb4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004cc8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f022 0201 	bic.w	r2, r2, #1
 8004cd8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00a      	beq.n	8004cfc <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	40013000 	.word	0x40013000
 8004d1c:	40003800 	.word	0x40003800
 8004d20:	40003c00 	.word	0x40003c00

08004d24 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d30:	095b      	lsrs	r3, r3, #5
 8004d32:	3301      	adds	r3, #1
 8004d34:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	3307      	adds	r3, #7
 8004d42:	08db      	lsrs	r3, r3, #3
 8004d44:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	fb02 f303 	mul.w	r3, r2, r3
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b082      	sub	sp, #8
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e049      	b.n	8004e00 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d106      	bne.n	8004d86 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f7fc fa09 	bl	8001198 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2202      	movs	r2, #2
 8004d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	3304      	adds	r3, #4
 8004d96:	4619      	mov	r1, r3
 8004d98:	4610      	mov	r0, r2
 8004d9a:	f000 fc79 	bl	8005690 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3708      	adds	r7, #8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d001      	beq.n	8004e20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e054      	b.n	8004eca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2202      	movs	r2, #2
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68da      	ldr	r2, [r3, #12]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f042 0201 	orr.w	r2, r2, #1
 8004e36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a26      	ldr	r2, [pc, #152]	; (8004ed8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d022      	beq.n	8004e88 <HAL_TIM_Base_Start_IT+0x80>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e4a:	d01d      	beq.n	8004e88 <HAL_TIM_Base_Start_IT+0x80>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a22      	ldr	r2, [pc, #136]	; (8004edc <HAL_TIM_Base_Start_IT+0xd4>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d018      	beq.n	8004e88 <HAL_TIM_Base_Start_IT+0x80>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a21      	ldr	r2, [pc, #132]	; (8004ee0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d013      	beq.n	8004e88 <HAL_TIM_Base_Start_IT+0x80>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a1f      	ldr	r2, [pc, #124]	; (8004ee4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d00e      	beq.n	8004e88 <HAL_TIM_Base_Start_IT+0x80>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a1e      	ldr	r2, [pc, #120]	; (8004ee8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d009      	beq.n	8004e88 <HAL_TIM_Base_Start_IT+0x80>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a1c      	ldr	r2, [pc, #112]	; (8004eec <HAL_TIM_Base_Start_IT+0xe4>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d004      	beq.n	8004e88 <HAL_TIM_Base_Start_IT+0x80>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a1b      	ldr	r2, [pc, #108]	; (8004ef0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d115      	bne.n	8004eb4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	689a      	ldr	r2, [r3, #8]
 8004e8e:	4b19      	ldr	r3, [pc, #100]	; (8004ef4 <HAL_TIM_Base_Start_IT+0xec>)
 8004e90:	4013      	ands	r3, r2
 8004e92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2b06      	cmp	r3, #6
 8004e98:	d015      	beq.n	8004ec6 <HAL_TIM_Base_Start_IT+0xbe>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ea0:	d011      	beq.n	8004ec6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f042 0201 	orr.w	r2, r2, #1
 8004eb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eb2:	e008      	b.n	8004ec6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f042 0201 	orr.w	r2, r2, #1
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	e000      	b.n	8004ec8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ec6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3714      	adds	r7, #20
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	40010000 	.word	0x40010000
 8004edc:	40000400 	.word	0x40000400
 8004ee0:	40000800 	.word	0x40000800
 8004ee4:	40000c00 	.word	0x40000c00
 8004ee8:	40010400 	.word	0x40010400
 8004eec:	40001800 	.word	0x40001800
 8004ef0:	40014000 	.word	0x40014000
 8004ef4:	00010007 	.word	0x00010007

08004ef8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e049      	b.n	8004f9e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d106      	bne.n	8004f24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f841 	bl	8004fa6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2202      	movs	r2, #2
 8004f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	3304      	adds	r3, #4
 8004f34:	4619      	mov	r1, r3
 8004f36:	4610      	mov	r0, r2
 8004f38:	f000 fbaa 	bl	8005690 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b083      	sub	sp, #12
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004fae:	bf00      	nop
 8004fb0:	370c      	adds	r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
	...

08004fbc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d109      	bne.n	8004fe0 <HAL_TIM_PWM_Start+0x24>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	bf14      	ite	ne
 8004fd8:	2301      	movne	r3, #1
 8004fda:	2300      	moveq	r3, #0
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	e03c      	b.n	800505a <HAL_TIM_PWM_Start+0x9e>
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	2b04      	cmp	r3, #4
 8004fe4:	d109      	bne.n	8004ffa <HAL_TIM_PWM_Start+0x3e>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	bf14      	ite	ne
 8004ff2:	2301      	movne	r3, #1
 8004ff4:	2300      	moveq	r3, #0
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	e02f      	b.n	800505a <HAL_TIM_PWM_Start+0x9e>
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	2b08      	cmp	r3, #8
 8004ffe:	d109      	bne.n	8005014 <HAL_TIM_PWM_Start+0x58>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b01      	cmp	r3, #1
 800500a:	bf14      	ite	ne
 800500c:	2301      	movne	r3, #1
 800500e:	2300      	moveq	r3, #0
 8005010:	b2db      	uxtb	r3, r3
 8005012:	e022      	b.n	800505a <HAL_TIM_PWM_Start+0x9e>
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	2b0c      	cmp	r3, #12
 8005018:	d109      	bne.n	800502e <HAL_TIM_PWM_Start+0x72>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b01      	cmp	r3, #1
 8005024:	bf14      	ite	ne
 8005026:	2301      	movne	r3, #1
 8005028:	2300      	moveq	r3, #0
 800502a:	b2db      	uxtb	r3, r3
 800502c:	e015      	b.n	800505a <HAL_TIM_PWM_Start+0x9e>
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	2b10      	cmp	r3, #16
 8005032:	d109      	bne.n	8005048 <HAL_TIM_PWM_Start+0x8c>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800503a:	b2db      	uxtb	r3, r3
 800503c:	2b01      	cmp	r3, #1
 800503e:	bf14      	ite	ne
 8005040:	2301      	movne	r3, #1
 8005042:	2300      	moveq	r3, #0
 8005044:	b2db      	uxtb	r3, r3
 8005046:	e008      	b.n	800505a <HAL_TIM_PWM_Start+0x9e>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b01      	cmp	r3, #1
 8005052:	bf14      	ite	ne
 8005054:	2301      	movne	r3, #1
 8005056:	2300      	moveq	r3, #0
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e0a1      	b.n	80051a6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d104      	bne.n	8005072 <HAL_TIM_PWM_Start+0xb6>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2202      	movs	r2, #2
 800506c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005070:	e023      	b.n	80050ba <HAL_TIM_PWM_Start+0xfe>
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	2b04      	cmp	r3, #4
 8005076:	d104      	bne.n	8005082 <HAL_TIM_PWM_Start+0xc6>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2202      	movs	r2, #2
 800507c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005080:	e01b      	b.n	80050ba <HAL_TIM_PWM_Start+0xfe>
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2b08      	cmp	r3, #8
 8005086:	d104      	bne.n	8005092 <HAL_TIM_PWM_Start+0xd6>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2202      	movs	r2, #2
 800508c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005090:	e013      	b.n	80050ba <HAL_TIM_PWM_Start+0xfe>
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	2b0c      	cmp	r3, #12
 8005096:	d104      	bne.n	80050a2 <HAL_TIM_PWM_Start+0xe6>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2202      	movs	r2, #2
 800509c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050a0:	e00b      	b.n	80050ba <HAL_TIM_PWM_Start+0xfe>
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	2b10      	cmp	r3, #16
 80050a6:	d104      	bne.n	80050b2 <HAL_TIM_PWM_Start+0xf6>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2202      	movs	r2, #2
 80050ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050b0:	e003      	b.n	80050ba <HAL_TIM_PWM_Start+0xfe>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2202      	movs	r2, #2
 80050b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2201      	movs	r2, #1
 80050c0:	6839      	ldr	r1, [r7, #0]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f000 fe54 	bl	8005d70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a38      	ldr	r2, [pc, #224]	; (80051b0 <HAL_TIM_PWM_Start+0x1f4>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d013      	beq.n	80050fa <HAL_TIM_PWM_Start+0x13e>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a37      	ldr	r2, [pc, #220]	; (80051b4 <HAL_TIM_PWM_Start+0x1f8>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d00e      	beq.n	80050fa <HAL_TIM_PWM_Start+0x13e>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a35      	ldr	r2, [pc, #212]	; (80051b8 <HAL_TIM_PWM_Start+0x1fc>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d009      	beq.n	80050fa <HAL_TIM_PWM_Start+0x13e>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a34      	ldr	r2, [pc, #208]	; (80051bc <HAL_TIM_PWM_Start+0x200>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d004      	beq.n	80050fa <HAL_TIM_PWM_Start+0x13e>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a32      	ldr	r2, [pc, #200]	; (80051c0 <HAL_TIM_PWM_Start+0x204>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d101      	bne.n	80050fe <HAL_TIM_PWM_Start+0x142>
 80050fa:	2301      	movs	r3, #1
 80050fc:	e000      	b.n	8005100 <HAL_TIM_PWM_Start+0x144>
 80050fe:	2300      	movs	r3, #0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d007      	beq.n	8005114 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005112:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a25      	ldr	r2, [pc, #148]	; (80051b0 <HAL_TIM_PWM_Start+0x1f4>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d022      	beq.n	8005164 <HAL_TIM_PWM_Start+0x1a8>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005126:	d01d      	beq.n	8005164 <HAL_TIM_PWM_Start+0x1a8>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a25      	ldr	r2, [pc, #148]	; (80051c4 <HAL_TIM_PWM_Start+0x208>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d018      	beq.n	8005164 <HAL_TIM_PWM_Start+0x1a8>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a24      	ldr	r2, [pc, #144]	; (80051c8 <HAL_TIM_PWM_Start+0x20c>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d013      	beq.n	8005164 <HAL_TIM_PWM_Start+0x1a8>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a22      	ldr	r2, [pc, #136]	; (80051cc <HAL_TIM_PWM_Start+0x210>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d00e      	beq.n	8005164 <HAL_TIM_PWM_Start+0x1a8>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a1a      	ldr	r2, [pc, #104]	; (80051b4 <HAL_TIM_PWM_Start+0x1f8>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d009      	beq.n	8005164 <HAL_TIM_PWM_Start+0x1a8>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a1e      	ldr	r2, [pc, #120]	; (80051d0 <HAL_TIM_PWM_Start+0x214>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d004      	beq.n	8005164 <HAL_TIM_PWM_Start+0x1a8>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a16      	ldr	r2, [pc, #88]	; (80051b8 <HAL_TIM_PWM_Start+0x1fc>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d115      	bne.n	8005190 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	689a      	ldr	r2, [r3, #8]
 800516a:	4b1a      	ldr	r3, [pc, #104]	; (80051d4 <HAL_TIM_PWM_Start+0x218>)
 800516c:	4013      	ands	r3, r2
 800516e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2b06      	cmp	r3, #6
 8005174:	d015      	beq.n	80051a2 <HAL_TIM_PWM_Start+0x1e6>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800517c:	d011      	beq.n	80051a2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f042 0201 	orr.w	r2, r2, #1
 800518c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800518e:	e008      	b.n	80051a2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f042 0201 	orr.w	r2, r2, #1
 800519e:	601a      	str	r2, [r3, #0]
 80051a0:	e000      	b.n	80051a4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	40010000 	.word	0x40010000
 80051b4:	40010400 	.word	0x40010400
 80051b8:	40014000 	.word	0x40014000
 80051bc:	40014400 	.word	0x40014400
 80051c0:	40014800 	.word	0x40014800
 80051c4:	40000400 	.word	0x40000400
 80051c8:	40000800 	.word	0x40000800
 80051cc:	40000c00 	.word	0x40000c00
 80051d0:	40001800 	.word	0x40001800
 80051d4:	00010007 	.word	0x00010007

080051d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d122      	bne.n	8005234 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d11b      	bne.n	8005234 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f06f 0202 	mvn.w	r2, #2
 8005204:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2201      	movs	r2, #1
 800520a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	f003 0303 	and.w	r3, r3, #3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 fa1a 	bl	8005654 <HAL_TIM_IC_CaptureCallback>
 8005220:	e005      	b.n	800522e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 fa0c 	bl	8005640 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 fa1d 	bl	8005668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	f003 0304 	and.w	r3, r3, #4
 800523e:	2b04      	cmp	r3, #4
 8005240:	d122      	bne.n	8005288 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	f003 0304 	and.w	r3, r3, #4
 800524c:	2b04      	cmp	r3, #4
 800524e:	d11b      	bne.n	8005288 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f06f 0204 	mvn.w	r2, #4
 8005258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2202      	movs	r2, #2
 800525e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f9f0 	bl	8005654 <HAL_TIM_IC_CaptureCallback>
 8005274:	e005      	b.n	8005282 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f9e2 	bl	8005640 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f9f3 	bl	8005668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	f003 0308 	and.w	r3, r3, #8
 8005292:	2b08      	cmp	r3, #8
 8005294:	d122      	bne.n	80052dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	f003 0308 	and.w	r3, r3, #8
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d11b      	bne.n	80052dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f06f 0208 	mvn.w	r2, #8
 80052ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2204      	movs	r2, #4
 80052b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	f003 0303 	and.w	r3, r3, #3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d003      	beq.n	80052ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f9c6 	bl	8005654 <HAL_TIM_IC_CaptureCallback>
 80052c8:	e005      	b.n	80052d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f9b8 	bl	8005640 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 f9c9 	bl	8005668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	f003 0310 	and.w	r3, r3, #16
 80052e6:	2b10      	cmp	r3, #16
 80052e8:	d122      	bne.n	8005330 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	f003 0310 	and.w	r3, r3, #16
 80052f4:	2b10      	cmp	r3, #16
 80052f6:	d11b      	bne.n	8005330 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f06f 0210 	mvn.w	r2, #16
 8005300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2208      	movs	r2, #8
 8005306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 f99c 	bl	8005654 <HAL_TIM_IC_CaptureCallback>
 800531c:	e005      	b.n	800532a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f98e 	bl	8005640 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 f99f 	bl	8005668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b01      	cmp	r3, #1
 800533c:	d10e      	bne.n	800535c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	2b01      	cmp	r3, #1
 800534a:	d107      	bne.n	800535c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f06f 0201 	mvn.w	r2, #1
 8005354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f7fb fe0c 	bl	8000f74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005366:	2b80      	cmp	r3, #128	; 0x80
 8005368:	d10e      	bne.n	8005388 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005374:	2b80      	cmp	r3, #128	; 0x80
 8005376:	d107      	bne.n	8005388 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 fd23 	bl	8005dce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005392:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005396:	d10e      	bne.n	80053b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a2:	2b80      	cmp	r3, #128	; 0x80
 80053a4:	d107      	bne.n	80053b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80053ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 fd16 	bl	8005de2 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c0:	2b40      	cmp	r3, #64	; 0x40
 80053c2:	d10e      	bne.n	80053e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ce:	2b40      	cmp	r3, #64	; 0x40
 80053d0:	d107      	bne.n	80053e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 f94d 	bl	800567c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	f003 0320 	and.w	r3, r3, #32
 80053ec:	2b20      	cmp	r3, #32
 80053ee:	d10e      	bne.n	800540e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	f003 0320 	and.w	r3, r3, #32
 80053fa:	2b20      	cmp	r3, #32
 80053fc:	d107      	bne.n	800540e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f06f 0220 	mvn.w	r2, #32
 8005406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 fcd6 	bl	8005dba <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800540e:	bf00      	nop
 8005410:	3708      	adds	r7, #8
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
	...

08005418 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005424:	2300      	movs	r3, #0
 8005426:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800542e:	2b01      	cmp	r3, #1
 8005430:	d101      	bne.n	8005436 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005432:	2302      	movs	r3, #2
 8005434:	e0ff      	b.n	8005636 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2b14      	cmp	r3, #20
 8005442:	f200 80f0 	bhi.w	8005626 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005446:	a201      	add	r2, pc, #4	; (adr r2, 800544c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800544c:	080054a1 	.word	0x080054a1
 8005450:	08005627 	.word	0x08005627
 8005454:	08005627 	.word	0x08005627
 8005458:	08005627 	.word	0x08005627
 800545c:	080054e1 	.word	0x080054e1
 8005460:	08005627 	.word	0x08005627
 8005464:	08005627 	.word	0x08005627
 8005468:	08005627 	.word	0x08005627
 800546c:	08005523 	.word	0x08005523
 8005470:	08005627 	.word	0x08005627
 8005474:	08005627 	.word	0x08005627
 8005478:	08005627 	.word	0x08005627
 800547c:	08005563 	.word	0x08005563
 8005480:	08005627 	.word	0x08005627
 8005484:	08005627 	.word	0x08005627
 8005488:	08005627 	.word	0x08005627
 800548c:	080055a5 	.word	0x080055a5
 8005490:	08005627 	.word	0x08005627
 8005494:	08005627 	.word	0x08005627
 8005498:	08005627 	.word	0x08005627
 800549c:	080055e5 	.word	0x080055e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68b9      	ldr	r1, [r7, #8]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 f98c 	bl	80057c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	699a      	ldr	r2, [r3, #24]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f042 0208 	orr.w	r2, r2, #8
 80054ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	699a      	ldr	r2, [r3, #24]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f022 0204 	bic.w	r2, r2, #4
 80054ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6999      	ldr	r1, [r3, #24]
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	691a      	ldr	r2, [r3, #16]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	430a      	orrs	r2, r1
 80054dc:	619a      	str	r2, [r3, #24]
      break;
 80054de:	e0a5      	b.n	800562c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68b9      	ldr	r1, [r7, #8]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 f9fc 	bl	80058e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	699a      	ldr	r2, [r3, #24]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	699a      	ldr	r2, [r3, #24]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800550a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	6999      	ldr	r1, [r3, #24]
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	021a      	lsls	r2, r3, #8
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	430a      	orrs	r2, r1
 800551e:	619a      	str	r2, [r3, #24]
      break;
 8005520:	e084      	b.n	800562c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68b9      	ldr	r1, [r7, #8]
 8005528:	4618      	mov	r0, r3
 800552a:	f000 fa65 	bl	80059f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	69da      	ldr	r2, [r3, #28]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f042 0208 	orr.w	r2, r2, #8
 800553c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	69da      	ldr	r2, [r3, #28]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f022 0204 	bic.w	r2, r2, #4
 800554c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	69d9      	ldr	r1, [r3, #28]
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	691a      	ldr	r2, [r3, #16]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	430a      	orrs	r2, r1
 800555e:	61da      	str	r2, [r3, #28]
      break;
 8005560:	e064      	b.n	800562c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68b9      	ldr	r1, [r7, #8]
 8005568:	4618      	mov	r0, r3
 800556a:	f000 facd 	bl	8005b08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	69da      	ldr	r2, [r3, #28]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800557c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	69da      	ldr	r2, [r3, #28]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800558c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	69d9      	ldr	r1, [r3, #28]
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	021a      	lsls	r2, r3, #8
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	61da      	str	r2, [r3, #28]
      break;
 80055a2:	e043      	b.n	800562c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68b9      	ldr	r1, [r7, #8]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 fb16 	bl	8005bdc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f042 0208 	orr.w	r2, r2, #8
 80055be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f022 0204 	bic.w	r2, r2, #4
 80055ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	691a      	ldr	r2, [r3, #16]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	430a      	orrs	r2, r1
 80055e0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80055e2:	e023      	b.n	800562c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68b9      	ldr	r1, [r7, #8]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f000 fb5a 	bl	8005ca4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800560e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	021a      	lsls	r2, r3, #8
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	430a      	orrs	r2, r1
 8005622:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005624:	e002      	b.n	800562c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	75fb      	strb	r3, [r7, #23]
      break;
 800562a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005634:	7dfb      	ldrb	r3, [r7, #23]
}
 8005636:	4618      	mov	r0, r3
 8005638:	3718      	adds	r7, #24
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop

08005640 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005648:	bf00      	nop
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800565c:	bf00      	nop
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a40      	ldr	r2, [pc, #256]	; (80057a4 <TIM_Base_SetConfig+0x114>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d013      	beq.n	80056d0 <TIM_Base_SetConfig+0x40>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ae:	d00f      	beq.n	80056d0 <TIM_Base_SetConfig+0x40>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a3d      	ldr	r2, [pc, #244]	; (80057a8 <TIM_Base_SetConfig+0x118>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d00b      	beq.n	80056d0 <TIM_Base_SetConfig+0x40>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a3c      	ldr	r2, [pc, #240]	; (80057ac <TIM_Base_SetConfig+0x11c>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d007      	beq.n	80056d0 <TIM_Base_SetConfig+0x40>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a3b      	ldr	r2, [pc, #236]	; (80057b0 <TIM_Base_SetConfig+0x120>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d003      	beq.n	80056d0 <TIM_Base_SetConfig+0x40>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a3a      	ldr	r2, [pc, #232]	; (80057b4 <TIM_Base_SetConfig+0x124>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d108      	bne.n	80056e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	4313      	orrs	r3, r2
 80056e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a2f      	ldr	r2, [pc, #188]	; (80057a4 <TIM_Base_SetConfig+0x114>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d01f      	beq.n	800572a <TIM_Base_SetConfig+0x9a>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056f0:	d01b      	beq.n	800572a <TIM_Base_SetConfig+0x9a>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a2c      	ldr	r2, [pc, #176]	; (80057a8 <TIM_Base_SetConfig+0x118>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d017      	beq.n	800572a <TIM_Base_SetConfig+0x9a>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a2b      	ldr	r2, [pc, #172]	; (80057ac <TIM_Base_SetConfig+0x11c>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d013      	beq.n	800572a <TIM_Base_SetConfig+0x9a>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a2a      	ldr	r2, [pc, #168]	; (80057b0 <TIM_Base_SetConfig+0x120>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d00f      	beq.n	800572a <TIM_Base_SetConfig+0x9a>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a29      	ldr	r2, [pc, #164]	; (80057b4 <TIM_Base_SetConfig+0x124>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d00b      	beq.n	800572a <TIM_Base_SetConfig+0x9a>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a28      	ldr	r2, [pc, #160]	; (80057b8 <TIM_Base_SetConfig+0x128>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d007      	beq.n	800572a <TIM_Base_SetConfig+0x9a>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a27      	ldr	r2, [pc, #156]	; (80057bc <TIM_Base_SetConfig+0x12c>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d003      	beq.n	800572a <TIM_Base_SetConfig+0x9a>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a26      	ldr	r2, [pc, #152]	; (80057c0 <TIM_Base_SetConfig+0x130>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d108      	bne.n	800573c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005730:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	4313      	orrs	r3, r2
 800573a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	4313      	orrs	r3, r2
 8005748:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	689a      	ldr	r2, [r3, #8]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a10      	ldr	r2, [pc, #64]	; (80057a4 <TIM_Base_SetConfig+0x114>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d00f      	beq.n	8005788 <TIM_Base_SetConfig+0xf8>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a12      	ldr	r2, [pc, #72]	; (80057b4 <TIM_Base_SetConfig+0x124>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d00b      	beq.n	8005788 <TIM_Base_SetConfig+0xf8>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a11      	ldr	r2, [pc, #68]	; (80057b8 <TIM_Base_SetConfig+0x128>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d007      	beq.n	8005788 <TIM_Base_SetConfig+0xf8>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a10      	ldr	r2, [pc, #64]	; (80057bc <TIM_Base_SetConfig+0x12c>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d003      	beq.n	8005788 <TIM_Base_SetConfig+0xf8>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a0f      	ldr	r2, [pc, #60]	; (80057c0 <TIM_Base_SetConfig+0x130>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d103      	bne.n	8005790 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	691a      	ldr	r2, [r3, #16]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	615a      	str	r2, [r3, #20]
}
 8005796:	bf00      	nop
 8005798:	3714      	adds	r7, #20
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	40010000 	.word	0x40010000
 80057a8:	40000400 	.word	0x40000400
 80057ac:	40000800 	.word	0x40000800
 80057b0:	40000c00 	.word	0x40000c00
 80057b4:	40010400 	.word	0x40010400
 80057b8:	40014000 	.word	0x40014000
 80057bc:	40014400 	.word	0x40014400
 80057c0:	40014800 	.word	0x40014800

080057c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b087      	sub	sp, #28
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	f023 0201 	bic.w	r2, r3, #1
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	4b37      	ldr	r3, [pc, #220]	; (80058cc <TIM_OC1_SetConfig+0x108>)
 80057f0:	4013      	ands	r3, r2
 80057f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f023 0303 	bic.w	r3, r3, #3
 80057fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	4313      	orrs	r3, r2
 8005804:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	f023 0302 	bic.w	r3, r3, #2
 800580c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	4313      	orrs	r3, r2
 8005816:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a2d      	ldr	r2, [pc, #180]	; (80058d0 <TIM_OC1_SetConfig+0x10c>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d00f      	beq.n	8005840 <TIM_OC1_SetConfig+0x7c>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a2c      	ldr	r2, [pc, #176]	; (80058d4 <TIM_OC1_SetConfig+0x110>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d00b      	beq.n	8005840 <TIM_OC1_SetConfig+0x7c>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a2b      	ldr	r2, [pc, #172]	; (80058d8 <TIM_OC1_SetConfig+0x114>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d007      	beq.n	8005840 <TIM_OC1_SetConfig+0x7c>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a2a      	ldr	r2, [pc, #168]	; (80058dc <TIM_OC1_SetConfig+0x118>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d003      	beq.n	8005840 <TIM_OC1_SetConfig+0x7c>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a29      	ldr	r2, [pc, #164]	; (80058e0 <TIM_OC1_SetConfig+0x11c>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d10c      	bne.n	800585a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	f023 0308 	bic.w	r3, r3, #8
 8005846:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	4313      	orrs	r3, r2
 8005850:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f023 0304 	bic.w	r3, r3, #4
 8005858:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a1c      	ldr	r2, [pc, #112]	; (80058d0 <TIM_OC1_SetConfig+0x10c>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d00f      	beq.n	8005882 <TIM_OC1_SetConfig+0xbe>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a1b      	ldr	r2, [pc, #108]	; (80058d4 <TIM_OC1_SetConfig+0x110>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d00b      	beq.n	8005882 <TIM_OC1_SetConfig+0xbe>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a1a      	ldr	r2, [pc, #104]	; (80058d8 <TIM_OC1_SetConfig+0x114>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d007      	beq.n	8005882 <TIM_OC1_SetConfig+0xbe>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a19      	ldr	r2, [pc, #100]	; (80058dc <TIM_OC1_SetConfig+0x118>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d003      	beq.n	8005882 <TIM_OC1_SetConfig+0xbe>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a18      	ldr	r2, [pc, #96]	; (80058e0 <TIM_OC1_SetConfig+0x11c>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d111      	bne.n	80058a6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005888:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005890:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	693a      	ldr	r2, [r7, #16]
 8005898:	4313      	orrs	r3, r2
 800589a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	693a      	ldr	r2, [r7, #16]
 80058aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	685a      	ldr	r2, [r3, #4]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	621a      	str	r2, [r3, #32]
}
 80058c0:	bf00      	nop
 80058c2:	371c      	adds	r7, #28
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr
 80058cc:	fffeff8f 	.word	0xfffeff8f
 80058d0:	40010000 	.word	0x40010000
 80058d4:	40010400 	.word	0x40010400
 80058d8:	40014000 	.word	0x40014000
 80058dc:	40014400 	.word	0x40014400
 80058e0:	40014800 	.word	0x40014800

080058e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b087      	sub	sp, #28
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a1b      	ldr	r3, [r3, #32]
 80058f2:	f023 0210 	bic.w	r2, r3, #16
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	4b34      	ldr	r3, [pc, #208]	; (80059e0 <TIM_OC2_SetConfig+0xfc>)
 8005910:	4013      	ands	r3, r2
 8005912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800591a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	021b      	lsls	r3, r3, #8
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	4313      	orrs	r3, r2
 8005926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	f023 0320 	bic.w	r3, r3, #32
 800592e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	011b      	lsls	r3, r3, #4
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	4313      	orrs	r3, r2
 800593a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a29      	ldr	r2, [pc, #164]	; (80059e4 <TIM_OC2_SetConfig+0x100>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d003      	beq.n	800594c <TIM_OC2_SetConfig+0x68>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a28      	ldr	r2, [pc, #160]	; (80059e8 <TIM_OC2_SetConfig+0x104>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d10d      	bne.n	8005968 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005952:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	011b      	lsls	r3, r3, #4
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	4313      	orrs	r3, r2
 800595e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005966:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a1e      	ldr	r2, [pc, #120]	; (80059e4 <TIM_OC2_SetConfig+0x100>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d00f      	beq.n	8005990 <TIM_OC2_SetConfig+0xac>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a1d      	ldr	r2, [pc, #116]	; (80059e8 <TIM_OC2_SetConfig+0x104>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d00b      	beq.n	8005990 <TIM_OC2_SetConfig+0xac>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a1c      	ldr	r2, [pc, #112]	; (80059ec <TIM_OC2_SetConfig+0x108>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d007      	beq.n	8005990 <TIM_OC2_SetConfig+0xac>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a1b      	ldr	r2, [pc, #108]	; (80059f0 <TIM_OC2_SetConfig+0x10c>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d003      	beq.n	8005990 <TIM_OC2_SetConfig+0xac>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a1a      	ldr	r2, [pc, #104]	; (80059f4 <TIM_OC2_SetConfig+0x110>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d113      	bne.n	80059b8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005996:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800599e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	695b      	ldr	r3, [r3, #20]
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	693a      	ldr	r2, [r7, #16]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	685a      	ldr	r2, [r3, #4]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	621a      	str	r2, [r3, #32]
}
 80059d2:	bf00      	nop
 80059d4:	371c      	adds	r7, #28
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	feff8fff 	.word	0xfeff8fff
 80059e4:	40010000 	.word	0x40010000
 80059e8:	40010400 	.word	0x40010400
 80059ec:	40014000 	.word	0x40014000
 80059f0:	40014400 	.word	0x40014400
 80059f4:	40014800 	.word	0x40014800

080059f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b087      	sub	sp, #28
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	4b33      	ldr	r3, [pc, #204]	; (8005af0 <TIM_OC3_SetConfig+0xf8>)
 8005a24:	4013      	ands	r3, r2
 8005a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f023 0303 	bic.w	r3, r3, #3
 8005a2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	021b      	lsls	r3, r3, #8
 8005a48:	697a      	ldr	r2, [r7, #20]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a28      	ldr	r2, [pc, #160]	; (8005af4 <TIM_OC3_SetConfig+0xfc>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d003      	beq.n	8005a5e <TIM_OC3_SetConfig+0x66>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a27      	ldr	r2, [pc, #156]	; (8005af8 <TIM_OC3_SetConfig+0x100>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d10d      	bne.n	8005a7a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	021b      	lsls	r3, r3, #8
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a1d      	ldr	r2, [pc, #116]	; (8005af4 <TIM_OC3_SetConfig+0xfc>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d00f      	beq.n	8005aa2 <TIM_OC3_SetConfig+0xaa>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a1c      	ldr	r2, [pc, #112]	; (8005af8 <TIM_OC3_SetConfig+0x100>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d00b      	beq.n	8005aa2 <TIM_OC3_SetConfig+0xaa>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a1b      	ldr	r2, [pc, #108]	; (8005afc <TIM_OC3_SetConfig+0x104>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d007      	beq.n	8005aa2 <TIM_OC3_SetConfig+0xaa>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a1a      	ldr	r2, [pc, #104]	; (8005b00 <TIM_OC3_SetConfig+0x108>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d003      	beq.n	8005aa2 <TIM_OC3_SetConfig+0xaa>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a19      	ldr	r2, [pc, #100]	; (8005b04 <TIM_OC3_SetConfig+0x10c>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d113      	bne.n	8005aca <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005aa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	011b      	lsls	r3, r3, #4
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	011b      	lsls	r3, r3, #4
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	693a      	ldr	r2, [r7, #16]
 8005ace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	685a      	ldr	r2, [r3, #4]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	621a      	str	r2, [r3, #32]
}
 8005ae4:	bf00      	nop
 8005ae6:	371c      	adds	r7, #28
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr
 8005af0:	fffeff8f 	.word	0xfffeff8f
 8005af4:	40010000 	.word	0x40010000
 8005af8:	40010400 	.word	0x40010400
 8005afc:	40014000 	.word	0x40014000
 8005b00:	40014400 	.word	0x40014400
 8005b04:	40014800 	.word	0x40014800

08005b08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b087      	sub	sp, #28
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	69db      	ldr	r3, [r3, #28]
 8005b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	4b24      	ldr	r3, [pc, #144]	; (8005bc4 <TIM_OC4_SetConfig+0xbc>)
 8005b34:	4013      	ands	r3, r2
 8005b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	021b      	lsls	r3, r3, #8
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	031b      	lsls	r3, r3, #12
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a19      	ldr	r2, [pc, #100]	; (8005bc8 <TIM_OC4_SetConfig+0xc0>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d00f      	beq.n	8005b88 <TIM_OC4_SetConfig+0x80>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a18      	ldr	r2, [pc, #96]	; (8005bcc <TIM_OC4_SetConfig+0xc4>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d00b      	beq.n	8005b88 <TIM_OC4_SetConfig+0x80>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a17      	ldr	r2, [pc, #92]	; (8005bd0 <TIM_OC4_SetConfig+0xc8>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d007      	beq.n	8005b88 <TIM_OC4_SetConfig+0x80>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a16      	ldr	r2, [pc, #88]	; (8005bd4 <TIM_OC4_SetConfig+0xcc>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d003      	beq.n	8005b88 <TIM_OC4_SetConfig+0x80>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a15      	ldr	r2, [pc, #84]	; (8005bd8 <TIM_OC4_SetConfig+0xd0>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d109      	bne.n	8005b9c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	695b      	ldr	r3, [r3, #20]
 8005b94:	019b      	lsls	r3, r3, #6
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	685a      	ldr	r2, [r3, #4]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	693a      	ldr	r2, [r7, #16]
 8005bb4:	621a      	str	r2, [r3, #32]
}
 8005bb6:	bf00      	nop
 8005bb8:	371c      	adds	r7, #28
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	feff8fff 	.word	0xfeff8fff
 8005bc8:	40010000 	.word	0x40010000
 8005bcc:	40010400 	.word	0x40010400
 8005bd0:	40014000 	.word	0x40014000
 8005bd4:	40014400 	.word	0x40014400
 8005bd8:	40014800 	.word	0x40014800

08005bdc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b087      	sub	sp, #28
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	4b21      	ldr	r3, [pc, #132]	; (8005c8c <TIM_OC5_SetConfig+0xb0>)
 8005c08:	4013      	ands	r3, r2
 8005c0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005c1c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	041b      	lsls	r3, r3, #16
 8005c24:	693a      	ldr	r2, [r7, #16]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a18      	ldr	r2, [pc, #96]	; (8005c90 <TIM_OC5_SetConfig+0xb4>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d00f      	beq.n	8005c52 <TIM_OC5_SetConfig+0x76>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a17      	ldr	r2, [pc, #92]	; (8005c94 <TIM_OC5_SetConfig+0xb8>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d00b      	beq.n	8005c52 <TIM_OC5_SetConfig+0x76>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a16      	ldr	r2, [pc, #88]	; (8005c98 <TIM_OC5_SetConfig+0xbc>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d007      	beq.n	8005c52 <TIM_OC5_SetConfig+0x76>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a15      	ldr	r2, [pc, #84]	; (8005c9c <TIM_OC5_SetConfig+0xc0>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d003      	beq.n	8005c52 <TIM_OC5_SetConfig+0x76>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a14      	ldr	r2, [pc, #80]	; (8005ca0 <TIM_OC5_SetConfig+0xc4>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d109      	bne.n	8005c66 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c58:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	021b      	lsls	r3, r3, #8
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	621a      	str	r2, [r3, #32]
}
 8005c80:	bf00      	nop
 8005c82:	371c      	adds	r7, #28
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr
 8005c8c:	fffeff8f 	.word	0xfffeff8f
 8005c90:	40010000 	.word	0x40010000
 8005c94:	40010400 	.word	0x40010400
 8005c98:	40014000 	.word	0x40014000
 8005c9c:	40014400 	.word	0x40014400
 8005ca0:	40014800 	.word	0x40014800

08005ca4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b087      	sub	sp, #28
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	4b22      	ldr	r3, [pc, #136]	; (8005d58 <TIM_OC6_SetConfig+0xb4>)
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	021b      	lsls	r3, r3, #8
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ce6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	051b      	lsls	r3, r3, #20
 8005cee:	693a      	ldr	r2, [r7, #16]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a19      	ldr	r2, [pc, #100]	; (8005d5c <TIM_OC6_SetConfig+0xb8>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d00f      	beq.n	8005d1c <TIM_OC6_SetConfig+0x78>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a18      	ldr	r2, [pc, #96]	; (8005d60 <TIM_OC6_SetConfig+0xbc>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d00b      	beq.n	8005d1c <TIM_OC6_SetConfig+0x78>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a17      	ldr	r2, [pc, #92]	; (8005d64 <TIM_OC6_SetConfig+0xc0>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d007      	beq.n	8005d1c <TIM_OC6_SetConfig+0x78>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a16      	ldr	r2, [pc, #88]	; (8005d68 <TIM_OC6_SetConfig+0xc4>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d003      	beq.n	8005d1c <TIM_OC6_SetConfig+0x78>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a15      	ldr	r2, [pc, #84]	; (8005d6c <TIM_OC6_SetConfig+0xc8>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d109      	bne.n	8005d30 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d22:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	695b      	ldr	r3, [r3, #20]
 8005d28:	029b      	lsls	r3, r3, #10
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	685a      	ldr	r2, [r3, #4]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	621a      	str	r2, [r3, #32]
}
 8005d4a:	bf00      	nop
 8005d4c:	371c      	adds	r7, #28
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	feff8fff 	.word	0xfeff8fff
 8005d5c:	40010000 	.word	0x40010000
 8005d60:	40010400 	.word	0x40010400
 8005d64:	40014000 	.word	0x40014000
 8005d68:	40014400 	.word	0x40014400
 8005d6c:	40014800 	.word	0x40014800

08005d70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b087      	sub	sp, #28
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	f003 031f 	and.w	r3, r3, #31
 8005d82:	2201      	movs	r2, #1
 8005d84:	fa02 f303 	lsl.w	r3, r2, r3
 8005d88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6a1a      	ldr	r2, [r3, #32]
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	43db      	mvns	r3, r3
 8005d92:	401a      	ands	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6a1a      	ldr	r2, [r3, #32]
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	f003 031f 	and.w	r3, r3, #31
 8005da2:	6879      	ldr	r1, [r7, #4]
 8005da4:	fa01 f303 	lsl.w	r3, r1, r3
 8005da8:	431a      	orrs	r2, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	621a      	str	r2, [r3, #32]
}
 8005dae:	bf00      	nop
 8005db0:	371c      	adds	r7, #28
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr

08005dba <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005dba:	b480      	push	{r7}
 8005dbc:	b083      	sub	sp, #12
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005dc2:	bf00      	nop
 8005dc4:	370c      	adds	r7, #12
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr

08005dce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005dce:	b480      	push	{r7}
 8005dd0:	b083      	sub	sp, #12
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005dd6:	bf00      	nop
 8005dd8:	370c      	adds	r7, #12
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr

08005de2 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005de2:	b480      	push	{r7}
 8005de4:	b083      	sub	sp, #12
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005dea:	bf00      	nop
 8005dec:	370c      	adds	r7, #12
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr

08005df6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005df6:	b580      	push	{r7, lr}
 8005df8:	b082      	sub	sp, #8
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d101      	bne.n	8005e08 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e042      	b.n	8005e8e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d106      	bne.n	8005e20 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f7fb fa5a 	bl	80012d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2224      	movs	r2, #36	; 0x24
 8005e24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f022 0201 	bic.w	r2, r2, #1
 8005e36:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 f8c3 	bl	8005fc4 <UART_SetConfig>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d101      	bne.n	8005e48 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e022      	b.n	8005e8e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d002      	beq.n	8005e56 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 fe1f 	bl	8006a94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	685a      	ldr	r2, [r3, #4]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e64:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	689a      	ldr	r2, [r3, #8]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e74:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f042 0201 	orr.w	r2, r2, #1
 8005e84:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 fea6 	bl	8006bd8 <UART_CheckIdleState>
 8005e8c:	4603      	mov	r3, r0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3708      	adds	r7, #8
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b08a      	sub	sp, #40	; 0x28
 8005e9a:	af02      	add	r7, sp, #8
 8005e9c:	60f8      	str	r0, [r7, #12]
 8005e9e:	60b9      	str	r1, [r7, #8]
 8005ea0:	603b      	str	r3, [r7, #0]
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005eac:	2b20      	cmp	r3, #32
 8005eae:	f040 8083 	bne.w	8005fb8 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d002      	beq.n	8005ebe <HAL_UART_Transmit+0x28>
 8005eb8:	88fb      	ldrh	r3, [r7, #6]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e07b      	b.n	8005fba <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d101      	bne.n	8005ed0 <HAL_UART_Transmit+0x3a>
 8005ecc:	2302      	movs	r3, #2
 8005ece:	e074      	b.n	8005fba <HAL_UART_Transmit+0x124>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2221      	movs	r2, #33	; 0x21
 8005ee4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ee8:	f7fb fc04 	bl	80016f4 <HAL_GetTick>
 8005eec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	88fa      	ldrh	r2, [r7, #6]
 8005ef2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	88fa      	ldrh	r2, [r7, #6]
 8005efa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f06:	d108      	bne.n	8005f1a <HAL_UART_Transmit+0x84>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d104      	bne.n	8005f1a <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005f10:	2300      	movs	r3, #0
 8005f12:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	61bb      	str	r3, [r7, #24]
 8005f18:	e003      	b.n	8005f22 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005f2a:	e02c      	b.n	8005f86 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	9300      	str	r3, [sp, #0]
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	2200      	movs	r2, #0
 8005f34:	2180      	movs	r1, #128	; 0x80
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f000 fe99 	bl	8006c6e <UART_WaitOnFlagUntilTimeout>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d001      	beq.n	8005f46 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e039      	b.n	8005fba <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10b      	bne.n	8005f64 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	881b      	ldrh	r3, [r3, #0]
 8005f50:	461a      	mov	r2, r3
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f5a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	3302      	adds	r3, #2
 8005f60:	61bb      	str	r3, [r7, #24]
 8005f62:	e007      	b.n	8005f74 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	781a      	ldrb	r2, [r3, #0]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	3301      	adds	r3, #1
 8005f72:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1cc      	bne.n	8005f2c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	2140      	movs	r1, #64	; 0x40
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f000 fe66 	bl	8006c6e <UART_WaitOnFlagUntilTimeout>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d001      	beq.n	8005fac <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e006      	b.n	8005fba <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2220      	movs	r2, #32
 8005fb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	e000      	b.n	8005fba <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005fb8:	2302      	movs	r3, #2
  }
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3720      	adds	r7, #32
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
	...

08005fc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fc8:	b092      	sub	sp, #72	; 0x48
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	689a      	ldr	r2, [r3, #8]
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	431a      	orrs	r2, r3
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	431a      	orrs	r2, r3
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	69db      	ldr	r3, [r3, #28]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	4bbe      	ldr	r3, [pc, #760]	; (80062ec <UART_SetConfig+0x328>)
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	6812      	ldr	r2, [r2, #0]
 8005ffa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ffc:	430b      	orrs	r3, r1
 8005ffe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	68da      	ldr	r2, [r3, #12]
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	430a      	orrs	r2, r1
 8006014:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	699b      	ldr	r3, [r3, #24]
 800601a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4ab3      	ldr	r2, [pc, #716]	; (80062f0 <UART_SetConfig+0x32c>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d004      	beq.n	8006030 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800602c:	4313      	orrs	r3, r2
 800602e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	689a      	ldr	r2, [r3, #8]
 8006036:	4baf      	ldr	r3, [pc, #700]	; (80062f4 <UART_SetConfig+0x330>)
 8006038:	4013      	ands	r3, r2
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	6812      	ldr	r2, [r2, #0]
 800603e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006040:	430b      	orrs	r3, r1
 8006042:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604a:	f023 010f 	bic.w	r1, r3, #15
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	430a      	orrs	r2, r1
 8006058:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4aa6      	ldr	r2, [pc, #664]	; (80062f8 <UART_SetConfig+0x334>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d177      	bne.n	8006154 <UART_SetConfig+0x190>
 8006064:	4ba5      	ldr	r3, [pc, #660]	; (80062fc <UART_SetConfig+0x338>)
 8006066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006068:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800606c:	2b28      	cmp	r3, #40	; 0x28
 800606e:	d86d      	bhi.n	800614c <UART_SetConfig+0x188>
 8006070:	a201      	add	r2, pc, #4	; (adr r2, 8006078 <UART_SetConfig+0xb4>)
 8006072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006076:	bf00      	nop
 8006078:	0800611d 	.word	0x0800611d
 800607c:	0800614d 	.word	0x0800614d
 8006080:	0800614d 	.word	0x0800614d
 8006084:	0800614d 	.word	0x0800614d
 8006088:	0800614d 	.word	0x0800614d
 800608c:	0800614d 	.word	0x0800614d
 8006090:	0800614d 	.word	0x0800614d
 8006094:	0800614d 	.word	0x0800614d
 8006098:	08006125 	.word	0x08006125
 800609c:	0800614d 	.word	0x0800614d
 80060a0:	0800614d 	.word	0x0800614d
 80060a4:	0800614d 	.word	0x0800614d
 80060a8:	0800614d 	.word	0x0800614d
 80060ac:	0800614d 	.word	0x0800614d
 80060b0:	0800614d 	.word	0x0800614d
 80060b4:	0800614d 	.word	0x0800614d
 80060b8:	0800612d 	.word	0x0800612d
 80060bc:	0800614d 	.word	0x0800614d
 80060c0:	0800614d 	.word	0x0800614d
 80060c4:	0800614d 	.word	0x0800614d
 80060c8:	0800614d 	.word	0x0800614d
 80060cc:	0800614d 	.word	0x0800614d
 80060d0:	0800614d 	.word	0x0800614d
 80060d4:	0800614d 	.word	0x0800614d
 80060d8:	08006135 	.word	0x08006135
 80060dc:	0800614d 	.word	0x0800614d
 80060e0:	0800614d 	.word	0x0800614d
 80060e4:	0800614d 	.word	0x0800614d
 80060e8:	0800614d 	.word	0x0800614d
 80060ec:	0800614d 	.word	0x0800614d
 80060f0:	0800614d 	.word	0x0800614d
 80060f4:	0800614d 	.word	0x0800614d
 80060f8:	0800613d 	.word	0x0800613d
 80060fc:	0800614d 	.word	0x0800614d
 8006100:	0800614d 	.word	0x0800614d
 8006104:	0800614d 	.word	0x0800614d
 8006108:	0800614d 	.word	0x0800614d
 800610c:	0800614d 	.word	0x0800614d
 8006110:	0800614d 	.word	0x0800614d
 8006114:	0800614d 	.word	0x0800614d
 8006118:	08006145 	.word	0x08006145
 800611c:	2301      	movs	r3, #1
 800611e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006122:	e222      	b.n	800656a <UART_SetConfig+0x5a6>
 8006124:	2304      	movs	r3, #4
 8006126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800612a:	e21e      	b.n	800656a <UART_SetConfig+0x5a6>
 800612c:	2308      	movs	r3, #8
 800612e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006132:	e21a      	b.n	800656a <UART_SetConfig+0x5a6>
 8006134:	2310      	movs	r3, #16
 8006136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800613a:	e216      	b.n	800656a <UART_SetConfig+0x5a6>
 800613c:	2320      	movs	r3, #32
 800613e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006142:	e212      	b.n	800656a <UART_SetConfig+0x5a6>
 8006144:	2340      	movs	r3, #64	; 0x40
 8006146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800614a:	e20e      	b.n	800656a <UART_SetConfig+0x5a6>
 800614c:	2380      	movs	r3, #128	; 0x80
 800614e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006152:	e20a      	b.n	800656a <UART_SetConfig+0x5a6>
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a69      	ldr	r2, [pc, #420]	; (8006300 <UART_SetConfig+0x33c>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d130      	bne.n	80061c0 <UART_SetConfig+0x1fc>
 800615e:	4b67      	ldr	r3, [pc, #412]	; (80062fc <UART_SetConfig+0x338>)
 8006160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006162:	f003 0307 	and.w	r3, r3, #7
 8006166:	2b05      	cmp	r3, #5
 8006168:	d826      	bhi.n	80061b8 <UART_SetConfig+0x1f4>
 800616a:	a201      	add	r2, pc, #4	; (adr r2, 8006170 <UART_SetConfig+0x1ac>)
 800616c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006170:	08006189 	.word	0x08006189
 8006174:	08006191 	.word	0x08006191
 8006178:	08006199 	.word	0x08006199
 800617c:	080061a1 	.word	0x080061a1
 8006180:	080061a9 	.word	0x080061a9
 8006184:	080061b1 	.word	0x080061b1
 8006188:	2300      	movs	r3, #0
 800618a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800618e:	e1ec      	b.n	800656a <UART_SetConfig+0x5a6>
 8006190:	2304      	movs	r3, #4
 8006192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006196:	e1e8      	b.n	800656a <UART_SetConfig+0x5a6>
 8006198:	2308      	movs	r3, #8
 800619a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800619e:	e1e4      	b.n	800656a <UART_SetConfig+0x5a6>
 80061a0:	2310      	movs	r3, #16
 80061a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061a6:	e1e0      	b.n	800656a <UART_SetConfig+0x5a6>
 80061a8:	2320      	movs	r3, #32
 80061aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061ae:	e1dc      	b.n	800656a <UART_SetConfig+0x5a6>
 80061b0:	2340      	movs	r3, #64	; 0x40
 80061b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061b6:	e1d8      	b.n	800656a <UART_SetConfig+0x5a6>
 80061b8:	2380      	movs	r3, #128	; 0x80
 80061ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061be:	e1d4      	b.n	800656a <UART_SetConfig+0x5a6>
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a4f      	ldr	r2, [pc, #316]	; (8006304 <UART_SetConfig+0x340>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d130      	bne.n	800622c <UART_SetConfig+0x268>
 80061ca:	4b4c      	ldr	r3, [pc, #304]	; (80062fc <UART_SetConfig+0x338>)
 80061cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ce:	f003 0307 	and.w	r3, r3, #7
 80061d2:	2b05      	cmp	r3, #5
 80061d4:	d826      	bhi.n	8006224 <UART_SetConfig+0x260>
 80061d6:	a201      	add	r2, pc, #4	; (adr r2, 80061dc <UART_SetConfig+0x218>)
 80061d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061dc:	080061f5 	.word	0x080061f5
 80061e0:	080061fd 	.word	0x080061fd
 80061e4:	08006205 	.word	0x08006205
 80061e8:	0800620d 	.word	0x0800620d
 80061ec:	08006215 	.word	0x08006215
 80061f0:	0800621d 	.word	0x0800621d
 80061f4:	2300      	movs	r3, #0
 80061f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061fa:	e1b6      	b.n	800656a <UART_SetConfig+0x5a6>
 80061fc:	2304      	movs	r3, #4
 80061fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006202:	e1b2      	b.n	800656a <UART_SetConfig+0x5a6>
 8006204:	2308      	movs	r3, #8
 8006206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800620a:	e1ae      	b.n	800656a <UART_SetConfig+0x5a6>
 800620c:	2310      	movs	r3, #16
 800620e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006212:	e1aa      	b.n	800656a <UART_SetConfig+0x5a6>
 8006214:	2320      	movs	r3, #32
 8006216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800621a:	e1a6      	b.n	800656a <UART_SetConfig+0x5a6>
 800621c:	2340      	movs	r3, #64	; 0x40
 800621e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006222:	e1a2      	b.n	800656a <UART_SetConfig+0x5a6>
 8006224:	2380      	movs	r3, #128	; 0x80
 8006226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800622a:	e19e      	b.n	800656a <UART_SetConfig+0x5a6>
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a35      	ldr	r2, [pc, #212]	; (8006308 <UART_SetConfig+0x344>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d130      	bne.n	8006298 <UART_SetConfig+0x2d4>
 8006236:	4b31      	ldr	r3, [pc, #196]	; (80062fc <UART_SetConfig+0x338>)
 8006238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800623a:	f003 0307 	and.w	r3, r3, #7
 800623e:	2b05      	cmp	r3, #5
 8006240:	d826      	bhi.n	8006290 <UART_SetConfig+0x2cc>
 8006242:	a201      	add	r2, pc, #4	; (adr r2, 8006248 <UART_SetConfig+0x284>)
 8006244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006248:	08006261 	.word	0x08006261
 800624c:	08006269 	.word	0x08006269
 8006250:	08006271 	.word	0x08006271
 8006254:	08006279 	.word	0x08006279
 8006258:	08006281 	.word	0x08006281
 800625c:	08006289 	.word	0x08006289
 8006260:	2300      	movs	r3, #0
 8006262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006266:	e180      	b.n	800656a <UART_SetConfig+0x5a6>
 8006268:	2304      	movs	r3, #4
 800626a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800626e:	e17c      	b.n	800656a <UART_SetConfig+0x5a6>
 8006270:	2308      	movs	r3, #8
 8006272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006276:	e178      	b.n	800656a <UART_SetConfig+0x5a6>
 8006278:	2310      	movs	r3, #16
 800627a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800627e:	e174      	b.n	800656a <UART_SetConfig+0x5a6>
 8006280:	2320      	movs	r3, #32
 8006282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006286:	e170      	b.n	800656a <UART_SetConfig+0x5a6>
 8006288:	2340      	movs	r3, #64	; 0x40
 800628a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800628e:	e16c      	b.n	800656a <UART_SetConfig+0x5a6>
 8006290:	2380      	movs	r3, #128	; 0x80
 8006292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006296:	e168      	b.n	800656a <UART_SetConfig+0x5a6>
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a1b      	ldr	r2, [pc, #108]	; (800630c <UART_SetConfig+0x348>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d142      	bne.n	8006328 <UART_SetConfig+0x364>
 80062a2:	4b16      	ldr	r3, [pc, #88]	; (80062fc <UART_SetConfig+0x338>)
 80062a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062a6:	f003 0307 	and.w	r3, r3, #7
 80062aa:	2b05      	cmp	r3, #5
 80062ac:	d838      	bhi.n	8006320 <UART_SetConfig+0x35c>
 80062ae:	a201      	add	r2, pc, #4	; (adr r2, 80062b4 <UART_SetConfig+0x2f0>)
 80062b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b4:	080062cd 	.word	0x080062cd
 80062b8:	080062d5 	.word	0x080062d5
 80062bc:	080062dd 	.word	0x080062dd
 80062c0:	080062e5 	.word	0x080062e5
 80062c4:	08006311 	.word	0x08006311
 80062c8:	08006319 	.word	0x08006319
 80062cc:	2300      	movs	r3, #0
 80062ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062d2:	e14a      	b.n	800656a <UART_SetConfig+0x5a6>
 80062d4:	2304      	movs	r3, #4
 80062d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062da:	e146      	b.n	800656a <UART_SetConfig+0x5a6>
 80062dc:	2308      	movs	r3, #8
 80062de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062e2:	e142      	b.n	800656a <UART_SetConfig+0x5a6>
 80062e4:	2310      	movs	r3, #16
 80062e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ea:	e13e      	b.n	800656a <UART_SetConfig+0x5a6>
 80062ec:	cfff69f3 	.word	0xcfff69f3
 80062f0:	58000c00 	.word	0x58000c00
 80062f4:	11fff4ff 	.word	0x11fff4ff
 80062f8:	40011000 	.word	0x40011000
 80062fc:	58024400 	.word	0x58024400
 8006300:	40004400 	.word	0x40004400
 8006304:	40004800 	.word	0x40004800
 8006308:	40004c00 	.word	0x40004c00
 800630c:	40005000 	.word	0x40005000
 8006310:	2320      	movs	r3, #32
 8006312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006316:	e128      	b.n	800656a <UART_SetConfig+0x5a6>
 8006318:	2340      	movs	r3, #64	; 0x40
 800631a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800631e:	e124      	b.n	800656a <UART_SetConfig+0x5a6>
 8006320:	2380      	movs	r3, #128	; 0x80
 8006322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006326:	e120      	b.n	800656a <UART_SetConfig+0x5a6>
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4acb      	ldr	r2, [pc, #812]	; (800665c <UART_SetConfig+0x698>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d176      	bne.n	8006420 <UART_SetConfig+0x45c>
 8006332:	4bcb      	ldr	r3, [pc, #812]	; (8006660 <UART_SetConfig+0x69c>)
 8006334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006336:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800633a:	2b28      	cmp	r3, #40	; 0x28
 800633c:	d86c      	bhi.n	8006418 <UART_SetConfig+0x454>
 800633e:	a201      	add	r2, pc, #4	; (adr r2, 8006344 <UART_SetConfig+0x380>)
 8006340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006344:	080063e9 	.word	0x080063e9
 8006348:	08006419 	.word	0x08006419
 800634c:	08006419 	.word	0x08006419
 8006350:	08006419 	.word	0x08006419
 8006354:	08006419 	.word	0x08006419
 8006358:	08006419 	.word	0x08006419
 800635c:	08006419 	.word	0x08006419
 8006360:	08006419 	.word	0x08006419
 8006364:	080063f1 	.word	0x080063f1
 8006368:	08006419 	.word	0x08006419
 800636c:	08006419 	.word	0x08006419
 8006370:	08006419 	.word	0x08006419
 8006374:	08006419 	.word	0x08006419
 8006378:	08006419 	.word	0x08006419
 800637c:	08006419 	.word	0x08006419
 8006380:	08006419 	.word	0x08006419
 8006384:	080063f9 	.word	0x080063f9
 8006388:	08006419 	.word	0x08006419
 800638c:	08006419 	.word	0x08006419
 8006390:	08006419 	.word	0x08006419
 8006394:	08006419 	.word	0x08006419
 8006398:	08006419 	.word	0x08006419
 800639c:	08006419 	.word	0x08006419
 80063a0:	08006419 	.word	0x08006419
 80063a4:	08006401 	.word	0x08006401
 80063a8:	08006419 	.word	0x08006419
 80063ac:	08006419 	.word	0x08006419
 80063b0:	08006419 	.word	0x08006419
 80063b4:	08006419 	.word	0x08006419
 80063b8:	08006419 	.word	0x08006419
 80063bc:	08006419 	.word	0x08006419
 80063c0:	08006419 	.word	0x08006419
 80063c4:	08006409 	.word	0x08006409
 80063c8:	08006419 	.word	0x08006419
 80063cc:	08006419 	.word	0x08006419
 80063d0:	08006419 	.word	0x08006419
 80063d4:	08006419 	.word	0x08006419
 80063d8:	08006419 	.word	0x08006419
 80063dc:	08006419 	.word	0x08006419
 80063e0:	08006419 	.word	0x08006419
 80063e4:	08006411 	.word	0x08006411
 80063e8:	2301      	movs	r3, #1
 80063ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063ee:	e0bc      	b.n	800656a <UART_SetConfig+0x5a6>
 80063f0:	2304      	movs	r3, #4
 80063f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063f6:	e0b8      	b.n	800656a <UART_SetConfig+0x5a6>
 80063f8:	2308      	movs	r3, #8
 80063fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063fe:	e0b4      	b.n	800656a <UART_SetConfig+0x5a6>
 8006400:	2310      	movs	r3, #16
 8006402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006406:	e0b0      	b.n	800656a <UART_SetConfig+0x5a6>
 8006408:	2320      	movs	r3, #32
 800640a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800640e:	e0ac      	b.n	800656a <UART_SetConfig+0x5a6>
 8006410:	2340      	movs	r3, #64	; 0x40
 8006412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006416:	e0a8      	b.n	800656a <UART_SetConfig+0x5a6>
 8006418:	2380      	movs	r3, #128	; 0x80
 800641a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800641e:	e0a4      	b.n	800656a <UART_SetConfig+0x5a6>
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a8f      	ldr	r2, [pc, #572]	; (8006664 <UART_SetConfig+0x6a0>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d130      	bne.n	800648c <UART_SetConfig+0x4c8>
 800642a:	4b8d      	ldr	r3, [pc, #564]	; (8006660 <UART_SetConfig+0x69c>)
 800642c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800642e:	f003 0307 	and.w	r3, r3, #7
 8006432:	2b05      	cmp	r3, #5
 8006434:	d826      	bhi.n	8006484 <UART_SetConfig+0x4c0>
 8006436:	a201      	add	r2, pc, #4	; (adr r2, 800643c <UART_SetConfig+0x478>)
 8006438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800643c:	08006455 	.word	0x08006455
 8006440:	0800645d 	.word	0x0800645d
 8006444:	08006465 	.word	0x08006465
 8006448:	0800646d 	.word	0x0800646d
 800644c:	08006475 	.word	0x08006475
 8006450:	0800647d 	.word	0x0800647d
 8006454:	2300      	movs	r3, #0
 8006456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800645a:	e086      	b.n	800656a <UART_SetConfig+0x5a6>
 800645c:	2304      	movs	r3, #4
 800645e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006462:	e082      	b.n	800656a <UART_SetConfig+0x5a6>
 8006464:	2308      	movs	r3, #8
 8006466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800646a:	e07e      	b.n	800656a <UART_SetConfig+0x5a6>
 800646c:	2310      	movs	r3, #16
 800646e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006472:	e07a      	b.n	800656a <UART_SetConfig+0x5a6>
 8006474:	2320      	movs	r3, #32
 8006476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800647a:	e076      	b.n	800656a <UART_SetConfig+0x5a6>
 800647c:	2340      	movs	r3, #64	; 0x40
 800647e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006482:	e072      	b.n	800656a <UART_SetConfig+0x5a6>
 8006484:	2380      	movs	r3, #128	; 0x80
 8006486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800648a:	e06e      	b.n	800656a <UART_SetConfig+0x5a6>
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a75      	ldr	r2, [pc, #468]	; (8006668 <UART_SetConfig+0x6a4>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d130      	bne.n	80064f8 <UART_SetConfig+0x534>
 8006496:	4b72      	ldr	r3, [pc, #456]	; (8006660 <UART_SetConfig+0x69c>)
 8006498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800649a:	f003 0307 	and.w	r3, r3, #7
 800649e:	2b05      	cmp	r3, #5
 80064a0:	d826      	bhi.n	80064f0 <UART_SetConfig+0x52c>
 80064a2:	a201      	add	r2, pc, #4	; (adr r2, 80064a8 <UART_SetConfig+0x4e4>)
 80064a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a8:	080064c1 	.word	0x080064c1
 80064ac:	080064c9 	.word	0x080064c9
 80064b0:	080064d1 	.word	0x080064d1
 80064b4:	080064d9 	.word	0x080064d9
 80064b8:	080064e1 	.word	0x080064e1
 80064bc:	080064e9 	.word	0x080064e9
 80064c0:	2300      	movs	r3, #0
 80064c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064c6:	e050      	b.n	800656a <UART_SetConfig+0x5a6>
 80064c8:	2304      	movs	r3, #4
 80064ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ce:	e04c      	b.n	800656a <UART_SetConfig+0x5a6>
 80064d0:	2308      	movs	r3, #8
 80064d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064d6:	e048      	b.n	800656a <UART_SetConfig+0x5a6>
 80064d8:	2310      	movs	r3, #16
 80064da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064de:	e044      	b.n	800656a <UART_SetConfig+0x5a6>
 80064e0:	2320      	movs	r3, #32
 80064e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064e6:	e040      	b.n	800656a <UART_SetConfig+0x5a6>
 80064e8:	2340      	movs	r3, #64	; 0x40
 80064ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ee:	e03c      	b.n	800656a <UART_SetConfig+0x5a6>
 80064f0:	2380      	movs	r3, #128	; 0x80
 80064f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064f6:	e038      	b.n	800656a <UART_SetConfig+0x5a6>
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a5b      	ldr	r2, [pc, #364]	; (800666c <UART_SetConfig+0x6a8>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d130      	bne.n	8006564 <UART_SetConfig+0x5a0>
 8006502:	4b57      	ldr	r3, [pc, #348]	; (8006660 <UART_SetConfig+0x69c>)
 8006504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006506:	f003 0307 	and.w	r3, r3, #7
 800650a:	2b05      	cmp	r3, #5
 800650c:	d826      	bhi.n	800655c <UART_SetConfig+0x598>
 800650e:	a201      	add	r2, pc, #4	; (adr r2, 8006514 <UART_SetConfig+0x550>)
 8006510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006514:	0800652d 	.word	0x0800652d
 8006518:	08006535 	.word	0x08006535
 800651c:	0800653d 	.word	0x0800653d
 8006520:	08006545 	.word	0x08006545
 8006524:	0800654d 	.word	0x0800654d
 8006528:	08006555 	.word	0x08006555
 800652c:	2302      	movs	r3, #2
 800652e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006532:	e01a      	b.n	800656a <UART_SetConfig+0x5a6>
 8006534:	2304      	movs	r3, #4
 8006536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800653a:	e016      	b.n	800656a <UART_SetConfig+0x5a6>
 800653c:	2308      	movs	r3, #8
 800653e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006542:	e012      	b.n	800656a <UART_SetConfig+0x5a6>
 8006544:	2310      	movs	r3, #16
 8006546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800654a:	e00e      	b.n	800656a <UART_SetConfig+0x5a6>
 800654c:	2320      	movs	r3, #32
 800654e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006552:	e00a      	b.n	800656a <UART_SetConfig+0x5a6>
 8006554:	2340      	movs	r3, #64	; 0x40
 8006556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800655a:	e006      	b.n	800656a <UART_SetConfig+0x5a6>
 800655c:	2380      	movs	r3, #128	; 0x80
 800655e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006562:	e002      	b.n	800656a <UART_SetConfig+0x5a6>
 8006564:	2380      	movs	r3, #128	; 0x80
 8006566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a3f      	ldr	r2, [pc, #252]	; (800666c <UART_SetConfig+0x6a8>)
 8006570:	4293      	cmp	r3, r2
 8006572:	f040 80f8 	bne.w	8006766 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006576:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800657a:	2b20      	cmp	r3, #32
 800657c:	dc46      	bgt.n	800660c <UART_SetConfig+0x648>
 800657e:	2b02      	cmp	r3, #2
 8006580:	f2c0 8082 	blt.w	8006688 <UART_SetConfig+0x6c4>
 8006584:	3b02      	subs	r3, #2
 8006586:	2b1e      	cmp	r3, #30
 8006588:	d87e      	bhi.n	8006688 <UART_SetConfig+0x6c4>
 800658a:	a201      	add	r2, pc, #4	; (adr r2, 8006590 <UART_SetConfig+0x5cc>)
 800658c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006590:	08006613 	.word	0x08006613
 8006594:	08006689 	.word	0x08006689
 8006598:	0800661b 	.word	0x0800661b
 800659c:	08006689 	.word	0x08006689
 80065a0:	08006689 	.word	0x08006689
 80065a4:	08006689 	.word	0x08006689
 80065a8:	0800662b 	.word	0x0800662b
 80065ac:	08006689 	.word	0x08006689
 80065b0:	08006689 	.word	0x08006689
 80065b4:	08006689 	.word	0x08006689
 80065b8:	08006689 	.word	0x08006689
 80065bc:	08006689 	.word	0x08006689
 80065c0:	08006689 	.word	0x08006689
 80065c4:	08006689 	.word	0x08006689
 80065c8:	0800663b 	.word	0x0800663b
 80065cc:	08006689 	.word	0x08006689
 80065d0:	08006689 	.word	0x08006689
 80065d4:	08006689 	.word	0x08006689
 80065d8:	08006689 	.word	0x08006689
 80065dc:	08006689 	.word	0x08006689
 80065e0:	08006689 	.word	0x08006689
 80065e4:	08006689 	.word	0x08006689
 80065e8:	08006689 	.word	0x08006689
 80065ec:	08006689 	.word	0x08006689
 80065f0:	08006689 	.word	0x08006689
 80065f4:	08006689 	.word	0x08006689
 80065f8:	08006689 	.word	0x08006689
 80065fc:	08006689 	.word	0x08006689
 8006600:	08006689 	.word	0x08006689
 8006604:	08006689 	.word	0x08006689
 8006608:	0800667b 	.word	0x0800667b
 800660c:	2b40      	cmp	r3, #64	; 0x40
 800660e:	d037      	beq.n	8006680 <UART_SetConfig+0x6bc>
 8006610:	e03a      	b.n	8006688 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006612:	f7fd fe5f 	bl	80042d4 <HAL_RCCEx_GetD3PCLK1Freq>
 8006616:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006618:	e03c      	b.n	8006694 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800661a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800661e:	4618      	mov	r0, r3
 8006620:	f7fd fe6e 	bl	8004300 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006626:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006628:	e034      	b.n	8006694 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800662a:	f107 0318 	add.w	r3, r7, #24
 800662e:	4618      	mov	r0, r3
 8006630:	f7fd ffba 	bl	80045a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006638:	e02c      	b.n	8006694 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800663a:	4b09      	ldr	r3, [pc, #36]	; (8006660 <UART_SetConfig+0x69c>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 0320 	and.w	r3, r3, #32
 8006642:	2b00      	cmp	r3, #0
 8006644:	d016      	beq.n	8006674 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006646:	4b06      	ldr	r3, [pc, #24]	; (8006660 <UART_SetConfig+0x69c>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	08db      	lsrs	r3, r3, #3
 800664c:	f003 0303 	and.w	r3, r3, #3
 8006650:	4a07      	ldr	r2, [pc, #28]	; (8006670 <UART_SetConfig+0x6ac>)
 8006652:	fa22 f303 	lsr.w	r3, r2, r3
 8006656:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006658:	e01c      	b.n	8006694 <UART_SetConfig+0x6d0>
 800665a:	bf00      	nop
 800665c:	40011400 	.word	0x40011400
 8006660:	58024400 	.word	0x58024400
 8006664:	40007800 	.word	0x40007800
 8006668:	40007c00 	.word	0x40007c00
 800666c:	58000c00 	.word	0x58000c00
 8006670:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006674:	4b9d      	ldr	r3, [pc, #628]	; (80068ec <UART_SetConfig+0x928>)
 8006676:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006678:	e00c      	b.n	8006694 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800667a:	4b9d      	ldr	r3, [pc, #628]	; (80068f0 <UART_SetConfig+0x92c>)
 800667c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800667e:	e009      	b.n	8006694 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006680:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006684:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006686:	e005      	b.n	8006694 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006688:	2300      	movs	r3, #0
 800668a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006692:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006696:	2b00      	cmp	r3, #0
 8006698:	f000 81de 	beq.w	8006a58 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a0:	4a94      	ldr	r2, [pc, #592]	; (80068f4 <UART_SetConfig+0x930>)
 80066a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066a6:	461a      	mov	r2, r3
 80066a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80066ae:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	685a      	ldr	r2, [r3, #4]
 80066b4:	4613      	mov	r3, r2
 80066b6:	005b      	lsls	r3, r3, #1
 80066b8:	4413      	add	r3, r2
 80066ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066bc:	429a      	cmp	r2, r3
 80066be:	d305      	bcc.n	80066cc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d903      	bls.n	80066d4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80066d2:	e1c1      	b.n	8006a58 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066d6:	2200      	movs	r2, #0
 80066d8:	60bb      	str	r3, [r7, #8]
 80066da:	60fa      	str	r2, [r7, #12]
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e0:	4a84      	ldr	r2, [pc, #528]	; (80068f4 <UART_SetConfig+0x930>)
 80066e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	2200      	movs	r2, #0
 80066ea:	603b      	str	r3, [r7, #0]
 80066ec:	607a      	str	r2, [r7, #4]
 80066ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80066f6:	f7f9 fdf3 	bl	80002e0 <__aeabi_uldivmod>
 80066fa:	4602      	mov	r2, r0
 80066fc:	460b      	mov	r3, r1
 80066fe:	4610      	mov	r0, r2
 8006700:	4619      	mov	r1, r3
 8006702:	f04f 0200 	mov.w	r2, #0
 8006706:	f04f 0300 	mov.w	r3, #0
 800670a:	020b      	lsls	r3, r1, #8
 800670c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006710:	0202      	lsls	r2, r0, #8
 8006712:	6979      	ldr	r1, [r7, #20]
 8006714:	6849      	ldr	r1, [r1, #4]
 8006716:	0849      	lsrs	r1, r1, #1
 8006718:	2000      	movs	r0, #0
 800671a:	460c      	mov	r4, r1
 800671c:	4605      	mov	r5, r0
 800671e:	eb12 0804 	adds.w	r8, r2, r4
 8006722:	eb43 0905 	adc.w	r9, r3, r5
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	469a      	mov	sl, r3
 800672e:	4693      	mov	fp, r2
 8006730:	4652      	mov	r2, sl
 8006732:	465b      	mov	r3, fp
 8006734:	4640      	mov	r0, r8
 8006736:	4649      	mov	r1, r9
 8006738:	f7f9 fdd2 	bl	80002e0 <__aeabi_uldivmod>
 800673c:	4602      	mov	r2, r0
 800673e:	460b      	mov	r3, r1
 8006740:	4613      	mov	r3, r2
 8006742:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006746:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800674a:	d308      	bcc.n	800675e <UART_SetConfig+0x79a>
 800674c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006752:	d204      	bcs.n	800675e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800675a:	60da      	str	r2, [r3, #12]
 800675c:	e17c      	b.n	8006a58 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006764:	e178      	b.n	8006a58 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	69db      	ldr	r3, [r3, #28]
 800676a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800676e:	f040 80c5 	bne.w	80068fc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006772:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006776:	2b20      	cmp	r3, #32
 8006778:	dc48      	bgt.n	800680c <UART_SetConfig+0x848>
 800677a:	2b00      	cmp	r3, #0
 800677c:	db7b      	blt.n	8006876 <UART_SetConfig+0x8b2>
 800677e:	2b20      	cmp	r3, #32
 8006780:	d879      	bhi.n	8006876 <UART_SetConfig+0x8b2>
 8006782:	a201      	add	r2, pc, #4	; (adr r2, 8006788 <UART_SetConfig+0x7c4>)
 8006784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006788:	08006813 	.word	0x08006813
 800678c:	0800681b 	.word	0x0800681b
 8006790:	08006877 	.word	0x08006877
 8006794:	08006877 	.word	0x08006877
 8006798:	08006823 	.word	0x08006823
 800679c:	08006877 	.word	0x08006877
 80067a0:	08006877 	.word	0x08006877
 80067a4:	08006877 	.word	0x08006877
 80067a8:	08006833 	.word	0x08006833
 80067ac:	08006877 	.word	0x08006877
 80067b0:	08006877 	.word	0x08006877
 80067b4:	08006877 	.word	0x08006877
 80067b8:	08006877 	.word	0x08006877
 80067bc:	08006877 	.word	0x08006877
 80067c0:	08006877 	.word	0x08006877
 80067c4:	08006877 	.word	0x08006877
 80067c8:	08006843 	.word	0x08006843
 80067cc:	08006877 	.word	0x08006877
 80067d0:	08006877 	.word	0x08006877
 80067d4:	08006877 	.word	0x08006877
 80067d8:	08006877 	.word	0x08006877
 80067dc:	08006877 	.word	0x08006877
 80067e0:	08006877 	.word	0x08006877
 80067e4:	08006877 	.word	0x08006877
 80067e8:	08006877 	.word	0x08006877
 80067ec:	08006877 	.word	0x08006877
 80067f0:	08006877 	.word	0x08006877
 80067f4:	08006877 	.word	0x08006877
 80067f8:	08006877 	.word	0x08006877
 80067fc:	08006877 	.word	0x08006877
 8006800:	08006877 	.word	0x08006877
 8006804:	08006877 	.word	0x08006877
 8006808:	08006869 	.word	0x08006869
 800680c:	2b40      	cmp	r3, #64	; 0x40
 800680e:	d02e      	beq.n	800686e <UART_SetConfig+0x8aa>
 8006810:	e031      	b.n	8006876 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006812:	f7fc fdab 	bl	800336c <HAL_RCC_GetPCLK1Freq>
 8006816:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006818:	e033      	b.n	8006882 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800681a:	f7fc fdbd 	bl	8003398 <HAL_RCC_GetPCLK2Freq>
 800681e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006820:	e02f      	b.n	8006882 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006826:	4618      	mov	r0, r3
 8006828:	f7fd fd6a 	bl	8004300 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800682c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006830:	e027      	b.n	8006882 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006832:	f107 0318 	add.w	r3, r7, #24
 8006836:	4618      	mov	r0, r3
 8006838:	f7fd feb6 	bl	80045a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006840:	e01f      	b.n	8006882 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006842:	4b2d      	ldr	r3, [pc, #180]	; (80068f8 <UART_SetConfig+0x934>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0320 	and.w	r3, r3, #32
 800684a:	2b00      	cmp	r3, #0
 800684c:	d009      	beq.n	8006862 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800684e:	4b2a      	ldr	r3, [pc, #168]	; (80068f8 <UART_SetConfig+0x934>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	08db      	lsrs	r3, r3, #3
 8006854:	f003 0303 	and.w	r3, r3, #3
 8006858:	4a24      	ldr	r2, [pc, #144]	; (80068ec <UART_SetConfig+0x928>)
 800685a:	fa22 f303 	lsr.w	r3, r2, r3
 800685e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006860:	e00f      	b.n	8006882 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006862:	4b22      	ldr	r3, [pc, #136]	; (80068ec <UART_SetConfig+0x928>)
 8006864:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006866:	e00c      	b.n	8006882 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006868:	4b21      	ldr	r3, [pc, #132]	; (80068f0 <UART_SetConfig+0x92c>)
 800686a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800686c:	e009      	b.n	8006882 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800686e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006872:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006874:	e005      	b.n	8006882 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006876:	2300      	movs	r3, #0
 8006878:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006880:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006884:	2b00      	cmp	r3, #0
 8006886:	f000 80e7 	beq.w	8006a58 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688e:	4a19      	ldr	r2, [pc, #100]	; (80068f4 <UART_SetConfig+0x930>)
 8006890:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006894:	461a      	mov	r2, r3
 8006896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006898:	fbb3 f3f2 	udiv	r3, r3, r2
 800689c:	005a      	lsls	r2, r3, #1
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	085b      	lsrs	r3, r3, #1
 80068a4:	441a      	add	r2, r3
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ae:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b2:	2b0f      	cmp	r3, #15
 80068b4:	d916      	bls.n	80068e4 <UART_SetConfig+0x920>
 80068b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068bc:	d212      	bcs.n	80068e4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	f023 030f 	bic.w	r3, r3, #15
 80068c6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ca:	085b      	lsrs	r3, r3, #1
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	f003 0307 	and.w	r3, r3, #7
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80068d6:	4313      	orrs	r3, r2
 80068d8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80068e0:	60da      	str	r2, [r3, #12]
 80068e2:	e0b9      	b.n	8006a58 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80068ea:	e0b5      	b.n	8006a58 <UART_SetConfig+0xa94>
 80068ec:	03d09000 	.word	0x03d09000
 80068f0:	003d0900 	.word	0x003d0900
 80068f4:	0800a7d4 	.word	0x0800a7d4
 80068f8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80068fc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006900:	2b20      	cmp	r3, #32
 8006902:	dc49      	bgt.n	8006998 <UART_SetConfig+0x9d4>
 8006904:	2b00      	cmp	r3, #0
 8006906:	db7c      	blt.n	8006a02 <UART_SetConfig+0xa3e>
 8006908:	2b20      	cmp	r3, #32
 800690a:	d87a      	bhi.n	8006a02 <UART_SetConfig+0xa3e>
 800690c:	a201      	add	r2, pc, #4	; (adr r2, 8006914 <UART_SetConfig+0x950>)
 800690e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006912:	bf00      	nop
 8006914:	0800699f 	.word	0x0800699f
 8006918:	080069a7 	.word	0x080069a7
 800691c:	08006a03 	.word	0x08006a03
 8006920:	08006a03 	.word	0x08006a03
 8006924:	080069af 	.word	0x080069af
 8006928:	08006a03 	.word	0x08006a03
 800692c:	08006a03 	.word	0x08006a03
 8006930:	08006a03 	.word	0x08006a03
 8006934:	080069bf 	.word	0x080069bf
 8006938:	08006a03 	.word	0x08006a03
 800693c:	08006a03 	.word	0x08006a03
 8006940:	08006a03 	.word	0x08006a03
 8006944:	08006a03 	.word	0x08006a03
 8006948:	08006a03 	.word	0x08006a03
 800694c:	08006a03 	.word	0x08006a03
 8006950:	08006a03 	.word	0x08006a03
 8006954:	080069cf 	.word	0x080069cf
 8006958:	08006a03 	.word	0x08006a03
 800695c:	08006a03 	.word	0x08006a03
 8006960:	08006a03 	.word	0x08006a03
 8006964:	08006a03 	.word	0x08006a03
 8006968:	08006a03 	.word	0x08006a03
 800696c:	08006a03 	.word	0x08006a03
 8006970:	08006a03 	.word	0x08006a03
 8006974:	08006a03 	.word	0x08006a03
 8006978:	08006a03 	.word	0x08006a03
 800697c:	08006a03 	.word	0x08006a03
 8006980:	08006a03 	.word	0x08006a03
 8006984:	08006a03 	.word	0x08006a03
 8006988:	08006a03 	.word	0x08006a03
 800698c:	08006a03 	.word	0x08006a03
 8006990:	08006a03 	.word	0x08006a03
 8006994:	080069f5 	.word	0x080069f5
 8006998:	2b40      	cmp	r3, #64	; 0x40
 800699a:	d02e      	beq.n	80069fa <UART_SetConfig+0xa36>
 800699c:	e031      	b.n	8006a02 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800699e:	f7fc fce5 	bl	800336c <HAL_RCC_GetPCLK1Freq>
 80069a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80069a4:	e033      	b.n	8006a0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069a6:	f7fc fcf7 	bl	8003398 <HAL_RCC_GetPCLK2Freq>
 80069aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80069ac:	e02f      	b.n	8006a0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7fd fca4 	bl	8004300 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80069b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069bc:	e027      	b.n	8006a0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069be:	f107 0318 	add.w	r3, r7, #24
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7fd fdf0 	bl	80045a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069cc:	e01f      	b.n	8006a0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069ce:	4b2d      	ldr	r3, [pc, #180]	; (8006a84 <UART_SetConfig+0xac0>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 0320 	and.w	r3, r3, #32
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d009      	beq.n	80069ee <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80069da:	4b2a      	ldr	r3, [pc, #168]	; (8006a84 <UART_SetConfig+0xac0>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	08db      	lsrs	r3, r3, #3
 80069e0:	f003 0303 	and.w	r3, r3, #3
 80069e4:	4a28      	ldr	r2, [pc, #160]	; (8006a88 <UART_SetConfig+0xac4>)
 80069e6:	fa22 f303 	lsr.w	r3, r2, r3
 80069ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80069ec:	e00f      	b.n	8006a0e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80069ee:	4b26      	ldr	r3, [pc, #152]	; (8006a88 <UART_SetConfig+0xac4>)
 80069f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069f2:	e00c      	b.n	8006a0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80069f4:	4b25      	ldr	r3, [pc, #148]	; (8006a8c <UART_SetConfig+0xac8>)
 80069f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069f8:	e009      	b.n	8006a0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a00:	e005      	b.n	8006a0e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006a02:	2300      	movs	r3, #0
 8006a04:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006a0c:	bf00      	nop
    }

    if (pclk != 0U)
 8006a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d021      	beq.n	8006a58 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a18:	4a1d      	ldr	r2, [pc, #116]	; (8006a90 <UART_SetConfig+0xacc>)
 8006a1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a22:	fbb3 f2f2 	udiv	r2, r3, r2
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	085b      	lsrs	r3, r3, #1
 8006a2c:	441a      	add	r2, r3
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a36:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3a:	2b0f      	cmp	r3, #15
 8006a3c:	d909      	bls.n	8006a52 <UART_SetConfig+0xa8e>
 8006a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a44:	d205      	bcs.n	8006a52 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a48:	b29a      	uxth	r2, r3
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	60da      	str	r2, [r3, #12]
 8006a50:	e002      	b.n	8006a58 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	2200      	movs	r2, #0
 8006a72:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006a74:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3748      	adds	r7, #72	; 0x48
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a82:	bf00      	nop
 8006a84:	58024400 	.word	0x58024400
 8006a88:	03d09000 	.word	0x03d09000
 8006a8c:	003d0900 	.word	0x003d0900
 8006a90:	0800a7d4 	.word	0x0800a7d4

08006a94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa0:	f003 0301 	and.w	r3, r3, #1
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00a      	beq.n	8006abe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	430a      	orrs	r2, r1
 8006abc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac2:	f003 0302 	and.w	r3, r3, #2
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00a      	beq.n	8006ae0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	430a      	orrs	r2, r1
 8006ade:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae4:	f003 0304 	and.w	r3, r3, #4
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00a      	beq.n	8006b02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	430a      	orrs	r2, r1
 8006b00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b06:	f003 0308 	and.w	r3, r3, #8
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00a      	beq.n	8006b24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	430a      	orrs	r2, r1
 8006b22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b28:	f003 0310 	and.w	r3, r3, #16
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d00a      	beq.n	8006b46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	430a      	orrs	r2, r1
 8006b44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b4a:	f003 0320 	and.w	r3, r3, #32
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00a      	beq.n	8006b68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	430a      	orrs	r2, r1
 8006b66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d01a      	beq.n	8006baa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	430a      	orrs	r2, r1
 8006b88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b92:	d10a      	bne.n	8006baa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	430a      	orrs	r2, r1
 8006ba8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00a      	beq.n	8006bcc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	430a      	orrs	r2, r1
 8006bca:	605a      	str	r2, [r3, #4]
  }
}
 8006bcc:	bf00      	nop
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b086      	sub	sp, #24
 8006bdc:	af02      	add	r7, sp, #8
 8006bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006be8:	f7fa fd84 	bl	80016f4 <HAL_GetTick>
 8006bec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f003 0308 	and.w	r3, r3, #8
 8006bf8:	2b08      	cmp	r3, #8
 8006bfa:	d10e      	bne.n	8006c1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 f82f 	bl	8006c6e <UART_WaitOnFlagUntilTimeout>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d001      	beq.n	8006c1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e025      	b.n	8006c66 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0304 	and.w	r3, r3, #4
 8006c24:	2b04      	cmp	r3, #4
 8006c26:	d10e      	bne.n	8006c46 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c2c:	9300      	str	r3, [sp, #0]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 f819 	bl	8006c6e <UART_WaitOnFlagUntilTimeout>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d001      	beq.n	8006c46 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c42:	2303      	movs	r3, #3
 8006c44:	e00f      	b.n	8006c66 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2220      	movs	r2, #32
 8006c4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2220      	movs	r2, #32
 8006c52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b09c      	sub	sp, #112	; 0x70
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	60f8      	str	r0, [r7, #12]
 8006c76:	60b9      	str	r1, [r7, #8]
 8006c78:	603b      	str	r3, [r7, #0]
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c7e:	e0a9      	b.n	8006dd4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c86:	f000 80a5 	beq.w	8006dd4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c8a:	f7fa fd33 	bl	80016f4 <HAL_GetTick>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	1ad3      	subs	r3, r2, r3
 8006c94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d302      	bcc.n	8006ca0 <UART_WaitOnFlagUntilTimeout+0x32>
 8006c9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d140      	bne.n	8006d22 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ca8:	e853 3f00 	ldrex	r3, [r3]
 8006cac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cb0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006cb4:	667b      	str	r3, [r7, #100]	; 0x64
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	461a      	mov	r2, r3
 8006cbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cc0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006cc4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006cc6:	e841 2300 	strex	r3, r2, [r1]
 8006cca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006ccc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1e6      	bne.n	8006ca0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	3308      	adds	r3, #8
 8006cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cdc:	e853 3f00 	ldrex	r3, [r3]
 8006ce0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce4:	f023 0301 	bic.w	r3, r3, #1
 8006ce8:	663b      	str	r3, [r7, #96]	; 0x60
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	3308      	adds	r3, #8
 8006cf0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006cf2:	64ba      	str	r2, [r7, #72]	; 0x48
 8006cf4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006cf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cfa:	e841 2300 	strex	r3, r2, [r1]
 8006cfe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006d00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d1e5      	bne.n	8006cd2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2220      	movs	r2, #32
 8006d0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2220      	movs	r2, #32
 8006d12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e069      	b.n	8006df6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 0304 	and.w	r3, r3, #4
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d051      	beq.n	8006dd4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	69db      	ldr	r3, [r3, #28]
 8006d36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d3e:	d149      	bne.n	8006dd4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d48:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d52:	e853 3f00 	ldrex	r3, [r3]
 8006d56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	461a      	mov	r2, r3
 8006d66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d68:	637b      	str	r3, [r7, #52]	; 0x34
 8006d6a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d70:	e841 2300 	strex	r3, r2, [r1]
 8006d74:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d1e6      	bne.n	8006d4a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	3308      	adds	r3, #8
 8006d82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	e853 3f00 	ldrex	r3, [r3]
 8006d8a:	613b      	str	r3, [r7, #16]
   return(result);
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	f023 0301 	bic.w	r3, r3, #1
 8006d92:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	3308      	adds	r3, #8
 8006d9a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006d9c:	623a      	str	r2, [r7, #32]
 8006d9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da0:	69f9      	ldr	r1, [r7, #28]
 8006da2:	6a3a      	ldr	r2, [r7, #32]
 8006da4:	e841 2300 	strex	r3, r2, [r1]
 8006da8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d1e5      	bne.n	8006d7c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2220      	movs	r2, #32
 8006db4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2220      	movs	r2, #32
 8006dbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2220      	movs	r2, #32
 8006dc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	e010      	b.n	8006df6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	69da      	ldr	r2, [r3, #28]
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	4013      	ands	r3, r2
 8006dde:	68ba      	ldr	r2, [r7, #8]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	bf0c      	ite	eq
 8006de4:	2301      	moveq	r3, #1
 8006de6:	2300      	movne	r3, #0
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	461a      	mov	r2, r3
 8006dec:	79fb      	ldrb	r3, [r7, #7]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	f43f af46 	beq.w	8006c80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3770      	adds	r7, #112	; 0x70
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b085      	sub	sp, #20
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d101      	bne.n	8006e14 <HAL_UARTEx_DisableFifoMode+0x16>
 8006e10:	2302      	movs	r3, #2
 8006e12:	e027      	b.n	8006e64 <HAL_UARTEx_DisableFifoMode+0x66>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2224      	movs	r2, #36	; 0x24
 8006e20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f022 0201 	bic.w	r2, r2, #1
 8006e3a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006e42:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2220      	movs	r2, #32
 8006e56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3714      	adds	r7, #20
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d101      	bne.n	8006e88 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006e84:	2302      	movs	r3, #2
 8006e86:	e02d      	b.n	8006ee4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2224      	movs	r2, #36	; 0x24
 8006e94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f022 0201 	bic.w	r2, r2, #1
 8006eae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	683a      	ldr	r2, [r7, #0]
 8006ec0:	430a      	orrs	r2, r1
 8006ec2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 f84f 	bl	8006f68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2220      	movs	r2, #32
 8006ed6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006ee2:	2300      	movs	r3, #0
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3710      	adds	r7, #16
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d101      	bne.n	8006f04 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006f00:	2302      	movs	r3, #2
 8006f02:	e02d      	b.n	8006f60 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2224      	movs	r2, #36	; 0x24
 8006f10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f022 0201 	bic.w	r2, r2, #1
 8006f2a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	683a      	ldr	r2, [r7, #0]
 8006f3c:	430a      	orrs	r2, r1
 8006f3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 f811 	bl	8006f68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2220      	movs	r2, #32
 8006f52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3710      	adds	r7, #16
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b085      	sub	sp, #20
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d108      	bne.n	8006f8a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006f88:	e031      	b.n	8006fee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006f8a:	2310      	movs	r3, #16
 8006f8c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006f8e:	2310      	movs	r3, #16
 8006f90:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	0e5b      	lsrs	r3, r3, #25
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	f003 0307 	and.w	r3, r3, #7
 8006fa0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	0f5b      	lsrs	r3, r3, #29
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	f003 0307 	and.w	r3, r3, #7
 8006fb0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006fb2:	7bbb      	ldrb	r3, [r7, #14]
 8006fb4:	7b3a      	ldrb	r2, [r7, #12]
 8006fb6:	4911      	ldr	r1, [pc, #68]	; (8006ffc <UARTEx_SetNbDataToProcess+0x94>)
 8006fb8:	5c8a      	ldrb	r2, [r1, r2]
 8006fba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006fbe:	7b3a      	ldrb	r2, [r7, #12]
 8006fc0:	490f      	ldr	r1, [pc, #60]	; (8007000 <UARTEx_SetNbDataToProcess+0x98>)
 8006fc2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006fc4:	fb93 f3f2 	sdiv	r3, r3, r2
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006fd0:	7bfb      	ldrb	r3, [r7, #15]
 8006fd2:	7b7a      	ldrb	r2, [r7, #13]
 8006fd4:	4909      	ldr	r1, [pc, #36]	; (8006ffc <UARTEx_SetNbDataToProcess+0x94>)
 8006fd6:	5c8a      	ldrb	r2, [r1, r2]
 8006fd8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006fdc:	7b7a      	ldrb	r2, [r7, #13]
 8006fde:	4908      	ldr	r1, [pc, #32]	; (8007000 <UARTEx_SetNbDataToProcess+0x98>)
 8006fe0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006fe2:	fb93 f3f2 	sdiv	r3, r3, r2
 8006fe6:	b29a      	uxth	r2, r3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006fee:	bf00      	nop
 8006ff0:	3714      	adds	r7, #20
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop
 8006ffc:	0800a7ec 	.word	0x0800a7ec
 8007000:	0800a7f4 	.word	0x0800a7f4

08007004 <__NVIC_SetPriority>:
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	4603      	mov	r3, r0
 800700c:	6039      	str	r1, [r7, #0]
 800700e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007010:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007014:	2b00      	cmp	r3, #0
 8007016:	db0a      	blt.n	800702e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	b2da      	uxtb	r2, r3
 800701c:	490c      	ldr	r1, [pc, #48]	; (8007050 <__NVIC_SetPriority+0x4c>)
 800701e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007022:	0112      	lsls	r2, r2, #4
 8007024:	b2d2      	uxtb	r2, r2
 8007026:	440b      	add	r3, r1
 8007028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800702c:	e00a      	b.n	8007044 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	b2da      	uxtb	r2, r3
 8007032:	4908      	ldr	r1, [pc, #32]	; (8007054 <__NVIC_SetPriority+0x50>)
 8007034:	88fb      	ldrh	r3, [r7, #6]
 8007036:	f003 030f 	and.w	r3, r3, #15
 800703a:	3b04      	subs	r3, #4
 800703c:	0112      	lsls	r2, r2, #4
 800703e:	b2d2      	uxtb	r2, r2
 8007040:	440b      	add	r3, r1
 8007042:	761a      	strb	r2, [r3, #24]
}
 8007044:	bf00      	nop
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr
 8007050:	e000e100 	.word	0xe000e100
 8007054:	e000ed00 	.word	0xe000ed00

08007058 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007058:	b580      	push	{r7, lr}
 800705a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800705c:	4b05      	ldr	r3, [pc, #20]	; (8007074 <SysTick_Handler+0x1c>)
 800705e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007060:	f002 f95e 	bl	8009320 <xTaskGetSchedulerState>
 8007064:	4603      	mov	r3, r0
 8007066:	2b01      	cmp	r3, #1
 8007068:	d001      	beq.n	800706e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800706a:	f000 fd95 	bl	8007b98 <xPortSysTickHandler>
  }
}
 800706e:	bf00      	nop
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	e000e010 	.word	0xe000e010

08007078 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007078:	b580      	push	{r7, lr}
 800707a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800707c:	2100      	movs	r1, #0
 800707e:	f06f 0004 	mvn.w	r0, #4
 8007082:	f7ff ffbf 	bl	8007004 <__NVIC_SetPriority>
#endif
}
 8007086:	bf00      	nop
 8007088:	bd80      	pop	{r7, pc}
	...

0800708c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007092:	f3ef 8305 	mrs	r3, IPSR
 8007096:	603b      	str	r3, [r7, #0]
  return(result);
 8007098:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800709a:	2b00      	cmp	r3, #0
 800709c:	d003      	beq.n	80070a6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800709e:	f06f 0305 	mvn.w	r3, #5
 80070a2:	607b      	str	r3, [r7, #4]
 80070a4:	e00c      	b.n	80070c0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80070a6:	4b0a      	ldr	r3, [pc, #40]	; (80070d0 <osKernelInitialize+0x44>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d105      	bne.n	80070ba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80070ae:	4b08      	ldr	r3, [pc, #32]	; (80070d0 <osKernelInitialize+0x44>)
 80070b0:	2201      	movs	r2, #1
 80070b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80070b4:	2300      	movs	r3, #0
 80070b6:	607b      	str	r3, [r7, #4]
 80070b8:	e002      	b.n	80070c0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80070ba:	f04f 33ff 	mov.w	r3, #4294967295
 80070be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80070c0:	687b      	ldr	r3, [r7, #4]
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	370c      	adds	r7, #12
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	2400033c 	.word	0x2400033c

080070d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070da:	f3ef 8305 	mrs	r3, IPSR
 80070de:	603b      	str	r3, [r7, #0]
  return(result);
 80070e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d003      	beq.n	80070ee <osKernelStart+0x1a>
    stat = osErrorISR;
 80070e6:	f06f 0305 	mvn.w	r3, #5
 80070ea:	607b      	str	r3, [r7, #4]
 80070ec:	e010      	b.n	8007110 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80070ee:	4b0b      	ldr	r3, [pc, #44]	; (800711c <osKernelStart+0x48>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d109      	bne.n	800710a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80070f6:	f7ff ffbf 	bl	8007078 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80070fa:	4b08      	ldr	r3, [pc, #32]	; (800711c <osKernelStart+0x48>)
 80070fc:	2202      	movs	r2, #2
 80070fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007100:	f001 fcb2 	bl	8008a68 <vTaskStartScheduler>
      stat = osOK;
 8007104:	2300      	movs	r3, #0
 8007106:	607b      	str	r3, [r7, #4]
 8007108:	e002      	b.n	8007110 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800710a:	f04f 33ff 	mov.w	r3, #4294967295
 800710e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007110:	687b      	ldr	r3, [r7, #4]
}
 8007112:	4618      	mov	r0, r3
 8007114:	3708      	adds	r7, #8
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	2400033c 	.word	0x2400033c

08007120 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007120:	b580      	push	{r7, lr}
 8007122:	b08e      	sub	sp, #56	; 0x38
 8007124:	af04      	add	r7, sp, #16
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800712c:	2300      	movs	r3, #0
 800712e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007130:	f3ef 8305 	mrs	r3, IPSR
 8007134:	617b      	str	r3, [r7, #20]
  return(result);
 8007136:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007138:	2b00      	cmp	r3, #0
 800713a:	d17e      	bne.n	800723a <osThreadNew+0x11a>
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d07b      	beq.n	800723a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007142:	2380      	movs	r3, #128	; 0x80
 8007144:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007146:	2318      	movs	r3, #24
 8007148:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800714a:	2300      	movs	r3, #0
 800714c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800714e:	f04f 33ff 	mov.w	r3, #4294967295
 8007152:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d045      	beq.n	80071e6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d002      	beq.n	8007168 <osThreadNew+0x48>
        name = attr->name;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d002      	beq.n	8007176 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	699b      	ldr	r3, [r3, #24]
 8007174:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d008      	beq.n	800718e <osThreadNew+0x6e>
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	2b38      	cmp	r3, #56	; 0x38
 8007180:	d805      	bhi.n	800718e <osThreadNew+0x6e>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	f003 0301 	and.w	r3, r3, #1
 800718a:	2b00      	cmp	r3, #0
 800718c:	d001      	beq.n	8007192 <osThreadNew+0x72>
        return (NULL);
 800718e:	2300      	movs	r3, #0
 8007190:	e054      	b.n	800723c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d003      	beq.n	80071a2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	695b      	ldr	r3, [r3, #20]
 800719e:	089b      	lsrs	r3, r3, #2
 80071a0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00e      	beq.n	80071c8 <osThreadNew+0xa8>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	2bbb      	cmp	r3, #187	; 0xbb
 80071b0:	d90a      	bls.n	80071c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d006      	beq.n	80071c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	695b      	ldr	r3, [r3, #20]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d002      	beq.n	80071c8 <osThreadNew+0xa8>
        mem = 1;
 80071c2:	2301      	movs	r3, #1
 80071c4:	61bb      	str	r3, [r7, #24]
 80071c6:	e010      	b.n	80071ea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d10c      	bne.n	80071ea <osThreadNew+0xca>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d108      	bne.n	80071ea <osThreadNew+0xca>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	691b      	ldr	r3, [r3, #16]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d104      	bne.n	80071ea <osThreadNew+0xca>
          mem = 0;
 80071e0:	2300      	movs	r3, #0
 80071e2:	61bb      	str	r3, [r7, #24]
 80071e4:	e001      	b.n	80071ea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80071e6:	2300      	movs	r3, #0
 80071e8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d110      	bne.n	8007212 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80071f8:	9202      	str	r2, [sp, #8]
 80071fa:	9301      	str	r3, [sp, #4]
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	9300      	str	r3, [sp, #0]
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	6a3a      	ldr	r2, [r7, #32]
 8007204:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007206:	68f8      	ldr	r0, [r7, #12]
 8007208:	f001 fa42 	bl	8008690 <xTaskCreateStatic>
 800720c:	4603      	mov	r3, r0
 800720e:	613b      	str	r3, [r7, #16]
 8007210:	e013      	b.n	800723a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d110      	bne.n	800723a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007218:	6a3b      	ldr	r3, [r7, #32]
 800721a:	b29a      	uxth	r2, r3
 800721c:	f107 0310 	add.w	r3, r7, #16
 8007220:	9301      	str	r3, [sp, #4]
 8007222:	69fb      	ldr	r3, [r7, #28]
 8007224:	9300      	str	r3, [sp, #0]
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800722a:	68f8      	ldr	r0, [r7, #12]
 800722c:	f001 fa8d 	bl	800874a <xTaskCreate>
 8007230:	4603      	mov	r3, r0
 8007232:	2b01      	cmp	r3, #1
 8007234:	d001      	beq.n	800723a <osThreadNew+0x11a>
            hTask = NULL;
 8007236:	2300      	movs	r3, #0
 8007238:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800723a:	693b      	ldr	r3, [r7, #16]
}
 800723c:	4618      	mov	r0, r3
 800723e:	3728      	adds	r7, #40	; 0x28
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800724c:	f3ef 8305 	mrs	r3, IPSR
 8007250:	60bb      	str	r3, [r7, #8]
  return(result);
 8007252:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007254:	2b00      	cmp	r3, #0
 8007256:	d003      	beq.n	8007260 <osDelay+0x1c>
    stat = osErrorISR;
 8007258:	f06f 0305 	mvn.w	r3, #5
 800725c:	60fb      	str	r3, [r7, #12]
 800725e:	e007      	b.n	8007270 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007260:	2300      	movs	r3, #0
 8007262:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d002      	beq.n	8007270 <osDelay+0x2c>
      vTaskDelay(ticks);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f001 fbc8 	bl	8008a00 <vTaskDelay>
    }
  }

  return (stat);
 8007270:	68fb      	ldr	r3, [r7, #12]
}
 8007272:	4618      	mov	r0, r3
 8007274:	3710      	adds	r7, #16
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
	...

0800727c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	4a07      	ldr	r2, [pc, #28]	; (80072a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800728c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	4a06      	ldr	r2, [pc, #24]	; (80072ac <vApplicationGetIdleTaskMemory+0x30>)
 8007292:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2280      	movs	r2, #128	; 0x80
 8007298:	601a      	str	r2, [r3, #0]
}
 800729a:	bf00      	nop
 800729c:	3714      	adds	r7, #20
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr
 80072a6:	bf00      	nop
 80072a8:	24000340 	.word	0x24000340
 80072ac:	240003fc 	.word	0x240003fc

080072b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	4a07      	ldr	r2, [pc, #28]	; (80072dc <vApplicationGetTimerTaskMemory+0x2c>)
 80072c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	4a06      	ldr	r2, [pc, #24]	; (80072e0 <vApplicationGetTimerTaskMemory+0x30>)
 80072c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80072ce:	601a      	str	r2, [r3, #0]
}
 80072d0:	bf00      	nop
 80072d2:	3714      	adds	r7, #20
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr
 80072dc:	240005fc 	.word	0x240005fc
 80072e0:	240006b8 	.word	0x240006b8

080072e4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b08a      	sub	sp, #40	; 0x28
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80072ec:	2300      	movs	r3, #0
 80072ee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80072f0:	f001 fc2a 	bl	8008b48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80072f4:	4b5b      	ldr	r3, [pc, #364]	; (8007464 <pvPortMalloc+0x180>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d101      	bne.n	8007300 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80072fc:	f000 f920 	bl	8007540 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007300:	4b59      	ldr	r3, [pc, #356]	; (8007468 <pvPortMalloc+0x184>)
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4013      	ands	r3, r2
 8007308:	2b00      	cmp	r3, #0
 800730a:	f040 8093 	bne.w	8007434 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d01d      	beq.n	8007350 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007314:	2208      	movs	r2, #8
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4413      	add	r3, r2
 800731a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f003 0307 	and.w	r3, r3, #7
 8007322:	2b00      	cmp	r3, #0
 8007324:	d014      	beq.n	8007350 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f023 0307 	bic.w	r3, r3, #7
 800732c:	3308      	adds	r3, #8
 800732e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f003 0307 	and.w	r3, r3, #7
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00a      	beq.n	8007350 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800733a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733e:	f383 8811 	msr	BASEPRI, r3
 8007342:	f3bf 8f6f 	isb	sy
 8007346:	f3bf 8f4f 	dsb	sy
 800734a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800734c:	bf00      	nop
 800734e:	e7fe      	b.n	800734e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d06e      	beq.n	8007434 <pvPortMalloc+0x150>
 8007356:	4b45      	ldr	r3, [pc, #276]	; (800746c <pvPortMalloc+0x188>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	429a      	cmp	r2, r3
 800735e:	d869      	bhi.n	8007434 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007360:	4b43      	ldr	r3, [pc, #268]	; (8007470 <pvPortMalloc+0x18c>)
 8007362:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007364:	4b42      	ldr	r3, [pc, #264]	; (8007470 <pvPortMalloc+0x18c>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800736a:	e004      	b.n	8007376 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800736c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	429a      	cmp	r2, r3
 800737e:	d903      	bls.n	8007388 <pvPortMalloc+0xa4>
 8007380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d1f1      	bne.n	800736c <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007388:	4b36      	ldr	r3, [pc, #216]	; (8007464 <pvPortMalloc+0x180>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800738e:	429a      	cmp	r2, r3
 8007390:	d050      	beq.n	8007434 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007392:	6a3b      	ldr	r3, [r7, #32]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2208      	movs	r2, #8
 8007398:	4413      	add	r3, r2
 800739a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800739c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	6a3b      	ldr	r3, [r7, #32]
 80073a2:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80073a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a6:	685a      	ldr	r2, [r3, #4]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	1ad2      	subs	r2, r2, r3
 80073ac:	2308      	movs	r3, #8
 80073ae:	005b      	lsls	r3, r3, #1
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d91f      	bls.n	80073f4 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80073b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4413      	add	r3, r2
 80073ba:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073bc:	69bb      	ldr	r3, [r7, #24]
 80073be:	f003 0307 	and.w	r3, r3, #7
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00a      	beq.n	80073dc <pvPortMalloc+0xf8>
	__asm volatile
 80073c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ca:	f383 8811 	msr	BASEPRI, r3
 80073ce:	f3bf 8f6f 	isb	sy
 80073d2:	f3bf 8f4f 	dsb	sy
 80073d6:	613b      	str	r3, [r7, #16]
}
 80073d8:	bf00      	nop
 80073da:	e7fe      	b.n	80073da <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80073dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073de:	685a      	ldr	r2, [r3, #4]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	1ad2      	subs	r2, r2, r3
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80073e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80073ee:	69b8      	ldr	r0, [r7, #24]
 80073f0:	f000 f908 	bl	8007604 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80073f4:	4b1d      	ldr	r3, [pc, #116]	; (800746c <pvPortMalloc+0x188>)
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	1ad3      	subs	r3, r2, r3
 80073fe:	4a1b      	ldr	r2, [pc, #108]	; (800746c <pvPortMalloc+0x188>)
 8007400:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007402:	4b1a      	ldr	r3, [pc, #104]	; (800746c <pvPortMalloc+0x188>)
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	4b1b      	ldr	r3, [pc, #108]	; (8007474 <pvPortMalloc+0x190>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	429a      	cmp	r2, r3
 800740c:	d203      	bcs.n	8007416 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800740e:	4b17      	ldr	r3, [pc, #92]	; (800746c <pvPortMalloc+0x188>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a18      	ldr	r2, [pc, #96]	; (8007474 <pvPortMalloc+0x190>)
 8007414:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007418:	685a      	ldr	r2, [r3, #4]
 800741a:	4b13      	ldr	r3, [pc, #76]	; (8007468 <pvPortMalloc+0x184>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	431a      	orrs	r2, r3
 8007420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007422:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007426:	2200      	movs	r2, #0
 8007428:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800742a:	4b13      	ldr	r3, [pc, #76]	; (8007478 <pvPortMalloc+0x194>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	3301      	adds	r3, #1
 8007430:	4a11      	ldr	r2, [pc, #68]	; (8007478 <pvPortMalloc+0x194>)
 8007432:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007434:	f001 fb96 	bl	8008b64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	f003 0307 	and.w	r3, r3, #7
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00a      	beq.n	8007458 <pvPortMalloc+0x174>
	__asm volatile
 8007442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007446:	f383 8811 	msr	BASEPRI, r3
 800744a:	f3bf 8f6f 	isb	sy
 800744e:	f3bf 8f4f 	dsb	sy
 8007452:	60fb      	str	r3, [r7, #12]
}
 8007454:	bf00      	nop
 8007456:	e7fe      	b.n	8007456 <pvPortMalloc+0x172>
	return pvReturn;
 8007458:	69fb      	ldr	r3, [r7, #28]
}
 800745a:	4618      	mov	r0, r3
 800745c:	3728      	adds	r7, #40	; 0x28
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	240046c0 	.word	0x240046c0
 8007468:	240046d4 	.word	0x240046d4
 800746c:	240046c4 	.word	0x240046c4
 8007470:	240046b8 	.word	0x240046b8
 8007474:	240046c8 	.word	0x240046c8
 8007478:	240046cc 	.word	0x240046cc

0800747c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b086      	sub	sp, #24
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d04d      	beq.n	800752a <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800748e:	2308      	movs	r3, #8
 8007490:	425b      	negs	r3, r3
 8007492:	697a      	ldr	r2, [r7, #20]
 8007494:	4413      	add	r3, r2
 8007496:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	685a      	ldr	r2, [r3, #4]
 80074a0:	4b24      	ldr	r3, [pc, #144]	; (8007534 <vPortFree+0xb8>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4013      	ands	r3, r2
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d10a      	bne.n	80074c0 <vPortFree+0x44>
	__asm volatile
 80074aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ae:	f383 8811 	msr	BASEPRI, r3
 80074b2:	f3bf 8f6f 	isb	sy
 80074b6:	f3bf 8f4f 	dsb	sy
 80074ba:	60fb      	str	r3, [r7, #12]
}
 80074bc:	bf00      	nop
 80074be:	e7fe      	b.n	80074be <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00a      	beq.n	80074de <vPortFree+0x62>
	__asm volatile
 80074c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074cc:	f383 8811 	msr	BASEPRI, r3
 80074d0:	f3bf 8f6f 	isb	sy
 80074d4:	f3bf 8f4f 	dsb	sy
 80074d8:	60bb      	str	r3, [r7, #8]
}
 80074da:	bf00      	nop
 80074dc:	e7fe      	b.n	80074dc <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	685a      	ldr	r2, [r3, #4]
 80074e2:	4b14      	ldr	r3, [pc, #80]	; (8007534 <vPortFree+0xb8>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4013      	ands	r3, r2
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d01e      	beq.n	800752a <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d11a      	bne.n	800752a <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	685a      	ldr	r2, [r3, #4]
 80074f8:	4b0e      	ldr	r3, [pc, #56]	; (8007534 <vPortFree+0xb8>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	43db      	mvns	r3, r3
 80074fe:	401a      	ands	r2, r3
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007504:	f001 fb20 	bl	8008b48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	685a      	ldr	r2, [r3, #4]
 800750c:	4b0a      	ldr	r3, [pc, #40]	; (8007538 <vPortFree+0xbc>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4413      	add	r3, r2
 8007512:	4a09      	ldr	r2, [pc, #36]	; (8007538 <vPortFree+0xbc>)
 8007514:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007516:	6938      	ldr	r0, [r7, #16]
 8007518:	f000 f874 	bl	8007604 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800751c:	4b07      	ldr	r3, [pc, #28]	; (800753c <vPortFree+0xc0>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	3301      	adds	r3, #1
 8007522:	4a06      	ldr	r2, [pc, #24]	; (800753c <vPortFree+0xc0>)
 8007524:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007526:	f001 fb1d 	bl	8008b64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800752a:	bf00      	nop
 800752c:	3718      	adds	r7, #24
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	240046d4 	.word	0x240046d4
 8007538:	240046c4 	.word	0x240046c4
 800753c:	240046d0 	.word	0x240046d0

08007540 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007540:	b480      	push	{r7}
 8007542:	b085      	sub	sp, #20
 8007544:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007546:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800754a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800754c:	4b27      	ldr	r3, [pc, #156]	; (80075ec <prvHeapInit+0xac>)
 800754e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f003 0307 	and.w	r3, r3, #7
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00c      	beq.n	8007574 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	3307      	adds	r3, #7
 800755e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f023 0307 	bic.w	r3, r3, #7
 8007566:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007568:	68ba      	ldr	r2, [r7, #8]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	4a1f      	ldr	r2, [pc, #124]	; (80075ec <prvHeapInit+0xac>)
 8007570:	4413      	add	r3, r2
 8007572:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007578:	4a1d      	ldr	r2, [pc, #116]	; (80075f0 <prvHeapInit+0xb0>)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800757e:	4b1c      	ldr	r3, [pc, #112]	; (80075f0 <prvHeapInit+0xb0>)
 8007580:	2200      	movs	r2, #0
 8007582:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	68ba      	ldr	r2, [r7, #8]
 8007588:	4413      	add	r3, r2
 800758a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800758c:	2208      	movs	r2, #8
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	1a9b      	subs	r3, r3, r2
 8007592:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f023 0307 	bic.w	r3, r3, #7
 800759a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	4a15      	ldr	r2, [pc, #84]	; (80075f4 <prvHeapInit+0xb4>)
 80075a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80075a2:	4b14      	ldr	r3, [pc, #80]	; (80075f4 <prvHeapInit+0xb4>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2200      	movs	r2, #0
 80075a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80075aa:	4b12      	ldr	r3, [pc, #72]	; (80075f4 <prvHeapInit+0xb4>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	2200      	movs	r2, #0
 80075b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	68fa      	ldr	r2, [r7, #12]
 80075ba:	1ad2      	subs	r2, r2, r3
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80075c0:	4b0c      	ldr	r3, [pc, #48]	; (80075f4 <prvHeapInit+0xb4>)
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	4a0a      	ldr	r2, [pc, #40]	; (80075f8 <prvHeapInit+0xb8>)
 80075ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	4a09      	ldr	r2, [pc, #36]	; (80075fc <prvHeapInit+0xbc>)
 80075d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80075d8:	4b09      	ldr	r3, [pc, #36]	; (8007600 <prvHeapInit+0xc0>)
 80075da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80075de:	601a      	str	r2, [r3, #0]
}
 80075e0:	bf00      	nop
 80075e2:	3714      	adds	r7, #20
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr
 80075ec:	24000ab8 	.word	0x24000ab8
 80075f0:	240046b8 	.word	0x240046b8
 80075f4:	240046c0 	.word	0x240046c0
 80075f8:	240046c8 	.word	0x240046c8
 80075fc:	240046c4 	.word	0x240046c4
 8007600:	240046d4 	.word	0x240046d4

08007604 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007604:	b480      	push	{r7}
 8007606:	b085      	sub	sp, #20
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800760c:	4b28      	ldr	r3, [pc, #160]	; (80076b0 <prvInsertBlockIntoFreeList+0xac>)
 800760e:	60fb      	str	r3, [r7, #12]
 8007610:	e002      	b.n	8007618 <prvInsertBlockIntoFreeList+0x14>
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	60fb      	str	r3, [r7, #12]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	429a      	cmp	r2, r3
 8007620:	d8f7      	bhi.n	8007612 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	68ba      	ldr	r2, [r7, #8]
 800762c:	4413      	add	r3, r2
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	429a      	cmp	r2, r3
 8007632:	d108      	bne.n	8007646 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	685a      	ldr	r2, [r3, #4]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	441a      	add	r2, r3
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	68ba      	ldr	r2, [r7, #8]
 8007650:	441a      	add	r2, r3
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	429a      	cmp	r2, r3
 8007658:	d118      	bne.n	800768c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	4b15      	ldr	r3, [pc, #84]	; (80076b4 <prvInsertBlockIntoFreeList+0xb0>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	429a      	cmp	r2, r3
 8007664:	d00d      	beq.n	8007682 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	685a      	ldr	r2, [r3, #4]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	441a      	add	r2, r3
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	601a      	str	r2, [r3, #0]
 8007680:	e008      	b.n	8007694 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007682:	4b0c      	ldr	r3, [pc, #48]	; (80076b4 <prvInsertBlockIntoFreeList+0xb0>)
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	601a      	str	r2, [r3, #0]
 800768a:	e003      	b.n	8007694 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007694:	68fa      	ldr	r2, [r7, #12]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	429a      	cmp	r2, r3
 800769a:	d002      	beq.n	80076a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076a2:	bf00      	nop
 80076a4:	3714      	adds	r7, #20
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	240046b8 	.word	0x240046b8
 80076b4:	240046c0 	.word	0x240046c0

080076b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f103 0208 	add.w	r2, r3, #8
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f04f 32ff 	mov.w	r2, #4294967295
 80076d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f103 0208 	add.w	r2, r3, #8
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f103 0208 	add.w	r2, r3, #8
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80076ec:	bf00      	nop
 80076ee:	370c      	adds	r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007706:	bf00      	nop
 8007708:	370c      	adds	r7, #12
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr

08007712 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007712:	b480      	push	{r7}
 8007714:	b085      	sub	sp, #20
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
 800771a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	68fa      	ldr	r2, [r7, #12]
 8007726:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	689a      	ldr	r2, [r3, #8]
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	683a      	ldr	r2, [r7, #0]
 8007736:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	683a      	ldr	r2, [r7, #0]
 800773c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	1c5a      	adds	r2, r3, #1
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	601a      	str	r2, [r3, #0]
}
 800774e:	bf00      	nop
 8007750:	3714      	adds	r7, #20
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr

0800775a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800775a:	b480      	push	{r7}
 800775c:	b085      	sub	sp, #20
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
 8007762:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007770:	d103      	bne.n	800777a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	60fb      	str	r3, [r7, #12]
 8007778:	e00c      	b.n	8007794 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	3308      	adds	r3, #8
 800777e:	60fb      	str	r3, [r7, #12]
 8007780:	e002      	b.n	8007788 <vListInsert+0x2e>
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	60fb      	str	r3, [r7, #12]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68ba      	ldr	r2, [r7, #8]
 8007790:	429a      	cmp	r2, r3
 8007792:	d2f6      	bcs.n	8007782 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	685a      	ldr	r2, [r3, #4]
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	683a      	ldr	r2, [r7, #0]
 80077a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	68fa      	ldr	r2, [r7, #12]
 80077a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	683a      	ldr	r2, [r7, #0]
 80077ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	1c5a      	adds	r2, r3, #1
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	601a      	str	r2, [r3, #0]
}
 80077c0:	bf00      	nop
 80077c2:	3714      	adds	r7, #20
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80077cc:	b480      	push	{r7}
 80077ce:	b085      	sub	sp, #20
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	691b      	ldr	r3, [r3, #16]
 80077d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	6892      	ldr	r2, [r2, #8]
 80077e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	6852      	ldr	r2, [r2, #4]
 80077ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d103      	bne.n	8007800 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	689a      	ldr	r2, [r3, #8]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	1e5a      	subs	r2, r3, #1
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
}
 8007814:	4618      	mov	r0, r3
 8007816:	3714      	adds	r7, #20
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007820:	b480      	push	{r7}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	3b04      	subs	r3, #4
 8007830:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007838:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	3b04      	subs	r3, #4
 800783e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	f023 0201 	bic.w	r2, r3, #1
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	3b04      	subs	r3, #4
 800784e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007850:	4a0c      	ldr	r2, [pc, #48]	; (8007884 <pxPortInitialiseStack+0x64>)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	3b14      	subs	r3, #20
 800785a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	3b04      	subs	r3, #4
 8007866:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f06f 0202 	mvn.w	r2, #2
 800786e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	3b20      	subs	r3, #32
 8007874:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007876:	68fb      	ldr	r3, [r7, #12]
}
 8007878:	4618      	mov	r0, r3
 800787a:	3714      	adds	r7, #20
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr
 8007884:	08007889 	.word	0x08007889

08007888 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007888:	b480      	push	{r7}
 800788a:	b085      	sub	sp, #20
 800788c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800788e:	2300      	movs	r3, #0
 8007890:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007892:	4b12      	ldr	r3, [pc, #72]	; (80078dc <prvTaskExitError+0x54>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800789a:	d00a      	beq.n	80078b2 <prvTaskExitError+0x2a>
	__asm volatile
 800789c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a0:	f383 8811 	msr	BASEPRI, r3
 80078a4:	f3bf 8f6f 	isb	sy
 80078a8:	f3bf 8f4f 	dsb	sy
 80078ac:	60fb      	str	r3, [r7, #12]
}
 80078ae:	bf00      	nop
 80078b0:	e7fe      	b.n	80078b0 <prvTaskExitError+0x28>
	__asm volatile
 80078b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b6:	f383 8811 	msr	BASEPRI, r3
 80078ba:	f3bf 8f6f 	isb	sy
 80078be:	f3bf 8f4f 	dsb	sy
 80078c2:	60bb      	str	r3, [r7, #8]
}
 80078c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80078c6:	bf00      	nop
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d0fc      	beq.n	80078c8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80078ce:	bf00      	nop
 80078d0:	bf00      	nop
 80078d2:	3714      	adds	r7, #20
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr
 80078dc:	24000010 	.word	0x24000010

080078e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80078e0:	4b07      	ldr	r3, [pc, #28]	; (8007900 <pxCurrentTCBConst2>)
 80078e2:	6819      	ldr	r1, [r3, #0]
 80078e4:	6808      	ldr	r0, [r1, #0]
 80078e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ea:	f380 8809 	msr	PSP, r0
 80078ee:	f3bf 8f6f 	isb	sy
 80078f2:	f04f 0000 	mov.w	r0, #0
 80078f6:	f380 8811 	msr	BASEPRI, r0
 80078fa:	4770      	bx	lr
 80078fc:	f3af 8000 	nop.w

08007900 <pxCurrentTCBConst2>:
 8007900:	24004720 	.word	0x24004720
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007904:	bf00      	nop
 8007906:	bf00      	nop

08007908 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007908:	4808      	ldr	r0, [pc, #32]	; (800792c <prvPortStartFirstTask+0x24>)
 800790a:	6800      	ldr	r0, [r0, #0]
 800790c:	6800      	ldr	r0, [r0, #0]
 800790e:	f380 8808 	msr	MSP, r0
 8007912:	f04f 0000 	mov.w	r0, #0
 8007916:	f380 8814 	msr	CONTROL, r0
 800791a:	b662      	cpsie	i
 800791c:	b661      	cpsie	f
 800791e:	f3bf 8f4f 	dsb	sy
 8007922:	f3bf 8f6f 	isb	sy
 8007926:	df00      	svc	0
 8007928:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800792a:	bf00      	nop
 800792c:	e000ed08 	.word	0xe000ed08

08007930 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b086      	sub	sp, #24
 8007934:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007936:	4b46      	ldr	r3, [pc, #280]	; (8007a50 <xPortStartScheduler+0x120>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a46      	ldr	r2, [pc, #280]	; (8007a54 <xPortStartScheduler+0x124>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d10a      	bne.n	8007956 <xPortStartScheduler+0x26>
	__asm volatile
 8007940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007944:	f383 8811 	msr	BASEPRI, r3
 8007948:	f3bf 8f6f 	isb	sy
 800794c:	f3bf 8f4f 	dsb	sy
 8007950:	613b      	str	r3, [r7, #16]
}
 8007952:	bf00      	nop
 8007954:	e7fe      	b.n	8007954 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007956:	4b3e      	ldr	r3, [pc, #248]	; (8007a50 <xPortStartScheduler+0x120>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a3f      	ldr	r2, [pc, #252]	; (8007a58 <xPortStartScheduler+0x128>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d10a      	bne.n	8007976 <xPortStartScheduler+0x46>
	__asm volatile
 8007960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007964:	f383 8811 	msr	BASEPRI, r3
 8007968:	f3bf 8f6f 	isb	sy
 800796c:	f3bf 8f4f 	dsb	sy
 8007970:	60fb      	str	r3, [r7, #12]
}
 8007972:	bf00      	nop
 8007974:	e7fe      	b.n	8007974 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007976:	4b39      	ldr	r3, [pc, #228]	; (8007a5c <xPortStartScheduler+0x12c>)
 8007978:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	b2db      	uxtb	r3, r3
 8007980:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	22ff      	movs	r2, #255	; 0xff
 8007986:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	b2db      	uxtb	r3, r3
 800798e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007990:	78fb      	ldrb	r3, [r7, #3]
 8007992:	b2db      	uxtb	r3, r3
 8007994:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007998:	b2da      	uxtb	r2, r3
 800799a:	4b31      	ldr	r3, [pc, #196]	; (8007a60 <xPortStartScheduler+0x130>)
 800799c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800799e:	4b31      	ldr	r3, [pc, #196]	; (8007a64 <xPortStartScheduler+0x134>)
 80079a0:	2207      	movs	r2, #7
 80079a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079a4:	e009      	b.n	80079ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80079a6:	4b2f      	ldr	r3, [pc, #188]	; (8007a64 <xPortStartScheduler+0x134>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	3b01      	subs	r3, #1
 80079ac:	4a2d      	ldr	r2, [pc, #180]	; (8007a64 <xPortStartScheduler+0x134>)
 80079ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80079b0:	78fb      	ldrb	r3, [r7, #3]
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	005b      	lsls	r3, r3, #1
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079ba:	78fb      	ldrb	r3, [r7, #3]
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079c2:	2b80      	cmp	r3, #128	; 0x80
 80079c4:	d0ef      	beq.n	80079a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80079c6:	4b27      	ldr	r3, [pc, #156]	; (8007a64 <xPortStartScheduler+0x134>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f1c3 0307 	rsb	r3, r3, #7
 80079ce:	2b04      	cmp	r3, #4
 80079d0:	d00a      	beq.n	80079e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80079d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d6:	f383 8811 	msr	BASEPRI, r3
 80079da:	f3bf 8f6f 	isb	sy
 80079de:	f3bf 8f4f 	dsb	sy
 80079e2:	60bb      	str	r3, [r7, #8]
}
 80079e4:	bf00      	nop
 80079e6:	e7fe      	b.n	80079e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80079e8:	4b1e      	ldr	r3, [pc, #120]	; (8007a64 <xPortStartScheduler+0x134>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	021b      	lsls	r3, r3, #8
 80079ee:	4a1d      	ldr	r2, [pc, #116]	; (8007a64 <xPortStartScheduler+0x134>)
 80079f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80079f2:	4b1c      	ldr	r3, [pc, #112]	; (8007a64 <xPortStartScheduler+0x134>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80079fa:	4a1a      	ldr	r2, [pc, #104]	; (8007a64 <xPortStartScheduler+0x134>)
 80079fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	b2da      	uxtb	r2, r3
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007a06:	4b18      	ldr	r3, [pc, #96]	; (8007a68 <xPortStartScheduler+0x138>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a17      	ldr	r2, [pc, #92]	; (8007a68 <xPortStartScheduler+0x138>)
 8007a0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007a12:	4b15      	ldr	r3, [pc, #84]	; (8007a68 <xPortStartScheduler+0x138>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a14      	ldr	r2, [pc, #80]	; (8007a68 <xPortStartScheduler+0x138>)
 8007a18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007a1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007a1e:	f000 f8dd 	bl	8007bdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007a22:	4b12      	ldr	r3, [pc, #72]	; (8007a6c <xPortStartScheduler+0x13c>)
 8007a24:	2200      	movs	r2, #0
 8007a26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007a28:	f000 f8fc 	bl	8007c24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007a2c:	4b10      	ldr	r3, [pc, #64]	; (8007a70 <xPortStartScheduler+0x140>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a0f      	ldr	r2, [pc, #60]	; (8007a70 <xPortStartScheduler+0x140>)
 8007a32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007a36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007a38:	f7ff ff66 	bl	8007908 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007a3c:	f001 f9fa 	bl	8008e34 <vTaskSwitchContext>
	prvTaskExitError();
 8007a40:	f7ff ff22 	bl	8007888 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3718      	adds	r7, #24
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	e000ed00 	.word	0xe000ed00
 8007a54:	410fc271 	.word	0x410fc271
 8007a58:	410fc270 	.word	0x410fc270
 8007a5c:	e000e400 	.word	0xe000e400
 8007a60:	240046d8 	.word	0x240046d8
 8007a64:	240046dc 	.word	0x240046dc
 8007a68:	e000ed20 	.word	0xe000ed20
 8007a6c:	24000010 	.word	0x24000010
 8007a70:	e000ef34 	.word	0xe000ef34

08007a74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
	__asm volatile
 8007a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7e:	f383 8811 	msr	BASEPRI, r3
 8007a82:	f3bf 8f6f 	isb	sy
 8007a86:	f3bf 8f4f 	dsb	sy
 8007a8a:	607b      	str	r3, [r7, #4]
}
 8007a8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007a8e:	4b0f      	ldr	r3, [pc, #60]	; (8007acc <vPortEnterCritical+0x58>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	3301      	adds	r3, #1
 8007a94:	4a0d      	ldr	r2, [pc, #52]	; (8007acc <vPortEnterCritical+0x58>)
 8007a96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007a98:	4b0c      	ldr	r3, [pc, #48]	; (8007acc <vPortEnterCritical+0x58>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d10f      	bne.n	8007ac0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007aa0:	4b0b      	ldr	r3, [pc, #44]	; (8007ad0 <vPortEnterCritical+0x5c>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d00a      	beq.n	8007ac0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aae:	f383 8811 	msr	BASEPRI, r3
 8007ab2:	f3bf 8f6f 	isb	sy
 8007ab6:	f3bf 8f4f 	dsb	sy
 8007aba:	603b      	str	r3, [r7, #0]
}
 8007abc:	bf00      	nop
 8007abe:	e7fe      	b.n	8007abe <vPortEnterCritical+0x4a>
	}
}
 8007ac0:	bf00      	nop
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr
 8007acc:	24000010 	.word	0x24000010
 8007ad0:	e000ed04 	.word	0xe000ed04

08007ad4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007ada:	4b12      	ldr	r3, [pc, #72]	; (8007b24 <vPortExitCritical+0x50>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d10a      	bne.n	8007af8 <vPortExitCritical+0x24>
	__asm volatile
 8007ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae6:	f383 8811 	msr	BASEPRI, r3
 8007aea:	f3bf 8f6f 	isb	sy
 8007aee:	f3bf 8f4f 	dsb	sy
 8007af2:	607b      	str	r3, [r7, #4]
}
 8007af4:	bf00      	nop
 8007af6:	e7fe      	b.n	8007af6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007af8:	4b0a      	ldr	r3, [pc, #40]	; (8007b24 <vPortExitCritical+0x50>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	3b01      	subs	r3, #1
 8007afe:	4a09      	ldr	r2, [pc, #36]	; (8007b24 <vPortExitCritical+0x50>)
 8007b00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007b02:	4b08      	ldr	r3, [pc, #32]	; (8007b24 <vPortExitCritical+0x50>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d105      	bne.n	8007b16 <vPortExitCritical+0x42>
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007b14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007b16:	bf00      	nop
 8007b18:	370c      	adds	r7, #12
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	24000010 	.word	0x24000010
	...

08007b30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007b30:	f3ef 8009 	mrs	r0, PSP
 8007b34:	f3bf 8f6f 	isb	sy
 8007b38:	4b15      	ldr	r3, [pc, #84]	; (8007b90 <pxCurrentTCBConst>)
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	f01e 0f10 	tst.w	lr, #16
 8007b40:	bf08      	it	eq
 8007b42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007b46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b4a:	6010      	str	r0, [r2, #0]
 8007b4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007b50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007b54:	f380 8811 	msr	BASEPRI, r0
 8007b58:	f3bf 8f4f 	dsb	sy
 8007b5c:	f3bf 8f6f 	isb	sy
 8007b60:	f001 f968 	bl	8008e34 <vTaskSwitchContext>
 8007b64:	f04f 0000 	mov.w	r0, #0
 8007b68:	f380 8811 	msr	BASEPRI, r0
 8007b6c:	bc09      	pop	{r0, r3}
 8007b6e:	6819      	ldr	r1, [r3, #0]
 8007b70:	6808      	ldr	r0, [r1, #0]
 8007b72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b76:	f01e 0f10 	tst.w	lr, #16
 8007b7a:	bf08      	it	eq
 8007b7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007b80:	f380 8809 	msr	PSP, r0
 8007b84:	f3bf 8f6f 	isb	sy
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop
 8007b8c:	f3af 8000 	nop.w

08007b90 <pxCurrentTCBConst>:
 8007b90:	24004720 	.word	0x24004720
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007b94:	bf00      	nop
 8007b96:	bf00      	nop

08007b98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba2:	f383 8811 	msr	BASEPRI, r3
 8007ba6:	f3bf 8f6f 	isb	sy
 8007baa:	f3bf 8f4f 	dsb	sy
 8007bae:	607b      	str	r3, [r7, #4]
}
 8007bb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007bb2:	f001 f885 	bl	8008cc0 <xTaskIncrementTick>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d003      	beq.n	8007bc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007bbc:	4b06      	ldr	r3, [pc, #24]	; (8007bd8 <xPortSysTickHandler+0x40>)
 8007bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bc2:	601a      	str	r2, [r3, #0]
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	f383 8811 	msr	BASEPRI, r3
}
 8007bce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007bd0:	bf00      	nop
 8007bd2:	3708      	adds	r7, #8
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	e000ed04 	.word	0xe000ed04

08007bdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007bdc:	b480      	push	{r7}
 8007bde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007be0:	4b0b      	ldr	r3, [pc, #44]	; (8007c10 <vPortSetupTimerInterrupt+0x34>)
 8007be2:	2200      	movs	r2, #0
 8007be4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007be6:	4b0b      	ldr	r3, [pc, #44]	; (8007c14 <vPortSetupTimerInterrupt+0x38>)
 8007be8:	2200      	movs	r2, #0
 8007bea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007bec:	4b0a      	ldr	r3, [pc, #40]	; (8007c18 <vPortSetupTimerInterrupt+0x3c>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a0a      	ldr	r2, [pc, #40]	; (8007c1c <vPortSetupTimerInterrupt+0x40>)
 8007bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8007bf6:	099b      	lsrs	r3, r3, #6
 8007bf8:	4a09      	ldr	r2, [pc, #36]	; (8007c20 <vPortSetupTimerInterrupt+0x44>)
 8007bfa:	3b01      	subs	r3, #1
 8007bfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007bfe:	4b04      	ldr	r3, [pc, #16]	; (8007c10 <vPortSetupTimerInterrupt+0x34>)
 8007c00:	2207      	movs	r2, #7
 8007c02:	601a      	str	r2, [r3, #0]
}
 8007c04:	bf00      	nop
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr
 8007c0e:	bf00      	nop
 8007c10:	e000e010 	.word	0xe000e010
 8007c14:	e000e018 	.word	0xe000e018
 8007c18:	24000000 	.word	0x24000000
 8007c1c:	10624dd3 	.word	0x10624dd3
 8007c20:	e000e014 	.word	0xe000e014

08007c24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007c24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007c34 <vPortEnableVFP+0x10>
 8007c28:	6801      	ldr	r1, [r0, #0]
 8007c2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007c2e:	6001      	str	r1, [r0, #0]
 8007c30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007c32:	bf00      	nop
 8007c34:	e000ed88 	.word	0xe000ed88

08007c38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007c3e:	f3ef 8305 	mrs	r3, IPSR
 8007c42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2b0f      	cmp	r3, #15
 8007c48:	d914      	bls.n	8007c74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007c4a:	4a17      	ldr	r2, [pc, #92]	; (8007ca8 <vPortValidateInterruptPriority+0x70>)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	4413      	add	r3, r2
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007c54:	4b15      	ldr	r3, [pc, #84]	; (8007cac <vPortValidateInterruptPriority+0x74>)
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	7afa      	ldrb	r2, [r7, #11]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d20a      	bcs.n	8007c74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c62:	f383 8811 	msr	BASEPRI, r3
 8007c66:	f3bf 8f6f 	isb	sy
 8007c6a:	f3bf 8f4f 	dsb	sy
 8007c6e:	607b      	str	r3, [r7, #4]
}
 8007c70:	bf00      	nop
 8007c72:	e7fe      	b.n	8007c72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007c74:	4b0e      	ldr	r3, [pc, #56]	; (8007cb0 <vPortValidateInterruptPriority+0x78>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007c7c:	4b0d      	ldr	r3, [pc, #52]	; (8007cb4 <vPortValidateInterruptPriority+0x7c>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d90a      	bls.n	8007c9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c88:	f383 8811 	msr	BASEPRI, r3
 8007c8c:	f3bf 8f6f 	isb	sy
 8007c90:	f3bf 8f4f 	dsb	sy
 8007c94:	603b      	str	r3, [r7, #0]
}
 8007c96:	bf00      	nop
 8007c98:	e7fe      	b.n	8007c98 <vPortValidateInterruptPriority+0x60>
	}
 8007c9a:	bf00      	nop
 8007c9c:	3714      	adds	r7, #20
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr
 8007ca6:	bf00      	nop
 8007ca8:	e000e3f0 	.word	0xe000e3f0
 8007cac:	240046d8 	.word	0x240046d8
 8007cb0:	e000ed0c 	.word	0xe000ed0c
 8007cb4:	240046dc 	.word	0x240046dc

08007cb8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d10a      	bne.n	8007ce2 <xQueueGenericReset+0x2a>
	__asm volatile
 8007ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd0:	f383 8811 	msr	BASEPRI, r3
 8007cd4:	f3bf 8f6f 	isb	sy
 8007cd8:	f3bf 8f4f 	dsb	sy
 8007cdc:	60bb      	str	r3, [r7, #8]
}
 8007cde:	bf00      	nop
 8007ce0:	e7fe      	b.n	8007ce0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007ce2:	f7ff fec7 	bl	8007a74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cee:	68f9      	ldr	r1, [r7, #12]
 8007cf0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007cf2:	fb01 f303 	mul.w	r3, r1, r3
 8007cf6:	441a      	add	r2, r3
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d12:	3b01      	subs	r3, #1
 8007d14:	68f9      	ldr	r1, [r7, #12]
 8007d16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d18:	fb01 f303 	mul.w	r3, r1, r3
 8007d1c:	441a      	add	r2, r3
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	22ff      	movs	r2, #255	; 0xff
 8007d26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	22ff      	movs	r2, #255	; 0xff
 8007d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d114      	bne.n	8007d62 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	691b      	ldr	r3, [r3, #16]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d01a      	beq.n	8007d76 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	3310      	adds	r3, #16
 8007d44:	4618      	mov	r0, r3
 8007d46:	f001 f929 	bl	8008f9c <xTaskRemoveFromEventList>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d012      	beq.n	8007d76 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007d50:	4b0c      	ldr	r3, [pc, #48]	; (8007d84 <xQueueGenericReset+0xcc>)
 8007d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d56:	601a      	str	r2, [r3, #0]
 8007d58:	f3bf 8f4f 	dsb	sy
 8007d5c:	f3bf 8f6f 	isb	sy
 8007d60:	e009      	b.n	8007d76 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	3310      	adds	r3, #16
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7ff fca6 	bl	80076b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	3324      	adds	r3, #36	; 0x24
 8007d70:	4618      	mov	r0, r3
 8007d72:	f7ff fca1 	bl	80076b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007d76:	f7ff fead 	bl	8007ad4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007d7a:	2301      	movs	r3, #1
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3710      	adds	r7, #16
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	e000ed04 	.word	0xe000ed04

08007d88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b08e      	sub	sp, #56	; 0x38
 8007d8c:	af02      	add	r7, sp, #8
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	607a      	str	r2, [r7, #4]
 8007d94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d10a      	bne.n	8007db2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da0:	f383 8811 	msr	BASEPRI, r3
 8007da4:	f3bf 8f6f 	isb	sy
 8007da8:	f3bf 8f4f 	dsb	sy
 8007dac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007dae:	bf00      	nop
 8007db0:	e7fe      	b.n	8007db0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d10a      	bne.n	8007dce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dbc:	f383 8811 	msr	BASEPRI, r3
 8007dc0:	f3bf 8f6f 	isb	sy
 8007dc4:	f3bf 8f4f 	dsb	sy
 8007dc8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007dca:	bf00      	nop
 8007dcc:	e7fe      	b.n	8007dcc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d002      	beq.n	8007dda <xQueueGenericCreateStatic+0x52>
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d001      	beq.n	8007dde <xQueueGenericCreateStatic+0x56>
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e000      	b.n	8007de0 <xQueueGenericCreateStatic+0x58>
 8007dde:	2300      	movs	r3, #0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d10a      	bne.n	8007dfa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de8:	f383 8811 	msr	BASEPRI, r3
 8007dec:	f3bf 8f6f 	isb	sy
 8007df0:	f3bf 8f4f 	dsb	sy
 8007df4:	623b      	str	r3, [r7, #32]
}
 8007df6:	bf00      	nop
 8007df8:	e7fe      	b.n	8007df8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d102      	bne.n	8007e06 <xQueueGenericCreateStatic+0x7e>
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d101      	bne.n	8007e0a <xQueueGenericCreateStatic+0x82>
 8007e06:	2301      	movs	r3, #1
 8007e08:	e000      	b.n	8007e0c <xQueueGenericCreateStatic+0x84>
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d10a      	bne.n	8007e26 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e14:	f383 8811 	msr	BASEPRI, r3
 8007e18:	f3bf 8f6f 	isb	sy
 8007e1c:	f3bf 8f4f 	dsb	sy
 8007e20:	61fb      	str	r3, [r7, #28]
}
 8007e22:	bf00      	nop
 8007e24:	e7fe      	b.n	8007e24 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007e26:	2350      	movs	r3, #80	; 0x50
 8007e28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	2b50      	cmp	r3, #80	; 0x50
 8007e2e:	d00a      	beq.n	8007e46 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e34:	f383 8811 	msr	BASEPRI, r3
 8007e38:	f3bf 8f6f 	isb	sy
 8007e3c:	f3bf 8f4f 	dsb	sy
 8007e40:	61bb      	str	r3, [r7, #24]
}
 8007e42:	bf00      	nop
 8007e44:	e7fe      	b.n	8007e44 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007e46:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00d      	beq.n	8007e6e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e54:	2201      	movs	r2, #1
 8007e56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e5a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e60:	9300      	str	r3, [sp, #0]
 8007e62:	4613      	mov	r3, r2
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	68b9      	ldr	r1, [r7, #8]
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	f000 f805 	bl	8007e78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3730      	adds	r7, #48	; 0x30
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	607a      	str	r2, [r7, #4]
 8007e84:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d103      	bne.n	8007e94 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	69ba      	ldr	r2, [r7, #24]
 8007e90:	601a      	str	r2, [r3, #0]
 8007e92:	e002      	b.n	8007e9a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	68fa      	ldr	r2, [r7, #12]
 8007e9e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	68ba      	ldr	r2, [r7, #8]
 8007ea4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007ea6:	2101      	movs	r1, #1
 8007ea8:	69b8      	ldr	r0, [r7, #24]
 8007eaa:	f7ff ff05 	bl	8007cb8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	78fa      	ldrb	r2, [r7, #3]
 8007eb2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007eb6:	bf00      	nop
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
	...

08007ec0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b08e      	sub	sp, #56	; 0x38
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	607a      	str	r2, [r7, #4]
 8007ecc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d10a      	bne.n	8007ef2 <xQueueGenericSend+0x32>
	__asm volatile
 8007edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee0:	f383 8811 	msr	BASEPRI, r3
 8007ee4:	f3bf 8f6f 	isb	sy
 8007ee8:	f3bf 8f4f 	dsb	sy
 8007eec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007eee:	bf00      	nop
 8007ef0:	e7fe      	b.n	8007ef0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d103      	bne.n	8007f00 <xQueueGenericSend+0x40>
 8007ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d101      	bne.n	8007f04 <xQueueGenericSend+0x44>
 8007f00:	2301      	movs	r3, #1
 8007f02:	e000      	b.n	8007f06 <xQueueGenericSend+0x46>
 8007f04:	2300      	movs	r3, #0
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d10a      	bne.n	8007f20 <xQueueGenericSend+0x60>
	__asm volatile
 8007f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0e:	f383 8811 	msr	BASEPRI, r3
 8007f12:	f3bf 8f6f 	isb	sy
 8007f16:	f3bf 8f4f 	dsb	sy
 8007f1a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007f1c:	bf00      	nop
 8007f1e:	e7fe      	b.n	8007f1e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	2b02      	cmp	r3, #2
 8007f24:	d103      	bne.n	8007f2e <xQueueGenericSend+0x6e>
 8007f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d101      	bne.n	8007f32 <xQueueGenericSend+0x72>
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e000      	b.n	8007f34 <xQueueGenericSend+0x74>
 8007f32:	2300      	movs	r3, #0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d10a      	bne.n	8007f4e <xQueueGenericSend+0x8e>
	__asm volatile
 8007f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f3c:	f383 8811 	msr	BASEPRI, r3
 8007f40:	f3bf 8f6f 	isb	sy
 8007f44:	f3bf 8f4f 	dsb	sy
 8007f48:	623b      	str	r3, [r7, #32]
}
 8007f4a:	bf00      	nop
 8007f4c:	e7fe      	b.n	8007f4c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f4e:	f001 f9e7 	bl	8009320 <xTaskGetSchedulerState>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d102      	bne.n	8007f5e <xQueueGenericSend+0x9e>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d101      	bne.n	8007f62 <xQueueGenericSend+0xa2>
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e000      	b.n	8007f64 <xQueueGenericSend+0xa4>
 8007f62:	2300      	movs	r3, #0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d10a      	bne.n	8007f7e <xQueueGenericSend+0xbe>
	__asm volatile
 8007f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6c:	f383 8811 	msr	BASEPRI, r3
 8007f70:	f3bf 8f6f 	isb	sy
 8007f74:	f3bf 8f4f 	dsb	sy
 8007f78:	61fb      	str	r3, [r7, #28]
}
 8007f7a:	bf00      	nop
 8007f7c:	e7fe      	b.n	8007f7c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f7e:	f7ff fd79 	bl	8007a74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d302      	bcc.n	8007f94 <xQueueGenericSend+0xd4>
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	2b02      	cmp	r3, #2
 8007f92:	d129      	bne.n	8007fe8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f94:	683a      	ldr	r2, [r7, #0]
 8007f96:	68b9      	ldr	r1, [r7, #8]
 8007f98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f9a:	f000 fa0b 	bl	80083b4 <prvCopyDataToQueue>
 8007f9e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d010      	beq.n	8007fca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007faa:	3324      	adds	r3, #36	; 0x24
 8007fac:	4618      	mov	r0, r3
 8007fae:	f000 fff5 	bl	8008f9c <xTaskRemoveFromEventList>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d013      	beq.n	8007fe0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007fb8:	4b3f      	ldr	r3, [pc, #252]	; (80080b8 <xQueueGenericSend+0x1f8>)
 8007fba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fbe:	601a      	str	r2, [r3, #0]
 8007fc0:	f3bf 8f4f 	dsb	sy
 8007fc4:	f3bf 8f6f 	isb	sy
 8007fc8:	e00a      	b.n	8007fe0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d007      	beq.n	8007fe0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007fd0:	4b39      	ldr	r3, [pc, #228]	; (80080b8 <xQueueGenericSend+0x1f8>)
 8007fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fd6:	601a      	str	r2, [r3, #0]
 8007fd8:	f3bf 8f4f 	dsb	sy
 8007fdc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007fe0:	f7ff fd78 	bl	8007ad4 <vPortExitCritical>
				return pdPASS;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	e063      	b.n	80080b0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d103      	bne.n	8007ff6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007fee:	f7ff fd71 	bl	8007ad4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	e05c      	b.n	80080b0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d106      	bne.n	800800a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ffc:	f107 0314 	add.w	r3, r7, #20
 8008000:	4618      	mov	r0, r3
 8008002:	f001 f82f 	bl	8009064 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008006:	2301      	movs	r3, #1
 8008008:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800800a:	f7ff fd63 	bl	8007ad4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800800e:	f000 fd9b 	bl	8008b48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008012:	f7ff fd2f 	bl	8007a74 <vPortEnterCritical>
 8008016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008018:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800801c:	b25b      	sxtb	r3, r3
 800801e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008022:	d103      	bne.n	800802c <xQueueGenericSend+0x16c>
 8008024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008026:	2200      	movs	r2, #0
 8008028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800802c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008032:	b25b      	sxtb	r3, r3
 8008034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008038:	d103      	bne.n	8008042 <xQueueGenericSend+0x182>
 800803a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803c:	2200      	movs	r2, #0
 800803e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008042:	f7ff fd47 	bl	8007ad4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008046:	1d3a      	adds	r2, r7, #4
 8008048:	f107 0314 	add.w	r3, r7, #20
 800804c:	4611      	mov	r1, r2
 800804e:	4618      	mov	r0, r3
 8008050:	f001 f81e 	bl	8009090 <xTaskCheckForTimeOut>
 8008054:	4603      	mov	r3, r0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d124      	bne.n	80080a4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800805a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800805c:	f000 faa2 	bl	80085a4 <prvIsQueueFull>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d018      	beq.n	8008098 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008068:	3310      	adds	r3, #16
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	4611      	mov	r1, r2
 800806e:	4618      	mov	r0, r3
 8008070:	f000 ff44 	bl	8008efc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008074:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008076:	f000 fa2d 	bl	80084d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800807a:	f000 fd73 	bl	8008b64 <xTaskResumeAll>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	f47f af7c 	bne.w	8007f7e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008086:	4b0c      	ldr	r3, [pc, #48]	; (80080b8 <xQueueGenericSend+0x1f8>)
 8008088:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800808c:	601a      	str	r2, [r3, #0]
 800808e:	f3bf 8f4f 	dsb	sy
 8008092:	f3bf 8f6f 	isb	sy
 8008096:	e772      	b.n	8007f7e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008098:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800809a:	f000 fa1b 	bl	80084d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800809e:	f000 fd61 	bl	8008b64 <xTaskResumeAll>
 80080a2:	e76c      	b.n	8007f7e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80080a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080a6:	f000 fa15 	bl	80084d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80080aa:	f000 fd5b 	bl	8008b64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80080ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3738      	adds	r7, #56	; 0x38
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	e000ed04 	.word	0xe000ed04

080080bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b090      	sub	sp, #64	; 0x40
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	60b9      	str	r1, [r7, #8]
 80080c6:	607a      	str	r2, [r7, #4]
 80080c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80080ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d10a      	bne.n	80080ea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80080d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d8:	f383 8811 	msr	BASEPRI, r3
 80080dc:	f3bf 8f6f 	isb	sy
 80080e0:	f3bf 8f4f 	dsb	sy
 80080e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80080e6:	bf00      	nop
 80080e8:	e7fe      	b.n	80080e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d103      	bne.n	80080f8 <xQueueGenericSendFromISR+0x3c>
 80080f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d101      	bne.n	80080fc <xQueueGenericSendFromISR+0x40>
 80080f8:	2301      	movs	r3, #1
 80080fa:	e000      	b.n	80080fe <xQueueGenericSendFromISR+0x42>
 80080fc:	2300      	movs	r3, #0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d10a      	bne.n	8008118 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008106:	f383 8811 	msr	BASEPRI, r3
 800810a:	f3bf 8f6f 	isb	sy
 800810e:	f3bf 8f4f 	dsb	sy
 8008112:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008114:	bf00      	nop
 8008116:	e7fe      	b.n	8008116 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	2b02      	cmp	r3, #2
 800811c:	d103      	bne.n	8008126 <xQueueGenericSendFromISR+0x6a>
 800811e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008122:	2b01      	cmp	r3, #1
 8008124:	d101      	bne.n	800812a <xQueueGenericSendFromISR+0x6e>
 8008126:	2301      	movs	r3, #1
 8008128:	e000      	b.n	800812c <xQueueGenericSendFromISR+0x70>
 800812a:	2300      	movs	r3, #0
 800812c:	2b00      	cmp	r3, #0
 800812e:	d10a      	bne.n	8008146 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008134:	f383 8811 	msr	BASEPRI, r3
 8008138:	f3bf 8f6f 	isb	sy
 800813c:	f3bf 8f4f 	dsb	sy
 8008140:	623b      	str	r3, [r7, #32]
}
 8008142:	bf00      	nop
 8008144:	e7fe      	b.n	8008144 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008146:	f7ff fd77 	bl	8007c38 <vPortValidateInterruptPriority>
	__asm volatile
 800814a:	f3ef 8211 	mrs	r2, BASEPRI
 800814e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008152:	f383 8811 	msr	BASEPRI, r3
 8008156:	f3bf 8f6f 	isb	sy
 800815a:	f3bf 8f4f 	dsb	sy
 800815e:	61fa      	str	r2, [r7, #28]
 8008160:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8008162:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008164:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008168:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800816a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800816c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800816e:	429a      	cmp	r2, r3
 8008170:	d302      	bcc.n	8008178 <xQueueGenericSendFromISR+0xbc>
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	2b02      	cmp	r3, #2
 8008176:	d12f      	bne.n	80081d8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800817a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800817e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008186:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008188:	683a      	ldr	r2, [r7, #0]
 800818a:	68b9      	ldr	r1, [r7, #8]
 800818c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800818e:	f000 f911 	bl	80083b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008192:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800819a:	d112      	bne.n	80081c2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800819c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800819e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d016      	beq.n	80081d2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a6:	3324      	adds	r3, #36	; 0x24
 80081a8:	4618      	mov	r0, r3
 80081aa:	f000 fef7 	bl	8008f9c <xTaskRemoveFromEventList>
 80081ae:	4603      	mov	r3, r0
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00e      	beq.n	80081d2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00b      	beq.n	80081d2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2201      	movs	r2, #1
 80081be:	601a      	str	r2, [r3, #0]
 80081c0:	e007      	b.n	80081d2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80081c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80081c6:	3301      	adds	r3, #1
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	b25a      	sxtb	r2, r3
 80081cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80081d2:	2301      	movs	r3, #1
 80081d4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80081d6:	e001      	b.n	80081dc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80081d8:	2300      	movs	r3, #0
 80081da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081de:	617b      	str	r3, [r7, #20]
	__asm volatile
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	f383 8811 	msr	BASEPRI, r3
}
 80081e6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80081e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3740      	adds	r7, #64	; 0x40
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
	...

080081f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b08c      	sub	sp, #48	; 0x30
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	60b9      	str	r1, [r7, #8]
 80081fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008200:	2300      	movs	r3, #0
 8008202:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800820a:	2b00      	cmp	r3, #0
 800820c:	d10a      	bne.n	8008224 <xQueueReceive+0x30>
	__asm volatile
 800820e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008212:	f383 8811 	msr	BASEPRI, r3
 8008216:	f3bf 8f6f 	isb	sy
 800821a:	f3bf 8f4f 	dsb	sy
 800821e:	623b      	str	r3, [r7, #32]
}
 8008220:	bf00      	nop
 8008222:	e7fe      	b.n	8008222 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d103      	bne.n	8008232 <xQueueReceive+0x3e>
 800822a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800822c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822e:	2b00      	cmp	r3, #0
 8008230:	d101      	bne.n	8008236 <xQueueReceive+0x42>
 8008232:	2301      	movs	r3, #1
 8008234:	e000      	b.n	8008238 <xQueueReceive+0x44>
 8008236:	2300      	movs	r3, #0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d10a      	bne.n	8008252 <xQueueReceive+0x5e>
	__asm volatile
 800823c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008240:	f383 8811 	msr	BASEPRI, r3
 8008244:	f3bf 8f6f 	isb	sy
 8008248:	f3bf 8f4f 	dsb	sy
 800824c:	61fb      	str	r3, [r7, #28]
}
 800824e:	bf00      	nop
 8008250:	e7fe      	b.n	8008250 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008252:	f001 f865 	bl	8009320 <xTaskGetSchedulerState>
 8008256:	4603      	mov	r3, r0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d102      	bne.n	8008262 <xQueueReceive+0x6e>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d101      	bne.n	8008266 <xQueueReceive+0x72>
 8008262:	2301      	movs	r3, #1
 8008264:	e000      	b.n	8008268 <xQueueReceive+0x74>
 8008266:	2300      	movs	r3, #0
 8008268:	2b00      	cmp	r3, #0
 800826a:	d10a      	bne.n	8008282 <xQueueReceive+0x8e>
	__asm volatile
 800826c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008270:	f383 8811 	msr	BASEPRI, r3
 8008274:	f3bf 8f6f 	isb	sy
 8008278:	f3bf 8f4f 	dsb	sy
 800827c:	61bb      	str	r3, [r7, #24]
}
 800827e:	bf00      	nop
 8008280:	e7fe      	b.n	8008280 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008282:	f7ff fbf7 	bl	8007a74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800828a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800828c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828e:	2b00      	cmp	r3, #0
 8008290:	d01f      	beq.n	80082d2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008292:	68b9      	ldr	r1, [r7, #8]
 8008294:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008296:	f000 f8f7 	bl	8008488 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800829a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829c:	1e5a      	subs	r2, r3, #1
 800829e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a4:	691b      	ldr	r3, [r3, #16]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d00f      	beq.n	80082ca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ac:	3310      	adds	r3, #16
 80082ae:	4618      	mov	r0, r3
 80082b0:	f000 fe74 	bl	8008f9c <xTaskRemoveFromEventList>
 80082b4:	4603      	mov	r3, r0
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d007      	beq.n	80082ca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80082ba:	4b3d      	ldr	r3, [pc, #244]	; (80083b0 <xQueueReceive+0x1bc>)
 80082bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082c0:	601a      	str	r2, [r3, #0]
 80082c2:	f3bf 8f4f 	dsb	sy
 80082c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80082ca:	f7ff fc03 	bl	8007ad4 <vPortExitCritical>
				return pdPASS;
 80082ce:	2301      	movs	r3, #1
 80082d0:	e069      	b.n	80083a6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d103      	bne.n	80082e0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80082d8:	f7ff fbfc 	bl	8007ad4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80082dc:	2300      	movs	r3, #0
 80082de:	e062      	b.n	80083a6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80082e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d106      	bne.n	80082f4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80082e6:	f107 0310 	add.w	r3, r7, #16
 80082ea:	4618      	mov	r0, r3
 80082ec:	f000 feba 	bl	8009064 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80082f0:	2301      	movs	r3, #1
 80082f2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80082f4:	f7ff fbee 	bl	8007ad4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80082f8:	f000 fc26 	bl	8008b48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80082fc:	f7ff fbba 	bl	8007a74 <vPortEnterCritical>
 8008300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008302:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008306:	b25b      	sxtb	r3, r3
 8008308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800830c:	d103      	bne.n	8008316 <xQueueReceive+0x122>
 800830e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008310:	2200      	movs	r2, #0
 8008312:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008318:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800831c:	b25b      	sxtb	r3, r3
 800831e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008322:	d103      	bne.n	800832c <xQueueReceive+0x138>
 8008324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008326:	2200      	movs	r2, #0
 8008328:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800832c:	f7ff fbd2 	bl	8007ad4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008330:	1d3a      	adds	r2, r7, #4
 8008332:	f107 0310 	add.w	r3, r7, #16
 8008336:	4611      	mov	r1, r2
 8008338:	4618      	mov	r0, r3
 800833a:	f000 fea9 	bl	8009090 <xTaskCheckForTimeOut>
 800833e:	4603      	mov	r3, r0
 8008340:	2b00      	cmp	r3, #0
 8008342:	d123      	bne.n	800838c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008344:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008346:	f000 f917 	bl	8008578 <prvIsQueueEmpty>
 800834a:	4603      	mov	r3, r0
 800834c:	2b00      	cmp	r3, #0
 800834e:	d017      	beq.n	8008380 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008352:	3324      	adds	r3, #36	; 0x24
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	4611      	mov	r1, r2
 8008358:	4618      	mov	r0, r3
 800835a:	f000 fdcf 	bl	8008efc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800835e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008360:	f000 f8b8 	bl	80084d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008364:	f000 fbfe 	bl	8008b64 <xTaskResumeAll>
 8008368:	4603      	mov	r3, r0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d189      	bne.n	8008282 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800836e:	4b10      	ldr	r3, [pc, #64]	; (80083b0 <xQueueReceive+0x1bc>)
 8008370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008374:	601a      	str	r2, [r3, #0]
 8008376:	f3bf 8f4f 	dsb	sy
 800837a:	f3bf 8f6f 	isb	sy
 800837e:	e780      	b.n	8008282 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008380:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008382:	f000 f8a7 	bl	80084d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008386:	f000 fbed 	bl	8008b64 <xTaskResumeAll>
 800838a:	e77a      	b.n	8008282 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800838c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800838e:	f000 f8a1 	bl	80084d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008392:	f000 fbe7 	bl	8008b64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008396:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008398:	f000 f8ee 	bl	8008578 <prvIsQueueEmpty>
 800839c:	4603      	mov	r3, r0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	f43f af6f 	beq.w	8008282 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80083a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3730      	adds	r7, #48	; 0x30
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	e000ed04 	.word	0xe000ed04

080083b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b086      	sub	sp, #24
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80083c0:	2300      	movs	r3, #0
 80083c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d10d      	bne.n	80083ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d14d      	bne.n	8008476 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	4618      	mov	r0, r3
 80083e0:	f000 ffbc 	bl	800935c <xTaskPriorityDisinherit>
 80083e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2200      	movs	r2, #0
 80083ea:	609a      	str	r2, [r3, #8]
 80083ec:	e043      	b.n	8008476 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d119      	bne.n	8008428 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6858      	ldr	r0, [r3, #4]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083fc:	461a      	mov	r2, r3
 80083fe:	68b9      	ldr	r1, [r7, #8]
 8008400:	f001 fcdf 	bl	8009dc2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	685a      	ldr	r2, [r3, #4]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800840c:	441a      	add	r2, r3
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	685a      	ldr	r2, [r3, #4]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	429a      	cmp	r2, r3
 800841c:	d32b      	bcc.n	8008476 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	605a      	str	r2, [r3, #4]
 8008426:	e026      	b.n	8008476 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	68d8      	ldr	r0, [r3, #12]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008430:	461a      	mov	r2, r3
 8008432:	68b9      	ldr	r1, [r7, #8]
 8008434:	f001 fcc5 	bl	8009dc2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	68da      	ldr	r2, [r3, #12]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008440:	425b      	negs	r3, r3
 8008442:	441a      	add	r2, r3
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	68da      	ldr	r2, [r3, #12]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	429a      	cmp	r2, r3
 8008452:	d207      	bcs.n	8008464 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	689a      	ldr	r2, [r3, #8]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845c:	425b      	negs	r3, r3
 800845e:	441a      	add	r2, r3
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2b02      	cmp	r3, #2
 8008468:	d105      	bne.n	8008476 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d002      	beq.n	8008476 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	3b01      	subs	r3, #1
 8008474:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	1c5a      	adds	r2, r3, #1
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800847e:	697b      	ldr	r3, [r7, #20]
}
 8008480:	4618      	mov	r0, r3
 8008482:	3718      	adds	r7, #24
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008496:	2b00      	cmp	r3, #0
 8008498:	d018      	beq.n	80084cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	68da      	ldr	r2, [r3, #12]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a2:	441a      	add	r2, r3
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	68da      	ldr	r2, [r3, #12]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d303      	bcc.n	80084bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	68d9      	ldr	r1, [r3, #12]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c4:	461a      	mov	r2, r3
 80084c6:	6838      	ldr	r0, [r7, #0]
 80084c8:	f001 fc7b 	bl	8009dc2 <memcpy>
	}
}
 80084cc:	bf00      	nop
 80084ce:	3708      	adds	r7, #8
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80084dc:	f7ff faca 	bl	8007a74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084e8:	e011      	b.n	800850e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d012      	beq.n	8008518 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	3324      	adds	r3, #36	; 0x24
 80084f6:	4618      	mov	r0, r3
 80084f8:	f000 fd50 	bl	8008f9c <xTaskRemoveFromEventList>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d001      	beq.n	8008506 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008502:	f000 fe27 	bl	8009154 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008506:	7bfb      	ldrb	r3, [r7, #15]
 8008508:	3b01      	subs	r3, #1
 800850a:	b2db      	uxtb	r3, r3
 800850c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800850e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008512:	2b00      	cmp	r3, #0
 8008514:	dce9      	bgt.n	80084ea <prvUnlockQueue+0x16>
 8008516:	e000      	b.n	800851a <prvUnlockQueue+0x46>
					break;
 8008518:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	22ff      	movs	r2, #255	; 0xff
 800851e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008522:	f7ff fad7 	bl	8007ad4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008526:	f7ff faa5 	bl	8007a74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008530:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008532:	e011      	b.n	8008558 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	691b      	ldr	r3, [r3, #16]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d012      	beq.n	8008562 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	3310      	adds	r3, #16
 8008540:	4618      	mov	r0, r3
 8008542:	f000 fd2b 	bl	8008f9c <xTaskRemoveFromEventList>
 8008546:	4603      	mov	r3, r0
 8008548:	2b00      	cmp	r3, #0
 800854a:	d001      	beq.n	8008550 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800854c:	f000 fe02 	bl	8009154 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008550:	7bbb      	ldrb	r3, [r7, #14]
 8008552:	3b01      	subs	r3, #1
 8008554:	b2db      	uxtb	r3, r3
 8008556:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008558:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800855c:	2b00      	cmp	r3, #0
 800855e:	dce9      	bgt.n	8008534 <prvUnlockQueue+0x60>
 8008560:	e000      	b.n	8008564 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008562:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	22ff      	movs	r2, #255	; 0xff
 8008568:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800856c:	f7ff fab2 	bl	8007ad4 <vPortExitCritical>
}
 8008570:	bf00      	nop
 8008572:	3710      	adds	r7, #16
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b084      	sub	sp, #16
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008580:	f7ff fa78 	bl	8007a74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008588:	2b00      	cmp	r3, #0
 800858a:	d102      	bne.n	8008592 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800858c:	2301      	movs	r3, #1
 800858e:	60fb      	str	r3, [r7, #12]
 8008590:	e001      	b.n	8008596 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008592:	2300      	movs	r3, #0
 8008594:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008596:	f7ff fa9d 	bl	8007ad4 <vPortExitCritical>

	return xReturn;
 800859a:	68fb      	ldr	r3, [r7, #12]
}
 800859c:	4618      	mov	r0, r3
 800859e:	3710      	adds	r7, #16
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b084      	sub	sp, #16
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80085ac:	f7ff fa62 	bl	8007a74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d102      	bne.n	80085c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80085bc:	2301      	movs	r3, #1
 80085be:	60fb      	str	r3, [r7, #12]
 80085c0:	e001      	b.n	80085c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80085c2:	2300      	movs	r3, #0
 80085c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80085c6:	f7ff fa85 	bl	8007ad4 <vPortExitCritical>

	return xReturn;
 80085ca:	68fb      	ldr	r3, [r7, #12]
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3710      	adds	r7, #16
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80085d4:	b480      	push	{r7}
 80085d6:	b085      	sub	sp, #20
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80085de:	2300      	movs	r3, #0
 80085e0:	60fb      	str	r3, [r7, #12]
 80085e2:	e014      	b.n	800860e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80085e4:	4a0f      	ldr	r2, [pc, #60]	; (8008624 <vQueueAddToRegistry+0x50>)
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d10b      	bne.n	8008608 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80085f0:	490c      	ldr	r1, [pc, #48]	; (8008624 <vQueueAddToRegistry+0x50>)
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	683a      	ldr	r2, [r7, #0]
 80085f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80085fa:	4a0a      	ldr	r2, [pc, #40]	; (8008624 <vQueueAddToRegistry+0x50>)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	00db      	lsls	r3, r3, #3
 8008600:	4413      	add	r3, r2
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008606:	e006      	b.n	8008616 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	3301      	adds	r3, #1
 800860c:	60fb      	str	r3, [r7, #12]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2b07      	cmp	r3, #7
 8008612:	d9e7      	bls.n	80085e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008614:	bf00      	nop
 8008616:	bf00      	nop
 8008618:	3714      	adds	r7, #20
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr
 8008622:	bf00      	nop
 8008624:	240046e0 	.word	0x240046e0

08008628 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008628:	b580      	push	{r7, lr}
 800862a:	b086      	sub	sp, #24
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008638:	f7ff fa1c 	bl	8007a74 <vPortEnterCritical>
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008642:	b25b      	sxtb	r3, r3
 8008644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008648:	d103      	bne.n	8008652 <vQueueWaitForMessageRestricted+0x2a>
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	2200      	movs	r2, #0
 800864e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008658:	b25b      	sxtb	r3, r3
 800865a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800865e:	d103      	bne.n	8008668 <vQueueWaitForMessageRestricted+0x40>
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	2200      	movs	r2, #0
 8008664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008668:	f7ff fa34 	bl	8007ad4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008670:	2b00      	cmp	r3, #0
 8008672:	d106      	bne.n	8008682 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	3324      	adds	r3, #36	; 0x24
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	68b9      	ldr	r1, [r7, #8]
 800867c:	4618      	mov	r0, r3
 800867e:	f000 fc61 	bl	8008f44 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008682:	6978      	ldr	r0, [r7, #20]
 8008684:	f7ff ff26 	bl	80084d4 <prvUnlockQueue>
	}
 8008688:	bf00      	nop
 800868a:	3718      	adds	r7, #24
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008690:	b580      	push	{r7, lr}
 8008692:	b08e      	sub	sp, #56	; 0x38
 8008694:	af04      	add	r7, sp, #16
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	607a      	str	r2, [r7, #4]
 800869c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800869e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d10a      	bne.n	80086ba <xTaskCreateStatic+0x2a>
	__asm volatile
 80086a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a8:	f383 8811 	msr	BASEPRI, r3
 80086ac:	f3bf 8f6f 	isb	sy
 80086b0:	f3bf 8f4f 	dsb	sy
 80086b4:	623b      	str	r3, [r7, #32]
}
 80086b6:	bf00      	nop
 80086b8:	e7fe      	b.n	80086b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80086ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d10a      	bne.n	80086d6 <xTaskCreateStatic+0x46>
	__asm volatile
 80086c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c4:	f383 8811 	msr	BASEPRI, r3
 80086c8:	f3bf 8f6f 	isb	sy
 80086cc:	f3bf 8f4f 	dsb	sy
 80086d0:	61fb      	str	r3, [r7, #28]
}
 80086d2:	bf00      	nop
 80086d4:	e7fe      	b.n	80086d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80086d6:	23bc      	movs	r3, #188	; 0xbc
 80086d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	2bbc      	cmp	r3, #188	; 0xbc
 80086de:	d00a      	beq.n	80086f6 <xTaskCreateStatic+0x66>
	__asm volatile
 80086e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e4:	f383 8811 	msr	BASEPRI, r3
 80086e8:	f3bf 8f6f 	isb	sy
 80086ec:	f3bf 8f4f 	dsb	sy
 80086f0:	61bb      	str	r3, [r7, #24]
}
 80086f2:	bf00      	nop
 80086f4:	e7fe      	b.n	80086f4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80086f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80086f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d01e      	beq.n	800873c <xTaskCreateStatic+0xac>
 80086fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008700:	2b00      	cmp	r3, #0
 8008702:	d01b      	beq.n	800873c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008706:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800870c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800870e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008710:	2202      	movs	r2, #2
 8008712:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008716:	2300      	movs	r3, #0
 8008718:	9303      	str	r3, [sp, #12]
 800871a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871c:	9302      	str	r3, [sp, #8]
 800871e:	f107 0314 	add.w	r3, r7, #20
 8008722:	9301      	str	r3, [sp, #4]
 8008724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008726:	9300      	str	r3, [sp, #0]
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	68b9      	ldr	r1, [r7, #8]
 800872e:	68f8      	ldr	r0, [r7, #12]
 8008730:	f000 f850 	bl	80087d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008734:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008736:	f000 f8f3 	bl	8008920 <prvAddNewTaskToReadyList>
 800873a:	e001      	b.n	8008740 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800873c:	2300      	movs	r3, #0
 800873e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008740:	697b      	ldr	r3, [r7, #20]
	}
 8008742:	4618      	mov	r0, r3
 8008744:	3728      	adds	r7, #40	; 0x28
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800874a:	b580      	push	{r7, lr}
 800874c:	b08c      	sub	sp, #48	; 0x30
 800874e:	af04      	add	r7, sp, #16
 8008750:	60f8      	str	r0, [r7, #12]
 8008752:	60b9      	str	r1, [r7, #8]
 8008754:	603b      	str	r3, [r7, #0]
 8008756:	4613      	mov	r3, r2
 8008758:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800875a:	88fb      	ldrh	r3, [r7, #6]
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	4618      	mov	r0, r3
 8008760:	f7fe fdc0 	bl	80072e4 <pvPortMalloc>
 8008764:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d00e      	beq.n	800878a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800876c:	20bc      	movs	r0, #188	; 0xbc
 800876e:	f7fe fdb9 	bl	80072e4 <pvPortMalloc>
 8008772:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008774:	69fb      	ldr	r3, [r7, #28]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d003      	beq.n	8008782 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800877a:	69fb      	ldr	r3, [r7, #28]
 800877c:	697a      	ldr	r2, [r7, #20]
 800877e:	631a      	str	r2, [r3, #48]	; 0x30
 8008780:	e005      	b.n	800878e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008782:	6978      	ldr	r0, [r7, #20]
 8008784:	f7fe fe7a 	bl	800747c <vPortFree>
 8008788:	e001      	b.n	800878e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800878a:	2300      	movs	r3, #0
 800878c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d017      	beq.n	80087c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008794:	69fb      	ldr	r3, [r7, #28]
 8008796:	2200      	movs	r2, #0
 8008798:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800879c:	88fa      	ldrh	r2, [r7, #6]
 800879e:	2300      	movs	r3, #0
 80087a0:	9303      	str	r3, [sp, #12]
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	9302      	str	r3, [sp, #8]
 80087a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a8:	9301      	str	r3, [sp, #4]
 80087aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ac:	9300      	str	r3, [sp, #0]
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	68b9      	ldr	r1, [r7, #8]
 80087b2:	68f8      	ldr	r0, [r7, #12]
 80087b4:	f000 f80e 	bl	80087d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087b8:	69f8      	ldr	r0, [r7, #28]
 80087ba:	f000 f8b1 	bl	8008920 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80087be:	2301      	movs	r3, #1
 80087c0:	61bb      	str	r3, [r7, #24]
 80087c2:	e002      	b.n	80087ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80087c4:	f04f 33ff 	mov.w	r3, #4294967295
 80087c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80087ca:	69bb      	ldr	r3, [r7, #24]
	}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3720      	adds	r7, #32
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b088      	sub	sp, #32
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	607a      	str	r2, [r7, #4]
 80087e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80087e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	461a      	mov	r2, r3
 80087ec:	21a5      	movs	r1, #165	; 0xa5
 80087ee:	f001 faf6 	bl	8009dde <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80087f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087f6:	6879      	ldr	r1, [r7, #4]
 80087f8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80087fc:	440b      	add	r3, r1
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	4413      	add	r3, r2
 8008802:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008804:	69bb      	ldr	r3, [r7, #24]
 8008806:	f023 0307 	bic.w	r3, r3, #7
 800880a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800880c:	69bb      	ldr	r3, [r7, #24]
 800880e:	f003 0307 	and.w	r3, r3, #7
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00a      	beq.n	800882c <prvInitialiseNewTask+0x58>
	__asm volatile
 8008816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881a:	f383 8811 	msr	BASEPRI, r3
 800881e:	f3bf 8f6f 	isb	sy
 8008822:	f3bf 8f4f 	dsb	sy
 8008826:	617b      	str	r3, [r7, #20]
}
 8008828:	bf00      	nop
 800882a:	e7fe      	b.n	800882a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d01f      	beq.n	8008872 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008832:	2300      	movs	r3, #0
 8008834:	61fb      	str	r3, [r7, #28]
 8008836:	e012      	b.n	800885e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008838:	68ba      	ldr	r2, [r7, #8]
 800883a:	69fb      	ldr	r3, [r7, #28]
 800883c:	4413      	add	r3, r2
 800883e:	7819      	ldrb	r1, [r3, #0]
 8008840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008842:	69fb      	ldr	r3, [r7, #28]
 8008844:	4413      	add	r3, r2
 8008846:	3334      	adds	r3, #52	; 0x34
 8008848:	460a      	mov	r2, r1
 800884a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800884c:	68ba      	ldr	r2, [r7, #8]
 800884e:	69fb      	ldr	r3, [r7, #28]
 8008850:	4413      	add	r3, r2
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d006      	beq.n	8008866 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	3301      	adds	r3, #1
 800885c:	61fb      	str	r3, [r7, #28]
 800885e:	69fb      	ldr	r3, [r7, #28]
 8008860:	2b0f      	cmp	r3, #15
 8008862:	d9e9      	bls.n	8008838 <prvInitialiseNewTask+0x64>
 8008864:	e000      	b.n	8008868 <prvInitialiseNewTask+0x94>
			{
				break;
 8008866:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886a:	2200      	movs	r2, #0
 800886c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008870:	e003      	b.n	800887a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008874:	2200      	movs	r2, #0
 8008876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800887a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887c:	2b37      	cmp	r3, #55	; 0x37
 800887e:	d901      	bls.n	8008884 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008880:	2337      	movs	r3, #55	; 0x37
 8008882:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008886:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008888:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800888a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800888e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008892:	2200      	movs	r2, #0
 8008894:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008898:	3304      	adds	r3, #4
 800889a:	4618      	mov	r0, r3
 800889c:	f7fe ff2c 	bl	80076f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80088a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a2:	3318      	adds	r3, #24
 80088a4:	4618      	mov	r0, r3
 80088a6:	f7fe ff27 	bl	80076f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80088aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80088b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80088ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80088c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c2:	2200      	movs	r2, #0
 80088c4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80088c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ca:	2200      	movs	r2, #0
 80088cc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80088d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d2:	3354      	adds	r3, #84	; 0x54
 80088d4:	2260      	movs	r2, #96	; 0x60
 80088d6:	2100      	movs	r1, #0
 80088d8:	4618      	mov	r0, r3
 80088da:	f001 fa80 	bl	8009dde <memset>
 80088de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e0:	4a0c      	ldr	r2, [pc, #48]	; (8008914 <prvInitialiseNewTask+0x140>)
 80088e2:	659a      	str	r2, [r3, #88]	; 0x58
 80088e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e6:	4a0c      	ldr	r2, [pc, #48]	; (8008918 <prvInitialiseNewTask+0x144>)
 80088e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80088ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ec:	4a0b      	ldr	r2, [pc, #44]	; (800891c <prvInitialiseNewTask+0x148>)
 80088ee:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80088f0:	683a      	ldr	r2, [r7, #0]
 80088f2:	68f9      	ldr	r1, [r7, #12]
 80088f4:	69b8      	ldr	r0, [r7, #24]
 80088f6:	f7fe ff93 	bl	8007820 <pxPortInitialiseStack>
 80088fa:	4602      	mov	r2, r0
 80088fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088fe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008902:	2b00      	cmp	r3, #0
 8008904:	d002      	beq.n	800890c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800890a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800890c:	bf00      	nop
 800890e:	3720      	adds	r7, #32
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}
 8008914:	0800a81c 	.word	0x0800a81c
 8008918:	0800a83c 	.word	0x0800a83c
 800891c:	0800a7fc 	.word	0x0800a7fc

08008920 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008928:	f7ff f8a4 	bl	8007a74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800892c:	4b2d      	ldr	r3, [pc, #180]	; (80089e4 <prvAddNewTaskToReadyList+0xc4>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	3301      	adds	r3, #1
 8008932:	4a2c      	ldr	r2, [pc, #176]	; (80089e4 <prvAddNewTaskToReadyList+0xc4>)
 8008934:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008936:	4b2c      	ldr	r3, [pc, #176]	; (80089e8 <prvAddNewTaskToReadyList+0xc8>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d109      	bne.n	8008952 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800893e:	4a2a      	ldr	r2, [pc, #168]	; (80089e8 <prvAddNewTaskToReadyList+0xc8>)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008944:	4b27      	ldr	r3, [pc, #156]	; (80089e4 <prvAddNewTaskToReadyList+0xc4>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	2b01      	cmp	r3, #1
 800894a:	d110      	bne.n	800896e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800894c:	f000 fc26 	bl	800919c <prvInitialiseTaskLists>
 8008950:	e00d      	b.n	800896e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008952:	4b26      	ldr	r3, [pc, #152]	; (80089ec <prvAddNewTaskToReadyList+0xcc>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d109      	bne.n	800896e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800895a:	4b23      	ldr	r3, [pc, #140]	; (80089e8 <prvAddNewTaskToReadyList+0xc8>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008964:	429a      	cmp	r2, r3
 8008966:	d802      	bhi.n	800896e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008968:	4a1f      	ldr	r2, [pc, #124]	; (80089e8 <prvAddNewTaskToReadyList+0xc8>)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800896e:	4b20      	ldr	r3, [pc, #128]	; (80089f0 <prvAddNewTaskToReadyList+0xd0>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	3301      	adds	r3, #1
 8008974:	4a1e      	ldr	r2, [pc, #120]	; (80089f0 <prvAddNewTaskToReadyList+0xd0>)
 8008976:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008978:	4b1d      	ldr	r3, [pc, #116]	; (80089f0 <prvAddNewTaskToReadyList+0xd0>)
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008984:	4b1b      	ldr	r3, [pc, #108]	; (80089f4 <prvAddNewTaskToReadyList+0xd4>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	429a      	cmp	r2, r3
 800898a:	d903      	bls.n	8008994 <prvAddNewTaskToReadyList+0x74>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008990:	4a18      	ldr	r2, [pc, #96]	; (80089f4 <prvAddNewTaskToReadyList+0xd4>)
 8008992:	6013      	str	r3, [r2, #0]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008998:	4613      	mov	r3, r2
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	4413      	add	r3, r2
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	4a15      	ldr	r2, [pc, #84]	; (80089f8 <prvAddNewTaskToReadyList+0xd8>)
 80089a2:	441a      	add	r2, r3
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	3304      	adds	r3, #4
 80089a8:	4619      	mov	r1, r3
 80089aa:	4610      	mov	r0, r2
 80089ac:	f7fe feb1 	bl	8007712 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80089b0:	f7ff f890 	bl	8007ad4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80089b4:	4b0d      	ldr	r3, [pc, #52]	; (80089ec <prvAddNewTaskToReadyList+0xcc>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d00e      	beq.n	80089da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80089bc:	4b0a      	ldr	r3, [pc, #40]	; (80089e8 <prvAddNewTaskToReadyList+0xc8>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d207      	bcs.n	80089da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80089ca:	4b0c      	ldr	r3, [pc, #48]	; (80089fc <prvAddNewTaskToReadyList+0xdc>)
 80089cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089d0:	601a      	str	r2, [r3, #0]
 80089d2:	f3bf 8f4f 	dsb	sy
 80089d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089da:	bf00      	nop
 80089dc:	3708      	adds	r7, #8
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop
 80089e4:	24004bf4 	.word	0x24004bf4
 80089e8:	24004720 	.word	0x24004720
 80089ec:	24004c00 	.word	0x24004c00
 80089f0:	24004c10 	.word	0x24004c10
 80089f4:	24004bfc 	.word	0x24004bfc
 80089f8:	24004724 	.word	0x24004724
 80089fc:	e000ed04 	.word	0xe000ed04

08008a00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d017      	beq.n	8008a42 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008a12:	4b13      	ldr	r3, [pc, #76]	; (8008a60 <vTaskDelay+0x60>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00a      	beq.n	8008a30 <vTaskDelay+0x30>
	__asm volatile
 8008a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a1e:	f383 8811 	msr	BASEPRI, r3
 8008a22:	f3bf 8f6f 	isb	sy
 8008a26:	f3bf 8f4f 	dsb	sy
 8008a2a:	60bb      	str	r3, [r7, #8]
}
 8008a2c:	bf00      	nop
 8008a2e:	e7fe      	b.n	8008a2e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008a30:	f000 f88a 	bl	8008b48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008a34:	2100      	movs	r1, #0
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 fcfe 	bl	8009438 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008a3c:	f000 f892 	bl	8008b64 <xTaskResumeAll>
 8008a40:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d107      	bne.n	8008a58 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008a48:	4b06      	ldr	r3, [pc, #24]	; (8008a64 <vTaskDelay+0x64>)
 8008a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a4e:	601a      	str	r2, [r3, #0]
 8008a50:	f3bf 8f4f 	dsb	sy
 8008a54:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a58:	bf00      	nop
 8008a5a:	3710      	adds	r7, #16
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}
 8008a60:	24004c1c 	.word	0x24004c1c
 8008a64:	e000ed04 	.word	0xe000ed04

08008a68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b08a      	sub	sp, #40	; 0x28
 8008a6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008a72:	2300      	movs	r3, #0
 8008a74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008a76:	463a      	mov	r2, r7
 8008a78:	1d39      	adds	r1, r7, #4
 8008a7a:	f107 0308 	add.w	r3, r7, #8
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7fe fbfc 	bl	800727c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008a84:	6839      	ldr	r1, [r7, #0]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	68ba      	ldr	r2, [r7, #8]
 8008a8a:	9202      	str	r2, [sp, #8]
 8008a8c:	9301      	str	r3, [sp, #4]
 8008a8e:	2300      	movs	r3, #0
 8008a90:	9300      	str	r3, [sp, #0]
 8008a92:	2300      	movs	r3, #0
 8008a94:	460a      	mov	r2, r1
 8008a96:	4924      	ldr	r1, [pc, #144]	; (8008b28 <vTaskStartScheduler+0xc0>)
 8008a98:	4824      	ldr	r0, [pc, #144]	; (8008b2c <vTaskStartScheduler+0xc4>)
 8008a9a:	f7ff fdf9 	bl	8008690 <xTaskCreateStatic>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	4a23      	ldr	r2, [pc, #140]	; (8008b30 <vTaskStartScheduler+0xc8>)
 8008aa2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008aa4:	4b22      	ldr	r3, [pc, #136]	; (8008b30 <vTaskStartScheduler+0xc8>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d002      	beq.n	8008ab2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008aac:	2301      	movs	r3, #1
 8008aae:	617b      	str	r3, [r7, #20]
 8008ab0:	e001      	b.n	8008ab6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d102      	bne.n	8008ac2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008abc:	f000 fd10 	bl	80094e0 <xTimerCreateTimerTask>
 8008ac0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d11b      	bne.n	8008b00 <vTaskStartScheduler+0x98>
	__asm volatile
 8008ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008acc:	f383 8811 	msr	BASEPRI, r3
 8008ad0:	f3bf 8f6f 	isb	sy
 8008ad4:	f3bf 8f4f 	dsb	sy
 8008ad8:	613b      	str	r3, [r7, #16]
}
 8008ada:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008adc:	4b15      	ldr	r3, [pc, #84]	; (8008b34 <vTaskStartScheduler+0xcc>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	3354      	adds	r3, #84	; 0x54
 8008ae2:	4a15      	ldr	r2, [pc, #84]	; (8008b38 <vTaskStartScheduler+0xd0>)
 8008ae4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008ae6:	4b15      	ldr	r3, [pc, #84]	; (8008b3c <vTaskStartScheduler+0xd4>)
 8008ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8008aec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008aee:	4b14      	ldr	r3, [pc, #80]	; (8008b40 <vTaskStartScheduler+0xd8>)
 8008af0:	2201      	movs	r2, #1
 8008af2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008af4:	4b13      	ldr	r3, [pc, #76]	; (8008b44 <vTaskStartScheduler+0xdc>)
 8008af6:	2200      	movs	r2, #0
 8008af8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008afa:	f7fe ff19 	bl	8007930 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008afe:	e00e      	b.n	8008b1e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b06:	d10a      	bne.n	8008b1e <vTaskStartScheduler+0xb6>
	__asm volatile
 8008b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b0c:	f383 8811 	msr	BASEPRI, r3
 8008b10:	f3bf 8f6f 	isb	sy
 8008b14:	f3bf 8f4f 	dsb	sy
 8008b18:	60fb      	str	r3, [r7, #12]
}
 8008b1a:	bf00      	nop
 8008b1c:	e7fe      	b.n	8008b1c <vTaskStartScheduler+0xb4>
}
 8008b1e:	bf00      	nop
 8008b20:	3718      	adds	r7, #24
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	0800a788 	.word	0x0800a788
 8008b2c:	0800916d 	.word	0x0800916d
 8008b30:	24004c18 	.word	0x24004c18
 8008b34:	24004720 	.word	0x24004720
 8008b38:	24000014 	.word	0x24000014
 8008b3c:	24004c14 	.word	0x24004c14
 8008b40:	24004c00 	.word	0x24004c00
 8008b44:	24004bf8 	.word	0x24004bf8

08008b48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008b48:	b480      	push	{r7}
 8008b4a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008b4c:	4b04      	ldr	r3, [pc, #16]	; (8008b60 <vTaskSuspendAll+0x18>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	3301      	adds	r3, #1
 8008b52:	4a03      	ldr	r2, [pc, #12]	; (8008b60 <vTaskSuspendAll+0x18>)
 8008b54:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008b56:	bf00      	nop
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr
 8008b60:	24004c1c 	.word	0x24004c1c

08008b64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008b72:	4b42      	ldr	r3, [pc, #264]	; (8008c7c <xTaskResumeAll+0x118>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d10a      	bne.n	8008b90 <xTaskResumeAll+0x2c>
	__asm volatile
 8008b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7e:	f383 8811 	msr	BASEPRI, r3
 8008b82:	f3bf 8f6f 	isb	sy
 8008b86:	f3bf 8f4f 	dsb	sy
 8008b8a:	603b      	str	r3, [r7, #0]
}
 8008b8c:	bf00      	nop
 8008b8e:	e7fe      	b.n	8008b8e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008b90:	f7fe ff70 	bl	8007a74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008b94:	4b39      	ldr	r3, [pc, #228]	; (8008c7c <xTaskResumeAll+0x118>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	3b01      	subs	r3, #1
 8008b9a:	4a38      	ldr	r2, [pc, #224]	; (8008c7c <xTaskResumeAll+0x118>)
 8008b9c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b9e:	4b37      	ldr	r3, [pc, #220]	; (8008c7c <xTaskResumeAll+0x118>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d162      	bne.n	8008c6c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008ba6:	4b36      	ldr	r3, [pc, #216]	; (8008c80 <xTaskResumeAll+0x11c>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d05e      	beq.n	8008c6c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008bae:	e02f      	b.n	8008c10 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bb0:	4b34      	ldr	r3, [pc, #208]	; (8008c84 <xTaskResumeAll+0x120>)
 8008bb2:	68db      	ldr	r3, [r3, #12]
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	3318      	adds	r3, #24
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7fe fe05 	bl	80077cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	3304      	adds	r3, #4
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7fe fe00 	bl	80077cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bd0:	4b2d      	ldr	r3, [pc, #180]	; (8008c88 <xTaskResumeAll+0x124>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d903      	bls.n	8008be0 <xTaskResumeAll+0x7c>
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bdc:	4a2a      	ldr	r2, [pc, #168]	; (8008c88 <xTaskResumeAll+0x124>)
 8008bde:	6013      	str	r3, [r2, #0]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008be4:	4613      	mov	r3, r2
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	4413      	add	r3, r2
 8008bea:	009b      	lsls	r3, r3, #2
 8008bec:	4a27      	ldr	r2, [pc, #156]	; (8008c8c <xTaskResumeAll+0x128>)
 8008bee:	441a      	add	r2, r3
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	3304      	adds	r3, #4
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	4610      	mov	r0, r2
 8008bf8:	f7fe fd8b 	bl	8007712 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c00:	4b23      	ldr	r3, [pc, #140]	; (8008c90 <xTaskResumeAll+0x12c>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d302      	bcc.n	8008c10 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008c0a:	4b22      	ldr	r3, [pc, #136]	; (8008c94 <xTaskResumeAll+0x130>)
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c10:	4b1c      	ldr	r3, [pc, #112]	; (8008c84 <xTaskResumeAll+0x120>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d1cb      	bne.n	8008bb0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d001      	beq.n	8008c22 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008c1e:	f000 fb5f 	bl	80092e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008c22:	4b1d      	ldr	r3, [pc, #116]	; (8008c98 <xTaskResumeAll+0x134>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d010      	beq.n	8008c50 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008c2e:	f000 f847 	bl	8008cc0 <xTaskIncrementTick>
 8008c32:	4603      	mov	r3, r0
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d002      	beq.n	8008c3e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008c38:	4b16      	ldr	r3, [pc, #88]	; (8008c94 <xTaskResumeAll+0x130>)
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	3b01      	subs	r3, #1
 8008c42:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d1f1      	bne.n	8008c2e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008c4a:	4b13      	ldr	r3, [pc, #76]	; (8008c98 <xTaskResumeAll+0x134>)
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008c50:	4b10      	ldr	r3, [pc, #64]	; (8008c94 <xTaskResumeAll+0x130>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d009      	beq.n	8008c6c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008c5c:	4b0f      	ldr	r3, [pc, #60]	; (8008c9c <xTaskResumeAll+0x138>)
 8008c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c62:	601a      	str	r2, [r3, #0]
 8008c64:	f3bf 8f4f 	dsb	sy
 8008c68:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c6c:	f7fe ff32 	bl	8007ad4 <vPortExitCritical>

	return xAlreadyYielded;
 8008c70:	68bb      	ldr	r3, [r7, #8]
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3710      	adds	r7, #16
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	24004c1c 	.word	0x24004c1c
 8008c80:	24004bf4 	.word	0x24004bf4
 8008c84:	24004bb4 	.word	0x24004bb4
 8008c88:	24004bfc 	.word	0x24004bfc
 8008c8c:	24004724 	.word	0x24004724
 8008c90:	24004720 	.word	0x24004720
 8008c94:	24004c08 	.word	0x24004c08
 8008c98:	24004c04 	.word	0x24004c04
 8008c9c:	e000ed04 	.word	0xe000ed04

08008ca0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008ca6:	4b05      	ldr	r3, [pc, #20]	; (8008cbc <xTaskGetTickCount+0x1c>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008cac:	687b      	ldr	r3, [r7, #4]
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	370c      	adds	r7, #12
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr
 8008cba:	bf00      	nop
 8008cbc:	24004bf8 	.word	0x24004bf8

08008cc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b086      	sub	sp, #24
 8008cc4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cca:	4b4f      	ldr	r3, [pc, #316]	; (8008e08 <xTaskIncrementTick+0x148>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	f040 808f 	bne.w	8008df2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008cd4:	4b4d      	ldr	r3, [pc, #308]	; (8008e0c <xTaskIncrementTick+0x14c>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	3301      	adds	r3, #1
 8008cda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008cdc:	4a4b      	ldr	r2, [pc, #300]	; (8008e0c <xTaskIncrementTick+0x14c>)
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d120      	bne.n	8008d2a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008ce8:	4b49      	ldr	r3, [pc, #292]	; (8008e10 <xTaskIncrementTick+0x150>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d00a      	beq.n	8008d08 <xTaskIncrementTick+0x48>
	__asm volatile
 8008cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf6:	f383 8811 	msr	BASEPRI, r3
 8008cfa:	f3bf 8f6f 	isb	sy
 8008cfe:	f3bf 8f4f 	dsb	sy
 8008d02:	603b      	str	r3, [r7, #0]
}
 8008d04:	bf00      	nop
 8008d06:	e7fe      	b.n	8008d06 <xTaskIncrementTick+0x46>
 8008d08:	4b41      	ldr	r3, [pc, #260]	; (8008e10 <xTaskIncrementTick+0x150>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	60fb      	str	r3, [r7, #12]
 8008d0e:	4b41      	ldr	r3, [pc, #260]	; (8008e14 <xTaskIncrementTick+0x154>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a3f      	ldr	r2, [pc, #252]	; (8008e10 <xTaskIncrementTick+0x150>)
 8008d14:	6013      	str	r3, [r2, #0]
 8008d16:	4a3f      	ldr	r2, [pc, #252]	; (8008e14 <xTaskIncrementTick+0x154>)
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6013      	str	r3, [r2, #0]
 8008d1c:	4b3e      	ldr	r3, [pc, #248]	; (8008e18 <xTaskIncrementTick+0x158>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	3301      	adds	r3, #1
 8008d22:	4a3d      	ldr	r2, [pc, #244]	; (8008e18 <xTaskIncrementTick+0x158>)
 8008d24:	6013      	str	r3, [r2, #0]
 8008d26:	f000 fadb 	bl	80092e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008d2a:	4b3c      	ldr	r3, [pc, #240]	; (8008e1c <xTaskIncrementTick+0x15c>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	693a      	ldr	r2, [r7, #16]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d349      	bcc.n	8008dc8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d34:	4b36      	ldr	r3, [pc, #216]	; (8008e10 <xTaskIncrementTick+0x150>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d104      	bne.n	8008d48 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d3e:	4b37      	ldr	r3, [pc, #220]	; (8008e1c <xTaskIncrementTick+0x15c>)
 8008d40:	f04f 32ff 	mov.w	r2, #4294967295
 8008d44:	601a      	str	r2, [r3, #0]
					break;
 8008d46:	e03f      	b.n	8008dc8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d48:	4b31      	ldr	r3, [pc, #196]	; (8008e10 <xTaskIncrementTick+0x150>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	68db      	ldr	r3, [r3, #12]
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008d58:	693a      	ldr	r2, [r7, #16]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d203      	bcs.n	8008d68 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008d60:	4a2e      	ldr	r2, [pc, #184]	; (8008e1c <xTaskIncrementTick+0x15c>)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008d66:	e02f      	b.n	8008dc8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	3304      	adds	r3, #4
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f7fe fd2d 	bl	80077cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d004      	beq.n	8008d84 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	3318      	adds	r3, #24
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f7fe fd24 	bl	80077cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d88:	4b25      	ldr	r3, [pc, #148]	; (8008e20 <xTaskIncrementTick+0x160>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d903      	bls.n	8008d98 <xTaskIncrementTick+0xd8>
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d94:	4a22      	ldr	r2, [pc, #136]	; (8008e20 <xTaskIncrementTick+0x160>)
 8008d96:	6013      	str	r3, [r2, #0]
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d9c:	4613      	mov	r3, r2
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	4413      	add	r3, r2
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	4a1f      	ldr	r2, [pc, #124]	; (8008e24 <xTaskIncrementTick+0x164>)
 8008da6:	441a      	add	r2, r3
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	3304      	adds	r3, #4
 8008dac:	4619      	mov	r1, r3
 8008dae:	4610      	mov	r0, r2
 8008db0:	f7fe fcaf 	bl	8007712 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008db8:	4b1b      	ldr	r3, [pc, #108]	; (8008e28 <xTaskIncrementTick+0x168>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d3b8      	bcc.n	8008d34 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008dc6:	e7b5      	b.n	8008d34 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008dc8:	4b17      	ldr	r3, [pc, #92]	; (8008e28 <xTaskIncrementTick+0x168>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dce:	4915      	ldr	r1, [pc, #84]	; (8008e24 <xTaskIncrementTick+0x164>)
 8008dd0:	4613      	mov	r3, r2
 8008dd2:	009b      	lsls	r3, r3, #2
 8008dd4:	4413      	add	r3, r2
 8008dd6:	009b      	lsls	r3, r3, #2
 8008dd8:	440b      	add	r3, r1
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d901      	bls.n	8008de4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008de0:	2301      	movs	r3, #1
 8008de2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008de4:	4b11      	ldr	r3, [pc, #68]	; (8008e2c <xTaskIncrementTick+0x16c>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d007      	beq.n	8008dfc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008dec:	2301      	movs	r3, #1
 8008dee:	617b      	str	r3, [r7, #20]
 8008df0:	e004      	b.n	8008dfc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008df2:	4b0f      	ldr	r3, [pc, #60]	; (8008e30 <xTaskIncrementTick+0x170>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	3301      	adds	r3, #1
 8008df8:	4a0d      	ldr	r2, [pc, #52]	; (8008e30 <xTaskIncrementTick+0x170>)
 8008dfa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008dfc:	697b      	ldr	r3, [r7, #20]
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3718      	adds	r7, #24
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	bf00      	nop
 8008e08:	24004c1c 	.word	0x24004c1c
 8008e0c:	24004bf8 	.word	0x24004bf8
 8008e10:	24004bac 	.word	0x24004bac
 8008e14:	24004bb0 	.word	0x24004bb0
 8008e18:	24004c0c 	.word	0x24004c0c
 8008e1c:	24004c14 	.word	0x24004c14
 8008e20:	24004bfc 	.word	0x24004bfc
 8008e24:	24004724 	.word	0x24004724
 8008e28:	24004720 	.word	0x24004720
 8008e2c:	24004c08 	.word	0x24004c08
 8008e30:	24004c04 	.word	0x24004c04

08008e34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008e34:	b480      	push	{r7}
 8008e36:	b085      	sub	sp, #20
 8008e38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008e3a:	4b2a      	ldr	r3, [pc, #168]	; (8008ee4 <vTaskSwitchContext+0xb0>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d003      	beq.n	8008e4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008e42:	4b29      	ldr	r3, [pc, #164]	; (8008ee8 <vTaskSwitchContext+0xb4>)
 8008e44:	2201      	movs	r2, #1
 8008e46:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008e48:	e046      	b.n	8008ed8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008e4a:	4b27      	ldr	r3, [pc, #156]	; (8008ee8 <vTaskSwitchContext+0xb4>)
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e50:	4b26      	ldr	r3, [pc, #152]	; (8008eec <vTaskSwitchContext+0xb8>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	60fb      	str	r3, [r7, #12]
 8008e56:	e010      	b.n	8008e7a <vTaskSwitchContext+0x46>
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d10a      	bne.n	8008e74 <vTaskSwitchContext+0x40>
	__asm volatile
 8008e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e62:	f383 8811 	msr	BASEPRI, r3
 8008e66:	f3bf 8f6f 	isb	sy
 8008e6a:	f3bf 8f4f 	dsb	sy
 8008e6e:	607b      	str	r3, [r7, #4]
}
 8008e70:	bf00      	nop
 8008e72:	e7fe      	b.n	8008e72 <vTaskSwitchContext+0x3e>
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	3b01      	subs	r3, #1
 8008e78:	60fb      	str	r3, [r7, #12]
 8008e7a:	491d      	ldr	r1, [pc, #116]	; (8008ef0 <vTaskSwitchContext+0xbc>)
 8008e7c:	68fa      	ldr	r2, [r7, #12]
 8008e7e:	4613      	mov	r3, r2
 8008e80:	009b      	lsls	r3, r3, #2
 8008e82:	4413      	add	r3, r2
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	440b      	add	r3, r1
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d0e4      	beq.n	8008e58 <vTaskSwitchContext+0x24>
 8008e8e:	68fa      	ldr	r2, [r7, #12]
 8008e90:	4613      	mov	r3, r2
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	4413      	add	r3, r2
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	4a15      	ldr	r2, [pc, #84]	; (8008ef0 <vTaskSwitchContext+0xbc>)
 8008e9a:	4413      	add	r3, r2
 8008e9c:	60bb      	str	r3, [r7, #8]
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	685a      	ldr	r2, [r3, #4]
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	605a      	str	r2, [r3, #4]
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	685a      	ldr	r2, [r3, #4]
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	3308      	adds	r3, #8
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d104      	bne.n	8008ebe <vTaskSwitchContext+0x8a>
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	685a      	ldr	r2, [r3, #4]
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	605a      	str	r2, [r3, #4]
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	68db      	ldr	r3, [r3, #12]
 8008ec4:	4a0b      	ldr	r2, [pc, #44]	; (8008ef4 <vTaskSwitchContext+0xc0>)
 8008ec6:	6013      	str	r3, [r2, #0]
 8008ec8:	4a08      	ldr	r2, [pc, #32]	; (8008eec <vTaskSwitchContext+0xb8>)
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ece:	4b09      	ldr	r3, [pc, #36]	; (8008ef4 <vTaskSwitchContext+0xc0>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	3354      	adds	r3, #84	; 0x54
 8008ed4:	4a08      	ldr	r2, [pc, #32]	; (8008ef8 <vTaskSwitchContext+0xc4>)
 8008ed6:	6013      	str	r3, [r2, #0]
}
 8008ed8:	bf00      	nop
 8008eda:	3714      	adds	r7, #20
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr
 8008ee4:	24004c1c 	.word	0x24004c1c
 8008ee8:	24004c08 	.word	0x24004c08
 8008eec:	24004bfc 	.word	0x24004bfc
 8008ef0:	24004724 	.word	0x24004724
 8008ef4:	24004720 	.word	0x24004720
 8008ef8:	24000014 	.word	0x24000014

08008efc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d10a      	bne.n	8008f22 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f10:	f383 8811 	msr	BASEPRI, r3
 8008f14:	f3bf 8f6f 	isb	sy
 8008f18:	f3bf 8f4f 	dsb	sy
 8008f1c:	60fb      	str	r3, [r7, #12]
}
 8008f1e:	bf00      	nop
 8008f20:	e7fe      	b.n	8008f20 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f22:	4b07      	ldr	r3, [pc, #28]	; (8008f40 <vTaskPlaceOnEventList+0x44>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	3318      	adds	r3, #24
 8008f28:	4619      	mov	r1, r3
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f7fe fc15 	bl	800775a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008f30:	2101      	movs	r1, #1
 8008f32:	6838      	ldr	r0, [r7, #0]
 8008f34:	f000 fa80 	bl	8009438 <prvAddCurrentTaskToDelayedList>
}
 8008f38:	bf00      	nop
 8008f3a:	3710      	adds	r7, #16
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}
 8008f40:	24004720 	.word	0x24004720

08008f44 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b086      	sub	sp, #24
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	60f8      	str	r0, [r7, #12]
 8008f4c:	60b9      	str	r1, [r7, #8]
 8008f4e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d10a      	bne.n	8008f6c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5a:	f383 8811 	msr	BASEPRI, r3
 8008f5e:	f3bf 8f6f 	isb	sy
 8008f62:	f3bf 8f4f 	dsb	sy
 8008f66:	617b      	str	r3, [r7, #20]
}
 8008f68:	bf00      	nop
 8008f6a:	e7fe      	b.n	8008f6a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f6c:	4b0a      	ldr	r3, [pc, #40]	; (8008f98 <vTaskPlaceOnEventListRestricted+0x54>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	3318      	adds	r3, #24
 8008f72:	4619      	mov	r1, r3
 8008f74:	68f8      	ldr	r0, [r7, #12]
 8008f76:	f7fe fbcc 	bl	8007712 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d002      	beq.n	8008f86 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008f80:	f04f 33ff 	mov.w	r3, #4294967295
 8008f84:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008f86:	6879      	ldr	r1, [r7, #4]
 8008f88:	68b8      	ldr	r0, [r7, #8]
 8008f8a:	f000 fa55 	bl	8009438 <prvAddCurrentTaskToDelayedList>
	}
 8008f8e:	bf00      	nop
 8008f90:	3718      	adds	r7, #24
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	24004720 	.word	0x24004720

08008f9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b086      	sub	sp, #24
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	68db      	ldr	r3, [r3, #12]
 8008fa8:	68db      	ldr	r3, [r3, #12]
 8008faa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d10a      	bne.n	8008fc8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb6:	f383 8811 	msr	BASEPRI, r3
 8008fba:	f3bf 8f6f 	isb	sy
 8008fbe:	f3bf 8f4f 	dsb	sy
 8008fc2:	60fb      	str	r3, [r7, #12]
}
 8008fc4:	bf00      	nop
 8008fc6:	e7fe      	b.n	8008fc6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	3318      	adds	r3, #24
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f7fe fbfd 	bl	80077cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fd2:	4b1e      	ldr	r3, [pc, #120]	; (800904c <xTaskRemoveFromEventList+0xb0>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d11d      	bne.n	8009016 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	3304      	adds	r3, #4
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f7fe fbf4 	bl	80077cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fe8:	4b19      	ldr	r3, [pc, #100]	; (8009050 <xTaskRemoveFromEventList+0xb4>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d903      	bls.n	8008ff8 <xTaskRemoveFromEventList+0x5c>
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff4:	4a16      	ldr	r2, [pc, #88]	; (8009050 <xTaskRemoveFromEventList+0xb4>)
 8008ff6:	6013      	str	r3, [r2, #0]
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ffc:	4613      	mov	r3, r2
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	4413      	add	r3, r2
 8009002:	009b      	lsls	r3, r3, #2
 8009004:	4a13      	ldr	r2, [pc, #76]	; (8009054 <xTaskRemoveFromEventList+0xb8>)
 8009006:	441a      	add	r2, r3
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	3304      	adds	r3, #4
 800900c:	4619      	mov	r1, r3
 800900e:	4610      	mov	r0, r2
 8009010:	f7fe fb7f 	bl	8007712 <vListInsertEnd>
 8009014:	e005      	b.n	8009022 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	3318      	adds	r3, #24
 800901a:	4619      	mov	r1, r3
 800901c:	480e      	ldr	r0, [pc, #56]	; (8009058 <xTaskRemoveFromEventList+0xbc>)
 800901e:	f7fe fb78 	bl	8007712 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009026:	4b0d      	ldr	r3, [pc, #52]	; (800905c <xTaskRemoveFromEventList+0xc0>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800902c:	429a      	cmp	r2, r3
 800902e:	d905      	bls.n	800903c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009030:	2301      	movs	r3, #1
 8009032:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009034:	4b0a      	ldr	r3, [pc, #40]	; (8009060 <xTaskRemoveFromEventList+0xc4>)
 8009036:	2201      	movs	r2, #1
 8009038:	601a      	str	r2, [r3, #0]
 800903a:	e001      	b.n	8009040 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800903c:	2300      	movs	r3, #0
 800903e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009040:	697b      	ldr	r3, [r7, #20]
}
 8009042:	4618      	mov	r0, r3
 8009044:	3718      	adds	r7, #24
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}
 800904a:	bf00      	nop
 800904c:	24004c1c 	.word	0x24004c1c
 8009050:	24004bfc 	.word	0x24004bfc
 8009054:	24004724 	.word	0x24004724
 8009058:	24004bb4 	.word	0x24004bb4
 800905c:	24004720 	.word	0x24004720
 8009060:	24004c08 	.word	0x24004c08

08009064 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009064:	b480      	push	{r7}
 8009066:	b083      	sub	sp, #12
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800906c:	4b06      	ldr	r3, [pc, #24]	; (8009088 <vTaskInternalSetTimeOutState+0x24>)
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009074:	4b05      	ldr	r3, [pc, #20]	; (800908c <vTaskInternalSetTimeOutState+0x28>)
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	605a      	str	r2, [r3, #4]
}
 800907c:	bf00      	nop
 800907e:	370c      	adds	r7, #12
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr
 8009088:	24004c0c 	.word	0x24004c0c
 800908c:	24004bf8 	.word	0x24004bf8

08009090 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b088      	sub	sp, #32
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d10a      	bne.n	80090b6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80090a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a4:	f383 8811 	msr	BASEPRI, r3
 80090a8:	f3bf 8f6f 	isb	sy
 80090ac:	f3bf 8f4f 	dsb	sy
 80090b0:	613b      	str	r3, [r7, #16]
}
 80090b2:	bf00      	nop
 80090b4:	e7fe      	b.n	80090b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d10a      	bne.n	80090d2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80090bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c0:	f383 8811 	msr	BASEPRI, r3
 80090c4:	f3bf 8f6f 	isb	sy
 80090c8:	f3bf 8f4f 	dsb	sy
 80090cc:	60fb      	str	r3, [r7, #12]
}
 80090ce:	bf00      	nop
 80090d0:	e7fe      	b.n	80090d0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80090d2:	f7fe fccf 	bl	8007a74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80090d6:	4b1d      	ldr	r3, [pc, #116]	; (800914c <xTaskCheckForTimeOut+0xbc>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	69ba      	ldr	r2, [r7, #24]
 80090e2:	1ad3      	subs	r3, r2, r3
 80090e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ee:	d102      	bne.n	80090f6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80090f0:	2300      	movs	r3, #0
 80090f2:	61fb      	str	r3, [r7, #28]
 80090f4:	e023      	b.n	800913e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	4b15      	ldr	r3, [pc, #84]	; (8009150 <xTaskCheckForTimeOut+0xc0>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	429a      	cmp	r2, r3
 8009100:	d007      	beq.n	8009112 <xTaskCheckForTimeOut+0x82>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	69ba      	ldr	r2, [r7, #24]
 8009108:	429a      	cmp	r2, r3
 800910a:	d302      	bcc.n	8009112 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800910c:	2301      	movs	r3, #1
 800910e:	61fb      	str	r3, [r7, #28]
 8009110:	e015      	b.n	800913e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	697a      	ldr	r2, [r7, #20]
 8009118:	429a      	cmp	r2, r3
 800911a:	d20b      	bcs.n	8009134 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	1ad2      	subs	r2, r2, r3
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f7ff ff9b 	bl	8009064 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800912e:	2300      	movs	r3, #0
 8009130:	61fb      	str	r3, [r7, #28]
 8009132:	e004      	b.n	800913e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	2200      	movs	r2, #0
 8009138:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800913a:	2301      	movs	r3, #1
 800913c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800913e:	f7fe fcc9 	bl	8007ad4 <vPortExitCritical>

	return xReturn;
 8009142:	69fb      	ldr	r3, [r7, #28]
}
 8009144:	4618      	mov	r0, r3
 8009146:	3720      	adds	r7, #32
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}
 800914c:	24004bf8 	.word	0x24004bf8
 8009150:	24004c0c 	.word	0x24004c0c

08009154 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009154:	b480      	push	{r7}
 8009156:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009158:	4b03      	ldr	r3, [pc, #12]	; (8009168 <vTaskMissedYield+0x14>)
 800915a:	2201      	movs	r2, #1
 800915c:	601a      	str	r2, [r3, #0]
}
 800915e:	bf00      	nop
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr
 8009168:	24004c08 	.word	0x24004c08

0800916c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b082      	sub	sp, #8
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009174:	f000 f852 	bl	800921c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009178:	4b06      	ldr	r3, [pc, #24]	; (8009194 <prvIdleTask+0x28>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	2b01      	cmp	r3, #1
 800917e:	d9f9      	bls.n	8009174 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009180:	4b05      	ldr	r3, [pc, #20]	; (8009198 <prvIdleTask+0x2c>)
 8009182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009186:	601a      	str	r2, [r3, #0]
 8009188:	f3bf 8f4f 	dsb	sy
 800918c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009190:	e7f0      	b.n	8009174 <prvIdleTask+0x8>
 8009192:	bf00      	nop
 8009194:	24004724 	.word	0x24004724
 8009198:	e000ed04 	.word	0xe000ed04

0800919c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80091a2:	2300      	movs	r3, #0
 80091a4:	607b      	str	r3, [r7, #4]
 80091a6:	e00c      	b.n	80091c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80091a8:	687a      	ldr	r2, [r7, #4]
 80091aa:	4613      	mov	r3, r2
 80091ac:	009b      	lsls	r3, r3, #2
 80091ae:	4413      	add	r3, r2
 80091b0:	009b      	lsls	r3, r3, #2
 80091b2:	4a12      	ldr	r2, [pc, #72]	; (80091fc <prvInitialiseTaskLists+0x60>)
 80091b4:	4413      	add	r3, r2
 80091b6:	4618      	mov	r0, r3
 80091b8:	f7fe fa7e 	bl	80076b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	3301      	adds	r3, #1
 80091c0:	607b      	str	r3, [r7, #4]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2b37      	cmp	r3, #55	; 0x37
 80091c6:	d9ef      	bls.n	80091a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80091c8:	480d      	ldr	r0, [pc, #52]	; (8009200 <prvInitialiseTaskLists+0x64>)
 80091ca:	f7fe fa75 	bl	80076b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80091ce:	480d      	ldr	r0, [pc, #52]	; (8009204 <prvInitialiseTaskLists+0x68>)
 80091d0:	f7fe fa72 	bl	80076b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80091d4:	480c      	ldr	r0, [pc, #48]	; (8009208 <prvInitialiseTaskLists+0x6c>)
 80091d6:	f7fe fa6f 	bl	80076b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80091da:	480c      	ldr	r0, [pc, #48]	; (800920c <prvInitialiseTaskLists+0x70>)
 80091dc:	f7fe fa6c 	bl	80076b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80091e0:	480b      	ldr	r0, [pc, #44]	; (8009210 <prvInitialiseTaskLists+0x74>)
 80091e2:	f7fe fa69 	bl	80076b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80091e6:	4b0b      	ldr	r3, [pc, #44]	; (8009214 <prvInitialiseTaskLists+0x78>)
 80091e8:	4a05      	ldr	r2, [pc, #20]	; (8009200 <prvInitialiseTaskLists+0x64>)
 80091ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80091ec:	4b0a      	ldr	r3, [pc, #40]	; (8009218 <prvInitialiseTaskLists+0x7c>)
 80091ee:	4a05      	ldr	r2, [pc, #20]	; (8009204 <prvInitialiseTaskLists+0x68>)
 80091f0:	601a      	str	r2, [r3, #0]
}
 80091f2:	bf00      	nop
 80091f4:	3708      	adds	r7, #8
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
 80091fa:	bf00      	nop
 80091fc:	24004724 	.word	0x24004724
 8009200:	24004b84 	.word	0x24004b84
 8009204:	24004b98 	.word	0x24004b98
 8009208:	24004bb4 	.word	0x24004bb4
 800920c:	24004bc8 	.word	0x24004bc8
 8009210:	24004be0 	.word	0x24004be0
 8009214:	24004bac 	.word	0x24004bac
 8009218:	24004bb0 	.word	0x24004bb0

0800921c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009222:	e019      	b.n	8009258 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009224:	f7fe fc26 	bl	8007a74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009228:	4b10      	ldr	r3, [pc, #64]	; (800926c <prvCheckTasksWaitingTermination+0x50>)
 800922a:	68db      	ldr	r3, [r3, #12]
 800922c:	68db      	ldr	r3, [r3, #12]
 800922e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	3304      	adds	r3, #4
 8009234:	4618      	mov	r0, r3
 8009236:	f7fe fac9 	bl	80077cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800923a:	4b0d      	ldr	r3, [pc, #52]	; (8009270 <prvCheckTasksWaitingTermination+0x54>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	3b01      	subs	r3, #1
 8009240:	4a0b      	ldr	r2, [pc, #44]	; (8009270 <prvCheckTasksWaitingTermination+0x54>)
 8009242:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009244:	4b0b      	ldr	r3, [pc, #44]	; (8009274 <prvCheckTasksWaitingTermination+0x58>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	3b01      	subs	r3, #1
 800924a:	4a0a      	ldr	r2, [pc, #40]	; (8009274 <prvCheckTasksWaitingTermination+0x58>)
 800924c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800924e:	f7fe fc41 	bl	8007ad4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 f810 	bl	8009278 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009258:	4b06      	ldr	r3, [pc, #24]	; (8009274 <prvCheckTasksWaitingTermination+0x58>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d1e1      	bne.n	8009224 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009260:	bf00      	nop
 8009262:	bf00      	nop
 8009264:	3708      	adds	r7, #8
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
 800926a:	bf00      	nop
 800926c:	24004bc8 	.word	0x24004bc8
 8009270:	24004bf4 	.word	0x24004bf4
 8009274:	24004bdc 	.word	0x24004bdc

08009278 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	3354      	adds	r3, #84	; 0x54
 8009284:	4618      	mov	r0, r3
 8009286:	f000 fecb 	bl	800a020 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009290:	2b00      	cmp	r3, #0
 8009292:	d108      	bne.n	80092a6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009298:	4618      	mov	r0, r3
 800929a:	f7fe f8ef 	bl	800747c <vPortFree>
				vPortFree( pxTCB );
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f7fe f8ec 	bl	800747c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80092a4:	e018      	b.n	80092d8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d103      	bne.n	80092b8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f7fe f8e3 	bl	800747c <vPortFree>
	}
 80092b6:	e00f      	b.n	80092d8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80092be:	2b02      	cmp	r3, #2
 80092c0:	d00a      	beq.n	80092d8 <prvDeleteTCB+0x60>
	__asm volatile
 80092c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c6:	f383 8811 	msr	BASEPRI, r3
 80092ca:	f3bf 8f6f 	isb	sy
 80092ce:	f3bf 8f4f 	dsb	sy
 80092d2:	60fb      	str	r3, [r7, #12]
}
 80092d4:	bf00      	nop
 80092d6:	e7fe      	b.n	80092d6 <prvDeleteTCB+0x5e>
	}
 80092d8:	bf00      	nop
 80092da:	3710      	adds	r7, #16
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80092e0:	b480      	push	{r7}
 80092e2:	b083      	sub	sp, #12
 80092e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092e6:	4b0c      	ldr	r3, [pc, #48]	; (8009318 <prvResetNextTaskUnblockTime+0x38>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d104      	bne.n	80092fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80092f0:	4b0a      	ldr	r3, [pc, #40]	; (800931c <prvResetNextTaskUnblockTime+0x3c>)
 80092f2:	f04f 32ff 	mov.w	r2, #4294967295
 80092f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80092f8:	e008      	b.n	800930c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092fa:	4b07      	ldr	r3, [pc, #28]	; (8009318 <prvResetNextTaskUnblockTime+0x38>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	68db      	ldr	r3, [r3, #12]
 8009302:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	4a04      	ldr	r2, [pc, #16]	; (800931c <prvResetNextTaskUnblockTime+0x3c>)
 800930a:	6013      	str	r3, [r2, #0]
}
 800930c:	bf00      	nop
 800930e:	370c      	adds	r7, #12
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr
 8009318:	24004bac 	.word	0x24004bac
 800931c:	24004c14 	.word	0x24004c14

08009320 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009326:	4b0b      	ldr	r3, [pc, #44]	; (8009354 <xTaskGetSchedulerState+0x34>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d102      	bne.n	8009334 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800932e:	2301      	movs	r3, #1
 8009330:	607b      	str	r3, [r7, #4]
 8009332:	e008      	b.n	8009346 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009334:	4b08      	ldr	r3, [pc, #32]	; (8009358 <xTaskGetSchedulerState+0x38>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d102      	bne.n	8009342 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800933c:	2302      	movs	r3, #2
 800933e:	607b      	str	r3, [r7, #4]
 8009340:	e001      	b.n	8009346 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009342:	2300      	movs	r3, #0
 8009344:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009346:	687b      	ldr	r3, [r7, #4]
	}
 8009348:	4618      	mov	r0, r3
 800934a:	370c      	adds	r7, #12
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr
 8009354:	24004c00 	.word	0x24004c00
 8009358:	24004c1c 	.word	0x24004c1c

0800935c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800935c:	b580      	push	{r7, lr}
 800935e:	b086      	sub	sp, #24
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009368:	2300      	movs	r3, #0
 800936a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d056      	beq.n	8009420 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009372:	4b2e      	ldr	r3, [pc, #184]	; (800942c <xTaskPriorityDisinherit+0xd0>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	693a      	ldr	r2, [r7, #16]
 8009378:	429a      	cmp	r2, r3
 800937a:	d00a      	beq.n	8009392 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800937c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009380:	f383 8811 	msr	BASEPRI, r3
 8009384:	f3bf 8f6f 	isb	sy
 8009388:	f3bf 8f4f 	dsb	sy
 800938c:	60fb      	str	r3, [r7, #12]
}
 800938e:	bf00      	nop
 8009390:	e7fe      	b.n	8009390 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009396:	2b00      	cmp	r3, #0
 8009398:	d10a      	bne.n	80093b0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800939a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800939e:	f383 8811 	msr	BASEPRI, r3
 80093a2:	f3bf 8f6f 	isb	sy
 80093a6:	f3bf 8f4f 	dsb	sy
 80093aa:	60bb      	str	r3, [r7, #8]
}
 80093ac:	bf00      	nop
 80093ae:	e7fe      	b.n	80093ae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093b4:	1e5a      	subs	r2, r3, #1
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d02c      	beq.n	8009420 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d128      	bne.n	8009420 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	3304      	adds	r3, #4
 80093d2:	4618      	mov	r0, r3
 80093d4:	f7fe f9fa 	bl	80077cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093f0:	4b0f      	ldr	r3, [pc, #60]	; (8009430 <xTaskPriorityDisinherit+0xd4>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d903      	bls.n	8009400 <xTaskPriorityDisinherit+0xa4>
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093fc:	4a0c      	ldr	r2, [pc, #48]	; (8009430 <xTaskPriorityDisinherit+0xd4>)
 80093fe:	6013      	str	r3, [r2, #0]
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009404:	4613      	mov	r3, r2
 8009406:	009b      	lsls	r3, r3, #2
 8009408:	4413      	add	r3, r2
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	4a09      	ldr	r2, [pc, #36]	; (8009434 <xTaskPriorityDisinherit+0xd8>)
 800940e:	441a      	add	r2, r3
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	3304      	adds	r3, #4
 8009414:	4619      	mov	r1, r3
 8009416:	4610      	mov	r0, r2
 8009418:	f7fe f97b 	bl	8007712 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800941c:	2301      	movs	r3, #1
 800941e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009420:	697b      	ldr	r3, [r7, #20]
	}
 8009422:	4618      	mov	r0, r3
 8009424:	3718      	adds	r7, #24
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
 800942a:	bf00      	nop
 800942c:	24004720 	.word	0x24004720
 8009430:	24004bfc 	.word	0x24004bfc
 8009434:	24004724 	.word	0x24004724

08009438 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b084      	sub	sp, #16
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009442:	4b21      	ldr	r3, [pc, #132]	; (80094c8 <prvAddCurrentTaskToDelayedList+0x90>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009448:	4b20      	ldr	r3, [pc, #128]	; (80094cc <prvAddCurrentTaskToDelayedList+0x94>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	3304      	adds	r3, #4
 800944e:	4618      	mov	r0, r3
 8009450:	f7fe f9bc 	bl	80077cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800945a:	d10a      	bne.n	8009472 <prvAddCurrentTaskToDelayedList+0x3a>
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d007      	beq.n	8009472 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009462:	4b1a      	ldr	r3, [pc, #104]	; (80094cc <prvAddCurrentTaskToDelayedList+0x94>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	3304      	adds	r3, #4
 8009468:	4619      	mov	r1, r3
 800946a:	4819      	ldr	r0, [pc, #100]	; (80094d0 <prvAddCurrentTaskToDelayedList+0x98>)
 800946c:	f7fe f951 	bl	8007712 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009470:	e026      	b.n	80094c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009472:	68fa      	ldr	r2, [r7, #12]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	4413      	add	r3, r2
 8009478:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800947a:	4b14      	ldr	r3, [pc, #80]	; (80094cc <prvAddCurrentTaskToDelayedList+0x94>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	68ba      	ldr	r2, [r7, #8]
 8009480:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009482:	68ba      	ldr	r2, [r7, #8]
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	429a      	cmp	r2, r3
 8009488:	d209      	bcs.n	800949e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800948a:	4b12      	ldr	r3, [pc, #72]	; (80094d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	4b0f      	ldr	r3, [pc, #60]	; (80094cc <prvAddCurrentTaskToDelayedList+0x94>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	3304      	adds	r3, #4
 8009494:	4619      	mov	r1, r3
 8009496:	4610      	mov	r0, r2
 8009498:	f7fe f95f 	bl	800775a <vListInsert>
}
 800949c:	e010      	b.n	80094c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800949e:	4b0e      	ldr	r3, [pc, #56]	; (80094d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80094a0:	681a      	ldr	r2, [r3, #0]
 80094a2:	4b0a      	ldr	r3, [pc, #40]	; (80094cc <prvAddCurrentTaskToDelayedList+0x94>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	3304      	adds	r3, #4
 80094a8:	4619      	mov	r1, r3
 80094aa:	4610      	mov	r0, r2
 80094ac:	f7fe f955 	bl	800775a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80094b0:	4b0a      	ldr	r3, [pc, #40]	; (80094dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	68ba      	ldr	r2, [r7, #8]
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d202      	bcs.n	80094c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80094ba:	4a08      	ldr	r2, [pc, #32]	; (80094dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	6013      	str	r3, [r2, #0]
}
 80094c0:	bf00      	nop
 80094c2:	3710      	adds	r7, #16
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	24004bf8 	.word	0x24004bf8
 80094cc:	24004720 	.word	0x24004720
 80094d0:	24004be0 	.word	0x24004be0
 80094d4:	24004bb0 	.word	0x24004bb0
 80094d8:	24004bac 	.word	0x24004bac
 80094dc:	24004c14 	.word	0x24004c14

080094e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b08a      	sub	sp, #40	; 0x28
 80094e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80094e6:	2300      	movs	r3, #0
 80094e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80094ea:	f000 fb07 	bl	8009afc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80094ee:	4b1c      	ldr	r3, [pc, #112]	; (8009560 <xTimerCreateTimerTask+0x80>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d021      	beq.n	800953a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80094f6:	2300      	movs	r3, #0
 80094f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80094fa:	2300      	movs	r3, #0
 80094fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80094fe:	1d3a      	adds	r2, r7, #4
 8009500:	f107 0108 	add.w	r1, r7, #8
 8009504:	f107 030c 	add.w	r3, r7, #12
 8009508:	4618      	mov	r0, r3
 800950a:	f7fd fed1 	bl	80072b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800950e:	6879      	ldr	r1, [r7, #4]
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	68fa      	ldr	r2, [r7, #12]
 8009514:	9202      	str	r2, [sp, #8]
 8009516:	9301      	str	r3, [sp, #4]
 8009518:	2302      	movs	r3, #2
 800951a:	9300      	str	r3, [sp, #0]
 800951c:	2300      	movs	r3, #0
 800951e:	460a      	mov	r2, r1
 8009520:	4910      	ldr	r1, [pc, #64]	; (8009564 <xTimerCreateTimerTask+0x84>)
 8009522:	4811      	ldr	r0, [pc, #68]	; (8009568 <xTimerCreateTimerTask+0x88>)
 8009524:	f7ff f8b4 	bl	8008690 <xTaskCreateStatic>
 8009528:	4603      	mov	r3, r0
 800952a:	4a10      	ldr	r2, [pc, #64]	; (800956c <xTimerCreateTimerTask+0x8c>)
 800952c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800952e:	4b0f      	ldr	r3, [pc, #60]	; (800956c <xTimerCreateTimerTask+0x8c>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d001      	beq.n	800953a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009536:	2301      	movs	r3, #1
 8009538:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d10a      	bne.n	8009556 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009544:	f383 8811 	msr	BASEPRI, r3
 8009548:	f3bf 8f6f 	isb	sy
 800954c:	f3bf 8f4f 	dsb	sy
 8009550:	613b      	str	r3, [r7, #16]
}
 8009552:	bf00      	nop
 8009554:	e7fe      	b.n	8009554 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009556:	697b      	ldr	r3, [r7, #20]
}
 8009558:	4618      	mov	r0, r3
 800955a:	3718      	adds	r7, #24
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}
 8009560:	24004c50 	.word	0x24004c50
 8009564:	0800a790 	.word	0x0800a790
 8009568:	080096a5 	.word	0x080096a5
 800956c:	24004c54 	.word	0x24004c54

08009570 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b08a      	sub	sp, #40	; 0x28
 8009574:	af00      	add	r7, sp, #0
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	60b9      	str	r1, [r7, #8]
 800957a:	607a      	str	r2, [r7, #4]
 800957c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800957e:	2300      	movs	r3, #0
 8009580:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d10a      	bne.n	800959e <xTimerGenericCommand+0x2e>
	__asm volatile
 8009588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958c:	f383 8811 	msr	BASEPRI, r3
 8009590:	f3bf 8f6f 	isb	sy
 8009594:	f3bf 8f4f 	dsb	sy
 8009598:	623b      	str	r3, [r7, #32]
}
 800959a:	bf00      	nop
 800959c:	e7fe      	b.n	800959c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800959e:	4b1a      	ldr	r3, [pc, #104]	; (8009608 <xTimerGenericCommand+0x98>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d02a      	beq.n	80095fc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	2b05      	cmp	r3, #5
 80095b6:	dc18      	bgt.n	80095ea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80095b8:	f7ff feb2 	bl	8009320 <xTaskGetSchedulerState>
 80095bc:	4603      	mov	r3, r0
 80095be:	2b02      	cmp	r3, #2
 80095c0:	d109      	bne.n	80095d6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80095c2:	4b11      	ldr	r3, [pc, #68]	; (8009608 <xTimerGenericCommand+0x98>)
 80095c4:	6818      	ldr	r0, [r3, #0]
 80095c6:	f107 0110 	add.w	r1, r7, #16
 80095ca:	2300      	movs	r3, #0
 80095cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095ce:	f7fe fc77 	bl	8007ec0 <xQueueGenericSend>
 80095d2:	6278      	str	r0, [r7, #36]	; 0x24
 80095d4:	e012      	b.n	80095fc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80095d6:	4b0c      	ldr	r3, [pc, #48]	; (8009608 <xTimerGenericCommand+0x98>)
 80095d8:	6818      	ldr	r0, [r3, #0]
 80095da:	f107 0110 	add.w	r1, r7, #16
 80095de:	2300      	movs	r3, #0
 80095e0:	2200      	movs	r2, #0
 80095e2:	f7fe fc6d 	bl	8007ec0 <xQueueGenericSend>
 80095e6:	6278      	str	r0, [r7, #36]	; 0x24
 80095e8:	e008      	b.n	80095fc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80095ea:	4b07      	ldr	r3, [pc, #28]	; (8009608 <xTimerGenericCommand+0x98>)
 80095ec:	6818      	ldr	r0, [r3, #0]
 80095ee:	f107 0110 	add.w	r1, r7, #16
 80095f2:	2300      	movs	r3, #0
 80095f4:	683a      	ldr	r2, [r7, #0]
 80095f6:	f7fe fd61 	bl	80080bc <xQueueGenericSendFromISR>
 80095fa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80095fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3728      	adds	r7, #40	; 0x28
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
 8009606:	bf00      	nop
 8009608:	24004c50 	.word	0x24004c50

0800960c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b088      	sub	sp, #32
 8009610:	af02      	add	r7, sp, #8
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009616:	4b22      	ldr	r3, [pc, #136]	; (80096a0 <prvProcessExpiredTimer+0x94>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	68db      	ldr	r3, [r3, #12]
 800961e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	3304      	adds	r3, #4
 8009624:	4618      	mov	r0, r3
 8009626:	f7fe f8d1 	bl	80077cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009630:	f003 0304 	and.w	r3, r3, #4
 8009634:	2b00      	cmp	r3, #0
 8009636:	d022      	beq.n	800967e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	699a      	ldr	r2, [r3, #24]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	18d1      	adds	r1, r2, r3
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	683a      	ldr	r2, [r7, #0]
 8009644:	6978      	ldr	r0, [r7, #20]
 8009646:	f000 f8d1 	bl	80097ec <prvInsertTimerInActiveList>
 800964a:	4603      	mov	r3, r0
 800964c:	2b00      	cmp	r3, #0
 800964e:	d01f      	beq.n	8009690 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009650:	2300      	movs	r3, #0
 8009652:	9300      	str	r3, [sp, #0]
 8009654:	2300      	movs	r3, #0
 8009656:	687a      	ldr	r2, [r7, #4]
 8009658:	2100      	movs	r1, #0
 800965a:	6978      	ldr	r0, [r7, #20]
 800965c:	f7ff ff88 	bl	8009570 <xTimerGenericCommand>
 8009660:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d113      	bne.n	8009690 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800966c:	f383 8811 	msr	BASEPRI, r3
 8009670:	f3bf 8f6f 	isb	sy
 8009674:	f3bf 8f4f 	dsb	sy
 8009678:	60fb      	str	r3, [r7, #12]
}
 800967a:	bf00      	nop
 800967c:	e7fe      	b.n	800967c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009684:	f023 0301 	bic.w	r3, r3, #1
 8009688:	b2da      	uxtb	r2, r3
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	6a1b      	ldr	r3, [r3, #32]
 8009694:	6978      	ldr	r0, [r7, #20]
 8009696:	4798      	blx	r3
}
 8009698:	bf00      	nop
 800969a:	3718      	adds	r7, #24
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}
 80096a0:	24004c48 	.word	0x24004c48

080096a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80096ac:	f107 0308 	add.w	r3, r7, #8
 80096b0:	4618      	mov	r0, r3
 80096b2:	f000 f857 	bl	8009764 <prvGetNextExpireTime>
 80096b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	4619      	mov	r1, r3
 80096bc:	68f8      	ldr	r0, [r7, #12]
 80096be:	f000 f803 	bl	80096c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80096c2:	f000 f8d5 	bl	8009870 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80096c6:	e7f1      	b.n	80096ac <prvTimerTask+0x8>

080096c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b084      	sub	sp, #16
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80096d2:	f7ff fa39 	bl	8008b48 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80096d6:	f107 0308 	add.w	r3, r7, #8
 80096da:	4618      	mov	r0, r3
 80096dc:	f000 f866 	bl	80097ac <prvSampleTimeNow>
 80096e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d130      	bne.n	800974a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d10a      	bne.n	8009704 <prvProcessTimerOrBlockTask+0x3c>
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d806      	bhi.n	8009704 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80096f6:	f7ff fa35 	bl	8008b64 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80096fa:	68f9      	ldr	r1, [r7, #12]
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f7ff ff85 	bl	800960c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009702:	e024      	b.n	800974e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d008      	beq.n	800971c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800970a:	4b13      	ldr	r3, [pc, #76]	; (8009758 <prvProcessTimerOrBlockTask+0x90>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d101      	bne.n	8009718 <prvProcessTimerOrBlockTask+0x50>
 8009714:	2301      	movs	r3, #1
 8009716:	e000      	b.n	800971a <prvProcessTimerOrBlockTask+0x52>
 8009718:	2300      	movs	r3, #0
 800971a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800971c:	4b0f      	ldr	r3, [pc, #60]	; (800975c <prvProcessTimerOrBlockTask+0x94>)
 800971e:	6818      	ldr	r0, [r3, #0]
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	1ad3      	subs	r3, r2, r3
 8009726:	683a      	ldr	r2, [r7, #0]
 8009728:	4619      	mov	r1, r3
 800972a:	f7fe ff7d 	bl	8008628 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800972e:	f7ff fa19 	bl	8008b64 <xTaskResumeAll>
 8009732:	4603      	mov	r3, r0
 8009734:	2b00      	cmp	r3, #0
 8009736:	d10a      	bne.n	800974e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009738:	4b09      	ldr	r3, [pc, #36]	; (8009760 <prvProcessTimerOrBlockTask+0x98>)
 800973a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800973e:	601a      	str	r2, [r3, #0]
 8009740:	f3bf 8f4f 	dsb	sy
 8009744:	f3bf 8f6f 	isb	sy
}
 8009748:	e001      	b.n	800974e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800974a:	f7ff fa0b 	bl	8008b64 <xTaskResumeAll>
}
 800974e:	bf00      	nop
 8009750:	3710      	adds	r7, #16
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	24004c4c 	.word	0x24004c4c
 800975c:	24004c50 	.word	0x24004c50
 8009760:	e000ed04 	.word	0xe000ed04

08009764 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009764:	b480      	push	{r7}
 8009766:	b085      	sub	sp, #20
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800976c:	4b0e      	ldr	r3, [pc, #56]	; (80097a8 <prvGetNextExpireTime+0x44>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d101      	bne.n	800977a <prvGetNextExpireTime+0x16>
 8009776:	2201      	movs	r2, #1
 8009778:	e000      	b.n	800977c <prvGetNextExpireTime+0x18>
 800977a:	2200      	movs	r2, #0
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d105      	bne.n	8009794 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009788:	4b07      	ldr	r3, [pc, #28]	; (80097a8 <prvGetNextExpireTime+0x44>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	68db      	ldr	r3, [r3, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	60fb      	str	r3, [r7, #12]
 8009792:	e001      	b.n	8009798 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009794:	2300      	movs	r3, #0
 8009796:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009798:	68fb      	ldr	r3, [r7, #12]
}
 800979a:	4618      	mov	r0, r3
 800979c:	3714      	adds	r7, #20
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr
 80097a6:	bf00      	nop
 80097a8:	24004c48 	.word	0x24004c48

080097ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b084      	sub	sp, #16
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80097b4:	f7ff fa74 	bl	8008ca0 <xTaskGetTickCount>
 80097b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80097ba:	4b0b      	ldr	r3, [pc, #44]	; (80097e8 <prvSampleTimeNow+0x3c>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	68fa      	ldr	r2, [r7, #12]
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d205      	bcs.n	80097d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80097c4:	f000 f936 	bl	8009a34 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2201      	movs	r2, #1
 80097cc:	601a      	str	r2, [r3, #0]
 80097ce:	e002      	b.n	80097d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2200      	movs	r2, #0
 80097d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80097d6:	4a04      	ldr	r2, [pc, #16]	; (80097e8 <prvSampleTimeNow+0x3c>)
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80097dc:	68fb      	ldr	r3, [r7, #12]
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3710      	adds	r7, #16
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop
 80097e8:	24004c58 	.word	0x24004c58

080097ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b086      	sub	sp, #24
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	60f8      	str	r0, [r7, #12]
 80097f4:	60b9      	str	r1, [r7, #8]
 80097f6:	607a      	str	r2, [r7, #4]
 80097f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80097fa:	2300      	movs	r3, #0
 80097fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	68ba      	ldr	r2, [r7, #8]
 8009802:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	68fa      	ldr	r2, [r7, #12]
 8009808:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800980a:	68ba      	ldr	r2, [r7, #8]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	429a      	cmp	r2, r3
 8009810:	d812      	bhi.n	8009838 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	1ad2      	subs	r2, r2, r3
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	699b      	ldr	r3, [r3, #24]
 800981c:	429a      	cmp	r2, r3
 800981e:	d302      	bcc.n	8009826 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009820:	2301      	movs	r3, #1
 8009822:	617b      	str	r3, [r7, #20]
 8009824:	e01b      	b.n	800985e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009826:	4b10      	ldr	r3, [pc, #64]	; (8009868 <prvInsertTimerInActiveList+0x7c>)
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	3304      	adds	r3, #4
 800982e:	4619      	mov	r1, r3
 8009830:	4610      	mov	r0, r2
 8009832:	f7fd ff92 	bl	800775a <vListInsert>
 8009836:	e012      	b.n	800985e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	429a      	cmp	r2, r3
 800983e:	d206      	bcs.n	800984e <prvInsertTimerInActiveList+0x62>
 8009840:	68ba      	ldr	r2, [r7, #8]
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	429a      	cmp	r2, r3
 8009846:	d302      	bcc.n	800984e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009848:	2301      	movs	r3, #1
 800984a:	617b      	str	r3, [r7, #20]
 800984c:	e007      	b.n	800985e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800984e:	4b07      	ldr	r3, [pc, #28]	; (800986c <prvInsertTimerInActiveList+0x80>)
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	3304      	adds	r3, #4
 8009856:	4619      	mov	r1, r3
 8009858:	4610      	mov	r0, r2
 800985a:	f7fd ff7e 	bl	800775a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800985e:	697b      	ldr	r3, [r7, #20]
}
 8009860:	4618      	mov	r0, r3
 8009862:	3718      	adds	r7, #24
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}
 8009868:	24004c4c 	.word	0x24004c4c
 800986c:	24004c48 	.word	0x24004c48

08009870 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b08e      	sub	sp, #56	; 0x38
 8009874:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009876:	e0ca      	b.n	8009a0e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2b00      	cmp	r3, #0
 800987c:	da18      	bge.n	80098b0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800987e:	1d3b      	adds	r3, r7, #4
 8009880:	3304      	adds	r3, #4
 8009882:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009886:	2b00      	cmp	r3, #0
 8009888:	d10a      	bne.n	80098a0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800988a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800988e:	f383 8811 	msr	BASEPRI, r3
 8009892:	f3bf 8f6f 	isb	sy
 8009896:	f3bf 8f4f 	dsb	sy
 800989a:	61fb      	str	r3, [r7, #28]
}
 800989c:	bf00      	nop
 800989e:	e7fe      	b.n	800989e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80098a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098a6:	6850      	ldr	r0, [r2, #4]
 80098a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098aa:	6892      	ldr	r2, [r2, #8]
 80098ac:	4611      	mov	r1, r2
 80098ae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	f2c0 80aa 	blt.w	8009a0c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80098bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098be:	695b      	ldr	r3, [r3, #20]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d004      	beq.n	80098ce <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80098c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c6:	3304      	adds	r3, #4
 80098c8:	4618      	mov	r0, r3
 80098ca:	f7fd ff7f 	bl	80077cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80098ce:	463b      	mov	r3, r7
 80098d0:	4618      	mov	r0, r3
 80098d2:	f7ff ff6b 	bl	80097ac <prvSampleTimeNow>
 80098d6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2b09      	cmp	r3, #9
 80098dc:	f200 8097 	bhi.w	8009a0e <prvProcessReceivedCommands+0x19e>
 80098e0:	a201      	add	r2, pc, #4	; (adr r2, 80098e8 <prvProcessReceivedCommands+0x78>)
 80098e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e6:	bf00      	nop
 80098e8:	08009911 	.word	0x08009911
 80098ec:	08009911 	.word	0x08009911
 80098f0:	08009911 	.word	0x08009911
 80098f4:	08009985 	.word	0x08009985
 80098f8:	08009999 	.word	0x08009999
 80098fc:	080099e3 	.word	0x080099e3
 8009900:	08009911 	.word	0x08009911
 8009904:	08009911 	.word	0x08009911
 8009908:	08009985 	.word	0x08009985
 800990c:	08009999 	.word	0x08009999
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009912:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009916:	f043 0301 	orr.w	r3, r3, #1
 800991a:	b2da      	uxtb	r2, r3
 800991c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800991e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009922:	68ba      	ldr	r2, [r7, #8]
 8009924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009926:	699b      	ldr	r3, [r3, #24]
 8009928:	18d1      	adds	r1, r2, r3
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800992e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009930:	f7ff ff5c 	bl	80097ec <prvInsertTimerInActiveList>
 8009934:	4603      	mov	r3, r0
 8009936:	2b00      	cmp	r3, #0
 8009938:	d069      	beq.n	8009a0e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800993a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993c:	6a1b      	ldr	r3, [r3, #32]
 800993e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009940:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009944:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009948:	f003 0304 	and.w	r3, r3, #4
 800994c:	2b00      	cmp	r3, #0
 800994e:	d05e      	beq.n	8009a0e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009950:	68ba      	ldr	r2, [r7, #8]
 8009952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009954:	699b      	ldr	r3, [r3, #24]
 8009956:	441a      	add	r2, r3
 8009958:	2300      	movs	r3, #0
 800995a:	9300      	str	r3, [sp, #0]
 800995c:	2300      	movs	r3, #0
 800995e:	2100      	movs	r1, #0
 8009960:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009962:	f7ff fe05 	bl	8009570 <xTimerGenericCommand>
 8009966:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009968:	6a3b      	ldr	r3, [r7, #32]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d14f      	bne.n	8009a0e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800996e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009972:	f383 8811 	msr	BASEPRI, r3
 8009976:	f3bf 8f6f 	isb	sy
 800997a:	f3bf 8f4f 	dsb	sy
 800997e:	61bb      	str	r3, [r7, #24]
}
 8009980:	bf00      	nop
 8009982:	e7fe      	b.n	8009982 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009986:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800998a:	f023 0301 	bic.w	r3, r3, #1
 800998e:	b2da      	uxtb	r2, r3
 8009990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009992:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009996:	e03a      	b.n	8009a0e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800999a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800999e:	f043 0301 	orr.w	r3, r3, #1
 80099a2:	b2da      	uxtb	r2, r3
 80099a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80099aa:	68ba      	ldr	r2, [r7, #8]
 80099ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80099b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b2:	699b      	ldr	r3, [r3, #24]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d10a      	bne.n	80099ce <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80099b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099bc:	f383 8811 	msr	BASEPRI, r3
 80099c0:	f3bf 8f6f 	isb	sy
 80099c4:	f3bf 8f4f 	dsb	sy
 80099c8:	617b      	str	r3, [r7, #20]
}
 80099ca:	bf00      	nop
 80099cc:	e7fe      	b.n	80099cc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80099ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d0:	699a      	ldr	r2, [r3, #24]
 80099d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d4:	18d1      	adds	r1, r2, r3
 80099d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099dc:	f7ff ff06 	bl	80097ec <prvInsertTimerInActiveList>
					break;
 80099e0:	e015      	b.n	8009a0e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80099e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099e8:	f003 0302 	and.w	r3, r3, #2
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d103      	bne.n	80099f8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80099f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099f2:	f7fd fd43 	bl	800747c <vPortFree>
 80099f6:	e00a      	b.n	8009a0e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80099f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099fe:	f023 0301 	bic.w	r3, r3, #1
 8009a02:	b2da      	uxtb	r2, r3
 8009a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009a0a:	e000      	b.n	8009a0e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009a0c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a0e:	4b08      	ldr	r3, [pc, #32]	; (8009a30 <prvProcessReceivedCommands+0x1c0>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	1d39      	adds	r1, r7, #4
 8009a14:	2200      	movs	r2, #0
 8009a16:	4618      	mov	r0, r3
 8009a18:	f7fe fbec 	bl	80081f4 <xQueueReceive>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	f47f af2a 	bne.w	8009878 <prvProcessReceivedCommands+0x8>
	}
}
 8009a24:	bf00      	nop
 8009a26:	bf00      	nop
 8009a28:	3730      	adds	r7, #48	; 0x30
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}
 8009a2e:	bf00      	nop
 8009a30:	24004c50 	.word	0x24004c50

08009a34 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b088      	sub	sp, #32
 8009a38:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a3a:	e048      	b.n	8009ace <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a3c:	4b2d      	ldr	r3, [pc, #180]	; (8009af4 <prvSwitchTimerLists+0xc0>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	68db      	ldr	r3, [r3, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a46:	4b2b      	ldr	r3, [pc, #172]	; (8009af4 <prvSwitchTimerLists+0xc0>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	68db      	ldr	r3, [r3, #12]
 8009a4c:	68db      	ldr	r3, [r3, #12]
 8009a4e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	3304      	adds	r3, #4
 8009a54:	4618      	mov	r0, r3
 8009a56:	f7fd feb9 	bl	80077cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	6a1b      	ldr	r3, [r3, #32]
 8009a5e:	68f8      	ldr	r0, [r7, #12]
 8009a60:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a68:	f003 0304 	and.w	r3, r3, #4
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d02e      	beq.n	8009ace <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	699b      	ldr	r3, [r3, #24]
 8009a74:	693a      	ldr	r2, [r7, #16]
 8009a76:	4413      	add	r3, r2
 8009a78:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009a7a:	68ba      	ldr	r2, [r7, #8]
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	d90e      	bls.n	8009aa0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	68ba      	ldr	r2, [r7, #8]
 8009a86:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	68fa      	ldr	r2, [r7, #12]
 8009a8c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a8e:	4b19      	ldr	r3, [pc, #100]	; (8009af4 <prvSwitchTimerLists+0xc0>)
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	3304      	adds	r3, #4
 8009a96:	4619      	mov	r1, r3
 8009a98:	4610      	mov	r0, r2
 8009a9a:	f7fd fe5e 	bl	800775a <vListInsert>
 8009a9e:	e016      	b.n	8009ace <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	9300      	str	r3, [sp, #0]
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	693a      	ldr	r2, [r7, #16]
 8009aa8:	2100      	movs	r1, #0
 8009aaa:	68f8      	ldr	r0, [r7, #12]
 8009aac:	f7ff fd60 	bl	8009570 <xTimerGenericCommand>
 8009ab0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d10a      	bne.n	8009ace <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009abc:	f383 8811 	msr	BASEPRI, r3
 8009ac0:	f3bf 8f6f 	isb	sy
 8009ac4:	f3bf 8f4f 	dsb	sy
 8009ac8:	603b      	str	r3, [r7, #0]
}
 8009aca:	bf00      	nop
 8009acc:	e7fe      	b.n	8009acc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009ace:	4b09      	ldr	r3, [pc, #36]	; (8009af4 <prvSwitchTimerLists+0xc0>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d1b1      	bne.n	8009a3c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009ad8:	4b06      	ldr	r3, [pc, #24]	; (8009af4 <prvSwitchTimerLists+0xc0>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009ade:	4b06      	ldr	r3, [pc, #24]	; (8009af8 <prvSwitchTimerLists+0xc4>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4a04      	ldr	r2, [pc, #16]	; (8009af4 <prvSwitchTimerLists+0xc0>)
 8009ae4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009ae6:	4a04      	ldr	r2, [pc, #16]	; (8009af8 <prvSwitchTimerLists+0xc4>)
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	6013      	str	r3, [r2, #0]
}
 8009aec:	bf00      	nop
 8009aee:	3718      	adds	r7, #24
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}
 8009af4:	24004c48 	.word	0x24004c48
 8009af8:	24004c4c 	.word	0x24004c4c

08009afc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b082      	sub	sp, #8
 8009b00:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009b02:	f7fd ffb7 	bl	8007a74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009b06:	4b15      	ldr	r3, [pc, #84]	; (8009b5c <prvCheckForValidListAndQueue+0x60>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d120      	bne.n	8009b50 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009b0e:	4814      	ldr	r0, [pc, #80]	; (8009b60 <prvCheckForValidListAndQueue+0x64>)
 8009b10:	f7fd fdd2 	bl	80076b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009b14:	4813      	ldr	r0, [pc, #76]	; (8009b64 <prvCheckForValidListAndQueue+0x68>)
 8009b16:	f7fd fdcf 	bl	80076b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009b1a:	4b13      	ldr	r3, [pc, #76]	; (8009b68 <prvCheckForValidListAndQueue+0x6c>)
 8009b1c:	4a10      	ldr	r2, [pc, #64]	; (8009b60 <prvCheckForValidListAndQueue+0x64>)
 8009b1e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009b20:	4b12      	ldr	r3, [pc, #72]	; (8009b6c <prvCheckForValidListAndQueue+0x70>)
 8009b22:	4a10      	ldr	r2, [pc, #64]	; (8009b64 <prvCheckForValidListAndQueue+0x68>)
 8009b24:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009b26:	2300      	movs	r3, #0
 8009b28:	9300      	str	r3, [sp, #0]
 8009b2a:	4b11      	ldr	r3, [pc, #68]	; (8009b70 <prvCheckForValidListAndQueue+0x74>)
 8009b2c:	4a11      	ldr	r2, [pc, #68]	; (8009b74 <prvCheckForValidListAndQueue+0x78>)
 8009b2e:	2110      	movs	r1, #16
 8009b30:	200a      	movs	r0, #10
 8009b32:	f7fe f929 	bl	8007d88 <xQueueGenericCreateStatic>
 8009b36:	4603      	mov	r3, r0
 8009b38:	4a08      	ldr	r2, [pc, #32]	; (8009b5c <prvCheckForValidListAndQueue+0x60>)
 8009b3a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009b3c:	4b07      	ldr	r3, [pc, #28]	; (8009b5c <prvCheckForValidListAndQueue+0x60>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d005      	beq.n	8009b50 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009b44:	4b05      	ldr	r3, [pc, #20]	; (8009b5c <prvCheckForValidListAndQueue+0x60>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	490b      	ldr	r1, [pc, #44]	; (8009b78 <prvCheckForValidListAndQueue+0x7c>)
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f7fe fd42 	bl	80085d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b50:	f7fd ffc0 	bl	8007ad4 <vPortExitCritical>
}
 8009b54:	bf00      	nop
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
 8009b5a:	bf00      	nop
 8009b5c:	24004c50 	.word	0x24004c50
 8009b60:	24004c20 	.word	0x24004c20
 8009b64:	24004c34 	.word	0x24004c34
 8009b68:	24004c48 	.word	0x24004c48
 8009b6c:	24004c4c 	.word	0x24004c4c
 8009b70:	24004cfc 	.word	0x24004cfc
 8009b74:	24004c5c 	.word	0x24004c5c
 8009b78:	0800a798 	.word	0x0800a798

08009b7c <__errno>:
 8009b7c:	4b01      	ldr	r3, [pc, #4]	; (8009b84 <__errno+0x8>)
 8009b7e:	6818      	ldr	r0, [r3, #0]
 8009b80:	4770      	bx	lr
 8009b82:	bf00      	nop
 8009b84:	24000014 	.word	0x24000014

08009b88 <std>:
 8009b88:	2300      	movs	r3, #0
 8009b8a:	b510      	push	{r4, lr}
 8009b8c:	4604      	mov	r4, r0
 8009b8e:	e9c0 3300 	strd	r3, r3, [r0]
 8009b92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b96:	6083      	str	r3, [r0, #8]
 8009b98:	8181      	strh	r1, [r0, #12]
 8009b9a:	6643      	str	r3, [r0, #100]	; 0x64
 8009b9c:	81c2      	strh	r2, [r0, #14]
 8009b9e:	6183      	str	r3, [r0, #24]
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	2208      	movs	r2, #8
 8009ba4:	305c      	adds	r0, #92	; 0x5c
 8009ba6:	f000 f91a 	bl	8009dde <memset>
 8009baa:	4b05      	ldr	r3, [pc, #20]	; (8009bc0 <std+0x38>)
 8009bac:	6263      	str	r3, [r4, #36]	; 0x24
 8009bae:	4b05      	ldr	r3, [pc, #20]	; (8009bc4 <std+0x3c>)
 8009bb0:	62a3      	str	r3, [r4, #40]	; 0x28
 8009bb2:	4b05      	ldr	r3, [pc, #20]	; (8009bc8 <std+0x40>)
 8009bb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009bb6:	4b05      	ldr	r3, [pc, #20]	; (8009bcc <std+0x44>)
 8009bb8:	6224      	str	r4, [r4, #32]
 8009bba:	6323      	str	r3, [r4, #48]	; 0x30
 8009bbc:	bd10      	pop	{r4, pc}
 8009bbe:	bf00      	nop
 8009bc0:	0800a0f9 	.word	0x0800a0f9
 8009bc4:	0800a11b 	.word	0x0800a11b
 8009bc8:	0800a153 	.word	0x0800a153
 8009bcc:	0800a177 	.word	0x0800a177

08009bd0 <_cleanup_r>:
 8009bd0:	4901      	ldr	r1, [pc, #4]	; (8009bd8 <_cleanup_r+0x8>)
 8009bd2:	f000 b8af 	b.w	8009d34 <_fwalk_reent>
 8009bd6:	bf00      	nop
 8009bd8:	0800a451 	.word	0x0800a451

08009bdc <__sfmoreglue>:
 8009bdc:	b570      	push	{r4, r5, r6, lr}
 8009bde:	2268      	movs	r2, #104	; 0x68
 8009be0:	1e4d      	subs	r5, r1, #1
 8009be2:	4355      	muls	r5, r2
 8009be4:	460e      	mov	r6, r1
 8009be6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009bea:	f000 f921 	bl	8009e30 <_malloc_r>
 8009bee:	4604      	mov	r4, r0
 8009bf0:	b140      	cbz	r0, 8009c04 <__sfmoreglue+0x28>
 8009bf2:	2100      	movs	r1, #0
 8009bf4:	e9c0 1600 	strd	r1, r6, [r0]
 8009bf8:	300c      	adds	r0, #12
 8009bfa:	60a0      	str	r0, [r4, #8]
 8009bfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009c00:	f000 f8ed 	bl	8009dde <memset>
 8009c04:	4620      	mov	r0, r4
 8009c06:	bd70      	pop	{r4, r5, r6, pc}

08009c08 <__sfp_lock_acquire>:
 8009c08:	4801      	ldr	r0, [pc, #4]	; (8009c10 <__sfp_lock_acquire+0x8>)
 8009c0a:	f000 b8d8 	b.w	8009dbe <__retarget_lock_acquire_recursive>
 8009c0e:	bf00      	nop
 8009c10:	24004d4d 	.word	0x24004d4d

08009c14 <__sfp_lock_release>:
 8009c14:	4801      	ldr	r0, [pc, #4]	; (8009c1c <__sfp_lock_release+0x8>)
 8009c16:	f000 b8d3 	b.w	8009dc0 <__retarget_lock_release_recursive>
 8009c1a:	bf00      	nop
 8009c1c:	24004d4d 	.word	0x24004d4d

08009c20 <__sinit_lock_acquire>:
 8009c20:	4801      	ldr	r0, [pc, #4]	; (8009c28 <__sinit_lock_acquire+0x8>)
 8009c22:	f000 b8cc 	b.w	8009dbe <__retarget_lock_acquire_recursive>
 8009c26:	bf00      	nop
 8009c28:	24004d4e 	.word	0x24004d4e

08009c2c <__sinit_lock_release>:
 8009c2c:	4801      	ldr	r0, [pc, #4]	; (8009c34 <__sinit_lock_release+0x8>)
 8009c2e:	f000 b8c7 	b.w	8009dc0 <__retarget_lock_release_recursive>
 8009c32:	bf00      	nop
 8009c34:	24004d4e 	.word	0x24004d4e

08009c38 <__sinit>:
 8009c38:	b510      	push	{r4, lr}
 8009c3a:	4604      	mov	r4, r0
 8009c3c:	f7ff fff0 	bl	8009c20 <__sinit_lock_acquire>
 8009c40:	69a3      	ldr	r3, [r4, #24]
 8009c42:	b11b      	cbz	r3, 8009c4c <__sinit+0x14>
 8009c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c48:	f7ff bff0 	b.w	8009c2c <__sinit_lock_release>
 8009c4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009c50:	6523      	str	r3, [r4, #80]	; 0x50
 8009c52:	4b13      	ldr	r3, [pc, #76]	; (8009ca0 <__sinit+0x68>)
 8009c54:	4a13      	ldr	r2, [pc, #76]	; (8009ca4 <__sinit+0x6c>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	62a2      	str	r2, [r4, #40]	; 0x28
 8009c5a:	42a3      	cmp	r3, r4
 8009c5c:	bf04      	itt	eq
 8009c5e:	2301      	moveq	r3, #1
 8009c60:	61a3      	streq	r3, [r4, #24]
 8009c62:	4620      	mov	r0, r4
 8009c64:	f000 f820 	bl	8009ca8 <__sfp>
 8009c68:	6060      	str	r0, [r4, #4]
 8009c6a:	4620      	mov	r0, r4
 8009c6c:	f000 f81c 	bl	8009ca8 <__sfp>
 8009c70:	60a0      	str	r0, [r4, #8]
 8009c72:	4620      	mov	r0, r4
 8009c74:	f000 f818 	bl	8009ca8 <__sfp>
 8009c78:	2200      	movs	r2, #0
 8009c7a:	60e0      	str	r0, [r4, #12]
 8009c7c:	2104      	movs	r1, #4
 8009c7e:	6860      	ldr	r0, [r4, #4]
 8009c80:	f7ff ff82 	bl	8009b88 <std>
 8009c84:	68a0      	ldr	r0, [r4, #8]
 8009c86:	2201      	movs	r2, #1
 8009c88:	2109      	movs	r1, #9
 8009c8a:	f7ff ff7d 	bl	8009b88 <std>
 8009c8e:	68e0      	ldr	r0, [r4, #12]
 8009c90:	2202      	movs	r2, #2
 8009c92:	2112      	movs	r1, #18
 8009c94:	f7ff ff78 	bl	8009b88 <std>
 8009c98:	2301      	movs	r3, #1
 8009c9a:	61a3      	str	r3, [r4, #24]
 8009c9c:	e7d2      	b.n	8009c44 <__sinit+0xc>
 8009c9e:	bf00      	nop
 8009ca0:	0800a85c 	.word	0x0800a85c
 8009ca4:	08009bd1 	.word	0x08009bd1

08009ca8 <__sfp>:
 8009ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009caa:	4607      	mov	r7, r0
 8009cac:	f7ff ffac 	bl	8009c08 <__sfp_lock_acquire>
 8009cb0:	4b1e      	ldr	r3, [pc, #120]	; (8009d2c <__sfp+0x84>)
 8009cb2:	681e      	ldr	r6, [r3, #0]
 8009cb4:	69b3      	ldr	r3, [r6, #24]
 8009cb6:	b913      	cbnz	r3, 8009cbe <__sfp+0x16>
 8009cb8:	4630      	mov	r0, r6
 8009cba:	f7ff ffbd 	bl	8009c38 <__sinit>
 8009cbe:	3648      	adds	r6, #72	; 0x48
 8009cc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009cc4:	3b01      	subs	r3, #1
 8009cc6:	d503      	bpl.n	8009cd0 <__sfp+0x28>
 8009cc8:	6833      	ldr	r3, [r6, #0]
 8009cca:	b30b      	cbz	r3, 8009d10 <__sfp+0x68>
 8009ccc:	6836      	ldr	r6, [r6, #0]
 8009cce:	e7f7      	b.n	8009cc0 <__sfp+0x18>
 8009cd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009cd4:	b9d5      	cbnz	r5, 8009d0c <__sfp+0x64>
 8009cd6:	4b16      	ldr	r3, [pc, #88]	; (8009d30 <__sfp+0x88>)
 8009cd8:	60e3      	str	r3, [r4, #12]
 8009cda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009cde:	6665      	str	r5, [r4, #100]	; 0x64
 8009ce0:	f000 f86c 	bl	8009dbc <__retarget_lock_init_recursive>
 8009ce4:	f7ff ff96 	bl	8009c14 <__sfp_lock_release>
 8009ce8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009cec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009cf0:	6025      	str	r5, [r4, #0]
 8009cf2:	61a5      	str	r5, [r4, #24]
 8009cf4:	2208      	movs	r2, #8
 8009cf6:	4629      	mov	r1, r5
 8009cf8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009cfc:	f000 f86f 	bl	8009dde <memset>
 8009d00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009d04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009d08:	4620      	mov	r0, r4
 8009d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d0c:	3468      	adds	r4, #104	; 0x68
 8009d0e:	e7d9      	b.n	8009cc4 <__sfp+0x1c>
 8009d10:	2104      	movs	r1, #4
 8009d12:	4638      	mov	r0, r7
 8009d14:	f7ff ff62 	bl	8009bdc <__sfmoreglue>
 8009d18:	4604      	mov	r4, r0
 8009d1a:	6030      	str	r0, [r6, #0]
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	d1d5      	bne.n	8009ccc <__sfp+0x24>
 8009d20:	f7ff ff78 	bl	8009c14 <__sfp_lock_release>
 8009d24:	230c      	movs	r3, #12
 8009d26:	603b      	str	r3, [r7, #0]
 8009d28:	e7ee      	b.n	8009d08 <__sfp+0x60>
 8009d2a:	bf00      	nop
 8009d2c:	0800a85c 	.word	0x0800a85c
 8009d30:	ffff0001 	.word	0xffff0001

08009d34 <_fwalk_reent>:
 8009d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d38:	4606      	mov	r6, r0
 8009d3a:	4688      	mov	r8, r1
 8009d3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009d40:	2700      	movs	r7, #0
 8009d42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d46:	f1b9 0901 	subs.w	r9, r9, #1
 8009d4a:	d505      	bpl.n	8009d58 <_fwalk_reent+0x24>
 8009d4c:	6824      	ldr	r4, [r4, #0]
 8009d4e:	2c00      	cmp	r4, #0
 8009d50:	d1f7      	bne.n	8009d42 <_fwalk_reent+0xe>
 8009d52:	4638      	mov	r0, r7
 8009d54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d58:	89ab      	ldrh	r3, [r5, #12]
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d907      	bls.n	8009d6e <_fwalk_reent+0x3a>
 8009d5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d62:	3301      	adds	r3, #1
 8009d64:	d003      	beq.n	8009d6e <_fwalk_reent+0x3a>
 8009d66:	4629      	mov	r1, r5
 8009d68:	4630      	mov	r0, r6
 8009d6a:	47c0      	blx	r8
 8009d6c:	4307      	orrs	r7, r0
 8009d6e:	3568      	adds	r5, #104	; 0x68
 8009d70:	e7e9      	b.n	8009d46 <_fwalk_reent+0x12>
	...

08009d74 <__libc_init_array>:
 8009d74:	b570      	push	{r4, r5, r6, lr}
 8009d76:	4d0d      	ldr	r5, [pc, #52]	; (8009dac <__libc_init_array+0x38>)
 8009d78:	4c0d      	ldr	r4, [pc, #52]	; (8009db0 <__libc_init_array+0x3c>)
 8009d7a:	1b64      	subs	r4, r4, r5
 8009d7c:	10a4      	asrs	r4, r4, #2
 8009d7e:	2600      	movs	r6, #0
 8009d80:	42a6      	cmp	r6, r4
 8009d82:	d109      	bne.n	8009d98 <__libc_init_array+0x24>
 8009d84:	4d0b      	ldr	r5, [pc, #44]	; (8009db4 <__libc_init_array+0x40>)
 8009d86:	4c0c      	ldr	r4, [pc, #48]	; (8009db8 <__libc_init_array+0x44>)
 8009d88:	f000 fca2 	bl	800a6d0 <_init>
 8009d8c:	1b64      	subs	r4, r4, r5
 8009d8e:	10a4      	asrs	r4, r4, #2
 8009d90:	2600      	movs	r6, #0
 8009d92:	42a6      	cmp	r6, r4
 8009d94:	d105      	bne.n	8009da2 <__libc_init_array+0x2e>
 8009d96:	bd70      	pop	{r4, r5, r6, pc}
 8009d98:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d9c:	4798      	blx	r3
 8009d9e:	3601      	adds	r6, #1
 8009da0:	e7ee      	b.n	8009d80 <__libc_init_array+0xc>
 8009da2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009da6:	4798      	blx	r3
 8009da8:	3601      	adds	r6, #1
 8009daa:	e7f2      	b.n	8009d92 <__libc_init_array+0x1e>
 8009dac:	0800a868 	.word	0x0800a868
 8009db0:	0800a868 	.word	0x0800a868
 8009db4:	0800a868 	.word	0x0800a868
 8009db8:	0800a86c 	.word	0x0800a86c

08009dbc <__retarget_lock_init_recursive>:
 8009dbc:	4770      	bx	lr

08009dbe <__retarget_lock_acquire_recursive>:
 8009dbe:	4770      	bx	lr

08009dc0 <__retarget_lock_release_recursive>:
 8009dc0:	4770      	bx	lr

08009dc2 <memcpy>:
 8009dc2:	440a      	add	r2, r1
 8009dc4:	4291      	cmp	r1, r2
 8009dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8009dca:	d100      	bne.n	8009dce <memcpy+0xc>
 8009dcc:	4770      	bx	lr
 8009dce:	b510      	push	{r4, lr}
 8009dd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009dd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009dd8:	4291      	cmp	r1, r2
 8009dda:	d1f9      	bne.n	8009dd0 <memcpy+0xe>
 8009ddc:	bd10      	pop	{r4, pc}

08009dde <memset>:
 8009dde:	4402      	add	r2, r0
 8009de0:	4603      	mov	r3, r0
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d100      	bne.n	8009de8 <memset+0xa>
 8009de6:	4770      	bx	lr
 8009de8:	f803 1b01 	strb.w	r1, [r3], #1
 8009dec:	e7f9      	b.n	8009de2 <memset+0x4>
	...

08009df0 <sbrk_aligned>:
 8009df0:	b570      	push	{r4, r5, r6, lr}
 8009df2:	4e0e      	ldr	r6, [pc, #56]	; (8009e2c <sbrk_aligned+0x3c>)
 8009df4:	460c      	mov	r4, r1
 8009df6:	6831      	ldr	r1, [r6, #0]
 8009df8:	4605      	mov	r5, r0
 8009dfa:	b911      	cbnz	r1, 8009e02 <sbrk_aligned+0x12>
 8009dfc:	f000 f96c 	bl	800a0d8 <_sbrk_r>
 8009e00:	6030      	str	r0, [r6, #0]
 8009e02:	4621      	mov	r1, r4
 8009e04:	4628      	mov	r0, r5
 8009e06:	f000 f967 	bl	800a0d8 <_sbrk_r>
 8009e0a:	1c43      	adds	r3, r0, #1
 8009e0c:	d00a      	beq.n	8009e24 <sbrk_aligned+0x34>
 8009e0e:	1cc4      	adds	r4, r0, #3
 8009e10:	f024 0403 	bic.w	r4, r4, #3
 8009e14:	42a0      	cmp	r0, r4
 8009e16:	d007      	beq.n	8009e28 <sbrk_aligned+0x38>
 8009e18:	1a21      	subs	r1, r4, r0
 8009e1a:	4628      	mov	r0, r5
 8009e1c:	f000 f95c 	bl	800a0d8 <_sbrk_r>
 8009e20:	3001      	adds	r0, #1
 8009e22:	d101      	bne.n	8009e28 <sbrk_aligned+0x38>
 8009e24:	f04f 34ff 	mov.w	r4, #4294967295
 8009e28:	4620      	mov	r0, r4
 8009e2a:	bd70      	pop	{r4, r5, r6, pc}
 8009e2c:	24004d54 	.word	0x24004d54

08009e30 <_malloc_r>:
 8009e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e34:	1ccd      	adds	r5, r1, #3
 8009e36:	f025 0503 	bic.w	r5, r5, #3
 8009e3a:	3508      	adds	r5, #8
 8009e3c:	2d0c      	cmp	r5, #12
 8009e3e:	bf38      	it	cc
 8009e40:	250c      	movcc	r5, #12
 8009e42:	2d00      	cmp	r5, #0
 8009e44:	4607      	mov	r7, r0
 8009e46:	db01      	blt.n	8009e4c <_malloc_r+0x1c>
 8009e48:	42a9      	cmp	r1, r5
 8009e4a:	d905      	bls.n	8009e58 <_malloc_r+0x28>
 8009e4c:	230c      	movs	r3, #12
 8009e4e:	603b      	str	r3, [r7, #0]
 8009e50:	2600      	movs	r6, #0
 8009e52:	4630      	mov	r0, r6
 8009e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e58:	4e2e      	ldr	r6, [pc, #184]	; (8009f14 <_malloc_r+0xe4>)
 8009e5a:	f000 fbad 	bl	800a5b8 <__malloc_lock>
 8009e5e:	6833      	ldr	r3, [r6, #0]
 8009e60:	461c      	mov	r4, r3
 8009e62:	bb34      	cbnz	r4, 8009eb2 <_malloc_r+0x82>
 8009e64:	4629      	mov	r1, r5
 8009e66:	4638      	mov	r0, r7
 8009e68:	f7ff ffc2 	bl	8009df0 <sbrk_aligned>
 8009e6c:	1c43      	adds	r3, r0, #1
 8009e6e:	4604      	mov	r4, r0
 8009e70:	d14d      	bne.n	8009f0e <_malloc_r+0xde>
 8009e72:	6834      	ldr	r4, [r6, #0]
 8009e74:	4626      	mov	r6, r4
 8009e76:	2e00      	cmp	r6, #0
 8009e78:	d140      	bne.n	8009efc <_malloc_r+0xcc>
 8009e7a:	6823      	ldr	r3, [r4, #0]
 8009e7c:	4631      	mov	r1, r6
 8009e7e:	4638      	mov	r0, r7
 8009e80:	eb04 0803 	add.w	r8, r4, r3
 8009e84:	f000 f928 	bl	800a0d8 <_sbrk_r>
 8009e88:	4580      	cmp	r8, r0
 8009e8a:	d13a      	bne.n	8009f02 <_malloc_r+0xd2>
 8009e8c:	6821      	ldr	r1, [r4, #0]
 8009e8e:	3503      	adds	r5, #3
 8009e90:	1a6d      	subs	r5, r5, r1
 8009e92:	f025 0503 	bic.w	r5, r5, #3
 8009e96:	3508      	adds	r5, #8
 8009e98:	2d0c      	cmp	r5, #12
 8009e9a:	bf38      	it	cc
 8009e9c:	250c      	movcc	r5, #12
 8009e9e:	4629      	mov	r1, r5
 8009ea0:	4638      	mov	r0, r7
 8009ea2:	f7ff ffa5 	bl	8009df0 <sbrk_aligned>
 8009ea6:	3001      	adds	r0, #1
 8009ea8:	d02b      	beq.n	8009f02 <_malloc_r+0xd2>
 8009eaa:	6823      	ldr	r3, [r4, #0]
 8009eac:	442b      	add	r3, r5
 8009eae:	6023      	str	r3, [r4, #0]
 8009eb0:	e00e      	b.n	8009ed0 <_malloc_r+0xa0>
 8009eb2:	6822      	ldr	r2, [r4, #0]
 8009eb4:	1b52      	subs	r2, r2, r5
 8009eb6:	d41e      	bmi.n	8009ef6 <_malloc_r+0xc6>
 8009eb8:	2a0b      	cmp	r2, #11
 8009eba:	d916      	bls.n	8009eea <_malloc_r+0xba>
 8009ebc:	1961      	adds	r1, r4, r5
 8009ebe:	42a3      	cmp	r3, r4
 8009ec0:	6025      	str	r5, [r4, #0]
 8009ec2:	bf18      	it	ne
 8009ec4:	6059      	strne	r1, [r3, #4]
 8009ec6:	6863      	ldr	r3, [r4, #4]
 8009ec8:	bf08      	it	eq
 8009eca:	6031      	streq	r1, [r6, #0]
 8009ecc:	5162      	str	r2, [r4, r5]
 8009ece:	604b      	str	r3, [r1, #4]
 8009ed0:	4638      	mov	r0, r7
 8009ed2:	f104 060b 	add.w	r6, r4, #11
 8009ed6:	f000 fb75 	bl	800a5c4 <__malloc_unlock>
 8009eda:	f026 0607 	bic.w	r6, r6, #7
 8009ede:	1d23      	adds	r3, r4, #4
 8009ee0:	1af2      	subs	r2, r6, r3
 8009ee2:	d0b6      	beq.n	8009e52 <_malloc_r+0x22>
 8009ee4:	1b9b      	subs	r3, r3, r6
 8009ee6:	50a3      	str	r3, [r4, r2]
 8009ee8:	e7b3      	b.n	8009e52 <_malloc_r+0x22>
 8009eea:	6862      	ldr	r2, [r4, #4]
 8009eec:	42a3      	cmp	r3, r4
 8009eee:	bf0c      	ite	eq
 8009ef0:	6032      	streq	r2, [r6, #0]
 8009ef2:	605a      	strne	r2, [r3, #4]
 8009ef4:	e7ec      	b.n	8009ed0 <_malloc_r+0xa0>
 8009ef6:	4623      	mov	r3, r4
 8009ef8:	6864      	ldr	r4, [r4, #4]
 8009efa:	e7b2      	b.n	8009e62 <_malloc_r+0x32>
 8009efc:	4634      	mov	r4, r6
 8009efe:	6876      	ldr	r6, [r6, #4]
 8009f00:	e7b9      	b.n	8009e76 <_malloc_r+0x46>
 8009f02:	230c      	movs	r3, #12
 8009f04:	603b      	str	r3, [r7, #0]
 8009f06:	4638      	mov	r0, r7
 8009f08:	f000 fb5c 	bl	800a5c4 <__malloc_unlock>
 8009f0c:	e7a1      	b.n	8009e52 <_malloc_r+0x22>
 8009f0e:	6025      	str	r5, [r4, #0]
 8009f10:	e7de      	b.n	8009ed0 <_malloc_r+0xa0>
 8009f12:	bf00      	nop
 8009f14:	24004d50 	.word	0x24004d50

08009f18 <_puts_r>:
 8009f18:	b570      	push	{r4, r5, r6, lr}
 8009f1a:	460e      	mov	r6, r1
 8009f1c:	4605      	mov	r5, r0
 8009f1e:	b118      	cbz	r0, 8009f28 <_puts_r+0x10>
 8009f20:	6983      	ldr	r3, [r0, #24]
 8009f22:	b90b      	cbnz	r3, 8009f28 <_puts_r+0x10>
 8009f24:	f7ff fe88 	bl	8009c38 <__sinit>
 8009f28:	69ab      	ldr	r3, [r5, #24]
 8009f2a:	68ac      	ldr	r4, [r5, #8]
 8009f2c:	b913      	cbnz	r3, 8009f34 <_puts_r+0x1c>
 8009f2e:	4628      	mov	r0, r5
 8009f30:	f7ff fe82 	bl	8009c38 <__sinit>
 8009f34:	4b2c      	ldr	r3, [pc, #176]	; (8009fe8 <_puts_r+0xd0>)
 8009f36:	429c      	cmp	r4, r3
 8009f38:	d120      	bne.n	8009f7c <_puts_r+0x64>
 8009f3a:	686c      	ldr	r4, [r5, #4]
 8009f3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f3e:	07db      	lsls	r3, r3, #31
 8009f40:	d405      	bmi.n	8009f4e <_puts_r+0x36>
 8009f42:	89a3      	ldrh	r3, [r4, #12]
 8009f44:	0598      	lsls	r0, r3, #22
 8009f46:	d402      	bmi.n	8009f4e <_puts_r+0x36>
 8009f48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f4a:	f7ff ff38 	bl	8009dbe <__retarget_lock_acquire_recursive>
 8009f4e:	89a3      	ldrh	r3, [r4, #12]
 8009f50:	0719      	lsls	r1, r3, #28
 8009f52:	d51d      	bpl.n	8009f90 <_puts_r+0x78>
 8009f54:	6923      	ldr	r3, [r4, #16]
 8009f56:	b1db      	cbz	r3, 8009f90 <_puts_r+0x78>
 8009f58:	3e01      	subs	r6, #1
 8009f5a:	68a3      	ldr	r3, [r4, #8]
 8009f5c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009f60:	3b01      	subs	r3, #1
 8009f62:	60a3      	str	r3, [r4, #8]
 8009f64:	bb39      	cbnz	r1, 8009fb6 <_puts_r+0x9e>
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	da38      	bge.n	8009fdc <_puts_r+0xc4>
 8009f6a:	4622      	mov	r2, r4
 8009f6c:	210a      	movs	r1, #10
 8009f6e:	4628      	mov	r0, r5
 8009f70:	f000 f906 	bl	800a180 <__swbuf_r>
 8009f74:	3001      	adds	r0, #1
 8009f76:	d011      	beq.n	8009f9c <_puts_r+0x84>
 8009f78:	250a      	movs	r5, #10
 8009f7a:	e011      	b.n	8009fa0 <_puts_r+0x88>
 8009f7c:	4b1b      	ldr	r3, [pc, #108]	; (8009fec <_puts_r+0xd4>)
 8009f7e:	429c      	cmp	r4, r3
 8009f80:	d101      	bne.n	8009f86 <_puts_r+0x6e>
 8009f82:	68ac      	ldr	r4, [r5, #8]
 8009f84:	e7da      	b.n	8009f3c <_puts_r+0x24>
 8009f86:	4b1a      	ldr	r3, [pc, #104]	; (8009ff0 <_puts_r+0xd8>)
 8009f88:	429c      	cmp	r4, r3
 8009f8a:	bf08      	it	eq
 8009f8c:	68ec      	ldreq	r4, [r5, #12]
 8009f8e:	e7d5      	b.n	8009f3c <_puts_r+0x24>
 8009f90:	4621      	mov	r1, r4
 8009f92:	4628      	mov	r0, r5
 8009f94:	f000 f958 	bl	800a248 <__swsetup_r>
 8009f98:	2800      	cmp	r0, #0
 8009f9a:	d0dd      	beq.n	8009f58 <_puts_r+0x40>
 8009f9c:	f04f 35ff 	mov.w	r5, #4294967295
 8009fa0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009fa2:	07da      	lsls	r2, r3, #31
 8009fa4:	d405      	bmi.n	8009fb2 <_puts_r+0x9a>
 8009fa6:	89a3      	ldrh	r3, [r4, #12]
 8009fa8:	059b      	lsls	r3, r3, #22
 8009faa:	d402      	bmi.n	8009fb2 <_puts_r+0x9a>
 8009fac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fae:	f7ff ff07 	bl	8009dc0 <__retarget_lock_release_recursive>
 8009fb2:	4628      	mov	r0, r5
 8009fb4:	bd70      	pop	{r4, r5, r6, pc}
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	da04      	bge.n	8009fc4 <_puts_r+0xac>
 8009fba:	69a2      	ldr	r2, [r4, #24]
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	dc06      	bgt.n	8009fce <_puts_r+0xb6>
 8009fc0:	290a      	cmp	r1, #10
 8009fc2:	d004      	beq.n	8009fce <_puts_r+0xb6>
 8009fc4:	6823      	ldr	r3, [r4, #0]
 8009fc6:	1c5a      	adds	r2, r3, #1
 8009fc8:	6022      	str	r2, [r4, #0]
 8009fca:	7019      	strb	r1, [r3, #0]
 8009fcc:	e7c5      	b.n	8009f5a <_puts_r+0x42>
 8009fce:	4622      	mov	r2, r4
 8009fd0:	4628      	mov	r0, r5
 8009fd2:	f000 f8d5 	bl	800a180 <__swbuf_r>
 8009fd6:	3001      	adds	r0, #1
 8009fd8:	d1bf      	bne.n	8009f5a <_puts_r+0x42>
 8009fda:	e7df      	b.n	8009f9c <_puts_r+0x84>
 8009fdc:	6823      	ldr	r3, [r4, #0]
 8009fde:	250a      	movs	r5, #10
 8009fe0:	1c5a      	adds	r2, r3, #1
 8009fe2:	6022      	str	r2, [r4, #0]
 8009fe4:	701d      	strb	r5, [r3, #0]
 8009fe6:	e7db      	b.n	8009fa0 <_puts_r+0x88>
 8009fe8:	0800a81c 	.word	0x0800a81c
 8009fec:	0800a83c 	.word	0x0800a83c
 8009ff0:	0800a7fc 	.word	0x0800a7fc

08009ff4 <puts>:
 8009ff4:	4b02      	ldr	r3, [pc, #8]	; (800a000 <puts+0xc>)
 8009ff6:	4601      	mov	r1, r0
 8009ff8:	6818      	ldr	r0, [r3, #0]
 8009ffa:	f7ff bf8d 	b.w	8009f18 <_puts_r>
 8009ffe:	bf00      	nop
 800a000:	24000014 	.word	0x24000014

0800a004 <cleanup_glue>:
 800a004:	b538      	push	{r3, r4, r5, lr}
 800a006:	460c      	mov	r4, r1
 800a008:	6809      	ldr	r1, [r1, #0]
 800a00a:	4605      	mov	r5, r0
 800a00c:	b109      	cbz	r1, 800a012 <cleanup_glue+0xe>
 800a00e:	f7ff fff9 	bl	800a004 <cleanup_glue>
 800a012:	4621      	mov	r1, r4
 800a014:	4628      	mov	r0, r5
 800a016:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a01a:	f000 bad9 	b.w	800a5d0 <_free_r>
	...

0800a020 <_reclaim_reent>:
 800a020:	4b2c      	ldr	r3, [pc, #176]	; (800a0d4 <_reclaim_reent+0xb4>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4283      	cmp	r3, r0
 800a026:	b570      	push	{r4, r5, r6, lr}
 800a028:	4604      	mov	r4, r0
 800a02a:	d051      	beq.n	800a0d0 <_reclaim_reent+0xb0>
 800a02c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a02e:	b143      	cbz	r3, 800a042 <_reclaim_reent+0x22>
 800a030:	68db      	ldr	r3, [r3, #12]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d14a      	bne.n	800a0cc <_reclaim_reent+0xac>
 800a036:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a038:	6819      	ldr	r1, [r3, #0]
 800a03a:	b111      	cbz	r1, 800a042 <_reclaim_reent+0x22>
 800a03c:	4620      	mov	r0, r4
 800a03e:	f000 fac7 	bl	800a5d0 <_free_r>
 800a042:	6961      	ldr	r1, [r4, #20]
 800a044:	b111      	cbz	r1, 800a04c <_reclaim_reent+0x2c>
 800a046:	4620      	mov	r0, r4
 800a048:	f000 fac2 	bl	800a5d0 <_free_r>
 800a04c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a04e:	b111      	cbz	r1, 800a056 <_reclaim_reent+0x36>
 800a050:	4620      	mov	r0, r4
 800a052:	f000 fabd 	bl	800a5d0 <_free_r>
 800a056:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a058:	b111      	cbz	r1, 800a060 <_reclaim_reent+0x40>
 800a05a:	4620      	mov	r0, r4
 800a05c:	f000 fab8 	bl	800a5d0 <_free_r>
 800a060:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a062:	b111      	cbz	r1, 800a06a <_reclaim_reent+0x4a>
 800a064:	4620      	mov	r0, r4
 800a066:	f000 fab3 	bl	800a5d0 <_free_r>
 800a06a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a06c:	b111      	cbz	r1, 800a074 <_reclaim_reent+0x54>
 800a06e:	4620      	mov	r0, r4
 800a070:	f000 faae 	bl	800a5d0 <_free_r>
 800a074:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a076:	b111      	cbz	r1, 800a07e <_reclaim_reent+0x5e>
 800a078:	4620      	mov	r0, r4
 800a07a:	f000 faa9 	bl	800a5d0 <_free_r>
 800a07e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a080:	b111      	cbz	r1, 800a088 <_reclaim_reent+0x68>
 800a082:	4620      	mov	r0, r4
 800a084:	f000 faa4 	bl	800a5d0 <_free_r>
 800a088:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a08a:	b111      	cbz	r1, 800a092 <_reclaim_reent+0x72>
 800a08c:	4620      	mov	r0, r4
 800a08e:	f000 fa9f 	bl	800a5d0 <_free_r>
 800a092:	69a3      	ldr	r3, [r4, #24]
 800a094:	b1e3      	cbz	r3, 800a0d0 <_reclaim_reent+0xb0>
 800a096:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a098:	4620      	mov	r0, r4
 800a09a:	4798      	blx	r3
 800a09c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a09e:	b1b9      	cbz	r1, 800a0d0 <_reclaim_reent+0xb0>
 800a0a0:	4620      	mov	r0, r4
 800a0a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a0a6:	f7ff bfad 	b.w	800a004 <cleanup_glue>
 800a0aa:	5949      	ldr	r1, [r1, r5]
 800a0ac:	b941      	cbnz	r1, 800a0c0 <_reclaim_reent+0xa0>
 800a0ae:	3504      	adds	r5, #4
 800a0b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0b2:	2d80      	cmp	r5, #128	; 0x80
 800a0b4:	68d9      	ldr	r1, [r3, #12]
 800a0b6:	d1f8      	bne.n	800a0aa <_reclaim_reent+0x8a>
 800a0b8:	4620      	mov	r0, r4
 800a0ba:	f000 fa89 	bl	800a5d0 <_free_r>
 800a0be:	e7ba      	b.n	800a036 <_reclaim_reent+0x16>
 800a0c0:	680e      	ldr	r6, [r1, #0]
 800a0c2:	4620      	mov	r0, r4
 800a0c4:	f000 fa84 	bl	800a5d0 <_free_r>
 800a0c8:	4631      	mov	r1, r6
 800a0ca:	e7ef      	b.n	800a0ac <_reclaim_reent+0x8c>
 800a0cc:	2500      	movs	r5, #0
 800a0ce:	e7ef      	b.n	800a0b0 <_reclaim_reent+0x90>
 800a0d0:	bd70      	pop	{r4, r5, r6, pc}
 800a0d2:	bf00      	nop
 800a0d4:	24000014 	.word	0x24000014

0800a0d8 <_sbrk_r>:
 800a0d8:	b538      	push	{r3, r4, r5, lr}
 800a0da:	4d06      	ldr	r5, [pc, #24]	; (800a0f4 <_sbrk_r+0x1c>)
 800a0dc:	2300      	movs	r3, #0
 800a0de:	4604      	mov	r4, r0
 800a0e0:	4608      	mov	r0, r1
 800a0e2:	602b      	str	r3, [r5, #0]
 800a0e4:	f7f7 fa56 	bl	8001594 <_sbrk>
 800a0e8:	1c43      	adds	r3, r0, #1
 800a0ea:	d102      	bne.n	800a0f2 <_sbrk_r+0x1a>
 800a0ec:	682b      	ldr	r3, [r5, #0]
 800a0ee:	b103      	cbz	r3, 800a0f2 <_sbrk_r+0x1a>
 800a0f0:	6023      	str	r3, [r4, #0]
 800a0f2:	bd38      	pop	{r3, r4, r5, pc}
 800a0f4:	24004d58 	.word	0x24004d58

0800a0f8 <__sread>:
 800a0f8:	b510      	push	{r4, lr}
 800a0fa:	460c      	mov	r4, r1
 800a0fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a100:	f000 fab2 	bl	800a668 <_read_r>
 800a104:	2800      	cmp	r0, #0
 800a106:	bfab      	itete	ge
 800a108:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a10a:	89a3      	ldrhlt	r3, [r4, #12]
 800a10c:	181b      	addge	r3, r3, r0
 800a10e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a112:	bfac      	ite	ge
 800a114:	6563      	strge	r3, [r4, #84]	; 0x54
 800a116:	81a3      	strhlt	r3, [r4, #12]
 800a118:	bd10      	pop	{r4, pc}

0800a11a <__swrite>:
 800a11a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a11e:	461f      	mov	r7, r3
 800a120:	898b      	ldrh	r3, [r1, #12]
 800a122:	05db      	lsls	r3, r3, #23
 800a124:	4605      	mov	r5, r0
 800a126:	460c      	mov	r4, r1
 800a128:	4616      	mov	r6, r2
 800a12a:	d505      	bpl.n	800a138 <__swrite+0x1e>
 800a12c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a130:	2302      	movs	r3, #2
 800a132:	2200      	movs	r2, #0
 800a134:	f000 f9c8 	bl	800a4c8 <_lseek_r>
 800a138:	89a3      	ldrh	r3, [r4, #12]
 800a13a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a13e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a142:	81a3      	strh	r3, [r4, #12]
 800a144:	4632      	mov	r2, r6
 800a146:	463b      	mov	r3, r7
 800a148:	4628      	mov	r0, r5
 800a14a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a14e:	f000 b869 	b.w	800a224 <_write_r>

0800a152 <__sseek>:
 800a152:	b510      	push	{r4, lr}
 800a154:	460c      	mov	r4, r1
 800a156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a15a:	f000 f9b5 	bl	800a4c8 <_lseek_r>
 800a15e:	1c43      	adds	r3, r0, #1
 800a160:	89a3      	ldrh	r3, [r4, #12]
 800a162:	bf15      	itete	ne
 800a164:	6560      	strne	r0, [r4, #84]	; 0x54
 800a166:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a16a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a16e:	81a3      	strheq	r3, [r4, #12]
 800a170:	bf18      	it	ne
 800a172:	81a3      	strhne	r3, [r4, #12]
 800a174:	bd10      	pop	{r4, pc}

0800a176 <__sclose>:
 800a176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a17a:	f000 b8d3 	b.w	800a324 <_close_r>
	...

0800a180 <__swbuf_r>:
 800a180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a182:	460e      	mov	r6, r1
 800a184:	4614      	mov	r4, r2
 800a186:	4605      	mov	r5, r0
 800a188:	b118      	cbz	r0, 800a192 <__swbuf_r+0x12>
 800a18a:	6983      	ldr	r3, [r0, #24]
 800a18c:	b90b      	cbnz	r3, 800a192 <__swbuf_r+0x12>
 800a18e:	f7ff fd53 	bl	8009c38 <__sinit>
 800a192:	4b21      	ldr	r3, [pc, #132]	; (800a218 <__swbuf_r+0x98>)
 800a194:	429c      	cmp	r4, r3
 800a196:	d12b      	bne.n	800a1f0 <__swbuf_r+0x70>
 800a198:	686c      	ldr	r4, [r5, #4]
 800a19a:	69a3      	ldr	r3, [r4, #24]
 800a19c:	60a3      	str	r3, [r4, #8]
 800a19e:	89a3      	ldrh	r3, [r4, #12]
 800a1a0:	071a      	lsls	r2, r3, #28
 800a1a2:	d52f      	bpl.n	800a204 <__swbuf_r+0x84>
 800a1a4:	6923      	ldr	r3, [r4, #16]
 800a1a6:	b36b      	cbz	r3, 800a204 <__swbuf_r+0x84>
 800a1a8:	6923      	ldr	r3, [r4, #16]
 800a1aa:	6820      	ldr	r0, [r4, #0]
 800a1ac:	1ac0      	subs	r0, r0, r3
 800a1ae:	6963      	ldr	r3, [r4, #20]
 800a1b0:	b2f6      	uxtb	r6, r6
 800a1b2:	4283      	cmp	r3, r0
 800a1b4:	4637      	mov	r7, r6
 800a1b6:	dc04      	bgt.n	800a1c2 <__swbuf_r+0x42>
 800a1b8:	4621      	mov	r1, r4
 800a1ba:	4628      	mov	r0, r5
 800a1bc:	f000 f948 	bl	800a450 <_fflush_r>
 800a1c0:	bb30      	cbnz	r0, 800a210 <__swbuf_r+0x90>
 800a1c2:	68a3      	ldr	r3, [r4, #8]
 800a1c4:	3b01      	subs	r3, #1
 800a1c6:	60a3      	str	r3, [r4, #8]
 800a1c8:	6823      	ldr	r3, [r4, #0]
 800a1ca:	1c5a      	adds	r2, r3, #1
 800a1cc:	6022      	str	r2, [r4, #0]
 800a1ce:	701e      	strb	r6, [r3, #0]
 800a1d0:	6963      	ldr	r3, [r4, #20]
 800a1d2:	3001      	adds	r0, #1
 800a1d4:	4283      	cmp	r3, r0
 800a1d6:	d004      	beq.n	800a1e2 <__swbuf_r+0x62>
 800a1d8:	89a3      	ldrh	r3, [r4, #12]
 800a1da:	07db      	lsls	r3, r3, #31
 800a1dc:	d506      	bpl.n	800a1ec <__swbuf_r+0x6c>
 800a1de:	2e0a      	cmp	r6, #10
 800a1e0:	d104      	bne.n	800a1ec <__swbuf_r+0x6c>
 800a1e2:	4621      	mov	r1, r4
 800a1e4:	4628      	mov	r0, r5
 800a1e6:	f000 f933 	bl	800a450 <_fflush_r>
 800a1ea:	b988      	cbnz	r0, 800a210 <__swbuf_r+0x90>
 800a1ec:	4638      	mov	r0, r7
 800a1ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1f0:	4b0a      	ldr	r3, [pc, #40]	; (800a21c <__swbuf_r+0x9c>)
 800a1f2:	429c      	cmp	r4, r3
 800a1f4:	d101      	bne.n	800a1fa <__swbuf_r+0x7a>
 800a1f6:	68ac      	ldr	r4, [r5, #8]
 800a1f8:	e7cf      	b.n	800a19a <__swbuf_r+0x1a>
 800a1fa:	4b09      	ldr	r3, [pc, #36]	; (800a220 <__swbuf_r+0xa0>)
 800a1fc:	429c      	cmp	r4, r3
 800a1fe:	bf08      	it	eq
 800a200:	68ec      	ldreq	r4, [r5, #12]
 800a202:	e7ca      	b.n	800a19a <__swbuf_r+0x1a>
 800a204:	4621      	mov	r1, r4
 800a206:	4628      	mov	r0, r5
 800a208:	f000 f81e 	bl	800a248 <__swsetup_r>
 800a20c:	2800      	cmp	r0, #0
 800a20e:	d0cb      	beq.n	800a1a8 <__swbuf_r+0x28>
 800a210:	f04f 37ff 	mov.w	r7, #4294967295
 800a214:	e7ea      	b.n	800a1ec <__swbuf_r+0x6c>
 800a216:	bf00      	nop
 800a218:	0800a81c 	.word	0x0800a81c
 800a21c:	0800a83c 	.word	0x0800a83c
 800a220:	0800a7fc 	.word	0x0800a7fc

0800a224 <_write_r>:
 800a224:	b538      	push	{r3, r4, r5, lr}
 800a226:	4d07      	ldr	r5, [pc, #28]	; (800a244 <_write_r+0x20>)
 800a228:	4604      	mov	r4, r0
 800a22a:	4608      	mov	r0, r1
 800a22c:	4611      	mov	r1, r2
 800a22e:	2200      	movs	r2, #0
 800a230:	602a      	str	r2, [r5, #0]
 800a232:	461a      	mov	r2, r3
 800a234:	f7f7 f95d 	bl	80014f2 <_write>
 800a238:	1c43      	adds	r3, r0, #1
 800a23a:	d102      	bne.n	800a242 <_write_r+0x1e>
 800a23c:	682b      	ldr	r3, [r5, #0]
 800a23e:	b103      	cbz	r3, 800a242 <_write_r+0x1e>
 800a240:	6023      	str	r3, [r4, #0]
 800a242:	bd38      	pop	{r3, r4, r5, pc}
 800a244:	24004d58 	.word	0x24004d58

0800a248 <__swsetup_r>:
 800a248:	4b32      	ldr	r3, [pc, #200]	; (800a314 <__swsetup_r+0xcc>)
 800a24a:	b570      	push	{r4, r5, r6, lr}
 800a24c:	681d      	ldr	r5, [r3, #0]
 800a24e:	4606      	mov	r6, r0
 800a250:	460c      	mov	r4, r1
 800a252:	b125      	cbz	r5, 800a25e <__swsetup_r+0x16>
 800a254:	69ab      	ldr	r3, [r5, #24]
 800a256:	b913      	cbnz	r3, 800a25e <__swsetup_r+0x16>
 800a258:	4628      	mov	r0, r5
 800a25a:	f7ff fced 	bl	8009c38 <__sinit>
 800a25e:	4b2e      	ldr	r3, [pc, #184]	; (800a318 <__swsetup_r+0xd0>)
 800a260:	429c      	cmp	r4, r3
 800a262:	d10f      	bne.n	800a284 <__swsetup_r+0x3c>
 800a264:	686c      	ldr	r4, [r5, #4]
 800a266:	89a3      	ldrh	r3, [r4, #12]
 800a268:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a26c:	0719      	lsls	r1, r3, #28
 800a26e:	d42c      	bmi.n	800a2ca <__swsetup_r+0x82>
 800a270:	06dd      	lsls	r5, r3, #27
 800a272:	d411      	bmi.n	800a298 <__swsetup_r+0x50>
 800a274:	2309      	movs	r3, #9
 800a276:	6033      	str	r3, [r6, #0]
 800a278:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a27c:	81a3      	strh	r3, [r4, #12]
 800a27e:	f04f 30ff 	mov.w	r0, #4294967295
 800a282:	e03e      	b.n	800a302 <__swsetup_r+0xba>
 800a284:	4b25      	ldr	r3, [pc, #148]	; (800a31c <__swsetup_r+0xd4>)
 800a286:	429c      	cmp	r4, r3
 800a288:	d101      	bne.n	800a28e <__swsetup_r+0x46>
 800a28a:	68ac      	ldr	r4, [r5, #8]
 800a28c:	e7eb      	b.n	800a266 <__swsetup_r+0x1e>
 800a28e:	4b24      	ldr	r3, [pc, #144]	; (800a320 <__swsetup_r+0xd8>)
 800a290:	429c      	cmp	r4, r3
 800a292:	bf08      	it	eq
 800a294:	68ec      	ldreq	r4, [r5, #12]
 800a296:	e7e6      	b.n	800a266 <__swsetup_r+0x1e>
 800a298:	0758      	lsls	r0, r3, #29
 800a29a:	d512      	bpl.n	800a2c2 <__swsetup_r+0x7a>
 800a29c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a29e:	b141      	cbz	r1, 800a2b2 <__swsetup_r+0x6a>
 800a2a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2a4:	4299      	cmp	r1, r3
 800a2a6:	d002      	beq.n	800a2ae <__swsetup_r+0x66>
 800a2a8:	4630      	mov	r0, r6
 800a2aa:	f000 f991 	bl	800a5d0 <_free_r>
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	6363      	str	r3, [r4, #52]	; 0x34
 800a2b2:	89a3      	ldrh	r3, [r4, #12]
 800a2b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a2b8:	81a3      	strh	r3, [r4, #12]
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	6063      	str	r3, [r4, #4]
 800a2be:	6923      	ldr	r3, [r4, #16]
 800a2c0:	6023      	str	r3, [r4, #0]
 800a2c2:	89a3      	ldrh	r3, [r4, #12]
 800a2c4:	f043 0308 	orr.w	r3, r3, #8
 800a2c8:	81a3      	strh	r3, [r4, #12]
 800a2ca:	6923      	ldr	r3, [r4, #16]
 800a2cc:	b94b      	cbnz	r3, 800a2e2 <__swsetup_r+0x9a>
 800a2ce:	89a3      	ldrh	r3, [r4, #12]
 800a2d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a2d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2d8:	d003      	beq.n	800a2e2 <__swsetup_r+0x9a>
 800a2da:	4621      	mov	r1, r4
 800a2dc:	4630      	mov	r0, r6
 800a2de:	f000 f92b 	bl	800a538 <__smakebuf_r>
 800a2e2:	89a0      	ldrh	r0, [r4, #12]
 800a2e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2e8:	f010 0301 	ands.w	r3, r0, #1
 800a2ec:	d00a      	beq.n	800a304 <__swsetup_r+0xbc>
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	60a3      	str	r3, [r4, #8]
 800a2f2:	6963      	ldr	r3, [r4, #20]
 800a2f4:	425b      	negs	r3, r3
 800a2f6:	61a3      	str	r3, [r4, #24]
 800a2f8:	6923      	ldr	r3, [r4, #16]
 800a2fa:	b943      	cbnz	r3, 800a30e <__swsetup_r+0xc6>
 800a2fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a300:	d1ba      	bne.n	800a278 <__swsetup_r+0x30>
 800a302:	bd70      	pop	{r4, r5, r6, pc}
 800a304:	0781      	lsls	r1, r0, #30
 800a306:	bf58      	it	pl
 800a308:	6963      	ldrpl	r3, [r4, #20]
 800a30a:	60a3      	str	r3, [r4, #8]
 800a30c:	e7f4      	b.n	800a2f8 <__swsetup_r+0xb0>
 800a30e:	2000      	movs	r0, #0
 800a310:	e7f7      	b.n	800a302 <__swsetup_r+0xba>
 800a312:	bf00      	nop
 800a314:	24000014 	.word	0x24000014
 800a318:	0800a81c 	.word	0x0800a81c
 800a31c:	0800a83c 	.word	0x0800a83c
 800a320:	0800a7fc 	.word	0x0800a7fc

0800a324 <_close_r>:
 800a324:	b538      	push	{r3, r4, r5, lr}
 800a326:	4d06      	ldr	r5, [pc, #24]	; (800a340 <_close_r+0x1c>)
 800a328:	2300      	movs	r3, #0
 800a32a:	4604      	mov	r4, r0
 800a32c:	4608      	mov	r0, r1
 800a32e:	602b      	str	r3, [r5, #0]
 800a330:	f7f7 f8fb 	bl	800152a <_close>
 800a334:	1c43      	adds	r3, r0, #1
 800a336:	d102      	bne.n	800a33e <_close_r+0x1a>
 800a338:	682b      	ldr	r3, [r5, #0]
 800a33a:	b103      	cbz	r3, 800a33e <_close_r+0x1a>
 800a33c:	6023      	str	r3, [r4, #0]
 800a33e:	bd38      	pop	{r3, r4, r5, pc}
 800a340:	24004d58 	.word	0x24004d58

0800a344 <__sflush_r>:
 800a344:	898a      	ldrh	r2, [r1, #12]
 800a346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a34a:	4605      	mov	r5, r0
 800a34c:	0710      	lsls	r0, r2, #28
 800a34e:	460c      	mov	r4, r1
 800a350:	d458      	bmi.n	800a404 <__sflush_r+0xc0>
 800a352:	684b      	ldr	r3, [r1, #4]
 800a354:	2b00      	cmp	r3, #0
 800a356:	dc05      	bgt.n	800a364 <__sflush_r+0x20>
 800a358:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	dc02      	bgt.n	800a364 <__sflush_r+0x20>
 800a35e:	2000      	movs	r0, #0
 800a360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a364:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a366:	2e00      	cmp	r6, #0
 800a368:	d0f9      	beq.n	800a35e <__sflush_r+0x1a>
 800a36a:	2300      	movs	r3, #0
 800a36c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a370:	682f      	ldr	r7, [r5, #0]
 800a372:	602b      	str	r3, [r5, #0]
 800a374:	d032      	beq.n	800a3dc <__sflush_r+0x98>
 800a376:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a378:	89a3      	ldrh	r3, [r4, #12]
 800a37a:	075a      	lsls	r2, r3, #29
 800a37c:	d505      	bpl.n	800a38a <__sflush_r+0x46>
 800a37e:	6863      	ldr	r3, [r4, #4]
 800a380:	1ac0      	subs	r0, r0, r3
 800a382:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a384:	b10b      	cbz	r3, 800a38a <__sflush_r+0x46>
 800a386:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a388:	1ac0      	subs	r0, r0, r3
 800a38a:	2300      	movs	r3, #0
 800a38c:	4602      	mov	r2, r0
 800a38e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a390:	6a21      	ldr	r1, [r4, #32]
 800a392:	4628      	mov	r0, r5
 800a394:	47b0      	blx	r6
 800a396:	1c43      	adds	r3, r0, #1
 800a398:	89a3      	ldrh	r3, [r4, #12]
 800a39a:	d106      	bne.n	800a3aa <__sflush_r+0x66>
 800a39c:	6829      	ldr	r1, [r5, #0]
 800a39e:	291d      	cmp	r1, #29
 800a3a0:	d82c      	bhi.n	800a3fc <__sflush_r+0xb8>
 800a3a2:	4a2a      	ldr	r2, [pc, #168]	; (800a44c <__sflush_r+0x108>)
 800a3a4:	40ca      	lsrs	r2, r1
 800a3a6:	07d6      	lsls	r6, r2, #31
 800a3a8:	d528      	bpl.n	800a3fc <__sflush_r+0xb8>
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	6062      	str	r2, [r4, #4]
 800a3ae:	04d9      	lsls	r1, r3, #19
 800a3b0:	6922      	ldr	r2, [r4, #16]
 800a3b2:	6022      	str	r2, [r4, #0]
 800a3b4:	d504      	bpl.n	800a3c0 <__sflush_r+0x7c>
 800a3b6:	1c42      	adds	r2, r0, #1
 800a3b8:	d101      	bne.n	800a3be <__sflush_r+0x7a>
 800a3ba:	682b      	ldr	r3, [r5, #0]
 800a3bc:	b903      	cbnz	r3, 800a3c0 <__sflush_r+0x7c>
 800a3be:	6560      	str	r0, [r4, #84]	; 0x54
 800a3c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3c2:	602f      	str	r7, [r5, #0]
 800a3c4:	2900      	cmp	r1, #0
 800a3c6:	d0ca      	beq.n	800a35e <__sflush_r+0x1a>
 800a3c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3cc:	4299      	cmp	r1, r3
 800a3ce:	d002      	beq.n	800a3d6 <__sflush_r+0x92>
 800a3d0:	4628      	mov	r0, r5
 800a3d2:	f000 f8fd 	bl	800a5d0 <_free_r>
 800a3d6:	2000      	movs	r0, #0
 800a3d8:	6360      	str	r0, [r4, #52]	; 0x34
 800a3da:	e7c1      	b.n	800a360 <__sflush_r+0x1c>
 800a3dc:	6a21      	ldr	r1, [r4, #32]
 800a3de:	2301      	movs	r3, #1
 800a3e0:	4628      	mov	r0, r5
 800a3e2:	47b0      	blx	r6
 800a3e4:	1c41      	adds	r1, r0, #1
 800a3e6:	d1c7      	bne.n	800a378 <__sflush_r+0x34>
 800a3e8:	682b      	ldr	r3, [r5, #0]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d0c4      	beq.n	800a378 <__sflush_r+0x34>
 800a3ee:	2b1d      	cmp	r3, #29
 800a3f0:	d001      	beq.n	800a3f6 <__sflush_r+0xb2>
 800a3f2:	2b16      	cmp	r3, #22
 800a3f4:	d101      	bne.n	800a3fa <__sflush_r+0xb6>
 800a3f6:	602f      	str	r7, [r5, #0]
 800a3f8:	e7b1      	b.n	800a35e <__sflush_r+0x1a>
 800a3fa:	89a3      	ldrh	r3, [r4, #12]
 800a3fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a400:	81a3      	strh	r3, [r4, #12]
 800a402:	e7ad      	b.n	800a360 <__sflush_r+0x1c>
 800a404:	690f      	ldr	r7, [r1, #16]
 800a406:	2f00      	cmp	r7, #0
 800a408:	d0a9      	beq.n	800a35e <__sflush_r+0x1a>
 800a40a:	0793      	lsls	r3, r2, #30
 800a40c:	680e      	ldr	r6, [r1, #0]
 800a40e:	bf08      	it	eq
 800a410:	694b      	ldreq	r3, [r1, #20]
 800a412:	600f      	str	r7, [r1, #0]
 800a414:	bf18      	it	ne
 800a416:	2300      	movne	r3, #0
 800a418:	eba6 0807 	sub.w	r8, r6, r7
 800a41c:	608b      	str	r3, [r1, #8]
 800a41e:	f1b8 0f00 	cmp.w	r8, #0
 800a422:	dd9c      	ble.n	800a35e <__sflush_r+0x1a>
 800a424:	6a21      	ldr	r1, [r4, #32]
 800a426:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a428:	4643      	mov	r3, r8
 800a42a:	463a      	mov	r2, r7
 800a42c:	4628      	mov	r0, r5
 800a42e:	47b0      	blx	r6
 800a430:	2800      	cmp	r0, #0
 800a432:	dc06      	bgt.n	800a442 <__sflush_r+0xfe>
 800a434:	89a3      	ldrh	r3, [r4, #12]
 800a436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a43a:	81a3      	strh	r3, [r4, #12]
 800a43c:	f04f 30ff 	mov.w	r0, #4294967295
 800a440:	e78e      	b.n	800a360 <__sflush_r+0x1c>
 800a442:	4407      	add	r7, r0
 800a444:	eba8 0800 	sub.w	r8, r8, r0
 800a448:	e7e9      	b.n	800a41e <__sflush_r+0xda>
 800a44a:	bf00      	nop
 800a44c:	20400001 	.word	0x20400001

0800a450 <_fflush_r>:
 800a450:	b538      	push	{r3, r4, r5, lr}
 800a452:	690b      	ldr	r3, [r1, #16]
 800a454:	4605      	mov	r5, r0
 800a456:	460c      	mov	r4, r1
 800a458:	b913      	cbnz	r3, 800a460 <_fflush_r+0x10>
 800a45a:	2500      	movs	r5, #0
 800a45c:	4628      	mov	r0, r5
 800a45e:	bd38      	pop	{r3, r4, r5, pc}
 800a460:	b118      	cbz	r0, 800a46a <_fflush_r+0x1a>
 800a462:	6983      	ldr	r3, [r0, #24]
 800a464:	b90b      	cbnz	r3, 800a46a <_fflush_r+0x1a>
 800a466:	f7ff fbe7 	bl	8009c38 <__sinit>
 800a46a:	4b14      	ldr	r3, [pc, #80]	; (800a4bc <_fflush_r+0x6c>)
 800a46c:	429c      	cmp	r4, r3
 800a46e:	d11b      	bne.n	800a4a8 <_fflush_r+0x58>
 800a470:	686c      	ldr	r4, [r5, #4]
 800a472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d0ef      	beq.n	800a45a <_fflush_r+0xa>
 800a47a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a47c:	07d0      	lsls	r0, r2, #31
 800a47e:	d404      	bmi.n	800a48a <_fflush_r+0x3a>
 800a480:	0599      	lsls	r1, r3, #22
 800a482:	d402      	bmi.n	800a48a <_fflush_r+0x3a>
 800a484:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a486:	f7ff fc9a 	bl	8009dbe <__retarget_lock_acquire_recursive>
 800a48a:	4628      	mov	r0, r5
 800a48c:	4621      	mov	r1, r4
 800a48e:	f7ff ff59 	bl	800a344 <__sflush_r>
 800a492:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a494:	07da      	lsls	r2, r3, #31
 800a496:	4605      	mov	r5, r0
 800a498:	d4e0      	bmi.n	800a45c <_fflush_r+0xc>
 800a49a:	89a3      	ldrh	r3, [r4, #12]
 800a49c:	059b      	lsls	r3, r3, #22
 800a49e:	d4dd      	bmi.n	800a45c <_fflush_r+0xc>
 800a4a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4a2:	f7ff fc8d 	bl	8009dc0 <__retarget_lock_release_recursive>
 800a4a6:	e7d9      	b.n	800a45c <_fflush_r+0xc>
 800a4a8:	4b05      	ldr	r3, [pc, #20]	; (800a4c0 <_fflush_r+0x70>)
 800a4aa:	429c      	cmp	r4, r3
 800a4ac:	d101      	bne.n	800a4b2 <_fflush_r+0x62>
 800a4ae:	68ac      	ldr	r4, [r5, #8]
 800a4b0:	e7df      	b.n	800a472 <_fflush_r+0x22>
 800a4b2:	4b04      	ldr	r3, [pc, #16]	; (800a4c4 <_fflush_r+0x74>)
 800a4b4:	429c      	cmp	r4, r3
 800a4b6:	bf08      	it	eq
 800a4b8:	68ec      	ldreq	r4, [r5, #12]
 800a4ba:	e7da      	b.n	800a472 <_fflush_r+0x22>
 800a4bc:	0800a81c 	.word	0x0800a81c
 800a4c0:	0800a83c 	.word	0x0800a83c
 800a4c4:	0800a7fc 	.word	0x0800a7fc

0800a4c8 <_lseek_r>:
 800a4c8:	b538      	push	{r3, r4, r5, lr}
 800a4ca:	4d07      	ldr	r5, [pc, #28]	; (800a4e8 <_lseek_r+0x20>)
 800a4cc:	4604      	mov	r4, r0
 800a4ce:	4608      	mov	r0, r1
 800a4d0:	4611      	mov	r1, r2
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	602a      	str	r2, [r5, #0]
 800a4d6:	461a      	mov	r2, r3
 800a4d8:	f7f7 f84e 	bl	8001578 <_lseek>
 800a4dc:	1c43      	adds	r3, r0, #1
 800a4de:	d102      	bne.n	800a4e6 <_lseek_r+0x1e>
 800a4e0:	682b      	ldr	r3, [r5, #0]
 800a4e2:	b103      	cbz	r3, 800a4e6 <_lseek_r+0x1e>
 800a4e4:	6023      	str	r3, [r4, #0]
 800a4e6:	bd38      	pop	{r3, r4, r5, pc}
 800a4e8:	24004d58 	.word	0x24004d58

0800a4ec <__swhatbuf_r>:
 800a4ec:	b570      	push	{r4, r5, r6, lr}
 800a4ee:	460e      	mov	r6, r1
 800a4f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4f4:	2900      	cmp	r1, #0
 800a4f6:	b096      	sub	sp, #88	; 0x58
 800a4f8:	4614      	mov	r4, r2
 800a4fa:	461d      	mov	r5, r3
 800a4fc:	da08      	bge.n	800a510 <__swhatbuf_r+0x24>
 800a4fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a502:	2200      	movs	r2, #0
 800a504:	602a      	str	r2, [r5, #0]
 800a506:	061a      	lsls	r2, r3, #24
 800a508:	d410      	bmi.n	800a52c <__swhatbuf_r+0x40>
 800a50a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a50e:	e00e      	b.n	800a52e <__swhatbuf_r+0x42>
 800a510:	466a      	mov	r2, sp
 800a512:	f000 f8bb 	bl	800a68c <_fstat_r>
 800a516:	2800      	cmp	r0, #0
 800a518:	dbf1      	blt.n	800a4fe <__swhatbuf_r+0x12>
 800a51a:	9a01      	ldr	r2, [sp, #4]
 800a51c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a520:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a524:	425a      	negs	r2, r3
 800a526:	415a      	adcs	r2, r3
 800a528:	602a      	str	r2, [r5, #0]
 800a52a:	e7ee      	b.n	800a50a <__swhatbuf_r+0x1e>
 800a52c:	2340      	movs	r3, #64	; 0x40
 800a52e:	2000      	movs	r0, #0
 800a530:	6023      	str	r3, [r4, #0]
 800a532:	b016      	add	sp, #88	; 0x58
 800a534:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a538 <__smakebuf_r>:
 800a538:	898b      	ldrh	r3, [r1, #12]
 800a53a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a53c:	079d      	lsls	r5, r3, #30
 800a53e:	4606      	mov	r6, r0
 800a540:	460c      	mov	r4, r1
 800a542:	d507      	bpl.n	800a554 <__smakebuf_r+0x1c>
 800a544:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a548:	6023      	str	r3, [r4, #0]
 800a54a:	6123      	str	r3, [r4, #16]
 800a54c:	2301      	movs	r3, #1
 800a54e:	6163      	str	r3, [r4, #20]
 800a550:	b002      	add	sp, #8
 800a552:	bd70      	pop	{r4, r5, r6, pc}
 800a554:	ab01      	add	r3, sp, #4
 800a556:	466a      	mov	r2, sp
 800a558:	f7ff ffc8 	bl	800a4ec <__swhatbuf_r>
 800a55c:	9900      	ldr	r1, [sp, #0]
 800a55e:	4605      	mov	r5, r0
 800a560:	4630      	mov	r0, r6
 800a562:	f7ff fc65 	bl	8009e30 <_malloc_r>
 800a566:	b948      	cbnz	r0, 800a57c <__smakebuf_r+0x44>
 800a568:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a56c:	059a      	lsls	r2, r3, #22
 800a56e:	d4ef      	bmi.n	800a550 <__smakebuf_r+0x18>
 800a570:	f023 0303 	bic.w	r3, r3, #3
 800a574:	f043 0302 	orr.w	r3, r3, #2
 800a578:	81a3      	strh	r3, [r4, #12]
 800a57a:	e7e3      	b.n	800a544 <__smakebuf_r+0xc>
 800a57c:	4b0d      	ldr	r3, [pc, #52]	; (800a5b4 <__smakebuf_r+0x7c>)
 800a57e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a580:	89a3      	ldrh	r3, [r4, #12]
 800a582:	6020      	str	r0, [r4, #0]
 800a584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a588:	81a3      	strh	r3, [r4, #12]
 800a58a:	9b00      	ldr	r3, [sp, #0]
 800a58c:	6163      	str	r3, [r4, #20]
 800a58e:	9b01      	ldr	r3, [sp, #4]
 800a590:	6120      	str	r0, [r4, #16]
 800a592:	b15b      	cbz	r3, 800a5ac <__smakebuf_r+0x74>
 800a594:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a598:	4630      	mov	r0, r6
 800a59a:	f000 f889 	bl	800a6b0 <_isatty_r>
 800a59e:	b128      	cbz	r0, 800a5ac <__smakebuf_r+0x74>
 800a5a0:	89a3      	ldrh	r3, [r4, #12]
 800a5a2:	f023 0303 	bic.w	r3, r3, #3
 800a5a6:	f043 0301 	orr.w	r3, r3, #1
 800a5aa:	81a3      	strh	r3, [r4, #12]
 800a5ac:	89a0      	ldrh	r0, [r4, #12]
 800a5ae:	4305      	orrs	r5, r0
 800a5b0:	81a5      	strh	r5, [r4, #12]
 800a5b2:	e7cd      	b.n	800a550 <__smakebuf_r+0x18>
 800a5b4:	08009bd1 	.word	0x08009bd1

0800a5b8 <__malloc_lock>:
 800a5b8:	4801      	ldr	r0, [pc, #4]	; (800a5c0 <__malloc_lock+0x8>)
 800a5ba:	f7ff bc00 	b.w	8009dbe <__retarget_lock_acquire_recursive>
 800a5be:	bf00      	nop
 800a5c0:	24004d4c 	.word	0x24004d4c

0800a5c4 <__malloc_unlock>:
 800a5c4:	4801      	ldr	r0, [pc, #4]	; (800a5cc <__malloc_unlock+0x8>)
 800a5c6:	f7ff bbfb 	b.w	8009dc0 <__retarget_lock_release_recursive>
 800a5ca:	bf00      	nop
 800a5cc:	24004d4c 	.word	0x24004d4c

0800a5d0 <_free_r>:
 800a5d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a5d2:	2900      	cmp	r1, #0
 800a5d4:	d044      	beq.n	800a660 <_free_r+0x90>
 800a5d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5da:	9001      	str	r0, [sp, #4]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	f1a1 0404 	sub.w	r4, r1, #4
 800a5e2:	bfb8      	it	lt
 800a5e4:	18e4      	addlt	r4, r4, r3
 800a5e6:	f7ff ffe7 	bl	800a5b8 <__malloc_lock>
 800a5ea:	4a1e      	ldr	r2, [pc, #120]	; (800a664 <_free_r+0x94>)
 800a5ec:	9801      	ldr	r0, [sp, #4]
 800a5ee:	6813      	ldr	r3, [r2, #0]
 800a5f0:	b933      	cbnz	r3, 800a600 <_free_r+0x30>
 800a5f2:	6063      	str	r3, [r4, #4]
 800a5f4:	6014      	str	r4, [r2, #0]
 800a5f6:	b003      	add	sp, #12
 800a5f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a5fc:	f7ff bfe2 	b.w	800a5c4 <__malloc_unlock>
 800a600:	42a3      	cmp	r3, r4
 800a602:	d908      	bls.n	800a616 <_free_r+0x46>
 800a604:	6825      	ldr	r5, [r4, #0]
 800a606:	1961      	adds	r1, r4, r5
 800a608:	428b      	cmp	r3, r1
 800a60a:	bf01      	itttt	eq
 800a60c:	6819      	ldreq	r1, [r3, #0]
 800a60e:	685b      	ldreq	r3, [r3, #4]
 800a610:	1949      	addeq	r1, r1, r5
 800a612:	6021      	streq	r1, [r4, #0]
 800a614:	e7ed      	b.n	800a5f2 <_free_r+0x22>
 800a616:	461a      	mov	r2, r3
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	b10b      	cbz	r3, 800a620 <_free_r+0x50>
 800a61c:	42a3      	cmp	r3, r4
 800a61e:	d9fa      	bls.n	800a616 <_free_r+0x46>
 800a620:	6811      	ldr	r1, [r2, #0]
 800a622:	1855      	adds	r5, r2, r1
 800a624:	42a5      	cmp	r5, r4
 800a626:	d10b      	bne.n	800a640 <_free_r+0x70>
 800a628:	6824      	ldr	r4, [r4, #0]
 800a62a:	4421      	add	r1, r4
 800a62c:	1854      	adds	r4, r2, r1
 800a62e:	42a3      	cmp	r3, r4
 800a630:	6011      	str	r1, [r2, #0]
 800a632:	d1e0      	bne.n	800a5f6 <_free_r+0x26>
 800a634:	681c      	ldr	r4, [r3, #0]
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	6053      	str	r3, [r2, #4]
 800a63a:	4421      	add	r1, r4
 800a63c:	6011      	str	r1, [r2, #0]
 800a63e:	e7da      	b.n	800a5f6 <_free_r+0x26>
 800a640:	d902      	bls.n	800a648 <_free_r+0x78>
 800a642:	230c      	movs	r3, #12
 800a644:	6003      	str	r3, [r0, #0]
 800a646:	e7d6      	b.n	800a5f6 <_free_r+0x26>
 800a648:	6825      	ldr	r5, [r4, #0]
 800a64a:	1961      	adds	r1, r4, r5
 800a64c:	428b      	cmp	r3, r1
 800a64e:	bf04      	itt	eq
 800a650:	6819      	ldreq	r1, [r3, #0]
 800a652:	685b      	ldreq	r3, [r3, #4]
 800a654:	6063      	str	r3, [r4, #4]
 800a656:	bf04      	itt	eq
 800a658:	1949      	addeq	r1, r1, r5
 800a65a:	6021      	streq	r1, [r4, #0]
 800a65c:	6054      	str	r4, [r2, #4]
 800a65e:	e7ca      	b.n	800a5f6 <_free_r+0x26>
 800a660:	b003      	add	sp, #12
 800a662:	bd30      	pop	{r4, r5, pc}
 800a664:	24004d50 	.word	0x24004d50

0800a668 <_read_r>:
 800a668:	b538      	push	{r3, r4, r5, lr}
 800a66a:	4d07      	ldr	r5, [pc, #28]	; (800a688 <_read_r+0x20>)
 800a66c:	4604      	mov	r4, r0
 800a66e:	4608      	mov	r0, r1
 800a670:	4611      	mov	r1, r2
 800a672:	2200      	movs	r2, #0
 800a674:	602a      	str	r2, [r5, #0]
 800a676:	461a      	mov	r2, r3
 800a678:	f7f6 ff1e 	bl	80014b8 <_read>
 800a67c:	1c43      	adds	r3, r0, #1
 800a67e:	d102      	bne.n	800a686 <_read_r+0x1e>
 800a680:	682b      	ldr	r3, [r5, #0]
 800a682:	b103      	cbz	r3, 800a686 <_read_r+0x1e>
 800a684:	6023      	str	r3, [r4, #0]
 800a686:	bd38      	pop	{r3, r4, r5, pc}
 800a688:	24004d58 	.word	0x24004d58

0800a68c <_fstat_r>:
 800a68c:	b538      	push	{r3, r4, r5, lr}
 800a68e:	4d07      	ldr	r5, [pc, #28]	; (800a6ac <_fstat_r+0x20>)
 800a690:	2300      	movs	r3, #0
 800a692:	4604      	mov	r4, r0
 800a694:	4608      	mov	r0, r1
 800a696:	4611      	mov	r1, r2
 800a698:	602b      	str	r3, [r5, #0]
 800a69a:	f7f6 ff52 	bl	8001542 <_fstat>
 800a69e:	1c43      	adds	r3, r0, #1
 800a6a0:	d102      	bne.n	800a6a8 <_fstat_r+0x1c>
 800a6a2:	682b      	ldr	r3, [r5, #0]
 800a6a4:	b103      	cbz	r3, 800a6a8 <_fstat_r+0x1c>
 800a6a6:	6023      	str	r3, [r4, #0]
 800a6a8:	bd38      	pop	{r3, r4, r5, pc}
 800a6aa:	bf00      	nop
 800a6ac:	24004d58 	.word	0x24004d58

0800a6b0 <_isatty_r>:
 800a6b0:	b538      	push	{r3, r4, r5, lr}
 800a6b2:	4d06      	ldr	r5, [pc, #24]	; (800a6cc <_isatty_r+0x1c>)
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	4604      	mov	r4, r0
 800a6b8:	4608      	mov	r0, r1
 800a6ba:	602b      	str	r3, [r5, #0]
 800a6bc:	f7f6 ff51 	bl	8001562 <_isatty>
 800a6c0:	1c43      	adds	r3, r0, #1
 800a6c2:	d102      	bne.n	800a6ca <_isatty_r+0x1a>
 800a6c4:	682b      	ldr	r3, [r5, #0]
 800a6c6:	b103      	cbz	r3, 800a6ca <_isatty_r+0x1a>
 800a6c8:	6023      	str	r3, [r4, #0]
 800a6ca:	bd38      	pop	{r3, r4, r5, pc}
 800a6cc:	24004d58 	.word	0x24004d58

0800a6d0 <_init>:
 800a6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6d2:	bf00      	nop
 800a6d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6d6:	bc08      	pop	{r3}
 800a6d8:	469e      	mov	lr, r3
 800a6da:	4770      	bx	lr

0800a6dc <_fini>:
 800a6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6de:	bf00      	nop
 800a6e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6e2:	bc08      	pop	{r3}
 800a6e4:	469e      	mov	lr, r3
 800a6e6:	4770      	bx	lr
