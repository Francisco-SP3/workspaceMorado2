
tractorDeere_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef90  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aec  0800f230  0800f230  0001f230  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fd1c  0800fd1c  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800fd1c  0800fd1c  0001fd1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fd24  0800fd24  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fd24  0800fd24  0001fd24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fd28  0800fd28  0001fd28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  24000000  0800fd2c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004eec  240001f0  0800ff18  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  240050dc  0800ff18  000250dc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c1fb  00000000  00000000  0002021a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004aac  00000000  00000000  0004c415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002118  00000000  00000000  00050ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f60  00000000  00000000  00052fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003f2e2  00000000  00000000  00054f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025b9a  00000000  00000000  00094222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a0410  00000000  00000000  000b9dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0025a1cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009e38  00000000  00000000  0025a21c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f0 	.word	0x240001f0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f218 	.word	0x0800f218

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001f4 	.word	0x240001f4
 80002dc:	0800f218 	.word	0x0800f218

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <NRF24_DelayMicroSeconds+0x3c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a0b      	ldr	r2, [pc, #44]	; (8000800 <NRF24_DelayMicroSeconds+0x40>)
 80007d2:	fba2 2303 	umull	r2, r3, r2, r3
 80007d6:	0c9a      	lsrs	r2, r3, #18
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	fb02 f303 	mul.w	r3, r2, r3
 80007de:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80007e0:	bf00      	nop
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	1e5a      	subs	r2, r3, #1
 80007e6:	60fa      	str	r2, [r7, #12]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1fa      	bne.n	80007e2 <NRF24_DelayMicroSeconds+0x22>
}
 80007ec:	bf00      	nop
 80007ee:	bf00      	nop
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	24000000 	.word	0x24000000
 8000800:	165e9f81 	.word	0x165e9f81

08000804 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d008      	beq.n	8000824 <NRF24_csn+0x20>
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <NRF24_csn+0x38>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <NRF24_csn+0x3c>)
 8000818:	8811      	ldrh	r1, [r2, #0]
 800081a:	2201      	movs	r2, #1
 800081c:	4618      	mov	r0, r3
 800081e:	f003 fac5 	bl	8003dac <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000822:	e007      	b.n	8000834 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <NRF24_csn+0x38>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a05      	ldr	r2, [pc, #20]	; (8000840 <NRF24_csn+0x3c>)
 800082a:	8811      	ldrh	r1, [r2, #0]
 800082c:	2200      	movs	r2, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f003 fabc 	bl	8003dac <HAL_GPIO_WritePin>
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	2400021c 	.word	0x2400021c
 8000840:	24000220 	.word	0x24000220

08000844 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d008      	beq.n	8000864 <NRF24_ce+0x20>
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <NRF24_ce+0x38>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <NRF24_ce+0x3c>)
 8000858:	8811      	ldrh	r1, [r2, #0]
 800085a:	2201      	movs	r2, #1
 800085c:	4618      	mov	r0, r3
 800085e:	f003 faa5 	bl	8003dac <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000862:	e007      	b.n	8000874 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <NRF24_ce+0x38>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a05      	ldr	r2, [pc, #20]	; (8000880 <NRF24_ce+0x3c>)
 800086a:	8811      	ldrh	r1, [r2, #0]
 800086c:	2200      	movs	r2, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f003 fa9c 	bl	8003dac <HAL_GPIO_WritePin>
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	2400021c 	.word	0x2400021c
 8000880:	24000222 	.word	0x24000222

08000884 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff ffb8 	bl	8000804 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	f003 031f 	and.w	r3, r3, #31
 800089a:	b2db      	uxtb	r3, r3
 800089c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800089e:	f107 010c 	add.w	r1, r7, #12
 80008a2:	2364      	movs	r3, #100	; 0x64
 80008a4:	2201      	movs	r2, #1
 80008a6:	480a      	ldr	r0, [pc, #40]	; (80008d0 <NRF24_read_register+0x4c>)
 80008a8:	f005 ff8c 	bl	80067c4 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	1c59      	adds	r1, r3, #1
 80008b2:	2364      	movs	r3, #100	; 0x64
 80008b4:	2201      	movs	r2, #1
 80008b6:	4806      	ldr	r0, [pc, #24]	; (80008d0 <NRF24_read_register+0x4c>)
 80008b8:	f006 f976 	bl	8006ba8 <HAL_SPI_Receive>
	retData = spiBuf[1];
 80008bc:	7b7b      	ldrb	r3, [r7, #13]
 80008be:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 80008c0:	2001      	movs	r0, #1
 80008c2:	f7ff ff9f 	bl	8000804 <NRF24_csn>
	return retData;
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	24000224 	.word	0x24000224

080008d4 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	6039      	str	r1, [r7, #0]
 80008de:	71fb      	strb	r3, [r7, #7]
 80008e0:	4613      	mov	r3, r2
 80008e2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80008e4:	2000      	movs	r0, #0
 80008e6:	f7ff ff8d 	bl	8000804 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	f003 031f 	and.w	r3, r3, #31
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80008f4:	f107 010c 	add.w	r1, r7, #12
 80008f8:	2364      	movs	r3, #100	; 0x64
 80008fa:	2201      	movs	r2, #1
 80008fc:	4808      	ldr	r0, [pc, #32]	; (8000920 <NRF24_read_registerN+0x4c>)
 80008fe:	f005 ff61 	bl	80067c4 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000902:	79bb      	ldrb	r3, [r7, #6]
 8000904:	b29a      	uxth	r2, r3
 8000906:	2364      	movs	r3, #100	; 0x64
 8000908:	6839      	ldr	r1, [r7, #0]
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <NRF24_read_registerN+0x4c>)
 800090c:	f006 f94c 	bl	8006ba8 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000910:	2001      	movs	r0, #1
 8000912:	f7ff ff77 	bl	8000804 <NRF24_csn>
}
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	24000224 	.word	0x24000224

08000924 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	460a      	mov	r2, r1
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	4613      	mov	r3, r2
 8000932:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000934:	2000      	movs	r0, #0
 8000936:	f7ff ff65 	bl	8000804 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	f043 0320 	orr.w	r3, r3, #32
 8000940:	b2db      	uxtb	r3, r3
 8000942:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000944:	79bb      	ldrb	r3, [r7, #6]
 8000946:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000948:	f107 010c 	add.w	r1, r7, #12
 800094c:	2364      	movs	r3, #100	; 0x64
 800094e:	2202      	movs	r2, #2
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <NRF24_write_register+0x40>)
 8000952:	f005 ff37 	bl	80067c4 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000956:	2001      	movs	r0, #1
 8000958:	f7ff ff54 	bl	8000804 <NRF24_csn>
}
 800095c:	bf00      	nop
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	24000224 	.word	0x24000224

08000968 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	6039      	str	r1, [r7, #0]
 8000972:	71fb      	strb	r3, [r7, #7]
 8000974:	4613      	mov	r3, r2
 8000976:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000978:	2000      	movs	r0, #0
 800097a:	f7ff ff43 	bl	8000804 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	f043 0320 	orr.w	r3, r3, #32
 8000984:	b2db      	uxtb	r3, r3
 8000986:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000988:	f107 010c 	add.w	r1, r7, #12
 800098c:	2364      	movs	r3, #100	; 0x64
 800098e:	2201      	movs	r2, #1
 8000990:	4808      	ldr	r0, [pc, #32]	; (80009b4 <NRF24_write_registerN+0x4c>)
 8000992:	f005 ff17 	bl	80067c4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000996:	79bb      	ldrb	r3, [r7, #6]
 8000998:	b29a      	uxth	r2, r3
 800099a:	2364      	movs	r3, #100	; 0x64
 800099c:	6839      	ldr	r1, [r7, #0]
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <NRF24_write_registerN+0x4c>)
 80009a0:	f005 ff10 	bl	80067c4 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80009a4:	2001      	movs	r0, #1
 80009a6:	f7ff ff2d 	bl	8000804 <NRF24_csn>
}
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	24000224 	.word	0x24000224

080009b8 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80009bc:	21ff      	movs	r1, #255	; 0xff
 80009be:	20e1      	movs	r0, #225	; 0xe1
 80009c0:	f7ff ffb0 	bl	8000924 <NRF24_write_register>
}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80009cc:	21ff      	movs	r1, #255	; 0xff
 80009ce:	20e2      	movs	r0, #226	; 0xe2
 80009d0:	f7ff ffa8 	bl	8000924 <NRF24_write_register>
}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <NRF24_begin>:
	return statReg;
}

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 80009d8:	b082      	sub	sp, #8
 80009da:	b580      	push	{r7, lr}
 80009dc:	b084      	sub	sp, #16
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
 80009e2:	61fb      	str	r3, [r7, #28]
 80009e4:	460b      	mov	r3, r1
 80009e6:	807b      	strh	r3, [r7, #2]
 80009e8:	4613      	mov	r3, r2
 80009ea:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 80009ec:	4b66      	ldr	r3, [pc, #408]	; (8000b88 <NRF24_begin+0x1b0>)
 80009ee:	4618      	mov	r0, r3
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	2288      	movs	r2, #136	; 0x88
 80009f6:	4619      	mov	r1, r3
 80009f8:	f00b fdcb 	bl	800c592 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 80009fc:	4a63      	ldr	r2, [pc, #396]	; (8000b8c <NRF24_begin+0x1b4>)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000a02:	4a63      	ldr	r2, [pc, #396]	; (8000b90 <NRF24_begin+0x1b8>)
 8000a04:	887b      	ldrh	r3, [r7, #2]
 8000a06:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000a08:	4a62      	ldr	r2, [pc, #392]	; (8000b94 <NRF24_begin+0x1bc>)
 8000a0a:	883b      	ldrh	r3, [r7, #0]
 8000a0c:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 8000a0e:	2001      	movs	r0, #1
 8000a10:	f7ff fef8 	bl	8000804 <NRF24_csn>
	NRF24_ce(0);
 8000a14:	2000      	movs	r0, #0
 8000a16:	f7ff ff15 	bl	8000844 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000a1a:	2005      	movs	r0, #5
 8000a1c:	f002 fba2 	bl	8003164 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000a20:	2108      	movs	r1, #8
 8000a22:	2000      	movs	r0, #0
 8000a24:	f7ff ff7e 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000a28:	213f      	movs	r1, #63	; 0x3f
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	f7ff ff7a 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000a30:	2103      	movs	r1, #3
 8000a32:	2002      	movs	r0, #2
 8000a34:	f7ff ff76 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000a38:	2103      	movs	r1, #3
 8000a3a:	2003      	movs	r0, #3
 8000a3c:	f7ff ff72 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000a40:	2103      	movs	r1, #3
 8000a42:	2004      	movs	r0, #4
 8000a44:	f7ff ff6e 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000a48:	2102      	movs	r1, #2
 8000a4a:	2005      	movs	r0, #5
 8000a4c:	f7ff ff6a 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000a50:	210f      	movs	r1, #15
 8000a52:	2006      	movs	r0, #6
 8000a54:	f7ff ff66 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000a58:	210e      	movs	r1, #14
 8000a5a:	2007      	movs	r0, #7
 8000a5c:	f7ff ff62 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000a60:	2100      	movs	r1, #0
 8000a62:	2008      	movs	r0, #8
 8000a64:	f7ff ff5e 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000a68:	2100      	movs	r1, #0
 8000a6a:	2009      	movs	r0, #9
 8000a6c:	f7ff ff5a 	bl	8000924 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000a70:	23e7      	movs	r3, #231	; 0xe7
 8000a72:	733b      	strb	r3, [r7, #12]
 8000a74:	23e7      	movs	r3, #231	; 0xe7
 8000a76:	72fb      	strb	r3, [r7, #11]
 8000a78:	23e7      	movs	r3, #231	; 0xe7
 8000a7a:	72bb      	strb	r3, [r7, #10]
 8000a7c:	23e7      	movs	r3, #231	; 0xe7
 8000a7e:	727b      	strb	r3, [r7, #9]
 8000a80:	23e7      	movs	r3, #231	; 0xe7
 8000a82:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000a84:	f107 0308 	add.w	r3, r7, #8
 8000a88:	2205      	movs	r2, #5
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	200a      	movs	r0, #10
 8000a8e:	f7ff ff6b 	bl	8000968 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 8000a92:	23c2      	movs	r3, #194	; 0xc2
 8000a94:	733b      	strb	r3, [r7, #12]
 8000a96:	23c2      	movs	r3, #194	; 0xc2
 8000a98:	72fb      	strb	r3, [r7, #11]
 8000a9a:	23c2      	movs	r3, #194	; 0xc2
 8000a9c:	72bb      	strb	r3, [r7, #10]
 8000a9e:	23c2      	movs	r3, #194	; 0xc2
 8000aa0:	727b      	strb	r3, [r7, #9]
 8000aa2:	23c2      	movs	r3, #194	; 0xc2
 8000aa4:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000aa6:	f107 0308 	add.w	r3, r7, #8
 8000aaa:	2205      	movs	r2, #5
 8000aac:	4619      	mov	r1, r3
 8000aae:	200b      	movs	r0, #11
 8000ab0:	f7ff ff5a 	bl	8000968 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000ab4:	21c3      	movs	r1, #195	; 0xc3
 8000ab6:	200c      	movs	r0, #12
 8000ab8:	f7ff ff34 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000abc:	21c4      	movs	r1, #196	; 0xc4
 8000abe:	200d      	movs	r0, #13
 8000ac0:	f7ff ff30 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000ac4:	21c5      	movs	r1, #197	; 0xc5
 8000ac6:	200e      	movs	r0, #14
 8000ac8:	f7ff ff2c 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000acc:	21c6      	movs	r1, #198	; 0xc6
 8000ace:	200f      	movs	r0, #15
 8000ad0:	f7ff ff28 	bl	8000924 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000ad4:	23e7      	movs	r3, #231	; 0xe7
 8000ad6:	733b      	strb	r3, [r7, #12]
 8000ad8:	23e7      	movs	r3, #231	; 0xe7
 8000ada:	72fb      	strb	r3, [r7, #11]
 8000adc:	23e7      	movs	r3, #231	; 0xe7
 8000ade:	72bb      	strb	r3, [r7, #10]
 8000ae0:	23e7      	movs	r3, #231	; 0xe7
 8000ae2:	727b      	strb	r3, [r7, #9]
 8000ae4:	23e7      	movs	r3, #231	; 0xe7
 8000ae6:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000ae8:	f107 0308 	add.w	r3, r7, #8
 8000aec:	2205      	movs	r2, #5
 8000aee:	4619      	mov	r1, r3
 8000af0:	2010      	movs	r0, #16
 8000af2:	f7ff ff39 	bl	8000968 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000af6:	2100      	movs	r1, #0
 8000af8:	2011      	movs	r0, #17
 8000afa:	f7ff ff13 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000afe:	2100      	movs	r1, #0
 8000b00:	2012      	movs	r0, #18
 8000b02:	f7ff ff0f 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000b06:	2100      	movs	r1, #0
 8000b08:	2013      	movs	r0, #19
 8000b0a:	f7ff ff0b 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000b0e:	2100      	movs	r1, #0
 8000b10:	2014      	movs	r0, #20
 8000b12:	f7ff ff07 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000b16:	2100      	movs	r1, #0
 8000b18:	2015      	movs	r0, #21
 8000b1a:	f7ff ff03 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000b1e:	2100      	movs	r1, #0
 8000b20:	2016      	movs	r0, #22
 8000b22:	f7ff feff 	bl	8000924 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8000b26:	f000 fa11 	bl	8000f4c <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	201c      	movs	r0, #28
 8000b2e:	f7ff fef9 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000b32:	2100      	movs	r1, #0
 8000b34:	201d      	movs	r0, #29
 8000b36:	f7ff fef5 	bl	8000924 <NRF24_write_register>
	printRadioSettings();
 8000b3a:	f000 fa21 	bl	8000f80 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000b3e:	210f      	movs	r1, #15
 8000b40:	200f      	movs	r0, #15
 8000b42:	f000 f89d 	bl	8000c80 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000b46:	2003      	movs	r0, #3
 8000b48:	f000 f941 	bl	8000dce <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f000 f977 	bl	8000e40 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000b52:	2002      	movs	r0, #2
 8000b54:	f000 f9ba 	bl	8000ecc <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000b58:	f000 f90c 	bl	8000d74 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000b5c:	2020      	movs	r0, #32
 8000b5e:	f000 f8bf 	bl	8000ce0 <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 8000b62:	f000 f9ea 	bl	8000f3a <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000b66:	204c      	movs	r0, #76	; 0x4c
 8000b68:	f000 f8a5 	bl	8000cb6 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000b6c:	f7ff ff24 	bl	80009b8 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000b70:	f7ff ff2a 	bl	80009c8 <NRF24_flush_rx>

	NRF24_powerDown();
 8000b74:	f000 f9d2 	bl	8000f1c <NRF24_powerDown>

}
 8000b78:	bf00      	nop
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b82:	b002      	add	sp, #8
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	24000224 	.word	0x24000224
 8000b8c:	2400021c 	.word	0x2400021c
 8000b90:	24000220 	.word	0x24000220
 8000b94:	24000222 	.word	0x24000222

08000b98 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8000b9c:	2000      	movs	r0, #0
 8000b9e:	f7ff fe71 	bl	8000884 <NRF24_read_register>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	f043 0303 	orr.w	r3, r3, #3
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	4619      	mov	r1, r3
 8000bac:	2000      	movs	r0, #0
 8000bae:	f7ff feb9 	bl	8000924 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <NRF24_startListening+0x48>)
 8000bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	d004      	beq.n	8000bc6 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8000bbc:	2205      	movs	r2, #5
 8000bbe:	4908      	ldr	r1, [pc, #32]	; (8000be0 <NRF24_startListening+0x48>)
 8000bc0:	200a      	movs	r0, #10
 8000bc2:	f7ff fed1 	bl	8000968 <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 8000bc6:	f7ff fef7 	bl	80009b8 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000bca:	f7ff fefd 	bl	80009c8 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f7ff fe38 	bl	8000844 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8000bd4:	2096      	movs	r0, #150	; 0x96
 8000bd6:	f7ff fdf3 	bl	80007c0 <NRF24_DelayMicroSeconds>
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	24000210 	.word	0x24000210

08000be4 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4601      	mov	r1, r0
 8000bec:	e9c7 2300 	strd	r2, r3, [r7]
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d104      	bne.n	8000c04 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8000bfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000bfe:	491c      	ldr	r1, [pc, #112]	; (8000c70 <NRF24_openReadingPipe+0x8c>)
 8000c00:	e9c1 2300 	strd	r2, r3, [r1]

	if(number <= 6)
 8000c04:	7bfb      	ldrb	r3, [r7, #15]
 8000c06:	2b06      	cmp	r3, #6
 8000c08:	d82d      	bhi.n	8000c66 <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8000c0a:	7bfb      	ldrb	r3, [r7, #15]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d808      	bhi.n	8000c22 <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8000c10:	7bfb      	ldrb	r3, [r7, #15]
 8000c12:	4a18      	ldr	r2, [pc, #96]	; (8000c74 <NRF24_openReadingPipe+0x90>)
 8000c14:	5cd3      	ldrb	r3, [r2, r3]
 8000c16:	4639      	mov	r1, r7
 8000c18:	2205      	movs	r2, #5
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff fea4 	bl	8000968 <NRF24_write_registerN>
 8000c20:	e007      	b.n	8000c32 <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
 8000c24:	4a13      	ldr	r2, [pc, #76]	; (8000c74 <NRF24_openReadingPipe+0x90>)
 8000c26:	5cd3      	ldrb	r3, [r2, r3]
 8000c28:	4639      	mov	r1, r7
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fe9b 	bl	8000968 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8000c32:	7bfb      	ldrb	r3, [r7, #15]
 8000c34:	4a10      	ldr	r2, [pc, #64]	; (8000c78 <NRF24_openReadingPipe+0x94>)
 8000c36:	5cd3      	ldrb	r3, [r2, r3]
 8000c38:	4a10      	ldr	r2, [pc, #64]	; (8000c7c <NRF24_openReadingPipe+0x98>)
 8000c3a:	7812      	ldrb	r2, [r2, #0]
 8000c3c:	4611      	mov	r1, r2
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fe70 	bl	8000924 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8000c44:	2002      	movs	r0, #2
 8000c46:	f7ff fe1d 	bl	8000884 <NRF24_read_register>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	b25a      	sxtb	r2, r3
 8000c4e:	7bfb      	ldrb	r3, [r7, #15]
 8000c50:	2101      	movs	r1, #1
 8000c52:	fa01 f303 	lsl.w	r3, r1, r3
 8000c56:	b25b      	sxtb	r3, r3
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	b25b      	sxtb	r3, r3
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	4619      	mov	r1, r3
 8000c60:	2002      	movs	r0, #2
 8000c62:	f7ff fe5f 	bl	8000924 <NRF24_write_register>
	}

}
 8000c66:	bf00      	nop
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	24000210 	.word	0x24000210
 8000c74:	0800f8e4 	.word	0x0800f8e4
 8000c78:	0800f8ec 	.word	0x0800f8ec
 8000c7c:	24000218 	.word	0x24000218

08000c80 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	460a      	mov	r2, r1
 8000c8a:	71fb      	strb	r3, [r7, #7]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	011b      	lsls	r3, r3, #4
 8000c94:	b25a      	sxtb	r2, r3
 8000c96:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000c9a:	f003 030f 	and.w	r3, r3, #15
 8000c9e:	b25b      	sxtb	r3, r3
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	b25b      	sxtb	r3, r3
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	2004      	movs	r0, #4
 8000caa:	f7ff fe3b 	bl	8000924 <NRF24_write_register>
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b084      	sub	sp, #16
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000cc0:	237f      	movs	r3, #127	; 0x7f
 8000cc2:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000cc4:	7bfa      	ldrb	r2, [r7, #15]
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	bf28      	it	cs
 8000ccc:	4613      	movcs	r3, r2
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	2005      	movs	r0, #5
 8000cd4:	f7ff fe26 	bl	8000924 <NRF24_write_register>
}
 8000cd8:	bf00      	nop
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000cea:	2320      	movs	r3, #32
 8000cec:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000cee:	7bfa      	ldrb	r2, [r7, #15]
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	bf28      	it	cs
 8000cf6:	4613      	movcs	r3, r2
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <NRF24_setPayloadSize+0x2c>)
 8000cfc:	701a      	strb	r2, [r3, #0]
}
 8000cfe:	bf00      	nop
 8000d00:	3714      	adds	r7, #20
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	24000218 	.word	0x24000218

08000d10 <NRF24_enableDynamicPayloads>:
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
}
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000d14:	201d      	movs	r0, #29
 8000d16:	f7ff fdb5 	bl	8000884 <NRF24_read_register>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	f043 0304 	orr.w	r3, r3, #4
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	4619      	mov	r1, r3
 8000d24:	201d      	movs	r0, #29
 8000d26:	f7ff fdfd 	bl	8000924 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8000d2a:	201d      	movs	r0, #29
 8000d2c:	f7ff fdaa 	bl	8000884 <NRF24_read_register>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d10c      	bne.n	8000d50 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8000d36:	f000 f909 	bl	8000f4c <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000d3a:	201d      	movs	r0, #29
 8000d3c:	f7ff fda2 	bl	8000884 <NRF24_read_register>
 8000d40:	4603      	mov	r3, r0
 8000d42:	f043 0304 	orr.w	r3, r3, #4
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	4619      	mov	r1, r3
 8000d4a:	201d      	movs	r0, #29
 8000d4c:	f7ff fdea 	bl	8000924 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8000d50:	201c      	movs	r0, #28
 8000d52:	f7ff fd97 	bl	8000884 <NRF24_read_register>
 8000d56:	4603      	mov	r3, r0
 8000d58:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	4619      	mov	r1, r3
 8000d60:	201c      	movs	r0, #28
 8000d62:	f7ff fddf 	bl	8000924 <NRF24_write_register>
  dynamic_payloads_enabled = true;
 8000d66:	4b02      	ldr	r3, [pc, #8]	; (8000d70 <NRF24_enableDynamicPayloads+0x60>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	701a      	strb	r2, [r3, #0]

}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	24000219 	.word	0x24000219

08000d74 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000d78:	201d      	movs	r0, #29
 8000d7a:	f7ff fd83 	bl	8000884 <NRF24_read_register>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	f023 0304 	bic.w	r3, r3, #4
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	4619      	mov	r1, r3
 8000d88:	201d      	movs	r0, #29
 8000d8a:	f7ff fdcb 	bl	8000924 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8000d8e:	2100      	movs	r1, #0
 8000d90:	201c      	movs	r0, #28
 8000d92:	f7ff fdc7 	bl	8000924 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000d96:	4b02      	ldr	r3, [pc, #8]	; (8000da0 <NRF24_disableDynamicPayloads+0x2c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	701a      	strb	r2, [r3, #0]
}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	24000219 	.word	0x24000219

08000da4 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d004      	beq.n	8000dbe <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000db4:	213f      	movs	r1, #63	; 0x3f
 8000db6:	2001      	movs	r0, #1
 8000db8:	f7ff fdb4 	bl	8000924 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000dbc:	e003      	b.n	8000dc6 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	f7ff fdaf 	bl	8000924 <NRF24_write_register>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b084      	sub	sp, #16
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000dd8:	2006      	movs	r0, #6
 8000dda:	f7ff fd53 	bl	8000884 <NRF24_read_register>
 8000dde:	4603      	mov	r3, r0
 8000de0:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
 8000de4:	f023 0306 	bic.w	r3, r3, #6
 8000de8:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	2b03      	cmp	r3, #3
 8000dee:	d104      	bne.n	8000dfa <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	f043 0306 	orr.w	r3, r3, #6
 8000df6:	73fb      	strb	r3, [r7, #15]
 8000df8:	e019      	b.n	8000e2e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d104      	bne.n	8000e0a <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
 8000e02:	f043 0304 	orr.w	r3, r3, #4
 8000e06:	73fb      	strb	r3, [r7, #15]
 8000e08:	e011      	b.n	8000e2e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d104      	bne.n	8000e1a <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	f043 0302 	orr.w	r3, r3, #2
 8000e16:	73fb      	strb	r3, [r7, #15]
 8000e18:	e009      	b.n	8000e2e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d006      	beq.n	8000e2e <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	2b04      	cmp	r3, #4
 8000e24:	d103      	bne.n	8000e2e <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	f043 0306 	orr.w	r3, r3, #6
 8000e2c:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	4619      	mov	r1, r3
 8000e32:	2006      	movs	r0, #6
 8000e34:	f7ff fd76 	bl	8000924 <NRF24_write_register>
}
 8000e38:	bf00      	nop
 8000e3a:	3710      	adds	r7, #16
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000e4e:	2006      	movs	r0, #6
 8000e50:	f7ff fd18 	bl	8000884 <NRF24_read_register>
 8000e54:	4603      	mov	r3, r0
 8000e56:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000e58:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <NRF24_setDataRate+0x88>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000e5e:	7bbb      	ldrb	r3, [r7, #14]
 8000e60:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000e64:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d107      	bne.n	8000e7c <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000e6c:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <NRF24_setDataRate+0x88>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000e72:	7bbb      	ldrb	r3, [r7, #14]
 8000e74:	f043 0320 	orr.w	r3, r3, #32
 8000e78:	73bb      	strb	r3, [r7, #14]
 8000e7a:	e00d      	b.n	8000e98 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d107      	bne.n	8000e92 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000e82:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <NRF24_setDataRate+0x88>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000e88:	7bbb      	ldrb	r3, [r7, #14]
 8000e8a:	f043 0308 	orr.w	r3, r3, #8
 8000e8e:	73bb      	strb	r3, [r7, #14]
 8000e90:	e002      	b.n	8000e98 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000e92:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <NRF24_setDataRate+0x88>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000e98:	7bbb      	ldrb	r3, [r7, #14]
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	2006      	movs	r0, #6
 8000e9e:	f7ff fd41 	bl	8000924 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000ea2:	2006      	movs	r0, #6
 8000ea4:	f7ff fcee 	bl	8000884 <NRF24_read_register>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	461a      	mov	r2, r3
 8000eac:	7bbb      	ldrb	r3, [r7, #14]
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d102      	bne.n	8000eb8 <NRF24_setDataRate+0x78>
  {
    result = true;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	73fb      	strb	r3, [r7, #15]
 8000eb6:	e002      	b.n	8000ebe <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000eb8:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <NRF24_setDataRate+0x88>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	2400021a 	.word	0x2400021a

08000ecc <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f7ff fcd4 	bl	8000884 <NRF24_read_register>
 8000edc:	4603      	mov	r3, r0
 8000ede:	f023 030c 	bic.w	r3, r3, #12
 8000ee2:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d00f      	beq.n	8000f0a <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d104      	bne.n	8000efa <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	f043 0308 	orr.w	r3, r3, #8
 8000ef6:	73fb      	strb	r3, [r7, #15]
 8000ef8:	e007      	b.n	8000f0a <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
 8000efc:	f043 0308 	orr.w	r3, r3, #8
 8000f00:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	f043 0304 	orr.w	r3, r3, #4
 8000f08:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f7ff fd08 	bl	8000924 <NRF24_write_register>
}
 8000f14:	bf00      	nop
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000f20:	2000      	movs	r0, #0
 8000f22:	f7ff fcaf 	bl	8000884 <NRF24_read_register>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f023 0302 	bic.w	r3, r3, #2
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	4619      	mov	r1, r3
 8000f30:	2000      	movs	r0, #0
 8000f32:	f7ff fcf7 	bl	8000924 <NRF24_write_register>
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000f3e:	2170      	movs	r1, #112	; 0x70
 8000f40:	2007      	movs	r0, #7
 8000f42:	f7ff fcef 	bl	8000924 <NRF24_write_register>
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000f52:	2000      	movs	r0, #0
 8000f54:	f7ff fc56 	bl	8000804 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8000f58:	2350      	movs	r3, #80	; 0x50
 8000f5a:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8000f5c:	2373      	movs	r3, #115	; 0x73
 8000f5e:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8000f60:	1d39      	adds	r1, r7, #4
 8000f62:	2364      	movs	r3, #100	; 0x64
 8000f64:	2202      	movs	r2, #2
 8000f66:	4805      	ldr	r0, [pc, #20]	; (8000f7c <NRF24_ACTIVATE_cmd+0x30>)
 8000f68:	f005 fc2c 	bl	80067c4 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	f7ff fc49 	bl	8000804 <NRF24_csn>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	24000224 	.word	0x24000224

08000f80 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8000f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f82:	b0a1      	sub	sp, #132	; 0x84
 8000f84:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8000f86:	f107 0308 	add.w	r3, r7, #8
 8000f8a:	49c3      	ldr	r1, [pc, #780]	; (8001298 <printRadioSettings+0x318>)
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f00c f8f5 	bl	800d17c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f92:	f107 0308 	add.w	r3, r7, #8
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff f9a2 	bl	80002e0 <strlen>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	b29a      	uxth	r2, r3
 8000fa0:	f107 0108 	add.w	r1, r7, #8
 8000fa4:	230a      	movs	r3, #10
 8000fa6:	48bd      	ldr	r0, [pc, #756]	; (800129c <printRadioSettings+0x31c>)
 8000fa8:	f007 fb57 	bl	800865a <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8000fac:	2000      	movs	r0, #0
 8000fae:	f7ff fc69 	bl	8000884 <NRF24_read_register>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8000fb8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fbc:	f003 0308 	and.w	r3, r3, #8
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d013      	beq.n	8000fec <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8000fc4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fc8:	f003 0304 	and.w	r3, r3, #4
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d006      	beq.n	8000fde <printRadioSettings+0x5e>
 8000fd0:	f107 0308 	add.w	r3, r7, #8
 8000fd4:	49b2      	ldr	r1, [pc, #712]	; (80012a0 <printRadioSettings+0x320>)
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f00c f8d0 	bl	800d17c <siprintf>
 8000fdc:	e00c      	b.n	8000ff8 <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 8000fde:	f107 0308 	add.w	r3, r7, #8
 8000fe2:	49b0      	ldr	r1, [pc, #704]	; (80012a4 <printRadioSettings+0x324>)
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f00c f8c9 	bl	800d17c <siprintf>
 8000fea:	e005      	b.n	8000ff8 <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8000fec:	f107 0308 	add.w	r3, r7, #8
 8000ff0:	49ad      	ldr	r1, [pc, #692]	; (80012a8 <printRadioSettings+0x328>)
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f00c f8c2 	bl	800d17c <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000ff8:	f107 0308 	add.w	r3, r7, #8
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff f96f 	bl	80002e0 <strlen>
 8001002:	4603      	mov	r3, r0
 8001004:	b29a      	uxth	r2, r3
 8001006:	f107 0108 	add.w	r1, r7, #8
 800100a:	230a      	movs	r3, #10
 800100c:	48a3      	ldr	r0, [pc, #652]	; (800129c <printRadioSettings+0x31c>)
 800100e:	f007 fb24 	bl	800865a <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8001012:	2001      	movs	r0, #1
 8001014:	f7ff fc36 	bl	8000884 <NRF24_read_register>
 8001018:	4603      	mov	r3, r0
 800101a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800101e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001022:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001026:	2b00      	cmp	r3, #0
 8001028:	bfcc      	ite	gt
 800102a:	2301      	movgt	r3, #1
 800102c:	2300      	movle	r3, #0
 800102e:	b2db      	uxtb	r3, r3
 8001030:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001032:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001036:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800103a:	2b00      	cmp	r3, #0
 800103c:	bfcc      	ite	gt
 800103e:	2301      	movgt	r3, #1
 8001040:	2300      	movle	r3, #0
 8001042:	b2db      	uxtb	r3, r3
 8001044:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001046:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800104a:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800104e:	2b00      	cmp	r3, #0
 8001050:	bfcc      	ite	gt
 8001052:	2301      	movgt	r3, #1
 8001054:	2300      	movle	r3, #0
 8001056:	b2db      	uxtb	r3, r3
 8001058:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800105a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800105e:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001062:	2b00      	cmp	r3, #0
 8001064:	bfcc      	ite	gt
 8001066:	2301      	movgt	r3, #1
 8001068:	2300      	movle	r3, #0
 800106a:	b2db      	uxtb	r3, r3
 800106c:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800106e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001072:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001076:	2b00      	cmp	r3, #0
 8001078:	bfcc      	ite	gt
 800107a:	2301      	movgt	r3, #1
 800107c:	2300      	movle	r3, #0
 800107e:	b2db      	uxtb	r3, r3
 8001080:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001082:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001086:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800108a:	2b00      	cmp	r3, #0
 800108c:	bfcc      	ite	gt
 800108e:	2301      	movgt	r3, #1
 8001090:	2300      	movle	r3, #0
 8001092:	b2db      	uxtb	r3, r3
 8001094:	f107 0008 	add.w	r0, r7, #8
 8001098:	9303      	str	r3, [sp, #12]
 800109a:	9402      	str	r4, [sp, #8]
 800109c:	9101      	str	r1, [sp, #4]
 800109e:	9200      	str	r2, [sp, #0]
 80010a0:	4633      	mov	r3, r6
 80010a2:	462a      	mov	r2, r5
 80010a4:	4981      	ldr	r1, [pc, #516]	; (80012ac <printRadioSettings+0x32c>)
 80010a6:	f00c f869 	bl	800d17c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010aa:	f107 0308 	add.w	r3, r7, #8
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff f916 	bl	80002e0 <strlen>
 80010b4:	4603      	mov	r3, r0
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	f107 0108 	add.w	r1, r7, #8
 80010bc:	230a      	movs	r3, #10
 80010be:	4877      	ldr	r0, [pc, #476]	; (800129c <printRadioSettings+0x31c>)
 80010c0:	f007 facb 	bl	800865a <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 80010c4:	2002      	movs	r0, #2
 80010c6:	f7ff fbdd 	bl	8000884 <NRF24_read_register>
 80010ca:	4603      	mov	r3, r0
 80010cc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80010d0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010d4:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80010d8:	2b00      	cmp	r3, #0
 80010da:	bfcc      	ite	gt
 80010dc:	2301      	movgt	r3, #1
 80010de:	2300      	movle	r3, #0
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80010e4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010e8:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	bfcc      	ite	gt
 80010f0:	2301      	movgt	r3, #1
 80010f2:	2300      	movle	r3, #0
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80010f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010fc:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001100:	2b00      	cmp	r3, #0
 8001102:	bfcc      	ite	gt
 8001104:	2301      	movgt	r3, #1
 8001106:	2300      	movle	r3, #0
 8001108:	b2db      	uxtb	r3, r3
 800110a:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800110c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001110:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001114:	2b00      	cmp	r3, #0
 8001116:	bfcc      	ite	gt
 8001118:	2301      	movgt	r3, #1
 800111a:	2300      	movle	r3, #0
 800111c:	b2db      	uxtb	r3, r3
 800111e:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001120:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001124:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001128:	2b00      	cmp	r3, #0
 800112a:	bfcc      	ite	gt
 800112c:	2301      	movgt	r3, #1
 800112e:	2300      	movle	r3, #0
 8001130:	b2db      	uxtb	r3, r3
 8001132:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001134:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001138:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800113c:	2b00      	cmp	r3, #0
 800113e:	bfcc      	ite	gt
 8001140:	2301      	movgt	r3, #1
 8001142:	2300      	movle	r3, #0
 8001144:	b2db      	uxtb	r3, r3
 8001146:	f107 0008 	add.w	r0, r7, #8
 800114a:	9303      	str	r3, [sp, #12]
 800114c:	9402      	str	r4, [sp, #8]
 800114e:	9101      	str	r1, [sp, #4]
 8001150:	9200      	str	r2, [sp, #0]
 8001152:	4633      	mov	r3, r6
 8001154:	462a      	mov	r2, r5
 8001156:	4956      	ldr	r1, [pc, #344]	; (80012b0 <printRadioSettings+0x330>)
 8001158:	f00c f810 	bl	800d17c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800115c:	f107 0308 	add.w	r3, r7, #8
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff f8bd 	bl	80002e0 <strlen>
 8001166:	4603      	mov	r3, r0
 8001168:	b29a      	uxth	r2, r3
 800116a:	f107 0108 	add.w	r1, r7, #8
 800116e:	230a      	movs	r3, #10
 8001170:	484a      	ldr	r0, [pc, #296]	; (800129c <printRadioSettings+0x31c>)
 8001172:	f007 fa72 	bl	800865a <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8001176:	2003      	movs	r0, #3
 8001178:	f7ff fb84 	bl	8000884 <NRF24_read_register>
 800117c:	4603      	mov	r3, r0
 800117e:	f003 0303 	and.w	r3, r3, #3
 8001182:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8001186:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800118a:	3302      	adds	r3, #2
 800118c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8001190:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001194:	f107 0308 	add.w	r3, r7, #8
 8001198:	4946      	ldr	r1, [pc, #280]	; (80012b4 <printRadioSettings+0x334>)
 800119a:	4618      	mov	r0, r3
 800119c:	f00b ffee 	bl	800d17c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011a0:	f107 0308 	add.w	r3, r7, #8
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff f89b 	bl	80002e0 <strlen>
 80011aa:	4603      	mov	r3, r0
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	f107 0108 	add.w	r1, r7, #8
 80011b2:	230a      	movs	r3, #10
 80011b4:	4839      	ldr	r0, [pc, #228]	; (800129c <printRadioSettings+0x31c>)
 80011b6:	f007 fa50 	bl	800865a <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 80011ba:	2005      	movs	r0, #5
 80011bc:	f7ff fb62 	bl	8000884 <NRF24_read_register>
 80011c0:	4603      	mov	r3, r0
 80011c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 80011c6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80011ce:	f107 0308 	add.w	r3, r7, #8
 80011d2:	4939      	ldr	r1, [pc, #228]	; (80012b8 <printRadioSettings+0x338>)
 80011d4:	4618      	mov	r0, r3
 80011d6:	f00b ffd1 	bl	800d17c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011da:	f107 0308 	add.w	r3, r7, #8
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f87e 	bl	80002e0 <strlen>
 80011e4:	4603      	mov	r3, r0
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	f107 0108 	add.w	r1, r7, #8
 80011ec:	230a      	movs	r3, #10
 80011ee:	482b      	ldr	r0, [pc, #172]	; (800129c <printRadioSettings+0x31c>)
 80011f0:	f007 fa33 	bl	800865a <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 80011f4:	2006      	movs	r0, #6
 80011f6:	f7ff fb45 	bl	8000884 <NRF24_read_register>
 80011fa:	4603      	mov	r3, r0
 80011fc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8001200:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001204:	f003 0308 	and.w	r3, r3, #8
 8001208:	2b00      	cmp	r3, #0
 800120a:	d006      	beq.n	800121a <printRadioSettings+0x29a>
 800120c:	f107 0308 	add.w	r3, r7, #8
 8001210:	492a      	ldr	r1, [pc, #168]	; (80012bc <printRadioSettings+0x33c>)
 8001212:	4618      	mov	r0, r3
 8001214:	f00b ffb2 	bl	800d17c <siprintf>
 8001218:	e005      	b.n	8001226 <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 800121a:	f107 0308 	add.w	r3, r7, #8
 800121e:	4928      	ldr	r1, [pc, #160]	; (80012c0 <printRadioSettings+0x340>)
 8001220:	4618      	mov	r0, r3
 8001222:	f00b ffab 	bl	800d17c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001226:	f107 0308 	add.w	r3, r7, #8
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff f858 	bl	80002e0 <strlen>
 8001230:	4603      	mov	r3, r0
 8001232:	b29a      	uxth	r2, r3
 8001234:	f107 0108 	add.w	r1, r7, #8
 8001238:	230a      	movs	r3, #10
 800123a:	4818      	ldr	r0, [pc, #96]	; (800129c <printRadioSettings+0x31c>)
 800123c:	f007 fa0d 	bl	800865a <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8001240:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001244:	f003 0306 	and.w	r3, r3, #6
 8001248:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 800124c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001250:	085b      	lsrs	r3, r3, #1
 8001252:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8001256:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800125a:	2b00      	cmp	r3, #0
 800125c:	d106      	bne.n	800126c <printRadioSettings+0x2ec>
 800125e:	f107 0308 	add.w	r3, r7, #8
 8001262:	4918      	ldr	r1, [pc, #96]	; (80012c4 <printRadioSettings+0x344>)
 8001264:	4618      	mov	r0, r3
 8001266:	f00b ff89 	bl	800d17c <siprintf>
 800126a:	e03b      	b.n	80012e4 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 800126c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001270:	2b01      	cmp	r3, #1
 8001272:	d106      	bne.n	8001282 <printRadioSettings+0x302>
 8001274:	f107 0308 	add.w	r3, r7, #8
 8001278:	4913      	ldr	r1, [pc, #76]	; (80012c8 <printRadioSettings+0x348>)
 800127a:	4618      	mov	r0, r3
 800127c:	f00b ff7e 	bl	800d17c <siprintf>
 8001280:	e030      	b.n	80012e4 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8001282:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001286:	2b02      	cmp	r3, #2
 8001288:	d122      	bne.n	80012d0 <printRadioSettings+0x350>
 800128a:	f107 0308 	add.w	r3, r7, #8
 800128e:	490f      	ldr	r1, [pc, #60]	; (80012cc <printRadioSettings+0x34c>)
 8001290:	4618      	mov	r0, r3
 8001292:	f00b ff73 	bl	800d17c <siprintf>
 8001296:	e025      	b.n	80012e4 <printRadioSettings+0x364>
 8001298:	0800f230 	.word	0x0800f230
 800129c:	240002ac 	.word	0x240002ac
 80012a0:	0800f264 	.word	0x0800f264
 80012a4:	0800f280 	.word	0x0800f280
 80012a8:	0800f29c 	.word	0x0800f29c
 80012ac:	0800f2b0 	.word	0x0800f2b0
 80012b0:	0800f2f4 	.word	0x0800f2f4
 80012b4:	0800f340 	.word	0x0800f340
 80012b8:	0800f35c 	.word	0x0800f35c
 80012bc:	0800f370 	.word	0x0800f370
 80012c0:	0800f388 	.word	0x0800f388
 80012c4:	0800f3a0 	.word	0x0800f3a0
 80012c8:	0800f3b4 	.word	0x0800f3b4
 80012cc:	0800f3c8 	.word	0x0800f3c8
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 80012d0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012d4:	2b03      	cmp	r3, #3
 80012d6:	d105      	bne.n	80012e4 <printRadioSettings+0x364>
 80012d8:	f107 0308 	add.w	r3, r7, #8
 80012dc:	49d7      	ldr	r1, [pc, #860]	; (800163c <printRadioSettings+0x6bc>)
 80012de:	4618      	mov	r0, r3
 80012e0:	f00b ff4c 	bl	800d17c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012e4:	f107 0308 	add.w	r3, r7, #8
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7fe fff9 	bl	80002e0 <strlen>
 80012ee:	4603      	mov	r3, r0
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	f107 0108 	add.w	r1, r7, #8
 80012f6:	230a      	movs	r3, #10
 80012f8:	48d1      	ldr	r0, [pc, #836]	; (8001640 <printRadioSettings+0x6c0>)
 80012fa:	f007 f9ae 	bl	800865a <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 80012fe:	463b      	mov	r3, r7
 8001300:	2205      	movs	r2, #5
 8001302:	4619      	mov	r1, r3
 8001304:	200a      	movs	r0, #10
 8001306:	f7ff fae5 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800130a:	793b      	ldrb	r3, [r7, #4]
 800130c:	461c      	mov	r4, r3
 800130e:	78fb      	ldrb	r3, [r7, #3]
 8001310:	461d      	mov	r5, r3
 8001312:	78bb      	ldrb	r3, [r7, #2]
 8001314:	787a      	ldrb	r2, [r7, #1]
 8001316:	7839      	ldrb	r1, [r7, #0]
 8001318:	f107 0008 	add.w	r0, r7, #8
 800131c:	9102      	str	r1, [sp, #8]
 800131e:	9201      	str	r2, [sp, #4]
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	462b      	mov	r3, r5
 8001324:	4622      	mov	r2, r4
 8001326:	49c7      	ldr	r1, [pc, #796]	; (8001644 <printRadioSettings+0x6c4>)
 8001328:	f00b ff28 	bl	800d17c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800132c:	f107 0308 	add.w	r3, r7, #8
 8001330:	4618      	mov	r0, r3
 8001332:	f7fe ffd5 	bl	80002e0 <strlen>
 8001336:	4603      	mov	r3, r0
 8001338:	b29a      	uxth	r2, r3
 800133a:	f107 0108 	add.w	r1, r7, #8
 800133e:	230a      	movs	r3, #10
 8001340:	48bf      	ldr	r0, [pc, #764]	; (8001640 <printRadioSettings+0x6c0>)
 8001342:	f007 f98a 	bl	800865a <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8001346:	463b      	mov	r3, r7
 8001348:	2205      	movs	r2, #5
 800134a:	4619      	mov	r1, r3
 800134c:	200b      	movs	r0, #11
 800134e:	f7ff fac1 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001352:	793b      	ldrb	r3, [r7, #4]
 8001354:	461c      	mov	r4, r3
 8001356:	78fb      	ldrb	r3, [r7, #3]
 8001358:	461d      	mov	r5, r3
 800135a:	78bb      	ldrb	r3, [r7, #2]
 800135c:	787a      	ldrb	r2, [r7, #1]
 800135e:	7839      	ldrb	r1, [r7, #0]
 8001360:	f107 0008 	add.w	r0, r7, #8
 8001364:	9102      	str	r1, [sp, #8]
 8001366:	9201      	str	r2, [sp, #4]
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	462b      	mov	r3, r5
 800136c:	4622      	mov	r2, r4
 800136e:	49b6      	ldr	r1, [pc, #728]	; (8001648 <printRadioSettings+0x6c8>)
 8001370:	f00b ff04 	bl	800d17c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001374:	f107 0308 	add.w	r3, r7, #8
 8001378:	4618      	mov	r0, r3
 800137a:	f7fe ffb1 	bl	80002e0 <strlen>
 800137e:	4603      	mov	r3, r0
 8001380:	b29a      	uxth	r2, r3
 8001382:	f107 0108 	add.w	r1, r7, #8
 8001386:	230a      	movs	r3, #10
 8001388:	48ad      	ldr	r0, [pc, #692]	; (8001640 <printRadioSettings+0x6c0>)
 800138a:	f007 f966 	bl	800865a <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 800138e:	463b      	mov	r3, r7
 8001390:	2201      	movs	r2, #1
 8001392:	4619      	mov	r1, r3
 8001394:	200c      	movs	r0, #12
 8001396:	f7ff fa9d 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800139a:	783b      	ldrb	r3, [r7, #0]
 800139c:	461a      	mov	r2, r3
 800139e:	f107 0308 	add.w	r3, r7, #8
 80013a2:	49aa      	ldr	r1, [pc, #680]	; (800164c <printRadioSettings+0x6cc>)
 80013a4:	4618      	mov	r0, r3
 80013a6:	f00b fee9 	bl	800d17c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013aa:	f107 0308 	add.w	r3, r7, #8
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7fe ff96 	bl	80002e0 <strlen>
 80013b4:	4603      	mov	r3, r0
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	f107 0108 	add.w	r1, r7, #8
 80013bc:	230a      	movs	r3, #10
 80013be:	48a0      	ldr	r0, [pc, #640]	; (8001640 <printRadioSettings+0x6c0>)
 80013c0:	f007 f94b 	bl	800865a <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 80013c4:	463b      	mov	r3, r7
 80013c6:	2201      	movs	r2, #1
 80013c8:	4619      	mov	r1, r3
 80013ca:	200d      	movs	r0, #13
 80013cc:	f7ff fa82 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80013d0:	783b      	ldrb	r3, [r7, #0]
 80013d2:	461a      	mov	r2, r3
 80013d4:	f107 0308 	add.w	r3, r7, #8
 80013d8:	499d      	ldr	r1, [pc, #628]	; (8001650 <printRadioSettings+0x6d0>)
 80013da:	4618      	mov	r0, r3
 80013dc:	f00b fece 	bl	800d17c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013e0:	f107 0308 	add.w	r3, r7, #8
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7fe ff7b 	bl	80002e0 <strlen>
 80013ea:	4603      	mov	r3, r0
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	f107 0108 	add.w	r1, r7, #8
 80013f2:	230a      	movs	r3, #10
 80013f4:	4892      	ldr	r0, [pc, #584]	; (8001640 <printRadioSettings+0x6c0>)
 80013f6:	f007 f930 	bl	800865a <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 80013fa:	463b      	mov	r3, r7
 80013fc:	2201      	movs	r2, #1
 80013fe:	4619      	mov	r1, r3
 8001400:	200e      	movs	r0, #14
 8001402:	f7ff fa67 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001406:	783b      	ldrb	r3, [r7, #0]
 8001408:	461a      	mov	r2, r3
 800140a:	f107 0308 	add.w	r3, r7, #8
 800140e:	4991      	ldr	r1, [pc, #580]	; (8001654 <printRadioSettings+0x6d4>)
 8001410:	4618      	mov	r0, r3
 8001412:	f00b feb3 	bl	800d17c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001416:	f107 0308 	add.w	r3, r7, #8
 800141a:	4618      	mov	r0, r3
 800141c:	f7fe ff60 	bl	80002e0 <strlen>
 8001420:	4603      	mov	r3, r0
 8001422:	b29a      	uxth	r2, r3
 8001424:	f107 0108 	add.w	r1, r7, #8
 8001428:	230a      	movs	r3, #10
 800142a:	4885      	ldr	r0, [pc, #532]	; (8001640 <printRadioSettings+0x6c0>)
 800142c:	f007 f915 	bl	800865a <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001430:	463b      	mov	r3, r7
 8001432:	2201      	movs	r2, #1
 8001434:	4619      	mov	r1, r3
 8001436:	200f      	movs	r0, #15
 8001438:	f7ff fa4c 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800143c:	783b      	ldrb	r3, [r7, #0]
 800143e:	461a      	mov	r2, r3
 8001440:	f107 0308 	add.w	r3, r7, #8
 8001444:	4984      	ldr	r1, [pc, #528]	; (8001658 <printRadioSettings+0x6d8>)
 8001446:	4618      	mov	r0, r3
 8001448:	f00b fe98 	bl	800d17c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800144c:	f107 0308 	add.w	r3, r7, #8
 8001450:	4618      	mov	r0, r3
 8001452:	f7fe ff45 	bl	80002e0 <strlen>
 8001456:	4603      	mov	r3, r0
 8001458:	b29a      	uxth	r2, r3
 800145a:	f107 0108 	add.w	r1, r7, #8
 800145e:	230a      	movs	r3, #10
 8001460:	4877      	ldr	r0, [pc, #476]	; (8001640 <printRadioSettings+0x6c0>)
 8001462:	f007 f8fa 	bl	800865a <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8001466:	463b      	mov	r3, r7
 8001468:	2205      	movs	r2, #5
 800146a:	4619      	mov	r1, r3
 800146c:	2010      	movs	r0, #16
 800146e:	f7ff fa31 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001472:	793b      	ldrb	r3, [r7, #4]
 8001474:	461c      	mov	r4, r3
 8001476:	78fb      	ldrb	r3, [r7, #3]
 8001478:	461d      	mov	r5, r3
 800147a:	78bb      	ldrb	r3, [r7, #2]
 800147c:	787a      	ldrb	r2, [r7, #1]
 800147e:	7839      	ldrb	r1, [r7, #0]
 8001480:	f107 0008 	add.w	r0, r7, #8
 8001484:	9102      	str	r1, [sp, #8]
 8001486:	9201      	str	r2, [sp, #4]
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	462b      	mov	r3, r5
 800148c:	4622      	mov	r2, r4
 800148e:	4973      	ldr	r1, [pc, #460]	; (800165c <printRadioSettings+0x6dc>)
 8001490:	f00b fe74 	bl	800d17c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001494:	f107 0308 	add.w	r3, r7, #8
 8001498:	4618      	mov	r0, r3
 800149a:	f7fe ff21 	bl	80002e0 <strlen>
 800149e:	4603      	mov	r3, r0
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	f107 0108 	add.w	r1, r7, #8
 80014a6:	230a      	movs	r3, #10
 80014a8:	4865      	ldr	r0, [pc, #404]	; (8001640 <printRadioSettings+0x6c0>)
 80014aa:	f007 f8d6 	bl	800865a <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 80014ae:	2011      	movs	r0, #17
 80014b0:	f7ff f9e8 	bl	8000884 <NRF24_read_register>
 80014b4:	4603      	mov	r3, r0
 80014b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80014ba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014c2:	f107 0308 	add.w	r3, r7, #8
 80014c6:	4966      	ldr	r1, [pc, #408]	; (8001660 <printRadioSettings+0x6e0>)
 80014c8:	4618      	mov	r0, r3
 80014ca:	f00b fe57 	bl	800d17c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014ce:	f107 0308 	add.w	r3, r7, #8
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7fe ff04 	bl	80002e0 <strlen>
 80014d8:	4603      	mov	r3, r0
 80014da:	b29a      	uxth	r2, r3
 80014dc:	f107 0108 	add.w	r1, r7, #8
 80014e0:	230a      	movs	r3, #10
 80014e2:	4857      	ldr	r0, [pc, #348]	; (8001640 <printRadioSettings+0x6c0>)
 80014e4:	f007 f8b9 	bl	800865a <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 80014e8:	2012      	movs	r0, #18
 80014ea:	f7ff f9cb 	bl	8000884 <NRF24_read_register>
 80014ee:	4603      	mov	r3, r0
 80014f0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80014f4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014fc:	f107 0308 	add.w	r3, r7, #8
 8001500:	4958      	ldr	r1, [pc, #352]	; (8001664 <printRadioSettings+0x6e4>)
 8001502:	4618      	mov	r0, r3
 8001504:	f00b fe3a 	bl	800d17c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001508:	f107 0308 	add.w	r3, r7, #8
 800150c:	4618      	mov	r0, r3
 800150e:	f7fe fee7 	bl	80002e0 <strlen>
 8001512:	4603      	mov	r3, r0
 8001514:	b29a      	uxth	r2, r3
 8001516:	f107 0108 	add.w	r1, r7, #8
 800151a:	230a      	movs	r3, #10
 800151c:	4848      	ldr	r0, [pc, #288]	; (8001640 <printRadioSettings+0x6c0>)
 800151e:	f007 f89c 	bl	800865a <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 8001522:	2013      	movs	r0, #19
 8001524:	f7ff f9ae 	bl	8000884 <NRF24_read_register>
 8001528:	4603      	mov	r3, r0
 800152a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800152e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001532:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001536:	f107 0308 	add.w	r3, r7, #8
 800153a:	494b      	ldr	r1, [pc, #300]	; (8001668 <printRadioSettings+0x6e8>)
 800153c:	4618      	mov	r0, r3
 800153e:	f00b fe1d 	bl	800d17c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001542:	f107 0308 	add.w	r3, r7, #8
 8001546:	4618      	mov	r0, r3
 8001548:	f7fe feca 	bl	80002e0 <strlen>
 800154c:	4603      	mov	r3, r0
 800154e:	b29a      	uxth	r2, r3
 8001550:	f107 0108 	add.w	r1, r7, #8
 8001554:	230a      	movs	r3, #10
 8001556:	483a      	ldr	r0, [pc, #232]	; (8001640 <printRadioSettings+0x6c0>)
 8001558:	f007 f87f 	bl	800865a <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 800155c:	2014      	movs	r0, #20
 800155e:	f7ff f991 	bl	8000884 <NRF24_read_register>
 8001562:	4603      	mov	r3, r0
 8001564:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001568:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800156c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001570:	f107 0308 	add.w	r3, r7, #8
 8001574:	493d      	ldr	r1, [pc, #244]	; (800166c <printRadioSettings+0x6ec>)
 8001576:	4618      	mov	r0, r3
 8001578:	f00b fe00 	bl	800d17c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800157c:	f107 0308 	add.w	r3, r7, #8
 8001580:	4618      	mov	r0, r3
 8001582:	f7fe fead 	bl	80002e0 <strlen>
 8001586:	4603      	mov	r3, r0
 8001588:	b29a      	uxth	r2, r3
 800158a:	f107 0108 	add.w	r1, r7, #8
 800158e:	230a      	movs	r3, #10
 8001590:	482b      	ldr	r0, [pc, #172]	; (8001640 <printRadioSettings+0x6c0>)
 8001592:	f007 f862 	bl	800865a <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 8001596:	2015      	movs	r0, #21
 8001598:	f7ff f974 	bl	8000884 <NRF24_read_register>
 800159c:	4603      	mov	r3, r0
 800159e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80015a2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015aa:	f107 0308 	add.w	r3, r7, #8
 80015ae:	4930      	ldr	r1, [pc, #192]	; (8001670 <printRadioSettings+0x6f0>)
 80015b0:	4618      	mov	r0, r3
 80015b2:	f00b fde3 	bl	800d17c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015b6:	f107 0308 	add.w	r3, r7, #8
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7fe fe90 	bl	80002e0 <strlen>
 80015c0:	4603      	mov	r3, r0
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	f107 0108 	add.w	r1, r7, #8
 80015c8:	230a      	movs	r3, #10
 80015ca:	481d      	ldr	r0, [pc, #116]	; (8001640 <printRadioSettings+0x6c0>)
 80015cc:	f007 f845 	bl	800865a <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 80015d0:	2016      	movs	r0, #22
 80015d2:	f7ff f957 	bl	8000884 <NRF24_read_register>
 80015d6:	4603      	mov	r3, r0
 80015d8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80015dc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015e0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015e4:	f107 0308 	add.w	r3, r7, #8
 80015e8:	4922      	ldr	r1, [pc, #136]	; (8001674 <printRadioSettings+0x6f4>)
 80015ea:	4618      	mov	r0, r3
 80015ec:	f00b fdc6 	bl	800d17c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015f0:	f107 0308 	add.w	r3, r7, #8
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7fe fe73 	bl	80002e0 <strlen>
 80015fa:	4603      	mov	r3, r0
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	f107 0108 	add.w	r1, r7, #8
 8001602:	230a      	movs	r3, #10
 8001604:	480e      	ldr	r0, [pc, #56]	; (8001640 <printRadioSettings+0x6c0>)
 8001606:	f007 f828 	bl	800865a <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 800160a:	201c      	movs	r0, #28
 800160c:	f7ff f93a 	bl	8000884 <NRF24_read_register>
 8001610:	4603      	mov	r3, r0
 8001612:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001616:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800161a:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800161e:	2b00      	cmp	r3, #0
 8001620:	bfcc      	ite	gt
 8001622:	2301      	movgt	r3, #1
 8001624:	2300      	movle	r3, #0
 8001626:	b2db      	uxtb	r3, r3
 8001628:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800162a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800162e:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001632:	2b00      	cmp	r3, #0
 8001634:	bfcc      	ite	gt
 8001636:	2301      	movgt	r3, #1
 8001638:	2300      	movle	r3, #0
 800163a:	e01d      	b.n	8001678 <printRadioSettings+0x6f8>
 800163c:	0800f3dc 	.word	0x0800f3dc
 8001640:	240002ac 	.word	0x240002ac
 8001644:	0800f3f0 	.word	0x0800f3f0
 8001648:	0800f420 	.word	0x0800f420
 800164c:	0800f450 	.word	0x0800f450
 8001650:	0800f478 	.word	0x0800f478
 8001654:	0800f4a0 	.word	0x0800f4a0
 8001658:	0800f4c8 	.word	0x0800f4c8
 800165c:	0800f4f0 	.word	0x0800f4f0
 8001660:	0800f51c 	.word	0x0800f51c
 8001664:	0800f538 	.word	0x0800f538
 8001668:	0800f554 	.word	0x0800f554
 800166c:	0800f570 	.word	0x0800f570
 8001670:	0800f58c 	.word	0x0800f58c
 8001674:	0800f5a8 	.word	0x0800f5a8
 8001678:	b2db      	uxtb	r3, r3
 800167a:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800167c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001680:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001684:	2b00      	cmp	r3, #0
 8001686:	bfcc      	ite	gt
 8001688:	2301      	movgt	r3, #1
 800168a:	2300      	movle	r3, #0
 800168c:	b2db      	uxtb	r3, r3
 800168e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001690:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001694:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001698:	2b00      	cmp	r3, #0
 800169a:	bfcc      	ite	gt
 800169c:	2301      	movgt	r3, #1
 800169e:	2300      	movle	r3, #0
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80016a4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016a8:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	bfcc      	ite	gt
 80016b0:	2301      	movgt	r3, #1
 80016b2:	2300      	movle	r3, #0
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80016b8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016bc:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	bfcc      	ite	gt
 80016c4:	2301      	movgt	r3, #1
 80016c6:	2300      	movle	r3, #0
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	f107 0008 	add.w	r0, r7, #8
 80016ce:	9303      	str	r3, [sp, #12]
 80016d0:	9402      	str	r4, [sp, #8]
 80016d2:	9101      	str	r1, [sp, #4]
 80016d4:	9200      	str	r2, [sp, #0]
 80016d6:	4633      	mov	r3, r6
 80016d8:	462a      	mov	r2, r5
 80016da:	4936      	ldr	r1, [pc, #216]	; (80017b4 <printRadioSettings+0x834>)
 80016dc:	f00b fd4e 	bl	800d17c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016e0:	f107 0308 	add.w	r3, r7, #8
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe fdfb 	bl	80002e0 <strlen>
 80016ea:	4603      	mov	r3, r0
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	f107 0108 	add.w	r1, r7, #8
 80016f2:	230a      	movs	r3, #10
 80016f4:	4830      	ldr	r0, [pc, #192]	; (80017b8 <printRadioSettings+0x838>)
 80016f6:	f006 ffb0 	bl	800865a <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 80016fa:	201d      	movs	r0, #29
 80016fc:	f7ff f8c2 	bl	8000884 <NRF24_read_register>
 8001700:	4603      	mov	r3, r0
 8001702:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8001706:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800170a:	f003 0304 	and.w	r3, r3, #4
 800170e:	2b00      	cmp	r3, #0
 8001710:	d006      	beq.n	8001720 <printRadioSettings+0x7a0>
 8001712:	f107 0308 	add.w	r3, r7, #8
 8001716:	4929      	ldr	r1, [pc, #164]	; (80017bc <printRadioSettings+0x83c>)
 8001718:	4618      	mov	r0, r3
 800171a:	f00b fd2f 	bl	800d17c <siprintf>
 800171e:	e005      	b.n	800172c <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001720:	f107 0308 	add.w	r3, r7, #8
 8001724:	4926      	ldr	r1, [pc, #152]	; (80017c0 <printRadioSettings+0x840>)
 8001726:	4618      	mov	r0, r3
 8001728:	f00b fd28 	bl	800d17c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800172c:	f107 0308 	add.w	r3, r7, #8
 8001730:	4618      	mov	r0, r3
 8001732:	f7fe fdd5 	bl	80002e0 <strlen>
 8001736:	4603      	mov	r3, r0
 8001738:	b29a      	uxth	r2, r3
 800173a:	f107 0108 	add.w	r1, r7, #8
 800173e:	230a      	movs	r3, #10
 8001740:	481d      	ldr	r0, [pc, #116]	; (80017b8 <printRadioSettings+0x838>)
 8001742:	f006 ff8a 	bl	800865a <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001746:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d006      	beq.n	8001760 <printRadioSettings+0x7e0>
 8001752:	f107 0308 	add.w	r3, r7, #8
 8001756:	491b      	ldr	r1, [pc, #108]	; (80017c4 <printRadioSettings+0x844>)
 8001758:	4618      	mov	r0, r3
 800175a:	f00b fd0f 	bl	800d17c <siprintf>
 800175e:	e005      	b.n	800176c <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001760:	f107 0308 	add.w	r3, r7, #8
 8001764:	4918      	ldr	r1, [pc, #96]	; (80017c8 <printRadioSettings+0x848>)
 8001766:	4618      	mov	r0, r3
 8001768:	f00b fd08 	bl	800d17c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800176c:	f107 0308 	add.w	r3, r7, #8
 8001770:	4618      	mov	r0, r3
 8001772:	f7fe fdb5 	bl	80002e0 <strlen>
 8001776:	4603      	mov	r3, r0
 8001778:	b29a      	uxth	r2, r3
 800177a:	f107 0108 	add.w	r1, r7, #8
 800177e:	230a      	movs	r3, #10
 8001780:	480d      	ldr	r0, [pc, #52]	; (80017b8 <printRadioSettings+0x838>)
 8001782:	f006 ff6a 	bl	800865a <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001786:	f107 0308 	add.w	r3, r7, #8
 800178a:	4910      	ldr	r1, [pc, #64]	; (80017cc <printRadioSettings+0x84c>)
 800178c:	4618      	mov	r0, r3
 800178e:	f00b fcf5 	bl	800d17c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001792:	f107 0308 	add.w	r3, r7, #8
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe fda2 	bl	80002e0 <strlen>
 800179c:	4603      	mov	r3, r0
 800179e:	b29a      	uxth	r2, r3
 80017a0:	f107 0108 	add.w	r1, r7, #8
 80017a4:	230a      	movs	r3, #10
 80017a6:	4804      	ldr	r0, [pc, #16]	; (80017b8 <printRadioSettings+0x838>)
 80017a8:	f006 ff57 	bl	800865a <HAL_UART_Transmit>
}
 80017ac:	bf00      	nop
 80017ae:	3774      	adds	r7, #116	; 0x74
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017b4:	0800f5c4 	.word	0x0800f5c4
 80017b8:	240002ac 	.word	0x240002ac
 80017bc:	0800f610 	.word	0x0800f610
 80017c0:	0800f628 	.word	0x0800f628
 80017c4:	0800f640 	.word	0x0800f640
 80017c8:	0800f65c 	.word	0x0800f65c
 80017cc:	0800f230 	.word	0x0800f230

080017d0 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 80017d0:	b084      	sub	sp, #16
 80017d2:	b580      	push	{r7, lr}
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	f107 0c08 	add.w	ip, r7, #8
 80017da:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 80017de:	4b07      	ldr	r3, [pc, #28]	; (80017fc <nrf24_DebugUART_Init+0x2c>)
 80017e0:	4618      	mov	r0, r3
 80017e2:	f107 0308 	add.w	r3, r7, #8
 80017e6:	2290      	movs	r2, #144	; 0x90
 80017e8:	4619      	mov	r1, r3
 80017ea:	f00a fed2 	bl	800c592 <memcpy>
}
 80017ee:	bf00      	nop
 80017f0:	46bd      	mov	sp, r7
 80017f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80017f6:	b004      	add	sp, #16
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	240002ac 	.word	0x240002ac

08001800 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001800:	b590      	push	{r4, r7, lr}
 8001802:	b0a5      	sub	sp, #148	; 0x94
 8001804:	af22      	add	r7, sp, #136	; 0x88
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8001806:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800180a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800180c:	bf00      	nop
 800180e:	4b4a      	ldr	r3, [pc, #296]	; (8001938 <main+0x138>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d004      	beq.n	8001824 <main+0x24>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	1e5a      	subs	r2, r3, #1
 800181e:	607a      	str	r2, [r7, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	dcf4      	bgt.n	800180e <main+0xe>
  if ( timeout < 0 )
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	da01      	bge.n	800182e <main+0x2e>
  {
  Error_Handler();
 800182a:	f000 fc97 	bl	800215c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800182e:	f001 fc3d 	bl	80030ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001832:	f000 f897 	bl	8001964 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001836:	4b40      	ldr	r3, [pc, #256]	; (8001938 <main+0x138>)
 8001838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800183c:	4a3e      	ldr	r2, [pc, #248]	; (8001938 <main+0x138>)
 800183e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001842:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001846:	4b3c      	ldr	r3, [pc, #240]	; (8001938 <main+0x138>)
 8001848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800184c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001850:	603b      	str	r3, [r7, #0]
 8001852:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001854:	2000      	movs	r0, #0
 8001856:	f002 fac3 	bl	8003de0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800185a:	2100      	movs	r1, #0
 800185c:	2000      	movs	r0, #0
 800185e:	f002 fad9 	bl	8003e14 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001862:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001866:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001868:	bf00      	nop
 800186a:	4b33      	ldr	r3, [pc, #204]	; (8001938 <main+0x138>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d104      	bne.n	8001880 <main+0x80>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	1e5a      	subs	r2, r3, #1
 800187a:	607a      	str	r2, [r7, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	dcf4      	bgt.n	800186a <main+0x6a>
if ( timeout < 0 )
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	da01      	bge.n	800188a <main+0x8a>
{
Error_Handler();
 8001886:	f000 fc69 	bl	800215c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800188a:	f000 fae5 	bl	8001e58 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800188e:	f000 f8e7 	bl	8001a60 <MX_FDCAN1_Init>
  MX_USART3_UART_Init();
 8001892:	f000 fa95 	bl	8001dc0 <MX_USART3_UART_Init>
  MX_SPI4_Init();
 8001896:	f000 f99f 	bl	8001bd8 <MX_SPI4_Init>
  MX_TIM13_Init();
 800189a:	f000 f9f5 	bl	8001c88 <MX_TIM13_Init>
  MX_TIM14_Init();
 800189e:	f000 fa41 	bl	8001d24 <MX_TIM14_Init>
  MX_SPI1_Init();
 80018a2:	f000 f941 	bl	8001b28 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // PWM Inicialiaztion
  HAL_TIM_PWM_Start(&htim14,TIM_CHANNEL_1);
 80018a6:	2100      	movs	r1, #0
 80018a8:	4824      	ldr	r0, [pc, #144]	; (800193c <main+0x13c>)
 80018aa:	f005 ff69 	bl	8007780 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim13,TIM_CHANNEL_1);
 80018ae:	2100      	movs	r1, #0
 80018b0:	4823      	ldr	r0, [pc, #140]	; (8001940 <main+0x140>)
 80018b2:	f005 ff65 	bl	8007780 <HAL_TIM_PWM_Start>

  // NRF24 Inicialization
  NRF24_begin(GPIOB, GPIO_PIN_2, GPIO_PIN_1, hspi1);
 80018b6:	4c23      	ldr	r4, [pc, #140]	; (8001944 <main+0x144>)
 80018b8:	4668      	mov	r0, sp
 80018ba:	1d23      	adds	r3, r4, #4
 80018bc:	2284      	movs	r2, #132	; 0x84
 80018be:	4619      	mov	r1, r3
 80018c0:	f00a fe67 	bl	800c592 <memcpy>
 80018c4:	6823      	ldr	r3, [r4, #0]
 80018c6:	2202      	movs	r2, #2
 80018c8:	2104      	movs	r1, #4
 80018ca:	481f      	ldr	r0, [pc, #124]	; (8001948 <main+0x148>)
 80018cc:	f7ff f884 	bl	80009d8 <NRF24_begin>
  nrf24_DebugUART_Init(huart3);
 80018d0:	4c1e      	ldr	r4, [pc, #120]	; (800194c <main+0x14c>)
 80018d2:	4668      	mov	r0, sp
 80018d4:	f104 0310 	add.w	r3, r4, #16
 80018d8:	2280      	movs	r2, #128	; 0x80
 80018da:	4619      	mov	r1, r3
 80018dc:	f00a fe59 	bl	800c592 <memcpy>
 80018e0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80018e4:	f7ff ff74 	bl	80017d0 <nrf24_DebugUART_Init>

  // MPU Inicialization
  MPU9250_Init(&mpu);
 80018e8:	4819      	ldr	r0, [pc, #100]	; (8001950 <main+0x150>)
 80018ea:	f000 fd95 	bl	8002418 <MPU9250_Init>

  // NRF24 setup to read
  NRF24_setAutoAck(false);
 80018ee:	2000      	movs	r0, #0
 80018f0:	f7ff fa58 	bl	8000da4 <NRF24_setAutoAck>
  NRF24_setChannel(52);
 80018f4:	2034      	movs	r0, #52	; 0x34
 80018f6:	f7ff f9de 	bl	8000cb6 <NRF24_setChannel>
  NRF24_setPayloadSize(32);
 80018fa:	2020      	movs	r0, #32
 80018fc:	f7ff f9f0 	bl	8000ce0 <NRF24_setPayloadSize>
  NRF24_setDataRate(RF24_2MBPS);
 8001900:	2001      	movs	r0, #1
 8001902:	f7ff fa9d 	bl	8000e40 <NRF24_setDataRate>
  NRF24_openReadingPipe(0, RxpipeAddrs);
 8001906:	4b13      	ldr	r3, [pc, #76]	; (8001954 <main+0x154>)
 8001908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190c:	2000      	movs	r0, #0
 800190e:	f7ff f969 	bl	8000be4 <NRF24_openReadingPipe>
  NRF24_enableDynamicPayloads();
 8001912:	f7ff f9fd 	bl	8000d10 <NRF24_enableDynamicPayloads>
  printRadioSettings();
 8001916:	f7ff fb33 	bl	8000f80 <printRadioSettings>
  NRF24_startListening();
 800191a:	f7ff f93d 	bl	8000b98 <NRF24_startListening>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800191e:	f007 ff97 	bl	8009850 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001922:	4a0d      	ldr	r2, [pc, #52]	; (8001958 <main+0x158>)
 8001924:	2100      	movs	r1, #0
 8001926:	480d      	ldr	r0, [pc, #52]	; (800195c <main+0x15c>)
 8001928:	f007 ffdc 	bl	80098e4 <osThreadNew>
 800192c:	4603      	mov	r3, r0
 800192e:	4a0c      	ldr	r2, [pc, #48]	; (8001960 <main+0x160>)
 8001930:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001932:	f007 ffb1 	bl	8009898 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001936:	e7fe      	b.n	8001936 <main+0x136>
 8001938:	58024400 	.word	0x58024400
 800193c:	24000538 	.word	0x24000538
 8001940:	240004ec 	.word	0x240004ec
 8001944:	240003dc 	.word	0x240003dc
 8001948:	58020400 	.word	0x58020400
 800194c:	24000584 	.word	0x24000584
 8001950:	2400061c 	.word	0x2400061c
 8001954:	24000008 	.word	0x24000008
 8001958:	0800f8f4 	.word	0x0800f8f4
 800195c:	08001fc5 	.word	0x08001fc5
 8001960:	24000614 	.word	0x24000614

08001964 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b09c      	sub	sp, #112	; 0x70
 8001968:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800196a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800196e:	224c      	movs	r2, #76	; 0x4c
 8001970:	2100      	movs	r1, #0
 8001972:	4618      	mov	r0, r3
 8001974:	f00a fe1b 	bl	800c5ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001978:	1d3b      	adds	r3, r7, #4
 800197a:	2220      	movs	r2, #32
 800197c:	2100      	movs	r1, #0
 800197e:	4618      	mov	r0, r3
 8001980:	f00a fe15 	bl	800c5ae <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001984:	2004      	movs	r0, #4
 8001986:	f002 fa59 	bl	8003e3c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800198a:	2300      	movs	r3, #0
 800198c:	603b      	str	r3, [r7, #0]
 800198e:	4b32      	ldr	r3, [pc, #200]	; (8001a58 <SystemClock_Config+0xf4>)
 8001990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001992:	4a31      	ldr	r2, [pc, #196]	; (8001a58 <SystemClock_Config+0xf4>)
 8001994:	f023 0301 	bic.w	r3, r3, #1
 8001998:	62d3      	str	r3, [r2, #44]	; 0x2c
 800199a:	4b2f      	ldr	r3, [pc, #188]	; (8001a58 <SystemClock_Config+0xf4>)
 800199c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	603b      	str	r3, [r7, #0]
 80019a4:	4b2d      	ldr	r3, [pc, #180]	; (8001a5c <SystemClock_Config+0xf8>)
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019ac:	4a2b      	ldr	r2, [pc, #172]	; (8001a5c <SystemClock_Config+0xf8>)
 80019ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019b2:	6193      	str	r3, [r2, #24]
 80019b4:	4b29      	ldr	r3, [pc, #164]	; (8001a5c <SystemClock_Config+0xf8>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019bc:	603b      	str	r3, [r7, #0]
 80019be:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80019c0:	bf00      	nop
 80019c2:	4b26      	ldr	r3, [pc, #152]	; (8001a5c <SystemClock_Config+0xf8>)
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019ce:	d1f8      	bne.n	80019c2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019d0:	2301      	movs	r3, #1
 80019d2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80019d4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80019d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019da:	2302      	movs	r3, #2
 80019dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019de:	2302      	movs	r3, #2
 80019e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80019e2:	2301      	movs	r3, #1
 80019e4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 80019e6:	2312      	movs	r3, #18
 80019e8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80019ea:	2302      	movs	r3, #2
 80019ec:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80019ee:	2303      	movs	r3, #3
 80019f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80019f2:	2302      	movs	r3, #2
 80019f4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80019f6:	230c      	movs	r3, #12
 80019f8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80019fa:	2302      	movs	r3, #2
 80019fc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 80019fe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001a02:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f002 fa71 	bl	8003ef0 <HAL_RCC_OscConfig>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001a14:	f000 fba2 	bl	800215c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a18:	233f      	movs	r3, #63	; 0x3f
 8001a1a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001a20:	2300      	movs	r3, #0
 8001a22:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001a24:	2300      	movs	r3, #0
 8001a26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001a2c:	2340      	movs	r3, #64	; 0x40
 8001a2e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001a30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a34:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001a36:	2300      	movs	r3, #0
 8001a38:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a3a:	1d3b      	adds	r3, r7, #4
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f002 fe84 	bl	800474c <HAL_RCC_ClockConfig>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <SystemClock_Config+0xea>
  {
    Error_Handler();
 8001a4a:	f000 fb87 	bl	800215c <Error_Handler>
  }
}
 8001a4e:	bf00      	nop
 8001a50:	3770      	adds	r7, #112	; 0x70
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	58000400 	.word	0x58000400
 8001a5c:	58024800 	.word	0x58024800

08001a60 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001a64:	4b2e      	ldr	r3, [pc, #184]	; (8001b20 <MX_FDCAN1_Init+0xc0>)
 8001a66:	4a2f      	ldr	r2, [pc, #188]	; (8001b24 <MX_FDCAN1_Init+0xc4>)
 8001a68:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001a6a:	4b2d      	ldr	r3, [pc, #180]	; (8001b20 <MX_FDCAN1_Init+0xc0>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001a70:	4b2b      	ldr	r3, [pc, #172]	; (8001b20 <MX_FDCAN1_Init+0xc0>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001a76:	4b2a      	ldr	r3, [pc, #168]	; (8001b20 <MX_FDCAN1_Init+0xc0>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001a7c:	4b28      	ldr	r3, [pc, #160]	; (8001b20 <MX_FDCAN1_Init+0xc0>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001a82:	4b27      	ldr	r3, [pc, #156]	; (8001b20 <MX_FDCAN1_Init+0xc0>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8001a88:	4b25      	ldr	r3, [pc, #148]	; (8001b20 <MX_FDCAN1_Init+0xc0>)
 8001a8a:	2210      	movs	r2, #16
 8001a8c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001a8e:	4b24      	ldr	r3, [pc, #144]	; (8001b20 <MX_FDCAN1_Init+0xc0>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001a94:	4b22      	ldr	r3, [pc, #136]	; (8001b20 <MX_FDCAN1_Init+0xc0>)
 8001a96:	2202      	movs	r2, #2
 8001a98:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001a9a:	4b21      	ldr	r3, [pc, #132]	; (8001b20 <MX_FDCAN1_Init+0xc0>)
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001aa0:	4b1f      	ldr	r3, [pc, #124]	; (8001b20 <MX_FDCAN1_Init+0xc0>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001aa6:	4b1e      	ldr	r3, [pc, #120]	; (8001b20 <MX_FDCAN1_Init+0xc0>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001aac:	4b1c      	ldr	r3, [pc, #112]	; (8001b20 <MX_FDCAN1_Init+0xc0>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001ab2:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <MX_FDCAN1_Init+0xc0>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001ab8:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <MX_FDCAN1_Init+0xc0>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8001abe:	4b18      	ldr	r3, [pc, #96]	; (8001b20 <MX_FDCAN1_Init+0xc0>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001ac4:	4b16      	ldr	r3, [pc, #88]	; (8001b20 <MX_FDCAN1_Init+0xc0>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8001aca:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <MX_FDCAN1_Init+0xc0>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001ad0:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <MX_FDCAN1_Init+0xc0>)
 8001ad2:	2204      	movs	r2, #4
 8001ad4:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001ad6:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <MX_FDCAN1_Init+0xc0>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001adc:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <MX_FDCAN1_Init+0xc0>)
 8001ade:	2204      	movs	r2, #4
 8001ae0:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001ae2:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <MX_FDCAN1_Init+0xc0>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001ae8:	4b0d      	ldr	r3, [pc, #52]	; (8001b20 <MX_FDCAN1_Init+0xc0>)
 8001aea:	2204      	movs	r2, #4
 8001aec:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001aee:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <MX_FDCAN1_Init+0xc0>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001af4:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <MX_FDCAN1_Init+0xc0>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <MX_FDCAN1_Init+0xc0>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001b00:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <MX_FDCAN1_Init+0xc0>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001b06:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <MX_FDCAN1_Init+0xc0>)
 8001b08:	2204      	movs	r2, #4
 8001b0a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001b0c:	4804      	ldr	r0, [pc, #16]	; (8001b20 <MX_FDCAN1_Init+0xc0>)
 8001b0e:	f001 fc39 	bl	8003384 <HAL_FDCAN_Init>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8001b18:	f000 fb20 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001b1c:	bf00      	nop
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	2400033c 	.word	0x2400033c
 8001b24:	4000a000 	.word	0x4000a000

08001b28 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b2c:	4b28      	ldr	r3, [pc, #160]	; (8001bd0 <MX_SPI1_Init+0xa8>)
 8001b2e:	4a29      	ldr	r2, [pc, #164]	; (8001bd4 <MX_SPI1_Init+0xac>)
 8001b30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b32:	4b27      	ldr	r3, [pc, #156]	; (8001bd0 <MX_SPI1_Init+0xa8>)
 8001b34:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001b38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b3a:	4b25      	ldr	r3, [pc, #148]	; (8001bd0 <MX_SPI1_Init+0xa8>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b40:	4b23      	ldr	r3, [pc, #140]	; (8001bd0 <MX_SPI1_Init+0xa8>)
 8001b42:	2207      	movs	r2, #7
 8001b44:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001b46:	4b22      	ldr	r3, [pc, #136]	; (8001bd0 <MX_SPI1_Init+0xa8>)
 8001b48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b4c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001b4e:	4b20      	ldr	r3, [pc, #128]	; (8001bd0 <MX_SPI1_Init+0xa8>)
 8001b50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b54:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b56:	4b1e      	ldr	r3, [pc, #120]	; (8001bd0 <MX_SPI1_Init+0xa8>)
 8001b58:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b5c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001b5e:	4b1c      	ldr	r3, [pc, #112]	; (8001bd0 <MX_SPI1_Init+0xa8>)
 8001b60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b64:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b66:	4b1a      	ldr	r3, [pc, #104]	; (8001bd0 <MX_SPI1_Init+0xa8>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b6c:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <MX_SPI1_Init+0xa8>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b72:	4b17      	ldr	r3, [pc, #92]	; (8001bd0 <MX_SPI1_Init+0xa8>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001b78:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <MX_SPI1_Init+0xa8>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b7e:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <MX_SPI1_Init+0xa8>)
 8001b80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b84:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001b86:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <MX_SPI1_Init+0xa8>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001b8c:	4b10      	ldr	r3, [pc, #64]	; (8001bd0 <MX_SPI1_Init+0xa8>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001b92:	4b0f      	ldr	r3, [pc, #60]	; (8001bd0 <MX_SPI1_Init+0xa8>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001b98:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <MX_SPI1_Init+0xa8>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001b9e:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <MX_SPI1_Init+0xa8>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001ba4:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <MX_SPI1_Init+0xa8>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001baa:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <MX_SPI1_Init+0xa8>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001bb0:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <MX_SPI1_Init+0xa8>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001bb6:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <MX_SPI1_Init+0xa8>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bbc:	4804      	ldr	r0, [pc, #16]	; (8001bd0 <MX_SPI1_Init+0xa8>)
 8001bbe:	f004 fcfb 	bl	80065b8 <HAL_SPI_Init>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8001bc8:	f000 fac8 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	240003dc 	.word	0x240003dc
 8001bd4:	40013000 	.word	0x40013000

08001bd8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001bdc:	4b28      	ldr	r3, [pc, #160]	; (8001c80 <MX_SPI4_Init+0xa8>)
 8001bde:	4a29      	ldr	r2, [pc, #164]	; (8001c84 <MX_SPI4_Init+0xac>)
 8001be0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001be2:	4b27      	ldr	r3, [pc, #156]	; (8001c80 <MX_SPI4_Init+0xa8>)
 8001be4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001be8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001bea:	4b25      	ldr	r3, [pc, #148]	; (8001c80 <MX_SPI4_Init+0xa8>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bf0:	4b23      	ldr	r3, [pc, #140]	; (8001c80 <MX_SPI4_Init+0xa8>)
 8001bf2:	2207      	movs	r2, #7
 8001bf4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001bf6:	4b22      	ldr	r3, [pc, #136]	; (8001c80 <MX_SPI4_Init+0xa8>)
 8001bf8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bfc:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001bfe:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <MX_SPI4_Init+0xa8>)
 8001c00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c04:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001c06:	4b1e      	ldr	r3, [pc, #120]	; (8001c80 <MX_SPI4_Init+0xa8>)
 8001c08:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c0c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c0e:	4b1c      	ldr	r3, [pc, #112]	; (8001c80 <MX_SPI4_Init+0xa8>)
 8001c10:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001c14:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c16:	4b1a      	ldr	r3, [pc, #104]	; (8001c80 <MX_SPI4_Init+0xa8>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c1c:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <MX_SPI4_Init+0xa8>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c22:	4b17      	ldr	r3, [pc, #92]	; (8001c80 <MX_SPI4_Init+0xa8>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001c28:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <MX_SPI4_Init+0xa8>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c2e:	4b14      	ldr	r3, [pc, #80]	; (8001c80 <MX_SPI4_Init+0xa8>)
 8001c30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c34:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001c36:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <MX_SPI4_Init+0xa8>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001c3c:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <MX_SPI4_Init+0xa8>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001c42:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <MX_SPI4_Init+0xa8>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001c48:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <MX_SPI4_Init+0xa8>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001c4e:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <MX_SPI4_Init+0xa8>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001c54:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <MX_SPI4_Init+0xa8>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001c5a:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <MX_SPI4_Init+0xa8>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001c60:	4b07      	ldr	r3, [pc, #28]	; (8001c80 <MX_SPI4_Init+0xa8>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001c66:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <MX_SPI4_Init+0xa8>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001c6c:	4804      	ldr	r0, [pc, #16]	; (8001c80 <MX_SPI4_Init+0xa8>)
 8001c6e:	f004 fca3 	bl	80065b8 <HAL_SPI_Init>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_SPI4_Init+0xa4>
  {
    Error_Handler();
 8001c78:	f000 fa70 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001c7c:	bf00      	nop
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	24000464 	.word	0x24000464
 8001c84:	40013400 	.word	0x40013400

08001c88 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b088      	sub	sp, #32
 8001c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c8e:	1d3b      	adds	r3, r7, #4
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	611a      	str	r2, [r3, #16]
 8001c9c:	615a      	str	r2, [r3, #20]
 8001c9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001ca0:	4b1e      	ldr	r3, [pc, #120]	; (8001d1c <MX_TIM13_Init+0x94>)
 8001ca2:	4a1f      	ldr	r2, [pc, #124]	; (8001d20 <MX_TIM13_Init+0x98>)
 8001ca4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 22;
 8001ca6:	4b1d      	ldr	r3, [pc, #116]	; (8001d1c <MX_TIM13_Init+0x94>)
 8001ca8:	2216      	movs	r2, #22
 8001caa:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cac:	4b1b      	ldr	r3, [pc, #108]	; (8001d1c <MX_TIM13_Init+0x94>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8001cb2:	4b1a      	ldr	r3, [pc, #104]	; (8001d1c <MX_TIM13_Init+0x94>)
 8001cb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cb8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cba:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <MX_TIM13_Init+0x94>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cc0:	4b16      	ldr	r3, [pc, #88]	; (8001d1c <MX_TIM13_Init+0x94>)
 8001cc2:	2280      	movs	r2, #128	; 0x80
 8001cc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001cc6:	4815      	ldr	r0, [pc, #84]	; (8001d1c <MX_TIM13_Init+0x94>)
 8001cc8:	f005 fc29 	bl	800751e <HAL_TIM_Base_Init>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001cd2:	f000 fa43 	bl	800215c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001cd6:	4811      	ldr	r0, [pc, #68]	; (8001d1c <MX_TIM13_Init+0x94>)
 8001cd8:	f005 fcf0 	bl	80076bc <HAL_TIM_PWM_Init>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001ce2:	f000 fa3b 	bl	800215c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ce6:	2360      	movs	r3, #96	; 0x60
 8001ce8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001cea:	2300      	movs	r3, #0
 8001cec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cf6:	1d3b      	adds	r3, r7, #4
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4807      	ldr	r0, [pc, #28]	; (8001d1c <MX_TIM13_Init+0x94>)
 8001cfe:	f005 ff6d 	bl	8007bdc <HAL_TIM_PWM_ConfigChannel>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001d08:	f000 fa28 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001d0c:	4803      	ldr	r0, [pc, #12]	; (8001d1c <MX_TIM13_Init+0x94>)
 8001d0e:	f000 ff87 	bl	8002c20 <HAL_TIM_MspPostInit>

}
 8001d12:	bf00      	nop
 8001d14:	3720      	adds	r7, #32
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	240004ec 	.word	0x240004ec
 8001d20:	40001c00 	.word	0x40001c00

08001d24 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b088      	sub	sp, #32
 8001d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d2a:	1d3b      	adds	r3, r7, #4
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	611a      	str	r2, [r3, #16]
 8001d38:	615a      	str	r2, [r3, #20]
 8001d3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001d3c:	4b1e      	ldr	r3, [pc, #120]	; (8001db8 <MX_TIM14_Init+0x94>)
 8001d3e:	4a1f      	ldr	r2, [pc, #124]	; (8001dbc <MX_TIM14_Init+0x98>)
 8001d40:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 22;
 8001d42:	4b1d      	ldr	r3, [pc, #116]	; (8001db8 <MX_TIM14_Init+0x94>)
 8001d44:	2216      	movs	r2, #22
 8001d46:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d48:	4b1b      	ldr	r3, [pc, #108]	; (8001db8 <MX_TIM14_Init+0x94>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001d4e:	4b1a      	ldr	r3, [pc, #104]	; (8001db8 <MX_TIM14_Init+0x94>)
 8001d50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d54:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d56:	4b18      	ldr	r3, [pc, #96]	; (8001db8 <MX_TIM14_Init+0x94>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d5c:	4b16      	ldr	r3, [pc, #88]	; (8001db8 <MX_TIM14_Init+0x94>)
 8001d5e:	2280      	movs	r2, #128	; 0x80
 8001d60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001d62:	4815      	ldr	r0, [pc, #84]	; (8001db8 <MX_TIM14_Init+0x94>)
 8001d64:	f005 fbdb 	bl	800751e <HAL_TIM_Base_Init>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8001d6e:	f000 f9f5 	bl	800215c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001d72:	4811      	ldr	r0, [pc, #68]	; (8001db8 <MX_TIM14_Init+0x94>)
 8001d74:	f005 fca2 	bl	80076bc <HAL_TIM_PWM_Init>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8001d7e:	f000 f9ed 	bl	800215c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d82:	2360      	movs	r3, #96	; 0x60
 8001d84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d92:	1d3b      	adds	r3, r7, #4
 8001d94:	2200      	movs	r2, #0
 8001d96:	4619      	mov	r1, r3
 8001d98:	4807      	ldr	r0, [pc, #28]	; (8001db8 <MX_TIM14_Init+0x94>)
 8001d9a:	f005 ff1f 	bl	8007bdc <HAL_TIM_PWM_ConfigChannel>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001da4:	f000 f9da 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001da8:	4803      	ldr	r0, [pc, #12]	; (8001db8 <MX_TIM14_Init+0x94>)
 8001daa:	f000 ff39 	bl	8002c20 <HAL_TIM_MspPostInit>

}
 8001dae:	bf00      	nop
 8001db0:	3720      	adds	r7, #32
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	24000538 	.word	0x24000538
 8001dbc:	40002000 	.word	0x40002000

08001dc0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001dc4:	4b22      	ldr	r3, [pc, #136]	; (8001e50 <MX_USART3_UART_Init+0x90>)
 8001dc6:	4a23      	ldr	r2, [pc, #140]	; (8001e54 <MX_USART3_UART_Init+0x94>)
 8001dc8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001dca:	4b21      	ldr	r3, [pc, #132]	; (8001e50 <MX_USART3_UART_Init+0x90>)
 8001dcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dd0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001dd2:	4b1f      	ldr	r3, [pc, #124]	; (8001e50 <MX_USART3_UART_Init+0x90>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001dd8:	4b1d      	ldr	r3, [pc, #116]	; (8001e50 <MX_USART3_UART_Init+0x90>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001dde:	4b1c      	ldr	r3, [pc, #112]	; (8001e50 <MX_USART3_UART_Init+0x90>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001de4:	4b1a      	ldr	r3, [pc, #104]	; (8001e50 <MX_USART3_UART_Init+0x90>)
 8001de6:	220c      	movs	r2, #12
 8001de8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dea:	4b19      	ldr	r3, [pc, #100]	; (8001e50 <MX_USART3_UART_Init+0x90>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001df0:	4b17      	ldr	r3, [pc, #92]	; (8001e50 <MX_USART3_UART_Init+0x90>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001df6:	4b16      	ldr	r3, [pc, #88]	; (8001e50 <MX_USART3_UART_Init+0x90>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001dfc:	4b14      	ldr	r3, [pc, #80]	; (8001e50 <MX_USART3_UART_Init+0x90>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e02:	4b13      	ldr	r3, [pc, #76]	; (8001e50 <MX_USART3_UART_Init+0x90>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e08:	4811      	ldr	r0, [pc, #68]	; (8001e50 <MX_USART3_UART_Init+0x90>)
 8001e0a:	f006 fbd6 	bl	80085ba <HAL_UART_Init>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001e14:	f000 f9a2 	bl	800215c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e18:	2100      	movs	r1, #0
 8001e1a:	480d      	ldr	r0, [pc, #52]	; (8001e50 <MX_USART3_UART_Init+0x90>)
 8001e1c:	f007 fc0a 	bl	8009634 <HAL_UARTEx_SetTxFifoThreshold>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001e26:	f000 f999 	bl	800215c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	4808      	ldr	r0, [pc, #32]	; (8001e50 <MX_USART3_UART_Init+0x90>)
 8001e2e:	f007 fc3f 	bl	80096b0 <HAL_UARTEx_SetRxFifoThreshold>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001e38:	f000 f990 	bl	800215c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001e3c:	4804      	ldr	r0, [pc, #16]	; (8001e50 <MX_USART3_UART_Init+0x90>)
 8001e3e:	f007 fbc0 	bl	80095c2 <HAL_UARTEx_DisableFifoMode>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001e48:	f000 f988 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e4c:	bf00      	nop
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	24000584 	.word	0x24000584
 8001e54:	40004800 	.word	0x40004800

08001e58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08c      	sub	sp, #48	; 0x30
 8001e5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5e:	f107 031c 	add.w	r3, r7, #28
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	605a      	str	r2, [r3, #4]
 8001e68:	609a      	str	r2, [r3, #8]
 8001e6a:	60da      	str	r2, [r3, #12]
 8001e6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e6e:	4b51      	ldr	r3, [pc, #324]	; (8001fb4 <MX_GPIO_Init+0x15c>)
 8001e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e74:	4a4f      	ldr	r2, [pc, #316]	; (8001fb4 <MX_GPIO_Init+0x15c>)
 8001e76:	f043 0310 	orr.w	r3, r3, #16
 8001e7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e7e:	4b4d      	ldr	r3, [pc, #308]	; (8001fb4 <MX_GPIO_Init+0x15c>)
 8001e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e84:	f003 0310 	and.w	r3, r3, #16
 8001e88:	61bb      	str	r3, [r7, #24]
 8001e8a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e8c:	4b49      	ldr	r3, [pc, #292]	; (8001fb4 <MX_GPIO_Init+0x15c>)
 8001e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e92:	4a48      	ldr	r2, [pc, #288]	; (8001fb4 <MX_GPIO_Init+0x15c>)
 8001e94:	f043 0304 	orr.w	r3, r3, #4
 8001e98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e9c:	4b45      	ldr	r3, [pc, #276]	; (8001fb4 <MX_GPIO_Init+0x15c>)
 8001e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ea2:	f003 0304 	and.w	r3, r3, #4
 8001ea6:	617b      	str	r3, [r7, #20]
 8001ea8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001eaa:	4b42      	ldr	r3, [pc, #264]	; (8001fb4 <MX_GPIO_Init+0x15c>)
 8001eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eb0:	4a40      	ldr	r2, [pc, #256]	; (8001fb4 <MX_GPIO_Init+0x15c>)
 8001eb2:	f043 0320 	orr.w	r3, r3, #32
 8001eb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eba:	4b3e      	ldr	r3, [pc, #248]	; (8001fb4 <MX_GPIO_Init+0x15c>)
 8001ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ec0:	f003 0320 	and.w	r3, r3, #32
 8001ec4:	613b      	str	r3, [r7, #16]
 8001ec6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ec8:	4b3a      	ldr	r3, [pc, #232]	; (8001fb4 <MX_GPIO_Init+0x15c>)
 8001eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ece:	4a39      	ldr	r2, [pc, #228]	; (8001fb4 <MX_GPIO_Init+0x15c>)
 8001ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ed4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ed8:	4b36      	ldr	r3, [pc, #216]	; (8001fb4 <MX_GPIO_Init+0x15c>)
 8001eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee6:	4b33      	ldr	r3, [pc, #204]	; (8001fb4 <MX_GPIO_Init+0x15c>)
 8001ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eec:	4a31      	ldr	r2, [pc, #196]	; (8001fb4 <MX_GPIO_Init+0x15c>)
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ef6:	4b2f      	ldr	r3, [pc, #188]	; (8001fb4 <MX_GPIO_Init+0x15c>)
 8001ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	60bb      	str	r3, [r7, #8]
 8001f02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f04:	4b2b      	ldr	r3, [pc, #172]	; (8001fb4 <MX_GPIO_Init+0x15c>)
 8001f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f0a:	4a2a      	ldr	r2, [pc, #168]	; (8001fb4 <MX_GPIO_Init+0x15c>)
 8001f0c:	f043 0302 	orr.w	r3, r3, #2
 8001f10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f14:	4b27      	ldr	r3, [pc, #156]	; (8001fb4 <MX_GPIO_Init+0x15c>)
 8001f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	607b      	str	r3, [r7, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f22:	4b24      	ldr	r3, [pc, #144]	; (8001fb4 <MX_GPIO_Init+0x15c>)
 8001f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f28:	4a22      	ldr	r2, [pc, #136]	; (8001fb4 <MX_GPIO_Init+0x15c>)
 8001f2a:	f043 0308 	orr.w	r3, r3, #8
 8001f2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f32:	4b20      	ldr	r3, [pc, #128]	; (8001fb4 <MX_GPIO_Init+0x15c>)
 8001f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f38:	f003 0308 	and.w	r3, r3, #8
 8001f3c:	603b      	str	r3, [r7, #0]
 8001f3e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GY_CS_GPIO_Port, GY_CS_Pin, GPIO_PIN_RESET);
 8001f40:	2200      	movs	r2, #0
 8001f42:	2110      	movs	r1, #16
 8001f44:	481c      	ldr	r0, [pc, #112]	; (8001fb8 <MX_GPIO_Init+0x160>)
 8001f46:	f001 ff31 	bl	8003dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|SPI_CE_Pin|SPI_CSN_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f244 0107 	movw	r1, #16391	; 0x4007
 8001f50:	481a      	ldr	r0, [pc, #104]	; (8001fbc <MX_GPIO_Init+0x164>)
 8001f52:	f001 ff2b 	bl	8003dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GY_CS_Pin */
  GPIO_InitStruct.Pin = GY_CS_Pin;
 8001f56:	2310      	movs	r3, #16
 8001f58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f62:	2300      	movs	r3, #0
 8001f64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GY_CS_GPIO_Port, &GPIO_InitStruct);
 8001f66:	f107 031c 	add.w	r3, r7, #28
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4812      	ldr	r0, [pc, #72]	; (8001fb8 <MX_GPIO_Init+0x160>)
 8001f6e:	f001 fd6d 	bl	8003a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f80:	f107 031c 	add.w	r3, r7, #28
 8001f84:	4619      	mov	r1, r3
 8001f86:	480e      	ldr	r0, [pc, #56]	; (8001fc0 <MX_GPIO_Init+0x168>)
 8001f88:	f001 fd60 	bl	8003a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin SPI_CE_Pin SPI_CSN_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|SPI_CE_Pin|SPI_CSN_Pin|LD3_Pin;
 8001f8c:	f244 0307 	movw	r3, #16391	; 0x4007
 8001f90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f92:	2301      	movs	r3, #1
 8001f94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f9e:	f107 031c 	add.w	r3, r7, #28
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4805      	ldr	r0, [pc, #20]	; (8001fbc <MX_GPIO_Init+0x164>)
 8001fa6:	f001 fd51 	bl	8003a4c <HAL_GPIO_Init>

}
 8001faa:	bf00      	nop
 8001fac:	3730      	adds	r7, #48	; 0x30
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	58024400 	.word	0x58024400
 8001fb8:	58021000 	.word	0x58021000
 8001fbc:	58020400 	.word	0x58020400
 8001fc0:	58020800 	.word	0x58020800

08001fc4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af04      	add	r7, sp, #16
 8001fca:	6078      	str	r0, [r7, #4]

  printf("Hello World\n\r");
  */


  printf("System start up!\r\n");
 8001fcc:	484e      	ldr	r0, [pc, #312]	; (8002108 <StartDefaultTask+0x144>)
 8001fce:	f00b f853 	bl	800d078 <puts>

  /* Infinite loop */
  for(;;)
  {

	ak8963_WhoAmI = mpu_r_ak8963_WhoAmI(&mpu);
 8001fd2:	484e      	ldr	r0, [pc, #312]	; (800210c <StartDefaultTask+0x148>)
 8001fd4:	f000 f9c0 	bl	8002358 <mpu_r_ak8963_WhoAmI>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	461a      	mov	r2, r3
 8001fdc:	4b4c      	ldr	r3, [pc, #304]	; (8002110 <StartDefaultTask+0x14c>)
 8001fde:	701a      	strb	r2, [r3, #0]
	mpu9250_WhoAmI = mpu_r_WhoAmI(&mpu);
 8001fe0:	484a      	ldr	r0, [pc, #296]	; (800210c <StartDefaultTask+0x148>)
 8001fe2:	f000 f9c9 	bl	8002378 <mpu_r_WhoAmI>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4b4a      	ldr	r3, [pc, #296]	; (8002114 <StartDefaultTask+0x150>)
 8001fec:	701a      	strb	r2, [r3, #0]
	MPU9250_ReadAccel(&mpu);
 8001fee:	4847      	ldr	r0, [pc, #284]	; (800210c <StartDefaultTask+0x148>)
 8001ff0:	f000 fa86 	bl	8002500 <MPU9250_ReadAccel>
	MPU9250_ReadGyro(&mpu);
 8001ff4:	4845      	ldr	r0, [pc, #276]	; (800210c <StartDefaultTask+0x148>)
 8001ff6:	f000 faef 	bl	80025d8 <MPU9250_ReadGyro>
	MPU9250_ReadMag(&mpu);
 8001ffa:	4844      	ldr	r0, [pc, #272]	; (800210c <StartDefaultTask+0x148>)
 8001ffc:	f000 fb54 	bl	80026a8 <MPU9250_ReadMag>

	osDelay(1000);
 8002000:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002004:	f007 fd00 	bl	8009a08 <osDelay>

	printf("AK8963: 0x%x\nMPU9250: 0x%x\r\n", ak8963_WhoAmI,
 8002008:	4b41      	ldr	r3, [pc, #260]	; (8002110 <StartDefaultTask+0x14c>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	4619      	mov	r1, r3
 800200e:	4b41      	ldr	r3, [pc, #260]	; (8002114 <StartDefaultTask+0x150>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	461a      	mov	r2, r3
 8002014:	4840      	ldr	r0, [pc, #256]	; (8002118 <StartDefaultTask+0x154>)
 8002016:	f00a ffa9 	bl	800cf6c <iprintf>
			mpu9250_WhoAmI);
	printf("AX:%d \tAY:%d\t AZ:%d\r\n", mpu.mpu_data.Accel_row[0],
 800201a:	4b3c      	ldr	r3, [pc, #240]	; (800210c <StartDefaultTask+0x148>)
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	b21b      	sxth	r3, r3
 8002020:	4619      	mov	r1, r3
			mpu.mpu_data.Accel_row[1], mpu.mpu_data.Accel_row[2]);
 8002022:	4b3a      	ldr	r3, [pc, #232]	; (800210c <StartDefaultTask+0x148>)
 8002024:	885b      	ldrh	r3, [r3, #2]
 8002026:	b21b      	sxth	r3, r3
	printf("AX:%d \tAY:%d\t AZ:%d\r\n", mpu.mpu_data.Accel_row[0],
 8002028:	461a      	mov	r2, r3
			mpu.mpu_data.Accel_row[1], mpu.mpu_data.Accel_row[2]);
 800202a:	4b38      	ldr	r3, [pc, #224]	; (800210c <StartDefaultTask+0x148>)
 800202c:	889b      	ldrh	r3, [r3, #4]
 800202e:	b21b      	sxth	r3, r3
	printf("AX:%d \tAY:%d\t AZ:%d\r\n", mpu.mpu_data.Accel_row[0],
 8002030:	483a      	ldr	r0, [pc, #232]	; (800211c <StartDefaultTask+0x158>)
 8002032:	f00a ff9b 	bl	800cf6c <iprintf>
	printf("AX:%.3f \tAY:%.3f\t AZ:%.3f\r\n", mpu.mpu_data.Accel[0],
 8002036:	4b35      	ldr	r3, [pc, #212]	; (800210c <StartDefaultTask+0x148>)
 8002038:	edd3 7a05 	vldr	s15, [r3, #20]
 800203c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
			mpu.mpu_data.Accel[1], mpu.mpu_data.Accel[2]);
 8002040:	4b32      	ldr	r3, [pc, #200]	; (800210c <StartDefaultTask+0x148>)
 8002042:	edd3 7a06 	vldr	s15, [r3, #24]
	printf("AX:%.3f \tAY:%.3f\t AZ:%.3f\r\n", mpu.mpu_data.Accel[0],
 8002046:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			mpu.mpu_data.Accel[1], mpu.mpu_data.Accel[2]);
 800204a:	4b30      	ldr	r3, [pc, #192]	; (800210c <StartDefaultTask+0x148>)
 800204c:	edd3 6a07 	vldr	s13, [r3, #28]
	printf("AX:%.3f \tAY:%.3f\t AZ:%.3f\r\n", mpu.mpu_data.Accel[0],
 8002050:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002054:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002058:	ed8d 7b00 	vstr	d7, [sp]
 800205c:	ec53 2b15 	vmov	r2, r3, d5
 8002060:	482f      	ldr	r0, [pc, #188]	; (8002120 <StartDefaultTask+0x15c>)
 8002062:	f00a ff83 	bl	800cf6c <iprintf>
	printf("GX:%d \tGY:%d\t GZ:%d\r\n", mpu.mpu_data.Gyro_row[0],
 8002066:	4b29      	ldr	r3, [pc, #164]	; (800210c <StartDefaultTask+0x148>)
 8002068:	88db      	ldrh	r3, [r3, #6]
 800206a:	b21b      	sxth	r3, r3
 800206c:	4619      	mov	r1, r3
			mpu.mpu_data.Gyro_row[1], mpu.mpu_data.Gyro_row[2]);
 800206e:	4b27      	ldr	r3, [pc, #156]	; (800210c <StartDefaultTask+0x148>)
 8002070:	891b      	ldrh	r3, [r3, #8]
 8002072:	b21b      	sxth	r3, r3
	printf("GX:%d \tGY:%d\t GZ:%d\r\n", mpu.mpu_data.Gyro_row[0],
 8002074:	461a      	mov	r2, r3
			mpu.mpu_data.Gyro_row[1], mpu.mpu_data.Gyro_row[2]);
 8002076:	4b25      	ldr	r3, [pc, #148]	; (800210c <StartDefaultTask+0x148>)
 8002078:	895b      	ldrh	r3, [r3, #10]
 800207a:	b21b      	sxth	r3, r3
	printf("GX:%d \tGY:%d\t GZ:%d\r\n", mpu.mpu_data.Gyro_row[0],
 800207c:	4829      	ldr	r0, [pc, #164]	; (8002124 <StartDefaultTask+0x160>)
 800207e:	f00a ff75 	bl	800cf6c <iprintf>
	printf("GX:%.3f \tGY:%.3f\t GZ:%.3f\r\n", mpu.mpu_data.Gyro[0],
 8002082:	4b22      	ldr	r3, [pc, #136]	; (800210c <StartDefaultTask+0x148>)
 8002084:	edd3 7a08 	vldr	s15, [r3, #32]
 8002088:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
			mpu.mpu_data.Gyro[1], mpu.mpu_data.Gyro[2]);
 800208c:	4b1f      	ldr	r3, [pc, #124]	; (800210c <StartDefaultTask+0x148>)
 800208e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
	printf("GX:%.3f \tGY:%.3f\t GZ:%.3f\r\n", mpu.mpu_data.Gyro[0],
 8002092:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			mpu.mpu_data.Gyro[1], mpu.mpu_data.Gyro[2]);
 8002096:	4b1d      	ldr	r3, [pc, #116]	; (800210c <StartDefaultTask+0x148>)
 8002098:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
	printf("GX:%.3f \tGY:%.3f\t GZ:%.3f\r\n", mpu.mpu_data.Gyro[0],
 800209c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80020a0:	ed8d 6b02 	vstr	d6, [sp, #8]
 80020a4:	ed8d 7b00 	vstr	d7, [sp]
 80020a8:	ec53 2b15 	vmov	r2, r3, d5
 80020ac:	481e      	ldr	r0, [pc, #120]	; (8002128 <StartDefaultTask+0x164>)
 80020ae:	f00a ff5d 	bl	800cf6c <iprintf>
	printf("MX:%d \tMY:%d\t MZ:%d\r\n", mpu.mpu_data.Magn_row[0],
 80020b2:	4b16      	ldr	r3, [pc, #88]	; (800210c <StartDefaultTask+0x148>)
 80020b4:	899b      	ldrh	r3, [r3, #12]
 80020b6:	b21b      	sxth	r3, r3
 80020b8:	4619      	mov	r1, r3
			mpu.mpu_data.Magn_row[1], mpu.mpu_data.Magn_row[2]);
 80020ba:	4b14      	ldr	r3, [pc, #80]	; (800210c <StartDefaultTask+0x148>)
 80020bc:	89db      	ldrh	r3, [r3, #14]
 80020be:	b21b      	sxth	r3, r3
	printf("MX:%d \tMY:%d\t MZ:%d\r\n", mpu.mpu_data.Magn_row[0],
 80020c0:	461a      	mov	r2, r3
			mpu.mpu_data.Magn_row[1], mpu.mpu_data.Magn_row[2]);
 80020c2:	4b12      	ldr	r3, [pc, #72]	; (800210c <StartDefaultTask+0x148>)
 80020c4:	8a1b      	ldrh	r3, [r3, #16]
 80020c6:	b21b      	sxth	r3, r3
	printf("MX:%d \tMY:%d\t MZ:%d\r\n", mpu.mpu_data.Magn_row[0],
 80020c8:	4818      	ldr	r0, [pc, #96]	; (800212c <StartDefaultTask+0x168>)
 80020ca:	f00a ff4f 	bl	800cf6c <iprintf>
	printf("MX:%.3f \tMY:%.3f\t MZ:%.3f\r\n", mpu.mpu_data.Magn[0],
 80020ce:	4b0f      	ldr	r3, [pc, #60]	; (800210c <StartDefaultTask+0x148>)
 80020d0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80020d4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
			mpu.mpu_data.Magn[1], mpu.mpu_data.Magn[2]);
 80020d8:	4b0c      	ldr	r3, [pc, #48]	; (800210c <StartDefaultTask+0x148>)
 80020da:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
	printf("MX:%.3f \tMY:%.3f\t MZ:%.3f\r\n", mpu.mpu_data.Magn[0],
 80020de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			mpu.mpu_data.Magn[1], mpu.mpu_data.Magn[2]);
 80020e2:	4b0a      	ldr	r3, [pc, #40]	; (800210c <StartDefaultTask+0x148>)
 80020e4:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
	printf("MX:%.3f \tMY:%.3f\t MZ:%.3f\r\n", mpu.mpu_data.Magn[0],
 80020e8:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80020ec:	ed8d 6b02 	vstr	d6, [sp, #8]
 80020f0:	ed8d 7b00 	vstr	d7, [sp]
 80020f4:	ec53 2b15 	vmov	r2, r3, d5
 80020f8:	480d      	ldr	r0, [pc, #52]	; (8002130 <StartDefaultTask+0x16c>)
 80020fa:	f00a ff37 	bl	800cf6c <iprintf>
	printf("*************************\r\n");
 80020fe:	480d      	ldr	r0, [pc, #52]	; (8002134 <StartDefaultTask+0x170>)
 8002100:	f00a ffba 	bl	800d078 <puts>
	ak8963_WhoAmI = mpu_r_ak8963_WhoAmI(&mpu);
 8002104:	e765      	b.n	8001fd2 <StartDefaultTask+0xe>
 8002106:	bf00      	nop
 8002108:	0800f780 	.word	0x0800f780
 800210c:	2400061c 	.word	0x2400061c
 8002110:	24000618 	.word	0x24000618
 8002114:	24000619 	.word	0x24000619
 8002118:	0800f794 	.word	0x0800f794
 800211c:	0800f7b4 	.word	0x0800f7b4
 8002120:	0800f7cc 	.word	0x0800f7cc
 8002124:	0800f7e8 	.word	0x0800f7e8
 8002128:	0800f800 	.word	0x0800f800
 800212c:	0800f81c 	.word	0x0800f81c
 8002130:	0800f834 	.word	0x0800f834
 8002134:	0800f850 	.word	0x0800f850

08002138 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a04      	ldr	r2, [pc, #16]	; (8002158 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d101      	bne.n	800214e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800214a:	f000 ffeb 	bl	8003124 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800214e:	bf00      	nop
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40001400 	.word	0x40001400

0800215c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002160:	b672      	cpsid	i
}
 8002162:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002164:	e7fe      	b.n	8002164 <Error_Handler+0x8>

08002166 <spi_wr_byte>:
/*
 * @brief   write a byte through SPI and read feedback
 * @param   byte: byte to write
 * @return  received byte
 * */
static uint8_t spi_wr_byte(SPI_HandleTypeDef *hspi, uint8_t byte) {
 8002166:	b580      	push	{r7, lr}
 8002168:	b086      	sub	sp, #24
 800216a:	af02      	add	r7, sp, #8
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	460b      	mov	r3, r1
 8002170:	70fb      	strb	r3, [r7, #3]
	uint8_t feedback = 0;
 8002172:	2300      	movs	r3, #0
 8002174:	73fb      	strb	r3, [r7, #15]

	// wait SPI serial free
	while (HAL_SPI_GetState(hspi) == HAL_SPI_STATE_BUSY_TX_RX)
 8002176:	bf00      	nop
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f005 f8d9 	bl	8007330 <HAL_SPI_GetState>
 800217e:	4603      	mov	r3, r0
 8002180:	2b05      	cmp	r3, #5
 8002182:	d0f9      	beq.n	8002178 <spi_wr_byte+0x12>
		;

	if (HAL_SPI_TransmitReceive(hspi, &byte, &feedback, 1, 0x01f4) != HAL_OK) {
 8002184:	f107 020f 	add.w	r2, r7, #15
 8002188:	1cf9      	adds	r1, r7, #3
 800218a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	2301      	movs	r3, #1
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f004 fea4 	bl	8006ee0 <HAL_SPI_TransmitReceive>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <spi_wr_byte+0x3c>
		return 0xff;
 800219e:	23ff      	movs	r3, #255	; 0xff
 80021a0:	e000      	b.n	80021a4 <spi_wr_byte+0x3e>
	}

	return feedback;
 80021a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <spi_w_bytes>:
 * @param   address: address of the first reg
 * @param   bytes: number of bytes to write
 * @param   num: number of bytes
 * */
static void spi_w_bytes(SPI_HandleTypeDef *hspi, uint8_t address,
		uint8_t *bytes, uint16_t num) {
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	607a      	str	r2, [r7, #4]
 80021b6:	461a      	mov	r2, r3
 80021b8:	460b      	mov	r3, r1
 80021ba:	72fb      	strb	r3, [r7, #11]
 80021bc:	4613      	mov	r3, r2
 80021be:	813b      	strh	r3, [r7, #8]
	mpu_select();
 80021c0:	2200      	movs	r2, #0
 80021c2:	2110      	movs	r1, #16
 80021c4:	4814      	ldr	r0, [pc, #80]	; (8002218 <spi_w_bytes+0x6c>)
 80021c6:	f001 fdf1 	bl	8003dac <HAL_GPIO_WritePin>

	spi_wr_byte(hspi, address);
 80021ca:	7afb      	ldrb	r3, [r7, #11]
 80021cc:	4619      	mov	r1, r3
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f7ff ffc9 	bl	8002166 <spi_wr_byte>
	for (i = 0; i < num; i++)
 80021d4:	4b11      	ldr	r3, [pc, #68]	; (800221c <spi_w_bytes+0x70>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	801a      	strh	r2, [r3, #0]
 80021da:	e00f      	b.n	80021fc <spi_w_bytes+0x50>
		spi_wr_byte(hspi, bytes[i]);
 80021dc:	4b0f      	ldr	r3, [pc, #60]	; (800221c <spi_w_bytes+0x70>)
 80021de:	881b      	ldrh	r3, [r3, #0]
 80021e0:	461a      	mov	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4413      	add	r3, r2
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	4619      	mov	r1, r3
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f7ff ffbb 	bl	8002166 <spi_wr_byte>
	for (i = 0; i < num; i++)
 80021f0:	4b0a      	ldr	r3, [pc, #40]	; (800221c <spi_w_bytes+0x70>)
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	3301      	adds	r3, #1
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	4b08      	ldr	r3, [pc, #32]	; (800221c <spi_w_bytes+0x70>)
 80021fa:	801a      	strh	r2, [r3, #0]
 80021fc:	4b07      	ldr	r3, [pc, #28]	; (800221c <spi_w_bytes+0x70>)
 80021fe:	881b      	ldrh	r3, [r3, #0]
 8002200:	893a      	ldrh	r2, [r7, #8]
 8002202:	429a      	cmp	r2, r3
 8002204:	d8ea      	bhi.n	80021dc <spi_w_bytes+0x30>

	mpu_deselect();
 8002206:	2201      	movs	r2, #1
 8002208:	2110      	movs	r1, #16
 800220a:	4803      	ldr	r0, [pc, #12]	; (8002218 <spi_w_bytes+0x6c>)
 800220c:	f001 fdce 	bl	8003dac <HAL_GPIO_WritePin>
}
 8002210:	bf00      	nop
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	58021000 	.word	0x58021000
 800221c:	24000664 	.word	0x24000664

08002220 <spi_r_bytes>:
 * @brief   read several bytes through spi
 * @param   address: address of the first reg
 * @param   num: number of bytes to read, number < DATABUF_SIZ
 * @return  data read array
 * */
static void spi_r_bytes(SPI_HandleTypeDef *hspi, uint8_t address, uint8_t num) {
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	460b      	mov	r3, r1
 800222a:	70fb      	strb	r3, [r7, #3]
 800222c:	4613      	mov	r3, r2
 800222e:	70bb      	strb	r3, [r7, #2]
	uint8_t _address = address | 0x80;
 8002230:	78fb      	ldrb	r3, [r7, #3]
 8002232:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002236:	b2db      	uxtb	r3, r3
 8002238:	73fb      	strb	r3, [r7, #15]

	mpu_select();
 800223a:	2200      	movs	r2, #0
 800223c:	2110      	movs	r1, #16
 800223e:	480e      	ldr	r0, [pc, #56]	; (8002278 <spi_r_bytes+0x58>)
 8002240:	f001 fdb4 	bl	8003dac <HAL_GPIO_WritePin>

	// may be can use HAL_SPI_TransmitReceive()
	HAL_SPI_Transmit(hspi, &_address, 1, 0x01f4);
 8002244:	f107 010f 	add.w	r1, r7, #15
 8002248:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800224c:	2201      	movs	r2, #1
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f004 fab8 	bl	80067c4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, dataBuf, num, 0x01f4); // store read data to dataBuf
 8002254:	78bb      	ldrb	r3, [r7, #2]
 8002256:	b29a      	uxth	r2, r3
 8002258:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800225c:	4907      	ldr	r1, [pc, #28]	; (800227c <spi_r_bytes+0x5c>)
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f004 fca2 	bl	8006ba8 <HAL_SPI_Receive>

	mpu_deselect();
 8002264:	2201      	movs	r2, #1
 8002266:	2110      	movs	r1, #16
 8002268:	4803      	ldr	r0, [pc, #12]	; (8002278 <spi_r_bytes+0x58>)
 800226a:	f001 fd9f 	bl	8003dac <HAL_GPIO_WritePin>

}
 800226e:	bf00      	nop
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	58021000 	.word	0x58021000
 800227c:	24000654 	.word	0x24000654

08002280 <mpu_w_reg>:
/*
 * @brief   write mpu9250 reg through spi
 * @param   address: address of reg to write
 * @param   byte: byte to write
 * */
static void mpu_w_reg(uint8_t address, uint8_t byte) {
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	460a      	mov	r2, r1
 800228a:	71fb      	strb	r3, [r7, #7]
 800228c:	4613      	mov	r3, r2
 800228e:	71bb      	strb	r3, [r7, #6]
	spi_w_bytes(&MPU9250_SPI, address, &byte, 1);
 8002290:	1dba      	adds	r2, r7, #6
 8002292:	79f9      	ldrb	r1, [r7, #7]
 8002294:	2301      	movs	r3, #1
 8002296:	4803      	ldr	r0, [pc, #12]	; (80022a4 <mpu_w_reg+0x24>)
 8002298:	f7ff ff88 	bl	80021ac <spi_w_bytes>
}
 800229c:	bf00      	nop
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	24000464 	.word	0x24000464

080022a8 <mpu_r_regs>:
 * @brief   read mpu9250 regs through spi
 * @param   address: address of reg to write
 * @param   num: number of byte to read
 * @return  read bytes array
 * */
static void mpu_r_regs(uint8_t address, uint8_t num) {
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	460a      	mov	r2, r1
 80022b2:	71fb      	strb	r3, [r7, #7]
 80022b4:	4613      	mov	r3, r2
 80022b6:	71bb      	strb	r3, [r7, #6]
	spi_r_bytes(&MPU9250_SPI, address, num);
 80022b8:	79ba      	ldrb	r2, [r7, #6]
 80022ba:	79fb      	ldrb	r3, [r7, #7]
 80022bc:	4619      	mov	r1, r3
 80022be:	4803      	ldr	r0, [pc, #12]	; (80022cc <mpu_r_regs+0x24>)
 80022c0:	f7ff ffae 	bl	8002220 <spi_r_bytes>
}
 80022c4:	bf00      	nop
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	24000464 	.word	0x24000464

080022d0 <mpu_w_ak8963_reg>:
/*
 * @brief   write AK8963 regs through I2C in MPU9250
 * @param   address: address of AK8963 reg to write
 * @param   byte: byte to write
 * */
static void mpu_w_ak8963_reg(uint8_t address, uint8_t byte) {
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	460a      	mov	r2, r1
 80022da:	71fb      	strb	r3, [r7, #7]
 80022dc:	4613      	mov	r3, r2
 80022de:	71bb      	strb	r3, [r7, #6]
	mpu_w_reg(I2C_SLV0_ADDR, AK8963_I2C_ADDR);
 80022e0:	210c      	movs	r1, #12
 80022e2:	2025      	movs	r0, #37	; 0x25
 80022e4:	f7ff ffcc 	bl	8002280 <mpu_w_reg>
	mpu_w_reg(I2C_SLV0_REG, address);
 80022e8:	79fb      	ldrb	r3, [r7, #7]
 80022ea:	4619      	mov	r1, r3
 80022ec:	2026      	movs	r0, #38	; 0x26
 80022ee:	f7ff ffc7 	bl	8002280 <mpu_w_reg>
	mpu_w_reg(I2C_SLV0_DO, byte);
 80022f2:	79bb      	ldrb	r3, [r7, #6]
 80022f4:	4619      	mov	r1, r3
 80022f6:	2063      	movs	r0, #99	; 0x63
 80022f8:	f7ff ffc2 	bl	8002280 <mpu_w_reg>
	mpu_w_reg(I2C_SLV0_CTRL, 0x81);
 80022fc:	2181      	movs	r1, #129	; 0x81
 80022fe:	2027      	movs	r0, #39	; 0x27
 8002300:	f7ff ffbe 	bl	8002280 <mpu_w_reg>
}
 8002304:	bf00      	nop
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <mpu_r_ak8963_regs>:
 * @brief read AK8963 regs through I2C in MPU9250
 * @param   address: first address of AK8963 regs to read
 * @param   num: number of byte to read
 * @return  read bytes array
 * */
static void mpu_r_ak8963_regs(uint8_t address, uint8_t num) {
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	460a      	mov	r2, r1
 8002316:	71fb      	strb	r3, [r7, #7]
 8002318:	4613      	mov	r3, r2
 800231a:	71bb      	strb	r3, [r7, #6]
	mpu_w_reg(I2C_SLV0_ADDR, AK8963_I2C_ADDR | 0x80);
 800231c:	218c      	movs	r1, #140	; 0x8c
 800231e:	2025      	movs	r0, #37	; 0x25
 8002320:	f7ff ffae 	bl	8002280 <mpu_w_reg>
	mpu_w_reg(I2C_SLV0_REG, address);
 8002324:	79fb      	ldrb	r3, [r7, #7]
 8002326:	4619      	mov	r1, r3
 8002328:	2026      	movs	r0, #38	; 0x26
 800232a:	f7ff ffa9 	bl	8002280 <mpu_w_reg>
	mpu_w_reg(I2C_SLV0_CTRL, 0x80 | num);
 800232e:	79bb      	ldrb	r3, [r7, #6]
 8002330:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002334:	b2db      	uxtb	r3, r3
 8002336:	4619      	mov	r1, r3
 8002338:	2027      	movs	r0, #39	; 0x27
 800233a:	f7ff ffa1 	bl	8002280 <mpu_w_reg>
	HAL_Delay(1);
 800233e:	2001      	movs	r0, #1
 8002340:	f000 ff10 	bl	8003164 <HAL_Delay>
	mpu_r_regs(EXT_SENS_DATA_00, num);
 8002344:	79bb      	ldrb	r3, [r7, #6]
 8002346:	4619      	mov	r1, r3
 8002348:	2049      	movs	r0, #73	; 0x49
 800234a:	f7ff ffad 	bl	80022a8 <mpu_r_regs>
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
	...

08002358 <mpu_r_ak8963_WhoAmI>:
/*
 * @brief   read ak8963 WHO_AM_I reg
 * @return  AK8963 WHO_AM_I value, expected to be 0x48
 * */
uint8_t mpu_r_ak8963_WhoAmI(MPU9250 *mpu) {
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
	mpu_r_ak8963_regs(AK8963_WHOAMI_REG, 1);
 8002360:	2101      	movs	r1, #1
 8002362:	2000      	movs	r0, #0
 8002364:	f7ff ffd2 	bl	800230c <mpu_r_ak8963_regs>
	return dataBuf[0];
 8002368:	4b02      	ldr	r3, [pc, #8]	; (8002374 <mpu_r_ak8963_WhoAmI+0x1c>)
 800236a:	781b      	ldrb	r3, [r3, #0]
}
 800236c:	4618      	mov	r0, r3
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	24000654 	.word	0x24000654

08002378 <mpu_r_WhoAmI>:
/*
 * @brief   read mpu9250(mpu6500) WHO_AM_I reg
 * @return  mpu9250(mpu6500) WHO_AM_I value, expected to be 0x48
 * */
uint8_t mpu_r_WhoAmI(MPU9250 *mpu) {
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
	mpu_r_regs(WHO_AM_I, 1);
 8002380:	2101      	movs	r1, #1
 8002382:	2075      	movs	r0, #117	; 0x75
 8002384:	f7ff ff90 	bl	80022a8 <mpu_r_regs>
	return dataBuf[0];
 8002388:	4b02      	ldr	r3, [pc, #8]	; (8002394 <mpu_r_WhoAmI+0x1c>)
 800238a:	781b      	ldrb	r3, [r3, #0]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	24000654 	.word	0x24000654

08002398 <MPU9250_StructInit>:
/*
 * @brief   init origin data
 * */
static void MPU9250_StructInit(MPU9250 *mpu) {
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]

	for (uint8_t i = 0; i < 3; i++) {
 80023a0:	2300      	movs	r3, #0
 80023a2:	73fb      	strb	r3, [r7, #15]
 80023a4:	e02e      	b.n	8002404 <MPU9250_StructInit+0x6c>
		mpu->mpu_data.Accel[i] = 0;
 80023a6:	7bfb      	ldrb	r3, [r7, #15]
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	3304      	adds	r3, #4
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	3304      	adds	r3, #4
 80023b2:	f04f 0200 	mov.w	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
		mpu->mpu_data.Gyro[i] = 0;
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	3308      	adds	r3, #8
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	f04f 0200 	mov.w	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
		mpu->mpu_data.Magn[i] = 0;
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	330a      	adds	r3, #10
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	3304      	adds	r3, #4
 80023d4:	f04f 0200 	mov.w	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]

		mpu->mpu_data.Accel_row[i] = 0;
 80023da:	7bfa      	ldrb	r2, [r7, #15]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2100      	movs	r1, #0
 80023e0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		mpu->mpu_data.Gyro_row[i] = 0;
 80023e4:	7bfb      	ldrb	r3, [r7, #15]
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	4413      	add	r3, r2
 80023ec:	2200      	movs	r2, #0
 80023ee:	80da      	strh	r2, [r3, #6]
		mpu->mpu_data.Magn_row[i] = 0.0;
 80023f0:	7bfb      	ldrb	r3, [r7, #15]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	3304      	adds	r3, #4
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	4413      	add	r3, r2
 80023fa:	2200      	movs	r2, #0
 80023fc:	809a      	strh	r2, [r3, #4]
	for (uint8_t i = 0; i < 3; i++) {
 80023fe:	7bfb      	ldrb	r3, [r7, #15]
 8002400:	3301      	adds	r3, #1
 8002402:	73fb      	strb	r3, [r7, #15]
 8002404:	7bfb      	ldrb	r3, [r7, #15]
 8002406:	2b02      	cmp	r3, #2
 8002408:	d9cd      	bls.n	80023a6 <MPU9250_StructInit+0xe>
	}
}
 800240a:	bf00      	nop
 800240c:	bf00      	nop
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <MPU9250_Init>:
/*
 * @brief   init mpu9250
 * */
uint8_t MPU9250_Init(MPU9250 *mpu) {
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
	MPU9250_StructInit(mpu);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7ff ffb9 	bl	8002398 <MPU9250_StructInit>

	mpu_w_reg(PWR_MGMT_1, (uint8_t) 0x80); // reset MPU9250, reg107
 8002426:	2180      	movs	r1, #128	; 0x80
 8002428:	206b      	movs	r0, #107	; 0x6b
 800242a:	f7ff ff29 	bl	8002280 <mpu_w_reg>
	HAL_Delay(10);
 800242e:	200a      	movs	r0, #10
 8002430:	f000 fe98 	bl	8003164 <HAL_Delay>
	mpu_w_reg(USER_CTRL, (uint8_t) 0x20); // enable I2C master mode, reg106
 8002434:	2120      	movs	r1, #32
 8002436:	206a      	movs	r0, #106	; 0x6a
 8002438:	f7ff ff22 	bl	8002280 <mpu_w_reg>
	mpu_w_reg(I2C_MST_CTRL, (uint8_t) 0x0D); // set I2C clock speed to 400kHz, reg36
 800243c:	210d      	movs	r1, #13
 800243e:	2024      	movs	r0, #36	; 0x24
 8002440:	f7ff ff1e 	bl	8002280 <mpu_w_reg>
	mpu_w_ak8963_reg(AK8963_CNTL1_REG, (uint8_t) 0x00); // set AK8963 to power down
 8002444:	2100      	movs	r1, #0
 8002446:	200a      	movs	r0, #10
 8002448:	f7ff ff42 	bl	80022d0 <mpu_w_ak8963_reg>
	mpu_w_reg(PWR_MGMT_1, (uint8_t) 0x80); // reset MPU9250, Bit[7] will auto clear
 800244c:	2180      	movs	r1, #128	; 0x80
 800244e:	206b      	movs	r0, #107	; 0x6b
 8002450:	f7ff ff16 	bl	8002280 <mpu_w_reg>
	HAL_Delay(10);
 8002454:	200a      	movs	r0, #10
 8002456:	f000 fe85 	bl	8003164 <HAL_Delay>
	mpu_w_ak8963_reg(AK8963_CNTL2_REG, AK8963_CNTL2_SRST); // reset AK8963
 800245a:	2101      	movs	r1, #1
 800245c:	200b      	movs	r0, #11
 800245e:	f7ff ff37 	bl	80022d0 <mpu_w_ak8963_reg>
	mpu_w_reg(PWR_MGMT_1, (uint8_t) 0x01); // select clock source
 8002462:	2101      	movs	r1, #1
 8002464:	206b      	movs	r0, #107	; 0x6b
 8002466:	f7ff ff0b 	bl	8002280 <mpu_w_reg>
	mpu_w_reg(PWR_MGMT_2, (uint8_t) 0x00); // enable accel and gyro
 800246a:	2100      	movs	r1, #0
 800246c:	206c      	movs	r0, #108	; 0x6c
 800246e:	f7ff ff07 	bl	8002280 <mpu_w_reg>

	/* init GYRO and ACCEL */
	mpu_w_reg(SMPLRT_DIV, (uint8_t) 0x00); // SAMPLE_RATE= Internal_Sample_Rate / (1 + SMPLRT_DIV), Internal_Sample_Rate==8K
 8002472:	2100      	movs	r1, #0
 8002474:	2019      	movs	r0, #25
 8002476:	f7ff ff03 	bl	8002280 <mpu_w_reg>
	mpu_w_reg(GYRO_CONFIG, (uint8_t) MPU9250_Gyro_Range_2000dps); // gyro full scale select
 800247a:	2118      	movs	r1, #24
 800247c:	201b      	movs	r0, #27
 800247e:	f7ff feff 	bl	8002280 <mpu_w_reg>
	mpu_w_reg(ACCEL_CONFIG, (uint8_t) MPU9250_Accel_Range_16G); // accel full scale select
 8002482:	2118      	movs	r1, #24
 8002484:	201c      	movs	r0, #28
 8002486:	f7ff fefb 	bl	8002280 <mpu_w_reg>
	mpu_w_reg(ACCEL_CONFIG_2, (uint8_t) MPU9250_Accel_DLPFBandwidth_460);
 800248a:	2100      	movs	r1, #0
 800248c:	201d      	movs	r0, #29
 800248e:	f7ff fef7 	bl	8002280 <mpu_w_reg>
	mpu_w_reg(CONFIG, (uint8_t) MPU9250_Gyro_DLPFBandwidth_250);
 8002492:	2100      	movs	r1, #0
 8002494:	201a      	movs	r0, #26
 8002496:	f7ff fef3 	bl	8002280 <mpu_w_reg>
	/* init MAG */
	mpu_w_reg(USER_CTRL, (uint8_t) 0x20); // enable I2C master mode
 800249a:	2120      	movs	r1, #32
 800249c:	206a      	movs	r0, #106	; 0x6a
 800249e:	f7ff feef 	bl	8002280 <mpu_w_reg>
	mpu_w_reg(I2C_MST_CTRL, (uint8_t) 0x0D); // set I2C clock speed to 400kHz, reg36
 80024a2:	210d      	movs	r1, #13
 80024a4:	2024      	movs	r0, #36	; 0x24
 80024a6:	f7ff feeb 	bl	8002280 <mpu_w_reg>
	mpu_w_ak8963_reg(AK8963_CNTL1_REG, (uint8_t) 0x00); // set AK8963 to power down
 80024aa:	2100      	movs	r1, #0
 80024ac:	200a      	movs	r0, #10
 80024ae:	f7ff ff0f 	bl	80022d0 <mpu_w_ak8963_reg>
	HAL_Delay(100);
 80024b2:	2064      	movs	r0, #100	; 0x64
 80024b4:	f000 fe56 	bl	8003164 <HAL_Delay>
	mpu_w_ak8963_reg(AK8963_CNTL1_REG, (uint8_t) 0x0f); // set AK8963 to Fuse ROM access mode
 80024b8:	210f      	movs	r1, #15
 80024ba:	200a      	movs	r0, #10
 80024bc:	f7ff ff08 	bl	80022d0 <mpu_w_ak8963_reg>
	HAL_Delay(100);
 80024c0:	2064      	movs	r0, #100	; 0x64
 80024c2:	f000 fe4f 	bl	8003164 <HAL_Delay>
	mpu_w_ak8963_reg(AK8963_CNTL1_REG, (uint8_t) 0x00); // set AK8963 to power down
 80024c6:	2100      	movs	r1, #0
 80024c8:	200a      	movs	r0, #10
 80024ca:	f7ff ff01 	bl	80022d0 <mpu_w_ak8963_reg>
	HAL_Delay(100);
 80024ce:	2064      	movs	r0, #100	; 0x64
 80024d0:	f000 fe48 	bl	8003164 <HAL_Delay>
	mpu_w_ak8963_reg(AK8963_CNTL1_REG, (uint8_t) 0x16); // AK8963 working on Continuous measurement mode 2 & 16-bit output
 80024d4:	2116      	movs	r1, #22
 80024d6:	200a      	movs	r0, #10
 80024d8:	f7ff fefa 	bl	80022d0 <mpu_w_ak8963_reg>
	HAL_Delay(100);
 80024dc:	2064      	movs	r0, #100	; 0x64
 80024de:	f000 fe41 	bl	8003164 <HAL_Delay>
	mpu_w_reg(PWR_MGMT_1, (uint8_t) 0x01); // select clock source
 80024e2:	2101      	movs	r1, #1
 80024e4:	206b      	movs	r0, #107	; 0x6b
 80024e6:	f7ff fecb 	bl	8002280 <mpu_w_reg>
	mpu_r_ak8963_regs(MAG_XOUT_L, 7);
 80024ea:	2107      	movs	r1, #7
 80024ec:	2003      	movs	r0, #3
 80024ee:	f7ff ff0d 	bl	800230c <mpu_r_ak8963_regs>

	return 0x00;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	0000      	movs	r0, r0
	...

08002500 <MPU9250_ReadAccel>:
/*
 * @brief   read accel origin value and calculate real value
 *          data will be stored in mpu
 * */
void MPU9250_ReadAccel(MPU9250 *mpu) {
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
	// m/s
	mpu_r_regs(ACCEL_XOUT_H, 6);
 8002508:	2106      	movs	r1, #6
 800250a:	203b      	movs	r0, #59	; 0x3b
 800250c:	f7ff fecc 	bl	80022a8 <mpu_r_regs>
	// calculate x axis
	mpu->mpu_data.Accel_row[0] = ((int16_t)dataBuf[0] << 8) | dataBuf[1];
 8002510:	4b2f      	ldr	r3, [pc, #188]	; (80025d0 <MPU9250_ReadAccel+0xd0>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	021b      	lsls	r3, r3, #8
 8002516:	b21a      	sxth	r2, r3
 8002518:	4b2d      	ldr	r3, [pc, #180]	; (80025d0 <MPU9250_ReadAccel+0xd0>)
 800251a:	785b      	ldrb	r3, [r3, #1]
 800251c:	b21b      	sxth	r3, r3
 800251e:	4313      	orrs	r3, r2
 8002520:	b21a      	sxth	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	801a      	strh	r2, [r3, #0]
	mpu->mpu_data.Accel[0] = (float) mpu->mpu_data.Accel_row[0] / 208.980;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	b21b      	sxth	r3, r3
 800252c:	ee07 3a90 	vmov	s15, r3
 8002530:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002534:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002538:	ed9f 5b23 	vldr	d5, [pc, #140]	; 80025c8 <MPU9250_ReadAccel+0xc8>
 800253c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002540:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	edc3 7a05 	vstr	s15, [r3, #20]

	// calculate y axis
	mpu->mpu_data.Accel_row[1] = ((int16_t)dataBuf[2] << 8) | dataBuf[3];
 800254a:	4b21      	ldr	r3, [pc, #132]	; (80025d0 <MPU9250_ReadAccel+0xd0>)
 800254c:	789b      	ldrb	r3, [r3, #2]
 800254e:	021b      	lsls	r3, r3, #8
 8002550:	b21a      	sxth	r2, r3
 8002552:	4b1f      	ldr	r3, [pc, #124]	; (80025d0 <MPU9250_ReadAccel+0xd0>)
 8002554:	78db      	ldrb	r3, [r3, #3]
 8002556:	b21b      	sxth	r3, r3
 8002558:	4313      	orrs	r3, r2
 800255a:	b21a      	sxth	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	805a      	strh	r2, [r3, #2]
	mpu->mpu_data.Accel[1] = (float) mpu->mpu_data.Accel_row[1] / 208.980;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	885b      	ldrh	r3, [r3, #2]
 8002564:	b21b      	sxth	r3, r3
 8002566:	ee07 3a90 	vmov	s15, r3
 800256a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800256e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002572:	ed9f 5b15 	vldr	d5, [pc, #84]	; 80025c8 <MPU9250_ReadAccel+0xc8>
 8002576:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800257a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	edc3 7a06 	vstr	s15, [r3, #24]

	// calculate z axis
	mpu->mpu_data.Accel_row[2] = ((int16_t)dataBuf[4] << 8) | dataBuf[5];
 8002584:	4b12      	ldr	r3, [pc, #72]	; (80025d0 <MPU9250_ReadAccel+0xd0>)
 8002586:	791b      	ldrb	r3, [r3, #4]
 8002588:	021b      	lsls	r3, r3, #8
 800258a:	b21a      	sxth	r2, r3
 800258c:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <MPU9250_ReadAccel+0xd0>)
 800258e:	795b      	ldrb	r3, [r3, #5]
 8002590:	b21b      	sxth	r3, r3
 8002592:	4313      	orrs	r3, r2
 8002594:	b21a      	sxth	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	809a      	strh	r2, [r3, #4]
	mpu->mpu_data.Accel[2] = (float) mpu->mpu_data.Accel_row[2] / 208.980;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	889b      	ldrh	r3, [r3, #4]
 800259e:	b21b      	sxth	r3, r3
 80025a0:	ee07 3a90 	vmov	s15, r3
 80025a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025a8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80025ac:	ed9f 5b06 	vldr	d5, [pc, #24]	; 80025c8 <MPU9250_ReadAccel+0xc8>
 80025b0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80025b4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	28f5c28f 	.word	0x28f5c28f
 80025cc:	406a1f5c 	.word	0x406a1f5c
 80025d0:	24000654 	.word	0x24000654
 80025d4:	00000000 	.word	0x00000000

080025d8 <MPU9250_ReadGyro>:
/*
 * @brief   read gyro origin value and calculate real value
 *          data will be stored in mpu
 * */
void MPU9250_ReadGyro(MPU9250 *mpu) {
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
	// d/s
	mpu_r_regs(GYRO_XOUT_H, 6);
 80025e0:	2106      	movs	r1, #6
 80025e2:	2043      	movs	r0, #67	; 0x43
 80025e4:	f7ff fe60 	bl	80022a8 <mpu_r_regs>
	// calculate x axis
	mpu->mpu_data.Gyro_row[0] = ((int16_t)dataBuf[0] << 8) | dataBuf[1];
 80025e8:	4b2d      	ldr	r3, [pc, #180]	; (80026a0 <MPU9250_ReadGyro+0xc8>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	021b      	lsls	r3, r3, #8
 80025ee:	b21a      	sxth	r2, r3
 80025f0:	4b2b      	ldr	r3, [pc, #172]	; (80026a0 <MPU9250_ReadGyro+0xc8>)
 80025f2:	785b      	ldrb	r3, [r3, #1]
 80025f4:	b21b      	sxth	r3, r3
 80025f6:	4313      	orrs	r3, r2
 80025f8:	b21a      	sxth	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	80da      	strh	r2, [r3, #6]
	mpu->mpu_data.Gyro[0] = mpu->mpu_data.Gyro_row[0] / 16.384;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	88db      	ldrh	r3, [r3, #6]
 8002602:	b21b      	sxth	r3, r3
 8002604:	ee07 3a90 	vmov	s15, r3
 8002608:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800260c:	ed9f 5b22 	vldr	d5, [pc, #136]	; 8002698 <MPU9250_ReadGyro+0xc0>
 8002610:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002614:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	edc3 7a08 	vstr	s15, [r3, #32]

	// calculate y axis
	mpu->mpu_data.Gyro_row[1] = ((int16_t)dataBuf[2] << 8) | dataBuf[3];
 800261e:	4b20      	ldr	r3, [pc, #128]	; (80026a0 <MPU9250_ReadGyro+0xc8>)
 8002620:	789b      	ldrb	r3, [r3, #2]
 8002622:	021b      	lsls	r3, r3, #8
 8002624:	b21a      	sxth	r2, r3
 8002626:	4b1e      	ldr	r3, [pc, #120]	; (80026a0 <MPU9250_ReadGyro+0xc8>)
 8002628:	78db      	ldrb	r3, [r3, #3]
 800262a:	b21b      	sxth	r3, r3
 800262c:	4313      	orrs	r3, r2
 800262e:	b21a      	sxth	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	811a      	strh	r2, [r3, #8]
	mpu->mpu_data.Gyro[1] = mpu->mpu_data.Gyro_row[1] / 16.384;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	891b      	ldrh	r3, [r3, #8]
 8002638:	b21b      	sxth	r3, r3
 800263a:	ee07 3a90 	vmov	s15, r3
 800263e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002642:	ed9f 5b15 	vldr	d5, [pc, #84]	; 8002698 <MPU9250_ReadGyro+0xc0>
 8002646:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800264a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	// calculate z axis
	mpu->mpu_data.Gyro_row[2] = ((int16_t)dataBuf[4] << 8) | dataBuf[5];
 8002654:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <MPU9250_ReadGyro+0xc8>)
 8002656:	791b      	ldrb	r3, [r3, #4]
 8002658:	021b      	lsls	r3, r3, #8
 800265a:	b21a      	sxth	r2, r3
 800265c:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <MPU9250_ReadGyro+0xc8>)
 800265e:	795b      	ldrb	r3, [r3, #5]
 8002660:	b21b      	sxth	r3, r3
 8002662:	4313      	orrs	r3, r2
 8002664:	b21a      	sxth	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	815a      	strh	r2, [r3, #10]
	mpu->mpu_data.Gyro[2] = mpu->mpu_data.Gyro_row[2] / 16.384;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	895b      	ldrh	r3, [r3, #10]
 800266e:	b21b      	sxth	r3, r3
 8002670:	ee07 3a90 	vmov	s15, r3
 8002674:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002678:	ed9f 5b07 	vldr	d5, [pc, #28]	; 8002698 <MPU9250_ReadGyro+0xc0>
 800267c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002680:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	f3af 8000 	nop.w
 8002698:	d2f1a9fc 	.word	0xd2f1a9fc
 800269c:	4030624d 	.word	0x4030624d
 80026a0:	24000654 	.word	0x24000654
 80026a4:	00000000 	.word	0x00000000

080026a8 <MPU9250_ReadMag>:
/*
 * @brief   read mag origin value and calculate real value
 *          data will be stored in mpu
 * */
void MPU9250_ReadMag(MPU9250 *mpu) {
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
	uint8_t mag_adjust[3] = { 0 };
 80026b0:	4b85      	ldr	r3, [pc, #532]	; (80028c8 <MPU9250_ReadMag+0x220>)
 80026b2:	881b      	ldrh	r3, [r3, #0]
 80026b4:	82bb      	strh	r3, [r7, #20]
 80026b6:	2300      	movs	r3, #0
 80026b8:	75bb      	strb	r3, [r7, #22]
	uint8_t mag_buffer[6] = { 0 };
 80026ba:	2300      	movs	r3, #0
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	2300      	movs	r3, #0
 80026c0:	823b      	strh	r3, [r7, #16]

	mpu_r_ak8963_regs(AK8963_ASAX, 3);
 80026c2:	2103      	movs	r1, #3
 80026c4:	2010      	movs	r0, #16
 80026c6:	f7ff fe21 	bl	800230c <mpu_r_ak8963_regs>
	mag_adjust[0] = dataBuf[0];
 80026ca:	4b80      	ldr	r3, [pc, #512]	; (80028cc <MPU9250_ReadMag+0x224>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	753b      	strb	r3, [r7, #20]
	mag_adjust[1] = dataBuf[1];
 80026d0:	4b7e      	ldr	r3, [pc, #504]	; (80028cc <MPU9250_ReadMag+0x224>)
 80026d2:	785b      	ldrb	r3, [r3, #1]
 80026d4:	757b      	strb	r3, [r7, #21]
	mag_adjust[2] = dataBuf[2];
 80026d6:	4b7d      	ldr	r3, [pc, #500]	; (80028cc <MPU9250_ReadMag+0x224>)
 80026d8:	789b      	ldrb	r3, [r3, #2]
 80026da:	75bb      	strb	r3, [r7, #22]

	// read AK8963_ST2_REG is necessary
	// ST2 register has a role as data reading end register(on page 51)

	mpu_r_ak8963_regs(MAG_XOUT_L, 1);
 80026dc:	2101      	movs	r1, #1
 80026de:	2003      	movs	r0, #3
 80026e0:	f7ff fe14 	bl	800230c <mpu_r_ak8963_regs>
	mag_buffer[0] = dataBuf[0];
 80026e4:	4b79      	ldr	r3, [pc, #484]	; (80028cc <MPU9250_ReadMag+0x224>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	733b      	strb	r3, [r7, #12]
	mpu_r_ak8963_regs(AK8963_ST2_REG, 1); // data read finish reg
 80026ea:	2101      	movs	r1, #1
 80026ec:	2009      	movs	r0, #9
 80026ee:	f7ff fe0d 	bl	800230c <mpu_r_ak8963_regs>
	mpu_r_ak8963_regs(MAG_XOUT_H, 1);
 80026f2:	2101      	movs	r1, #1
 80026f4:	2004      	movs	r0, #4
 80026f6:	f7ff fe09 	bl	800230c <mpu_r_ak8963_regs>
	mag_buffer[1] = dataBuf[0];
 80026fa:	4b74      	ldr	r3, [pc, #464]	; (80028cc <MPU9250_ReadMag+0x224>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	737b      	strb	r3, [r7, #13]
	mpu_r_ak8963_regs(AK8963_ST2_REG, 1);
 8002700:	2101      	movs	r1, #1
 8002702:	2009      	movs	r0, #9
 8002704:	f7ff fe02 	bl	800230c <mpu_r_ak8963_regs>

	mpu_r_ak8963_regs(MAG_YOUT_L, 1);
 8002708:	2101      	movs	r1, #1
 800270a:	2005      	movs	r0, #5
 800270c:	f7ff fdfe 	bl	800230c <mpu_r_ak8963_regs>
	mag_buffer[2] = dataBuf[0];
 8002710:	4b6e      	ldr	r3, [pc, #440]	; (80028cc <MPU9250_ReadMag+0x224>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	73bb      	strb	r3, [r7, #14]
	mpu_r_ak8963_regs(AK8963_ST2_REG, 1);
 8002716:	2101      	movs	r1, #1
 8002718:	2009      	movs	r0, #9
 800271a:	f7ff fdf7 	bl	800230c <mpu_r_ak8963_regs>
	mpu_r_ak8963_regs(MAG_YOUT_H, 1);
 800271e:	2101      	movs	r1, #1
 8002720:	2006      	movs	r0, #6
 8002722:	f7ff fdf3 	bl	800230c <mpu_r_ak8963_regs>
	mag_buffer[3] = dataBuf[0];
 8002726:	4b69      	ldr	r3, [pc, #420]	; (80028cc <MPU9250_ReadMag+0x224>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	73fb      	strb	r3, [r7, #15]
	mpu_r_ak8963_regs(AK8963_ST2_REG, 1);
 800272c:	2101      	movs	r1, #1
 800272e:	2009      	movs	r0, #9
 8002730:	f7ff fdec 	bl	800230c <mpu_r_ak8963_regs>

	mpu_r_ak8963_regs(MAG_ZOUT_L, 1);
 8002734:	2101      	movs	r1, #1
 8002736:	2007      	movs	r0, #7
 8002738:	f7ff fde8 	bl	800230c <mpu_r_ak8963_regs>
	mag_buffer[4] = dataBuf[0];
 800273c:	4b63      	ldr	r3, [pc, #396]	; (80028cc <MPU9250_ReadMag+0x224>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	743b      	strb	r3, [r7, #16]
	mpu_r_ak8963_regs(AK8963_ST2_REG, 1);
 8002742:	2101      	movs	r1, #1
 8002744:	2009      	movs	r0, #9
 8002746:	f7ff fde1 	bl	800230c <mpu_r_ak8963_regs>
	mpu_r_ak8963_regs(MAG_ZOUT_H, 1);
 800274a:	2101      	movs	r1, #1
 800274c:	2008      	movs	r0, #8
 800274e:	f7ff fddd 	bl	800230c <mpu_r_ak8963_regs>
	mag_buffer[5] = dataBuf[0];
 8002752:	4b5e      	ldr	r3, [pc, #376]	; (80028cc <MPU9250_ReadMag+0x224>)
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	747b      	strb	r3, [r7, #17]
	mpu_r_ak8963_regs(AK8963_ST2_REG, 1);
 8002758:	2101      	movs	r1, #1
 800275a:	2009      	movs	r0, #9
 800275c:	f7ff fdd6 	bl	800230c <mpu_r_ak8963_regs>


	mpu->mpu_data.Magn_row[0] = ((int16_t)mag_buffer[1] << 8) | mag_buffer[0];
 8002760:	7b7b      	ldrb	r3, [r7, #13]
 8002762:	021b      	lsls	r3, r3, #8
 8002764:	b21a      	sxth	r2, r3
 8002766:	7b3b      	ldrb	r3, [r7, #12]
 8002768:	b21b      	sxth	r3, r3
 800276a:	4313      	orrs	r3, r2
 800276c:	b21a      	sxth	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	819a      	strh	r2, [r3, #12]
	mpu->mpu_data.Magn_row[1] = ((int16_t)mag_buffer[3] << 8) | mag_buffer[2];
 8002772:	7bfb      	ldrb	r3, [r7, #15]
 8002774:	021b      	lsls	r3, r3, #8
 8002776:	b21a      	sxth	r2, r3
 8002778:	7bbb      	ldrb	r3, [r7, #14]
 800277a:	b21b      	sxth	r3, r3
 800277c:	4313      	orrs	r3, r2
 800277e:	b21a      	sxth	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	81da      	strh	r2, [r3, #14]
	mpu->mpu_data.Magn_row[2] = ((int16_t)mag_buffer[5] << 8) | mag_buffer[4];
 8002784:	7c7b      	ldrb	r3, [r7, #17]
 8002786:	021b      	lsls	r3, r3, #8
 8002788:	b21a      	sxth	r2, r3
 800278a:	7c3b      	ldrb	r3, [r7, #16]
 800278c:	b21b      	sxth	r3, r3
 800278e:	4313      	orrs	r3, r2
 8002790:	b21a      	sxth	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	821a      	strh	r2, [r3, #16]

	// calculate real value, check page53
	mpu->mpu_data.Magn[0] = (float) mpu->mpu_data.Magn_row[0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	899b      	ldrh	r3, [r3, #12]
 800279a:	b21b      	sxth	r3, r3
 800279c:	ee07 3a90 	vmov	s15, r3
 80027a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027a4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
			* (((mag_adjust[0] - 128) / 256.0) + 1);
 80027a8:	7d3b      	ldrb	r3, [r7, #20]
 80027aa:	3b80      	subs	r3, #128	; 0x80
 80027ac:	ee07 3a90 	vmov	s15, r3
 80027b0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80027b4:	ed9f 4b40 	vldr	d4, [pc, #256]	; 80028b8 <MPU9250_ReadMag+0x210>
 80027b8:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80027bc:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80027c0:	ee37 7b05 	vadd.f64	d7, d7, d5
 80027c4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80027c8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	mpu->mpu_data.Magn[0] = (float) mpu->mpu_data.Magn_row[0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	mpu->mpu_data.Magn[0] = mpu->mpu_data.Magn_row[0] * 0.15;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	899b      	ldrh	r3, [r3, #12]
 80027d6:	b21b      	sxth	r3, r3
 80027d8:	ee07 3a90 	vmov	s15, r3
 80027dc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80027e0:	ed9f 6b37 	vldr	d6, [pc, #220]	; 80028c0 <MPU9250_ReadMag+0x218>
 80027e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80027e8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	mpu->mpu_data.Magn[1] = (float) mpu->mpu_data.Magn_row[1]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	89db      	ldrh	r3, [r3, #14]
 80027f6:	b21b      	sxth	r3, r3
 80027f8:	ee07 3a90 	vmov	s15, r3
 80027fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002800:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
			* (((mag_adjust[1] - 128) / 256.0) + 1);
 8002804:	7d7b      	ldrb	r3, [r7, #21]
 8002806:	3b80      	subs	r3, #128	; 0x80
 8002808:	ee07 3a90 	vmov	s15, r3
 800280c:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8002810:	ed9f 4b29 	vldr	d4, [pc, #164]	; 80028b8 <MPU9250_ReadMag+0x210>
 8002814:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8002818:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800281c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8002820:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002824:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	mpu->mpu_data.Magn[1] = (float) mpu->mpu_data.Magn_row[1]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	mpu->mpu_data.Magn[1] = mpu->mpu_data.Magn_row[1] * 0.15;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	89db      	ldrh	r3, [r3, #14]
 8002832:	b21b      	sxth	r3, r3
 8002834:	ee07 3a90 	vmov	s15, r3
 8002838:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800283c:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80028c0 <MPU9250_ReadMag+0x218>
 8002840:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002844:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

	mpu->mpu_data.Magn[2] = (float) mpu->mpu_data.Magn_row[2]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	8a1b      	ldrh	r3, [r3, #16]
 8002852:	b21b      	sxth	r3, r3
 8002854:	ee07 3a90 	vmov	s15, r3
 8002858:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800285c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
			* (((mag_adjust[2] - 128) / 256.0) + 1);
 8002860:	7dbb      	ldrb	r3, [r7, #22]
 8002862:	3b80      	subs	r3, #128	; 0x80
 8002864:	ee07 3a90 	vmov	s15, r3
 8002868:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800286c:	ed9f 4b12 	vldr	d4, [pc, #72]	; 80028b8 <MPU9250_ReadMag+0x210>
 8002870:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8002874:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8002878:	ee37 7b05 	vadd.f64	d7, d7, d5
 800287c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002880:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	mpu->mpu_data.Magn[2] = (float) mpu->mpu_data.Magn_row[2]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	mpu->mpu_data.Magn[2] = mpu->mpu_data.Magn_row[2] * 0.15;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	8a1b      	ldrh	r3, [r3, #16]
 800288e:	b21b      	sxth	r3, r3
 8002890:	ee07 3a90 	vmov	s15, r3
 8002894:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002898:	ed9f 6b09 	vldr	d6, [pc, #36]	; 80028c0 <MPU9250_ReadMag+0x218>
 800289c:	ee27 7b06 	vmul.f64	d7, d7, d6
 80028a0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 80028aa:	bf00      	nop
 80028ac:	3718      	adds	r7, #24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	f3af 8000 	nop.w
 80028b8:	00000000 	.word	0x00000000
 80028bc:	40700000 	.word	0x40700000
 80028c0:	33333333 	.word	0x33333333
 80028c4:	3fc33333 	.word	0x3fc33333
 80028c8:	0800f86c 	.word	0x0800f86c
 80028cc:	24000654 	.word	0x24000654

080028d0 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80028d8:	1d39      	adds	r1, r7, #4
 80028da:	f04f 33ff 	mov.w	r3, #4294967295
 80028de:	2201      	movs	r2, #1
 80028e0:	4803      	ldr	r0, [pc, #12]	; (80028f0 <__io_putchar+0x20>)
 80028e2:	f005 feba 	bl	800865a <HAL_UART_Transmit>
  return ch;
 80028e6:	687b      	ldr	r3, [r7, #4]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	24000584 	.word	0x24000584

080028f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028fa:	4b0c      	ldr	r3, [pc, #48]	; (800292c <HAL_MspInit+0x38>)
 80028fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002900:	4a0a      	ldr	r2, [pc, #40]	; (800292c <HAL_MspInit+0x38>)
 8002902:	f043 0302 	orr.w	r3, r3, #2
 8002906:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800290a:	4b08      	ldr	r3, [pc, #32]	; (800292c <HAL_MspInit+0x38>)
 800290c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	607b      	str	r3, [r7, #4]
 8002916:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002918:	2200      	movs	r2, #0
 800291a:	210f      	movs	r1, #15
 800291c:	f06f 0001 	mvn.w	r0, #1
 8002920:	f000 fd08 	bl	8003334 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002924:	bf00      	nop
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	58024400 	.word	0x58024400

08002930 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b0b8      	sub	sp, #224	; 0xe0
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002938:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	605a      	str	r2, [r3, #4]
 8002942:	609a      	str	r2, [r3, #8]
 8002944:	60da      	str	r2, [r3, #12]
 8002946:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002948:	f107 0310 	add.w	r3, r7, #16
 800294c:	22bc      	movs	r2, #188	; 0xbc
 800294e:	2100      	movs	r1, #0
 8002950:	4618      	mov	r0, r3
 8002952:	f009 fe2c 	bl	800c5ae <memset>
  if(hfdcan->Instance==FDCAN1)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a25      	ldr	r2, [pc, #148]	; (80029f0 <HAL_FDCAN_MspInit+0xc0>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d142      	bne.n	80029e6 <HAL_FDCAN_MspInit+0xb6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002960:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002964:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002966:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800296a:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800296c:	f107 0310 	add.w	r3, r7, #16
 8002970:	4618      	mov	r0, r3
 8002972:	f002 fab9 	bl	8004ee8 <HAL_RCCEx_PeriphCLKConfig>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800297c:	f7ff fbee 	bl	800215c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002980:	4b1c      	ldr	r3, [pc, #112]	; (80029f4 <HAL_FDCAN_MspInit+0xc4>)
 8002982:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002986:	4a1b      	ldr	r2, [pc, #108]	; (80029f4 <HAL_FDCAN_MspInit+0xc4>)
 8002988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800298c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002990:	4b18      	ldr	r3, [pc, #96]	; (80029f4 <HAL_FDCAN_MspInit+0xc4>)
 8002992:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800299e:	4b15      	ldr	r3, [pc, #84]	; (80029f4 <HAL_FDCAN_MspInit+0xc4>)
 80029a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029a4:	4a13      	ldr	r2, [pc, #76]	; (80029f4 <HAL_FDCAN_MspInit+0xc4>)
 80029a6:	f043 0308 	orr.w	r3, r3, #8
 80029aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029ae:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <HAL_FDCAN_MspInit+0xc4>)
 80029b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029b4:	f003 0308 	and.w	r3, r3, #8
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80029bc:	2303      	movs	r3, #3
 80029be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c2:	2302      	movs	r3, #2
 80029c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c8:	2300      	movs	r3, #0
 80029ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ce:	2300      	movs	r3, #0
 80029d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80029d4:	2309      	movs	r3, #9
 80029d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029da:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029de:	4619      	mov	r1, r3
 80029e0:	4805      	ldr	r0, [pc, #20]	; (80029f8 <HAL_FDCAN_MspInit+0xc8>)
 80029e2:	f001 f833 	bl	8003a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80029e6:	bf00      	nop
 80029e8:	37e0      	adds	r7, #224	; 0xe0
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	4000a000 	.word	0x4000a000
 80029f4:	58024400 	.word	0x58024400
 80029f8:	58020c00 	.word	0x58020c00

080029fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b0bc      	sub	sp, #240	; 0xf0
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a04:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	60da      	str	r2, [r3, #12]
 8002a12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a14:	f107 0320 	add.w	r3, r7, #32
 8002a18:	22bc      	movs	r2, #188	; 0xbc
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f009 fdc6 	bl	800c5ae <memset>
  if(hspi->Instance==SPI1)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a5b      	ldr	r2, [pc, #364]	; (8002b94 <HAL_SPI_MspInit+0x198>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d166      	bne.n	8002afa <HAL_SPI_MspInit+0xfe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002a2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a30:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a36:	f107 0320 	add.w	r3, r7, #32
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f002 fa54 	bl	8004ee8 <HAL_RCCEx_PeriphCLKConfig>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8002a46:	f7ff fb89 	bl	800215c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a4a:	4b53      	ldr	r3, [pc, #332]	; (8002b98 <HAL_SPI_MspInit+0x19c>)
 8002a4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a50:	4a51      	ldr	r2, [pc, #324]	; (8002b98 <HAL_SPI_MspInit+0x19c>)
 8002a52:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a56:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002a5a:	4b4f      	ldr	r3, [pc, #316]	; (8002b98 <HAL_SPI_MspInit+0x19c>)
 8002a5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a64:	61fb      	str	r3, [r7, #28]
 8002a66:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a68:	4b4b      	ldr	r3, [pc, #300]	; (8002b98 <HAL_SPI_MspInit+0x19c>)
 8002a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a6e:	4a4a      	ldr	r2, [pc, #296]	; (8002b98 <HAL_SPI_MspInit+0x19c>)
 8002a70:	f043 0301 	orr.w	r3, r3, #1
 8002a74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a78:	4b47      	ldr	r3, [pc, #284]	; (8002b98 <HAL_SPI_MspInit+0x19c>)
 8002a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	61bb      	str	r3, [r7, #24]
 8002a84:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a86:	4b44      	ldr	r3, [pc, #272]	; (8002b98 <HAL_SPI_MspInit+0x19c>)
 8002a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a8c:	4a42      	ldr	r2, [pc, #264]	; (8002b98 <HAL_SPI_MspInit+0x19c>)
 8002a8e:	f043 0302 	orr.w	r3, r3, #2
 8002a92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a96:	4b40      	ldr	r3, [pc, #256]	; (8002b98 <HAL_SPI_MspInit+0x19c>)
 8002a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	617b      	str	r3, [r7, #20]
 8002aa2:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002aa4:	2360      	movs	r3, #96	; 0x60
 8002aa6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aaa:	2302      	movs	r3, #2
 8002aac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002abc:	2305      	movs	r3, #5
 8002abe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4834      	ldr	r0, [pc, #208]	; (8002b9c <HAL_SPI_MspInit+0x1a0>)
 8002aca:	f000 ffbf 	bl	8003a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002ace:	2320      	movs	r3, #32
 8002ad0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ada:	2300      	movs	r3, #0
 8002adc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ae6:	2305      	movs	r3, #5
 8002ae8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002af0:	4619      	mov	r1, r3
 8002af2:	482b      	ldr	r0, [pc, #172]	; (8002ba0 <HAL_SPI_MspInit+0x1a4>)
 8002af4:	f000 ffaa 	bl	8003a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8002af8:	e047      	b.n	8002b8a <HAL_SPI_MspInit+0x18e>
  else if(hspi->Instance==SPI4)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a29      	ldr	r2, [pc, #164]	; (8002ba4 <HAL_SPI_MspInit+0x1a8>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d142      	bne.n	8002b8a <HAL_SPI_MspInit+0x18e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8002b04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b08:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b10:	f107 0320 	add.w	r3, r7, #32
 8002b14:	4618      	mov	r0, r3
 8002b16:	f002 f9e7 	bl	8004ee8 <HAL_RCCEx_PeriphCLKConfig>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <HAL_SPI_MspInit+0x128>
      Error_Handler();
 8002b20:	f7ff fb1c 	bl	800215c <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002b24:	4b1c      	ldr	r3, [pc, #112]	; (8002b98 <HAL_SPI_MspInit+0x19c>)
 8002b26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b2a:	4a1b      	ldr	r2, [pc, #108]	; (8002b98 <HAL_SPI_MspInit+0x19c>)
 8002b2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b30:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002b34:	4b18      	ldr	r3, [pc, #96]	; (8002b98 <HAL_SPI_MspInit+0x19c>)
 8002b36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b3e:	613b      	str	r3, [r7, #16]
 8002b40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b42:	4b15      	ldr	r3, [pc, #84]	; (8002b98 <HAL_SPI_MspInit+0x19c>)
 8002b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b48:	4a13      	ldr	r2, [pc, #76]	; (8002b98 <HAL_SPI_MspInit+0x19c>)
 8002b4a:	f043 0310 	orr.w	r3, r3, #16
 8002b4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b52:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <HAL_SPI_MspInit+0x19c>)
 8002b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b58:	f003 0310 	and.w	r3, r3, #16
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002b60:	2364      	movs	r3, #100	; 0x64
 8002b62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b66:	2302      	movs	r3, #2
 8002b68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b72:	2300      	movs	r3, #0
 8002b74:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002b78:	2305      	movs	r3, #5
 8002b7a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b7e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002b82:	4619      	mov	r1, r3
 8002b84:	4808      	ldr	r0, [pc, #32]	; (8002ba8 <HAL_SPI_MspInit+0x1ac>)
 8002b86:	f000 ff61 	bl	8003a4c <HAL_GPIO_Init>
}
 8002b8a:	bf00      	nop
 8002b8c:	37f0      	adds	r7, #240	; 0xf0
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40013000 	.word	0x40013000
 8002b98:	58024400 	.word	0x58024400
 8002b9c:	58020000 	.word	0x58020000
 8002ba0:	58020400 	.word	0x58020400
 8002ba4:	40013400 	.word	0x40013400
 8002ba8:	58021000 	.word	0x58021000

08002bac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a16      	ldr	r2, [pc, #88]	; (8002c14 <HAL_TIM_Base_MspInit+0x68>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d10f      	bne.n	8002bde <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002bbe:	4b16      	ldr	r3, [pc, #88]	; (8002c18 <HAL_TIM_Base_MspInit+0x6c>)
 8002bc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bc4:	4a14      	ldr	r2, [pc, #80]	; (8002c18 <HAL_TIM_Base_MspInit+0x6c>)
 8002bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002bce:	4b12      	ldr	r3, [pc, #72]	; (8002c18 <HAL_TIM_Base_MspInit+0x6c>)
 8002bd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002bdc:	e013      	b.n	8002c06 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM14)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a0e      	ldr	r2, [pc, #56]	; (8002c1c <HAL_TIM_Base_MspInit+0x70>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d10e      	bne.n	8002c06 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002be8:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <HAL_TIM_Base_MspInit+0x6c>)
 8002bea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bee:	4a0a      	ldr	r2, [pc, #40]	; (8002c18 <HAL_TIM_Base_MspInit+0x6c>)
 8002bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002bf8:	4b07      	ldr	r3, [pc, #28]	; (8002c18 <HAL_TIM_Base_MspInit+0x6c>)
 8002bfa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c02:	60bb      	str	r3, [r7, #8]
 8002c04:	68bb      	ldr	r3, [r7, #8]
}
 8002c06:	bf00      	nop
 8002c08:	3714      	adds	r7, #20
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	40001c00 	.word	0x40001c00
 8002c18:	58024400 	.word	0x58024400
 8002c1c:	40002000 	.word	0x40002000

08002c20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b08a      	sub	sp, #40	; 0x28
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c28:	f107 0314 	add.w	r3, r7, #20
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	605a      	str	r2, [r3, #4]
 8002c32:	609a      	str	r2, [r3, #8]
 8002c34:	60da      	str	r2, [r3, #12]
 8002c36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a26      	ldr	r2, [pc, #152]	; (8002cd8 <HAL_TIM_MspPostInit+0xb8>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d120      	bne.n	8002c84 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c42:	4b26      	ldr	r3, [pc, #152]	; (8002cdc <HAL_TIM_MspPostInit+0xbc>)
 8002c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c48:	4a24      	ldr	r2, [pc, #144]	; (8002cdc <HAL_TIM_MspPostInit+0xbc>)
 8002c4a:	f043 0320 	orr.w	r3, r3, #32
 8002c4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c52:	4b22      	ldr	r3, [pc, #136]	; (8002cdc <HAL_TIM_MspPostInit+0xbc>)
 8002c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c58:	f003 0320 	and.w	r3, r3, #32
 8002c5c:	613b      	str	r3, [r7, #16]
 8002c5e:	693b      	ldr	r3, [r7, #16]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002c60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c66:	2302      	movs	r3, #2
 8002c68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002c72:	2309      	movs	r3, #9
 8002c74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c76:	f107 0314 	add.w	r3, r7, #20
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4818      	ldr	r0, [pc, #96]	; (8002ce0 <HAL_TIM_MspPostInit+0xc0>)
 8002c7e:	f000 fee5 	bl	8003a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8002c82:	e024      	b.n	8002cce <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM14)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a16      	ldr	r2, [pc, #88]	; (8002ce4 <HAL_TIM_MspPostInit+0xc4>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d11f      	bne.n	8002cce <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c8e:	4b13      	ldr	r3, [pc, #76]	; (8002cdc <HAL_TIM_MspPostInit+0xbc>)
 8002c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c94:	4a11      	ldr	r2, [pc, #68]	; (8002cdc <HAL_TIM_MspPostInit+0xbc>)
 8002c96:	f043 0320 	orr.w	r3, r3, #32
 8002c9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c9e:	4b0f      	ldr	r3, [pc, #60]	; (8002cdc <HAL_TIM_MspPostInit+0xbc>)
 8002ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ca4:	f003 0320 	and.w	r3, r3, #32
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002cac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8002cbe:	2309      	movs	r3, #9
 8002cc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002cc2:	f107 0314 	add.w	r3, r7, #20
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	4805      	ldr	r0, [pc, #20]	; (8002ce0 <HAL_TIM_MspPostInit+0xc0>)
 8002cca:	f000 febf 	bl	8003a4c <HAL_GPIO_Init>
}
 8002cce:	bf00      	nop
 8002cd0:	3728      	adds	r7, #40	; 0x28
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40001c00 	.word	0x40001c00
 8002cdc:	58024400 	.word	0x58024400
 8002ce0:	58021400 	.word	0x58021400
 8002ce4:	40002000 	.word	0x40002000

08002ce8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b0b8      	sub	sp, #224	; 0xe0
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	605a      	str	r2, [r3, #4]
 8002cfa:	609a      	str	r2, [r3, #8]
 8002cfc:	60da      	str	r2, [r3, #12]
 8002cfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d00:	f107 0310 	add.w	r3, r7, #16
 8002d04:	22bc      	movs	r2, #188	; 0xbc
 8002d06:	2100      	movs	r1, #0
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f009 fc50 	bl	800c5ae <memset>
  if(huart->Instance==USART3)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a25      	ldr	r2, [pc, #148]	; (8002da8 <HAL_UART_MspInit+0xc0>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d142      	bne.n	8002d9e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002d18:	2302      	movs	r3, #2
 8002d1a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d22:	f107 0310 	add.w	r3, r7, #16
 8002d26:	4618      	mov	r0, r3
 8002d28:	f002 f8de 	bl	8004ee8 <HAL_RCCEx_PeriphCLKConfig>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002d32:	f7ff fa13 	bl	800215c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d36:	4b1d      	ldr	r3, [pc, #116]	; (8002dac <HAL_UART_MspInit+0xc4>)
 8002d38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d3c:	4a1b      	ldr	r2, [pc, #108]	; (8002dac <HAL_UART_MspInit+0xc4>)
 8002d3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d42:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d46:	4b19      	ldr	r3, [pc, #100]	; (8002dac <HAL_UART_MspInit+0xc4>)
 8002d48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d54:	4b15      	ldr	r3, [pc, #84]	; (8002dac <HAL_UART_MspInit+0xc4>)
 8002d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d5a:	4a14      	ldr	r2, [pc, #80]	; (8002dac <HAL_UART_MspInit+0xc4>)
 8002d5c:	f043 0308 	orr.w	r3, r3, #8
 8002d60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d64:	4b11      	ldr	r3, [pc, #68]	; (8002dac <HAL_UART_MspInit+0xc4>)
 8002d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d6a:	f003 0308 	and.w	r3, r3, #8
 8002d6e:	60bb      	str	r3, [r7, #8]
 8002d70:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002d72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d80:	2300      	movs	r3, #0
 8002d82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d86:	2300      	movs	r3, #0
 8002d88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d8c:	2307      	movs	r3, #7
 8002d8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d92:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002d96:	4619      	mov	r1, r3
 8002d98:	4805      	ldr	r0, [pc, #20]	; (8002db0 <HAL_UART_MspInit+0xc8>)
 8002d9a:	f000 fe57 	bl	8003a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002d9e:	bf00      	nop
 8002da0:	37e0      	adds	r7, #224	; 0xe0
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	40004800 	.word	0x40004800
 8002dac:	58024400 	.word	0x58024400
 8002db0:	58020c00 	.word	0x58020c00

08002db4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b090      	sub	sp, #64	; 0x40
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b0f      	cmp	r3, #15
 8002dc0:	d827      	bhi.n	8002e12 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	2037      	movs	r0, #55	; 0x37
 8002dc8:	f000 fab4 	bl	8003334 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002dcc:	2037      	movs	r0, #55	; 0x37
 8002dce:	f000 facb 	bl	8003368 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002dd2:	4a29      	ldr	r2, [pc, #164]	; (8002e78 <HAL_InitTick+0xc4>)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002dd8:	4b28      	ldr	r3, [pc, #160]	; (8002e7c <HAL_InitTick+0xc8>)
 8002dda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002dde:	4a27      	ldr	r2, [pc, #156]	; (8002e7c <HAL_InitTick+0xc8>)
 8002de0:	f043 0320 	orr.w	r3, r3, #32
 8002de4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002de8:	4b24      	ldr	r3, [pc, #144]	; (8002e7c <HAL_InitTick+0xc8>)
 8002dea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002dee:	f003 0320 	and.w	r3, r3, #32
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002df6:	f107 0210 	add.w	r2, r7, #16
 8002dfa:	f107 0314 	add.w	r3, r7, #20
 8002dfe:	4611      	mov	r1, r2
 8002e00:	4618      	mov	r0, r3
 8002e02:	f002 f82f 	bl	8004e64 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e08:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d106      	bne.n	8002e1e <HAL_InitTick+0x6a>
 8002e10:	e001      	b.n	8002e16 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e02b      	b.n	8002e6e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002e16:	f001 fff9 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 8002e1a:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002e1c:	e004      	b.n	8002e28 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002e1e:	f001 fff5 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 8002e22:	4603      	mov	r3, r0
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e2a:	4a15      	ldr	r2, [pc, #84]	; (8002e80 <HAL_InitTick+0xcc>)
 8002e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e30:	0c9b      	lsrs	r3, r3, #18
 8002e32:	3b01      	subs	r3, #1
 8002e34:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8002e36:	4b13      	ldr	r3, [pc, #76]	; (8002e84 <HAL_InitTick+0xd0>)
 8002e38:	4a13      	ldr	r2, [pc, #76]	; (8002e88 <HAL_InitTick+0xd4>)
 8002e3a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8002e3c:	4b11      	ldr	r3, [pc, #68]	; (8002e84 <HAL_InitTick+0xd0>)
 8002e3e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e42:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8002e44:	4a0f      	ldr	r2, [pc, #60]	; (8002e84 <HAL_InitTick+0xd0>)
 8002e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e48:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002e4a:	4b0e      	ldr	r3, [pc, #56]	; (8002e84 <HAL_InitTick+0xd0>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e50:	4b0c      	ldr	r3, [pc, #48]	; (8002e84 <HAL_InitTick+0xd0>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8002e56:	480b      	ldr	r0, [pc, #44]	; (8002e84 <HAL_InitTick+0xd0>)
 8002e58:	f004 fb61 	bl	800751e <HAL_TIM_Base_Init>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d104      	bne.n	8002e6c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8002e62:	4808      	ldr	r0, [pc, #32]	; (8002e84 <HAL_InitTick+0xd0>)
 8002e64:	f004 fbb2 	bl	80075cc <HAL_TIM_Base_Start_IT>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	e000      	b.n	8002e6e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3740      	adds	r7, #64	; 0x40
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	24000010 	.word	0x24000010
 8002e7c:	58024400 	.word	0x58024400
 8002e80:	431bde83 	.word	0x431bde83
 8002e84:	24000668 	.word	0x24000668
 8002e88:	40001400 	.word	0x40001400

08002e8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e90:	e7fe      	b.n	8002e90 <NMI_Handler+0x4>

08002e92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e92:	b480      	push	{r7}
 8002e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e96:	e7fe      	b.n	8002e96 <HardFault_Handler+0x4>

08002e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e9c:	e7fe      	b.n	8002e9c <MemManage_Handler+0x4>

08002e9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ea2:	e7fe      	b.n	8002ea2 <BusFault_Handler+0x4>

08002ea4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ea8:	e7fe      	b.n	8002ea8 <UsageFault_Handler+0x4>

08002eaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eae:	bf00      	nop
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002ebc:	4802      	ldr	r0, [pc, #8]	; (8002ec8 <TIM7_IRQHandler+0x10>)
 8002ebe:	f004 fd6d 	bl	800799c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002ec2:	bf00      	nop
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	24000668 	.word	0x24000668

08002ecc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
	return 1;
 8002ed0:	2301      	movs	r3, #1
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <_kill>:

int _kill(int pid, int sig)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002ee6:	f009 fa31 	bl	800c34c <__errno>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2216      	movs	r2, #22
 8002eee:	601a      	str	r2, [r3, #0]
	return -1;
 8002ef0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <_exit>:

void _exit (int status)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002f04:	f04f 31ff 	mov.w	r1, #4294967295
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7ff ffe7 	bl	8002edc <_kill>
	while (1) {}		/* Make sure we hang here */
 8002f0e:	e7fe      	b.n	8002f0e <_exit+0x12>

08002f10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	617b      	str	r3, [r7, #20]
 8002f20:	e00a      	b.n	8002f38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002f22:	f3af 8000 	nop.w
 8002f26:	4601      	mov	r1, r0
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	60ba      	str	r2, [r7, #8]
 8002f2e:	b2ca      	uxtb	r2, r1
 8002f30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	3301      	adds	r3, #1
 8002f36:	617b      	str	r3, [r7, #20]
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	dbf0      	blt.n	8002f22 <_read+0x12>
	}

return len;
 8002f40:	687b      	ldr	r3, [r7, #4]
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3718      	adds	r7, #24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b086      	sub	sp, #24
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	60f8      	str	r0, [r7, #12]
 8002f52:	60b9      	str	r1, [r7, #8]
 8002f54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f56:	2300      	movs	r3, #0
 8002f58:	617b      	str	r3, [r7, #20]
 8002f5a:	e009      	b.n	8002f70 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	1c5a      	adds	r2, r3, #1
 8002f60:	60ba      	str	r2, [r7, #8]
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff fcb3 	bl	80028d0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	dbf1      	blt.n	8002f5c <_write+0x12>
	}
	return len;
 8002f78:	687b      	ldr	r3, [r7, #4]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <_close>:

int _close(int file)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
	return -1;
 8002f8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
 8002fa2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002faa:	605a      	str	r2, [r3, #4]
	return 0;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <_isatty>:

int _isatty(int file)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b083      	sub	sp, #12
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
	return 1;
 8002fc2:	2301      	movs	r3, #1
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
	return 0;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3714      	adds	r7, #20
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
	...

08002fec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ff4:	4a14      	ldr	r2, [pc, #80]	; (8003048 <_sbrk+0x5c>)
 8002ff6:	4b15      	ldr	r3, [pc, #84]	; (800304c <_sbrk+0x60>)
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003000:	4b13      	ldr	r3, [pc, #76]	; (8003050 <_sbrk+0x64>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d102      	bne.n	800300e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003008:	4b11      	ldr	r3, [pc, #68]	; (8003050 <_sbrk+0x64>)
 800300a:	4a12      	ldr	r2, [pc, #72]	; (8003054 <_sbrk+0x68>)
 800300c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800300e:	4b10      	ldr	r3, [pc, #64]	; (8003050 <_sbrk+0x64>)
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4413      	add	r3, r2
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	429a      	cmp	r2, r3
 800301a:	d207      	bcs.n	800302c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800301c:	f009 f996 	bl	800c34c <__errno>
 8003020:	4603      	mov	r3, r0
 8003022:	220c      	movs	r2, #12
 8003024:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003026:	f04f 33ff 	mov.w	r3, #4294967295
 800302a:	e009      	b.n	8003040 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800302c:	4b08      	ldr	r3, [pc, #32]	; (8003050 <_sbrk+0x64>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003032:	4b07      	ldr	r3, [pc, #28]	; (8003050 <_sbrk+0x64>)
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4413      	add	r3, r2
 800303a:	4a05      	ldr	r2, [pc, #20]	; (8003050 <_sbrk+0x64>)
 800303c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800303e:	68fb      	ldr	r3, [r7, #12]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3718      	adds	r7, #24
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	24080000 	.word	0x24080000
 800304c:	00000400 	.word	0x00000400
 8003050:	240006b4 	.word	0x240006b4
 8003054:	240050e0 	.word	0x240050e0

08003058 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003058:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003090 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800305c:	f7fd fb1a 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003060:	480c      	ldr	r0, [pc, #48]	; (8003094 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003062:	490d      	ldr	r1, [pc, #52]	; (8003098 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003064:	4a0d      	ldr	r2, [pc, #52]	; (800309c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003066:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003068:	e002      	b.n	8003070 <LoopCopyDataInit>

0800306a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800306a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800306c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800306e:	3304      	adds	r3, #4

08003070 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003070:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003072:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003074:	d3f9      	bcc.n	800306a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003076:	4a0a      	ldr	r2, [pc, #40]	; (80030a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003078:	4c0a      	ldr	r4, [pc, #40]	; (80030a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800307a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800307c:	e001      	b.n	8003082 <LoopFillZerobss>

0800307e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800307e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003080:	3204      	adds	r2, #4

08003082 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003082:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003084:	d3fb      	bcc.n	800307e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003086:	f009 fa5d 	bl	800c544 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800308a:	f7fe fbb9 	bl	8001800 <main>
  bx  lr
 800308e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003090:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003094:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003098:	240001ec 	.word	0x240001ec
  ldr r2, =_sidata
 800309c:	0800fd2c 	.word	0x0800fd2c
  ldr r2, =_sbss
 80030a0:	240001f0 	.word	0x240001f0
  ldr r4, =_ebss
 80030a4:	240050dc 	.word	0x240050dc

080030a8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030a8:	e7fe      	b.n	80030a8 <ADC3_IRQHandler>
	...

080030ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030b2:	2003      	movs	r0, #3
 80030b4:	f000 f933 	bl	800331e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80030b8:	f001 fcfe 	bl	8004ab8 <HAL_RCC_GetSysClockFreq>
 80030bc:	4602      	mov	r2, r0
 80030be:	4b15      	ldr	r3, [pc, #84]	; (8003114 <HAL_Init+0x68>)
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	0a1b      	lsrs	r3, r3, #8
 80030c4:	f003 030f 	and.w	r3, r3, #15
 80030c8:	4913      	ldr	r1, [pc, #76]	; (8003118 <HAL_Init+0x6c>)
 80030ca:	5ccb      	ldrb	r3, [r1, r3]
 80030cc:	f003 031f 	and.w	r3, r3, #31
 80030d0:	fa22 f303 	lsr.w	r3, r2, r3
 80030d4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030d6:	4b0f      	ldr	r3, [pc, #60]	; (8003114 <HAL_Init+0x68>)
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	4a0e      	ldr	r2, [pc, #56]	; (8003118 <HAL_Init+0x6c>)
 80030e0:	5cd3      	ldrb	r3, [r2, r3]
 80030e2:	f003 031f 	and.w	r3, r3, #31
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	fa22 f303 	lsr.w	r3, r2, r3
 80030ec:	4a0b      	ldr	r2, [pc, #44]	; (800311c <HAL_Init+0x70>)
 80030ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030f0:	4a0b      	ldr	r2, [pc, #44]	; (8003120 <HAL_Init+0x74>)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030f6:	200f      	movs	r0, #15
 80030f8:	f7ff fe5c 	bl	8002db4 <HAL_InitTick>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e002      	b.n	800310c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003106:	f7ff fbf5 	bl	80028f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3708      	adds	r7, #8
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	58024400 	.word	0x58024400
 8003118:	0800f8d4 	.word	0x0800f8d4
 800311c:	24000004 	.word	0x24000004
 8003120:	24000000 	.word	0x24000000

08003124 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003128:	4b06      	ldr	r3, [pc, #24]	; (8003144 <HAL_IncTick+0x20>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	461a      	mov	r2, r3
 800312e:	4b06      	ldr	r3, [pc, #24]	; (8003148 <HAL_IncTick+0x24>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4413      	add	r3, r2
 8003134:	4a04      	ldr	r2, [pc, #16]	; (8003148 <HAL_IncTick+0x24>)
 8003136:	6013      	str	r3, [r2, #0]
}
 8003138:	bf00      	nop
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	24000014 	.word	0x24000014
 8003148:	240006b8 	.word	0x240006b8

0800314c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  return uwTick;
 8003150:	4b03      	ldr	r3, [pc, #12]	; (8003160 <HAL_GetTick+0x14>)
 8003152:	681b      	ldr	r3, [r3, #0]
}
 8003154:	4618      	mov	r0, r3
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	240006b8 	.word	0x240006b8

08003164 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800316c:	f7ff ffee 	bl	800314c <HAL_GetTick>
 8003170:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800317c:	d005      	beq.n	800318a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800317e:	4b0a      	ldr	r3, [pc, #40]	; (80031a8 <HAL_Delay+0x44>)
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	461a      	mov	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4413      	add	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800318a:	bf00      	nop
 800318c:	f7ff ffde 	bl	800314c <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	429a      	cmp	r2, r3
 800319a:	d8f7      	bhi.n	800318c <HAL_Delay+0x28>
  {
  }
}
 800319c:	bf00      	nop
 800319e:	bf00      	nop
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	24000014 	.word	0x24000014

080031ac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80031b0:	4b03      	ldr	r3, [pc, #12]	; (80031c0 <HAL_GetREVID+0x14>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	0c1b      	lsrs	r3, r3, #16
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr
 80031c0:	5c001000 	.word	0x5c001000

080031c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031d4:	4b0b      	ldr	r3, [pc, #44]	; (8003204 <__NVIC_SetPriorityGrouping+0x40>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031da:	68ba      	ldr	r2, [r7, #8]
 80031dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031e0:	4013      	ands	r3, r2
 80031e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80031ec:	4b06      	ldr	r3, [pc, #24]	; (8003208 <__NVIC_SetPriorityGrouping+0x44>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031f2:	4a04      	ldr	r2, [pc, #16]	; (8003204 <__NVIC_SetPriorityGrouping+0x40>)
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	60d3      	str	r3, [r2, #12]
}
 80031f8:	bf00      	nop
 80031fa:	3714      	adds	r7, #20
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	e000ed00 	.word	0xe000ed00
 8003208:	05fa0000 	.word	0x05fa0000

0800320c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003210:	4b04      	ldr	r3, [pc, #16]	; (8003224 <__NVIC_GetPriorityGrouping+0x18>)
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	0a1b      	lsrs	r3, r3, #8
 8003216:	f003 0307 	and.w	r3, r3, #7
}
 800321a:	4618      	mov	r0, r3
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	e000ed00 	.word	0xe000ed00

08003228 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	4603      	mov	r3, r0
 8003230:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003232:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003236:	2b00      	cmp	r3, #0
 8003238:	db0b      	blt.n	8003252 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800323a:	88fb      	ldrh	r3, [r7, #6]
 800323c:	f003 021f 	and.w	r2, r3, #31
 8003240:	4907      	ldr	r1, [pc, #28]	; (8003260 <__NVIC_EnableIRQ+0x38>)
 8003242:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003246:	095b      	lsrs	r3, r3, #5
 8003248:	2001      	movs	r0, #1
 800324a:	fa00 f202 	lsl.w	r2, r0, r2
 800324e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	e000e100 	.word	0xe000e100

08003264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	4603      	mov	r3, r0
 800326c:	6039      	str	r1, [r7, #0]
 800326e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003270:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003274:	2b00      	cmp	r3, #0
 8003276:	db0a      	blt.n	800328e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	b2da      	uxtb	r2, r3
 800327c:	490c      	ldr	r1, [pc, #48]	; (80032b0 <__NVIC_SetPriority+0x4c>)
 800327e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003282:	0112      	lsls	r2, r2, #4
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	440b      	add	r3, r1
 8003288:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800328c:	e00a      	b.n	80032a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	b2da      	uxtb	r2, r3
 8003292:	4908      	ldr	r1, [pc, #32]	; (80032b4 <__NVIC_SetPriority+0x50>)
 8003294:	88fb      	ldrh	r3, [r7, #6]
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	3b04      	subs	r3, #4
 800329c:	0112      	lsls	r2, r2, #4
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	440b      	add	r3, r1
 80032a2:	761a      	strb	r2, [r3, #24]
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	e000e100 	.word	0xe000e100
 80032b4:	e000ed00 	.word	0xe000ed00

080032b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b089      	sub	sp, #36	; 0x24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f1c3 0307 	rsb	r3, r3, #7
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	bf28      	it	cs
 80032d6:	2304      	movcs	r3, #4
 80032d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	3304      	adds	r3, #4
 80032de:	2b06      	cmp	r3, #6
 80032e0:	d902      	bls.n	80032e8 <NVIC_EncodePriority+0x30>
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	3b03      	subs	r3, #3
 80032e6:	e000      	b.n	80032ea <NVIC_EncodePriority+0x32>
 80032e8:	2300      	movs	r3, #0
 80032ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032ec:	f04f 32ff 	mov.w	r2, #4294967295
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	43da      	mvns	r2, r3
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	401a      	ands	r2, r3
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003300:	f04f 31ff 	mov.w	r1, #4294967295
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	fa01 f303 	lsl.w	r3, r1, r3
 800330a:	43d9      	mvns	r1, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003310:	4313      	orrs	r3, r2
         );
}
 8003312:	4618      	mov	r0, r3
 8003314:	3724      	adds	r7, #36	; 0x24
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b082      	sub	sp, #8
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7ff ff4c 	bl	80031c4 <__NVIC_SetPriorityGrouping>
}
 800332c:	bf00      	nop
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	4603      	mov	r3, r0
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
 8003340:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003342:	f7ff ff63 	bl	800320c <__NVIC_GetPriorityGrouping>
 8003346:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	68b9      	ldr	r1, [r7, #8]
 800334c:	6978      	ldr	r0, [r7, #20]
 800334e:	f7ff ffb3 	bl	80032b8 <NVIC_EncodePriority>
 8003352:	4602      	mov	r2, r0
 8003354:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003358:	4611      	mov	r1, r2
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff ff82 	bl	8003264 <__NVIC_SetPriority>
}
 8003360:	bf00      	nop
 8003362:	3718      	adds	r7, #24
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	4603      	mov	r3, r0
 8003370:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003372:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003376:	4618      	mov	r0, r3
 8003378:	f7ff ff56 	bl	8003228 <__NVIC_EnableIRQ>
}
 800337c:	bf00      	nop
 800337e:	3708      	adds	r7, #8
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b098      	sub	sp, #96	; 0x60
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800338c:	4a84      	ldr	r2, [pc, #528]	; (80035a0 <HAL_FDCAN_Init+0x21c>)
 800338e:	f107 030c 	add.w	r3, r7, #12
 8003392:	4611      	mov	r1, r2
 8003394:	224c      	movs	r2, #76	; 0x4c
 8003396:	4618      	mov	r0, r3
 8003398:	f009 f8fb 	bl	800c592 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e1c6      	b.n	8003734 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a7e      	ldr	r2, [pc, #504]	; (80035a4 <HAL_FDCAN_Init+0x220>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d106      	bne.n	80033be <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80033b8:	461a      	mov	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d106      	bne.n	80033d8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7ff faac 	bl	8002930 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	699a      	ldr	r2, [r3, #24]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 0210 	bic.w	r2, r2, #16
 80033e6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033e8:	f7ff feb0 	bl	800314c <HAL_GetTick>
 80033ec:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80033ee:	e014      	b.n	800341a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80033f0:	f7ff feac 	bl	800314c <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b0a      	cmp	r3, #10
 80033fc:	d90d      	bls.n	800341a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003404:	f043 0201 	orr.w	r2, r3, #1
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2203      	movs	r2, #3
 8003412:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e18c      	b.n	8003734 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	f003 0308 	and.w	r3, r3, #8
 8003424:	2b08      	cmp	r3, #8
 8003426:	d0e3      	beq.n	80033f0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	699a      	ldr	r2, [r3, #24]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f042 0201 	orr.w	r2, r2, #1
 8003436:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003438:	f7ff fe88 	bl	800314c <HAL_GetTick>
 800343c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800343e:	e014      	b.n	800346a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003440:	f7ff fe84 	bl	800314c <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b0a      	cmp	r3, #10
 800344c:	d90d      	bls.n	800346a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003454:	f043 0201 	orr.w	r2, r3, #1
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2203      	movs	r2, #3
 8003462:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e164      	b.n	8003734 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0e3      	beq.n	8003440 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	699a      	ldr	r2, [r3, #24]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0202 	orr.w	r2, r2, #2
 8003486:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	7c1b      	ldrb	r3, [r3, #16]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d108      	bne.n	80034a2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	699a      	ldr	r2, [r3, #24]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800349e:	619a      	str	r2, [r3, #24]
 80034a0:	e007      	b.n	80034b2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	699a      	ldr	r2, [r3, #24]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034b0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	7c5b      	ldrb	r3, [r3, #17]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d108      	bne.n	80034cc <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	699a      	ldr	r2, [r3, #24]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034c8:	619a      	str	r2, [r3, #24]
 80034ca:	e007      	b.n	80034dc <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	699a      	ldr	r2, [r3, #24]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80034da:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	7c9b      	ldrb	r3, [r3, #18]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d108      	bne.n	80034f6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	699a      	ldr	r2, [r3, #24]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034f2:	619a      	str	r2, [r3, #24]
 80034f4:	e007      	b.n	8003506 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	699a      	ldr	r2, [r3, #24]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003504:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	699a      	ldr	r2, [r3, #24]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800352a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	691a      	ldr	r2, [r3, #16]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 0210 	bic.w	r2, r2, #16
 800353a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d108      	bne.n	8003556 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699a      	ldr	r2, [r3, #24]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f042 0204 	orr.w	r2, r2, #4
 8003552:	619a      	str	r2, [r3, #24]
 8003554:	e030      	b.n	80035b8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d02c      	beq.n	80035b8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	2b02      	cmp	r3, #2
 8003564:	d020      	beq.n	80035a8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	699a      	ldr	r2, [r3, #24]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003574:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	691a      	ldr	r2, [r3, #16]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f042 0210 	orr.w	r2, r2, #16
 8003584:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	2b03      	cmp	r3, #3
 800358c:	d114      	bne.n	80035b8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	699a      	ldr	r2, [r3, #24]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f042 0220 	orr.w	r2, r2, #32
 800359c:	619a      	str	r2, [r3, #24]
 800359e:	e00b      	b.n	80035b8 <HAL_FDCAN_Init+0x234>
 80035a0:	0800f870 	.word	0x0800f870
 80035a4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	699a      	ldr	r2, [r3, #24]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f042 0220 	orr.w	r2, r2, #32
 80035b6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	3b01      	subs	r3, #1
 80035be:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	3b01      	subs	r3, #1
 80035c6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80035c8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80035d0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	3b01      	subs	r3, #1
 80035da:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80035e0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80035e2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035ec:	d115      	bne.n	800361a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f8:	3b01      	subs	r3, #1
 80035fa:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80035fc:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003602:	3b01      	subs	r3, #1
 8003604:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003606:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	3b01      	subs	r3, #1
 8003610:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003616:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003618:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00a      	beq.n	8003638 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	430a      	orrs	r2, r1
 8003634:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003640:	4413      	add	r3, r2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d011      	beq.n	800366a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800364e:	f023 0107 	bic.w	r1, r3, #7
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	3360      	adds	r3, #96	; 0x60
 800365a:	443b      	add	r3, r7
 800365c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	2b00      	cmp	r3, #0
 8003670:	d011      	beq.n	8003696 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800367a:	f023 0107 	bic.w	r1, r3, #7
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	3360      	adds	r3, #96	; 0x60
 8003686:	443b      	add	r3, r7
 8003688:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	430a      	orrs	r2, r1
 8003692:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800369a:	2b00      	cmp	r3, #0
 800369c:	d012      	beq.n	80036c4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80036a6:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	3360      	adds	r3, #96	; 0x60
 80036b2:	443b      	add	r3, r7
 80036b4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80036b8:	011a      	lsls	r2, r3, #4
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d012      	beq.n	80036f2 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80036d4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	3360      	adds	r3, #96	; 0x60
 80036e0:	443b      	add	r3, r7
 80036e2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80036e6:	021a      	lsls	r2, r3, #8
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a11      	ldr	r2, [pc, #68]	; (800373c <HAL_FDCAN_Init+0x3b8>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d107      	bne.n	800370c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	689a      	ldr	r2, [r3, #8]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f022 0203 	bic.w	r2, r2, #3
 800370a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 f80b 	bl	8003740 <FDCAN_CalcultateRamBlockAddresses>
 800372a:	4603      	mov	r3, r0
 800372c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8003730:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8003734:	4618      	mov	r0, r3
 8003736:	3760      	adds	r7, #96	; 0x60
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	4000a000 	.word	0x4000a000

08003740 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800374c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003756:	4ba7      	ldr	r3, [pc, #668]	; (80039f4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003758:	4013      	ands	r3, r2
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	0091      	lsls	r1, r2, #2
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6812      	ldr	r2, [r2, #0]
 8003762:	430b      	orrs	r3, r1
 8003764:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003770:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003778:	041a      	lsls	r2, r3, #16
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	430a      	orrs	r2, r1
 8003780:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	4413      	add	r3, r2
 800378c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003796:	4b97      	ldr	r3, [pc, #604]	; (80039f4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003798:	4013      	ands	r3, r2
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	0091      	lsls	r1, r2, #2
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6812      	ldr	r2, [r2, #0]
 80037a2:	430b      	orrs	r3, r1
 80037a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b0:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b8:	041a      	lsls	r2, r3, #16
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	4413      	add	r3, r2
 80037ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80037d8:	4b86      	ldr	r3, [pc, #536]	; (80039f4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80037da:	4013      	ands	r3, r2
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	0091      	lsls	r1, r2, #2
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6812      	ldr	r2, [r2, #0]
 80037e4:	430b      	orrs	r3, r1
 80037e6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80037f2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	041a      	lsls	r2, r3, #16
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	430a      	orrs	r2, r1
 8003802:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800380e:	fb02 f303 	mul.w	r3, r2, r3
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	4413      	add	r3, r2
 8003816:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003820:	4b74      	ldr	r3, [pc, #464]	; (80039f4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003822:	4013      	ands	r3, r2
 8003824:	68ba      	ldr	r2, [r7, #8]
 8003826:	0091      	lsls	r1, r2, #2
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6812      	ldr	r2, [r2, #0]
 800382c:	430b      	orrs	r3, r1
 800382e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800383a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003842:	041a      	lsls	r2, r3, #16
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	430a      	orrs	r2, r1
 800384a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003856:	fb02 f303 	mul.w	r3, r2, r3
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	4413      	add	r3, r2
 800385e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003868:	4b62      	ldr	r3, [pc, #392]	; (80039f4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800386a:	4013      	ands	r3, r2
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	0091      	lsls	r1, r2, #2
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	6812      	ldr	r2, [r2, #0]
 8003874:	430b      	orrs	r3, r1
 8003876:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003882:	fb02 f303 	mul.w	r3, r2, r3
 8003886:	68ba      	ldr	r2, [r7, #8]
 8003888:	4413      	add	r3, r2
 800388a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003894:	4b57      	ldr	r3, [pc, #348]	; (80039f4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003896:	4013      	ands	r3, r2
 8003898:	68ba      	ldr	r2, [r7, #8]
 800389a:	0091      	lsls	r1, r2, #2
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	6812      	ldr	r2, [r2, #0]
 80038a0:	430b      	orrs	r3, r1
 80038a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038ae:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b6:	041a      	lsls	r2, r3, #16
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	4413      	add	r3, r2
 80038cc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80038d6:	4b47      	ldr	r3, [pc, #284]	; (80039f4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80038d8:	4013      	ands	r3, r2
 80038da:	68ba      	ldr	r2, [r7, #8]
 80038dc:	0091      	lsls	r1, r2, #2
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	6812      	ldr	r2, [r2, #0]
 80038e2:	430b      	orrs	r3, r1
 80038e4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80038f0:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f8:	041a      	lsls	r2, r3, #16
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800390c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003914:	061a      	lsls	r2, r3, #24
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	430a      	orrs	r2, r1
 800391c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003924:	4b34      	ldr	r3, [pc, #208]	; (80039f8 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8003926:	4413      	add	r3, r2
 8003928:	009a      	lsls	r2, r3, #2
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	441a      	add	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	441a      	add	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	6879      	ldr	r1, [r7, #4]
 8003958:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800395a:	fb01 f303 	mul.w	r3, r1, r3
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	441a      	add	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800396e:	6879      	ldr	r1, [r7, #4]
 8003970:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8003972:	fb01 f303 	mul.w	r3, r1, r3
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	441a      	add	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003986:	6879      	ldr	r1, [r7, #4]
 8003988:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800398a:	fb01 f303 	mul.w	r3, r1, r3
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	441a      	add	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	441a      	add	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80039ba:	fb01 f303 	mul.w	r3, r1, r3
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	441a      	add	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039d2:	6879      	ldr	r1, [r7, #4]
 80039d4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80039d6:	fb01 f303 	mul.w	r3, r1, r3
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	441a      	add	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ea:	4a04      	ldr	r2, [pc, #16]	; (80039fc <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d915      	bls.n	8003a1c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80039f0:	e006      	b.n	8003a00 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80039f2:	bf00      	nop
 80039f4:	ffff0003 	.word	0xffff0003
 80039f8:	10002b00 	.word	0x10002b00
 80039fc:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a06:	f043 0220 	orr.w	r2, r3, #32
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2203      	movs	r2, #3
 8003a14:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e010      	b.n	8003a3e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	e005      	b.n	8003a30 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	3304      	adds	r3, #4
 8003a2e:	60fb      	str	r3, [r7, #12]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d3f3      	bcc.n	8003a24 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop

08003a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b089      	sub	sp, #36	; 0x24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003a56:	2300      	movs	r3, #0
 8003a58:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003a5a:	4b89      	ldr	r3, [pc, #548]	; (8003c80 <HAL_GPIO_Init+0x234>)
 8003a5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a5e:	e194      	b.n	8003d8a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	2101      	movs	r1, #1
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	fa01 f303 	lsl.w	r3, r1, r3
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 8186 	beq.w	8003d84 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f003 0303 	and.w	r3, r3, #3
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d005      	beq.n	8003a90 <HAL_GPIO_Init+0x44>
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f003 0303 	and.w	r3, r3, #3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d130      	bne.n	8003af2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	2203      	movs	r2, #3
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	43db      	mvns	r3, r3
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	68da      	ldr	r2, [r3, #12]
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	43db      	mvns	r3, r3
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	091b      	lsrs	r3, r3, #4
 8003adc:	f003 0201 	and.w	r2, r3, #1
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f003 0303 	and.w	r3, r3, #3
 8003afa:	2b03      	cmp	r3, #3
 8003afc:	d017      	beq.n	8003b2e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	2203      	movs	r2, #3
 8003b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0e:	43db      	mvns	r3, r3
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	4013      	ands	r3, r2
 8003b14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	689a      	ldr	r2, [r3, #8]
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f003 0303 	and.w	r3, r3, #3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d123      	bne.n	8003b82 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	08da      	lsrs	r2, r3, #3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	3208      	adds	r2, #8
 8003b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	f003 0307 	and.w	r3, r3, #7
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	220f      	movs	r2, #15
 8003b52:	fa02 f303 	lsl.w	r3, r2, r3
 8003b56:	43db      	mvns	r3, r3
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	691a      	ldr	r2, [r3, #16]
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	f003 0307 	and.w	r3, r3, #7
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	08da      	lsrs	r2, r3, #3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	3208      	adds	r2, #8
 8003b7c:	69b9      	ldr	r1, [r7, #24]
 8003b7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	2203      	movs	r2, #3
 8003b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b92:	43db      	mvns	r3, r3
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	4013      	ands	r3, r2
 8003b98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f003 0203 	and.w	r2, r3, #3
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 80e0 	beq.w	8003d84 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bc4:	4b2f      	ldr	r3, [pc, #188]	; (8003c84 <HAL_GPIO_Init+0x238>)
 8003bc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003bca:	4a2e      	ldr	r2, [pc, #184]	; (8003c84 <HAL_GPIO_Init+0x238>)
 8003bcc:	f043 0302 	orr.w	r3, r3, #2
 8003bd0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003bd4:	4b2b      	ldr	r3, [pc, #172]	; (8003c84 <HAL_GPIO_Init+0x238>)
 8003bd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003be2:	4a29      	ldr	r2, [pc, #164]	; (8003c88 <HAL_GPIO_Init+0x23c>)
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	089b      	lsrs	r3, r3, #2
 8003be8:	3302      	adds	r3, #2
 8003bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	f003 0303 	and.w	r3, r3, #3
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	220f      	movs	r2, #15
 8003bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfe:	43db      	mvns	r3, r3
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	4013      	ands	r3, r2
 8003c04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a20      	ldr	r2, [pc, #128]	; (8003c8c <HAL_GPIO_Init+0x240>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d052      	beq.n	8003cb4 <HAL_GPIO_Init+0x268>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a1f      	ldr	r2, [pc, #124]	; (8003c90 <HAL_GPIO_Init+0x244>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d031      	beq.n	8003c7a <HAL_GPIO_Init+0x22e>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a1e      	ldr	r2, [pc, #120]	; (8003c94 <HAL_GPIO_Init+0x248>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d02b      	beq.n	8003c76 <HAL_GPIO_Init+0x22a>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a1d      	ldr	r2, [pc, #116]	; (8003c98 <HAL_GPIO_Init+0x24c>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d025      	beq.n	8003c72 <HAL_GPIO_Init+0x226>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a1c      	ldr	r2, [pc, #112]	; (8003c9c <HAL_GPIO_Init+0x250>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d01f      	beq.n	8003c6e <HAL_GPIO_Init+0x222>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a1b      	ldr	r2, [pc, #108]	; (8003ca0 <HAL_GPIO_Init+0x254>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d019      	beq.n	8003c6a <HAL_GPIO_Init+0x21e>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a1a      	ldr	r2, [pc, #104]	; (8003ca4 <HAL_GPIO_Init+0x258>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d013      	beq.n	8003c66 <HAL_GPIO_Init+0x21a>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a19      	ldr	r2, [pc, #100]	; (8003ca8 <HAL_GPIO_Init+0x25c>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d00d      	beq.n	8003c62 <HAL_GPIO_Init+0x216>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a18      	ldr	r2, [pc, #96]	; (8003cac <HAL_GPIO_Init+0x260>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d007      	beq.n	8003c5e <HAL_GPIO_Init+0x212>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a17      	ldr	r2, [pc, #92]	; (8003cb0 <HAL_GPIO_Init+0x264>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d101      	bne.n	8003c5a <HAL_GPIO_Init+0x20e>
 8003c56:	2309      	movs	r3, #9
 8003c58:	e02d      	b.n	8003cb6 <HAL_GPIO_Init+0x26a>
 8003c5a:	230a      	movs	r3, #10
 8003c5c:	e02b      	b.n	8003cb6 <HAL_GPIO_Init+0x26a>
 8003c5e:	2308      	movs	r3, #8
 8003c60:	e029      	b.n	8003cb6 <HAL_GPIO_Init+0x26a>
 8003c62:	2307      	movs	r3, #7
 8003c64:	e027      	b.n	8003cb6 <HAL_GPIO_Init+0x26a>
 8003c66:	2306      	movs	r3, #6
 8003c68:	e025      	b.n	8003cb6 <HAL_GPIO_Init+0x26a>
 8003c6a:	2305      	movs	r3, #5
 8003c6c:	e023      	b.n	8003cb6 <HAL_GPIO_Init+0x26a>
 8003c6e:	2304      	movs	r3, #4
 8003c70:	e021      	b.n	8003cb6 <HAL_GPIO_Init+0x26a>
 8003c72:	2303      	movs	r3, #3
 8003c74:	e01f      	b.n	8003cb6 <HAL_GPIO_Init+0x26a>
 8003c76:	2302      	movs	r3, #2
 8003c78:	e01d      	b.n	8003cb6 <HAL_GPIO_Init+0x26a>
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e01b      	b.n	8003cb6 <HAL_GPIO_Init+0x26a>
 8003c7e:	bf00      	nop
 8003c80:	58000080 	.word	0x58000080
 8003c84:	58024400 	.word	0x58024400
 8003c88:	58000400 	.word	0x58000400
 8003c8c:	58020000 	.word	0x58020000
 8003c90:	58020400 	.word	0x58020400
 8003c94:	58020800 	.word	0x58020800
 8003c98:	58020c00 	.word	0x58020c00
 8003c9c:	58021000 	.word	0x58021000
 8003ca0:	58021400 	.word	0x58021400
 8003ca4:	58021800 	.word	0x58021800
 8003ca8:	58021c00 	.word	0x58021c00
 8003cac:	58022000 	.word	0x58022000
 8003cb0:	58022400 	.word	0x58022400
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	69fa      	ldr	r2, [r7, #28]
 8003cb8:	f002 0203 	and.w	r2, r2, #3
 8003cbc:	0092      	lsls	r2, r2, #2
 8003cbe:	4093      	lsls	r3, r2
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cc6:	4938      	ldr	r1, [pc, #224]	; (8003da8 <HAL_GPIO_Init+0x35c>)
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	089b      	lsrs	r3, r3, #2
 8003ccc:	3302      	adds	r3, #2
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	43db      	mvns	r3, r3
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003cf2:	69ba      	ldr	r2, [r7, #24]
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003cfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	43db      	mvns	r3, r3
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	4013      	ands	r3, r2
 8003d12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d003      	beq.n	8003d28 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003d28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	43db      	mvns	r3, r3
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d003      	beq.n	8003d54 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	43db      	mvns	r3, r3
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	4013      	ands	r3, r2
 8003d68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	3301      	adds	r3, #1
 8003d88:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	fa22 f303 	lsr.w	r3, r2, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f47f ae63 	bne.w	8003a60 <HAL_GPIO_Init+0x14>
  }
}
 8003d9a:	bf00      	nop
 8003d9c:	bf00      	nop
 8003d9e:	3724      	adds	r7, #36	; 0x24
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	58000400 	.word	0x58000400

08003dac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	460b      	mov	r3, r1
 8003db6:	807b      	strh	r3, [r7, #2]
 8003db8:	4613      	mov	r3, r2
 8003dba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003dbc:	787b      	ldrb	r3, [r7, #1]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dc2:	887a      	ldrh	r2, [r7, #2]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003dc8:	e003      	b.n	8003dd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003dca:	887b      	ldrh	r3, [r7, #2]
 8003dcc:	041a      	lsls	r2, r3, #16
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	619a      	str	r2, [r3, #24]
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
	...

08003de0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003de8:	4a08      	ldr	r2, [pc, #32]	; (8003e0c <HAL_HSEM_FastTake+0x2c>)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	3320      	adds	r3, #32
 8003dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003df2:	4a07      	ldr	r2, [pc, #28]	; (8003e10 <HAL_HSEM_FastTake+0x30>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d101      	bne.n	8003dfc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	e000      	b.n	8003dfe <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	58026400 	.word	0x58026400
 8003e10:	80000300 	.word	0x80000300

08003e14 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003e1e:	4906      	ldr	r1, [pc, #24]	; (8003e38 <HAL_HSEM_Release+0x24>)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr
 8003e38:	58026400 	.word	0x58026400

08003e3c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003e44:	4b29      	ldr	r3, [pc, #164]	; (8003eec <HAL_PWREx_ConfigSupply+0xb0>)
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	f003 0307 	and.w	r3, r3, #7
 8003e4c:	2b06      	cmp	r3, #6
 8003e4e:	d00a      	beq.n	8003e66 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003e50:	4b26      	ldr	r3, [pc, #152]	; (8003eec <HAL_PWREx_ConfigSupply+0xb0>)
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d001      	beq.n	8003e62 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e040      	b.n	8003ee4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	e03e      	b.n	8003ee4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003e66:	4b21      	ldr	r3, [pc, #132]	; (8003eec <HAL_PWREx_ConfigSupply+0xb0>)
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003e6e:	491f      	ldr	r1, [pc, #124]	; (8003eec <HAL_PWREx_ConfigSupply+0xb0>)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003e76:	f7ff f969 	bl	800314c <HAL_GetTick>
 8003e7a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003e7c:	e009      	b.n	8003e92 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003e7e:	f7ff f965 	bl	800314c <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e8c:	d901      	bls.n	8003e92 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e028      	b.n	8003ee4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003e92:	4b16      	ldr	r3, [pc, #88]	; (8003eec <HAL_PWREx_ConfigSupply+0xb0>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e9e:	d1ee      	bne.n	8003e7e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b1e      	cmp	r3, #30
 8003ea4:	d008      	beq.n	8003eb8 <HAL_PWREx_ConfigSupply+0x7c>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2b2e      	cmp	r3, #46	; 0x2e
 8003eaa:	d005      	beq.n	8003eb8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b1d      	cmp	r3, #29
 8003eb0:	d002      	beq.n	8003eb8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b2d      	cmp	r3, #45	; 0x2d
 8003eb6:	d114      	bne.n	8003ee2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003eb8:	f7ff f948 	bl	800314c <HAL_GetTick>
 8003ebc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003ebe:	e009      	b.n	8003ed4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003ec0:	f7ff f944 	bl	800314c <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ece:	d901      	bls.n	8003ed4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e007      	b.n	8003ee4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003ed4:	4b05      	ldr	r3, [pc, #20]	; (8003eec <HAL_PWREx_ConfigSupply+0xb0>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee0:	d1ee      	bne.n	8003ec0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	58024800 	.word	0x58024800

08003ef0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b08c      	sub	sp, #48	; 0x30
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d102      	bne.n	8003f04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	f000 bc1d 	b.w	800473e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f000 8087 	beq.w	8004020 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f12:	4b99      	ldr	r3, [pc, #612]	; (8004178 <HAL_RCC_OscConfig+0x288>)
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003f1c:	4b96      	ldr	r3, [pc, #600]	; (8004178 <HAL_RCC_OscConfig+0x288>)
 8003f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f20:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f24:	2b10      	cmp	r3, #16
 8003f26:	d007      	beq.n	8003f38 <HAL_RCC_OscConfig+0x48>
 8003f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f2a:	2b18      	cmp	r3, #24
 8003f2c:	d110      	bne.n	8003f50 <HAL_RCC_OscConfig+0x60>
 8003f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f30:	f003 0303 	and.w	r3, r3, #3
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d10b      	bne.n	8003f50 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f38:	4b8f      	ldr	r3, [pc, #572]	; (8004178 <HAL_RCC_OscConfig+0x288>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d06c      	beq.n	800401e <HAL_RCC_OscConfig+0x12e>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d168      	bne.n	800401e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e3f6      	b.n	800473e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f58:	d106      	bne.n	8003f68 <HAL_RCC_OscConfig+0x78>
 8003f5a:	4b87      	ldr	r3, [pc, #540]	; (8004178 <HAL_RCC_OscConfig+0x288>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a86      	ldr	r2, [pc, #536]	; (8004178 <HAL_RCC_OscConfig+0x288>)
 8003f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f64:	6013      	str	r3, [r2, #0]
 8003f66:	e02e      	b.n	8003fc6 <HAL_RCC_OscConfig+0xd6>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d10c      	bne.n	8003f8a <HAL_RCC_OscConfig+0x9a>
 8003f70:	4b81      	ldr	r3, [pc, #516]	; (8004178 <HAL_RCC_OscConfig+0x288>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a80      	ldr	r2, [pc, #512]	; (8004178 <HAL_RCC_OscConfig+0x288>)
 8003f76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f7a:	6013      	str	r3, [r2, #0]
 8003f7c:	4b7e      	ldr	r3, [pc, #504]	; (8004178 <HAL_RCC_OscConfig+0x288>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a7d      	ldr	r2, [pc, #500]	; (8004178 <HAL_RCC_OscConfig+0x288>)
 8003f82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f86:	6013      	str	r3, [r2, #0]
 8003f88:	e01d      	b.n	8003fc6 <HAL_RCC_OscConfig+0xd6>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f92:	d10c      	bne.n	8003fae <HAL_RCC_OscConfig+0xbe>
 8003f94:	4b78      	ldr	r3, [pc, #480]	; (8004178 <HAL_RCC_OscConfig+0x288>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a77      	ldr	r2, [pc, #476]	; (8004178 <HAL_RCC_OscConfig+0x288>)
 8003f9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f9e:	6013      	str	r3, [r2, #0]
 8003fa0:	4b75      	ldr	r3, [pc, #468]	; (8004178 <HAL_RCC_OscConfig+0x288>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a74      	ldr	r2, [pc, #464]	; (8004178 <HAL_RCC_OscConfig+0x288>)
 8003fa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003faa:	6013      	str	r3, [r2, #0]
 8003fac:	e00b      	b.n	8003fc6 <HAL_RCC_OscConfig+0xd6>
 8003fae:	4b72      	ldr	r3, [pc, #456]	; (8004178 <HAL_RCC_OscConfig+0x288>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a71      	ldr	r2, [pc, #452]	; (8004178 <HAL_RCC_OscConfig+0x288>)
 8003fb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fb8:	6013      	str	r3, [r2, #0]
 8003fba:	4b6f      	ldr	r3, [pc, #444]	; (8004178 <HAL_RCC_OscConfig+0x288>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a6e      	ldr	r2, [pc, #440]	; (8004178 <HAL_RCC_OscConfig+0x288>)
 8003fc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fc4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d013      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fce:	f7ff f8bd 	bl	800314c <HAL_GetTick>
 8003fd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fd4:	e008      	b.n	8003fe8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fd6:	f7ff f8b9 	bl	800314c <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	2b64      	cmp	r3, #100	; 0x64
 8003fe2:	d901      	bls.n	8003fe8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e3aa      	b.n	800473e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fe8:	4b63      	ldr	r3, [pc, #396]	; (8004178 <HAL_RCC_OscConfig+0x288>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d0f0      	beq.n	8003fd6 <HAL_RCC_OscConfig+0xe6>
 8003ff4:	e014      	b.n	8004020 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff6:	f7ff f8a9 	bl	800314c <HAL_GetTick>
 8003ffa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ffc:	e008      	b.n	8004010 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ffe:	f7ff f8a5 	bl	800314c <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b64      	cmp	r3, #100	; 0x64
 800400a:	d901      	bls.n	8004010 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e396      	b.n	800473e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004010:	4b59      	ldr	r3, [pc, #356]	; (8004178 <HAL_RCC_OscConfig+0x288>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1f0      	bne.n	8003ffe <HAL_RCC_OscConfig+0x10e>
 800401c:	e000      	b.n	8004020 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800401e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 80cb 	beq.w	80041c4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800402e:	4b52      	ldr	r3, [pc, #328]	; (8004178 <HAL_RCC_OscConfig+0x288>)
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004036:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004038:	4b4f      	ldr	r3, [pc, #316]	; (8004178 <HAL_RCC_OscConfig+0x288>)
 800403a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800403e:	6a3b      	ldr	r3, [r7, #32]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d007      	beq.n	8004054 <HAL_RCC_OscConfig+0x164>
 8004044:	6a3b      	ldr	r3, [r7, #32]
 8004046:	2b18      	cmp	r3, #24
 8004048:	d156      	bne.n	80040f8 <HAL_RCC_OscConfig+0x208>
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	f003 0303 	and.w	r3, r3, #3
 8004050:	2b00      	cmp	r3, #0
 8004052:	d151      	bne.n	80040f8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004054:	4b48      	ldr	r3, [pc, #288]	; (8004178 <HAL_RCC_OscConfig+0x288>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b00      	cmp	r3, #0
 800405e:	d005      	beq.n	800406c <HAL_RCC_OscConfig+0x17c>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d101      	bne.n	800406c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e368      	b.n	800473e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800406c:	4b42      	ldr	r3, [pc, #264]	; (8004178 <HAL_RCC_OscConfig+0x288>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f023 0219 	bic.w	r2, r3, #25
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	493f      	ldr	r1, [pc, #252]	; (8004178 <HAL_RCC_OscConfig+0x288>)
 800407a:	4313      	orrs	r3, r2
 800407c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800407e:	f7ff f865 	bl	800314c <HAL_GetTick>
 8004082:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004084:	e008      	b.n	8004098 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004086:	f7ff f861 	bl	800314c <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b02      	cmp	r3, #2
 8004092:	d901      	bls.n	8004098 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e352      	b.n	800473e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004098:	4b37      	ldr	r3, [pc, #220]	; (8004178 <HAL_RCC_OscConfig+0x288>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0304 	and.w	r3, r3, #4
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d0f0      	beq.n	8004086 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040a4:	f7ff f882 	bl	80031ac <HAL_GetREVID>
 80040a8:	4603      	mov	r3, r0
 80040aa:	f241 0203 	movw	r2, #4099	; 0x1003
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d817      	bhi.n	80040e2 <HAL_RCC_OscConfig+0x1f2>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	2b40      	cmp	r3, #64	; 0x40
 80040b8:	d108      	bne.n	80040cc <HAL_RCC_OscConfig+0x1dc>
 80040ba:	4b2f      	ldr	r3, [pc, #188]	; (8004178 <HAL_RCC_OscConfig+0x288>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80040c2:	4a2d      	ldr	r2, [pc, #180]	; (8004178 <HAL_RCC_OscConfig+0x288>)
 80040c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040c8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040ca:	e07b      	b.n	80041c4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040cc:	4b2a      	ldr	r3, [pc, #168]	; (8004178 <HAL_RCC_OscConfig+0x288>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	031b      	lsls	r3, r3, #12
 80040da:	4927      	ldr	r1, [pc, #156]	; (8004178 <HAL_RCC_OscConfig+0x288>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040e0:	e070      	b.n	80041c4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040e2:	4b25      	ldr	r3, [pc, #148]	; (8004178 <HAL_RCC_OscConfig+0x288>)
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	061b      	lsls	r3, r3, #24
 80040f0:	4921      	ldr	r1, [pc, #132]	; (8004178 <HAL_RCC_OscConfig+0x288>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040f6:	e065      	b.n	80041c4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d048      	beq.n	8004192 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004100:	4b1d      	ldr	r3, [pc, #116]	; (8004178 <HAL_RCC_OscConfig+0x288>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f023 0219 	bic.w	r2, r3, #25
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	491a      	ldr	r1, [pc, #104]	; (8004178 <HAL_RCC_OscConfig+0x288>)
 800410e:	4313      	orrs	r3, r2
 8004110:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004112:	f7ff f81b 	bl	800314c <HAL_GetTick>
 8004116:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004118:	e008      	b.n	800412c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800411a:	f7ff f817 	bl	800314c <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2b02      	cmp	r3, #2
 8004126:	d901      	bls.n	800412c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e308      	b.n	800473e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800412c:	4b12      	ldr	r3, [pc, #72]	; (8004178 <HAL_RCC_OscConfig+0x288>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b00      	cmp	r3, #0
 8004136:	d0f0      	beq.n	800411a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004138:	f7ff f838 	bl	80031ac <HAL_GetREVID>
 800413c:	4603      	mov	r3, r0
 800413e:	f241 0203 	movw	r2, #4099	; 0x1003
 8004142:	4293      	cmp	r3, r2
 8004144:	d81a      	bhi.n	800417c <HAL_RCC_OscConfig+0x28c>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	2b40      	cmp	r3, #64	; 0x40
 800414c:	d108      	bne.n	8004160 <HAL_RCC_OscConfig+0x270>
 800414e:	4b0a      	ldr	r3, [pc, #40]	; (8004178 <HAL_RCC_OscConfig+0x288>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004156:	4a08      	ldr	r2, [pc, #32]	; (8004178 <HAL_RCC_OscConfig+0x288>)
 8004158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800415c:	6053      	str	r3, [r2, #4]
 800415e:	e031      	b.n	80041c4 <HAL_RCC_OscConfig+0x2d4>
 8004160:	4b05      	ldr	r3, [pc, #20]	; (8004178 <HAL_RCC_OscConfig+0x288>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	031b      	lsls	r3, r3, #12
 800416e:	4902      	ldr	r1, [pc, #8]	; (8004178 <HAL_RCC_OscConfig+0x288>)
 8004170:	4313      	orrs	r3, r2
 8004172:	604b      	str	r3, [r1, #4]
 8004174:	e026      	b.n	80041c4 <HAL_RCC_OscConfig+0x2d4>
 8004176:	bf00      	nop
 8004178:	58024400 	.word	0x58024400
 800417c:	4b9a      	ldr	r3, [pc, #616]	; (80043e8 <HAL_RCC_OscConfig+0x4f8>)
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	061b      	lsls	r3, r3, #24
 800418a:	4997      	ldr	r1, [pc, #604]	; (80043e8 <HAL_RCC_OscConfig+0x4f8>)
 800418c:	4313      	orrs	r3, r2
 800418e:	604b      	str	r3, [r1, #4]
 8004190:	e018      	b.n	80041c4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004192:	4b95      	ldr	r3, [pc, #596]	; (80043e8 <HAL_RCC_OscConfig+0x4f8>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a94      	ldr	r2, [pc, #592]	; (80043e8 <HAL_RCC_OscConfig+0x4f8>)
 8004198:	f023 0301 	bic.w	r3, r3, #1
 800419c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800419e:	f7fe ffd5 	bl	800314c <HAL_GetTick>
 80041a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80041a4:	e008      	b.n	80041b8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041a6:	f7fe ffd1 	bl	800314c <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d901      	bls.n	80041b8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e2c2      	b.n	800473e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80041b8:	4b8b      	ldr	r3, [pc, #556]	; (80043e8 <HAL_RCC_OscConfig+0x4f8>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1f0      	bne.n	80041a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0310 	and.w	r3, r3, #16
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 80a9 	beq.w	8004324 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041d2:	4b85      	ldr	r3, [pc, #532]	; (80043e8 <HAL_RCC_OscConfig+0x4f8>)
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041da:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80041dc:	4b82      	ldr	r3, [pc, #520]	; (80043e8 <HAL_RCC_OscConfig+0x4f8>)
 80041de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	2b08      	cmp	r3, #8
 80041e6:	d007      	beq.n	80041f8 <HAL_RCC_OscConfig+0x308>
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	2b18      	cmp	r3, #24
 80041ec:	d13a      	bne.n	8004264 <HAL_RCC_OscConfig+0x374>
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f003 0303 	and.w	r3, r3, #3
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d135      	bne.n	8004264 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80041f8:	4b7b      	ldr	r3, [pc, #492]	; (80043e8 <HAL_RCC_OscConfig+0x4f8>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004200:	2b00      	cmp	r3, #0
 8004202:	d005      	beq.n	8004210 <HAL_RCC_OscConfig+0x320>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	2b80      	cmp	r3, #128	; 0x80
 800420a:	d001      	beq.n	8004210 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e296      	b.n	800473e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004210:	f7fe ffcc 	bl	80031ac <HAL_GetREVID>
 8004214:	4603      	mov	r3, r0
 8004216:	f241 0203 	movw	r2, #4099	; 0x1003
 800421a:	4293      	cmp	r3, r2
 800421c:	d817      	bhi.n	800424e <HAL_RCC_OscConfig+0x35e>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	2b20      	cmp	r3, #32
 8004224:	d108      	bne.n	8004238 <HAL_RCC_OscConfig+0x348>
 8004226:	4b70      	ldr	r3, [pc, #448]	; (80043e8 <HAL_RCC_OscConfig+0x4f8>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800422e:	4a6e      	ldr	r2, [pc, #440]	; (80043e8 <HAL_RCC_OscConfig+0x4f8>)
 8004230:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004234:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004236:	e075      	b.n	8004324 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004238:	4b6b      	ldr	r3, [pc, #428]	; (80043e8 <HAL_RCC_OscConfig+0x4f8>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	069b      	lsls	r3, r3, #26
 8004246:	4968      	ldr	r1, [pc, #416]	; (80043e8 <HAL_RCC_OscConfig+0x4f8>)
 8004248:	4313      	orrs	r3, r2
 800424a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800424c:	e06a      	b.n	8004324 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800424e:	4b66      	ldr	r3, [pc, #408]	; (80043e8 <HAL_RCC_OscConfig+0x4f8>)
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	061b      	lsls	r3, r3, #24
 800425c:	4962      	ldr	r1, [pc, #392]	; (80043e8 <HAL_RCC_OscConfig+0x4f8>)
 800425e:	4313      	orrs	r3, r2
 8004260:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004262:	e05f      	b.n	8004324 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	69db      	ldr	r3, [r3, #28]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d042      	beq.n	80042f2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800426c:	4b5e      	ldr	r3, [pc, #376]	; (80043e8 <HAL_RCC_OscConfig+0x4f8>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a5d      	ldr	r2, [pc, #372]	; (80043e8 <HAL_RCC_OscConfig+0x4f8>)
 8004272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004276:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004278:	f7fe ff68 	bl	800314c <HAL_GetTick>
 800427c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004280:	f7fe ff64 	bl	800314c <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e255      	b.n	800473e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004292:	4b55      	ldr	r3, [pc, #340]	; (80043e8 <HAL_RCC_OscConfig+0x4f8>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0f0      	beq.n	8004280 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800429e:	f7fe ff85 	bl	80031ac <HAL_GetREVID>
 80042a2:	4603      	mov	r3, r0
 80042a4:	f241 0203 	movw	r2, #4099	; 0x1003
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d817      	bhi.n	80042dc <HAL_RCC_OscConfig+0x3ec>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	2b20      	cmp	r3, #32
 80042b2:	d108      	bne.n	80042c6 <HAL_RCC_OscConfig+0x3d6>
 80042b4:	4b4c      	ldr	r3, [pc, #304]	; (80043e8 <HAL_RCC_OscConfig+0x4f8>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80042bc:	4a4a      	ldr	r2, [pc, #296]	; (80043e8 <HAL_RCC_OscConfig+0x4f8>)
 80042be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042c2:	6053      	str	r3, [r2, #4]
 80042c4:	e02e      	b.n	8004324 <HAL_RCC_OscConfig+0x434>
 80042c6:	4b48      	ldr	r3, [pc, #288]	; (80043e8 <HAL_RCC_OscConfig+0x4f8>)
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	069b      	lsls	r3, r3, #26
 80042d4:	4944      	ldr	r1, [pc, #272]	; (80043e8 <HAL_RCC_OscConfig+0x4f8>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	604b      	str	r3, [r1, #4]
 80042da:	e023      	b.n	8004324 <HAL_RCC_OscConfig+0x434>
 80042dc:	4b42      	ldr	r3, [pc, #264]	; (80043e8 <HAL_RCC_OscConfig+0x4f8>)
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a1b      	ldr	r3, [r3, #32]
 80042e8:	061b      	lsls	r3, r3, #24
 80042ea:	493f      	ldr	r1, [pc, #252]	; (80043e8 <HAL_RCC_OscConfig+0x4f8>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	60cb      	str	r3, [r1, #12]
 80042f0:	e018      	b.n	8004324 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80042f2:	4b3d      	ldr	r3, [pc, #244]	; (80043e8 <HAL_RCC_OscConfig+0x4f8>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a3c      	ldr	r2, [pc, #240]	; (80043e8 <HAL_RCC_OscConfig+0x4f8>)
 80042f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fe:	f7fe ff25 	bl	800314c <HAL_GetTick>
 8004302:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004304:	e008      	b.n	8004318 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004306:	f7fe ff21 	bl	800314c <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d901      	bls.n	8004318 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e212      	b.n	800473e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004318:	4b33      	ldr	r3, [pc, #204]	; (80043e8 <HAL_RCC_OscConfig+0x4f8>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1f0      	bne.n	8004306 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0308 	and.w	r3, r3, #8
 800432c:	2b00      	cmp	r3, #0
 800432e:	d036      	beq.n	800439e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d019      	beq.n	800436c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004338:	4b2b      	ldr	r3, [pc, #172]	; (80043e8 <HAL_RCC_OscConfig+0x4f8>)
 800433a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800433c:	4a2a      	ldr	r2, [pc, #168]	; (80043e8 <HAL_RCC_OscConfig+0x4f8>)
 800433e:	f043 0301 	orr.w	r3, r3, #1
 8004342:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004344:	f7fe ff02 	bl	800314c <HAL_GetTick>
 8004348:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800434c:	f7fe fefe 	bl	800314c <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e1ef      	b.n	800473e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800435e:	4b22      	ldr	r3, [pc, #136]	; (80043e8 <HAL_RCC_OscConfig+0x4f8>)
 8004360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0f0      	beq.n	800434c <HAL_RCC_OscConfig+0x45c>
 800436a:	e018      	b.n	800439e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800436c:	4b1e      	ldr	r3, [pc, #120]	; (80043e8 <HAL_RCC_OscConfig+0x4f8>)
 800436e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004370:	4a1d      	ldr	r2, [pc, #116]	; (80043e8 <HAL_RCC_OscConfig+0x4f8>)
 8004372:	f023 0301 	bic.w	r3, r3, #1
 8004376:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004378:	f7fe fee8 	bl	800314c <HAL_GetTick>
 800437c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004380:	f7fe fee4 	bl	800314c <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e1d5      	b.n	800473e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004392:	4b15      	ldr	r3, [pc, #84]	; (80043e8 <HAL_RCC_OscConfig+0x4f8>)
 8004394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1f0      	bne.n	8004380 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0320 	and.w	r3, r3, #32
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d039      	beq.n	800441e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d01c      	beq.n	80043ec <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80043b2:	4b0d      	ldr	r3, [pc, #52]	; (80043e8 <HAL_RCC_OscConfig+0x4f8>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a0c      	ldr	r2, [pc, #48]	; (80043e8 <HAL_RCC_OscConfig+0x4f8>)
 80043b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80043bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80043be:	f7fe fec5 	bl	800314c <HAL_GetTick>
 80043c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80043c4:	e008      	b.n	80043d8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80043c6:	f7fe fec1 	bl	800314c <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d901      	bls.n	80043d8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e1b2      	b.n	800473e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80043d8:	4b03      	ldr	r3, [pc, #12]	; (80043e8 <HAL_RCC_OscConfig+0x4f8>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d0f0      	beq.n	80043c6 <HAL_RCC_OscConfig+0x4d6>
 80043e4:	e01b      	b.n	800441e <HAL_RCC_OscConfig+0x52e>
 80043e6:	bf00      	nop
 80043e8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80043ec:	4b9b      	ldr	r3, [pc, #620]	; (800465c <HAL_RCC_OscConfig+0x76c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a9a      	ldr	r2, [pc, #616]	; (800465c <HAL_RCC_OscConfig+0x76c>)
 80043f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043f6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80043f8:	f7fe fea8 	bl	800314c <HAL_GetTick>
 80043fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004400:	f7fe fea4 	bl	800314c <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e195      	b.n	800473e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004412:	4b92      	ldr	r3, [pc, #584]	; (800465c <HAL_RCC_OscConfig+0x76c>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1f0      	bne.n	8004400 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0304 	and.w	r3, r3, #4
 8004426:	2b00      	cmp	r3, #0
 8004428:	f000 8081 	beq.w	800452e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800442c:	4b8c      	ldr	r3, [pc, #560]	; (8004660 <HAL_RCC_OscConfig+0x770>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a8b      	ldr	r2, [pc, #556]	; (8004660 <HAL_RCC_OscConfig+0x770>)
 8004432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004436:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004438:	f7fe fe88 	bl	800314c <HAL_GetTick>
 800443c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004440:	f7fe fe84 	bl	800314c <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b64      	cmp	r3, #100	; 0x64
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e175      	b.n	800473e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004452:	4b83      	ldr	r3, [pc, #524]	; (8004660 <HAL_RCC_OscConfig+0x770>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0f0      	beq.n	8004440 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d106      	bne.n	8004474 <HAL_RCC_OscConfig+0x584>
 8004466:	4b7d      	ldr	r3, [pc, #500]	; (800465c <HAL_RCC_OscConfig+0x76c>)
 8004468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446a:	4a7c      	ldr	r2, [pc, #496]	; (800465c <HAL_RCC_OscConfig+0x76c>)
 800446c:	f043 0301 	orr.w	r3, r3, #1
 8004470:	6713      	str	r3, [r2, #112]	; 0x70
 8004472:	e02d      	b.n	80044d0 <HAL_RCC_OscConfig+0x5e0>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10c      	bne.n	8004496 <HAL_RCC_OscConfig+0x5a6>
 800447c:	4b77      	ldr	r3, [pc, #476]	; (800465c <HAL_RCC_OscConfig+0x76c>)
 800447e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004480:	4a76      	ldr	r2, [pc, #472]	; (800465c <HAL_RCC_OscConfig+0x76c>)
 8004482:	f023 0301 	bic.w	r3, r3, #1
 8004486:	6713      	str	r3, [r2, #112]	; 0x70
 8004488:	4b74      	ldr	r3, [pc, #464]	; (800465c <HAL_RCC_OscConfig+0x76c>)
 800448a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448c:	4a73      	ldr	r2, [pc, #460]	; (800465c <HAL_RCC_OscConfig+0x76c>)
 800448e:	f023 0304 	bic.w	r3, r3, #4
 8004492:	6713      	str	r3, [r2, #112]	; 0x70
 8004494:	e01c      	b.n	80044d0 <HAL_RCC_OscConfig+0x5e0>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	2b05      	cmp	r3, #5
 800449c:	d10c      	bne.n	80044b8 <HAL_RCC_OscConfig+0x5c8>
 800449e:	4b6f      	ldr	r3, [pc, #444]	; (800465c <HAL_RCC_OscConfig+0x76c>)
 80044a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a2:	4a6e      	ldr	r2, [pc, #440]	; (800465c <HAL_RCC_OscConfig+0x76c>)
 80044a4:	f043 0304 	orr.w	r3, r3, #4
 80044a8:	6713      	str	r3, [r2, #112]	; 0x70
 80044aa:	4b6c      	ldr	r3, [pc, #432]	; (800465c <HAL_RCC_OscConfig+0x76c>)
 80044ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ae:	4a6b      	ldr	r2, [pc, #428]	; (800465c <HAL_RCC_OscConfig+0x76c>)
 80044b0:	f043 0301 	orr.w	r3, r3, #1
 80044b4:	6713      	str	r3, [r2, #112]	; 0x70
 80044b6:	e00b      	b.n	80044d0 <HAL_RCC_OscConfig+0x5e0>
 80044b8:	4b68      	ldr	r3, [pc, #416]	; (800465c <HAL_RCC_OscConfig+0x76c>)
 80044ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044bc:	4a67      	ldr	r2, [pc, #412]	; (800465c <HAL_RCC_OscConfig+0x76c>)
 80044be:	f023 0301 	bic.w	r3, r3, #1
 80044c2:	6713      	str	r3, [r2, #112]	; 0x70
 80044c4:	4b65      	ldr	r3, [pc, #404]	; (800465c <HAL_RCC_OscConfig+0x76c>)
 80044c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c8:	4a64      	ldr	r2, [pc, #400]	; (800465c <HAL_RCC_OscConfig+0x76c>)
 80044ca:	f023 0304 	bic.w	r3, r3, #4
 80044ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d015      	beq.n	8004504 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d8:	f7fe fe38 	bl	800314c <HAL_GetTick>
 80044dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044de:	e00a      	b.n	80044f6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044e0:	f7fe fe34 	bl	800314c <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e123      	b.n	800473e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044f6:	4b59      	ldr	r3, [pc, #356]	; (800465c <HAL_RCC_OscConfig+0x76c>)
 80044f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d0ee      	beq.n	80044e0 <HAL_RCC_OscConfig+0x5f0>
 8004502:	e014      	b.n	800452e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004504:	f7fe fe22 	bl	800314c <HAL_GetTick>
 8004508:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800450a:	e00a      	b.n	8004522 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800450c:	f7fe fe1e 	bl	800314c <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	f241 3288 	movw	r2, #5000	; 0x1388
 800451a:	4293      	cmp	r3, r2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e10d      	b.n	800473e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004522:	4b4e      	ldr	r3, [pc, #312]	; (800465c <HAL_RCC_OscConfig+0x76c>)
 8004524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1ee      	bne.n	800450c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	2b00      	cmp	r3, #0
 8004534:	f000 8102 	beq.w	800473c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004538:	4b48      	ldr	r3, [pc, #288]	; (800465c <HAL_RCC_OscConfig+0x76c>)
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004540:	2b18      	cmp	r3, #24
 8004542:	f000 80bd 	beq.w	80046c0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	2b02      	cmp	r3, #2
 800454c:	f040 809e 	bne.w	800468c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004550:	4b42      	ldr	r3, [pc, #264]	; (800465c <HAL_RCC_OscConfig+0x76c>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a41      	ldr	r2, [pc, #260]	; (800465c <HAL_RCC_OscConfig+0x76c>)
 8004556:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800455a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455c:	f7fe fdf6 	bl	800314c <HAL_GetTick>
 8004560:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004564:	f7fe fdf2 	bl	800314c <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e0e3      	b.n	800473e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004576:	4b39      	ldr	r3, [pc, #228]	; (800465c <HAL_RCC_OscConfig+0x76c>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1f0      	bne.n	8004564 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004582:	4b36      	ldr	r3, [pc, #216]	; (800465c <HAL_RCC_OscConfig+0x76c>)
 8004584:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004586:	4b37      	ldr	r3, [pc, #220]	; (8004664 <HAL_RCC_OscConfig+0x774>)
 8004588:	4013      	ands	r3, r2
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004592:	0112      	lsls	r2, r2, #4
 8004594:	430a      	orrs	r2, r1
 8004596:	4931      	ldr	r1, [pc, #196]	; (800465c <HAL_RCC_OscConfig+0x76c>)
 8004598:	4313      	orrs	r3, r2
 800459a:	628b      	str	r3, [r1, #40]	; 0x28
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a0:	3b01      	subs	r3, #1
 80045a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045aa:	3b01      	subs	r3, #1
 80045ac:	025b      	lsls	r3, r3, #9
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	431a      	orrs	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b6:	3b01      	subs	r3, #1
 80045b8:	041b      	lsls	r3, r3, #16
 80045ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c4:	3b01      	subs	r3, #1
 80045c6:	061b      	lsls	r3, r3, #24
 80045c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80045cc:	4923      	ldr	r1, [pc, #140]	; (800465c <HAL_RCC_OscConfig+0x76c>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80045d2:	4b22      	ldr	r3, [pc, #136]	; (800465c <HAL_RCC_OscConfig+0x76c>)
 80045d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d6:	4a21      	ldr	r2, [pc, #132]	; (800465c <HAL_RCC_OscConfig+0x76c>)
 80045d8:	f023 0301 	bic.w	r3, r3, #1
 80045dc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80045de:	4b1f      	ldr	r3, [pc, #124]	; (800465c <HAL_RCC_OscConfig+0x76c>)
 80045e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045e2:	4b21      	ldr	r3, [pc, #132]	; (8004668 <HAL_RCC_OscConfig+0x778>)
 80045e4:	4013      	ands	r3, r2
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80045ea:	00d2      	lsls	r2, r2, #3
 80045ec:	491b      	ldr	r1, [pc, #108]	; (800465c <HAL_RCC_OscConfig+0x76c>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80045f2:	4b1a      	ldr	r3, [pc, #104]	; (800465c <HAL_RCC_OscConfig+0x76c>)
 80045f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f6:	f023 020c 	bic.w	r2, r3, #12
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fe:	4917      	ldr	r1, [pc, #92]	; (800465c <HAL_RCC_OscConfig+0x76c>)
 8004600:	4313      	orrs	r3, r2
 8004602:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004604:	4b15      	ldr	r3, [pc, #84]	; (800465c <HAL_RCC_OscConfig+0x76c>)
 8004606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004608:	f023 0202 	bic.w	r2, r3, #2
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004610:	4912      	ldr	r1, [pc, #72]	; (800465c <HAL_RCC_OscConfig+0x76c>)
 8004612:	4313      	orrs	r3, r2
 8004614:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004616:	4b11      	ldr	r3, [pc, #68]	; (800465c <HAL_RCC_OscConfig+0x76c>)
 8004618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461a:	4a10      	ldr	r2, [pc, #64]	; (800465c <HAL_RCC_OscConfig+0x76c>)
 800461c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004620:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004622:	4b0e      	ldr	r3, [pc, #56]	; (800465c <HAL_RCC_OscConfig+0x76c>)
 8004624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004626:	4a0d      	ldr	r2, [pc, #52]	; (800465c <HAL_RCC_OscConfig+0x76c>)
 8004628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800462c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800462e:	4b0b      	ldr	r3, [pc, #44]	; (800465c <HAL_RCC_OscConfig+0x76c>)
 8004630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004632:	4a0a      	ldr	r2, [pc, #40]	; (800465c <HAL_RCC_OscConfig+0x76c>)
 8004634:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004638:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800463a:	4b08      	ldr	r3, [pc, #32]	; (800465c <HAL_RCC_OscConfig+0x76c>)
 800463c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463e:	4a07      	ldr	r2, [pc, #28]	; (800465c <HAL_RCC_OscConfig+0x76c>)
 8004640:	f043 0301 	orr.w	r3, r3, #1
 8004644:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004646:	4b05      	ldr	r3, [pc, #20]	; (800465c <HAL_RCC_OscConfig+0x76c>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a04      	ldr	r2, [pc, #16]	; (800465c <HAL_RCC_OscConfig+0x76c>)
 800464c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004650:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004652:	f7fe fd7b 	bl	800314c <HAL_GetTick>
 8004656:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004658:	e011      	b.n	800467e <HAL_RCC_OscConfig+0x78e>
 800465a:	bf00      	nop
 800465c:	58024400 	.word	0x58024400
 8004660:	58024800 	.word	0x58024800
 8004664:	fffffc0c 	.word	0xfffffc0c
 8004668:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800466c:	f7fe fd6e 	bl	800314c <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e05f      	b.n	800473e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800467e:	4b32      	ldr	r3, [pc, #200]	; (8004748 <HAL_RCC_OscConfig+0x858>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d0f0      	beq.n	800466c <HAL_RCC_OscConfig+0x77c>
 800468a:	e057      	b.n	800473c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800468c:	4b2e      	ldr	r3, [pc, #184]	; (8004748 <HAL_RCC_OscConfig+0x858>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a2d      	ldr	r2, [pc, #180]	; (8004748 <HAL_RCC_OscConfig+0x858>)
 8004692:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004696:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004698:	f7fe fd58 	bl	800314c <HAL_GetTick>
 800469c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800469e:	e008      	b.n	80046b2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046a0:	f7fe fd54 	bl	800314c <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e045      	b.n	800473e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046b2:	4b25      	ldr	r3, [pc, #148]	; (8004748 <HAL_RCC_OscConfig+0x858>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1f0      	bne.n	80046a0 <HAL_RCC_OscConfig+0x7b0>
 80046be:	e03d      	b.n	800473c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80046c0:	4b21      	ldr	r3, [pc, #132]	; (8004748 <HAL_RCC_OscConfig+0x858>)
 80046c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80046c6:	4b20      	ldr	r3, [pc, #128]	; (8004748 <HAL_RCC_OscConfig+0x858>)
 80046c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ca:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d031      	beq.n	8004738 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	f003 0203 	and.w	r2, r3, #3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046de:	429a      	cmp	r2, r3
 80046e0:	d12a      	bne.n	8004738 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	091b      	lsrs	r3, r3, #4
 80046e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d122      	bne.n	8004738 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80046fe:	429a      	cmp	r2, r3
 8004700:	d11a      	bne.n	8004738 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	0a5b      	lsrs	r3, r3, #9
 8004706:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800470e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004710:	429a      	cmp	r2, r3
 8004712:	d111      	bne.n	8004738 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	0c1b      	lsrs	r3, r3, #16
 8004718:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004720:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004722:	429a      	cmp	r2, r3
 8004724:	d108      	bne.n	8004738 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	0e1b      	lsrs	r3, r3, #24
 800472a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004732:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004734:	429a      	cmp	r2, r3
 8004736:	d001      	beq.n	800473c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e000      	b.n	800473e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3730      	adds	r7, #48	; 0x30
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	58024400 	.word	0x58024400

0800474c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e19c      	b.n	8004a9a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004760:	4b8a      	ldr	r3, [pc, #552]	; (800498c <HAL_RCC_ClockConfig+0x240>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 030f 	and.w	r3, r3, #15
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	429a      	cmp	r2, r3
 800476c:	d910      	bls.n	8004790 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800476e:	4b87      	ldr	r3, [pc, #540]	; (800498c <HAL_RCC_ClockConfig+0x240>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f023 020f 	bic.w	r2, r3, #15
 8004776:	4985      	ldr	r1, [pc, #532]	; (800498c <HAL_RCC_ClockConfig+0x240>)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	4313      	orrs	r3, r2
 800477c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800477e:	4b83      	ldr	r3, [pc, #524]	; (800498c <HAL_RCC_ClockConfig+0x240>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 030f 	and.w	r3, r3, #15
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	429a      	cmp	r2, r3
 800478a:	d001      	beq.n	8004790 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e184      	b.n	8004a9a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b00      	cmp	r3, #0
 800479a:	d010      	beq.n	80047be <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	691a      	ldr	r2, [r3, #16]
 80047a0:	4b7b      	ldr	r3, [pc, #492]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d908      	bls.n	80047be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80047ac:	4b78      	ldr	r3, [pc, #480]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	4975      	ldr	r1, [pc, #468]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0308 	and.w	r3, r3, #8
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d010      	beq.n	80047ec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	695a      	ldr	r2, [r3, #20]
 80047ce:	4b70      	ldr	r3, [pc, #448]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d908      	bls.n	80047ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80047da:	4b6d      	ldr	r3, [pc, #436]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	496a      	ldr	r1, [pc, #424]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0310 	and.w	r3, r3, #16
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d010      	beq.n	800481a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	699a      	ldr	r2, [r3, #24]
 80047fc:	4b64      	ldr	r3, [pc, #400]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 80047fe:	69db      	ldr	r3, [r3, #28]
 8004800:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004804:	429a      	cmp	r2, r3
 8004806:	d908      	bls.n	800481a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004808:	4b61      	ldr	r3, [pc, #388]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 800480a:	69db      	ldr	r3, [r3, #28]
 800480c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	495e      	ldr	r1, [pc, #376]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 8004816:	4313      	orrs	r3, r2
 8004818:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0320 	and.w	r3, r3, #32
 8004822:	2b00      	cmp	r3, #0
 8004824:	d010      	beq.n	8004848 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	69da      	ldr	r2, [r3, #28]
 800482a:	4b59      	ldr	r3, [pc, #356]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004832:	429a      	cmp	r2, r3
 8004834:	d908      	bls.n	8004848 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004836:	4b56      	ldr	r3, [pc, #344]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	69db      	ldr	r3, [r3, #28]
 8004842:	4953      	ldr	r1, [pc, #332]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 8004844:	4313      	orrs	r3, r2
 8004846:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b00      	cmp	r3, #0
 8004852:	d010      	beq.n	8004876 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68da      	ldr	r2, [r3, #12]
 8004858:	4b4d      	ldr	r3, [pc, #308]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	f003 030f 	and.w	r3, r3, #15
 8004860:	429a      	cmp	r2, r3
 8004862:	d908      	bls.n	8004876 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004864:	4b4a      	ldr	r3, [pc, #296]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	f023 020f 	bic.w	r2, r3, #15
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	4947      	ldr	r1, [pc, #284]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 8004872:	4313      	orrs	r3, r2
 8004874:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d055      	beq.n	800492e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004882:	4b43      	ldr	r3, [pc, #268]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	4940      	ldr	r1, [pc, #256]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 8004890:	4313      	orrs	r3, r2
 8004892:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	2b02      	cmp	r3, #2
 800489a:	d107      	bne.n	80048ac <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800489c:	4b3c      	ldr	r3, [pc, #240]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d121      	bne.n	80048ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e0f6      	b.n	8004a9a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	2b03      	cmp	r3, #3
 80048b2:	d107      	bne.n	80048c4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048b4:	4b36      	ldr	r3, [pc, #216]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d115      	bne.n	80048ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e0ea      	b.n	8004a9a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d107      	bne.n	80048dc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80048cc:	4b30      	ldr	r3, [pc, #192]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d109      	bne.n	80048ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e0de      	b.n	8004a9a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048dc:	4b2c      	ldr	r3, [pc, #176]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0304 	and.w	r3, r3, #4
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d101      	bne.n	80048ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e0d6      	b.n	8004a9a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048ec:	4b28      	ldr	r3, [pc, #160]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	f023 0207 	bic.w	r2, r3, #7
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	4925      	ldr	r1, [pc, #148]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048fe:	f7fe fc25 	bl	800314c <HAL_GetTick>
 8004902:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004904:	e00a      	b.n	800491c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004906:	f7fe fc21 	bl	800314c <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	f241 3288 	movw	r2, #5000	; 0x1388
 8004914:	4293      	cmp	r3, r2
 8004916:	d901      	bls.n	800491c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e0be      	b.n	8004a9a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800491c:	4b1c      	ldr	r3, [pc, #112]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	00db      	lsls	r3, r3, #3
 800492a:	429a      	cmp	r2, r3
 800492c:	d1eb      	bne.n	8004906 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d010      	beq.n	800495c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68da      	ldr	r2, [r3, #12]
 800493e:	4b14      	ldr	r3, [pc, #80]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	f003 030f 	and.w	r3, r3, #15
 8004946:	429a      	cmp	r2, r3
 8004948:	d208      	bcs.n	800495c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800494a:	4b11      	ldr	r3, [pc, #68]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	f023 020f 	bic.w	r2, r3, #15
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	490e      	ldr	r1, [pc, #56]	; (8004990 <HAL_RCC_ClockConfig+0x244>)
 8004958:	4313      	orrs	r3, r2
 800495a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800495c:	4b0b      	ldr	r3, [pc, #44]	; (800498c <HAL_RCC_ClockConfig+0x240>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 030f 	and.w	r3, r3, #15
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	429a      	cmp	r2, r3
 8004968:	d214      	bcs.n	8004994 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800496a:	4b08      	ldr	r3, [pc, #32]	; (800498c <HAL_RCC_ClockConfig+0x240>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f023 020f 	bic.w	r2, r3, #15
 8004972:	4906      	ldr	r1, [pc, #24]	; (800498c <HAL_RCC_ClockConfig+0x240>)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	4313      	orrs	r3, r2
 8004978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800497a:	4b04      	ldr	r3, [pc, #16]	; (800498c <HAL_RCC_ClockConfig+0x240>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 030f 	and.w	r3, r3, #15
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	429a      	cmp	r2, r3
 8004986:	d005      	beq.n	8004994 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e086      	b.n	8004a9a <HAL_RCC_ClockConfig+0x34e>
 800498c:	52002000 	.word	0x52002000
 8004990:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0304 	and.w	r3, r3, #4
 800499c:	2b00      	cmp	r3, #0
 800499e:	d010      	beq.n	80049c2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	691a      	ldr	r2, [r3, #16]
 80049a4:	4b3f      	ldr	r3, [pc, #252]	; (8004aa4 <HAL_RCC_ClockConfig+0x358>)
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d208      	bcs.n	80049c2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80049b0:	4b3c      	ldr	r3, [pc, #240]	; (8004aa4 <HAL_RCC_ClockConfig+0x358>)
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	4939      	ldr	r1, [pc, #228]	; (8004aa4 <HAL_RCC_ClockConfig+0x358>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0308 	and.w	r3, r3, #8
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d010      	beq.n	80049f0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	695a      	ldr	r2, [r3, #20]
 80049d2:	4b34      	ldr	r3, [pc, #208]	; (8004aa4 <HAL_RCC_ClockConfig+0x358>)
 80049d4:	69db      	ldr	r3, [r3, #28]
 80049d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049da:	429a      	cmp	r2, r3
 80049dc:	d208      	bcs.n	80049f0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80049de:	4b31      	ldr	r3, [pc, #196]	; (8004aa4 <HAL_RCC_ClockConfig+0x358>)
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	492e      	ldr	r1, [pc, #184]	; (8004aa4 <HAL_RCC_ClockConfig+0x358>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0310 	and.w	r3, r3, #16
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d010      	beq.n	8004a1e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	699a      	ldr	r2, [r3, #24]
 8004a00:	4b28      	ldr	r3, [pc, #160]	; (8004aa4 <HAL_RCC_ClockConfig+0x358>)
 8004a02:	69db      	ldr	r3, [r3, #28]
 8004a04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d208      	bcs.n	8004a1e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004a0c:	4b25      	ldr	r3, [pc, #148]	; (8004aa4 <HAL_RCC_ClockConfig+0x358>)
 8004a0e:	69db      	ldr	r3, [r3, #28]
 8004a10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	4922      	ldr	r1, [pc, #136]	; (8004aa4 <HAL_RCC_ClockConfig+0x358>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0320 	and.w	r3, r3, #32
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d010      	beq.n	8004a4c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	69da      	ldr	r2, [r3, #28]
 8004a2e:	4b1d      	ldr	r3, [pc, #116]	; (8004aa4 <HAL_RCC_ClockConfig+0x358>)
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d208      	bcs.n	8004a4c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004a3a:	4b1a      	ldr	r3, [pc, #104]	; (8004aa4 <HAL_RCC_ClockConfig+0x358>)
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	4917      	ldr	r1, [pc, #92]	; (8004aa4 <HAL_RCC_ClockConfig+0x358>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004a4c:	f000 f834 	bl	8004ab8 <HAL_RCC_GetSysClockFreq>
 8004a50:	4602      	mov	r2, r0
 8004a52:	4b14      	ldr	r3, [pc, #80]	; (8004aa4 <HAL_RCC_ClockConfig+0x358>)
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	0a1b      	lsrs	r3, r3, #8
 8004a58:	f003 030f 	and.w	r3, r3, #15
 8004a5c:	4912      	ldr	r1, [pc, #72]	; (8004aa8 <HAL_RCC_ClockConfig+0x35c>)
 8004a5e:	5ccb      	ldrb	r3, [r1, r3]
 8004a60:	f003 031f 	and.w	r3, r3, #31
 8004a64:	fa22 f303 	lsr.w	r3, r2, r3
 8004a68:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a6a:	4b0e      	ldr	r3, [pc, #56]	; (8004aa4 <HAL_RCC_ClockConfig+0x358>)
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	4a0d      	ldr	r2, [pc, #52]	; (8004aa8 <HAL_RCC_ClockConfig+0x35c>)
 8004a74:	5cd3      	ldrb	r3, [r2, r3]
 8004a76:	f003 031f 	and.w	r3, r3, #31
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a80:	4a0a      	ldr	r2, [pc, #40]	; (8004aac <HAL_RCC_ClockConfig+0x360>)
 8004a82:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a84:	4a0a      	ldr	r2, [pc, #40]	; (8004ab0 <HAL_RCC_ClockConfig+0x364>)
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004a8a:	4b0a      	ldr	r3, [pc, #40]	; (8004ab4 <HAL_RCC_ClockConfig+0x368>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7fe f990 	bl	8002db4 <HAL_InitTick>
 8004a94:	4603      	mov	r3, r0
 8004a96:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3718      	adds	r7, #24
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	58024400 	.word	0x58024400
 8004aa8:	0800f8d4 	.word	0x0800f8d4
 8004aac:	24000004 	.word	0x24000004
 8004ab0:	24000000 	.word	0x24000000
 8004ab4:	24000010 	.word	0x24000010

08004ab8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b089      	sub	sp, #36	; 0x24
 8004abc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004abe:	4bb3      	ldr	r3, [pc, #716]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ac6:	2b18      	cmp	r3, #24
 8004ac8:	f200 8155 	bhi.w	8004d76 <HAL_RCC_GetSysClockFreq+0x2be>
 8004acc:	a201      	add	r2, pc, #4	; (adr r2, 8004ad4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad2:	bf00      	nop
 8004ad4:	08004b39 	.word	0x08004b39
 8004ad8:	08004d77 	.word	0x08004d77
 8004adc:	08004d77 	.word	0x08004d77
 8004ae0:	08004d77 	.word	0x08004d77
 8004ae4:	08004d77 	.word	0x08004d77
 8004ae8:	08004d77 	.word	0x08004d77
 8004aec:	08004d77 	.word	0x08004d77
 8004af0:	08004d77 	.word	0x08004d77
 8004af4:	08004b5f 	.word	0x08004b5f
 8004af8:	08004d77 	.word	0x08004d77
 8004afc:	08004d77 	.word	0x08004d77
 8004b00:	08004d77 	.word	0x08004d77
 8004b04:	08004d77 	.word	0x08004d77
 8004b08:	08004d77 	.word	0x08004d77
 8004b0c:	08004d77 	.word	0x08004d77
 8004b10:	08004d77 	.word	0x08004d77
 8004b14:	08004b65 	.word	0x08004b65
 8004b18:	08004d77 	.word	0x08004d77
 8004b1c:	08004d77 	.word	0x08004d77
 8004b20:	08004d77 	.word	0x08004d77
 8004b24:	08004d77 	.word	0x08004d77
 8004b28:	08004d77 	.word	0x08004d77
 8004b2c:	08004d77 	.word	0x08004d77
 8004b30:	08004d77 	.word	0x08004d77
 8004b34:	08004b6b 	.word	0x08004b6b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b38:	4b94      	ldr	r3, [pc, #592]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0320 	and.w	r3, r3, #32
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d009      	beq.n	8004b58 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b44:	4b91      	ldr	r3, [pc, #580]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	08db      	lsrs	r3, r3, #3
 8004b4a:	f003 0303 	and.w	r3, r3, #3
 8004b4e:	4a90      	ldr	r2, [pc, #576]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b50:	fa22 f303 	lsr.w	r3, r2, r3
 8004b54:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004b56:	e111      	b.n	8004d7c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004b58:	4b8d      	ldr	r3, [pc, #564]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b5a:	61bb      	str	r3, [r7, #24]
    break;
 8004b5c:	e10e      	b.n	8004d7c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004b5e:	4b8d      	ldr	r3, [pc, #564]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004b60:	61bb      	str	r3, [r7, #24]
    break;
 8004b62:	e10b      	b.n	8004d7c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004b64:	4b8c      	ldr	r3, [pc, #560]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004b66:	61bb      	str	r3, [r7, #24]
    break;
 8004b68:	e108      	b.n	8004d7c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b6a:	4b88      	ldr	r3, [pc, #544]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6e:	f003 0303 	and.w	r3, r3, #3
 8004b72:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004b74:	4b85      	ldr	r3, [pc, #532]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b78:	091b      	lsrs	r3, r3, #4
 8004b7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b7e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004b80:	4b82      	ldr	r3, [pc, #520]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004b8a:	4b80      	ldr	r3, [pc, #512]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b8e:	08db      	lsrs	r3, r3, #3
 8004b90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	fb02 f303 	mul.w	r3, r2, r3
 8004b9a:	ee07 3a90 	vmov	s15, r3
 8004b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ba2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 80e1 	beq.w	8004d70 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	f000 8083 	beq.w	8004cbc <HAL_RCC_GetSysClockFreq+0x204>
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	f200 80a1 	bhi.w	8004d00 <HAL_RCC_GetSysClockFreq+0x248>
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d003      	beq.n	8004bcc <HAL_RCC_GetSysClockFreq+0x114>
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d056      	beq.n	8004c78 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004bca:	e099      	b.n	8004d00 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bcc:	4b6f      	ldr	r3, [pc, #444]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0320 	and.w	r3, r3, #32
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d02d      	beq.n	8004c34 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004bd8:	4b6c      	ldr	r3, [pc, #432]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	08db      	lsrs	r3, r3, #3
 8004bde:	f003 0303 	and.w	r3, r3, #3
 8004be2:	4a6b      	ldr	r2, [pc, #428]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004be4:	fa22 f303 	lsr.w	r3, r2, r3
 8004be8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	ee07 3a90 	vmov	s15, r3
 8004bf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	ee07 3a90 	vmov	s15, r3
 8004bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c02:	4b62      	ldr	r3, [pc, #392]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c0a:	ee07 3a90 	vmov	s15, r3
 8004c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c12:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c16:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004d9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c2e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004c32:	e087      	b.n	8004d44 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	ee07 3a90 	vmov	s15, r3
 8004c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c3e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004da0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c46:	4b51      	ldr	r3, [pc, #324]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c4e:	ee07 3a90 	vmov	s15, r3
 8004c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c56:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c5a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004d9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c76:	e065      	b.n	8004d44 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	ee07 3a90 	vmov	s15, r3
 8004c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c82:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004da4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c8a:	4b40      	ldr	r3, [pc, #256]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c92:	ee07 3a90 	vmov	s15, r3
 8004c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c9e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004d9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004caa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cba:	e043      	b.n	8004d44 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	ee07 3a90 	vmov	s15, r3
 8004cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cc6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004da8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cce:	4b2f      	ldr	r3, [pc, #188]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cd6:	ee07 3a90 	vmov	s15, r3
 8004cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cde:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ce2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004d9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cfe:	e021      	b.n	8004d44 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	ee07 3a90 	vmov	s15, r3
 8004d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d0a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004da4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d12:	4b1e      	ldr	r3, [pc, #120]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d1a:	ee07 3a90 	vmov	s15, r3
 8004d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d22:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d26:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004d9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d42:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004d44:	4b11      	ldr	r3, [pc, #68]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d48:	0a5b      	lsrs	r3, r3, #9
 8004d4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d4e:	3301      	adds	r3, #1
 8004d50:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	ee07 3a90 	vmov	s15, r3
 8004d58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d68:	ee17 3a90 	vmov	r3, s15
 8004d6c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004d6e:	e005      	b.n	8004d7c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004d70:	2300      	movs	r3, #0
 8004d72:	61bb      	str	r3, [r7, #24]
    break;
 8004d74:	e002      	b.n	8004d7c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004d76:	4b07      	ldr	r3, [pc, #28]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004d78:	61bb      	str	r3, [r7, #24]
    break;
 8004d7a:	bf00      	nop
  }

  return sysclockfreq;
 8004d7c:	69bb      	ldr	r3, [r7, #24]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3724      	adds	r7, #36	; 0x24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	58024400 	.word	0x58024400
 8004d90:	03d09000 	.word	0x03d09000
 8004d94:	003d0900 	.word	0x003d0900
 8004d98:	007a1200 	.word	0x007a1200
 8004d9c:	46000000 	.word	0x46000000
 8004da0:	4c742400 	.word	0x4c742400
 8004da4:	4a742400 	.word	0x4a742400
 8004da8:	4af42400 	.word	0x4af42400

08004dac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004db2:	f7ff fe81 	bl	8004ab8 <HAL_RCC_GetSysClockFreq>
 8004db6:	4602      	mov	r2, r0
 8004db8:	4b10      	ldr	r3, [pc, #64]	; (8004dfc <HAL_RCC_GetHCLKFreq+0x50>)
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	0a1b      	lsrs	r3, r3, #8
 8004dbe:	f003 030f 	and.w	r3, r3, #15
 8004dc2:	490f      	ldr	r1, [pc, #60]	; (8004e00 <HAL_RCC_GetHCLKFreq+0x54>)
 8004dc4:	5ccb      	ldrb	r3, [r1, r3]
 8004dc6:	f003 031f 	and.w	r3, r3, #31
 8004dca:	fa22 f303 	lsr.w	r3, r2, r3
 8004dce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004dd0:	4b0a      	ldr	r3, [pc, #40]	; (8004dfc <HAL_RCC_GetHCLKFreq+0x50>)
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	f003 030f 	and.w	r3, r3, #15
 8004dd8:	4a09      	ldr	r2, [pc, #36]	; (8004e00 <HAL_RCC_GetHCLKFreq+0x54>)
 8004dda:	5cd3      	ldrb	r3, [r2, r3]
 8004ddc:	f003 031f 	and.w	r3, r3, #31
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	fa22 f303 	lsr.w	r3, r2, r3
 8004de6:	4a07      	ldr	r2, [pc, #28]	; (8004e04 <HAL_RCC_GetHCLKFreq+0x58>)
 8004de8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004dea:	4a07      	ldr	r2, [pc, #28]	; (8004e08 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004df0:	4b04      	ldr	r3, [pc, #16]	; (8004e04 <HAL_RCC_GetHCLKFreq+0x58>)
 8004df2:	681b      	ldr	r3, [r3, #0]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3708      	adds	r7, #8
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	58024400 	.word	0x58024400
 8004e00:	0800f8d4 	.word	0x0800f8d4
 8004e04:	24000004 	.word	0x24000004
 8004e08:	24000000 	.word	0x24000000

08004e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004e10:	f7ff ffcc 	bl	8004dac <HAL_RCC_GetHCLKFreq>
 8004e14:	4602      	mov	r2, r0
 8004e16:	4b06      	ldr	r3, [pc, #24]	; (8004e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e18:	69db      	ldr	r3, [r3, #28]
 8004e1a:	091b      	lsrs	r3, r3, #4
 8004e1c:	f003 0307 	and.w	r3, r3, #7
 8004e20:	4904      	ldr	r1, [pc, #16]	; (8004e34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e22:	5ccb      	ldrb	r3, [r1, r3]
 8004e24:	f003 031f 	and.w	r3, r3, #31
 8004e28:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	58024400 	.word	0x58024400
 8004e34:	0800f8d4 	.word	0x0800f8d4

08004e38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004e3c:	f7ff ffb6 	bl	8004dac <HAL_RCC_GetHCLKFreq>
 8004e40:	4602      	mov	r2, r0
 8004e42:	4b06      	ldr	r3, [pc, #24]	; (8004e5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	0a1b      	lsrs	r3, r3, #8
 8004e48:	f003 0307 	and.w	r3, r3, #7
 8004e4c:	4904      	ldr	r1, [pc, #16]	; (8004e60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e4e:	5ccb      	ldrb	r3, [r1, r3]
 8004e50:	f003 031f 	and.w	r3, r3, #31
 8004e54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	58024400 	.word	0x58024400
 8004e60:	0800f8d4 	.word	0x0800f8d4

08004e64 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	223f      	movs	r2, #63	; 0x3f
 8004e72:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e74:	4b1a      	ldr	r3, [pc, #104]	; (8004ee0 <HAL_RCC_GetClockConfig+0x7c>)
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	f003 0207 	and.w	r2, r3, #7
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004e80:	4b17      	ldr	r3, [pc, #92]	; (8004ee0 <HAL_RCC_GetClockConfig+0x7c>)
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004e8c:	4b14      	ldr	r3, [pc, #80]	; (8004ee0 <HAL_RCC_GetClockConfig+0x7c>)
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	f003 020f 	and.w	r2, r3, #15
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004e98:	4b11      	ldr	r3, [pc, #68]	; (8004ee0 <HAL_RCC_GetClockConfig+0x7c>)
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004ea4:	4b0e      	ldr	r3, [pc, #56]	; (8004ee0 <HAL_RCC_GetClockConfig+0x7c>)
 8004ea6:	69db      	ldr	r3, [r3, #28]
 8004ea8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004eb0:	4b0b      	ldr	r3, [pc, #44]	; (8004ee0 <HAL_RCC_GetClockConfig+0x7c>)
 8004eb2:	69db      	ldr	r3, [r3, #28]
 8004eb4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004ebc:	4b08      	ldr	r3, [pc, #32]	; (8004ee0 <HAL_RCC_GetClockConfig+0x7c>)
 8004ebe:	6a1b      	ldr	r3, [r3, #32]
 8004ec0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004ec8:	4b06      	ldr	r3, [pc, #24]	; (8004ee4 <HAL_RCC_GetClockConfig+0x80>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 020f 	and.w	r2, r3, #15
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	601a      	str	r2, [r3, #0]
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr
 8004ee0:	58024400 	.word	0x58024400
 8004ee4:	52002000 	.word	0x52002000

08004ee8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d03f      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f08:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f0c:	d02a      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004f0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f12:	d824      	bhi.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f18:	d018      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004f1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f1e:	d81e      	bhi.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d003      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004f24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f28:	d007      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004f2a:	e018      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f2c:	4ba3      	ldr	r3, [pc, #652]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f30:	4aa2      	ldr	r2, [pc, #648]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004f32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004f38:	e015      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	2102      	movs	r1, #2
 8004f40:	4618      	mov	r0, r3
 8004f42:	f001 f9d5 	bl	80062f0 <RCCEx_PLL2_Config>
 8004f46:	4603      	mov	r3, r0
 8004f48:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004f4a:	e00c      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	3324      	adds	r3, #36	; 0x24
 8004f50:	2102      	movs	r1, #2
 8004f52:	4618      	mov	r0, r3
 8004f54:	f001 fa7e 	bl	8006454 <RCCEx_PLL3_Config>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004f5c:	e003      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	75fb      	strb	r3, [r7, #23]
      break;
 8004f62:	e000      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004f64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f66:	7dfb      	ldrb	r3, [r7, #23]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d109      	bne.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004f6c:	4b93      	ldr	r3, [pc, #588]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f78:	4990      	ldr	r1, [pc, #576]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	650b      	str	r3, [r1, #80]	; 0x50
 8004f7e:	e001      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f80:	7dfb      	ldrb	r3, [r7, #23]
 8004f82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d03d      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f94:	2b04      	cmp	r3, #4
 8004f96:	d826      	bhi.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004f98:	a201      	add	r2, pc, #4	; (adr r2, 8004fa0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9e:	bf00      	nop
 8004fa0:	08004fb5 	.word	0x08004fb5
 8004fa4:	08004fc3 	.word	0x08004fc3
 8004fa8:	08004fd5 	.word	0x08004fd5
 8004fac:	08004fed 	.word	0x08004fed
 8004fb0:	08004fed 	.word	0x08004fed
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fb4:	4b81      	ldr	r3, [pc, #516]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb8:	4a80      	ldr	r2, [pc, #512]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004fc0:	e015      	b.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	3304      	adds	r3, #4
 8004fc6:	2100      	movs	r1, #0
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f001 f991 	bl	80062f0 <RCCEx_PLL2_Config>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004fd2:	e00c      	b.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	3324      	adds	r3, #36	; 0x24
 8004fd8:	2100      	movs	r1, #0
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f001 fa3a 	bl	8006454 <RCCEx_PLL3_Config>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004fe4:	e003      	b.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	75fb      	strb	r3, [r7, #23]
      break;
 8004fea:	e000      	b.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004fec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fee:	7dfb      	ldrb	r3, [r7, #23]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d109      	bne.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ff4:	4b71      	ldr	r3, [pc, #452]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ff8:	f023 0207 	bic.w	r2, r3, #7
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005000:	496e      	ldr	r1, [pc, #440]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005002:	4313      	orrs	r3, r2
 8005004:	650b      	str	r3, [r1, #80]	; 0x50
 8005006:	e001      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005008:	7dfb      	ldrb	r3, [r7, #23]
 800500a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005014:	2b00      	cmp	r3, #0
 8005016:	d042      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800501c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005020:	d02b      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005026:	d825      	bhi.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005028:	2bc0      	cmp	r3, #192	; 0xc0
 800502a:	d028      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800502c:	2bc0      	cmp	r3, #192	; 0xc0
 800502e:	d821      	bhi.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005030:	2b80      	cmp	r3, #128	; 0x80
 8005032:	d016      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005034:	2b80      	cmp	r3, #128	; 0x80
 8005036:	d81d      	bhi.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005038:	2b00      	cmp	r3, #0
 800503a:	d002      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800503c:	2b40      	cmp	r3, #64	; 0x40
 800503e:	d007      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005040:	e018      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005042:	4b5e      	ldr	r3, [pc, #376]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005046:	4a5d      	ldr	r2, [pc, #372]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800504c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800504e:	e017      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	3304      	adds	r3, #4
 8005054:	2100      	movs	r1, #0
 8005056:	4618      	mov	r0, r3
 8005058:	f001 f94a 	bl	80062f0 <RCCEx_PLL2_Config>
 800505c:	4603      	mov	r3, r0
 800505e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005060:	e00e      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	3324      	adds	r3, #36	; 0x24
 8005066:	2100      	movs	r1, #0
 8005068:	4618      	mov	r0, r3
 800506a:	f001 f9f3 	bl	8006454 <RCCEx_PLL3_Config>
 800506e:	4603      	mov	r3, r0
 8005070:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005072:	e005      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	75fb      	strb	r3, [r7, #23]
      break;
 8005078:	e002      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800507a:	bf00      	nop
 800507c:	e000      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800507e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005080:	7dfb      	ldrb	r3, [r7, #23]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d109      	bne.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005086:	4b4d      	ldr	r3, [pc, #308]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800508a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005092:	494a      	ldr	r1, [pc, #296]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005094:	4313      	orrs	r3, r2
 8005096:	650b      	str	r3, [r1, #80]	; 0x50
 8005098:	e001      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800509a:	7dfb      	ldrb	r3, [r7, #23]
 800509c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d049      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80050b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050b4:	d030      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80050b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050ba:	d82a      	bhi.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80050bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80050c0:	d02c      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80050c2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80050c6:	d824      	bhi.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80050c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050cc:	d018      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80050ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050d2:	d81e      	bhi.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d003      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80050d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050dc:	d007      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x206>
 80050de:	e018      	b.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050e0:	4b36      	ldr	r3, [pc, #216]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80050e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e4:	4a35      	ldr	r2, [pc, #212]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80050e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80050ec:	e017      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	3304      	adds	r3, #4
 80050f2:	2100      	movs	r1, #0
 80050f4:	4618      	mov	r0, r3
 80050f6:	f001 f8fb 	bl	80062f0 <RCCEx_PLL2_Config>
 80050fa:	4603      	mov	r3, r0
 80050fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80050fe:	e00e      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	3324      	adds	r3, #36	; 0x24
 8005104:	2100      	movs	r1, #0
 8005106:	4618      	mov	r0, r3
 8005108:	f001 f9a4 	bl	8006454 <RCCEx_PLL3_Config>
 800510c:	4603      	mov	r3, r0
 800510e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005110:	e005      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	75fb      	strb	r3, [r7, #23]
      break;
 8005116:	e002      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005118:	bf00      	nop
 800511a:	e000      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800511c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800511e:	7dfb      	ldrb	r3, [r7, #23]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10a      	bne.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005124:	4b25      	ldr	r3, [pc, #148]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005128:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005132:	4922      	ldr	r1, [pc, #136]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005134:	4313      	orrs	r3, r2
 8005136:	658b      	str	r3, [r1, #88]	; 0x58
 8005138:	e001      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800513a:	7dfb      	ldrb	r3, [r7, #23]
 800513c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005146:	2b00      	cmp	r3, #0
 8005148:	d04b      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005150:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005154:	d030      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005156:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800515a:	d82a      	bhi.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800515c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005160:	d02e      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8005162:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005166:	d824      	bhi.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005168:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800516c:	d018      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800516e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005172:	d81e      	bhi.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005174:	2b00      	cmp	r3, #0
 8005176:	d003      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005178:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800517c:	d007      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800517e:	e018      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005180:	4b0e      	ldr	r3, [pc, #56]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005184:	4a0d      	ldr	r2, [pc, #52]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005186:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800518a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800518c:	e019      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	3304      	adds	r3, #4
 8005192:	2100      	movs	r1, #0
 8005194:	4618      	mov	r0, r3
 8005196:	f001 f8ab 	bl	80062f0 <RCCEx_PLL2_Config>
 800519a:	4603      	mov	r3, r0
 800519c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800519e:	e010      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	3324      	adds	r3, #36	; 0x24
 80051a4:	2100      	movs	r1, #0
 80051a6:	4618      	mov	r0, r3
 80051a8:	f001 f954 	bl	8006454 <RCCEx_PLL3_Config>
 80051ac:	4603      	mov	r3, r0
 80051ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80051b0:	e007      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	75fb      	strb	r3, [r7, #23]
      break;
 80051b6:	e004      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80051b8:	bf00      	nop
 80051ba:	e002      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80051bc:	58024400 	.word	0x58024400
      break;
 80051c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051c2:	7dfb      	ldrb	r3, [r7, #23]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d10a      	bne.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80051c8:	4b99      	ldr	r3, [pc, #612]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80051ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051cc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80051d6:	4996      	ldr	r1, [pc, #600]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	658b      	str	r3, [r1, #88]	; 0x58
 80051dc:	e001      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051de:	7dfb      	ldrb	r3, [r7, #23]
 80051e0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d032      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051f2:	2b30      	cmp	r3, #48	; 0x30
 80051f4:	d01c      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80051f6:	2b30      	cmp	r3, #48	; 0x30
 80051f8:	d817      	bhi.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x342>
 80051fa:	2b20      	cmp	r3, #32
 80051fc:	d00c      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80051fe:	2b20      	cmp	r3, #32
 8005200:	d813      	bhi.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005202:	2b00      	cmp	r3, #0
 8005204:	d016      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005206:	2b10      	cmp	r3, #16
 8005208:	d10f      	bne.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800520a:	4b89      	ldr	r3, [pc, #548]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800520c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520e:	4a88      	ldr	r2, [pc, #544]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005214:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005216:	e00e      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	3304      	adds	r3, #4
 800521c:	2102      	movs	r1, #2
 800521e:	4618      	mov	r0, r3
 8005220:	f001 f866 	bl	80062f0 <RCCEx_PLL2_Config>
 8005224:	4603      	mov	r3, r0
 8005226:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005228:	e005      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	75fb      	strb	r3, [r7, #23]
      break;
 800522e:	e002      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005230:	bf00      	nop
 8005232:	e000      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005234:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005236:	7dfb      	ldrb	r3, [r7, #23]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d109      	bne.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800523c:	4b7c      	ldr	r3, [pc, #496]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800523e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005240:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005248:	4979      	ldr	r1, [pc, #484]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800524a:	4313      	orrs	r3, r2
 800524c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800524e:	e001      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005250:	7dfb      	ldrb	r3, [r7, #23]
 8005252:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d047      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005264:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005268:	d030      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800526a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800526e:	d82a      	bhi.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005270:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005274:	d02c      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005276:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800527a:	d824      	bhi.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800527c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005280:	d018      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8005282:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005286:	d81e      	bhi.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005288:	2b00      	cmp	r3, #0
 800528a:	d003      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800528c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005290:	d007      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8005292:	e018      	b.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005294:	4b66      	ldr	r3, [pc, #408]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005298:	4a65      	ldr	r2, [pc, #404]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800529a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800529e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80052a0:	e017      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	3304      	adds	r3, #4
 80052a6:	2100      	movs	r1, #0
 80052a8:	4618      	mov	r0, r3
 80052aa:	f001 f821 	bl	80062f0 <RCCEx_PLL2_Config>
 80052ae:	4603      	mov	r3, r0
 80052b0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80052b2:	e00e      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	3324      	adds	r3, #36	; 0x24
 80052b8:	2100      	movs	r1, #0
 80052ba:	4618      	mov	r0, r3
 80052bc:	f001 f8ca 	bl	8006454 <RCCEx_PLL3_Config>
 80052c0:	4603      	mov	r3, r0
 80052c2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80052c4:	e005      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	75fb      	strb	r3, [r7, #23]
      break;
 80052ca:	e002      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80052cc:	bf00      	nop
 80052ce:	e000      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80052d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052d2:	7dfb      	ldrb	r3, [r7, #23]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d109      	bne.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80052d8:	4b55      	ldr	r3, [pc, #340]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80052da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052dc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052e4:	4952      	ldr	r1, [pc, #328]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	650b      	str	r3, [r1, #80]	; 0x50
 80052ea:	e001      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ec:	7dfb      	ldrb	r3, [r7, #23]
 80052ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d049      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005304:	d02e      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005306:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800530a:	d828      	bhi.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800530c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005310:	d02a      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8005312:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005316:	d822      	bhi.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005318:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800531c:	d026      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x484>
 800531e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005322:	d81c      	bhi.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005324:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005328:	d010      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800532a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800532e:	d816      	bhi.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005330:	2b00      	cmp	r3, #0
 8005332:	d01d      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005338:	d111      	bne.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	3304      	adds	r3, #4
 800533e:	2101      	movs	r1, #1
 8005340:	4618      	mov	r0, r3
 8005342:	f000 ffd5 	bl	80062f0 <RCCEx_PLL2_Config>
 8005346:	4603      	mov	r3, r0
 8005348:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800534a:	e012      	b.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	3324      	adds	r3, #36	; 0x24
 8005350:	2101      	movs	r1, #1
 8005352:	4618      	mov	r0, r3
 8005354:	f001 f87e 	bl	8006454 <RCCEx_PLL3_Config>
 8005358:	4603      	mov	r3, r0
 800535a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800535c:	e009      	b.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	75fb      	strb	r3, [r7, #23]
      break;
 8005362:	e006      	b.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005364:	bf00      	nop
 8005366:	e004      	b.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005368:	bf00      	nop
 800536a:	e002      	b.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800536c:	bf00      	nop
 800536e:	e000      	b.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005370:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005372:	7dfb      	ldrb	r3, [r7, #23]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d109      	bne.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005378:	4b2d      	ldr	r3, [pc, #180]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800537a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800537c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005384:	492a      	ldr	r1, [pc, #168]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005386:	4313      	orrs	r3, r2
 8005388:	650b      	str	r3, [r1, #80]	; 0x50
 800538a:	e001      	b.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800538c:	7dfb      	ldrb	r3, [r7, #23]
 800538e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d04d      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80053a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053a6:	d02e      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80053a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053ac:	d828      	bhi.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80053ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053b2:	d02a      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x522>
 80053b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053b8:	d822      	bhi.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80053ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80053be:	d026      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x526>
 80053c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80053c4:	d81c      	bhi.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80053c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053ca:	d010      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x506>
 80053cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053d0:	d816      	bhi.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d01d      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80053d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053da:	d111      	bne.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	3304      	adds	r3, #4
 80053e0:	2101      	movs	r1, #1
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 ff84 	bl	80062f0 <RCCEx_PLL2_Config>
 80053e8:	4603      	mov	r3, r0
 80053ea:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80053ec:	e012      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	3324      	adds	r3, #36	; 0x24
 80053f2:	2101      	movs	r1, #1
 80053f4:	4618      	mov	r0, r3
 80053f6:	f001 f82d 	bl	8006454 <RCCEx_PLL3_Config>
 80053fa:	4603      	mov	r3, r0
 80053fc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80053fe:	e009      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	75fb      	strb	r3, [r7, #23]
      break;
 8005404:	e006      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005406:	bf00      	nop
 8005408:	e004      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800540a:	bf00      	nop
 800540c:	e002      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800540e:	bf00      	nop
 8005410:	e000      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005412:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005414:	7dfb      	ldrb	r3, [r7, #23]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10c      	bne.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800541a:	4b05      	ldr	r3, [pc, #20]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800541c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800541e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005428:	4901      	ldr	r1, [pc, #4]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800542a:	4313      	orrs	r3, r2
 800542c:	658b      	str	r3, [r1, #88]	; 0x58
 800542e:	e003      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005430:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005434:	7dfb      	ldrb	r3, [r7, #23]
 8005436:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d02f      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005448:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800544c:	d00e      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x584>
 800544e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005452:	d814      	bhi.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8005454:	2b00      	cmp	r3, #0
 8005456:	d015      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8005458:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800545c:	d10f      	bne.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800545e:	4baf      	ldr	r3, [pc, #700]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005462:	4aae      	ldr	r2, [pc, #696]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005468:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800546a:	e00c      	b.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	3304      	adds	r3, #4
 8005470:	2101      	movs	r1, #1
 8005472:	4618      	mov	r0, r3
 8005474:	f000 ff3c 	bl	80062f0 <RCCEx_PLL2_Config>
 8005478:	4603      	mov	r3, r0
 800547a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800547c:	e003      	b.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	75fb      	strb	r3, [r7, #23]
      break;
 8005482:	e000      	b.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8005484:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005486:	7dfb      	ldrb	r3, [r7, #23]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d109      	bne.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800548c:	4ba3      	ldr	r3, [pc, #652]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800548e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005490:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005498:	49a0      	ldr	r1, [pc, #640]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800549a:	4313      	orrs	r3, r2
 800549c:	650b      	str	r3, [r1, #80]	; 0x50
 800549e:	e001      	b.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054a0:	7dfb      	ldrb	r3, [r7, #23]
 80054a2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d032      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b4:	2b03      	cmp	r3, #3
 80054b6:	d81b      	bhi.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80054b8:	a201      	add	r2, pc, #4	; (adr r2, 80054c0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80054ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054be:	bf00      	nop
 80054c0:	080054f7 	.word	0x080054f7
 80054c4:	080054d1 	.word	0x080054d1
 80054c8:	080054df 	.word	0x080054df
 80054cc:	080054f7 	.word	0x080054f7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054d0:	4b92      	ldr	r3, [pc, #584]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80054d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d4:	4a91      	ldr	r2, [pc, #580]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80054d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80054dc:	e00c      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	3304      	adds	r3, #4
 80054e2:	2102      	movs	r1, #2
 80054e4:	4618      	mov	r0, r3
 80054e6:	f000 ff03 	bl	80062f0 <RCCEx_PLL2_Config>
 80054ea:	4603      	mov	r3, r0
 80054ec:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80054ee:	e003      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	75fb      	strb	r3, [r7, #23]
      break;
 80054f4:	e000      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80054f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054f8:	7dfb      	ldrb	r3, [r7, #23]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d109      	bne.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80054fe:	4b87      	ldr	r3, [pc, #540]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005502:	f023 0203 	bic.w	r2, r3, #3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800550a:	4984      	ldr	r1, [pc, #528]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800550c:	4313      	orrs	r3, r2
 800550e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005510:	e001      	b.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005512:	7dfb      	ldrb	r3, [r7, #23]
 8005514:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800551e:	2b00      	cmp	r3, #0
 8005520:	f000 8086 	beq.w	8005630 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005524:	4b7e      	ldr	r3, [pc, #504]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a7d      	ldr	r2, [pc, #500]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800552a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800552e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005530:	f7fd fe0c 	bl	800314c <HAL_GetTick>
 8005534:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005536:	e009      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005538:	f7fd fe08 	bl	800314c <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b64      	cmp	r3, #100	; 0x64
 8005544:	d902      	bls.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	75fb      	strb	r3, [r7, #23]
        break;
 800554a:	e005      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800554c:	4b74      	ldr	r3, [pc, #464]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005554:	2b00      	cmp	r3, #0
 8005556:	d0ef      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005558:	7dfb      	ldrb	r3, [r7, #23]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d166      	bne.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800555e:	4b6f      	ldr	r3, [pc, #444]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005560:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005568:	4053      	eors	r3, r2
 800556a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800556e:	2b00      	cmp	r3, #0
 8005570:	d013      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005572:	4b6a      	ldr	r3, [pc, #424]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005576:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800557a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800557c:	4b67      	ldr	r3, [pc, #412]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800557e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005580:	4a66      	ldr	r2, [pc, #408]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005582:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005586:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005588:	4b64      	ldr	r3, [pc, #400]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800558a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800558c:	4a63      	ldr	r2, [pc, #396]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800558e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005592:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005594:	4a61      	ldr	r2, [pc, #388]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80055a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055a4:	d115      	bne.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a6:	f7fd fdd1 	bl	800314c <HAL_GetTick>
 80055aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055ac:	e00b      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055ae:	f7fd fdcd 	bl	800314c <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80055bc:	4293      	cmp	r3, r2
 80055be:	d902      	bls.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	75fb      	strb	r3, [r7, #23]
            break;
 80055c4:	e005      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055c6:	4b55      	ldr	r3, [pc, #340]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80055c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ca:	f003 0302 	and.w	r3, r3, #2
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d0ed      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80055d2:	7dfb      	ldrb	r3, [r7, #23]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d126      	bne.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80055de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055e6:	d10d      	bne.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80055e8:	4b4c      	ldr	r3, [pc, #304]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80055f6:	0919      	lsrs	r1, r3, #4
 80055f8:	4b4a      	ldr	r3, [pc, #296]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80055fa:	400b      	ands	r3, r1
 80055fc:	4947      	ldr	r1, [pc, #284]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	610b      	str	r3, [r1, #16]
 8005602:	e005      	b.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005604:	4b45      	ldr	r3, [pc, #276]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	4a44      	ldr	r2, [pc, #272]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800560a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800560e:	6113      	str	r3, [r2, #16]
 8005610:	4b42      	ldr	r3, [pc, #264]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005612:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800561a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800561e:	493f      	ldr	r1, [pc, #252]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005620:	4313      	orrs	r3, r2
 8005622:	670b      	str	r3, [r1, #112]	; 0x70
 8005624:	e004      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005626:	7dfb      	ldrb	r3, [r7, #23]
 8005628:	75bb      	strb	r3, [r7, #22]
 800562a:	e001      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800562c:	7dfb      	ldrb	r3, [r7, #23]
 800562e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0301 	and.w	r3, r3, #1
 8005638:	2b00      	cmp	r3, #0
 800563a:	f000 8085 	beq.w	8005748 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005642:	2b28      	cmp	r3, #40	; 0x28
 8005644:	d866      	bhi.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005646:	a201      	add	r2, pc, #4	; (adr r2, 800564c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800564c:	08005729 	.word	0x08005729
 8005650:	08005715 	.word	0x08005715
 8005654:	08005715 	.word	0x08005715
 8005658:	08005715 	.word	0x08005715
 800565c:	08005715 	.word	0x08005715
 8005660:	08005715 	.word	0x08005715
 8005664:	08005715 	.word	0x08005715
 8005668:	08005715 	.word	0x08005715
 800566c:	080056f1 	.word	0x080056f1
 8005670:	08005715 	.word	0x08005715
 8005674:	08005715 	.word	0x08005715
 8005678:	08005715 	.word	0x08005715
 800567c:	08005715 	.word	0x08005715
 8005680:	08005715 	.word	0x08005715
 8005684:	08005715 	.word	0x08005715
 8005688:	08005715 	.word	0x08005715
 800568c:	08005703 	.word	0x08005703
 8005690:	08005715 	.word	0x08005715
 8005694:	08005715 	.word	0x08005715
 8005698:	08005715 	.word	0x08005715
 800569c:	08005715 	.word	0x08005715
 80056a0:	08005715 	.word	0x08005715
 80056a4:	08005715 	.word	0x08005715
 80056a8:	08005715 	.word	0x08005715
 80056ac:	08005729 	.word	0x08005729
 80056b0:	08005715 	.word	0x08005715
 80056b4:	08005715 	.word	0x08005715
 80056b8:	08005715 	.word	0x08005715
 80056bc:	08005715 	.word	0x08005715
 80056c0:	08005715 	.word	0x08005715
 80056c4:	08005715 	.word	0x08005715
 80056c8:	08005715 	.word	0x08005715
 80056cc:	08005729 	.word	0x08005729
 80056d0:	08005715 	.word	0x08005715
 80056d4:	08005715 	.word	0x08005715
 80056d8:	08005715 	.word	0x08005715
 80056dc:	08005715 	.word	0x08005715
 80056e0:	08005715 	.word	0x08005715
 80056e4:	08005715 	.word	0x08005715
 80056e8:	08005715 	.word	0x08005715
 80056ec:	08005729 	.word	0x08005729
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	3304      	adds	r3, #4
 80056f4:	2101      	movs	r1, #1
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 fdfa 	bl	80062f0 <RCCEx_PLL2_Config>
 80056fc:	4603      	mov	r3, r0
 80056fe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005700:	e013      	b.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	3324      	adds	r3, #36	; 0x24
 8005706:	2101      	movs	r1, #1
 8005708:	4618      	mov	r0, r3
 800570a:	f000 fea3 	bl	8006454 <RCCEx_PLL3_Config>
 800570e:	4603      	mov	r3, r0
 8005710:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005712:	e00a      	b.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	75fb      	strb	r3, [r7, #23]
      break;
 8005718:	e007      	b.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800571a:	bf00      	nop
 800571c:	58024400 	.word	0x58024400
 8005720:	58024800 	.word	0x58024800
 8005724:	00ffffcf 	.word	0x00ffffcf
      break;
 8005728:	bf00      	nop
    }

    if(ret == HAL_OK)
 800572a:	7dfb      	ldrb	r3, [r7, #23]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d109      	bne.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005730:	4b96      	ldr	r3, [pc, #600]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005734:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800573c:	4993      	ldr	r1, [pc, #588]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800573e:	4313      	orrs	r3, r2
 8005740:	654b      	str	r3, [r1, #84]	; 0x54
 8005742:	e001      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005744:	7dfb      	ldrb	r3, [r7, #23]
 8005746:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0302 	and.w	r3, r3, #2
 8005750:	2b00      	cmp	r3, #0
 8005752:	d038      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005758:	2b05      	cmp	r3, #5
 800575a:	d821      	bhi.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800575c:	a201      	add	r2, pc, #4	; (adr r2, 8005764 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800575e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005762:	bf00      	nop
 8005764:	080057a7 	.word	0x080057a7
 8005768:	0800577d 	.word	0x0800577d
 800576c:	0800578f 	.word	0x0800578f
 8005770:	080057a7 	.word	0x080057a7
 8005774:	080057a7 	.word	0x080057a7
 8005778:	080057a7 	.word	0x080057a7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	3304      	adds	r3, #4
 8005780:	2101      	movs	r1, #1
 8005782:	4618      	mov	r0, r3
 8005784:	f000 fdb4 	bl	80062f0 <RCCEx_PLL2_Config>
 8005788:	4603      	mov	r3, r0
 800578a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800578c:	e00c      	b.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	3324      	adds	r3, #36	; 0x24
 8005792:	2101      	movs	r1, #1
 8005794:	4618      	mov	r0, r3
 8005796:	f000 fe5d 	bl	8006454 <RCCEx_PLL3_Config>
 800579a:	4603      	mov	r3, r0
 800579c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800579e:	e003      	b.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	75fb      	strb	r3, [r7, #23]
      break;
 80057a4:	e000      	b.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80057a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057a8:	7dfb      	ldrb	r3, [r7, #23]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d109      	bne.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80057ae:	4b77      	ldr	r3, [pc, #476]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80057b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b2:	f023 0207 	bic.w	r2, r3, #7
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ba:	4974      	ldr	r1, [pc, #464]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80057bc:	4313      	orrs	r3, r2
 80057be:	654b      	str	r3, [r1, #84]	; 0x54
 80057c0:	e001      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057c2:	7dfb      	ldrb	r3, [r7, #23]
 80057c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0304 	and.w	r3, r3, #4
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d03a      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d8:	2b05      	cmp	r3, #5
 80057da:	d821      	bhi.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80057dc:	a201      	add	r2, pc, #4	; (adr r2, 80057e4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80057de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e2:	bf00      	nop
 80057e4:	08005827 	.word	0x08005827
 80057e8:	080057fd 	.word	0x080057fd
 80057ec:	0800580f 	.word	0x0800580f
 80057f0:	08005827 	.word	0x08005827
 80057f4:	08005827 	.word	0x08005827
 80057f8:	08005827 	.word	0x08005827
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	3304      	adds	r3, #4
 8005800:	2101      	movs	r1, #1
 8005802:	4618      	mov	r0, r3
 8005804:	f000 fd74 	bl	80062f0 <RCCEx_PLL2_Config>
 8005808:	4603      	mov	r3, r0
 800580a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800580c:	e00c      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	3324      	adds	r3, #36	; 0x24
 8005812:	2101      	movs	r1, #1
 8005814:	4618      	mov	r0, r3
 8005816:	f000 fe1d 	bl	8006454 <RCCEx_PLL3_Config>
 800581a:	4603      	mov	r3, r0
 800581c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800581e:	e003      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	75fb      	strb	r3, [r7, #23]
      break;
 8005824:	e000      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8005826:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005828:	7dfb      	ldrb	r3, [r7, #23]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d10a      	bne.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800582e:	4b57      	ldr	r3, [pc, #348]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005832:	f023 0207 	bic.w	r2, r3, #7
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800583c:	4953      	ldr	r1, [pc, #332]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800583e:	4313      	orrs	r3, r2
 8005840:	658b      	str	r3, [r1, #88]	; 0x58
 8005842:	e001      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005844:	7dfb      	ldrb	r3, [r7, #23]
 8005846:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0320 	and.w	r3, r3, #32
 8005850:	2b00      	cmp	r3, #0
 8005852:	d04b      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800585a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800585e:	d02e      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005860:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005864:	d828      	bhi.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800586a:	d02a      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800586c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005870:	d822      	bhi.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005872:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005876:	d026      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005878:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800587c:	d81c      	bhi.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800587e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005882:	d010      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8005884:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005888:	d816      	bhi.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800588a:	2b00      	cmp	r3, #0
 800588c:	d01d      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800588e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005892:	d111      	bne.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	3304      	adds	r3, #4
 8005898:	2100      	movs	r1, #0
 800589a:	4618      	mov	r0, r3
 800589c:	f000 fd28 	bl	80062f0 <RCCEx_PLL2_Config>
 80058a0:	4603      	mov	r3, r0
 80058a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80058a4:	e012      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	3324      	adds	r3, #36	; 0x24
 80058aa:	2102      	movs	r1, #2
 80058ac:	4618      	mov	r0, r3
 80058ae:	f000 fdd1 	bl	8006454 <RCCEx_PLL3_Config>
 80058b2:	4603      	mov	r3, r0
 80058b4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80058b6:	e009      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	75fb      	strb	r3, [r7, #23]
      break;
 80058bc:	e006      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80058be:	bf00      	nop
 80058c0:	e004      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80058c2:	bf00      	nop
 80058c4:	e002      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80058c6:	bf00      	nop
 80058c8:	e000      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80058ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058cc:	7dfb      	ldrb	r3, [r7, #23]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10a      	bne.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80058d2:	4b2e      	ldr	r3, [pc, #184]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80058d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058d6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058e0:	492a      	ldr	r1, [pc, #168]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	654b      	str	r3, [r1, #84]	; 0x54
 80058e6:	e001      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e8:	7dfb      	ldrb	r3, [r7, #23]
 80058ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d04d      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058fe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005902:	d02e      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005904:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005908:	d828      	bhi.n	800595c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800590a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800590e:	d02a      	beq.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005914:	d822      	bhi.n	800595c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005916:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800591a:	d026      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800591c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005920:	d81c      	bhi.n	800595c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005922:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005926:	d010      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8005928:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800592c:	d816      	bhi.n	800595c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800592e:	2b00      	cmp	r3, #0
 8005930:	d01d      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8005932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005936:	d111      	bne.n	800595c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	3304      	adds	r3, #4
 800593c:	2100      	movs	r1, #0
 800593e:	4618      	mov	r0, r3
 8005940:	f000 fcd6 	bl	80062f0 <RCCEx_PLL2_Config>
 8005944:	4603      	mov	r3, r0
 8005946:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005948:	e012      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	3324      	adds	r3, #36	; 0x24
 800594e:	2102      	movs	r1, #2
 8005950:	4618      	mov	r0, r3
 8005952:	f000 fd7f 	bl	8006454 <RCCEx_PLL3_Config>
 8005956:	4603      	mov	r3, r0
 8005958:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800595a:	e009      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	75fb      	strb	r3, [r7, #23]
      break;
 8005960:	e006      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005962:	bf00      	nop
 8005964:	e004      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005966:	bf00      	nop
 8005968:	e002      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800596a:	bf00      	nop
 800596c:	e000      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800596e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005970:	7dfb      	ldrb	r3, [r7, #23]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d10c      	bne.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005976:	4b05      	ldr	r3, [pc, #20]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800597a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005984:	4901      	ldr	r1, [pc, #4]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005986:	4313      	orrs	r3, r2
 8005988:	658b      	str	r3, [r1, #88]	; 0x58
 800598a:	e003      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800598c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005990:	7dfb      	ldrb	r3, [r7, #23]
 8005992:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800599c:	2b00      	cmp	r3, #0
 800599e:	d04b      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059a6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80059aa:	d02e      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80059ac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80059b0:	d828      	bhi.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80059b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059b6:	d02a      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80059b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059bc:	d822      	bhi.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80059be:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80059c2:	d026      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80059c4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80059c8:	d81c      	bhi.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80059ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059ce:	d010      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80059d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059d4:	d816      	bhi.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d01d      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80059da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059de:	d111      	bne.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	3304      	adds	r3, #4
 80059e4:	2100      	movs	r1, #0
 80059e6:	4618      	mov	r0, r3
 80059e8:	f000 fc82 	bl	80062f0 <RCCEx_PLL2_Config>
 80059ec:	4603      	mov	r3, r0
 80059ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80059f0:	e012      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	3324      	adds	r3, #36	; 0x24
 80059f6:	2102      	movs	r1, #2
 80059f8:	4618      	mov	r0, r3
 80059fa:	f000 fd2b 	bl	8006454 <RCCEx_PLL3_Config>
 80059fe:	4603      	mov	r3, r0
 8005a00:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005a02:	e009      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	75fb      	strb	r3, [r7, #23]
      break;
 8005a08:	e006      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005a0a:	bf00      	nop
 8005a0c:	e004      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005a0e:	bf00      	nop
 8005a10:	e002      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005a12:	bf00      	nop
 8005a14:	e000      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005a16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a18:	7dfb      	ldrb	r3, [r7, #23]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10a      	bne.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005a1e:	4b9d      	ldr	r3, [pc, #628]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a2c:	4999      	ldr	r1, [pc, #612]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	658b      	str	r3, [r1, #88]	; 0x58
 8005a32:	e001      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a34:	7dfb      	ldrb	r3, [r7, #23]
 8005a36:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0308 	and.w	r3, r3, #8
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d01a      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a4e:	d10a      	bne.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	3324      	adds	r3, #36	; 0x24
 8005a54:	2102      	movs	r1, #2
 8005a56:	4618      	mov	r0, r3
 8005a58:	f000 fcfc 	bl	8006454 <RCCEx_PLL3_Config>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d001      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005a66:	4b8b      	ldr	r3, [pc, #556]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a6a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a74:	4987      	ldr	r1, [pc, #540]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 0310 	and.w	r3, r3, #16
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d01a      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a90:	d10a      	bne.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	3324      	adds	r3, #36	; 0x24
 8005a96:	2102      	movs	r1, #2
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f000 fcdb 	bl	8006454 <RCCEx_PLL3_Config>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d001      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005aa8:	4b7a      	ldr	r3, [pc, #488]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ab6:	4977      	ldr	r1, [pc, #476]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d034      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005ace:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ad2:	d01d      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005ad4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ad8:	d817      	bhi.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ae2:	d009      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005ae4:	e011      	b.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	3304      	adds	r3, #4
 8005aea:	2100      	movs	r1, #0
 8005aec:	4618      	mov	r0, r3
 8005aee:	f000 fbff 	bl	80062f0 <RCCEx_PLL2_Config>
 8005af2:	4603      	mov	r3, r0
 8005af4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005af6:	e00c      	b.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	3324      	adds	r3, #36	; 0x24
 8005afc:	2102      	movs	r1, #2
 8005afe:	4618      	mov	r0, r3
 8005b00:	f000 fca8 	bl	8006454 <RCCEx_PLL3_Config>
 8005b04:	4603      	mov	r3, r0
 8005b06:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005b08:	e003      	b.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	75fb      	strb	r3, [r7, #23]
      break;
 8005b0e:	e000      	b.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8005b10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b12:	7dfb      	ldrb	r3, [r7, #23]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10a      	bne.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b18:	4b5e      	ldr	r3, [pc, #376]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005b26:	495b      	ldr	r1, [pc, #364]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	658b      	str	r3, [r1, #88]	; 0x58
 8005b2c:	e001      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b2e:	7dfb      	ldrb	r3, [r7, #23]
 8005b30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d033      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b48:	d01c      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8005b4a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b4e:	d816      	bhi.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005b50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b54:	d003      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8005b56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b5a:	d007      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8005b5c:	e00f      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b5e:	4b4d      	ldr	r3, [pc, #308]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b62:	4a4c      	ldr	r2, [pc, #304]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005b6a:	e00c      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	3324      	adds	r3, #36	; 0x24
 8005b70:	2101      	movs	r1, #1
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 fc6e 	bl	8006454 <RCCEx_PLL3_Config>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005b7c:	e003      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	75fb      	strb	r3, [r7, #23]
      break;
 8005b82:	e000      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8005b84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b86:	7dfb      	ldrb	r3, [r7, #23]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d10a      	bne.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b8c:	4b41      	ldr	r3, [pc, #260]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b9a:	493e      	ldr	r1, [pc, #248]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	654b      	str	r3, [r1, #84]	; 0x54
 8005ba0:	e001      	b.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ba2:	7dfb      	ldrb	r3, [r7, #23]
 8005ba4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d029      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d003      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8005bba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bbe:	d007      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8005bc0:	e00f      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bc2:	4b34      	ldr	r3, [pc, #208]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc6:	4a33      	ldr	r2, [pc, #204]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bcc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005bce:	e00b      	b.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	3304      	adds	r3, #4
 8005bd4:	2102      	movs	r1, #2
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f000 fb8a 	bl	80062f0 <RCCEx_PLL2_Config>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005be0:	e002      	b.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	75fb      	strb	r3, [r7, #23]
      break;
 8005be6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005be8:	7dfb      	ldrb	r3, [r7, #23]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d109      	bne.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005bee:	4b29      	ldr	r3, [pc, #164]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bf2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bfa:	4926      	ldr	r1, [pc, #152]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005c00:	e001      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c02:	7dfb      	ldrb	r3, [r7, #23]
 8005c04:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00a      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	3324      	adds	r3, #36	; 0x24
 8005c16:	2102      	movs	r1, #2
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f000 fc1b 	bl	8006454 <RCCEx_PLL3_Config>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d001      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d033      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c3c:	d017      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005c3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c42:	d811      	bhi.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c48:	d013      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005c4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c4e:	d80b      	bhi.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d010      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8005c54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c58:	d106      	bne.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c5a:	4b0e      	ldr	r3, [pc, #56]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5e:	4a0d      	ldr	r2, [pc, #52]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005c66:	e007      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c6c:	e004      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005c6e:	bf00      	nop
 8005c70:	e002      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005c72:	bf00      	nop
 8005c74:	e000      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005c76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c78:	7dfb      	ldrb	r3, [r7, #23]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10c      	bne.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c7e:	4b05      	ldr	r3, [pc, #20]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c8a:	4902      	ldr	r1, [pc, #8]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	654b      	str	r3, [r1, #84]	; 0x54
 8005c90:	e004      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8005c92:	bf00      	nop
 8005c94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c98:	7dfb      	ldrb	r3, [r7, #23]
 8005c9a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d008      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005ca8:	4b31      	ldr	r3, [pc, #196]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb4:	492e      	ldr	r1, [pc, #184]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d009      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005cc6:	4b2a      	ldr	r3, [pc, #168]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005cd4:	4926      	ldr	r1, [pc, #152]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d008      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005ce6:	4b22      	ldr	r3, [pc, #136]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cea:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cf2:	491f      	ldr	r1, [pc, #124]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00d      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005d04:	4b1a      	ldr	r3, [pc, #104]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	4a19      	ldr	r2, [pc, #100]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005d0a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d0e:	6113      	str	r3, [r2, #16]
 8005d10:	4b17      	ldr	r3, [pc, #92]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005d12:	691a      	ldr	r2, [r3, #16]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005d1a:	4915      	ldr	r1, [pc, #84]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	da08      	bge.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005d28:	4b11      	ldr	r3, [pc, #68]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d2c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d34:	490e      	ldr	r1, [pc, #56]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d009      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005d46:	4b0a      	ldr	r3, [pc, #40]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d4a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d54:	4906      	ldr	r1, [pc, #24]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005d56:	4313      	orrs	r3, r2
 8005d58:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005d5a:	7dbb      	ldrb	r3, [r7, #22]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d101      	bne.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8005d60:	2300      	movs	r3, #0
 8005d62:	e000      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3718      	adds	r7, #24
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	58024400 	.word	0x58024400

08005d74 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005d78:	f7ff f818 	bl	8004dac <HAL_RCC_GetHCLKFreq>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	4b06      	ldr	r3, [pc, #24]	; (8005d98 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	091b      	lsrs	r3, r3, #4
 8005d84:	f003 0307 	and.w	r3, r3, #7
 8005d88:	4904      	ldr	r1, [pc, #16]	; (8005d9c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005d8a:	5ccb      	ldrb	r3, [r1, r3]
 8005d8c:	f003 031f 	and.w	r3, r3, #31
 8005d90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	58024400 	.word	0x58024400
 8005d9c:	0800f8d4 	.word	0x0800f8d4

08005da0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b089      	sub	sp, #36	; 0x24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005da8:	4ba1      	ldr	r3, [pc, #644]	; (8006030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dac:	f003 0303 	and.w	r3, r3, #3
 8005db0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005db2:	4b9f      	ldr	r3, [pc, #636]	; (8006030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db6:	0b1b      	lsrs	r3, r3, #12
 8005db8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dbc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005dbe:	4b9c      	ldr	r3, [pc, #624]	; (8006030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc2:	091b      	lsrs	r3, r3, #4
 8005dc4:	f003 0301 	and.w	r3, r3, #1
 8005dc8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005dca:	4b99      	ldr	r3, [pc, #612]	; (8006030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dce:	08db      	lsrs	r3, r3, #3
 8005dd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	fb02 f303 	mul.w	r3, r2, r3
 8005dda:	ee07 3a90 	vmov	s15, r3
 8005dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005de2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f000 8111 	beq.w	8006010 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	f000 8083 	beq.w	8005efc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	f200 80a1 	bhi.w	8005f40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d003      	beq.n	8005e0c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d056      	beq.n	8005eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005e0a:	e099      	b.n	8005f40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e0c:	4b88      	ldr	r3, [pc, #544]	; (8006030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0320 	and.w	r3, r3, #32
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d02d      	beq.n	8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e18:	4b85      	ldr	r3, [pc, #532]	; (8006030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	08db      	lsrs	r3, r3, #3
 8005e1e:	f003 0303 	and.w	r3, r3, #3
 8005e22:	4a84      	ldr	r2, [pc, #528]	; (8006034 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005e24:	fa22 f303 	lsr.w	r3, r2, r3
 8005e28:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	ee07 3a90 	vmov	s15, r3
 8005e30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	ee07 3a90 	vmov	s15, r3
 8005e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e42:	4b7b      	ldr	r3, [pc, #492]	; (8006030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e4a:	ee07 3a90 	vmov	s15, r3
 8005e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e52:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e56:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006038 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e6e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005e72:	e087      	b.n	8005f84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	ee07 3a90 	vmov	s15, r3
 8005e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e7e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800603c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e86:	4b6a      	ldr	r3, [pc, #424]	; (8006030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e8e:	ee07 3a90 	vmov	s15, r3
 8005e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e96:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e9a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006038 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005eb6:	e065      	b.n	8005f84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	ee07 3a90 	vmov	s15, r3
 8005ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ec2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006040 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eca:	4b59      	ldr	r3, [pc, #356]	; (8006030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ed2:	ee07 3a90 	vmov	s15, r3
 8005ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eda:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ede:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006038 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ef6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005efa:	e043      	b.n	8005f84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	ee07 3a90 	vmov	s15, r3
 8005f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f06:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006044 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f0e:	4b48      	ldr	r3, [pc, #288]	; (8006030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f16:	ee07 3a90 	vmov	s15, r3
 8005f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f22:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006038 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f3e:	e021      	b.n	8005f84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	ee07 3a90 	vmov	s15, r3
 8005f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f4a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006040 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f52:	4b37      	ldr	r3, [pc, #220]	; (8006030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f5a:	ee07 3a90 	vmov	s15, r3
 8005f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f62:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f66:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006038 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f82:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005f84:	4b2a      	ldr	r3, [pc, #168]	; (8006030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f88:	0a5b      	lsrs	r3, r3, #9
 8005f8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f8e:	ee07 3a90 	vmov	s15, r3
 8005f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005faa:	ee17 2a90 	vmov	r2, s15
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005fb2:	4b1f      	ldr	r3, [pc, #124]	; (8006030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb6:	0c1b      	lsrs	r3, r3, #16
 8005fb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fbc:	ee07 3a90 	vmov	s15, r3
 8005fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fd8:	ee17 2a90 	vmov	r2, s15
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005fe0:	4b13      	ldr	r3, [pc, #76]	; (8006030 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe4:	0e1b      	lsrs	r3, r3, #24
 8005fe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fea:	ee07 3a90 	vmov	s15, r3
 8005fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ff2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ff6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ffa:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ffe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006002:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006006:	ee17 2a90 	vmov	r2, s15
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800600e:	e008      	b.n	8006022 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	609a      	str	r2, [r3, #8]
}
 8006022:	bf00      	nop
 8006024:	3724      	adds	r7, #36	; 0x24
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	58024400 	.word	0x58024400
 8006034:	03d09000 	.word	0x03d09000
 8006038:	46000000 	.word	0x46000000
 800603c:	4c742400 	.word	0x4c742400
 8006040:	4a742400 	.word	0x4a742400
 8006044:	4af42400 	.word	0x4af42400

08006048 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006048:	b480      	push	{r7}
 800604a:	b089      	sub	sp, #36	; 0x24
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006050:	4ba1      	ldr	r3, [pc, #644]	; (80062d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006054:	f003 0303 	and.w	r3, r3, #3
 8006058:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800605a:	4b9f      	ldr	r3, [pc, #636]	; (80062d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800605c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605e:	0d1b      	lsrs	r3, r3, #20
 8006060:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006064:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006066:	4b9c      	ldr	r3, [pc, #624]	; (80062d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606a:	0a1b      	lsrs	r3, r3, #8
 800606c:	f003 0301 	and.w	r3, r3, #1
 8006070:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006072:	4b99      	ldr	r3, [pc, #612]	; (80062d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006076:	08db      	lsrs	r3, r3, #3
 8006078:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	fb02 f303 	mul.w	r3, r2, r3
 8006082:	ee07 3a90 	vmov	s15, r3
 8006086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800608a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	2b00      	cmp	r3, #0
 8006092:	f000 8111 	beq.w	80062b8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	2b02      	cmp	r3, #2
 800609a:	f000 8083 	beq.w	80061a4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	f200 80a1 	bhi.w	80061e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d003      	beq.n	80060b4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d056      	beq.n	8006160 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80060b2:	e099      	b.n	80061e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060b4:	4b88      	ldr	r3, [pc, #544]	; (80062d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0320 	and.w	r3, r3, #32
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d02d      	beq.n	800611c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80060c0:	4b85      	ldr	r3, [pc, #532]	; (80062d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	08db      	lsrs	r3, r3, #3
 80060c6:	f003 0303 	and.w	r3, r3, #3
 80060ca:	4a84      	ldr	r2, [pc, #528]	; (80062dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80060cc:	fa22 f303 	lsr.w	r3, r2, r3
 80060d0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	ee07 3a90 	vmov	s15, r3
 80060d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	ee07 3a90 	vmov	s15, r3
 80060e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060ea:	4b7b      	ldr	r3, [pc, #492]	; (80062d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060f2:	ee07 3a90 	vmov	s15, r3
 80060f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80060fe:	eddf 5a78 	vldr	s11, [pc, #480]	; 80062e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800610a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800610e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006116:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800611a:	e087      	b.n	800622c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	ee07 3a90 	vmov	s15, r3
 8006122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006126:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80062e4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800612a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800612e:	4b6a      	ldr	r3, [pc, #424]	; (80062d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006136:	ee07 3a90 	vmov	s15, r3
 800613a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800613e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006142:	eddf 5a67 	vldr	s11, [pc, #412]	; 80062e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800614a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800614e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800615a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800615e:	e065      	b.n	800622c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	ee07 3a90 	vmov	s15, r3
 8006166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800616a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80062e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800616e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006172:	4b59      	ldr	r3, [pc, #356]	; (80062d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800617a:	ee07 3a90 	vmov	s15, r3
 800617e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006182:	ed97 6a03 	vldr	s12, [r7, #12]
 8006186:	eddf 5a56 	vldr	s11, [pc, #344]	; 80062e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800618a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800618e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006192:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800619a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800619e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061a2:	e043      	b.n	800622c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	ee07 3a90 	vmov	s15, r3
 80061aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80062ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80061b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061b6:	4b48      	ldr	r3, [pc, #288]	; (80062d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061be:	ee07 3a90 	vmov	s15, r3
 80061c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80061ca:	eddf 5a45 	vldr	s11, [pc, #276]	; 80062e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80061ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061e6:	e021      	b.n	800622c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	ee07 3a90 	vmov	s15, r3
 80061ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061f2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80062e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80061f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061fa:	4b37      	ldr	r3, [pc, #220]	; (80062d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006202:	ee07 3a90 	vmov	s15, r3
 8006206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800620a:	ed97 6a03 	vldr	s12, [r7, #12]
 800620e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80062e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006212:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800621a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800621e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006226:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800622a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800622c:	4b2a      	ldr	r3, [pc, #168]	; (80062d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800622e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006230:	0a5b      	lsrs	r3, r3, #9
 8006232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006236:	ee07 3a90 	vmov	s15, r3
 800623a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800623e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006242:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006246:	edd7 6a07 	vldr	s13, [r7, #28]
 800624a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800624e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006252:	ee17 2a90 	vmov	r2, s15
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800625a:	4b1f      	ldr	r3, [pc, #124]	; (80062d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800625c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625e:	0c1b      	lsrs	r3, r3, #16
 8006260:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006264:	ee07 3a90 	vmov	s15, r3
 8006268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800626c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006270:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006274:	edd7 6a07 	vldr	s13, [r7, #28]
 8006278:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800627c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006280:	ee17 2a90 	vmov	r2, s15
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006288:	4b13      	ldr	r3, [pc, #76]	; (80062d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800628a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628c:	0e1b      	lsrs	r3, r3, #24
 800628e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006292:	ee07 3a90 	vmov	s15, r3
 8006296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800629a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800629e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80062a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062ae:	ee17 2a90 	vmov	r2, s15
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80062b6:	e008      	b.n	80062ca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	609a      	str	r2, [r3, #8]
}
 80062ca:	bf00      	nop
 80062cc:	3724      	adds	r7, #36	; 0x24
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	58024400 	.word	0x58024400
 80062dc:	03d09000 	.word	0x03d09000
 80062e0:	46000000 	.word	0x46000000
 80062e4:	4c742400 	.word	0x4c742400
 80062e8:	4a742400 	.word	0x4a742400
 80062ec:	4af42400 	.word	0x4af42400

080062f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062fa:	2300      	movs	r3, #0
 80062fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80062fe:	4b53      	ldr	r3, [pc, #332]	; (800644c <RCCEx_PLL2_Config+0x15c>)
 8006300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006302:	f003 0303 	and.w	r3, r3, #3
 8006306:	2b03      	cmp	r3, #3
 8006308:	d101      	bne.n	800630e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e099      	b.n	8006442 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800630e:	4b4f      	ldr	r3, [pc, #316]	; (800644c <RCCEx_PLL2_Config+0x15c>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a4e      	ldr	r2, [pc, #312]	; (800644c <RCCEx_PLL2_Config+0x15c>)
 8006314:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006318:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800631a:	f7fc ff17 	bl	800314c <HAL_GetTick>
 800631e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006320:	e008      	b.n	8006334 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006322:	f7fc ff13 	bl	800314c <HAL_GetTick>
 8006326:	4602      	mov	r2, r0
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	2b02      	cmp	r3, #2
 800632e:	d901      	bls.n	8006334 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006330:	2303      	movs	r3, #3
 8006332:	e086      	b.n	8006442 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006334:	4b45      	ldr	r3, [pc, #276]	; (800644c <RCCEx_PLL2_Config+0x15c>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1f0      	bne.n	8006322 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006340:	4b42      	ldr	r3, [pc, #264]	; (800644c <RCCEx_PLL2_Config+0x15c>)
 8006342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006344:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	031b      	lsls	r3, r3, #12
 800634e:	493f      	ldr	r1, [pc, #252]	; (800644c <RCCEx_PLL2_Config+0x15c>)
 8006350:	4313      	orrs	r3, r2
 8006352:	628b      	str	r3, [r1, #40]	; 0x28
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	3b01      	subs	r3, #1
 800635a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	3b01      	subs	r3, #1
 8006364:	025b      	lsls	r3, r3, #9
 8006366:	b29b      	uxth	r3, r3
 8006368:	431a      	orrs	r2, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	3b01      	subs	r3, #1
 8006370:	041b      	lsls	r3, r3, #16
 8006372:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006376:	431a      	orrs	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	3b01      	subs	r3, #1
 800637e:	061b      	lsls	r3, r3, #24
 8006380:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006384:	4931      	ldr	r1, [pc, #196]	; (800644c <RCCEx_PLL2_Config+0x15c>)
 8006386:	4313      	orrs	r3, r2
 8006388:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800638a:	4b30      	ldr	r3, [pc, #192]	; (800644c <RCCEx_PLL2_Config+0x15c>)
 800638c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	492d      	ldr	r1, [pc, #180]	; (800644c <RCCEx_PLL2_Config+0x15c>)
 8006398:	4313      	orrs	r3, r2
 800639a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800639c:	4b2b      	ldr	r3, [pc, #172]	; (800644c <RCCEx_PLL2_Config+0x15c>)
 800639e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a0:	f023 0220 	bic.w	r2, r3, #32
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	699b      	ldr	r3, [r3, #24]
 80063a8:	4928      	ldr	r1, [pc, #160]	; (800644c <RCCEx_PLL2_Config+0x15c>)
 80063aa:	4313      	orrs	r3, r2
 80063ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80063ae:	4b27      	ldr	r3, [pc, #156]	; (800644c <RCCEx_PLL2_Config+0x15c>)
 80063b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b2:	4a26      	ldr	r2, [pc, #152]	; (800644c <RCCEx_PLL2_Config+0x15c>)
 80063b4:	f023 0310 	bic.w	r3, r3, #16
 80063b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80063ba:	4b24      	ldr	r3, [pc, #144]	; (800644c <RCCEx_PLL2_Config+0x15c>)
 80063bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063be:	4b24      	ldr	r3, [pc, #144]	; (8006450 <RCCEx_PLL2_Config+0x160>)
 80063c0:	4013      	ands	r3, r2
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	69d2      	ldr	r2, [r2, #28]
 80063c6:	00d2      	lsls	r2, r2, #3
 80063c8:	4920      	ldr	r1, [pc, #128]	; (800644c <RCCEx_PLL2_Config+0x15c>)
 80063ca:	4313      	orrs	r3, r2
 80063cc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80063ce:	4b1f      	ldr	r3, [pc, #124]	; (800644c <RCCEx_PLL2_Config+0x15c>)
 80063d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d2:	4a1e      	ldr	r2, [pc, #120]	; (800644c <RCCEx_PLL2_Config+0x15c>)
 80063d4:	f043 0310 	orr.w	r3, r3, #16
 80063d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d106      	bne.n	80063ee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80063e0:	4b1a      	ldr	r3, [pc, #104]	; (800644c <RCCEx_PLL2_Config+0x15c>)
 80063e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e4:	4a19      	ldr	r2, [pc, #100]	; (800644c <RCCEx_PLL2_Config+0x15c>)
 80063e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80063ec:	e00f      	b.n	800640e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d106      	bne.n	8006402 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80063f4:	4b15      	ldr	r3, [pc, #84]	; (800644c <RCCEx_PLL2_Config+0x15c>)
 80063f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f8:	4a14      	ldr	r2, [pc, #80]	; (800644c <RCCEx_PLL2_Config+0x15c>)
 80063fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006400:	e005      	b.n	800640e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006402:	4b12      	ldr	r3, [pc, #72]	; (800644c <RCCEx_PLL2_Config+0x15c>)
 8006404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006406:	4a11      	ldr	r2, [pc, #68]	; (800644c <RCCEx_PLL2_Config+0x15c>)
 8006408:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800640c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800640e:	4b0f      	ldr	r3, [pc, #60]	; (800644c <RCCEx_PLL2_Config+0x15c>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a0e      	ldr	r2, [pc, #56]	; (800644c <RCCEx_PLL2_Config+0x15c>)
 8006414:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006418:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800641a:	f7fc fe97 	bl	800314c <HAL_GetTick>
 800641e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006420:	e008      	b.n	8006434 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006422:	f7fc fe93 	bl	800314c <HAL_GetTick>
 8006426:	4602      	mov	r2, r0
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	2b02      	cmp	r3, #2
 800642e:	d901      	bls.n	8006434 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e006      	b.n	8006442 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006434:	4b05      	ldr	r3, [pc, #20]	; (800644c <RCCEx_PLL2_Config+0x15c>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800643c:	2b00      	cmp	r3, #0
 800643e:	d0f0      	beq.n	8006422 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006440:	7bfb      	ldrb	r3, [r7, #15]
}
 8006442:	4618      	mov	r0, r3
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	58024400 	.word	0x58024400
 8006450:	ffff0007 	.word	0xffff0007

08006454 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800645e:	2300      	movs	r3, #0
 8006460:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006462:	4b53      	ldr	r3, [pc, #332]	; (80065b0 <RCCEx_PLL3_Config+0x15c>)
 8006464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006466:	f003 0303 	and.w	r3, r3, #3
 800646a:	2b03      	cmp	r3, #3
 800646c:	d101      	bne.n	8006472 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e099      	b.n	80065a6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006472:	4b4f      	ldr	r3, [pc, #316]	; (80065b0 <RCCEx_PLL3_Config+0x15c>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a4e      	ldr	r2, [pc, #312]	; (80065b0 <RCCEx_PLL3_Config+0x15c>)
 8006478:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800647c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800647e:	f7fc fe65 	bl	800314c <HAL_GetTick>
 8006482:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006484:	e008      	b.n	8006498 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006486:	f7fc fe61 	bl	800314c <HAL_GetTick>
 800648a:	4602      	mov	r2, r0
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	1ad3      	subs	r3, r2, r3
 8006490:	2b02      	cmp	r3, #2
 8006492:	d901      	bls.n	8006498 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	e086      	b.n	80065a6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006498:	4b45      	ldr	r3, [pc, #276]	; (80065b0 <RCCEx_PLL3_Config+0x15c>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d1f0      	bne.n	8006486 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80064a4:	4b42      	ldr	r3, [pc, #264]	; (80065b0 <RCCEx_PLL3_Config+0x15c>)
 80064a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	051b      	lsls	r3, r3, #20
 80064b2:	493f      	ldr	r1, [pc, #252]	; (80065b0 <RCCEx_PLL3_Config+0x15c>)
 80064b4:	4313      	orrs	r3, r2
 80064b6:	628b      	str	r3, [r1, #40]	; 0x28
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	3b01      	subs	r3, #1
 80064be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	3b01      	subs	r3, #1
 80064c8:	025b      	lsls	r3, r3, #9
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	431a      	orrs	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	3b01      	subs	r3, #1
 80064d4:	041b      	lsls	r3, r3, #16
 80064d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80064da:	431a      	orrs	r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	3b01      	subs	r3, #1
 80064e2:	061b      	lsls	r3, r3, #24
 80064e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80064e8:	4931      	ldr	r1, [pc, #196]	; (80065b0 <RCCEx_PLL3_Config+0x15c>)
 80064ea:	4313      	orrs	r3, r2
 80064ec:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80064ee:	4b30      	ldr	r3, [pc, #192]	; (80065b0 <RCCEx_PLL3_Config+0x15c>)
 80064f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	492d      	ldr	r1, [pc, #180]	; (80065b0 <RCCEx_PLL3_Config+0x15c>)
 80064fc:	4313      	orrs	r3, r2
 80064fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006500:	4b2b      	ldr	r3, [pc, #172]	; (80065b0 <RCCEx_PLL3_Config+0x15c>)
 8006502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006504:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	4928      	ldr	r1, [pc, #160]	; (80065b0 <RCCEx_PLL3_Config+0x15c>)
 800650e:	4313      	orrs	r3, r2
 8006510:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006512:	4b27      	ldr	r3, [pc, #156]	; (80065b0 <RCCEx_PLL3_Config+0x15c>)
 8006514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006516:	4a26      	ldr	r2, [pc, #152]	; (80065b0 <RCCEx_PLL3_Config+0x15c>)
 8006518:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800651c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800651e:	4b24      	ldr	r3, [pc, #144]	; (80065b0 <RCCEx_PLL3_Config+0x15c>)
 8006520:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006522:	4b24      	ldr	r3, [pc, #144]	; (80065b4 <RCCEx_PLL3_Config+0x160>)
 8006524:	4013      	ands	r3, r2
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	69d2      	ldr	r2, [r2, #28]
 800652a:	00d2      	lsls	r2, r2, #3
 800652c:	4920      	ldr	r1, [pc, #128]	; (80065b0 <RCCEx_PLL3_Config+0x15c>)
 800652e:	4313      	orrs	r3, r2
 8006530:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006532:	4b1f      	ldr	r3, [pc, #124]	; (80065b0 <RCCEx_PLL3_Config+0x15c>)
 8006534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006536:	4a1e      	ldr	r2, [pc, #120]	; (80065b0 <RCCEx_PLL3_Config+0x15c>)
 8006538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800653c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d106      	bne.n	8006552 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006544:	4b1a      	ldr	r3, [pc, #104]	; (80065b0 <RCCEx_PLL3_Config+0x15c>)
 8006546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006548:	4a19      	ldr	r2, [pc, #100]	; (80065b0 <RCCEx_PLL3_Config+0x15c>)
 800654a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800654e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006550:	e00f      	b.n	8006572 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	2b01      	cmp	r3, #1
 8006556:	d106      	bne.n	8006566 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006558:	4b15      	ldr	r3, [pc, #84]	; (80065b0 <RCCEx_PLL3_Config+0x15c>)
 800655a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655c:	4a14      	ldr	r2, [pc, #80]	; (80065b0 <RCCEx_PLL3_Config+0x15c>)
 800655e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006562:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006564:	e005      	b.n	8006572 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006566:	4b12      	ldr	r3, [pc, #72]	; (80065b0 <RCCEx_PLL3_Config+0x15c>)
 8006568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656a:	4a11      	ldr	r2, [pc, #68]	; (80065b0 <RCCEx_PLL3_Config+0x15c>)
 800656c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006570:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006572:	4b0f      	ldr	r3, [pc, #60]	; (80065b0 <RCCEx_PLL3_Config+0x15c>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a0e      	ldr	r2, [pc, #56]	; (80065b0 <RCCEx_PLL3_Config+0x15c>)
 8006578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800657c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800657e:	f7fc fde5 	bl	800314c <HAL_GetTick>
 8006582:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006584:	e008      	b.n	8006598 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006586:	f7fc fde1 	bl	800314c <HAL_GetTick>
 800658a:	4602      	mov	r2, r0
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	2b02      	cmp	r3, #2
 8006592:	d901      	bls.n	8006598 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006594:	2303      	movs	r3, #3
 8006596:	e006      	b.n	80065a6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006598:	4b05      	ldr	r3, [pc, #20]	; (80065b0 <RCCEx_PLL3_Config+0x15c>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d0f0      	beq.n	8006586 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80065a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	58024400 	.word	0x58024400
 80065b4:	ffff0007 	.word	0xffff0007

080065b8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d101      	bne.n	80065ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e0f1      	b.n	80067ae <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a78      	ldr	r2, [pc, #480]	; (80067b8 <HAL_SPI_Init+0x200>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d00f      	beq.n	80065fa <HAL_SPI_Init+0x42>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a77      	ldr	r2, [pc, #476]	; (80067bc <HAL_SPI_Init+0x204>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d00a      	beq.n	80065fa <HAL_SPI_Init+0x42>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a75      	ldr	r2, [pc, #468]	; (80067c0 <HAL_SPI_Init+0x208>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d005      	beq.n	80065fa <HAL_SPI_Init+0x42>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	2b0f      	cmp	r3, #15
 80065f4:	d901      	bls.n	80065fa <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e0d9      	b.n	80067ae <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 ff74 	bl	80074e8 <SPI_GetPacketSize>
 8006600:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a6c      	ldr	r2, [pc, #432]	; (80067b8 <HAL_SPI_Init+0x200>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d00c      	beq.n	8006626 <HAL_SPI_Init+0x6e>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a6a      	ldr	r2, [pc, #424]	; (80067bc <HAL_SPI_Init+0x204>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d007      	beq.n	8006626 <HAL_SPI_Init+0x6e>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a69      	ldr	r2, [pc, #420]	; (80067c0 <HAL_SPI_Init+0x208>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d002      	beq.n	8006626 <HAL_SPI_Init+0x6e>
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2b08      	cmp	r3, #8
 8006624:	d811      	bhi.n	800664a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800662a:	4a63      	ldr	r2, [pc, #396]	; (80067b8 <HAL_SPI_Init+0x200>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d009      	beq.n	8006644 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a61      	ldr	r2, [pc, #388]	; (80067bc <HAL_SPI_Init+0x204>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d004      	beq.n	8006644 <HAL_SPI_Init+0x8c>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a60      	ldr	r2, [pc, #384]	; (80067c0 <HAL_SPI_Init+0x208>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d104      	bne.n	800664e <HAL_SPI_Init+0x96>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2b10      	cmp	r3, #16
 8006648:	d901      	bls.n	800664e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e0af      	b.n	80067ae <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b00      	cmp	r3, #0
 8006658:	d106      	bne.n	8006668 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f7fc f9ca 	bl	80029fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2202      	movs	r2, #2
 800666c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f022 0201 	bic.w	r2, r2, #1
 800667e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800668a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	699b      	ldr	r3, [r3, #24]
 8006690:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006694:	d119      	bne.n	80066ca <HAL_SPI_Init+0x112>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800669e:	d103      	bne.n	80066a8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d008      	beq.n	80066ba <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10c      	bne.n	80066ca <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80066b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066b8:	d107      	bne.n	80066ca <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80066c8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	69da      	ldr	r2, [r3, #28]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d2:	431a      	orrs	r2, r3
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	431a      	orrs	r2, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066dc:	ea42 0103 	orr.w	r1, r2, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	68da      	ldr	r2, [r3, #12]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	430a      	orrs	r2, r1
 80066ea:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f4:	431a      	orrs	r2, r3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fa:	431a      	orrs	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	699b      	ldr	r3, [r3, #24]
 8006700:	431a      	orrs	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	431a      	orrs	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	695b      	ldr	r3, [r3, #20]
 800670c:	431a      	orrs	r2, r3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	431a      	orrs	r2, r3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	431a      	orrs	r2, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800671e:	431a      	orrs	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	431a      	orrs	r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800672a:	ea42 0103 	orr.w	r1, r2, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	430a      	orrs	r2, r1
 8006738:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d113      	bne.n	800676a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006754:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006768:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f022 0201 	bic.w	r2, r2, #1
 8006778:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00a      	beq.n	800679c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	430a      	orrs	r2, r1
 800679a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	40013000 	.word	0x40013000
 80067bc:	40003800 	.word	0x40003800
 80067c0:	40003c00 	.word	0x40003c00

080067c4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b08a      	sub	sp, #40	; 0x28
 80067c8:	af02      	add	r7, sp, #8
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	603b      	str	r3, [r7, #0]
 80067d0:	4613      	mov	r3, r2
 80067d2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	3320      	adds	r3, #32
 80067da:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80067dc:	2300      	movs	r3, #0
 80067de:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d101      	bne.n	80067ee <HAL_SPI_Transmit+0x2a>
 80067ea:	2302      	movs	r3, #2
 80067ec:	e1d7      	b.n	8006b9e <HAL_SPI_Transmit+0x3da>
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067f6:	f7fc fca9 	bl	800314c <HAL_GetTick>
 80067fa:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006802:	b2db      	uxtb	r3, r3
 8006804:	2b01      	cmp	r3, #1
 8006806:	d007      	beq.n	8006818 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8006808:	2302      	movs	r3, #2
 800680a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2200      	movs	r2, #0
 8006810:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006814:	7efb      	ldrb	r3, [r7, #27]
 8006816:	e1c2      	b.n	8006b9e <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d002      	beq.n	8006824 <HAL_SPI_Transmit+0x60>
 800681e:	88fb      	ldrh	r3, [r7, #6]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d107      	bne.n	8006834 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2200      	movs	r2, #0
 800682c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006830:	7efb      	ldrb	r3, [r7, #27]
 8006832:	e1b4      	b.n	8006b9e <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2203      	movs	r2, #3
 8006838:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2200      	movs	r2, #0
 8006840:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	68ba      	ldr	r2, [r7, #8]
 8006848:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	88fa      	ldrh	r2, [r7, #6]
 800684e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	88fa      	ldrh	r2, [r7, #6]
 8006856:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2200      	movs	r2, #0
 8006864:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2200      	movs	r2, #0
 800686c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8006884:	d107      	bne.n	8006896 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006894:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	685a      	ldr	r2, [r3, #4]
 800689c:	4b96      	ldr	r3, [pc, #600]	; (8006af8 <HAL_SPI_Transmit+0x334>)
 800689e:	4013      	ands	r3, r2
 80068a0:	88f9      	ldrh	r1, [r7, #6]
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	6812      	ldr	r2, [r2, #0]
 80068a6:	430b      	orrs	r3, r1
 80068a8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f042 0201 	orr.w	r2, r2, #1
 80068b8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068c2:	d107      	bne.n	80068d4 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	2b0f      	cmp	r3, #15
 80068da:	d947      	bls.n	800696c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80068dc:	e03f      	b.n	800695e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	695b      	ldr	r3, [r3, #20]
 80068e4:	f003 0302 	and.w	r3, r3, #2
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	d114      	bne.n	8006916 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	6812      	ldr	r2, [r2, #0]
 80068f6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068fc:	1d1a      	adds	r2, r3, #4
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006908:	b29b      	uxth	r3, r3
 800690a:	3b01      	subs	r3, #1
 800690c:	b29a      	uxth	r2, r3
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006914:	e023      	b.n	800695e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006916:	f7fc fc19 	bl	800314c <HAL_GetTick>
 800691a:	4602      	mov	r2, r0
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	1ad3      	subs	r3, r2, r3
 8006920:	683a      	ldr	r2, [r7, #0]
 8006922:	429a      	cmp	r2, r3
 8006924:	d803      	bhi.n	800692e <HAL_SPI_Transmit+0x16a>
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800692c:	d102      	bne.n	8006934 <HAL_SPI_Transmit+0x170>
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d114      	bne.n	800695e <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f000 fd09 	bl	800734c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006948:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2201      	movs	r2, #1
 8006956:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e11f      	b.n	8006b9e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006964:	b29b      	uxth	r3, r3
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1b9      	bne.n	80068de <HAL_SPI_Transmit+0x11a>
 800696a:	e0f2      	b.n	8006b52 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	2b07      	cmp	r3, #7
 8006972:	f240 80e7 	bls.w	8006b44 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006976:	e05d      	b.n	8006a34 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	f003 0302 	and.w	r3, r3, #2
 8006982:	2b02      	cmp	r3, #2
 8006984:	d132      	bne.n	80069ec <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800698c:	b29b      	uxth	r3, r3
 800698e:	2b01      	cmp	r3, #1
 8006990:	d918      	bls.n	80069c4 <HAL_SPI_Transmit+0x200>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006996:	2b00      	cmp	r3, #0
 8006998:	d014      	beq.n	80069c4 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	6812      	ldr	r2, [r2, #0]
 80069a4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069aa:	1d1a      	adds	r2, r3, #4
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	3b02      	subs	r3, #2
 80069ba:	b29a      	uxth	r2, r3
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80069c2:	e037      	b.n	8006a34 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069c8:	881a      	ldrh	r2, [r3, #0]
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069d2:	1c9a      	adds	r2, r3, #2
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80069de:	b29b      	uxth	r3, r3
 80069e0:	3b01      	subs	r3, #1
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80069ea:	e023      	b.n	8006a34 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069ec:	f7fc fbae 	bl	800314c <HAL_GetTick>
 80069f0:	4602      	mov	r2, r0
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	683a      	ldr	r2, [r7, #0]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d803      	bhi.n	8006a04 <HAL_SPI_Transmit+0x240>
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a02:	d102      	bne.n	8006a0a <HAL_SPI_Transmit+0x246>
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d114      	bne.n	8006a34 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f000 fc9e 	bl	800734c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a1e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006a30:	2303      	movs	r3, #3
 8006a32:	e0b4      	b.n	8006b9e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d19b      	bne.n	8006978 <HAL_SPI_Transmit+0x1b4>
 8006a40:	e087      	b.n	8006b52 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	695b      	ldr	r3, [r3, #20]
 8006a48:	f003 0302 	and.w	r3, r3, #2
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	d155      	bne.n	8006afc <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	2b03      	cmp	r3, #3
 8006a5a:	d918      	bls.n	8006a8e <HAL_SPI_Transmit+0x2ca>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a60:	2b40      	cmp	r3, #64	; 0x40
 8006a62:	d914      	bls.n	8006a8e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6812      	ldr	r2, [r2, #0]
 8006a6e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a74:	1d1a      	adds	r2, r3, #4
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	3b04      	subs	r3, #4
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006a8c:	e05a      	b.n	8006b44 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d917      	bls.n	8006aca <HAL_SPI_Transmit+0x306>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d013      	beq.n	8006aca <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aa6:	881a      	ldrh	r2, [r3, #0]
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ab0:	1c9a      	adds	r2, r3, #2
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	3b02      	subs	r3, #2
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006ac8:	e03c      	b.n	8006b44 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	3320      	adds	r3, #32
 8006ad4:	7812      	ldrb	r2, [r2, #0]
 8006ad6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006adc:	1c5a      	adds	r2, r3, #1
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	3b01      	subs	r3, #1
 8006aec:	b29a      	uxth	r2, r3
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006af4:	e026      	b.n	8006b44 <HAL_SPI_Transmit+0x380>
 8006af6:	bf00      	nop
 8006af8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006afc:	f7fc fb26 	bl	800314c <HAL_GetTick>
 8006b00:	4602      	mov	r2, r0
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	1ad3      	subs	r3, r2, r3
 8006b06:	683a      	ldr	r2, [r7, #0]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d803      	bhi.n	8006b14 <HAL_SPI_Transmit+0x350>
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b12:	d102      	bne.n	8006b1a <HAL_SPI_Transmit+0x356>
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d114      	bne.n	8006b44 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f000 fc16 	bl	800734c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b2e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006b40:	2303      	movs	r3, #3
 8006b42:	e02c      	b.n	8006b9e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f47f af78 	bne.w	8006a42 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	9300      	str	r3, [sp, #0]
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	2108      	movs	r1, #8
 8006b5c:	68f8      	ldr	r0, [r7, #12]
 8006b5e:	f000 fc95 	bl	800748c <SPI_WaitOnFlagUntilTimeout>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d007      	beq.n	8006b78 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b6e:	f043 0220 	orr.w	r2, r3, #32
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f000 fbe7 	bl	800734c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d001      	beq.n	8006b9c <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e000      	b.n	8006b9e <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8006b9c:	7efb      	ldrb	r3, [r7, #27]
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3720      	adds	r7, #32
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop

08006ba8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b08a      	sub	sp, #40	; 0x28
 8006bac:	af02      	add	r7, sp, #8
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	603b      	str	r3, [r7, #0]
 8006bb4:	4613      	mov	r3, r2
 8006bb6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	3330      	adds	r3, #48	; 0x30
 8006bc2:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bcc:	d112      	bne.n	8006bf4 <HAL_SPI_Receive+0x4c>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d10e      	bne.n	8006bf4 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2204      	movs	r2, #4
 8006bda:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006bde:	88fa      	ldrh	r2, [r7, #6]
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	9300      	str	r3, [sp, #0]
 8006be4:	4613      	mov	r3, r2
 8006be6:	68ba      	ldr	r2, [r7, #8]
 8006be8:	68b9      	ldr	r1, [r7, #8]
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f000 f978 	bl	8006ee0 <HAL_SPI_TransmitReceive>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	e16f      	b.n	8006ed4 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d101      	bne.n	8006c02 <HAL_SPI_Receive+0x5a>
 8006bfe:	2302      	movs	r3, #2
 8006c00:	e168      	b.n	8006ed4 <HAL_SPI_Receive+0x32c>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2201      	movs	r2, #1
 8006c06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c0a:	f7fc fa9f 	bl	800314c <HAL_GetTick>
 8006c0e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d007      	beq.n	8006c2c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8006c1c:	2302      	movs	r3, #2
 8006c1e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006c28:	7ffb      	ldrb	r3, [r7, #31]
 8006c2a:	e153      	b.n	8006ed4 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d002      	beq.n	8006c38 <HAL_SPI_Receive+0x90>
 8006c32:	88fb      	ldrh	r3, [r7, #6]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d107      	bne.n	8006c48 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006c44:	7ffb      	ldrb	r3, [r7, #31]
 8006c46:	e145      	b.n	8006ed4 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2204      	movs	r2, #4
 8006c4c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	68ba      	ldr	r2, [r7, #8]
 8006c5c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	88fa      	ldrh	r2, [r7, #6]
 8006c62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	88fa      	ldrh	r2, [r7, #6]
 8006c6a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2200      	movs	r2, #0
 8006c72:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2200      	movs	r2, #0
 8006c88:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8006c98:	d107      	bne.n	8006caa <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ca8:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	685a      	ldr	r2, [r3, #4]
 8006cb0:	4b8a      	ldr	r3, [pc, #552]	; (8006edc <HAL_SPI_Receive+0x334>)
 8006cb2:	4013      	ands	r3, r2
 8006cb4:	88f9      	ldrh	r1, [r7, #6]
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	6812      	ldr	r2, [r2, #0]
 8006cba:	430b      	orrs	r3, r1
 8006cbc:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f042 0201 	orr.w	r2, r2, #1
 8006ccc:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006cd6:	d107      	bne.n	8006ce8 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ce6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	2b0f      	cmp	r3, #15
 8006cee:	d948      	bls.n	8006d82 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006cf0:	e040      	b.n	8006d74 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	695a      	ldr	r2, [r3, #20]
 8006cf8:	f248 0308 	movw	r3, #32776	; 0x8008
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d014      	beq.n	8006d2c <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d0a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006d0c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d12:	1d1a      	adds	r2, r3, #4
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	3b01      	subs	r3, #1
 8006d22:	b29a      	uxth	r2, r3
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006d2a:	e023      	b.n	8006d74 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d2c:	f7fc fa0e 	bl	800314c <HAL_GetTick>
 8006d30:	4602      	mov	r2, r0
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d803      	bhi.n	8006d44 <HAL_SPI_Receive+0x19c>
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d42:	d102      	bne.n	8006d4a <HAL_SPI_Receive+0x1a2>
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d114      	bne.n	8006d74 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	f000 fafe 	bl	800734c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006d70:	2303      	movs	r3, #3
 8006d72:	e0af      	b.n	8006ed4 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d1b8      	bne.n	8006cf2 <HAL_SPI_Receive+0x14a>
 8006d80:	e095      	b.n	8006eae <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	2b07      	cmp	r3, #7
 8006d88:	f240 808b 	bls.w	8006ea2 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006d8c:	e03f      	b.n	8006e0e <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	695b      	ldr	r3, [r3, #20]
 8006d94:	f003 0301 	and.w	r3, r3, #1
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d114      	bne.n	8006dc6 <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006da0:	69ba      	ldr	r2, [r7, #24]
 8006da2:	8812      	ldrh	r2, [r2, #0]
 8006da4:	b292      	uxth	r2, r2
 8006da6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dac:	1c9a      	adds	r2, r3, #2
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	b29a      	uxth	r2, r3
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006dc4:	e023      	b.n	8006e0e <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dc6:	f7fc f9c1 	bl	800314c <HAL_GetTick>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	1ad3      	subs	r3, r2, r3
 8006dd0:	683a      	ldr	r2, [r7, #0]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d803      	bhi.n	8006dde <HAL_SPI_Receive+0x236>
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ddc:	d102      	bne.n	8006de4 <HAL_SPI_Receive+0x23c>
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d114      	bne.n	8006e0e <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006de4:	68f8      	ldr	r0, [r7, #12]
 8006de6:	f000 fab1 	bl	800734c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006df8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	e062      	b.n	8006ed4 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d1b9      	bne.n	8006d8e <HAL_SPI_Receive+0x1e6>
 8006e1a:	e048      	b.n	8006eae <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	f003 0301 	and.w	r3, r3, #1
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d117      	bne.n	8006e5a <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e36:	7812      	ldrb	r2, [r2, #0]
 8006e38:	b2d2      	uxtb	r2, r2
 8006e3a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e40:	1c5a      	adds	r2, r3, #1
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	b29a      	uxth	r2, r3
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006e58:	e023      	b.n	8006ea2 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e5a:	f7fc f977 	bl	800314c <HAL_GetTick>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	1ad3      	subs	r3, r2, r3
 8006e64:	683a      	ldr	r2, [r7, #0]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d803      	bhi.n	8006e72 <HAL_SPI_Receive+0x2ca>
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e70:	d102      	bne.n	8006e78 <HAL_SPI_Receive+0x2d0>
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d114      	bne.n	8006ea2 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006e78:	68f8      	ldr	r0, [r7, #12]
 8006e7a:	f000 fa67 	bl	800734c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	e018      	b.n	8006ed4 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1b6      	bne.n	8006e1c <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006eae:	68f8      	ldr	r0, [r7, #12]
 8006eb0:	f000 fa4c 	bl	800734c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d001      	beq.n	8006ed2 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e000      	b.n	8006ed4 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 8006ed2:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3720      	adds	r7, #32
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	ffff0000 	.word	0xffff0000

08006ee0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b08e      	sub	sp, #56	; 0x38
 8006ee4:	af02      	add	r7, sp, #8
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	607a      	str	r2, [r7, #4]
 8006eec:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	3320      	adds	r3, #32
 8006efa:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	3330      	adds	r3, #48	; 0x30
 8006f02:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d101      	bne.n	8006f12 <HAL_SPI_TransmitReceive+0x32>
 8006f0e:	2302      	movs	r3, #2
 8006f10:	e209      	b.n	8007326 <HAL_SPI_TransmitReceive+0x446>
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2201      	movs	r2, #1
 8006f16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f1a:	f7fc f917 	bl	800314c <HAL_GetTick>
 8006f1e:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8006f20:	887b      	ldrh	r3, [r7, #2]
 8006f22:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8006f24:	887b      	ldrh	r3, [r7, #2]
 8006f26:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006f2e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006f36:	7efb      	ldrb	r3, [r7, #27]
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d014      	beq.n	8006f66 <HAL_SPI_TransmitReceive+0x86>
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f42:	d106      	bne.n	8006f52 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d102      	bne.n	8006f52 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8006f4c:	7efb      	ldrb	r3, [r7, #27]
 8006f4e:	2b04      	cmp	r3, #4
 8006f50:	d009      	beq.n	8006f66 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8006f52:	2302      	movs	r3, #2
 8006f54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006f60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f64:	e1df      	b.n	8007326 <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d005      	beq.n	8006f78 <HAL_SPI_TransmitReceive+0x98>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d002      	beq.n	8006f78 <HAL_SPI_TransmitReceive+0x98>
 8006f72:	887b      	ldrh	r3, [r7, #2]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d109      	bne.n	8006f8c <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006f86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f8a:	e1cc      	b.n	8007326 <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	2b04      	cmp	r3, #4
 8006f96:	d003      	beq.n	8006fa0 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2205      	movs	r2, #5
 8006f9c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	887a      	ldrh	r2, [r7, #2]
 8006fb2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	887a      	ldrh	r2, [r7, #2]
 8006fba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	68ba      	ldr	r2, [r7, #8]
 8006fc2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	887a      	ldrh	r2, [r7, #2]
 8006fc8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	887a      	ldrh	r2, [r7, #2]
 8006fd0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	685a      	ldr	r2, [r3, #4]
 8006fe6:	4b82      	ldr	r3, [pc, #520]	; (80071f0 <HAL_SPI_TransmitReceive+0x310>)
 8006fe8:	4013      	ands	r3, r2
 8006fea:	8879      	ldrh	r1, [r7, #2]
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	6812      	ldr	r2, [r2, #0]
 8006ff0:	430b      	orrs	r3, r1
 8006ff2:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f042 0201 	orr.w	r2, r2, #1
 8007002:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800700c:	d107      	bne.n	800701e <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800701c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	2b0f      	cmp	r3, #15
 8007024:	d970      	bls.n	8007108 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007026:	e068      	b.n	80070fa <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	695b      	ldr	r3, [r3, #20]
 800702e:	f003 0302 	and.w	r3, r3, #2
 8007032:	2b02      	cmp	r3, #2
 8007034:	d11a      	bne.n	800706c <HAL_SPI_TransmitReceive+0x18c>
 8007036:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007038:	2b00      	cmp	r3, #0
 800703a:	d017      	beq.n	800706c <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	6812      	ldr	r2, [r2, #0]
 8007046:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800704c:	1d1a      	adds	r2, r3, #4
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007058:	b29b      	uxth	r3, r3
 800705a:	3b01      	subs	r3, #1
 800705c:	b29a      	uxth	r2, r3
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800706a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	695a      	ldr	r2, [r3, #20]
 8007072:	f248 0308 	movw	r3, #32776	; 0x8008
 8007076:	4013      	ands	r3, r2
 8007078:	2b00      	cmp	r3, #0
 800707a:	d01a      	beq.n	80070b2 <HAL_SPI_TransmitReceive+0x1d2>
 800707c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800707e:	2b00      	cmp	r3, #0
 8007080:	d017      	beq.n	80070b2 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800708a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800708c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007092:	1d1a      	adds	r2, r3, #4
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800709e:	b29b      	uxth	r3, r3
 80070a0:	3b01      	subs	r3, #1
 80070a2:	b29a      	uxth	r2, r3
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80070b0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070b2:	f7fc f84b 	bl	800314c <HAL_GetTick>
 80070b6:	4602      	mov	r2, r0
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070be:	429a      	cmp	r2, r3
 80070c0:	d803      	bhi.n	80070ca <HAL_SPI_TransmitReceive+0x1ea>
 80070c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070c8:	d102      	bne.n	80070d0 <HAL_SPI_TransmitReceive+0x1f0>
 80070ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d114      	bne.n	80070fa <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80070d0:	68f8      	ldr	r0, [r7, #12]
 80070d2:	f000 f93b 	bl	800734c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2201      	movs	r2, #1
 80070f2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80070f6:	2303      	movs	r3, #3
 80070f8:	e115      	b.n	8007326 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80070fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d193      	bne.n	8007028 <HAL_SPI_TransmitReceive+0x148>
 8007100:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007102:	2b00      	cmp	r3, #0
 8007104:	d190      	bne.n	8007028 <HAL_SPI_TransmitReceive+0x148>
 8007106:	e0e7      	b.n	80072d8 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	2b07      	cmp	r3, #7
 800710e:	f240 80dd 	bls.w	80072cc <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007112:	e066      	b.n	80071e2 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	f003 0302 	and.w	r3, r3, #2
 800711e:	2b02      	cmp	r3, #2
 8007120:	d119      	bne.n	8007156 <HAL_SPI_TransmitReceive+0x276>
 8007122:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007124:	2b00      	cmp	r3, #0
 8007126:	d016      	beq.n	8007156 <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800712c:	881a      	ldrh	r2, [r3, #0]
 800712e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007130:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007136:	1c9a      	adds	r2, r3, #2
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007142:	b29b      	uxth	r3, r3
 8007144:	3b01      	subs	r3, #1
 8007146:	b29a      	uxth	r2, r3
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007154:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	695b      	ldr	r3, [r3, #20]
 800715c:	f003 0301 	and.w	r3, r3, #1
 8007160:	2b01      	cmp	r3, #1
 8007162:	d11a      	bne.n	800719a <HAL_SPI_TransmitReceive+0x2ba>
 8007164:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007166:	2b00      	cmp	r3, #0
 8007168:	d017      	beq.n	800719a <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800716e:	6a3a      	ldr	r2, [r7, #32]
 8007170:	8812      	ldrh	r2, [r2, #0]
 8007172:	b292      	uxth	r2, r2
 8007174:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800717a:	1c9a      	adds	r2, r3, #2
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007186:	b29b      	uxth	r3, r3
 8007188:	3b01      	subs	r3, #1
 800718a:	b29a      	uxth	r2, r3
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007198:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800719a:	f7fb ffd7 	bl	800314c <HAL_GetTick>
 800719e:	4602      	mov	r2, r0
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d803      	bhi.n	80071b2 <HAL_SPI_TransmitReceive+0x2d2>
 80071aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b0:	d102      	bne.n	80071b8 <HAL_SPI_TransmitReceive+0x2d8>
 80071b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d114      	bne.n	80071e2 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f000 f8c7 	bl	800734c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2201      	movs	r2, #1
 80071da:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80071de:	2303      	movs	r3, #3
 80071e0:	e0a1      	b.n	8007326 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80071e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d195      	bne.n	8007114 <HAL_SPI_TransmitReceive+0x234>
 80071e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d192      	bne.n	8007114 <HAL_SPI_TransmitReceive+0x234>
 80071ee:	e073      	b.n	80072d8 <HAL_SPI_TransmitReceive+0x3f8>
 80071f0:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	695b      	ldr	r3, [r3, #20]
 80071fa:	f003 0302 	and.w	r3, r3, #2
 80071fe:	2b02      	cmp	r3, #2
 8007200:	d11b      	bne.n	800723a <HAL_SPI_TransmitReceive+0x35a>
 8007202:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007204:	2b00      	cmp	r3, #0
 8007206:	d018      	beq.n	800723a <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	3320      	adds	r3, #32
 8007212:	7812      	ldrb	r2, [r2, #0]
 8007214:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800721a:	1c5a      	adds	r2, r3, #1
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007226:	b29b      	uxth	r3, r3
 8007228:	3b01      	subs	r3, #1
 800722a:	b29a      	uxth	r2, r3
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007238:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	695b      	ldr	r3, [r3, #20]
 8007240:	f003 0301 	and.w	r3, r3, #1
 8007244:	2b01      	cmp	r3, #1
 8007246:	d11d      	bne.n	8007284 <HAL_SPI_TransmitReceive+0x3a4>
 8007248:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800724a:	2b00      	cmp	r3, #0
 800724c:	d01a      	beq.n	8007284 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800725a:	7812      	ldrb	r2, [r2, #0]
 800725c:	b2d2      	uxtb	r2, r2
 800725e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007264:	1c5a      	adds	r2, r3, #1
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007270:	b29b      	uxth	r3, r3
 8007272:	3b01      	subs	r3, #1
 8007274:	b29a      	uxth	r2, r3
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007282:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007284:	f7fb ff62 	bl	800314c <HAL_GetTick>
 8007288:	4602      	mov	r2, r0
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	1ad3      	subs	r3, r2, r3
 800728e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007290:	429a      	cmp	r2, r3
 8007292:	d803      	bhi.n	800729c <HAL_SPI_TransmitReceive+0x3bc>
 8007294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800729a:	d102      	bne.n	80072a2 <HAL_SPI_TransmitReceive+0x3c2>
 800729c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d114      	bne.n	80072cc <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	f000 f852 	bl	800734c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80072c8:	2303      	movs	r3, #3
 80072ca:	e02c      	b.n	8007326 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80072cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d190      	bne.n	80071f4 <HAL_SPI_TransmitReceive+0x314>
 80072d2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d18d      	bne.n	80071f4 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80072d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072da:	9300      	str	r3, [sp, #0]
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	2200      	movs	r2, #0
 80072e0:	2108      	movs	r1, #8
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	f000 f8d2 	bl	800748c <SPI_WaitOnFlagUntilTimeout>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d007      	beq.n	80072fe <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072f4:	f043 0220 	orr.w	r2, r3, #32
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	f000 f824 	bl	800734c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2200      	movs	r2, #0
 8007308:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800731a:	2b00      	cmp	r3, #0
 800731c:	d001      	beq.n	8007322 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e001      	b.n	8007326 <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 8007322:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007326:	4618      	mov	r0, r3
 8007328:	3730      	adds	r7, #48	; 0x30
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop

08007330 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800733e:	b2db      	uxtb	r3, r3
}
 8007340:	4618      	mov	r0, r3
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800734c:	b480      	push	{r7}
 800734e:	b085      	sub	sp, #20
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	695b      	ldr	r3, [r3, #20]
 800735a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	699a      	ldr	r2, [r3, #24]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f042 0208 	orr.w	r2, r2, #8
 800736a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	699a      	ldr	r2, [r3, #24]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f042 0210 	orr.w	r2, r2, #16
 800737a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f022 0201 	bic.w	r2, r2, #1
 800738a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	6919      	ldr	r1, [r3, #16]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	4b3c      	ldr	r3, [pc, #240]	; (8007488 <SPI_CloseTransfer+0x13c>)
 8007398:	400b      	ands	r3, r1
 800739a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	689a      	ldr	r2, [r3, #8]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80073aa:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	2b04      	cmp	r3, #4
 80073b6:	d014      	beq.n	80073e2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f003 0320 	and.w	r3, r3, #32
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00f      	beq.n	80073e2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	699a      	ldr	r2, [r3, #24]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f042 0220 	orr.w	r2, r2, #32
 80073e0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	2b03      	cmp	r3, #3
 80073ec:	d014      	beq.n	8007418 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d00f      	beq.n	8007418 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073fe:	f043 0204 	orr.w	r2, r3, #4
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	699a      	ldr	r2, [r3, #24]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007416:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00f      	beq.n	8007442 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007428:	f043 0201 	orr.w	r2, r3, #1
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	699a      	ldr	r2, [r3, #24]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007440:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007448:	2b00      	cmp	r3, #0
 800744a:	d00f      	beq.n	800746c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007452:	f043 0208 	orr.w	r2, r3, #8
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	699a      	ldr	r2, [r3, #24]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800746a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800747c:	bf00      	nop
 800747e:	3714      	adds	r7, #20
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr
 8007488:	fffffc90 	.word	0xfffffc90

0800748c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	603b      	str	r3, [r7, #0]
 8007498:	4613      	mov	r3, r2
 800749a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800749c:	e010      	b.n	80074c0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800749e:	f7fb fe55 	bl	800314c <HAL_GetTick>
 80074a2:	4602      	mov	r2, r0
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	69ba      	ldr	r2, [r7, #24]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d803      	bhi.n	80074b6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074b4:	d102      	bne.n	80074bc <SPI_WaitOnFlagUntilTimeout+0x30>
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d101      	bne.n	80074c0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80074bc:	2303      	movs	r3, #3
 80074be:	e00f      	b.n	80074e0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	695a      	ldr	r2, [r3, #20]
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	4013      	ands	r3, r2
 80074ca:	68ba      	ldr	r2, [r7, #8]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	bf0c      	ite	eq
 80074d0:	2301      	moveq	r3, #1
 80074d2:	2300      	movne	r3, #0
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	461a      	mov	r2, r3
 80074d8:	79fb      	ldrb	r3, [r7, #7]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d0df      	beq.n	800749e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b085      	sub	sp, #20
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074f4:	095b      	lsrs	r3, r3, #5
 80074f6:	3301      	adds	r3, #1
 80074f8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	3301      	adds	r3, #1
 8007500:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	3307      	adds	r3, #7
 8007506:	08db      	lsrs	r3, r3, #3
 8007508:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	fb02 f303 	mul.w	r3, r2, r3
}
 8007512:	4618      	mov	r0, r3
 8007514:	3714      	adds	r7, #20
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr

0800751e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800751e:	b580      	push	{r7, lr}
 8007520:	b082      	sub	sp, #8
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d101      	bne.n	8007530 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e049      	b.n	80075c4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007536:	b2db      	uxtb	r3, r3
 8007538:	2b00      	cmp	r3, #0
 800753a:	d106      	bne.n	800754a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f7fb fb31 	bl	8002bac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2202      	movs	r2, #2
 800754e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	3304      	adds	r3, #4
 800755a:	4619      	mov	r1, r3
 800755c:	4610      	mov	r0, r2
 800755e:	f000 fc79 	bl	8007e54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2201      	movs	r2, #1
 8007566:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2201      	movs	r2, #1
 800756e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2201      	movs	r2, #1
 8007576:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2201      	movs	r2, #1
 800757e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2201      	movs	r2, #1
 8007586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2201      	movs	r2, #1
 800758e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2201      	movs	r2, #1
 8007596:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2201      	movs	r2, #1
 800759e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2201      	movs	r2, #1
 80075ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2201      	movs	r2, #1
 80075b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2201      	movs	r2, #1
 80075be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3708      	adds	r7, #8
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d001      	beq.n	80075e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	e054      	b.n	800768e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2202      	movs	r2, #2
 80075e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68da      	ldr	r2, [r3, #12]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f042 0201 	orr.w	r2, r2, #1
 80075fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a26      	ldr	r2, [pc, #152]	; (800769c <HAL_TIM_Base_Start_IT+0xd0>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d022      	beq.n	800764c <HAL_TIM_Base_Start_IT+0x80>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800760e:	d01d      	beq.n	800764c <HAL_TIM_Base_Start_IT+0x80>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a22      	ldr	r2, [pc, #136]	; (80076a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d018      	beq.n	800764c <HAL_TIM_Base_Start_IT+0x80>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a21      	ldr	r2, [pc, #132]	; (80076a4 <HAL_TIM_Base_Start_IT+0xd8>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d013      	beq.n	800764c <HAL_TIM_Base_Start_IT+0x80>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a1f      	ldr	r2, [pc, #124]	; (80076a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d00e      	beq.n	800764c <HAL_TIM_Base_Start_IT+0x80>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a1e      	ldr	r2, [pc, #120]	; (80076ac <HAL_TIM_Base_Start_IT+0xe0>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d009      	beq.n	800764c <HAL_TIM_Base_Start_IT+0x80>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a1c      	ldr	r2, [pc, #112]	; (80076b0 <HAL_TIM_Base_Start_IT+0xe4>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d004      	beq.n	800764c <HAL_TIM_Base_Start_IT+0x80>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a1b      	ldr	r2, [pc, #108]	; (80076b4 <HAL_TIM_Base_Start_IT+0xe8>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d115      	bne.n	8007678 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	689a      	ldr	r2, [r3, #8]
 8007652:	4b19      	ldr	r3, [pc, #100]	; (80076b8 <HAL_TIM_Base_Start_IT+0xec>)
 8007654:	4013      	ands	r3, r2
 8007656:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2b06      	cmp	r3, #6
 800765c:	d015      	beq.n	800768a <HAL_TIM_Base_Start_IT+0xbe>
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007664:	d011      	beq.n	800768a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f042 0201 	orr.w	r2, r2, #1
 8007674:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007676:	e008      	b.n	800768a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f042 0201 	orr.w	r2, r2, #1
 8007686:	601a      	str	r2, [r3, #0]
 8007688:	e000      	b.n	800768c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800768a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	3714      	adds	r7, #20
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop
 800769c:	40010000 	.word	0x40010000
 80076a0:	40000400 	.word	0x40000400
 80076a4:	40000800 	.word	0x40000800
 80076a8:	40000c00 	.word	0x40000c00
 80076ac:	40010400 	.word	0x40010400
 80076b0:	40001800 	.word	0x40001800
 80076b4:	40014000 	.word	0x40014000
 80076b8:	00010007 	.word	0x00010007

080076bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b082      	sub	sp, #8
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d101      	bne.n	80076ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	e049      	b.n	8007762 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d106      	bne.n	80076e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 f841 	bl	800776a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2202      	movs	r2, #2
 80076ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	3304      	adds	r3, #4
 80076f8:	4619      	mov	r1, r3
 80076fa:	4610      	mov	r0, r2
 80076fc:	f000 fbaa 	bl	8007e54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2201      	movs	r2, #1
 8007734:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	3708      	adds	r7, #8
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800776a:	b480      	push	{r7}
 800776c:	b083      	sub	sp, #12
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007772:	bf00      	nop
 8007774:	370c      	adds	r7, #12
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
	...

08007780 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d109      	bne.n	80077a4 <HAL_TIM_PWM_Start+0x24>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007796:	b2db      	uxtb	r3, r3
 8007798:	2b01      	cmp	r3, #1
 800779a:	bf14      	ite	ne
 800779c:	2301      	movne	r3, #1
 800779e:	2300      	moveq	r3, #0
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	e03c      	b.n	800781e <HAL_TIM_PWM_Start+0x9e>
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	2b04      	cmp	r3, #4
 80077a8:	d109      	bne.n	80077be <HAL_TIM_PWM_Start+0x3e>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	bf14      	ite	ne
 80077b6:	2301      	movne	r3, #1
 80077b8:	2300      	moveq	r3, #0
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	e02f      	b.n	800781e <HAL_TIM_PWM_Start+0x9e>
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	2b08      	cmp	r3, #8
 80077c2:	d109      	bne.n	80077d8 <HAL_TIM_PWM_Start+0x58>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	bf14      	ite	ne
 80077d0:	2301      	movne	r3, #1
 80077d2:	2300      	moveq	r3, #0
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	e022      	b.n	800781e <HAL_TIM_PWM_Start+0x9e>
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	2b0c      	cmp	r3, #12
 80077dc:	d109      	bne.n	80077f2 <HAL_TIM_PWM_Start+0x72>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	bf14      	ite	ne
 80077ea:	2301      	movne	r3, #1
 80077ec:	2300      	moveq	r3, #0
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	e015      	b.n	800781e <HAL_TIM_PWM_Start+0x9e>
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	2b10      	cmp	r3, #16
 80077f6:	d109      	bne.n	800780c <HAL_TIM_PWM_Start+0x8c>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	2b01      	cmp	r3, #1
 8007802:	bf14      	ite	ne
 8007804:	2301      	movne	r3, #1
 8007806:	2300      	moveq	r3, #0
 8007808:	b2db      	uxtb	r3, r3
 800780a:	e008      	b.n	800781e <HAL_TIM_PWM_Start+0x9e>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007812:	b2db      	uxtb	r3, r3
 8007814:	2b01      	cmp	r3, #1
 8007816:	bf14      	ite	ne
 8007818:	2301      	movne	r3, #1
 800781a:	2300      	moveq	r3, #0
 800781c:	b2db      	uxtb	r3, r3
 800781e:	2b00      	cmp	r3, #0
 8007820:	d001      	beq.n	8007826 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007822:	2301      	movs	r3, #1
 8007824:	e0a1      	b.n	800796a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d104      	bne.n	8007836 <HAL_TIM_PWM_Start+0xb6>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2202      	movs	r2, #2
 8007830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007834:	e023      	b.n	800787e <HAL_TIM_PWM_Start+0xfe>
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	2b04      	cmp	r3, #4
 800783a:	d104      	bne.n	8007846 <HAL_TIM_PWM_Start+0xc6>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2202      	movs	r2, #2
 8007840:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007844:	e01b      	b.n	800787e <HAL_TIM_PWM_Start+0xfe>
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	2b08      	cmp	r3, #8
 800784a:	d104      	bne.n	8007856 <HAL_TIM_PWM_Start+0xd6>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2202      	movs	r2, #2
 8007850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007854:	e013      	b.n	800787e <HAL_TIM_PWM_Start+0xfe>
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	2b0c      	cmp	r3, #12
 800785a:	d104      	bne.n	8007866 <HAL_TIM_PWM_Start+0xe6>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2202      	movs	r2, #2
 8007860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007864:	e00b      	b.n	800787e <HAL_TIM_PWM_Start+0xfe>
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	2b10      	cmp	r3, #16
 800786a:	d104      	bne.n	8007876 <HAL_TIM_PWM_Start+0xf6>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2202      	movs	r2, #2
 8007870:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007874:	e003      	b.n	800787e <HAL_TIM_PWM_Start+0xfe>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2202      	movs	r2, #2
 800787a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2201      	movs	r2, #1
 8007884:	6839      	ldr	r1, [r7, #0]
 8007886:	4618      	mov	r0, r3
 8007888:	f000 fe54 	bl	8008534 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a38      	ldr	r2, [pc, #224]	; (8007974 <HAL_TIM_PWM_Start+0x1f4>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d013      	beq.n	80078be <HAL_TIM_PWM_Start+0x13e>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a37      	ldr	r2, [pc, #220]	; (8007978 <HAL_TIM_PWM_Start+0x1f8>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d00e      	beq.n	80078be <HAL_TIM_PWM_Start+0x13e>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a35      	ldr	r2, [pc, #212]	; (800797c <HAL_TIM_PWM_Start+0x1fc>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d009      	beq.n	80078be <HAL_TIM_PWM_Start+0x13e>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a34      	ldr	r2, [pc, #208]	; (8007980 <HAL_TIM_PWM_Start+0x200>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d004      	beq.n	80078be <HAL_TIM_PWM_Start+0x13e>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a32      	ldr	r2, [pc, #200]	; (8007984 <HAL_TIM_PWM_Start+0x204>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d101      	bne.n	80078c2 <HAL_TIM_PWM_Start+0x142>
 80078be:	2301      	movs	r3, #1
 80078c0:	e000      	b.n	80078c4 <HAL_TIM_PWM_Start+0x144>
 80078c2:	2300      	movs	r3, #0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d007      	beq.n	80078d8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80078d6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a25      	ldr	r2, [pc, #148]	; (8007974 <HAL_TIM_PWM_Start+0x1f4>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d022      	beq.n	8007928 <HAL_TIM_PWM_Start+0x1a8>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078ea:	d01d      	beq.n	8007928 <HAL_TIM_PWM_Start+0x1a8>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a25      	ldr	r2, [pc, #148]	; (8007988 <HAL_TIM_PWM_Start+0x208>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d018      	beq.n	8007928 <HAL_TIM_PWM_Start+0x1a8>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a24      	ldr	r2, [pc, #144]	; (800798c <HAL_TIM_PWM_Start+0x20c>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d013      	beq.n	8007928 <HAL_TIM_PWM_Start+0x1a8>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a22      	ldr	r2, [pc, #136]	; (8007990 <HAL_TIM_PWM_Start+0x210>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d00e      	beq.n	8007928 <HAL_TIM_PWM_Start+0x1a8>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a1a      	ldr	r2, [pc, #104]	; (8007978 <HAL_TIM_PWM_Start+0x1f8>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d009      	beq.n	8007928 <HAL_TIM_PWM_Start+0x1a8>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a1e      	ldr	r2, [pc, #120]	; (8007994 <HAL_TIM_PWM_Start+0x214>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d004      	beq.n	8007928 <HAL_TIM_PWM_Start+0x1a8>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a16      	ldr	r2, [pc, #88]	; (800797c <HAL_TIM_PWM_Start+0x1fc>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d115      	bne.n	8007954 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	689a      	ldr	r2, [r3, #8]
 800792e:	4b1a      	ldr	r3, [pc, #104]	; (8007998 <HAL_TIM_PWM_Start+0x218>)
 8007930:	4013      	ands	r3, r2
 8007932:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2b06      	cmp	r3, #6
 8007938:	d015      	beq.n	8007966 <HAL_TIM_PWM_Start+0x1e6>
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007940:	d011      	beq.n	8007966 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f042 0201 	orr.w	r2, r2, #1
 8007950:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007952:	e008      	b.n	8007966 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f042 0201 	orr.w	r2, r2, #1
 8007962:	601a      	str	r2, [r3, #0]
 8007964:	e000      	b.n	8007968 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007966:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007968:	2300      	movs	r3, #0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3710      	adds	r7, #16
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	40010000 	.word	0x40010000
 8007978:	40010400 	.word	0x40010400
 800797c:	40014000 	.word	0x40014000
 8007980:	40014400 	.word	0x40014400
 8007984:	40014800 	.word	0x40014800
 8007988:	40000400 	.word	0x40000400
 800798c:	40000800 	.word	0x40000800
 8007990:	40000c00 	.word	0x40000c00
 8007994:	40001800 	.word	0x40001800
 8007998:	00010007 	.word	0x00010007

0800799c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	f003 0302 	and.w	r3, r3, #2
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	d122      	bne.n	80079f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	f003 0302 	and.w	r3, r3, #2
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d11b      	bne.n	80079f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f06f 0202 	mvn.w	r2, #2
 80079c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2201      	movs	r2, #1
 80079ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	699b      	ldr	r3, [r3, #24]
 80079d6:	f003 0303 	and.w	r3, r3, #3
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d003      	beq.n	80079e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 fa1a 	bl	8007e18 <HAL_TIM_IC_CaptureCallback>
 80079e4:	e005      	b.n	80079f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 fa0c 	bl	8007e04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 fa1d 	bl	8007e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	691b      	ldr	r3, [r3, #16]
 80079fe:	f003 0304 	and.w	r3, r3, #4
 8007a02:	2b04      	cmp	r3, #4
 8007a04:	d122      	bne.n	8007a4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	f003 0304 	and.w	r3, r3, #4
 8007a10:	2b04      	cmp	r3, #4
 8007a12:	d11b      	bne.n	8007a4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f06f 0204 	mvn.w	r2, #4
 8007a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2202      	movs	r2, #2
 8007a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	699b      	ldr	r3, [r3, #24]
 8007a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d003      	beq.n	8007a3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 f9f0 	bl	8007e18 <HAL_TIM_IC_CaptureCallback>
 8007a38:	e005      	b.n	8007a46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 f9e2 	bl	8007e04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 f9f3 	bl	8007e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	f003 0308 	and.w	r3, r3, #8
 8007a56:	2b08      	cmp	r3, #8
 8007a58:	d122      	bne.n	8007aa0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	f003 0308 	and.w	r3, r3, #8
 8007a64:	2b08      	cmp	r3, #8
 8007a66:	d11b      	bne.n	8007aa0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f06f 0208 	mvn.w	r2, #8
 8007a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2204      	movs	r2, #4
 8007a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	69db      	ldr	r3, [r3, #28]
 8007a7e:	f003 0303 	and.w	r3, r3, #3
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d003      	beq.n	8007a8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f9c6 	bl	8007e18 <HAL_TIM_IC_CaptureCallback>
 8007a8c:	e005      	b.n	8007a9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 f9b8 	bl	8007e04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 f9c9 	bl	8007e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	f003 0310 	and.w	r3, r3, #16
 8007aaa:	2b10      	cmp	r3, #16
 8007aac:	d122      	bne.n	8007af4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	f003 0310 	and.w	r3, r3, #16
 8007ab8:	2b10      	cmp	r3, #16
 8007aba:	d11b      	bne.n	8007af4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f06f 0210 	mvn.w	r2, #16
 8007ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2208      	movs	r2, #8
 8007aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	69db      	ldr	r3, [r3, #28]
 8007ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d003      	beq.n	8007ae2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 f99c 	bl	8007e18 <HAL_TIM_IC_CaptureCallback>
 8007ae0:	e005      	b.n	8007aee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 f98e 	bl	8007e04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 f99f 	bl	8007e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	691b      	ldr	r3, [r3, #16]
 8007afa:	f003 0301 	and.w	r3, r3, #1
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d10e      	bne.n	8007b20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	f003 0301 	and.w	r3, r3, #1
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d107      	bne.n	8007b20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f06f 0201 	mvn.w	r2, #1
 8007b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f7fa fb0c 	bl	8002138 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b2a:	2b80      	cmp	r3, #128	; 0x80
 8007b2c:	d10e      	bne.n	8007b4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b38:	2b80      	cmp	r3, #128	; 0x80
 8007b3a:	d107      	bne.n	8007b4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 fd23 	bl	8008592 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b5a:	d10e      	bne.n	8007b7a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b66:	2b80      	cmp	r3, #128	; 0x80
 8007b68:	d107      	bne.n	8007b7a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007b72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 fd16 	bl	80085a6 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	691b      	ldr	r3, [r3, #16]
 8007b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b84:	2b40      	cmp	r3, #64	; 0x40
 8007b86:	d10e      	bne.n	8007ba6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b92:	2b40      	cmp	r3, #64	; 0x40
 8007b94:	d107      	bne.n	8007ba6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 f94d 	bl	8007e40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	691b      	ldr	r3, [r3, #16]
 8007bac:	f003 0320 	and.w	r3, r3, #32
 8007bb0:	2b20      	cmp	r3, #32
 8007bb2:	d10e      	bne.n	8007bd2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	f003 0320 	and.w	r3, r3, #32
 8007bbe:	2b20      	cmp	r3, #32
 8007bc0:	d107      	bne.n	8007bd2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f06f 0220 	mvn.w	r2, #32
 8007bca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 fcd6 	bl	800857e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007bd2:	bf00      	nop
 8007bd4:	3708      	adds	r7, #8
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
	...

08007bdc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b086      	sub	sp, #24
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007be8:	2300      	movs	r3, #0
 8007bea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d101      	bne.n	8007bfa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007bf6:	2302      	movs	r3, #2
 8007bf8:	e0ff      	b.n	8007dfa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2b14      	cmp	r3, #20
 8007c06:	f200 80f0 	bhi.w	8007dea <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007c0a:	a201      	add	r2, pc, #4	; (adr r2, 8007c10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c10:	08007c65 	.word	0x08007c65
 8007c14:	08007deb 	.word	0x08007deb
 8007c18:	08007deb 	.word	0x08007deb
 8007c1c:	08007deb 	.word	0x08007deb
 8007c20:	08007ca5 	.word	0x08007ca5
 8007c24:	08007deb 	.word	0x08007deb
 8007c28:	08007deb 	.word	0x08007deb
 8007c2c:	08007deb 	.word	0x08007deb
 8007c30:	08007ce7 	.word	0x08007ce7
 8007c34:	08007deb 	.word	0x08007deb
 8007c38:	08007deb 	.word	0x08007deb
 8007c3c:	08007deb 	.word	0x08007deb
 8007c40:	08007d27 	.word	0x08007d27
 8007c44:	08007deb 	.word	0x08007deb
 8007c48:	08007deb 	.word	0x08007deb
 8007c4c:	08007deb 	.word	0x08007deb
 8007c50:	08007d69 	.word	0x08007d69
 8007c54:	08007deb 	.word	0x08007deb
 8007c58:	08007deb 	.word	0x08007deb
 8007c5c:	08007deb 	.word	0x08007deb
 8007c60:	08007da9 	.word	0x08007da9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	68b9      	ldr	r1, [r7, #8]
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f000 f98c 	bl	8007f88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	699a      	ldr	r2, [r3, #24]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f042 0208 	orr.w	r2, r2, #8
 8007c7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	699a      	ldr	r2, [r3, #24]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f022 0204 	bic.w	r2, r2, #4
 8007c8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	6999      	ldr	r1, [r3, #24]
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	691a      	ldr	r2, [r3, #16]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	430a      	orrs	r2, r1
 8007ca0:	619a      	str	r2, [r3, #24]
      break;
 8007ca2:	e0a5      	b.n	8007df0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	68b9      	ldr	r1, [r7, #8]
 8007caa:	4618      	mov	r0, r3
 8007cac:	f000 f9fc 	bl	80080a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	699a      	ldr	r2, [r3, #24]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	699a      	ldr	r2, [r3, #24]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	6999      	ldr	r1, [r3, #24]
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	021a      	lsls	r2, r3, #8
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	430a      	orrs	r2, r1
 8007ce2:	619a      	str	r2, [r3, #24]
      break;
 8007ce4:	e084      	b.n	8007df0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	68b9      	ldr	r1, [r7, #8]
 8007cec:	4618      	mov	r0, r3
 8007cee:	f000 fa65 	bl	80081bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	69da      	ldr	r2, [r3, #28]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f042 0208 	orr.w	r2, r2, #8
 8007d00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	69da      	ldr	r2, [r3, #28]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f022 0204 	bic.w	r2, r2, #4
 8007d10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	69d9      	ldr	r1, [r3, #28]
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	691a      	ldr	r2, [r3, #16]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	430a      	orrs	r2, r1
 8007d22:	61da      	str	r2, [r3, #28]
      break;
 8007d24:	e064      	b.n	8007df0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	68b9      	ldr	r1, [r7, #8]
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f000 facd 	bl	80082cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	69da      	ldr	r2, [r3, #28]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	69da      	ldr	r2, [r3, #28]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	69d9      	ldr	r1, [r3, #28]
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	021a      	lsls	r2, r3, #8
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	430a      	orrs	r2, r1
 8007d64:	61da      	str	r2, [r3, #28]
      break;
 8007d66:	e043      	b.n	8007df0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68b9      	ldr	r1, [r7, #8]
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f000 fb16 	bl	80083a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f042 0208 	orr.w	r2, r2, #8
 8007d82:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f022 0204 	bic.w	r2, r2, #4
 8007d92:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	691a      	ldr	r2, [r3, #16]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	430a      	orrs	r2, r1
 8007da4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007da6:	e023      	b.n	8007df0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	68b9      	ldr	r1, [r7, #8]
 8007dae:	4618      	mov	r0, r3
 8007db0:	f000 fb5a 	bl	8008468 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007dc2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007dd2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	021a      	lsls	r2, r3, #8
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	430a      	orrs	r2, r1
 8007de6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007de8:	e002      	b.n	8007df0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	75fb      	strb	r3, [r7, #23]
      break;
 8007dee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007df8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3718      	adds	r7, #24
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
 8007e02:	bf00      	nop

08007e04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e0c:	bf00      	nop
 8007e0e:	370c      	adds	r7, #12
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007e20:	bf00      	nop
 8007e22:	370c      	adds	r7, #12
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr

08007e2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e34:	bf00      	nop
 8007e36:	370c      	adds	r7, #12
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr

08007e40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e48:	bf00      	nop
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	4a40      	ldr	r2, [pc, #256]	; (8007f68 <TIM_Base_SetConfig+0x114>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d013      	beq.n	8007e94 <TIM_Base_SetConfig+0x40>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e72:	d00f      	beq.n	8007e94 <TIM_Base_SetConfig+0x40>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	4a3d      	ldr	r2, [pc, #244]	; (8007f6c <TIM_Base_SetConfig+0x118>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d00b      	beq.n	8007e94 <TIM_Base_SetConfig+0x40>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	4a3c      	ldr	r2, [pc, #240]	; (8007f70 <TIM_Base_SetConfig+0x11c>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d007      	beq.n	8007e94 <TIM_Base_SetConfig+0x40>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	4a3b      	ldr	r2, [pc, #236]	; (8007f74 <TIM_Base_SetConfig+0x120>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d003      	beq.n	8007e94 <TIM_Base_SetConfig+0x40>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	4a3a      	ldr	r2, [pc, #232]	; (8007f78 <TIM_Base_SetConfig+0x124>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d108      	bne.n	8007ea6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	68fa      	ldr	r2, [r7, #12]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4a2f      	ldr	r2, [pc, #188]	; (8007f68 <TIM_Base_SetConfig+0x114>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d01f      	beq.n	8007eee <TIM_Base_SetConfig+0x9a>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eb4:	d01b      	beq.n	8007eee <TIM_Base_SetConfig+0x9a>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	4a2c      	ldr	r2, [pc, #176]	; (8007f6c <TIM_Base_SetConfig+0x118>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d017      	beq.n	8007eee <TIM_Base_SetConfig+0x9a>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	4a2b      	ldr	r2, [pc, #172]	; (8007f70 <TIM_Base_SetConfig+0x11c>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d013      	beq.n	8007eee <TIM_Base_SetConfig+0x9a>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4a2a      	ldr	r2, [pc, #168]	; (8007f74 <TIM_Base_SetConfig+0x120>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d00f      	beq.n	8007eee <TIM_Base_SetConfig+0x9a>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4a29      	ldr	r2, [pc, #164]	; (8007f78 <TIM_Base_SetConfig+0x124>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d00b      	beq.n	8007eee <TIM_Base_SetConfig+0x9a>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4a28      	ldr	r2, [pc, #160]	; (8007f7c <TIM_Base_SetConfig+0x128>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d007      	beq.n	8007eee <TIM_Base_SetConfig+0x9a>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a27      	ldr	r2, [pc, #156]	; (8007f80 <TIM_Base_SetConfig+0x12c>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d003      	beq.n	8007eee <TIM_Base_SetConfig+0x9a>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a26      	ldr	r2, [pc, #152]	; (8007f84 <TIM_Base_SetConfig+0x130>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d108      	bne.n	8007f00 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	68fa      	ldr	r2, [r7, #12]
 8007efc:	4313      	orrs	r3, r2
 8007efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	695b      	ldr	r3, [r3, #20]
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	68fa      	ldr	r2, [r7, #12]
 8007f12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	689a      	ldr	r2, [r3, #8]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a10      	ldr	r2, [pc, #64]	; (8007f68 <TIM_Base_SetConfig+0x114>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d00f      	beq.n	8007f4c <TIM_Base_SetConfig+0xf8>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a12      	ldr	r2, [pc, #72]	; (8007f78 <TIM_Base_SetConfig+0x124>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d00b      	beq.n	8007f4c <TIM_Base_SetConfig+0xf8>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4a11      	ldr	r2, [pc, #68]	; (8007f7c <TIM_Base_SetConfig+0x128>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d007      	beq.n	8007f4c <TIM_Base_SetConfig+0xf8>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	4a10      	ldr	r2, [pc, #64]	; (8007f80 <TIM_Base_SetConfig+0x12c>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d003      	beq.n	8007f4c <TIM_Base_SetConfig+0xf8>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	4a0f      	ldr	r2, [pc, #60]	; (8007f84 <TIM_Base_SetConfig+0x130>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d103      	bne.n	8007f54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	691a      	ldr	r2, [r3, #16]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	615a      	str	r2, [r3, #20]
}
 8007f5a:	bf00      	nop
 8007f5c:	3714      	adds	r7, #20
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr
 8007f66:	bf00      	nop
 8007f68:	40010000 	.word	0x40010000
 8007f6c:	40000400 	.word	0x40000400
 8007f70:	40000800 	.word	0x40000800
 8007f74:	40000c00 	.word	0x40000c00
 8007f78:	40010400 	.word	0x40010400
 8007f7c:	40014000 	.word	0x40014000
 8007f80:	40014400 	.word	0x40014400
 8007f84:	40014800 	.word	0x40014800

08007f88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b087      	sub	sp, #28
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a1b      	ldr	r3, [r3, #32]
 8007f96:	f023 0201 	bic.w	r2, r3, #1
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6a1b      	ldr	r3, [r3, #32]
 8007fa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	699b      	ldr	r3, [r3, #24]
 8007fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	4b37      	ldr	r3, [pc, #220]	; (8008090 <TIM_OC1_SetConfig+0x108>)
 8007fb4:	4013      	ands	r3, r2
 8007fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f023 0303 	bic.w	r3, r3, #3
 8007fbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	68fa      	ldr	r2, [r7, #12]
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	f023 0302 	bic.w	r3, r3, #2
 8007fd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	697a      	ldr	r2, [r7, #20]
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	4a2d      	ldr	r2, [pc, #180]	; (8008094 <TIM_OC1_SetConfig+0x10c>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d00f      	beq.n	8008004 <TIM_OC1_SetConfig+0x7c>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4a2c      	ldr	r2, [pc, #176]	; (8008098 <TIM_OC1_SetConfig+0x110>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d00b      	beq.n	8008004 <TIM_OC1_SetConfig+0x7c>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4a2b      	ldr	r2, [pc, #172]	; (800809c <TIM_OC1_SetConfig+0x114>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d007      	beq.n	8008004 <TIM_OC1_SetConfig+0x7c>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	4a2a      	ldr	r2, [pc, #168]	; (80080a0 <TIM_OC1_SetConfig+0x118>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d003      	beq.n	8008004 <TIM_OC1_SetConfig+0x7c>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	4a29      	ldr	r2, [pc, #164]	; (80080a4 <TIM_OC1_SetConfig+0x11c>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d10c      	bne.n	800801e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	f023 0308 	bic.w	r3, r3, #8
 800800a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	697a      	ldr	r2, [r7, #20]
 8008012:	4313      	orrs	r3, r2
 8008014:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	f023 0304 	bic.w	r3, r3, #4
 800801c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4a1c      	ldr	r2, [pc, #112]	; (8008094 <TIM_OC1_SetConfig+0x10c>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d00f      	beq.n	8008046 <TIM_OC1_SetConfig+0xbe>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4a1b      	ldr	r2, [pc, #108]	; (8008098 <TIM_OC1_SetConfig+0x110>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d00b      	beq.n	8008046 <TIM_OC1_SetConfig+0xbe>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4a1a      	ldr	r2, [pc, #104]	; (800809c <TIM_OC1_SetConfig+0x114>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d007      	beq.n	8008046 <TIM_OC1_SetConfig+0xbe>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	4a19      	ldr	r2, [pc, #100]	; (80080a0 <TIM_OC1_SetConfig+0x118>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d003      	beq.n	8008046 <TIM_OC1_SetConfig+0xbe>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	4a18      	ldr	r2, [pc, #96]	; (80080a4 <TIM_OC1_SetConfig+0x11c>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d111      	bne.n	800806a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800804c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008054:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	695b      	ldr	r3, [r3, #20]
 800805a:	693a      	ldr	r2, [r7, #16]
 800805c:	4313      	orrs	r3, r2
 800805e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	699b      	ldr	r3, [r3, #24]
 8008064:	693a      	ldr	r2, [r7, #16]
 8008066:	4313      	orrs	r3, r2
 8008068:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	693a      	ldr	r2, [r7, #16]
 800806e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	68fa      	ldr	r2, [r7, #12]
 8008074:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	685a      	ldr	r2, [r3, #4]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	697a      	ldr	r2, [r7, #20]
 8008082:	621a      	str	r2, [r3, #32]
}
 8008084:	bf00      	nop
 8008086:	371c      	adds	r7, #28
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr
 8008090:	fffeff8f 	.word	0xfffeff8f
 8008094:	40010000 	.word	0x40010000
 8008098:	40010400 	.word	0x40010400
 800809c:	40014000 	.word	0x40014000
 80080a0:	40014400 	.word	0x40014400
 80080a4:	40014800 	.word	0x40014800

080080a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b087      	sub	sp, #28
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6a1b      	ldr	r3, [r3, #32]
 80080b6:	f023 0210 	bic.w	r2, r3, #16
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a1b      	ldr	r3, [r3, #32]
 80080c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	699b      	ldr	r3, [r3, #24]
 80080ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80080d0:	68fa      	ldr	r2, [r7, #12]
 80080d2:	4b34      	ldr	r3, [pc, #208]	; (80081a4 <TIM_OC2_SetConfig+0xfc>)
 80080d4:	4013      	ands	r3, r2
 80080d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	021b      	lsls	r3, r3, #8
 80080e6:	68fa      	ldr	r2, [r7, #12]
 80080e8:	4313      	orrs	r3, r2
 80080ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	f023 0320 	bic.w	r3, r3, #32
 80080f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	011b      	lsls	r3, r3, #4
 80080fa:	697a      	ldr	r2, [r7, #20]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4a29      	ldr	r2, [pc, #164]	; (80081a8 <TIM_OC2_SetConfig+0x100>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d003      	beq.n	8008110 <TIM_OC2_SetConfig+0x68>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4a28      	ldr	r2, [pc, #160]	; (80081ac <TIM_OC2_SetConfig+0x104>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d10d      	bne.n	800812c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008116:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	68db      	ldr	r3, [r3, #12]
 800811c:	011b      	lsls	r3, r3, #4
 800811e:	697a      	ldr	r2, [r7, #20]
 8008120:	4313      	orrs	r3, r2
 8008122:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800812a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	4a1e      	ldr	r2, [pc, #120]	; (80081a8 <TIM_OC2_SetConfig+0x100>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d00f      	beq.n	8008154 <TIM_OC2_SetConfig+0xac>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	4a1d      	ldr	r2, [pc, #116]	; (80081ac <TIM_OC2_SetConfig+0x104>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d00b      	beq.n	8008154 <TIM_OC2_SetConfig+0xac>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	4a1c      	ldr	r2, [pc, #112]	; (80081b0 <TIM_OC2_SetConfig+0x108>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d007      	beq.n	8008154 <TIM_OC2_SetConfig+0xac>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4a1b      	ldr	r2, [pc, #108]	; (80081b4 <TIM_OC2_SetConfig+0x10c>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d003      	beq.n	8008154 <TIM_OC2_SetConfig+0xac>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	4a1a      	ldr	r2, [pc, #104]	; (80081b8 <TIM_OC2_SetConfig+0x110>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d113      	bne.n	800817c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800815a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008162:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	695b      	ldr	r3, [r3, #20]
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	693a      	ldr	r2, [r7, #16]
 800816c:	4313      	orrs	r3, r2
 800816e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	699b      	ldr	r3, [r3, #24]
 8008174:	009b      	lsls	r3, r3, #2
 8008176:	693a      	ldr	r2, [r7, #16]
 8008178:	4313      	orrs	r3, r2
 800817a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	693a      	ldr	r2, [r7, #16]
 8008180:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	68fa      	ldr	r2, [r7, #12]
 8008186:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	685a      	ldr	r2, [r3, #4]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	697a      	ldr	r2, [r7, #20]
 8008194:	621a      	str	r2, [r3, #32]
}
 8008196:	bf00      	nop
 8008198:	371c      	adds	r7, #28
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr
 80081a2:	bf00      	nop
 80081a4:	feff8fff 	.word	0xfeff8fff
 80081a8:	40010000 	.word	0x40010000
 80081ac:	40010400 	.word	0x40010400
 80081b0:	40014000 	.word	0x40014000
 80081b4:	40014400 	.word	0x40014400
 80081b8:	40014800 	.word	0x40014800

080081bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081bc:	b480      	push	{r7}
 80081be:	b087      	sub	sp, #28
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6a1b      	ldr	r3, [r3, #32]
 80081ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6a1b      	ldr	r3, [r3, #32]
 80081d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	69db      	ldr	r3, [r3, #28]
 80081e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80081e4:	68fa      	ldr	r2, [r7, #12]
 80081e6:	4b33      	ldr	r3, [pc, #204]	; (80082b4 <TIM_OC3_SetConfig+0xf8>)
 80081e8:	4013      	ands	r3, r2
 80081ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f023 0303 	bic.w	r3, r3, #3
 80081f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008204:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	021b      	lsls	r3, r3, #8
 800820c:	697a      	ldr	r2, [r7, #20]
 800820e:	4313      	orrs	r3, r2
 8008210:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	4a28      	ldr	r2, [pc, #160]	; (80082b8 <TIM_OC3_SetConfig+0xfc>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d003      	beq.n	8008222 <TIM_OC3_SetConfig+0x66>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4a27      	ldr	r2, [pc, #156]	; (80082bc <TIM_OC3_SetConfig+0x100>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d10d      	bne.n	800823e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008228:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	021b      	lsls	r3, r3, #8
 8008230:	697a      	ldr	r2, [r7, #20]
 8008232:	4313      	orrs	r3, r2
 8008234:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800823c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	4a1d      	ldr	r2, [pc, #116]	; (80082b8 <TIM_OC3_SetConfig+0xfc>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d00f      	beq.n	8008266 <TIM_OC3_SetConfig+0xaa>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	4a1c      	ldr	r2, [pc, #112]	; (80082bc <TIM_OC3_SetConfig+0x100>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d00b      	beq.n	8008266 <TIM_OC3_SetConfig+0xaa>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	4a1b      	ldr	r2, [pc, #108]	; (80082c0 <TIM_OC3_SetConfig+0x104>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d007      	beq.n	8008266 <TIM_OC3_SetConfig+0xaa>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	4a1a      	ldr	r2, [pc, #104]	; (80082c4 <TIM_OC3_SetConfig+0x108>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d003      	beq.n	8008266 <TIM_OC3_SetConfig+0xaa>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	4a19      	ldr	r2, [pc, #100]	; (80082c8 <TIM_OC3_SetConfig+0x10c>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d113      	bne.n	800828e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800826c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008274:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	695b      	ldr	r3, [r3, #20]
 800827a:	011b      	lsls	r3, r3, #4
 800827c:	693a      	ldr	r2, [r7, #16]
 800827e:	4313      	orrs	r3, r2
 8008280:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	699b      	ldr	r3, [r3, #24]
 8008286:	011b      	lsls	r3, r3, #4
 8008288:	693a      	ldr	r2, [r7, #16]
 800828a:	4313      	orrs	r3, r2
 800828c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	693a      	ldr	r2, [r7, #16]
 8008292:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	68fa      	ldr	r2, [r7, #12]
 8008298:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	685a      	ldr	r2, [r3, #4]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	697a      	ldr	r2, [r7, #20]
 80082a6:	621a      	str	r2, [r3, #32]
}
 80082a8:	bf00      	nop
 80082aa:	371c      	adds	r7, #28
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr
 80082b4:	fffeff8f 	.word	0xfffeff8f
 80082b8:	40010000 	.word	0x40010000
 80082bc:	40010400 	.word	0x40010400
 80082c0:	40014000 	.word	0x40014000
 80082c4:	40014400 	.word	0x40014400
 80082c8:	40014800 	.word	0x40014800

080082cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b087      	sub	sp, #28
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6a1b      	ldr	r3, [r3, #32]
 80082da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6a1b      	ldr	r3, [r3, #32]
 80082e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	69db      	ldr	r3, [r3, #28]
 80082f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80082f4:	68fa      	ldr	r2, [r7, #12]
 80082f6:	4b24      	ldr	r3, [pc, #144]	; (8008388 <TIM_OC4_SetConfig+0xbc>)
 80082f8:	4013      	ands	r3, r2
 80082fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008302:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	021b      	lsls	r3, r3, #8
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	4313      	orrs	r3, r2
 800830e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008316:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	031b      	lsls	r3, r3, #12
 800831e:	693a      	ldr	r2, [r7, #16]
 8008320:	4313      	orrs	r3, r2
 8008322:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	4a19      	ldr	r2, [pc, #100]	; (800838c <TIM_OC4_SetConfig+0xc0>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d00f      	beq.n	800834c <TIM_OC4_SetConfig+0x80>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	4a18      	ldr	r2, [pc, #96]	; (8008390 <TIM_OC4_SetConfig+0xc4>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d00b      	beq.n	800834c <TIM_OC4_SetConfig+0x80>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4a17      	ldr	r2, [pc, #92]	; (8008394 <TIM_OC4_SetConfig+0xc8>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d007      	beq.n	800834c <TIM_OC4_SetConfig+0x80>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4a16      	ldr	r2, [pc, #88]	; (8008398 <TIM_OC4_SetConfig+0xcc>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d003      	beq.n	800834c <TIM_OC4_SetConfig+0x80>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	4a15      	ldr	r2, [pc, #84]	; (800839c <TIM_OC4_SetConfig+0xd0>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d109      	bne.n	8008360 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008352:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	695b      	ldr	r3, [r3, #20]
 8008358:	019b      	lsls	r3, r3, #6
 800835a:	697a      	ldr	r2, [r7, #20]
 800835c:	4313      	orrs	r3, r2
 800835e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	697a      	ldr	r2, [r7, #20]
 8008364:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	68fa      	ldr	r2, [r7, #12]
 800836a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	685a      	ldr	r2, [r3, #4]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	693a      	ldr	r2, [r7, #16]
 8008378:	621a      	str	r2, [r3, #32]
}
 800837a:	bf00      	nop
 800837c:	371c      	adds	r7, #28
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr
 8008386:	bf00      	nop
 8008388:	feff8fff 	.word	0xfeff8fff
 800838c:	40010000 	.word	0x40010000
 8008390:	40010400 	.word	0x40010400
 8008394:	40014000 	.word	0x40014000
 8008398:	40014400 	.word	0x40014400
 800839c:	40014800 	.word	0x40014800

080083a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b087      	sub	sp, #28
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6a1b      	ldr	r3, [r3, #32]
 80083ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6a1b      	ldr	r3, [r3, #32]
 80083ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80083c8:	68fa      	ldr	r2, [r7, #12]
 80083ca:	4b21      	ldr	r3, [pc, #132]	; (8008450 <TIM_OC5_SetConfig+0xb0>)
 80083cc:	4013      	ands	r3, r2
 80083ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80083e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	041b      	lsls	r3, r3, #16
 80083e8:	693a      	ldr	r2, [r7, #16]
 80083ea:	4313      	orrs	r3, r2
 80083ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	4a18      	ldr	r2, [pc, #96]	; (8008454 <TIM_OC5_SetConfig+0xb4>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d00f      	beq.n	8008416 <TIM_OC5_SetConfig+0x76>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	4a17      	ldr	r2, [pc, #92]	; (8008458 <TIM_OC5_SetConfig+0xb8>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d00b      	beq.n	8008416 <TIM_OC5_SetConfig+0x76>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	4a16      	ldr	r2, [pc, #88]	; (800845c <TIM_OC5_SetConfig+0xbc>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d007      	beq.n	8008416 <TIM_OC5_SetConfig+0x76>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	4a15      	ldr	r2, [pc, #84]	; (8008460 <TIM_OC5_SetConfig+0xc0>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d003      	beq.n	8008416 <TIM_OC5_SetConfig+0x76>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4a14      	ldr	r2, [pc, #80]	; (8008464 <TIM_OC5_SetConfig+0xc4>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d109      	bne.n	800842a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800841c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	695b      	ldr	r3, [r3, #20]
 8008422:	021b      	lsls	r3, r3, #8
 8008424:	697a      	ldr	r2, [r7, #20]
 8008426:	4313      	orrs	r3, r2
 8008428:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	697a      	ldr	r2, [r7, #20]
 800842e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	68fa      	ldr	r2, [r7, #12]
 8008434:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	685a      	ldr	r2, [r3, #4]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	693a      	ldr	r2, [r7, #16]
 8008442:	621a      	str	r2, [r3, #32]
}
 8008444:	bf00      	nop
 8008446:	371c      	adds	r7, #28
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr
 8008450:	fffeff8f 	.word	0xfffeff8f
 8008454:	40010000 	.word	0x40010000
 8008458:	40010400 	.word	0x40010400
 800845c:	40014000 	.word	0x40014000
 8008460:	40014400 	.word	0x40014400
 8008464:	40014800 	.word	0x40014800

08008468 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008468:	b480      	push	{r7}
 800846a:	b087      	sub	sp, #28
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a1b      	ldr	r3, [r3, #32]
 8008476:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6a1b      	ldr	r3, [r3, #32]
 8008482:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800848e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008490:	68fa      	ldr	r2, [r7, #12]
 8008492:	4b22      	ldr	r3, [pc, #136]	; (800851c <TIM_OC6_SetConfig+0xb4>)
 8008494:	4013      	ands	r3, r2
 8008496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	021b      	lsls	r3, r3, #8
 800849e:	68fa      	ldr	r2, [r7, #12]
 80084a0:	4313      	orrs	r3, r2
 80084a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80084aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	051b      	lsls	r3, r3, #20
 80084b2:	693a      	ldr	r2, [r7, #16]
 80084b4:	4313      	orrs	r3, r2
 80084b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	4a19      	ldr	r2, [pc, #100]	; (8008520 <TIM_OC6_SetConfig+0xb8>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d00f      	beq.n	80084e0 <TIM_OC6_SetConfig+0x78>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	4a18      	ldr	r2, [pc, #96]	; (8008524 <TIM_OC6_SetConfig+0xbc>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d00b      	beq.n	80084e0 <TIM_OC6_SetConfig+0x78>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	4a17      	ldr	r2, [pc, #92]	; (8008528 <TIM_OC6_SetConfig+0xc0>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d007      	beq.n	80084e0 <TIM_OC6_SetConfig+0x78>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	4a16      	ldr	r2, [pc, #88]	; (800852c <TIM_OC6_SetConfig+0xc4>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d003      	beq.n	80084e0 <TIM_OC6_SetConfig+0x78>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	4a15      	ldr	r2, [pc, #84]	; (8008530 <TIM_OC6_SetConfig+0xc8>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d109      	bne.n	80084f4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80084e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	695b      	ldr	r3, [r3, #20]
 80084ec:	029b      	lsls	r3, r3, #10
 80084ee:	697a      	ldr	r2, [r7, #20]
 80084f0:	4313      	orrs	r3, r2
 80084f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	697a      	ldr	r2, [r7, #20]
 80084f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	68fa      	ldr	r2, [r7, #12]
 80084fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	685a      	ldr	r2, [r3, #4]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	693a      	ldr	r2, [r7, #16]
 800850c:	621a      	str	r2, [r3, #32]
}
 800850e:	bf00      	nop
 8008510:	371c      	adds	r7, #28
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr
 800851a:	bf00      	nop
 800851c:	feff8fff 	.word	0xfeff8fff
 8008520:	40010000 	.word	0x40010000
 8008524:	40010400 	.word	0x40010400
 8008528:	40014000 	.word	0x40014000
 800852c:	40014400 	.word	0x40014400
 8008530:	40014800 	.word	0x40014800

08008534 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008534:	b480      	push	{r7}
 8008536:	b087      	sub	sp, #28
 8008538:	af00      	add	r7, sp, #0
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	f003 031f 	and.w	r3, r3, #31
 8008546:	2201      	movs	r2, #1
 8008548:	fa02 f303 	lsl.w	r3, r2, r3
 800854c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6a1a      	ldr	r2, [r3, #32]
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	43db      	mvns	r3, r3
 8008556:	401a      	ands	r2, r3
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6a1a      	ldr	r2, [r3, #32]
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	f003 031f 	and.w	r3, r3, #31
 8008566:	6879      	ldr	r1, [r7, #4]
 8008568:	fa01 f303 	lsl.w	r3, r1, r3
 800856c:	431a      	orrs	r2, r3
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	621a      	str	r2, [r3, #32]
}
 8008572:	bf00      	nop
 8008574:	371c      	adds	r7, #28
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr

0800857e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800857e:	b480      	push	{r7}
 8008580:	b083      	sub	sp, #12
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008586:	bf00      	nop
 8008588:	370c      	adds	r7, #12
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr

08008592 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008592:	b480      	push	{r7}
 8008594:	b083      	sub	sp, #12
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800859a:	bf00      	nop
 800859c:	370c      	adds	r7, #12
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr

080085a6 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80085a6:	b480      	push	{r7}
 80085a8:	b083      	sub	sp, #12
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80085ae:	bf00      	nop
 80085b0:	370c      	adds	r7, #12
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr

080085ba <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b082      	sub	sp, #8
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d101      	bne.n	80085cc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80085c8:	2301      	movs	r3, #1
 80085ca:	e042      	b.n	8008652 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d106      	bne.n	80085e4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2200      	movs	r2, #0
 80085da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f7fa fb82 	bl	8002ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2224      	movs	r2, #36	; 0x24
 80085e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f022 0201 	bic.w	r2, r2, #1
 80085fa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 f8c3 	bl	8008788 <UART_SetConfig>
 8008602:	4603      	mov	r3, r0
 8008604:	2b01      	cmp	r3, #1
 8008606:	d101      	bne.n	800860c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	e022      	b.n	8008652 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008610:	2b00      	cmp	r3, #0
 8008612:	d002      	beq.n	800861a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 fe1f 	bl	8009258 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	685a      	ldr	r2, [r3, #4]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008628:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	689a      	ldr	r2, [r3, #8]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008638:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f042 0201 	orr.w	r2, r2, #1
 8008648:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 fea6 	bl	800939c <UART_CheckIdleState>
 8008650:	4603      	mov	r3, r0
}
 8008652:	4618      	mov	r0, r3
 8008654:	3708      	adds	r7, #8
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800865a:	b580      	push	{r7, lr}
 800865c:	b08a      	sub	sp, #40	; 0x28
 800865e:	af02      	add	r7, sp, #8
 8008660:	60f8      	str	r0, [r7, #12]
 8008662:	60b9      	str	r1, [r7, #8]
 8008664:	603b      	str	r3, [r7, #0]
 8008666:	4613      	mov	r3, r2
 8008668:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008670:	2b20      	cmp	r3, #32
 8008672:	f040 8083 	bne.w	800877c <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d002      	beq.n	8008682 <HAL_UART_Transmit+0x28>
 800867c:	88fb      	ldrh	r3, [r7, #6]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d101      	bne.n	8008686 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008682:	2301      	movs	r3, #1
 8008684:	e07b      	b.n	800877e <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800868c:	2b01      	cmp	r3, #1
 800868e:	d101      	bne.n	8008694 <HAL_UART_Transmit+0x3a>
 8008690:	2302      	movs	r3, #2
 8008692:	e074      	b.n	800877e <HAL_UART_Transmit+0x124>
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2200      	movs	r2, #0
 80086a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2221      	movs	r2, #33	; 0x21
 80086a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80086ac:	f7fa fd4e 	bl	800314c <HAL_GetTick>
 80086b0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	88fa      	ldrh	r2, [r7, #6]
 80086b6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	88fa      	ldrh	r2, [r7, #6]
 80086be:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086ca:	d108      	bne.n	80086de <HAL_UART_Transmit+0x84>
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	691b      	ldr	r3, [r3, #16]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d104      	bne.n	80086de <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80086d4:	2300      	movs	r3, #0
 80086d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	61bb      	str	r3, [r7, #24]
 80086dc:	e003      	b.n	80086e6 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80086e2:	2300      	movs	r3, #0
 80086e4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80086ee:	e02c      	b.n	800874a <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	9300      	str	r3, [sp, #0]
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	2200      	movs	r2, #0
 80086f8:	2180      	movs	r1, #128	; 0x80
 80086fa:	68f8      	ldr	r0, [r7, #12]
 80086fc:	f000 fe99 	bl	8009432 <UART_WaitOnFlagUntilTimeout>
 8008700:	4603      	mov	r3, r0
 8008702:	2b00      	cmp	r3, #0
 8008704:	d001      	beq.n	800870a <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008706:	2303      	movs	r3, #3
 8008708:	e039      	b.n	800877e <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800870a:	69fb      	ldr	r3, [r7, #28]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d10b      	bne.n	8008728 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008710:	69bb      	ldr	r3, [r7, #24]
 8008712:	881b      	ldrh	r3, [r3, #0]
 8008714:	461a      	mov	r2, r3
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800871e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008720:	69bb      	ldr	r3, [r7, #24]
 8008722:	3302      	adds	r3, #2
 8008724:	61bb      	str	r3, [r7, #24]
 8008726:	e007      	b.n	8008738 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	781a      	ldrb	r2, [r3, #0]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008732:	69fb      	ldr	r3, [r7, #28]
 8008734:	3301      	adds	r3, #1
 8008736:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800873e:	b29b      	uxth	r3, r3
 8008740:	3b01      	subs	r3, #1
 8008742:	b29a      	uxth	r2, r3
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008750:	b29b      	uxth	r3, r3
 8008752:	2b00      	cmp	r3, #0
 8008754:	d1cc      	bne.n	80086f0 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	9300      	str	r3, [sp, #0]
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	2200      	movs	r2, #0
 800875e:	2140      	movs	r1, #64	; 0x40
 8008760:	68f8      	ldr	r0, [r7, #12]
 8008762:	f000 fe66 	bl	8009432 <UART_WaitOnFlagUntilTimeout>
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d001      	beq.n	8008770 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800876c:	2303      	movs	r3, #3
 800876e:	e006      	b.n	800877e <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2220      	movs	r2, #32
 8008774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008778:	2300      	movs	r3, #0
 800877a:	e000      	b.n	800877e <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800877c:	2302      	movs	r3, #2
  }
}
 800877e:	4618      	mov	r0, r3
 8008780:	3720      	adds	r7, #32
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
	...

08008788 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008788:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800878c:	b092      	sub	sp, #72	; 0x48
 800878e:	af00      	add	r7, sp, #0
 8008790:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008792:	2300      	movs	r3, #0
 8008794:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	689a      	ldr	r2, [r3, #8]
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	691b      	ldr	r3, [r3, #16]
 80087a0:	431a      	orrs	r2, r3
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	695b      	ldr	r3, [r3, #20]
 80087a6:	431a      	orrs	r2, r3
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	69db      	ldr	r3, [r3, #28]
 80087ac:	4313      	orrs	r3, r2
 80087ae:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	4bbe      	ldr	r3, [pc, #760]	; (8008ab0 <UART_SetConfig+0x328>)
 80087b8:	4013      	ands	r3, r2
 80087ba:	697a      	ldr	r2, [r7, #20]
 80087bc:	6812      	ldr	r2, [r2, #0]
 80087be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80087c0:	430b      	orrs	r3, r1
 80087c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	68da      	ldr	r2, [r3, #12]
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	430a      	orrs	r2, r1
 80087d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	699b      	ldr	r3, [r3, #24]
 80087de:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4ab3      	ldr	r2, [pc, #716]	; (8008ab4 <UART_SetConfig+0x32c>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d004      	beq.n	80087f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	6a1b      	ldr	r3, [r3, #32]
 80087ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087f0:	4313      	orrs	r3, r2
 80087f2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	689a      	ldr	r2, [r3, #8]
 80087fa:	4baf      	ldr	r3, [pc, #700]	; (8008ab8 <UART_SetConfig+0x330>)
 80087fc:	4013      	ands	r3, r2
 80087fe:	697a      	ldr	r2, [r7, #20]
 8008800:	6812      	ldr	r2, [r2, #0]
 8008802:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008804:	430b      	orrs	r3, r1
 8008806:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800880e:	f023 010f 	bic.w	r1, r3, #15
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	430a      	orrs	r2, r1
 800881c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4aa6      	ldr	r2, [pc, #664]	; (8008abc <UART_SetConfig+0x334>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d177      	bne.n	8008918 <UART_SetConfig+0x190>
 8008828:	4ba5      	ldr	r3, [pc, #660]	; (8008ac0 <UART_SetConfig+0x338>)
 800882a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800882c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008830:	2b28      	cmp	r3, #40	; 0x28
 8008832:	d86d      	bhi.n	8008910 <UART_SetConfig+0x188>
 8008834:	a201      	add	r2, pc, #4	; (adr r2, 800883c <UART_SetConfig+0xb4>)
 8008836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800883a:	bf00      	nop
 800883c:	080088e1 	.word	0x080088e1
 8008840:	08008911 	.word	0x08008911
 8008844:	08008911 	.word	0x08008911
 8008848:	08008911 	.word	0x08008911
 800884c:	08008911 	.word	0x08008911
 8008850:	08008911 	.word	0x08008911
 8008854:	08008911 	.word	0x08008911
 8008858:	08008911 	.word	0x08008911
 800885c:	080088e9 	.word	0x080088e9
 8008860:	08008911 	.word	0x08008911
 8008864:	08008911 	.word	0x08008911
 8008868:	08008911 	.word	0x08008911
 800886c:	08008911 	.word	0x08008911
 8008870:	08008911 	.word	0x08008911
 8008874:	08008911 	.word	0x08008911
 8008878:	08008911 	.word	0x08008911
 800887c:	080088f1 	.word	0x080088f1
 8008880:	08008911 	.word	0x08008911
 8008884:	08008911 	.word	0x08008911
 8008888:	08008911 	.word	0x08008911
 800888c:	08008911 	.word	0x08008911
 8008890:	08008911 	.word	0x08008911
 8008894:	08008911 	.word	0x08008911
 8008898:	08008911 	.word	0x08008911
 800889c:	080088f9 	.word	0x080088f9
 80088a0:	08008911 	.word	0x08008911
 80088a4:	08008911 	.word	0x08008911
 80088a8:	08008911 	.word	0x08008911
 80088ac:	08008911 	.word	0x08008911
 80088b0:	08008911 	.word	0x08008911
 80088b4:	08008911 	.word	0x08008911
 80088b8:	08008911 	.word	0x08008911
 80088bc:	08008901 	.word	0x08008901
 80088c0:	08008911 	.word	0x08008911
 80088c4:	08008911 	.word	0x08008911
 80088c8:	08008911 	.word	0x08008911
 80088cc:	08008911 	.word	0x08008911
 80088d0:	08008911 	.word	0x08008911
 80088d4:	08008911 	.word	0x08008911
 80088d8:	08008911 	.word	0x08008911
 80088dc:	08008909 	.word	0x08008909
 80088e0:	2301      	movs	r3, #1
 80088e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088e6:	e222      	b.n	8008d2e <UART_SetConfig+0x5a6>
 80088e8:	2304      	movs	r3, #4
 80088ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088ee:	e21e      	b.n	8008d2e <UART_SetConfig+0x5a6>
 80088f0:	2308      	movs	r3, #8
 80088f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088f6:	e21a      	b.n	8008d2e <UART_SetConfig+0x5a6>
 80088f8:	2310      	movs	r3, #16
 80088fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088fe:	e216      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008900:	2320      	movs	r3, #32
 8008902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008906:	e212      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008908:	2340      	movs	r3, #64	; 0x40
 800890a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800890e:	e20e      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008910:	2380      	movs	r3, #128	; 0x80
 8008912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008916:	e20a      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a69      	ldr	r2, [pc, #420]	; (8008ac4 <UART_SetConfig+0x33c>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d130      	bne.n	8008984 <UART_SetConfig+0x1fc>
 8008922:	4b67      	ldr	r3, [pc, #412]	; (8008ac0 <UART_SetConfig+0x338>)
 8008924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008926:	f003 0307 	and.w	r3, r3, #7
 800892a:	2b05      	cmp	r3, #5
 800892c:	d826      	bhi.n	800897c <UART_SetConfig+0x1f4>
 800892e:	a201      	add	r2, pc, #4	; (adr r2, 8008934 <UART_SetConfig+0x1ac>)
 8008930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008934:	0800894d 	.word	0x0800894d
 8008938:	08008955 	.word	0x08008955
 800893c:	0800895d 	.word	0x0800895d
 8008940:	08008965 	.word	0x08008965
 8008944:	0800896d 	.word	0x0800896d
 8008948:	08008975 	.word	0x08008975
 800894c:	2300      	movs	r3, #0
 800894e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008952:	e1ec      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008954:	2304      	movs	r3, #4
 8008956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800895a:	e1e8      	b.n	8008d2e <UART_SetConfig+0x5a6>
 800895c:	2308      	movs	r3, #8
 800895e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008962:	e1e4      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008964:	2310      	movs	r3, #16
 8008966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800896a:	e1e0      	b.n	8008d2e <UART_SetConfig+0x5a6>
 800896c:	2320      	movs	r3, #32
 800896e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008972:	e1dc      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008974:	2340      	movs	r3, #64	; 0x40
 8008976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800897a:	e1d8      	b.n	8008d2e <UART_SetConfig+0x5a6>
 800897c:	2380      	movs	r3, #128	; 0x80
 800897e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008982:	e1d4      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a4f      	ldr	r2, [pc, #316]	; (8008ac8 <UART_SetConfig+0x340>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d130      	bne.n	80089f0 <UART_SetConfig+0x268>
 800898e:	4b4c      	ldr	r3, [pc, #304]	; (8008ac0 <UART_SetConfig+0x338>)
 8008990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008992:	f003 0307 	and.w	r3, r3, #7
 8008996:	2b05      	cmp	r3, #5
 8008998:	d826      	bhi.n	80089e8 <UART_SetConfig+0x260>
 800899a:	a201      	add	r2, pc, #4	; (adr r2, 80089a0 <UART_SetConfig+0x218>)
 800899c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a0:	080089b9 	.word	0x080089b9
 80089a4:	080089c1 	.word	0x080089c1
 80089a8:	080089c9 	.word	0x080089c9
 80089ac:	080089d1 	.word	0x080089d1
 80089b0:	080089d9 	.word	0x080089d9
 80089b4:	080089e1 	.word	0x080089e1
 80089b8:	2300      	movs	r3, #0
 80089ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089be:	e1b6      	b.n	8008d2e <UART_SetConfig+0x5a6>
 80089c0:	2304      	movs	r3, #4
 80089c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089c6:	e1b2      	b.n	8008d2e <UART_SetConfig+0x5a6>
 80089c8:	2308      	movs	r3, #8
 80089ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089ce:	e1ae      	b.n	8008d2e <UART_SetConfig+0x5a6>
 80089d0:	2310      	movs	r3, #16
 80089d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089d6:	e1aa      	b.n	8008d2e <UART_SetConfig+0x5a6>
 80089d8:	2320      	movs	r3, #32
 80089da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089de:	e1a6      	b.n	8008d2e <UART_SetConfig+0x5a6>
 80089e0:	2340      	movs	r3, #64	; 0x40
 80089e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089e6:	e1a2      	b.n	8008d2e <UART_SetConfig+0x5a6>
 80089e8:	2380      	movs	r3, #128	; 0x80
 80089ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089ee:	e19e      	b.n	8008d2e <UART_SetConfig+0x5a6>
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a35      	ldr	r2, [pc, #212]	; (8008acc <UART_SetConfig+0x344>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d130      	bne.n	8008a5c <UART_SetConfig+0x2d4>
 80089fa:	4b31      	ldr	r3, [pc, #196]	; (8008ac0 <UART_SetConfig+0x338>)
 80089fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089fe:	f003 0307 	and.w	r3, r3, #7
 8008a02:	2b05      	cmp	r3, #5
 8008a04:	d826      	bhi.n	8008a54 <UART_SetConfig+0x2cc>
 8008a06:	a201      	add	r2, pc, #4	; (adr r2, 8008a0c <UART_SetConfig+0x284>)
 8008a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a0c:	08008a25 	.word	0x08008a25
 8008a10:	08008a2d 	.word	0x08008a2d
 8008a14:	08008a35 	.word	0x08008a35
 8008a18:	08008a3d 	.word	0x08008a3d
 8008a1c:	08008a45 	.word	0x08008a45
 8008a20:	08008a4d 	.word	0x08008a4d
 8008a24:	2300      	movs	r3, #0
 8008a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a2a:	e180      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008a2c:	2304      	movs	r3, #4
 8008a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a32:	e17c      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008a34:	2308      	movs	r3, #8
 8008a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a3a:	e178      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008a3c:	2310      	movs	r3, #16
 8008a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a42:	e174      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008a44:	2320      	movs	r3, #32
 8008a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a4a:	e170      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008a4c:	2340      	movs	r3, #64	; 0x40
 8008a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a52:	e16c      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008a54:	2380      	movs	r3, #128	; 0x80
 8008a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a5a:	e168      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a1b      	ldr	r2, [pc, #108]	; (8008ad0 <UART_SetConfig+0x348>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d142      	bne.n	8008aec <UART_SetConfig+0x364>
 8008a66:	4b16      	ldr	r3, [pc, #88]	; (8008ac0 <UART_SetConfig+0x338>)
 8008a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a6a:	f003 0307 	and.w	r3, r3, #7
 8008a6e:	2b05      	cmp	r3, #5
 8008a70:	d838      	bhi.n	8008ae4 <UART_SetConfig+0x35c>
 8008a72:	a201      	add	r2, pc, #4	; (adr r2, 8008a78 <UART_SetConfig+0x2f0>)
 8008a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a78:	08008a91 	.word	0x08008a91
 8008a7c:	08008a99 	.word	0x08008a99
 8008a80:	08008aa1 	.word	0x08008aa1
 8008a84:	08008aa9 	.word	0x08008aa9
 8008a88:	08008ad5 	.word	0x08008ad5
 8008a8c:	08008add 	.word	0x08008add
 8008a90:	2300      	movs	r3, #0
 8008a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a96:	e14a      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008a98:	2304      	movs	r3, #4
 8008a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a9e:	e146      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008aa0:	2308      	movs	r3, #8
 8008aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aa6:	e142      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008aa8:	2310      	movs	r3, #16
 8008aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aae:	e13e      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008ab0:	cfff69f3 	.word	0xcfff69f3
 8008ab4:	58000c00 	.word	0x58000c00
 8008ab8:	11fff4ff 	.word	0x11fff4ff
 8008abc:	40011000 	.word	0x40011000
 8008ac0:	58024400 	.word	0x58024400
 8008ac4:	40004400 	.word	0x40004400
 8008ac8:	40004800 	.word	0x40004800
 8008acc:	40004c00 	.word	0x40004c00
 8008ad0:	40005000 	.word	0x40005000
 8008ad4:	2320      	movs	r3, #32
 8008ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ada:	e128      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008adc:	2340      	movs	r3, #64	; 0x40
 8008ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ae2:	e124      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008ae4:	2380      	movs	r3, #128	; 0x80
 8008ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aea:	e120      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4acb      	ldr	r2, [pc, #812]	; (8008e20 <UART_SetConfig+0x698>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d176      	bne.n	8008be4 <UART_SetConfig+0x45c>
 8008af6:	4bcb      	ldr	r3, [pc, #812]	; (8008e24 <UART_SetConfig+0x69c>)
 8008af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008afa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008afe:	2b28      	cmp	r3, #40	; 0x28
 8008b00:	d86c      	bhi.n	8008bdc <UART_SetConfig+0x454>
 8008b02:	a201      	add	r2, pc, #4	; (adr r2, 8008b08 <UART_SetConfig+0x380>)
 8008b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b08:	08008bad 	.word	0x08008bad
 8008b0c:	08008bdd 	.word	0x08008bdd
 8008b10:	08008bdd 	.word	0x08008bdd
 8008b14:	08008bdd 	.word	0x08008bdd
 8008b18:	08008bdd 	.word	0x08008bdd
 8008b1c:	08008bdd 	.word	0x08008bdd
 8008b20:	08008bdd 	.word	0x08008bdd
 8008b24:	08008bdd 	.word	0x08008bdd
 8008b28:	08008bb5 	.word	0x08008bb5
 8008b2c:	08008bdd 	.word	0x08008bdd
 8008b30:	08008bdd 	.word	0x08008bdd
 8008b34:	08008bdd 	.word	0x08008bdd
 8008b38:	08008bdd 	.word	0x08008bdd
 8008b3c:	08008bdd 	.word	0x08008bdd
 8008b40:	08008bdd 	.word	0x08008bdd
 8008b44:	08008bdd 	.word	0x08008bdd
 8008b48:	08008bbd 	.word	0x08008bbd
 8008b4c:	08008bdd 	.word	0x08008bdd
 8008b50:	08008bdd 	.word	0x08008bdd
 8008b54:	08008bdd 	.word	0x08008bdd
 8008b58:	08008bdd 	.word	0x08008bdd
 8008b5c:	08008bdd 	.word	0x08008bdd
 8008b60:	08008bdd 	.word	0x08008bdd
 8008b64:	08008bdd 	.word	0x08008bdd
 8008b68:	08008bc5 	.word	0x08008bc5
 8008b6c:	08008bdd 	.word	0x08008bdd
 8008b70:	08008bdd 	.word	0x08008bdd
 8008b74:	08008bdd 	.word	0x08008bdd
 8008b78:	08008bdd 	.word	0x08008bdd
 8008b7c:	08008bdd 	.word	0x08008bdd
 8008b80:	08008bdd 	.word	0x08008bdd
 8008b84:	08008bdd 	.word	0x08008bdd
 8008b88:	08008bcd 	.word	0x08008bcd
 8008b8c:	08008bdd 	.word	0x08008bdd
 8008b90:	08008bdd 	.word	0x08008bdd
 8008b94:	08008bdd 	.word	0x08008bdd
 8008b98:	08008bdd 	.word	0x08008bdd
 8008b9c:	08008bdd 	.word	0x08008bdd
 8008ba0:	08008bdd 	.word	0x08008bdd
 8008ba4:	08008bdd 	.word	0x08008bdd
 8008ba8:	08008bd5 	.word	0x08008bd5
 8008bac:	2301      	movs	r3, #1
 8008bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bb2:	e0bc      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008bb4:	2304      	movs	r3, #4
 8008bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bba:	e0b8      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008bbc:	2308      	movs	r3, #8
 8008bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bc2:	e0b4      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008bc4:	2310      	movs	r3, #16
 8008bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bca:	e0b0      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008bcc:	2320      	movs	r3, #32
 8008bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bd2:	e0ac      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008bd4:	2340      	movs	r3, #64	; 0x40
 8008bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bda:	e0a8      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008bdc:	2380      	movs	r3, #128	; 0x80
 8008bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008be2:	e0a4      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a8f      	ldr	r2, [pc, #572]	; (8008e28 <UART_SetConfig+0x6a0>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d130      	bne.n	8008c50 <UART_SetConfig+0x4c8>
 8008bee:	4b8d      	ldr	r3, [pc, #564]	; (8008e24 <UART_SetConfig+0x69c>)
 8008bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bf2:	f003 0307 	and.w	r3, r3, #7
 8008bf6:	2b05      	cmp	r3, #5
 8008bf8:	d826      	bhi.n	8008c48 <UART_SetConfig+0x4c0>
 8008bfa:	a201      	add	r2, pc, #4	; (adr r2, 8008c00 <UART_SetConfig+0x478>)
 8008bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c00:	08008c19 	.word	0x08008c19
 8008c04:	08008c21 	.word	0x08008c21
 8008c08:	08008c29 	.word	0x08008c29
 8008c0c:	08008c31 	.word	0x08008c31
 8008c10:	08008c39 	.word	0x08008c39
 8008c14:	08008c41 	.word	0x08008c41
 8008c18:	2300      	movs	r3, #0
 8008c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c1e:	e086      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008c20:	2304      	movs	r3, #4
 8008c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c26:	e082      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008c28:	2308      	movs	r3, #8
 8008c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c2e:	e07e      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008c30:	2310      	movs	r3, #16
 8008c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c36:	e07a      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008c38:	2320      	movs	r3, #32
 8008c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c3e:	e076      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008c40:	2340      	movs	r3, #64	; 0x40
 8008c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c46:	e072      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008c48:	2380      	movs	r3, #128	; 0x80
 8008c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c4e:	e06e      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a75      	ldr	r2, [pc, #468]	; (8008e2c <UART_SetConfig+0x6a4>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d130      	bne.n	8008cbc <UART_SetConfig+0x534>
 8008c5a:	4b72      	ldr	r3, [pc, #456]	; (8008e24 <UART_SetConfig+0x69c>)
 8008c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c5e:	f003 0307 	and.w	r3, r3, #7
 8008c62:	2b05      	cmp	r3, #5
 8008c64:	d826      	bhi.n	8008cb4 <UART_SetConfig+0x52c>
 8008c66:	a201      	add	r2, pc, #4	; (adr r2, 8008c6c <UART_SetConfig+0x4e4>)
 8008c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c6c:	08008c85 	.word	0x08008c85
 8008c70:	08008c8d 	.word	0x08008c8d
 8008c74:	08008c95 	.word	0x08008c95
 8008c78:	08008c9d 	.word	0x08008c9d
 8008c7c:	08008ca5 	.word	0x08008ca5
 8008c80:	08008cad 	.word	0x08008cad
 8008c84:	2300      	movs	r3, #0
 8008c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c8a:	e050      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008c8c:	2304      	movs	r3, #4
 8008c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c92:	e04c      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008c94:	2308      	movs	r3, #8
 8008c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c9a:	e048      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008c9c:	2310      	movs	r3, #16
 8008c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ca2:	e044      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008ca4:	2320      	movs	r3, #32
 8008ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008caa:	e040      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008cac:	2340      	movs	r3, #64	; 0x40
 8008cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cb2:	e03c      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008cb4:	2380      	movs	r3, #128	; 0x80
 8008cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cba:	e038      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a5b      	ldr	r2, [pc, #364]	; (8008e30 <UART_SetConfig+0x6a8>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d130      	bne.n	8008d28 <UART_SetConfig+0x5a0>
 8008cc6:	4b57      	ldr	r3, [pc, #348]	; (8008e24 <UART_SetConfig+0x69c>)
 8008cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cca:	f003 0307 	and.w	r3, r3, #7
 8008cce:	2b05      	cmp	r3, #5
 8008cd0:	d826      	bhi.n	8008d20 <UART_SetConfig+0x598>
 8008cd2:	a201      	add	r2, pc, #4	; (adr r2, 8008cd8 <UART_SetConfig+0x550>)
 8008cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd8:	08008cf1 	.word	0x08008cf1
 8008cdc:	08008cf9 	.word	0x08008cf9
 8008ce0:	08008d01 	.word	0x08008d01
 8008ce4:	08008d09 	.word	0x08008d09
 8008ce8:	08008d11 	.word	0x08008d11
 8008cec:	08008d19 	.word	0x08008d19
 8008cf0:	2302      	movs	r3, #2
 8008cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cf6:	e01a      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008cf8:	2304      	movs	r3, #4
 8008cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cfe:	e016      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008d00:	2308      	movs	r3, #8
 8008d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d06:	e012      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008d08:	2310      	movs	r3, #16
 8008d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d0e:	e00e      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008d10:	2320      	movs	r3, #32
 8008d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d16:	e00a      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008d18:	2340      	movs	r3, #64	; 0x40
 8008d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d1e:	e006      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008d20:	2380      	movs	r3, #128	; 0x80
 8008d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d26:	e002      	b.n	8008d2e <UART_SetConfig+0x5a6>
 8008d28:	2380      	movs	r3, #128	; 0x80
 8008d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a3f      	ldr	r2, [pc, #252]	; (8008e30 <UART_SetConfig+0x6a8>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	f040 80f8 	bne.w	8008f2a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008d3a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008d3e:	2b20      	cmp	r3, #32
 8008d40:	dc46      	bgt.n	8008dd0 <UART_SetConfig+0x648>
 8008d42:	2b02      	cmp	r3, #2
 8008d44:	f2c0 8082 	blt.w	8008e4c <UART_SetConfig+0x6c4>
 8008d48:	3b02      	subs	r3, #2
 8008d4a:	2b1e      	cmp	r3, #30
 8008d4c:	d87e      	bhi.n	8008e4c <UART_SetConfig+0x6c4>
 8008d4e:	a201      	add	r2, pc, #4	; (adr r2, 8008d54 <UART_SetConfig+0x5cc>)
 8008d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d54:	08008dd7 	.word	0x08008dd7
 8008d58:	08008e4d 	.word	0x08008e4d
 8008d5c:	08008ddf 	.word	0x08008ddf
 8008d60:	08008e4d 	.word	0x08008e4d
 8008d64:	08008e4d 	.word	0x08008e4d
 8008d68:	08008e4d 	.word	0x08008e4d
 8008d6c:	08008def 	.word	0x08008def
 8008d70:	08008e4d 	.word	0x08008e4d
 8008d74:	08008e4d 	.word	0x08008e4d
 8008d78:	08008e4d 	.word	0x08008e4d
 8008d7c:	08008e4d 	.word	0x08008e4d
 8008d80:	08008e4d 	.word	0x08008e4d
 8008d84:	08008e4d 	.word	0x08008e4d
 8008d88:	08008e4d 	.word	0x08008e4d
 8008d8c:	08008dff 	.word	0x08008dff
 8008d90:	08008e4d 	.word	0x08008e4d
 8008d94:	08008e4d 	.word	0x08008e4d
 8008d98:	08008e4d 	.word	0x08008e4d
 8008d9c:	08008e4d 	.word	0x08008e4d
 8008da0:	08008e4d 	.word	0x08008e4d
 8008da4:	08008e4d 	.word	0x08008e4d
 8008da8:	08008e4d 	.word	0x08008e4d
 8008dac:	08008e4d 	.word	0x08008e4d
 8008db0:	08008e4d 	.word	0x08008e4d
 8008db4:	08008e4d 	.word	0x08008e4d
 8008db8:	08008e4d 	.word	0x08008e4d
 8008dbc:	08008e4d 	.word	0x08008e4d
 8008dc0:	08008e4d 	.word	0x08008e4d
 8008dc4:	08008e4d 	.word	0x08008e4d
 8008dc8:	08008e4d 	.word	0x08008e4d
 8008dcc:	08008e3f 	.word	0x08008e3f
 8008dd0:	2b40      	cmp	r3, #64	; 0x40
 8008dd2:	d037      	beq.n	8008e44 <UART_SetConfig+0x6bc>
 8008dd4:	e03a      	b.n	8008e4c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008dd6:	f7fc ffcd 	bl	8005d74 <HAL_RCCEx_GetD3PCLK1Freq>
 8008dda:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008ddc:	e03c      	b.n	8008e58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7fc ffdc 	bl	8005da0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008dec:	e034      	b.n	8008e58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008dee:	f107 0318 	add.w	r3, r7, #24
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7fd f928 	bl	8006048 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008df8:	69fb      	ldr	r3, [r7, #28]
 8008dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008dfc:	e02c      	b.n	8008e58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008dfe:	4b09      	ldr	r3, [pc, #36]	; (8008e24 <UART_SetConfig+0x69c>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f003 0320 	and.w	r3, r3, #32
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d016      	beq.n	8008e38 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008e0a:	4b06      	ldr	r3, [pc, #24]	; (8008e24 <UART_SetConfig+0x69c>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	08db      	lsrs	r3, r3, #3
 8008e10:	f003 0303 	and.w	r3, r3, #3
 8008e14:	4a07      	ldr	r2, [pc, #28]	; (8008e34 <UART_SetConfig+0x6ac>)
 8008e16:	fa22 f303 	lsr.w	r3, r2, r3
 8008e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008e1c:	e01c      	b.n	8008e58 <UART_SetConfig+0x6d0>
 8008e1e:	bf00      	nop
 8008e20:	40011400 	.word	0x40011400
 8008e24:	58024400 	.word	0x58024400
 8008e28:	40007800 	.word	0x40007800
 8008e2c:	40007c00 	.word	0x40007c00
 8008e30:	58000c00 	.word	0x58000c00
 8008e34:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008e38:	4b9d      	ldr	r3, [pc, #628]	; (80090b0 <UART_SetConfig+0x928>)
 8008e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e3c:	e00c      	b.n	8008e58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008e3e:	4b9d      	ldr	r3, [pc, #628]	; (80090b4 <UART_SetConfig+0x92c>)
 8008e40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e42:	e009      	b.n	8008e58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e4a:	e005      	b.n	8008e58 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008e50:	2301      	movs	r3, #1
 8008e52:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008e56:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	f000 81de 	beq.w	800921c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e64:	4a94      	ldr	r2, [pc, #592]	; (80090b8 <UART_SetConfig+0x930>)
 8008e66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e72:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	685a      	ldr	r2, [r3, #4]
 8008e78:	4613      	mov	r3, r2
 8008e7a:	005b      	lsls	r3, r3, #1
 8008e7c:	4413      	add	r3, r2
 8008e7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d305      	bcc.n	8008e90 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d903      	bls.n	8008e98 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008e90:	2301      	movs	r3, #1
 8008e92:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008e96:	e1c1      	b.n	800921c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	60bb      	str	r3, [r7, #8]
 8008e9e:	60fa      	str	r2, [r7, #12]
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea4:	4a84      	ldr	r2, [pc, #528]	; (80090b8 <UART_SetConfig+0x930>)
 8008ea6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	2200      	movs	r2, #0
 8008eae:	603b      	str	r3, [r7, #0]
 8008eb0:	607a      	str	r2, [r7, #4]
 8008eb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008eb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008eba:	f7f7 fa69 	bl	8000390 <__aeabi_uldivmod>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	4610      	mov	r0, r2
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	f04f 0200 	mov.w	r2, #0
 8008eca:	f04f 0300 	mov.w	r3, #0
 8008ece:	020b      	lsls	r3, r1, #8
 8008ed0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008ed4:	0202      	lsls	r2, r0, #8
 8008ed6:	6979      	ldr	r1, [r7, #20]
 8008ed8:	6849      	ldr	r1, [r1, #4]
 8008eda:	0849      	lsrs	r1, r1, #1
 8008edc:	2000      	movs	r0, #0
 8008ede:	460c      	mov	r4, r1
 8008ee0:	4605      	mov	r5, r0
 8008ee2:	eb12 0804 	adds.w	r8, r2, r4
 8008ee6:	eb43 0905 	adc.w	r9, r3, r5
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	469a      	mov	sl, r3
 8008ef2:	4693      	mov	fp, r2
 8008ef4:	4652      	mov	r2, sl
 8008ef6:	465b      	mov	r3, fp
 8008ef8:	4640      	mov	r0, r8
 8008efa:	4649      	mov	r1, r9
 8008efc:	f7f7 fa48 	bl	8000390 <__aeabi_uldivmod>
 8008f00:	4602      	mov	r2, r0
 8008f02:	460b      	mov	r3, r1
 8008f04:	4613      	mov	r3, r2
 8008f06:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f0e:	d308      	bcc.n	8008f22 <UART_SetConfig+0x79a>
 8008f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f16:	d204      	bcs.n	8008f22 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f1e:	60da      	str	r2, [r3, #12]
 8008f20:	e17c      	b.n	800921c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
 8008f24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008f28:	e178      	b.n	800921c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	69db      	ldr	r3, [r3, #28]
 8008f2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f32:	f040 80c5 	bne.w	80090c0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008f36:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008f3a:	2b20      	cmp	r3, #32
 8008f3c:	dc48      	bgt.n	8008fd0 <UART_SetConfig+0x848>
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	db7b      	blt.n	800903a <UART_SetConfig+0x8b2>
 8008f42:	2b20      	cmp	r3, #32
 8008f44:	d879      	bhi.n	800903a <UART_SetConfig+0x8b2>
 8008f46:	a201      	add	r2, pc, #4	; (adr r2, 8008f4c <UART_SetConfig+0x7c4>)
 8008f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f4c:	08008fd7 	.word	0x08008fd7
 8008f50:	08008fdf 	.word	0x08008fdf
 8008f54:	0800903b 	.word	0x0800903b
 8008f58:	0800903b 	.word	0x0800903b
 8008f5c:	08008fe7 	.word	0x08008fe7
 8008f60:	0800903b 	.word	0x0800903b
 8008f64:	0800903b 	.word	0x0800903b
 8008f68:	0800903b 	.word	0x0800903b
 8008f6c:	08008ff7 	.word	0x08008ff7
 8008f70:	0800903b 	.word	0x0800903b
 8008f74:	0800903b 	.word	0x0800903b
 8008f78:	0800903b 	.word	0x0800903b
 8008f7c:	0800903b 	.word	0x0800903b
 8008f80:	0800903b 	.word	0x0800903b
 8008f84:	0800903b 	.word	0x0800903b
 8008f88:	0800903b 	.word	0x0800903b
 8008f8c:	08009007 	.word	0x08009007
 8008f90:	0800903b 	.word	0x0800903b
 8008f94:	0800903b 	.word	0x0800903b
 8008f98:	0800903b 	.word	0x0800903b
 8008f9c:	0800903b 	.word	0x0800903b
 8008fa0:	0800903b 	.word	0x0800903b
 8008fa4:	0800903b 	.word	0x0800903b
 8008fa8:	0800903b 	.word	0x0800903b
 8008fac:	0800903b 	.word	0x0800903b
 8008fb0:	0800903b 	.word	0x0800903b
 8008fb4:	0800903b 	.word	0x0800903b
 8008fb8:	0800903b 	.word	0x0800903b
 8008fbc:	0800903b 	.word	0x0800903b
 8008fc0:	0800903b 	.word	0x0800903b
 8008fc4:	0800903b 	.word	0x0800903b
 8008fc8:	0800903b 	.word	0x0800903b
 8008fcc:	0800902d 	.word	0x0800902d
 8008fd0:	2b40      	cmp	r3, #64	; 0x40
 8008fd2:	d02e      	beq.n	8009032 <UART_SetConfig+0x8aa>
 8008fd4:	e031      	b.n	800903a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fd6:	f7fb ff19 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 8008fda:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008fdc:	e033      	b.n	8009046 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008fde:	f7fb ff2b 	bl	8004e38 <HAL_RCC_GetPCLK2Freq>
 8008fe2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008fe4:	e02f      	b.n	8009046 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7fc fed8 	bl	8005da0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ff4:	e027      	b.n	8009046 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ff6:	f107 0318 	add.w	r3, r7, #24
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f7fd f824 	bl	8006048 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009000:	69fb      	ldr	r3, [r7, #28]
 8009002:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009004:	e01f      	b.n	8009046 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009006:	4b2d      	ldr	r3, [pc, #180]	; (80090bc <UART_SetConfig+0x934>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f003 0320 	and.w	r3, r3, #32
 800900e:	2b00      	cmp	r3, #0
 8009010:	d009      	beq.n	8009026 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009012:	4b2a      	ldr	r3, [pc, #168]	; (80090bc <UART_SetConfig+0x934>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	08db      	lsrs	r3, r3, #3
 8009018:	f003 0303 	and.w	r3, r3, #3
 800901c:	4a24      	ldr	r2, [pc, #144]	; (80090b0 <UART_SetConfig+0x928>)
 800901e:	fa22 f303 	lsr.w	r3, r2, r3
 8009022:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009024:	e00f      	b.n	8009046 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009026:	4b22      	ldr	r3, [pc, #136]	; (80090b0 <UART_SetConfig+0x928>)
 8009028:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800902a:	e00c      	b.n	8009046 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800902c:	4b21      	ldr	r3, [pc, #132]	; (80090b4 <UART_SetConfig+0x92c>)
 800902e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009030:	e009      	b.n	8009046 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009036:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009038:	e005      	b.n	8009046 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800903a:	2300      	movs	r3, #0
 800903c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800903e:	2301      	movs	r3, #1
 8009040:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009044:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009048:	2b00      	cmp	r3, #0
 800904a:	f000 80e7 	beq.w	800921c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009052:	4a19      	ldr	r2, [pc, #100]	; (80090b8 <UART_SetConfig+0x930>)
 8009054:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009058:	461a      	mov	r2, r3
 800905a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800905c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009060:	005a      	lsls	r2, r3, #1
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	085b      	lsrs	r3, r3, #1
 8009068:	441a      	add	r2, r3
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009072:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009076:	2b0f      	cmp	r3, #15
 8009078:	d916      	bls.n	80090a8 <UART_SetConfig+0x920>
 800907a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800907c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009080:	d212      	bcs.n	80090a8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009084:	b29b      	uxth	r3, r3
 8009086:	f023 030f 	bic.w	r3, r3, #15
 800908a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800908c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800908e:	085b      	lsrs	r3, r3, #1
 8009090:	b29b      	uxth	r3, r3
 8009092:	f003 0307 	and.w	r3, r3, #7
 8009096:	b29a      	uxth	r2, r3
 8009098:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800909a:	4313      	orrs	r3, r2
 800909c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80090a4:	60da      	str	r2, [r3, #12]
 80090a6:	e0b9      	b.n	800921c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80090a8:	2301      	movs	r3, #1
 80090aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80090ae:	e0b5      	b.n	800921c <UART_SetConfig+0xa94>
 80090b0:	03d09000 	.word	0x03d09000
 80090b4:	003d0900 	.word	0x003d0900
 80090b8:	0800f918 	.word	0x0800f918
 80090bc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80090c0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80090c4:	2b20      	cmp	r3, #32
 80090c6:	dc49      	bgt.n	800915c <UART_SetConfig+0x9d4>
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	db7c      	blt.n	80091c6 <UART_SetConfig+0xa3e>
 80090cc:	2b20      	cmp	r3, #32
 80090ce:	d87a      	bhi.n	80091c6 <UART_SetConfig+0xa3e>
 80090d0:	a201      	add	r2, pc, #4	; (adr r2, 80090d8 <UART_SetConfig+0x950>)
 80090d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090d6:	bf00      	nop
 80090d8:	08009163 	.word	0x08009163
 80090dc:	0800916b 	.word	0x0800916b
 80090e0:	080091c7 	.word	0x080091c7
 80090e4:	080091c7 	.word	0x080091c7
 80090e8:	08009173 	.word	0x08009173
 80090ec:	080091c7 	.word	0x080091c7
 80090f0:	080091c7 	.word	0x080091c7
 80090f4:	080091c7 	.word	0x080091c7
 80090f8:	08009183 	.word	0x08009183
 80090fc:	080091c7 	.word	0x080091c7
 8009100:	080091c7 	.word	0x080091c7
 8009104:	080091c7 	.word	0x080091c7
 8009108:	080091c7 	.word	0x080091c7
 800910c:	080091c7 	.word	0x080091c7
 8009110:	080091c7 	.word	0x080091c7
 8009114:	080091c7 	.word	0x080091c7
 8009118:	08009193 	.word	0x08009193
 800911c:	080091c7 	.word	0x080091c7
 8009120:	080091c7 	.word	0x080091c7
 8009124:	080091c7 	.word	0x080091c7
 8009128:	080091c7 	.word	0x080091c7
 800912c:	080091c7 	.word	0x080091c7
 8009130:	080091c7 	.word	0x080091c7
 8009134:	080091c7 	.word	0x080091c7
 8009138:	080091c7 	.word	0x080091c7
 800913c:	080091c7 	.word	0x080091c7
 8009140:	080091c7 	.word	0x080091c7
 8009144:	080091c7 	.word	0x080091c7
 8009148:	080091c7 	.word	0x080091c7
 800914c:	080091c7 	.word	0x080091c7
 8009150:	080091c7 	.word	0x080091c7
 8009154:	080091c7 	.word	0x080091c7
 8009158:	080091b9 	.word	0x080091b9
 800915c:	2b40      	cmp	r3, #64	; 0x40
 800915e:	d02e      	beq.n	80091be <UART_SetConfig+0xa36>
 8009160:	e031      	b.n	80091c6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009162:	f7fb fe53 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 8009166:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009168:	e033      	b.n	80091d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800916a:	f7fb fe65 	bl	8004e38 <HAL_RCC_GetPCLK2Freq>
 800916e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009170:	e02f      	b.n	80091d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009172:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009176:	4618      	mov	r0, r3
 8009178:	f7fc fe12 	bl	8005da0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800917c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800917e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009180:	e027      	b.n	80091d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009182:	f107 0318 	add.w	r3, r7, #24
 8009186:	4618      	mov	r0, r3
 8009188:	f7fc ff5e 	bl	8006048 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800918c:	69fb      	ldr	r3, [r7, #28]
 800918e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009190:	e01f      	b.n	80091d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009192:	4b2d      	ldr	r3, [pc, #180]	; (8009248 <UART_SetConfig+0xac0>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f003 0320 	and.w	r3, r3, #32
 800919a:	2b00      	cmp	r3, #0
 800919c:	d009      	beq.n	80091b2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800919e:	4b2a      	ldr	r3, [pc, #168]	; (8009248 <UART_SetConfig+0xac0>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	08db      	lsrs	r3, r3, #3
 80091a4:	f003 0303 	and.w	r3, r3, #3
 80091a8:	4a28      	ldr	r2, [pc, #160]	; (800924c <UART_SetConfig+0xac4>)
 80091aa:	fa22 f303 	lsr.w	r3, r2, r3
 80091ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80091b0:	e00f      	b.n	80091d2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80091b2:	4b26      	ldr	r3, [pc, #152]	; (800924c <UART_SetConfig+0xac4>)
 80091b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091b6:	e00c      	b.n	80091d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80091b8:	4b25      	ldr	r3, [pc, #148]	; (8009250 <UART_SetConfig+0xac8>)
 80091ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091bc:	e009      	b.n	80091d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091c4:	e005      	b.n	80091d2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80091c6:	2300      	movs	r3, #0
 80091c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80091ca:	2301      	movs	r3, #1
 80091cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80091d0:	bf00      	nop
    }

    if (pclk != 0U)
 80091d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d021      	beq.n	800921c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091dc:	4a1d      	ldr	r2, [pc, #116]	; (8009254 <UART_SetConfig+0xacc>)
 80091de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091e2:	461a      	mov	r2, r3
 80091e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	685b      	ldr	r3, [r3, #4]
 80091ee:	085b      	lsrs	r3, r3, #1
 80091f0:	441a      	add	r2, r3
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80091fa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091fe:	2b0f      	cmp	r3, #15
 8009200:	d909      	bls.n	8009216 <UART_SetConfig+0xa8e>
 8009202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009208:	d205      	bcs.n	8009216 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800920a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800920c:	b29a      	uxth	r2, r3
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	60da      	str	r2, [r3, #12]
 8009214:	e002      	b.n	800921c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009216:	2301      	movs	r3, #1
 8009218:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	2201      	movs	r2, #1
 8009220:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	2201      	movs	r2, #1
 8009228:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	2200      	movs	r2, #0
 8009230:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	2200      	movs	r2, #0
 8009236:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009238:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800923c:	4618      	mov	r0, r3
 800923e:	3748      	adds	r7, #72	; 0x48
 8009240:	46bd      	mov	sp, r7
 8009242:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009246:	bf00      	nop
 8009248:	58024400 	.word	0x58024400
 800924c:	03d09000 	.word	0x03d09000
 8009250:	003d0900 	.word	0x003d0900
 8009254:	0800f918 	.word	0x0800f918

08009258 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009264:	f003 0301 	and.w	r3, r3, #1
 8009268:	2b00      	cmp	r3, #0
 800926a:	d00a      	beq.n	8009282 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	430a      	orrs	r2, r1
 8009280:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009286:	f003 0302 	and.w	r3, r3, #2
 800928a:	2b00      	cmp	r3, #0
 800928c:	d00a      	beq.n	80092a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	430a      	orrs	r2, r1
 80092a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092a8:	f003 0304 	and.w	r3, r3, #4
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d00a      	beq.n	80092c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	430a      	orrs	r2, r1
 80092c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ca:	f003 0308 	and.w	r3, r3, #8
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d00a      	beq.n	80092e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	430a      	orrs	r2, r1
 80092e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ec:	f003 0310 	and.w	r3, r3, #16
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d00a      	beq.n	800930a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	689b      	ldr	r3, [r3, #8]
 80092fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	430a      	orrs	r2, r1
 8009308:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800930e:	f003 0320 	and.w	r3, r3, #32
 8009312:	2b00      	cmp	r3, #0
 8009314:	d00a      	beq.n	800932c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	689b      	ldr	r3, [r3, #8]
 800931c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	430a      	orrs	r2, r1
 800932a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009334:	2b00      	cmp	r3, #0
 8009336:	d01a      	beq.n	800936e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	430a      	orrs	r2, r1
 800934c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009352:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009356:	d10a      	bne.n	800936e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	430a      	orrs	r2, r1
 800936c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009376:	2b00      	cmp	r3, #0
 8009378:	d00a      	beq.n	8009390 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	430a      	orrs	r2, r1
 800938e:	605a      	str	r2, [r3, #4]
  }
}
 8009390:	bf00      	nop
 8009392:	370c      	adds	r7, #12
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr

0800939c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b086      	sub	sp, #24
 80093a0:	af02      	add	r7, sp, #8
 80093a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2200      	movs	r2, #0
 80093a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80093ac:	f7f9 fece 	bl	800314c <HAL_GetTick>
 80093b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f003 0308 	and.w	r3, r3, #8
 80093bc:	2b08      	cmp	r3, #8
 80093be:	d10e      	bne.n	80093de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80093c4:	9300      	str	r3, [sp, #0]
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2200      	movs	r2, #0
 80093ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 f82f 	bl	8009432 <UART_WaitOnFlagUntilTimeout>
 80093d4:	4603      	mov	r3, r0
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d001      	beq.n	80093de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093da:	2303      	movs	r3, #3
 80093dc:	e025      	b.n	800942a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f003 0304 	and.w	r3, r3, #4
 80093e8:	2b04      	cmp	r3, #4
 80093ea:	d10e      	bne.n	800940a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80093f0:	9300      	str	r3, [sp, #0]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2200      	movs	r2, #0
 80093f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 f819 	bl	8009432 <UART_WaitOnFlagUntilTimeout>
 8009400:	4603      	mov	r3, r0
 8009402:	2b00      	cmp	r3, #0
 8009404:	d001      	beq.n	800940a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009406:	2303      	movs	r3, #3
 8009408:	e00f      	b.n	800942a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2220      	movs	r2, #32
 800940e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2220      	movs	r2, #32
 8009416:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2200      	movs	r2, #0
 8009424:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009428:	2300      	movs	r3, #0
}
 800942a:	4618      	mov	r0, r3
 800942c:	3710      	adds	r7, #16
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}

08009432 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009432:	b580      	push	{r7, lr}
 8009434:	b09c      	sub	sp, #112	; 0x70
 8009436:	af00      	add	r7, sp, #0
 8009438:	60f8      	str	r0, [r7, #12]
 800943a:	60b9      	str	r1, [r7, #8]
 800943c:	603b      	str	r3, [r7, #0]
 800943e:	4613      	mov	r3, r2
 8009440:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009442:	e0a9      	b.n	8009598 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009444:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800944a:	f000 80a5 	beq.w	8009598 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800944e:	f7f9 fe7d 	bl	800314c <HAL_GetTick>
 8009452:	4602      	mov	r2, r0
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	1ad3      	subs	r3, r2, r3
 8009458:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800945a:	429a      	cmp	r2, r3
 800945c:	d302      	bcc.n	8009464 <UART_WaitOnFlagUntilTimeout+0x32>
 800945e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009460:	2b00      	cmp	r3, #0
 8009462:	d140      	bne.n	80094e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800946a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800946c:	e853 3f00 	ldrex	r3, [r3]
 8009470:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009474:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009478:	667b      	str	r3, [r7, #100]	; 0x64
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	461a      	mov	r2, r3
 8009480:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009482:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009484:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009486:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009488:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800948a:	e841 2300 	strex	r3, r2, [r1]
 800948e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009492:	2b00      	cmp	r3, #0
 8009494:	d1e6      	bne.n	8009464 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	3308      	adds	r3, #8
 800949c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800949e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094a0:	e853 3f00 	ldrex	r3, [r3]
 80094a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80094a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a8:	f023 0301 	bic.w	r3, r3, #1
 80094ac:	663b      	str	r3, [r7, #96]	; 0x60
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	3308      	adds	r3, #8
 80094b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80094b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80094b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80094bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094be:	e841 2300 	strex	r3, r2, [r1]
 80094c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80094c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d1e5      	bne.n	8009496 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2220      	movs	r2, #32
 80094ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2220      	movs	r2, #32
 80094d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2200      	movs	r2, #0
 80094de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80094e2:	2303      	movs	r3, #3
 80094e4:	e069      	b.n	80095ba <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f003 0304 	and.w	r3, r3, #4
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d051      	beq.n	8009598 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	69db      	ldr	r3, [r3, #28]
 80094fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009502:	d149      	bne.n	8009598 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800950c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009516:	e853 3f00 	ldrex	r3, [r3]
 800951a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800951c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009522:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	461a      	mov	r2, r3
 800952a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800952c:	637b      	str	r3, [r7, #52]	; 0x34
 800952e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009530:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009532:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009534:	e841 2300 	strex	r3, r2, [r1]
 8009538:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800953a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800953c:	2b00      	cmp	r3, #0
 800953e:	d1e6      	bne.n	800950e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	3308      	adds	r3, #8
 8009546:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	e853 3f00 	ldrex	r3, [r3]
 800954e:	613b      	str	r3, [r7, #16]
   return(result);
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	f023 0301 	bic.w	r3, r3, #1
 8009556:	66bb      	str	r3, [r7, #104]	; 0x68
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	3308      	adds	r3, #8
 800955e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009560:	623a      	str	r2, [r7, #32]
 8009562:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009564:	69f9      	ldr	r1, [r7, #28]
 8009566:	6a3a      	ldr	r2, [r7, #32]
 8009568:	e841 2300 	strex	r3, r2, [r1]
 800956c:	61bb      	str	r3, [r7, #24]
   return(result);
 800956e:	69bb      	ldr	r3, [r7, #24]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d1e5      	bne.n	8009540 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2220      	movs	r2, #32
 8009578:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2220      	movs	r2, #32
 8009580:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2220      	movs	r2, #32
 8009588:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2200      	movs	r2, #0
 8009590:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009594:	2303      	movs	r3, #3
 8009596:	e010      	b.n	80095ba <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	69da      	ldr	r2, [r3, #28]
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	4013      	ands	r3, r2
 80095a2:	68ba      	ldr	r2, [r7, #8]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	bf0c      	ite	eq
 80095a8:	2301      	moveq	r3, #1
 80095aa:	2300      	movne	r3, #0
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	461a      	mov	r2, r3
 80095b0:	79fb      	ldrb	r3, [r7, #7]
 80095b2:	429a      	cmp	r2, r3
 80095b4:	f43f af46 	beq.w	8009444 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80095b8:	2300      	movs	r3, #0
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3770      	adds	r7, #112	; 0x70
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}

080095c2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80095c2:	b480      	push	{r7}
 80095c4:	b085      	sub	sp, #20
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d101      	bne.n	80095d8 <HAL_UARTEx_DisableFifoMode+0x16>
 80095d4:	2302      	movs	r3, #2
 80095d6:	e027      	b.n	8009628 <HAL_UARTEx_DisableFifoMode+0x66>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2201      	movs	r2, #1
 80095dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2224      	movs	r2, #36	; 0x24
 80095e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	681a      	ldr	r2, [r3, #0]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f022 0201 	bic.w	r2, r2, #1
 80095fe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009606:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	68fa      	ldr	r2, [r7, #12]
 8009614:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2220      	movs	r2, #32
 800961a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2200      	movs	r2, #0
 8009622:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009626:	2300      	movs	r3, #0
}
 8009628:	4618      	mov	r0, r3
 800962a:	3714      	adds	r7, #20
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr

08009634 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b084      	sub	sp, #16
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009644:	2b01      	cmp	r3, #1
 8009646:	d101      	bne.n	800964c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009648:	2302      	movs	r3, #2
 800964a:	e02d      	b.n	80096a8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2201      	movs	r2, #1
 8009650:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2224      	movs	r2, #36	; 0x24
 8009658:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f022 0201 	bic.w	r2, r2, #1
 8009672:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	689b      	ldr	r3, [r3, #8]
 800967a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	683a      	ldr	r2, [r7, #0]
 8009684:	430a      	orrs	r2, r1
 8009686:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f000 f84f 	bl	800972c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	68fa      	ldr	r2, [r7, #12]
 8009694:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2220      	movs	r2, #32
 800969a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80096a6:	2300      	movs	r3, #0
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3710      	adds	r7, #16
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d101      	bne.n	80096c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80096c4:	2302      	movs	r3, #2
 80096c6:	e02d      	b.n	8009724 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2201      	movs	r2, #1
 80096cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2224      	movs	r2, #36	; 0x24
 80096d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	681a      	ldr	r2, [r3, #0]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f022 0201 	bic.w	r2, r2, #1
 80096ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	689b      	ldr	r3, [r3, #8]
 80096f6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	683a      	ldr	r2, [r7, #0]
 8009700:	430a      	orrs	r2, r1
 8009702:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 f811 	bl	800972c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	68fa      	ldr	r2, [r7, #12]
 8009710:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2220      	movs	r2, #32
 8009716:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2200      	movs	r2, #0
 800971e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009722:	2300      	movs	r3, #0
}
 8009724:	4618      	mov	r0, r3
 8009726:	3710      	adds	r7, #16
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800972c:	b480      	push	{r7}
 800972e:	b085      	sub	sp, #20
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009738:	2b00      	cmp	r3, #0
 800973a:	d108      	bne.n	800974e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2201      	movs	r2, #1
 8009740:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2201      	movs	r2, #1
 8009748:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800974c:	e031      	b.n	80097b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800974e:	2310      	movs	r3, #16
 8009750:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009752:	2310      	movs	r3, #16
 8009754:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	0e5b      	lsrs	r3, r3, #25
 800975e:	b2db      	uxtb	r3, r3
 8009760:	f003 0307 	and.w	r3, r3, #7
 8009764:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	689b      	ldr	r3, [r3, #8]
 800976c:	0f5b      	lsrs	r3, r3, #29
 800976e:	b2db      	uxtb	r3, r3
 8009770:	f003 0307 	and.w	r3, r3, #7
 8009774:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009776:	7bbb      	ldrb	r3, [r7, #14]
 8009778:	7b3a      	ldrb	r2, [r7, #12]
 800977a:	4911      	ldr	r1, [pc, #68]	; (80097c0 <UARTEx_SetNbDataToProcess+0x94>)
 800977c:	5c8a      	ldrb	r2, [r1, r2]
 800977e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009782:	7b3a      	ldrb	r2, [r7, #12]
 8009784:	490f      	ldr	r1, [pc, #60]	; (80097c4 <UARTEx_SetNbDataToProcess+0x98>)
 8009786:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009788:	fb93 f3f2 	sdiv	r3, r3, r2
 800978c:	b29a      	uxth	r2, r3
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009794:	7bfb      	ldrb	r3, [r7, #15]
 8009796:	7b7a      	ldrb	r2, [r7, #13]
 8009798:	4909      	ldr	r1, [pc, #36]	; (80097c0 <UARTEx_SetNbDataToProcess+0x94>)
 800979a:	5c8a      	ldrb	r2, [r1, r2]
 800979c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80097a0:	7b7a      	ldrb	r2, [r7, #13]
 80097a2:	4908      	ldr	r1, [pc, #32]	; (80097c4 <UARTEx_SetNbDataToProcess+0x98>)
 80097a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80097aa:	b29a      	uxth	r2, r3
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80097b2:	bf00      	nop
 80097b4:	3714      	adds	r7, #20
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr
 80097be:	bf00      	nop
 80097c0:	0800f930 	.word	0x0800f930
 80097c4:	0800f938 	.word	0x0800f938

080097c8 <__NVIC_SetPriority>:
{
 80097c8:	b480      	push	{r7}
 80097ca:	b083      	sub	sp, #12
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	4603      	mov	r3, r0
 80097d0:	6039      	str	r1, [r7, #0]
 80097d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80097d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	db0a      	blt.n	80097f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	b2da      	uxtb	r2, r3
 80097e0:	490c      	ldr	r1, [pc, #48]	; (8009814 <__NVIC_SetPriority+0x4c>)
 80097e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80097e6:	0112      	lsls	r2, r2, #4
 80097e8:	b2d2      	uxtb	r2, r2
 80097ea:	440b      	add	r3, r1
 80097ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80097f0:	e00a      	b.n	8009808 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	b2da      	uxtb	r2, r3
 80097f6:	4908      	ldr	r1, [pc, #32]	; (8009818 <__NVIC_SetPriority+0x50>)
 80097f8:	88fb      	ldrh	r3, [r7, #6]
 80097fa:	f003 030f 	and.w	r3, r3, #15
 80097fe:	3b04      	subs	r3, #4
 8009800:	0112      	lsls	r2, r2, #4
 8009802:	b2d2      	uxtb	r2, r2
 8009804:	440b      	add	r3, r1
 8009806:	761a      	strb	r2, [r3, #24]
}
 8009808:	bf00      	nop
 800980a:	370c      	adds	r7, #12
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr
 8009814:	e000e100 	.word	0xe000e100
 8009818:	e000ed00 	.word	0xe000ed00

0800981c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800981c:	b580      	push	{r7, lr}
 800981e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009820:	4b05      	ldr	r3, [pc, #20]	; (8009838 <SysTick_Handler+0x1c>)
 8009822:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009824:	f002 f964 	bl	800baf0 <xTaskGetSchedulerState>
 8009828:	4603      	mov	r3, r0
 800982a:	2b01      	cmp	r3, #1
 800982c:	d001      	beq.n	8009832 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800982e:	f000 fd9b 	bl	800a368 <xPortSysTickHandler>
  }
}
 8009832:	bf00      	nop
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop
 8009838:	e000e010 	.word	0xe000e010

0800983c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800983c:	b580      	push	{r7, lr}
 800983e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009840:	2100      	movs	r1, #0
 8009842:	f06f 0004 	mvn.w	r0, #4
 8009846:	f7ff ffbf 	bl	80097c8 <__NVIC_SetPriority>
#endif
}
 800984a:	bf00      	nop
 800984c:	bd80      	pop	{r7, pc}
	...

08009850 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009850:	b480      	push	{r7}
 8009852:	b083      	sub	sp, #12
 8009854:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009856:	f3ef 8305 	mrs	r3, IPSR
 800985a:	603b      	str	r3, [r7, #0]
  return(result);
 800985c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800985e:	2b00      	cmp	r3, #0
 8009860:	d003      	beq.n	800986a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009862:	f06f 0305 	mvn.w	r3, #5
 8009866:	607b      	str	r3, [r7, #4]
 8009868:	e00c      	b.n	8009884 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800986a:	4b0a      	ldr	r3, [pc, #40]	; (8009894 <osKernelInitialize+0x44>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d105      	bne.n	800987e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009872:	4b08      	ldr	r3, [pc, #32]	; (8009894 <osKernelInitialize+0x44>)
 8009874:	2201      	movs	r2, #1
 8009876:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009878:	2300      	movs	r3, #0
 800987a:	607b      	str	r3, [r7, #4]
 800987c:	e002      	b.n	8009884 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800987e:	f04f 33ff 	mov.w	r3, #4294967295
 8009882:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009884:	687b      	ldr	r3, [r7, #4]
}
 8009886:	4618      	mov	r0, r3
 8009888:	370c      	adds	r7, #12
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr
 8009892:	bf00      	nop
 8009894:	240006bc 	.word	0x240006bc

08009898 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009898:	b580      	push	{r7, lr}
 800989a:	b082      	sub	sp, #8
 800989c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800989e:	f3ef 8305 	mrs	r3, IPSR
 80098a2:	603b      	str	r3, [r7, #0]
  return(result);
 80098a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d003      	beq.n	80098b2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80098aa:	f06f 0305 	mvn.w	r3, #5
 80098ae:	607b      	str	r3, [r7, #4]
 80098b0:	e010      	b.n	80098d4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80098b2:	4b0b      	ldr	r3, [pc, #44]	; (80098e0 <osKernelStart+0x48>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	2b01      	cmp	r3, #1
 80098b8:	d109      	bne.n	80098ce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80098ba:	f7ff ffbf 	bl	800983c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80098be:	4b08      	ldr	r3, [pc, #32]	; (80098e0 <osKernelStart+0x48>)
 80098c0:	2202      	movs	r2, #2
 80098c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80098c4:	f001 fcb8 	bl	800b238 <vTaskStartScheduler>
      stat = osOK;
 80098c8:	2300      	movs	r3, #0
 80098ca:	607b      	str	r3, [r7, #4]
 80098cc:	e002      	b.n	80098d4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80098ce:	f04f 33ff 	mov.w	r3, #4294967295
 80098d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80098d4:	687b      	ldr	r3, [r7, #4]
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3708      	adds	r7, #8
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	240006bc 	.word	0x240006bc

080098e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b08e      	sub	sp, #56	; 0x38
 80098e8:	af04      	add	r7, sp, #16
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	60b9      	str	r1, [r7, #8]
 80098ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80098f0:	2300      	movs	r3, #0
 80098f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098f4:	f3ef 8305 	mrs	r3, IPSR
 80098f8:	617b      	str	r3, [r7, #20]
  return(result);
 80098fa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d17e      	bne.n	80099fe <osThreadNew+0x11a>
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d07b      	beq.n	80099fe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009906:	2380      	movs	r3, #128	; 0x80
 8009908:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800990a:	2318      	movs	r3, #24
 800990c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800990e:	2300      	movs	r3, #0
 8009910:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009912:	f04f 33ff 	mov.w	r3, #4294967295
 8009916:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d045      	beq.n	80099aa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d002      	beq.n	800992c <osThreadNew+0x48>
        name = attr->name;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	699b      	ldr	r3, [r3, #24]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d002      	beq.n	800993a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	699b      	ldr	r3, [r3, #24]
 8009938:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800993a:	69fb      	ldr	r3, [r7, #28]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d008      	beq.n	8009952 <osThreadNew+0x6e>
 8009940:	69fb      	ldr	r3, [r7, #28]
 8009942:	2b38      	cmp	r3, #56	; 0x38
 8009944:	d805      	bhi.n	8009952 <osThreadNew+0x6e>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	f003 0301 	and.w	r3, r3, #1
 800994e:	2b00      	cmp	r3, #0
 8009950:	d001      	beq.n	8009956 <osThreadNew+0x72>
        return (NULL);
 8009952:	2300      	movs	r3, #0
 8009954:	e054      	b.n	8009a00 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	695b      	ldr	r3, [r3, #20]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d003      	beq.n	8009966 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	695b      	ldr	r3, [r3, #20]
 8009962:	089b      	lsrs	r3, r3, #2
 8009964:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	689b      	ldr	r3, [r3, #8]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d00e      	beq.n	800998c <osThreadNew+0xa8>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	68db      	ldr	r3, [r3, #12]
 8009972:	2bbb      	cmp	r3, #187	; 0xbb
 8009974:	d90a      	bls.n	800998c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800997a:	2b00      	cmp	r3, #0
 800997c:	d006      	beq.n	800998c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	695b      	ldr	r3, [r3, #20]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d002      	beq.n	800998c <osThreadNew+0xa8>
        mem = 1;
 8009986:	2301      	movs	r3, #1
 8009988:	61bb      	str	r3, [r7, #24]
 800998a:	e010      	b.n	80099ae <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d10c      	bne.n	80099ae <osThreadNew+0xca>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	68db      	ldr	r3, [r3, #12]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d108      	bne.n	80099ae <osThreadNew+0xca>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	691b      	ldr	r3, [r3, #16]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d104      	bne.n	80099ae <osThreadNew+0xca>
          mem = 0;
 80099a4:	2300      	movs	r3, #0
 80099a6:	61bb      	str	r3, [r7, #24]
 80099a8:	e001      	b.n	80099ae <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80099aa:	2300      	movs	r3, #0
 80099ac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80099ae:	69bb      	ldr	r3, [r7, #24]
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d110      	bne.n	80099d6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80099b8:	687a      	ldr	r2, [r7, #4]
 80099ba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80099bc:	9202      	str	r2, [sp, #8]
 80099be:	9301      	str	r3, [sp, #4]
 80099c0:	69fb      	ldr	r3, [r7, #28]
 80099c2:	9300      	str	r3, [sp, #0]
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	6a3a      	ldr	r2, [r7, #32]
 80099c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80099ca:	68f8      	ldr	r0, [r7, #12]
 80099cc:	f001 fa48 	bl	800ae60 <xTaskCreateStatic>
 80099d0:	4603      	mov	r3, r0
 80099d2:	613b      	str	r3, [r7, #16]
 80099d4:	e013      	b.n	80099fe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80099d6:	69bb      	ldr	r3, [r7, #24]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d110      	bne.n	80099fe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80099dc:	6a3b      	ldr	r3, [r7, #32]
 80099de:	b29a      	uxth	r2, r3
 80099e0:	f107 0310 	add.w	r3, r7, #16
 80099e4:	9301      	str	r3, [sp, #4]
 80099e6:	69fb      	ldr	r3, [r7, #28]
 80099e8:	9300      	str	r3, [sp, #0]
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80099ee:	68f8      	ldr	r0, [r7, #12]
 80099f0:	f001 fa93 	bl	800af1a <xTaskCreate>
 80099f4:	4603      	mov	r3, r0
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	d001      	beq.n	80099fe <osThreadNew+0x11a>
            hTask = NULL;
 80099fa:	2300      	movs	r3, #0
 80099fc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80099fe:	693b      	ldr	r3, [r7, #16]
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3728      	adds	r7, #40	; 0x28
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b084      	sub	sp, #16
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a10:	f3ef 8305 	mrs	r3, IPSR
 8009a14:	60bb      	str	r3, [r7, #8]
  return(result);
 8009a16:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d003      	beq.n	8009a24 <osDelay+0x1c>
    stat = osErrorISR;
 8009a1c:	f06f 0305 	mvn.w	r3, #5
 8009a20:	60fb      	str	r3, [r7, #12]
 8009a22:	e007      	b.n	8009a34 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009a24:	2300      	movs	r3, #0
 8009a26:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d002      	beq.n	8009a34 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f001 fbce 	bl	800b1d0 <vTaskDelay>
    }
  }

  return (stat);
 8009a34:	68fb      	ldr	r3, [r7, #12]
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
	...

08009a40 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009a40:	b480      	push	{r7}
 8009a42:	b085      	sub	sp, #20
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	60f8      	str	r0, [r7, #12]
 8009a48:	60b9      	str	r1, [r7, #8]
 8009a4a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	4a07      	ldr	r2, [pc, #28]	; (8009a6c <vApplicationGetIdleTaskMemory+0x2c>)
 8009a50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	4a06      	ldr	r2, [pc, #24]	; (8009a70 <vApplicationGetIdleTaskMemory+0x30>)
 8009a56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2280      	movs	r2, #128	; 0x80
 8009a5c:	601a      	str	r2, [r3, #0]
}
 8009a5e:	bf00      	nop
 8009a60:	3714      	adds	r7, #20
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr
 8009a6a:	bf00      	nop
 8009a6c:	240006c0 	.word	0x240006c0
 8009a70:	2400077c 	.word	0x2400077c

08009a74 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009a74:	b480      	push	{r7}
 8009a76:	b085      	sub	sp, #20
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	60f8      	str	r0, [r7, #12]
 8009a7c:	60b9      	str	r1, [r7, #8]
 8009a7e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	4a07      	ldr	r2, [pc, #28]	; (8009aa0 <vApplicationGetTimerTaskMemory+0x2c>)
 8009a84:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	4a06      	ldr	r2, [pc, #24]	; (8009aa4 <vApplicationGetTimerTaskMemory+0x30>)
 8009a8a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009a92:	601a      	str	r2, [r3, #0]
}
 8009a94:	bf00      	nop
 8009a96:	3714      	adds	r7, #20
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr
 8009aa0:	2400097c 	.word	0x2400097c
 8009aa4:	24000a38 	.word	0x24000a38

08009aa8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b08a      	sub	sp, #40	; 0x28
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009ab4:	f001 fc30 	bl	800b318 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009ab8:	4b5b      	ldr	r3, [pc, #364]	; (8009c28 <pvPortMalloc+0x180>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d101      	bne.n	8009ac4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009ac0:	f000 f920 	bl	8009d04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009ac4:	4b59      	ldr	r3, [pc, #356]	; (8009c2c <pvPortMalloc+0x184>)
 8009ac6:	681a      	ldr	r2, [r3, #0]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	4013      	ands	r3, r2
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	f040 8093 	bne.w	8009bf8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d01d      	beq.n	8009b14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009ad8:	2208      	movs	r2, #8
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4413      	add	r3, r2
 8009ade:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f003 0307 	and.w	r3, r3, #7
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d014      	beq.n	8009b14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f023 0307 	bic.w	r3, r3, #7
 8009af0:	3308      	adds	r3, #8
 8009af2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f003 0307 	and.w	r3, r3, #7
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d00a      	beq.n	8009b14 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b02:	f383 8811 	msr	BASEPRI, r3
 8009b06:	f3bf 8f6f 	isb	sy
 8009b0a:	f3bf 8f4f 	dsb	sy
 8009b0e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009b10:	bf00      	nop
 8009b12:	e7fe      	b.n	8009b12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d06e      	beq.n	8009bf8 <pvPortMalloc+0x150>
 8009b1a:	4b45      	ldr	r3, [pc, #276]	; (8009c30 <pvPortMalloc+0x188>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d869      	bhi.n	8009bf8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009b24:	4b43      	ldr	r3, [pc, #268]	; (8009c34 <pvPortMalloc+0x18c>)
 8009b26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009b28:	4b42      	ldr	r3, [pc, #264]	; (8009c34 <pvPortMalloc+0x18c>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b2e:	e004      	b.n	8009b3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	429a      	cmp	r2, r3
 8009b42:	d903      	bls.n	8009b4c <pvPortMalloc+0xa4>
 8009b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d1f1      	bne.n	8009b30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009b4c:	4b36      	ldr	r3, [pc, #216]	; (8009c28 <pvPortMalloc+0x180>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b52:	429a      	cmp	r2, r3
 8009b54:	d050      	beq.n	8009bf8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b56:	6a3b      	ldr	r3, [r7, #32]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	2208      	movs	r2, #8
 8009b5c:	4413      	add	r3, r2
 8009b5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	6a3b      	ldr	r3, [r7, #32]
 8009b66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6a:	685a      	ldr	r2, [r3, #4]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	1ad2      	subs	r2, r2, r3
 8009b70:	2308      	movs	r3, #8
 8009b72:	005b      	lsls	r3, r3, #1
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d91f      	bls.n	8009bb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	4413      	add	r3, r2
 8009b7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b80:	69bb      	ldr	r3, [r7, #24]
 8009b82:	f003 0307 	and.w	r3, r3, #7
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d00a      	beq.n	8009ba0 <pvPortMalloc+0xf8>
	__asm volatile
 8009b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b8e:	f383 8811 	msr	BASEPRI, r3
 8009b92:	f3bf 8f6f 	isb	sy
 8009b96:	f3bf 8f4f 	dsb	sy
 8009b9a:	613b      	str	r3, [r7, #16]
}
 8009b9c:	bf00      	nop
 8009b9e:	e7fe      	b.n	8009b9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba2:	685a      	ldr	r2, [r3, #4]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	1ad2      	subs	r2, r2, r3
 8009ba8:	69bb      	ldr	r3, [r7, #24]
 8009baa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009bb2:	69b8      	ldr	r0, [r7, #24]
 8009bb4:	f000 f908 	bl	8009dc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009bb8:	4b1d      	ldr	r3, [pc, #116]	; (8009c30 <pvPortMalloc+0x188>)
 8009bba:	681a      	ldr	r2, [r3, #0]
 8009bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bbe:	685b      	ldr	r3, [r3, #4]
 8009bc0:	1ad3      	subs	r3, r2, r3
 8009bc2:	4a1b      	ldr	r2, [pc, #108]	; (8009c30 <pvPortMalloc+0x188>)
 8009bc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009bc6:	4b1a      	ldr	r3, [pc, #104]	; (8009c30 <pvPortMalloc+0x188>)
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	4b1b      	ldr	r3, [pc, #108]	; (8009c38 <pvPortMalloc+0x190>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d203      	bcs.n	8009bda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009bd2:	4b17      	ldr	r3, [pc, #92]	; (8009c30 <pvPortMalloc+0x188>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4a18      	ldr	r2, [pc, #96]	; (8009c38 <pvPortMalloc+0x190>)
 8009bd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bdc:	685a      	ldr	r2, [r3, #4]
 8009bde:	4b13      	ldr	r3, [pc, #76]	; (8009c2c <pvPortMalloc+0x184>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	431a      	orrs	r2, r3
 8009be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bea:	2200      	movs	r2, #0
 8009bec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009bee:	4b13      	ldr	r3, [pc, #76]	; (8009c3c <pvPortMalloc+0x194>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	4a11      	ldr	r2, [pc, #68]	; (8009c3c <pvPortMalloc+0x194>)
 8009bf6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009bf8:	f001 fb9c 	bl	800b334 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bfc:	69fb      	ldr	r3, [r7, #28]
 8009bfe:	f003 0307 	and.w	r3, r3, #7
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d00a      	beq.n	8009c1c <pvPortMalloc+0x174>
	__asm volatile
 8009c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c0a:	f383 8811 	msr	BASEPRI, r3
 8009c0e:	f3bf 8f6f 	isb	sy
 8009c12:	f3bf 8f4f 	dsb	sy
 8009c16:	60fb      	str	r3, [r7, #12]
}
 8009c18:	bf00      	nop
 8009c1a:	e7fe      	b.n	8009c1a <pvPortMalloc+0x172>
	return pvReturn;
 8009c1c:	69fb      	ldr	r3, [r7, #28]
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3728      	adds	r7, #40	; 0x28
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}
 8009c26:	bf00      	nop
 8009c28:	24004a40 	.word	0x24004a40
 8009c2c:	24004a54 	.word	0x24004a54
 8009c30:	24004a44 	.word	0x24004a44
 8009c34:	24004a38 	.word	0x24004a38
 8009c38:	24004a48 	.word	0x24004a48
 8009c3c:	24004a4c 	.word	0x24004a4c

08009c40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b086      	sub	sp, #24
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d04d      	beq.n	8009cee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009c52:	2308      	movs	r3, #8
 8009c54:	425b      	negs	r3, r3
 8009c56:	697a      	ldr	r2, [r7, #20]
 8009c58:	4413      	add	r3, r2
 8009c5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	685a      	ldr	r2, [r3, #4]
 8009c64:	4b24      	ldr	r3, [pc, #144]	; (8009cf8 <vPortFree+0xb8>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4013      	ands	r3, r2
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d10a      	bne.n	8009c84 <vPortFree+0x44>
	__asm volatile
 8009c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c72:	f383 8811 	msr	BASEPRI, r3
 8009c76:	f3bf 8f6f 	isb	sy
 8009c7a:	f3bf 8f4f 	dsb	sy
 8009c7e:	60fb      	str	r3, [r7, #12]
}
 8009c80:	bf00      	nop
 8009c82:	e7fe      	b.n	8009c82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d00a      	beq.n	8009ca2 <vPortFree+0x62>
	__asm volatile
 8009c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c90:	f383 8811 	msr	BASEPRI, r3
 8009c94:	f3bf 8f6f 	isb	sy
 8009c98:	f3bf 8f4f 	dsb	sy
 8009c9c:	60bb      	str	r3, [r7, #8]
}
 8009c9e:	bf00      	nop
 8009ca0:	e7fe      	b.n	8009ca0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	685a      	ldr	r2, [r3, #4]
 8009ca6:	4b14      	ldr	r3, [pc, #80]	; (8009cf8 <vPortFree+0xb8>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4013      	ands	r3, r2
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d01e      	beq.n	8009cee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d11a      	bne.n	8009cee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	685a      	ldr	r2, [r3, #4]
 8009cbc:	4b0e      	ldr	r3, [pc, #56]	; (8009cf8 <vPortFree+0xb8>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	43db      	mvns	r3, r3
 8009cc2:	401a      	ands	r2, r3
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009cc8:	f001 fb26 	bl	800b318 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	685a      	ldr	r2, [r3, #4]
 8009cd0:	4b0a      	ldr	r3, [pc, #40]	; (8009cfc <vPortFree+0xbc>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4413      	add	r3, r2
 8009cd6:	4a09      	ldr	r2, [pc, #36]	; (8009cfc <vPortFree+0xbc>)
 8009cd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009cda:	6938      	ldr	r0, [r7, #16]
 8009cdc:	f000 f874 	bl	8009dc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009ce0:	4b07      	ldr	r3, [pc, #28]	; (8009d00 <vPortFree+0xc0>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	4a06      	ldr	r2, [pc, #24]	; (8009d00 <vPortFree+0xc0>)
 8009ce8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009cea:	f001 fb23 	bl	800b334 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009cee:	bf00      	nop
 8009cf0:	3718      	adds	r7, #24
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop
 8009cf8:	24004a54 	.word	0x24004a54
 8009cfc:	24004a44 	.word	0x24004a44
 8009d00:	24004a50 	.word	0x24004a50

08009d04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009d04:	b480      	push	{r7}
 8009d06:	b085      	sub	sp, #20
 8009d08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009d0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009d0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009d10:	4b27      	ldr	r3, [pc, #156]	; (8009db0 <prvHeapInit+0xac>)
 8009d12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f003 0307 	and.w	r3, r3, #7
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d00c      	beq.n	8009d38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	3307      	adds	r3, #7
 8009d22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f023 0307 	bic.w	r3, r3, #7
 8009d2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009d2c:	68ba      	ldr	r2, [r7, #8]
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	1ad3      	subs	r3, r2, r3
 8009d32:	4a1f      	ldr	r2, [pc, #124]	; (8009db0 <prvHeapInit+0xac>)
 8009d34:	4413      	add	r3, r2
 8009d36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009d3c:	4a1d      	ldr	r2, [pc, #116]	; (8009db4 <prvHeapInit+0xb0>)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009d42:	4b1c      	ldr	r3, [pc, #112]	; (8009db4 <prvHeapInit+0xb0>)
 8009d44:	2200      	movs	r2, #0
 8009d46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	68ba      	ldr	r2, [r7, #8]
 8009d4c:	4413      	add	r3, r2
 8009d4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009d50:	2208      	movs	r2, #8
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	1a9b      	subs	r3, r3, r2
 8009d56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	f023 0307 	bic.w	r3, r3, #7
 8009d5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	4a15      	ldr	r2, [pc, #84]	; (8009db8 <prvHeapInit+0xb4>)
 8009d64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009d66:	4b14      	ldr	r3, [pc, #80]	; (8009db8 <prvHeapInit+0xb4>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009d6e:	4b12      	ldr	r3, [pc, #72]	; (8009db8 <prvHeapInit+0xb4>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	2200      	movs	r2, #0
 8009d74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	68fa      	ldr	r2, [r7, #12]
 8009d7e:	1ad2      	subs	r2, r2, r3
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009d84:	4b0c      	ldr	r3, [pc, #48]	; (8009db8 <prvHeapInit+0xb4>)
 8009d86:	681a      	ldr	r2, [r3, #0]
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	4a0a      	ldr	r2, [pc, #40]	; (8009dbc <prvHeapInit+0xb8>)
 8009d92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	4a09      	ldr	r2, [pc, #36]	; (8009dc0 <prvHeapInit+0xbc>)
 8009d9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009d9c:	4b09      	ldr	r3, [pc, #36]	; (8009dc4 <prvHeapInit+0xc0>)
 8009d9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009da2:	601a      	str	r2, [r3, #0]
}
 8009da4:	bf00      	nop
 8009da6:	3714      	adds	r7, #20
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr
 8009db0:	24000e38 	.word	0x24000e38
 8009db4:	24004a38 	.word	0x24004a38
 8009db8:	24004a40 	.word	0x24004a40
 8009dbc:	24004a48 	.word	0x24004a48
 8009dc0:	24004a44 	.word	0x24004a44
 8009dc4:	24004a54 	.word	0x24004a54

08009dc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b085      	sub	sp, #20
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009dd0:	4b28      	ldr	r3, [pc, #160]	; (8009e74 <prvInsertBlockIntoFreeList+0xac>)
 8009dd2:	60fb      	str	r3, [r7, #12]
 8009dd4:	e002      	b.n	8009ddc <prvInsertBlockIntoFreeList+0x14>
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	60fb      	str	r3, [r7, #12]
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	687a      	ldr	r2, [r7, #4]
 8009de2:	429a      	cmp	r2, r3
 8009de4:	d8f7      	bhi.n	8009dd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	68ba      	ldr	r2, [r7, #8]
 8009df0:	4413      	add	r3, r2
 8009df2:	687a      	ldr	r2, [r7, #4]
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d108      	bne.n	8009e0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	685a      	ldr	r2, [r3, #4]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	441a      	add	r2, r3
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	68ba      	ldr	r2, [r7, #8]
 8009e14:	441a      	add	r2, r3
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d118      	bne.n	8009e50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	4b15      	ldr	r3, [pc, #84]	; (8009e78 <prvInsertBlockIntoFreeList+0xb0>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d00d      	beq.n	8009e46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	685a      	ldr	r2, [r3, #4]
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	685b      	ldr	r3, [r3, #4]
 8009e34:	441a      	add	r2, r3
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	681a      	ldr	r2, [r3, #0]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	601a      	str	r2, [r3, #0]
 8009e44:	e008      	b.n	8009e58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009e46:	4b0c      	ldr	r3, [pc, #48]	; (8009e78 <prvInsertBlockIntoFreeList+0xb0>)
 8009e48:	681a      	ldr	r2, [r3, #0]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	601a      	str	r2, [r3, #0]
 8009e4e:	e003      	b.n	8009e58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681a      	ldr	r2, [r3, #0]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009e58:	68fa      	ldr	r2, [r7, #12]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	d002      	beq.n	8009e66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e66:	bf00      	nop
 8009e68:	3714      	adds	r7, #20
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr
 8009e72:	bf00      	nop
 8009e74:	24004a38 	.word	0x24004a38
 8009e78:	24004a40 	.word	0x24004a40

08009e7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b083      	sub	sp, #12
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f103 0208 	add.w	r2, r3, #8
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f04f 32ff 	mov.w	r2, #4294967295
 8009e94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f103 0208 	add.w	r2, r3, #8
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f103 0208 	add.w	r2, r3, #8
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2200      	movs	r2, #0
 8009eae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009eb0:	bf00      	nop
 8009eb2:	370c      	adds	r7, #12
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr

08009ebc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b083      	sub	sp, #12
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009eca:	bf00      	nop
 8009ecc:	370c      	adds	r7, #12
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr

08009ed6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ed6:	b480      	push	{r7}
 8009ed8:	b085      	sub	sp, #20
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
 8009ede:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	68fa      	ldr	r2, [r7, #12]
 8009eea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	689a      	ldr	r2, [r3, #8]
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	683a      	ldr	r2, [r7, #0]
 8009efa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	683a      	ldr	r2, [r7, #0]
 8009f00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	687a      	ldr	r2, [r7, #4]
 8009f06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	1c5a      	adds	r2, r3, #1
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	601a      	str	r2, [r3, #0]
}
 8009f12:	bf00      	nop
 8009f14:	3714      	adds	r7, #20
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr

08009f1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f1e:	b480      	push	{r7}
 8009f20:	b085      	sub	sp, #20
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]
 8009f26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f34:	d103      	bne.n	8009f3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	691b      	ldr	r3, [r3, #16]
 8009f3a:	60fb      	str	r3, [r7, #12]
 8009f3c:	e00c      	b.n	8009f58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	3308      	adds	r3, #8
 8009f42:	60fb      	str	r3, [r7, #12]
 8009f44:	e002      	b.n	8009f4c <vListInsert+0x2e>
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	685b      	ldr	r3, [r3, #4]
 8009f4a:	60fb      	str	r3, [r7, #12]
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	68ba      	ldr	r2, [r7, #8]
 8009f54:	429a      	cmp	r2, r3
 8009f56:	d2f6      	bcs.n	8009f46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	685a      	ldr	r2, [r3, #4]
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	683a      	ldr	r2, [r7, #0]
 8009f66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	68fa      	ldr	r2, [r7, #12]
 8009f6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	683a      	ldr	r2, [r7, #0]
 8009f72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	687a      	ldr	r2, [r7, #4]
 8009f78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	1c5a      	adds	r2, r3, #1
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	601a      	str	r2, [r3, #0]
}
 8009f84:	bf00      	nop
 8009f86:	3714      	adds	r7, #20
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr

08009f90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009f90:	b480      	push	{r7}
 8009f92:	b085      	sub	sp, #20
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	691b      	ldr	r3, [r3, #16]
 8009f9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	687a      	ldr	r2, [r7, #4]
 8009fa4:	6892      	ldr	r2, [r2, #8]
 8009fa6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	689b      	ldr	r3, [r3, #8]
 8009fac:	687a      	ldr	r2, [r7, #4]
 8009fae:	6852      	ldr	r2, [r2, #4]
 8009fb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	687a      	ldr	r2, [r7, #4]
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d103      	bne.n	8009fc4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	689a      	ldr	r2, [r3, #8]
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	1e5a      	subs	r2, r3, #1
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3714      	adds	r7, #20
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr

08009fe4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b085      	sub	sp, #20
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	3b04      	subs	r3, #4
 8009ff4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009ffc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	3b04      	subs	r3, #4
 800a002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	f023 0201 	bic.w	r2, r3, #1
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	3b04      	subs	r3, #4
 800a012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a014:	4a0c      	ldr	r2, [pc, #48]	; (800a048 <pxPortInitialiseStack+0x64>)
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	3b14      	subs	r3, #20
 800a01e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	3b04      	subs	r3, #4
 800a02a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f06f 0202 	mvn.w	r2, #2
 800a032:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	3b20      	subs	r3, #32
 800a038:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a03a:	68fb      	ldr	r3, [r7, #12]
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3714      	adds	r7, #20
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr
 800a048:	0800a04d 	.word	0x0800a04d

0800a04c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a04c:	b480      	push	{r7}
 800a04e:	b085      	sub	sp, #20
 800a050:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a052:	2300      	movs	r3, #0
 800a054:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a056:	4b12      	ldr	r3, [pc, #72]	; (800a0a0 <prvTaskExitError+0x54>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a05e:	d00a      	beq.n	800a076 <prvTaskExitError+0x2a>
	__asm volatile
 800a060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a064:	f383 8811 	msr	BASEPRI, r3
 800a068:	f3bf 8f6f 	isb	sy
 800a06c:	f3bf 8f4f 	dsb	sy
 800a070:	60fb      	str	r3, [r7, #12]
}
 800a072:	bf00      	nop
 800a074:	e7fe      	b.n	800a074 <prvTaskExitError+0x28>
	__asm volatile
 800a076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a07a:	f383 8811 	msr	BASEPRI, r3
 800a07e:	f3bf 8f6f 	isb	sy
 800a082:	f3bf 8f4f 	dsb	sy
 800a086:	60bb      	str	r3, [r7, #8]
}
 800a088:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a08a:	bf00      	nop
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d0fc      	beq.n	800a08c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a092:	bf00      	nop
 800a094:	bf00      	nop
 800a096:	3714      	adds	r7, #20
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr
 800a0a0:	24000018 	.word	0x24000018
	...

0800a0b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a0b0:	4b07      	ldr	r3, [pc, #28]	; (800a0d0 <pxCurrentTCBConst2>)
 800a0b2:	6819      	ldr	r1, [r3, #0]
 800a0b4:	6808      	ldr	r0, [r1, #0]
 800a0b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ba:	f380 8809 	msr	PSP, r0
 800a0be:	f3bf 8f6f 	isb	sy
 800a0c2:	f04f 0000 	mov.w	r0, #0
 800a0c6:	f380 8811 	msr	BASEPRI, r0
 800a0ca:	4770      	bx	lr
 800a0cc:	f3af 8000 	nop.w

0800a0d0 <pxCurrentTCBConst2>:
 800a0d0:	24004aa0 	.word	0x24004aa0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a0d4:	bf00      	nop
 800a0d6:	bf00      	nop

0800a0d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a0d8:	4808      	ldr	r0, [pc, #32]	; (800a0fc <prvPortStartFirstTask+0x24>)
 800a0da:	6800      	ldr	r0, [r0, #0]
 800a0dc:	6800      	ldr	r0, [r0, #0]
 800a0de:	f380 8808 	msr	MSP, r0
 800a0e2:	f04f 0000 	mov.w	r0, #0
 800a0e6:	f380 8814 	msr	CONTROL, r0
 800a0ea:	b662      	cpsie	i
 800a0ec:	b661      	cpsie	f
 800a0ee:	f3bf 8f4f 	dsb	sy
 800a0f2:	f3bf 8f6f 	isb	sy
 800a0f6:	df00      	svc	0
 800a0f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a0fa:	bf00      	nop
 800a0fc:	e000ed08 	.word	0xe000ed08

0800a100 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b086      	sub	sp, #24
 800a104:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a106:	4b46      	ldr	r3, [pc, #280]	; (800a220 <xPortStartScheduler+0x120>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	4a46      	ldr	r2, [pc, #280]	; (800a224 <xPortStartScheduler+0x124>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d10a      	bne.n	800a126 <xPortStartScheduler+0x26>
	__asm volatile
 800a110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a114:	f383 8811 	msr	BASEPRI, r3
 800a118:	f3bf 8f6f 	isb	sy
 800a11c:	f3bf 8f4f 	dsb	sy
 800a120:	613b      	str	r3, [r7, #16]
}
 800a122:	bf00      	nop
 800a124:	e7fe      	b.n	800a124 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a126:	4b3e      	ldr	r3, [pc, #248]	; (800a220 <xPortStartScheduler+0x120>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	4a3f      	ldr	r2, [pc, #252]	; (800a228 <xPortStartScheduler+0x128>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d10a      	bne.n	800a146 <xPortStartScheduler+0x46>
	__asm volatile
 800a130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a134:	f383 8811 	msr	BASEPRI, r3
 800a138:	f3bf 8f6f 	isb	sy
 800a13c:	f3bf 8f4f 	dsb	sy
 800a140:	60fb      	str	r3, [r7, #12]
}
 800a142:	bf00      	nop
 800a144:	e7fe      	b.n	800a144 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a146:	4b39      	ldr	r3, [pc, #228]	; (800a22c <xPortStartScheduler+0x12c>)
 800a148:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	b2db      	uxtb	r3, r3
 800a150:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	22ff      	movs	r2, #255	; 0xff
 800a156:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a160:	78fb      	ldrb	r3, [r7, #3]
 800a162:	b2db      	uxtb	r3, r3
 800a164:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a168:	b2da      	uxtb	r2, r3
 800a16a:	4b31      	ldr	r3, [pc, #196]	; (800a230 <xPortStartScheduler+0x130>)
 800a16c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a16e:	4b31      	ldr	r3, [pc, #196]	; (800a234 <xPortStartScheduler+0x134>)
 800a170:	2207      	movs	r2, #7
 800a172:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a174:	e009      	b.n	800a18a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a176:	4b2f      	ldr	r3, [pc, #188]	; (800a234 <xPortStartScheduler+0x134>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	3b01      	subs	r3, #1
 800a17c:	4a2d      	ldr	r2, [pc, #180]	; (800a234 <xPortStartScheduler+0x134>)
 800a17e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a180:	78fb      	ldrb	r3, [r7, #3]
 800a182:	b2db      	uxtb	r3, r3
 800a184:	005b      	lsls	r3, r3, #1
 800a186:	b2db      	uxtb	r3, r3
 800a188:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a18a:	78fb      	ldrb	r3, [r7, #3]
 800a18c:	b2db      	uxtb	r3, r3
 800a18e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a192:	2b80      	cmp	r3, #128	; 0x80
 800a194:	d0ef      	beq.n	800a176 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a196:	4b27      	ldr	r3, [pc, #156]	; (800a234 <xPortStartScheduler+0x134>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f1c3 0307 	rsb	r3, r3, #7
 800a19e:	2b04      	cmp	r3, #4
 800a1a0:	d00a      	beq.n	800a1b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a6:	f383 8811 	msr	BASEPRI, r3
 800a1aa:	f3bf 8f6f 	isb	sy
 800a1ae:	f3bf 8f4f 	dsb	sy
 800a1b2:	60bb      	str	r3, [r7, #8]
}
 800a1b4:	bf00      	nop
 800a1b6:	e7fe      	b.n	800a1b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a1b8:	4b1e      	ldr	r3, [pc, #120]	; (800a234 <xPortStartScheduler+0x134>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	021b      	lsls	r3, r3, #8
 800a1be:	4a1d      	ldr	r2, [pc, #116]	; (800a234 <xPortStartScheduler+0x134>)
 800a1c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a1c2:	4b1c      	ldr	r3, [pc, #112]	; (800a234 <xPortStartScheduler+0x134>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a1ca:	4a1a      	ldr	r2, [pc, #104]	; (800a234 <xPortStartScheduler+0x134>)
 800a1cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	b2da      	uxtb	r2, r3
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a1d6:	4b18      	ldr	r3, [pc, #96]	; (800a238 <xPortStartScheduler+0x138>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	4a17      	ldr	r2, [pc, #92]	; (800a238 <xPortStartScheduler+0x138>)
 800a1dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a1e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a1e2:	4b15      	ldr	r3, [pc, #84]	; (800a238 <xPortStartScheduler+0x138>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4a14      	ldr	r2, [pc, #80]	; (800a238 <xPortStartScheduler+0x138>)
 800a1e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a1ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a1ee:	f000 f8dd 	bl	800a3ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a1f2:	4b12      	ldr	r3, [pc, #72]	; (800a23c <xPortStartScheduler+0x13c>)
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a1f8:	f000 f8fc 	bl	800a3f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a1fc:	4b10      	ldr	r3, [pc, #64]	; (800a240 <xPortStartScheduler+0x140>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a0f      	ldr	r2, [pc, #60]	; (800a240 <xPortStartScheduler+0x140>)
 800a202:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a206:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a208:	f7ff ff66 	bl	800a0d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a20c:	f001 f9fa 	bl	800b604 <vTaskSwitchContext>
	prvTaskExitError();
 800a210:	f7ff ff1c 	bl	800a04c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a214:	2300      	movs	r3, #0
}
 800a216:	4618      	mov	r0, r3
 800a218:	3718      	adds	r7, #24
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	e000ed00 	.word	0xe000ed00
 800a224:	410fc271 	.word	0x410fc271
 800a228:	410fc270 	.word	0x410fc270
 800a22c:	e000e400 	.word	0xe000e400
 800a230:	24004a58 	.word	0x24004a58
 800a234:	24004a5c 	.word	0x24004a5c
 800a238:	e000ed20 	.word	0xe000ed20
 800a23c:	24000018 	.word	0x24000018
 800a240:	e000ef34 	.word	0xe000ef34

0800a244 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a244:	b480      	push	{r7}
 800a246:	b083      	sub	sp, #12
 800a248:	af00      	add	r7, sp, #0
	__asm volatile
 800a24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24e:	f383 8811 	msr	BASEPRI, r3
 800a252:	f3bf 8f6f 	isb	sy
 800a256:	f3bf 8f4f 	dsb	sy
 800a25a:	607b      	str	r3, [r7, #4]
}
 800a25c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a25e:	4b0f      	ldr	r3, [pc, #60]	; (800a29c <vPortEnterCritical+0x58>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	3301      	adds	r3, #1
 800a264:	4a0d      	ldr	r2, [pc, #52]	; (800a29c <vPortEnterCritical+0x58>)
 800a266:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a268:	4b0c      	ldr	r3, [pc, #48]	; (800a29c <vPortEnterCritical+0x58>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	2b01      	cmp	r3, #1
 800a26e:	d10f      	bne.n	800a290 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a270:	4b0b      	ldr	r3, [pc, #44]	; (800a2a0 <vPortEnterCritical+0x5c>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	b2db      	uxtb	r3, r3
 800a276:	2b00      	cmp	r3, #0
 800a278:	d00a      	beq.n	800a290 <vPortEnterCritical+0x4c>
	__asm volatile
 800a27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a27e:	f383 8811 	msr	BASEPRI, r3
 800a282:	f3bf 8f6f 	isb	sy
 800a286:	f3bf 8f4f 	dsb	sy
 800a28a:	603b      	str	r3, [r7, #0]
}
 800a28c:	bf00      	nop
 800a28e:	e7fe      	b.n	800a28e <vPortEnterCritical+0x4a>
	}
}
 800a290:	bf00      	nop
 800a292:	370c      	adds	r7, #12
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr
 800a29c:	24000018 	.word	0x24000018
 800a2a0:	e000ed04 	.word	0xe000ed04

0800a2a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b083      	sub	sp, #12
 800a2a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a2aa:	4b12      	ldr	r3, [pc, #72]	; (800a2f4 <vPortExitCritical+0x50>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d10a      	bne.n	800a2c8 <vPortExitCritical+0x24>
	__asm volatile
 800a2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b6:	f383 8811 	msr	BASEPRI, r3
 800a2ba:	f3bf 8f6f 	isb	sy
 800a2be:	f3bf 8f4f 	dsb	sy
 800a2c2:	607b      	str	r3, [r7, #4]
}
 800a2c4:	bf00      	nop
 800a2c6:	e7fe      	b.n	800a2c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a2c8:	4b0a      	ldr	r3, [pc, #40]	; (800a2f4 <vPortExitCritical+0x50>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	3b01      	subs	r3, #1
 800a2ce:	4a09      	ldr	r2, [pc, #36]	; (800a2f4 <vPortExitCritical+0x50>)
 800a2d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a2d2:	4b08      	ldr	r3, [pc, #32]	; (800a2f4 <vPortExitCritical+0x50>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d105      	bne.n	800a2e6 <vPortExitCritical+0x42>
 800a2da:	2300      	movs	r3, #0
 800a2dc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a2e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a2e6:	bf00      	nop
 800a2e8:	370c      	adds	r7, #12
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr
 800a2f2:	bf00      	nop
 800a2f4:	24000018 	.word	0x24000018
	...

0800a300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a300:	f3ef 8009 	mrs	r0, PSP
 800a304:	f3bf 8f6f 	isb	sy
 800a308:	4b15      	ldr	r3, [pc, #84]	; (800a360 <pxCurrentTCBConst>)
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	f01e 0f10 	tst.w	lr, #16
 800a310:	bf08      	it	eq
 800a312:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a316:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a31a:	6010      	str	r0, [r2, #0]
 800a31c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a320:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a324:	f380 8811 	msr	BASEPRI, r0
 800a328:	f3bf 8f4f 	dsb	sy
 800a32c:	f3bf 8f6f 	isb	sy
 800a330:	f001 f968 	bl	800b604 <vTaskSwitchContext>
 800a334:	f04f 0000 	mov.w	r0, #0
 800a338:	f380 8811 	msr	BASEPRI, r0
 800a33c:	bc09      	pop	{r0, r3}
 800a33e:	6819      	ldr	r1, [r3, #0]
 800a340:	6808      	ldr	r0, [r1, #0]
 800a342:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a346:	f01e 0f10 	tst.w	lr, #16
 800a34a:	bf08      	it	eq
 800a34c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a350:	f380 8809 	msr	PSP, r0
 800a354:	f3bf 8f6f 	isb	sy
 800a358:	4770      	bx	lr
 800a35a:	bf00      	nop
 800a35c:	f3af 8000 	nop.w

0800a360 <pxCurrentTCBConst>:
 800a360:	24004aa0 	.word	0x24004aa0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a364:	bf00      	nop
 800a366:	bf00      	nop

0800a368 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b082      	sub	sp, #8
 800a36c:	af00      	add	r7, sp, #0
	__asm volatile
 800a36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a372:	f383 8811 	msr	BASEPRI, r3
 800a376:	f3bf 8f6f 	isb	sy
 800a37a:	f3bf 8f4f 	dsb	sy
 800a37e:	607b      	str	r3, [r7, #4]
}
 800a380:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a382:	f001 f885 	bl	800b490 <xTaskIncrementTick>
 800a386:	4603      	mov	r3, r0
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d003      	beq.n	800a394 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a38c:	4b06      	ldr	r3, [pc, #24]	; (800a3a8 <xPortSysTickHandler+0x40>)
 800a38e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a392:	601a      	str	r2, [r3, #0]
 800a394:	2300      	movs	r3, #0
 800a396:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	f383 8811 	msr	BASEPRI, r3
}
 800a39e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a3a0:	bf00      	nop
 800a3a2:	3708      	adds	r7, #8
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}
 800a3a8:	e000ed04 	.word	0xe000ed04

0800a3ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a3b0:	4b0b      	ldr	r3, [pc, #44]	; (800a3e0 <vPortSetupTimerInterrupt+0x34>)
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a3b6:	4b0b      	ldr	r3, [pc, #44]	; (800a3e4 <vPortSetupTimerInterrupt+0x38>)
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a3bc:	4b0a      	ldr	r3, [pc, #40]	; (800a3e8 <vPortSetupTimerInterrupt+0x3c>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a0a      	ldr	r2, [pc, #40]	; (800a3ec <vPortSetupTimerInterrupt+0x40>)
 800a3c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a3c6:	099b      	lsrs	r3, r3, #6
 800a3c8:	4a09      	ldr	r2, [pc, #36]	; (800a3f0 <vPortSetupTimerInterrupt+0x44>)
 800a3ca:	3b01      	subs	r3, #1
 800a3cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a3ce:	4b04      	ldr	r3, [pc, #16]	; (800a3e0 <vPortSetupTimerInterrupt+0x34>)
 800a3d0:	2207      	movs	r2, #7
 800a3d2:	601a      	str	r2, [r3, #0]
}
 800a3d4:	bf00      	nop
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr
 800a3de:	bf00      	nop
 800a3e0:	e000e010 	.word	0xe000e010
 800a3e4:	e000e018 	.word	0xe000e018
 800a3e8:	24000000 	.word	0x24000000
 800a3ec:	10624dd3 	.word	0x10624dd3
 800a3f0:	e000e014 	.word	0xe000e014

0800a3f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a3f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a404 <vPortEnableVFP+0x10>
 800a3f8:	6801      	ldr	r1, [r0, #0]
 800a3fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a3fe:	6001      	str	r1, [r0, #0]
 800a400:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a402:	bf00      	nop
 800a404:	e000ed88 	.word	0xe000ed88

0800a408 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a408:	b480      	push	{r7}
 800a40a:	b085      	sub	sp, #20
 800a40c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a40e:	f3ef 8305 	mrs	r3, IPSR
 800a412:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2b0f      	cmp	r3, #15
 800a418:	d914      	bls.n	800a444 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a41a:	4a17      	ldr	r2, [pc, #92]	; (800a478 <vPortValidateInterruptPriority+0x70>)
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	4413      	add	r3, r2
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a424:	4b15      	ldr	r3, [pc, #84]	; (800a47c <vPortValidateInterruptPriority+0x74>)
 800a426:	781b      	ldrb	r3, [r3, #0]
 800a428:	7afa      	ldrb	r2, [r7, #11]
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d20a      	bcs.n	800a444 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a432:	f383 8811 	msr	BASEPRI, r3
 800a436:	f3bf 8f6f 	isb	sy
 800a43a:	f3bf 8f4f 	dsb	sy
 800a43e:	607b      	str	r3, [r7, #4]
}
 800a440:	bf00      	nop
 800a442:	e7fe      	b.n	800a442 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a444:	4b0e      	ldr	r3, [pc, #56]	; (800a480 <vPortValidateInterruptPriority+0x78>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a44c:	4b0d      	ldr	r3, [pc, #52]	; (800a484 <vPortValidateInterruptPriority+0x7c>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	429a      	cmp	r2, r3
 800a452:	d90a      	bls.n	800a46a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a454:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a458:	f383 8811 	msr	BASEPRI, r3
 800a45c:	f3bf 8f6f 	isb	sy
 800a460:	f3bf 8f4f 	dsb	sy
 800a464:	603b      	str	r3, [r7, #0]
}
 800a466:	bf00      	nop
 800a468:	e7fe      	b.n	800a468 <vPortValidateInterruptPriority+0x60>
	}
 800a46a:	bf00      	nop
 800a46c:	3714      	adds	r7, #20
 800a46e:	46bd      	mov	sp, r7
 800a470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a474:	4770      	bx	lr
 800a476:	bf00      	nop
 800a478:	e000e3f0 	.word	0xe000e3f0
 800a47c:	24004a58 	.word	0x24004a58
 800a480:	e000ed0c 	.word	0xe000ed0c
 800a484:	24004a5c 	.word	0x24004a5c

0800a488 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d10a      	bne.n	800a4b2 <xQueueGenericReset+0x2a>
	__asm volatile
 800a49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a0:	f383 8811 	msr	BASEPRI, r3
 800a4a4:	f3bf 8f6f 	isb	sy
 800a4a8:	f3bf 8f4f 	dsb	sy
 800a4ac:	60bb      	str	r3, [r7, #8]
}
 800a4ae:	bf00      	nop
 800a4b0:	e7fe      	b.n	800a4b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a4b2:	f7ff fec7 	bl	800a244 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4be:	68f9      	ldr	r1, [r7, #12]
 800a4c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a4c2:	fb01 f303 	mul.w	r3, r1, r3
 800a4c6:	441a      	add	r2, r3
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681a      	ldr	r2, [r3, #0]
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681a      	ldr	r2, [r3, #0]
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4e2:	3b01      	subs	r3, #1
 800a4e4:	68f9      	ldr	r1, [r7, #12]
 800a4e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a4e8:	fb01 f303 	mul.w	r3, r1, r3
 800a4ec:	441a      	add	r2, r3
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	22ff      	movs	r2, #255	; 0xff
 800a4f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	22ff      	movs	r2, #255	; 0xff
 800a4fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d114      	bne.n	800a532 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	691b      	ldr	r3, [r3, #16]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d01a      	beq.n	800a546 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	3310      	adds	r3, #16
 800a514:	4618      	mov	r0, r3
 800a516:	f001 f929 	bl	800b76c <xTaskRemoveFromEventList>
 800a51a:	4603      	mov	r3, r0
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d012      	beq.n	800a546 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a520:	4b0c      	ldr	r3, [pc, #48]	; (800a554 <xQueueGenericReset+0xcc>)
 800a522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a526:	601a      	str	r2, [r3, #0]
 800a528:	f3bf 8f4f 	dsb	sy
 800a52c:	f3bf 8f6f 	isb	sy
 800a530:	e009      	b.n	800a546 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	3310      	adds	r3, #16
 800a536:	4618      	mov	r0, r3
 800a538:	f7ff fca0 	bl	8009e7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	3324      	adds	r3, #36	; 0x24
 800a540:	4618      	mov	r0, r3
 800a542:	f7ff fc9b 	bl	8009e7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a546:	f7ff fead 	bl	800a2a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a54a:	2301      	movs	r3, #1
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3710      	adds	r7, #16
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}
 800a554:	e000ed04 	.word	0xe000ed04

0800a558 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b08e      	sub	sp, #56	; 0x38
 800a55c:	af02      	add	r7, sp, #8
 800a55e:	60f8      	str	r0, [r7, #12]
 800a560:	60b9      	str	r1, [r7, #8]
 800a562:	607a      	str	r2, [r7, #4]
 800a564:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d10a      	bne.n	800a582 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a570:	f383 8811 	msr	BASEPRI, r3
 800a574:	f3bf 8f6f 	isb	sy
 800a578:	f3bf 8f4f 	dsb	sy
 800a57c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a57e:	bf00      	nop
 800a580:	e7fe      	b.n	800a580 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d10a      	bne.n	800a59e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a58c:	f383 8811 	msr	BASEPRI, r3
 800a590:	f3bf 8f6f 	isb	sy
 800a594:	f3bf 8f4f 	dsb	sy
 800a598:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a59a:	bf00      	nop
 800a59c:	e7fe      	b.n	800a59c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d002      	beq.n	800a5aa <xQueueGenericCreateStatic+0x52>
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d001      	beq.n	800a5ae <xQueueGenericCreateStatic+0x56>
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	e000      	b.n	800a5b0 <xQueueGenericCreateStatic+0x58>
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d10a      	bne.n	800a5ca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b8:	f383 8811 	msr	BASEPRI, r3
 800a5bc:	f3bf 8f6f 	isb	sy
 800a5c0:	f3bf 8f4f 	dsb	sy
 800a5c4:	623b      	str	r3, [r7, #32]
}
 800a5c6:	bf00      	nop
 800a5c8:	e7fe      	b.n	800a5c8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d102      	bne.n	800a5d6 <xQueueGenericCreateStatic+0x7e>
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d101      	bne.n	800a5da <xQueueGenericCreateStatic+0x82>
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	e000      	b.n	800a5dc <xQueueGenericCreateStatic+0x84>
 800a5da:	2300      	movs	r3, #0
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d10a      	bne.n	800a5f6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e4:	f383 8811 	msr	BASEPRI, r3
 800a5e8:	f3bf 8f6f 	isb	sy
 800a5ec:	f3bf 8f4f 	dsb	sy
 800a5f0:	61fb      	str	r3, [r7, #28]
}
 800a5f2:	bf00      	nop
 800a5f4:	e7fe      	b.n	800a5f4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a5f6:	2350      	movs	r3, #80	; 0x50
 800a5f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	2b50      	cmp	r3, #80	; 0x50
 800a5fe:	d00a      	beq.n	800a616 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a604:	f383 8811 	msr	BASEPRI, r3
 800a608:	f3bf 8f6f 	isb	sy
 800a60c:	f3bf 8f4f 	dsb	sy
 800a610:	61bb      	str	r3, [r7, #24]
}
 800a612:	bf00      	nop
 800a614:	e7fe      	b.n	800a614 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a616:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d00d      	beq.n	800a63e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a624:	2201      	movs	r2, #1
 800a626:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a62a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a630:	9300      	str	r3, [sp, #0]
 800a632:	4613      	mov	r3, r2
 800a634:	687a      	ldr	r2, [r7, #4]
 800a636:	68b9      	ldr	r1, [r7, #8]
 800a638:	68f8      	ldr	r0, [r7, #12]
 800a63a:	f000 f805 	bl	800a648 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a640:	4618      	mov	r0, r3
 800a642:	3730      	adds	r7, #48	; 0x30
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}

0800a648 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b084      	sub	sp, #16
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	60f8      	str	r0, [r7, #12]
 800a650:	60b9      	str	r1, [r7, #8]
 800a652:	607a      	str	r2, [r7, #4]
 800a654:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d103      	bne.n	800a664 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a65c:	69bb      	ldr	r3, [r7, #24]
 800a65e:	69ba      	ldr	r2, [r7, #24]
 800a660:	601a      	str	r2, [r3, #0]
 800a662:	e002      	b.n	800a66a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a664:	69bb      	ldr	r3, [r7, #24]
 800a666:	687a      	ldr	r2, [r7, #4]
 800a668:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a66a:	69bb      	ldr	r3, [r7, #24]
 800a66c:	68fa      	ldr	r2, [r7, #12]
 800a66e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a670:	69bb      	ldr	r3, [r7, #24]
 800a672:	68ba      	ldr	r2, [r7, #8]
 800a674:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a676:	2101      	movs	r1, #1
 800a678:	69b8      	ldr	r0, [r7, #24]
 800a67a:	f7ff ff05 	bl	800a488 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a67e:	69bb      	ldr	r3, [r7, #24]
 800a680:	78fa      	ldrb	r2, [r7, #3]
 800a682:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a686:	bf00      	nop
 800a688:	3710      	adds	r7, #16
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}
	...

0800a690 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b08e      	sub	sp, #56	; 0x38
 800a694:	af00      	add	r7, sp, #0
 800a696:	60f8      	str	r0, [r7, #12]
 800a698:	60b9      	str	r1, [r7, #8]
 800a69a:	607a      	str	r2, [r7, #4]
 800a69c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d10a      	bne.n	800a6c2 <xQueueGenericSend+0x32>
	__asm volatile
 800a6ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b0:	f383 8811 	msr	BASEPRI, r3
 800a6b4:	f3bf 8f6f 	isb	sy
 800a6b8:	f3bf 8f4f 	dsb	sy
 800a6bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a6be:	bf00      	nop
 800a6c0:	e7fe      	b.n	800a6c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d103      	bne.n	800a6d0 <xQueueGenericSend+0x40>
 800a6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d101      	bne.n	800a6d4 <xQueueGenericSend+0x44>
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	e000      	b.n	800a6d6 <xQueueGenericSend+0x46>
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d10a      	bne.n	800a6f0 <xQueueGenericSend+0x60>
	__asm volatile
 800a6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6de:	f383 8811 	msr	BASEPRI, r3
 800a6e2:	f3bf 8f6f 	isb	sy
 800a6e6:	f3bf 8f4f 	dsb	sy
 800a6ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a6ec:	bf00      	nop
 800a6ee:	e7fe      	b.n	800a6ee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	2b02      	cmp	r3, #2
 800a6f4:	d103      	bne.n	800a6fe <xQueueGenericSend+0x6e>
 800a6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d101      	bne.n	800a702 <xQueueGenericSend+0x72>
 800a6fe:	2301      	movs	r3, #1
 800a700:	e000      	b.n	800a704 <xQueueGenericSend+0x74>
 800a702:	2300      	movs	r3, #0
 800a704:	2b00      	cmp	r3, #0
 800a706:	d10a      	bne.n	800a71e <xQueueGenericSend+0x8e>
	__asm volatile
 800a708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a70c:	f383 8811 	msr	BASEPRI, r3
 800a710:	f3bf 8f6f 	isb	sy
 800a714:	f3bf 8f4f 	dsb	sy
 800a718:	623b      	str	r3, [r7, #32]
}
 800a71a:	bf00      	nop
 800a71c:	e7fe      	b.n	800a71c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a71e:	f001 f9e7 	bl	800baf0 <xTaskGetSchedulerState>
 800a722:	4603      	mov	r3, r0
 800a724:	2b00      	cmp	r3, #0
 800a726:	d102      	bne.n	800a72e <xQueueGenericSend+0x9e>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d101      	bne.n	800a732 <xQueueGenericSend+0xa2>
 800a72e:	2301      	movs	r3, #1
 800a730:	e000      	b.n	800a734 <xQueueGenericSend+0xa4>
 800a732:	2300      	movs	r3, #0
 800a734:	2b00      	cmp	r3, #0
 800a736:	d10a      	bne.n	800a74e <xQueueGenericSend+0xbe>
	__asm volatile
 800a738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a73c:	f383 8811 	msr	BASEPRI, r3
 800a740:	f3bf 8f6f 	isb	sy
 800a744:	f3bf 8f4f 	dsb	sy
 800a748:	61fb      	str	r3, [r7, #28]
}
 800a74a:	bf00      	nop
 800a74c:	e7fe      	b.n	800a74c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a74e:	f7ff fd79 	bl	800a244 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a754:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d302      	bcc.n	800a764 <xQueueGenericSend+0xd4>
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	2b02      	cmp	r3, #2
 800a762:	d129      	bne.n	800a7b8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a764:	683a      	ldr	r2, [r7, #0]
 800a766:	68b9      	ldr	r1, [r7, #8]
 800a768:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a76a:	f000 fa0b 	bl	800ab84 <prvCopyDataToQueue>
 800a76e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a774:	2b00      	cmp	r3, #0
 800a776:	d010      	beq.n	800a79a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a77a:	3324      	adds	r3, #36	; 0x24
 800a77c:	4618      	mov	r0, r3
 800a77e:	f000 fff5 	bl	800b76c <xTaskRemoveFromEventList>
 800a782:	4603      	mov	r3, r0
 800a784:	2b00      	cmp	r3, #0
 800a786:	d013      	beq.n	800a7b0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a788:	4b3f      	ldr	r3, [pc, #252]	; (800a888 <xQueueGenericSend+0x1f8>)
 800a78a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a78e:	601a      	str	r2, [r3, #0]
 800a790:	f3bf 8f4f 	dsb	sy
 800a794:	f3bf 8f6f 	isb	sy
 800a798:	e00a      	b.n	800a7b0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d007      	beq.n	800a7b0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a7a0:	4b39      	ldr	r3, [pc, #228]	; (800a888 <xQueueGenericSend+0x1f8>)
 800a7a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7a6:	601a      	str	r2, [r3, #0]
 800a7a8:	f3bf 8f4f 	dsb	sy
 800a7ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a7b0:	f7ff fd78 	bl	800a2a4 <vPortExitCritical>
				return pdPASS;
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	e063      	b.n	800a880 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d103      	bne.n	800a7c6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a7be:	f7ff fd71 	bl	800a2a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	e05c      	b.n	800a880 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a7c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d106      	bne.n	800a7da <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a7cc:	f107 0314 	add.w	r3, r7, #20
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f001 f82f 	bl	800b834 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a7da:	f7ff fd63 	bl	800a2a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a7de:	f000 fd9b 	bl	800b318 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a7e2:	f7ff fd2f 	bl	800a244 <vPortEnterCritical>
 800a7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a7ec:	b25b      	sxtb	r3, r3
 800a7ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7f2:	d103      	bne.n	800a7fc <xQueueGenericSend+0x16c>
 800a7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a802:	b25b      	sxtb	r3, r3
 800a804:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a808:	d103      	bne.n	800a812 <xQueueGenericSend+0x182>
 800a80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a80c:	2200      	movs	r2, #0
 800a80e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a812:	f7ff fd47 	bl	800a2a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a816:	1d3a      	adds	r2, r7, #4
 800a818:	f107 0314 	add.w	r3, r7, #20
 800a81c:	4611      	mov	r1, r2
 800a81e:	4618      	mov	r0, r3
 800a820:	f001 f81e 	bl	800b860 <xTaskCheckForTimeOut>
 800a824:	4603      	mov	r3, r0
 800a826:	2b00      	cmp	r3, #0
 800a828:	d124      	bne.n	800a874 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a82a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a82c:	f000 faa2 	bl	800ad74 <prvIsQueueFull>
 800a830:	4603      	mov	r3, r0
 800a832:	2b00      	cmp	r3, #0
 800a834:	d018      	beq.n	800a868 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a838:	3310      	adds	r3, #16
 800a83a:	687a      	ldr	r2, [r7, #4]
 800a83c:	4611      	mov	r1, r2
 800a83e:	4618      	mov	r0, r3
 800a840:	f000 ff44 	bl	800b6cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a844:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a846:	f000 fa2d 	bl	800aca4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a84a:	f000 fd73 	bl	800b334 <xTaskResumeAll>
 800a84e:	4603      	mov	r3, r0
 800a850:	2b00      	cmp	r3, #0
 800a852:	f47f af7c 	bne.w	800a74e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a856:	4b0c      	ldr	r3, [pc, #48]	; (800a888 <xQueueGenericSend+0x1f8>)
 800a858:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a85c:	601a      	str	r2, [r3, #0]
 800a85e:	f3bf 8f4f 	dsb	sy
 800a862:	f3bf 8f6f 	isb	sy
 800a866:	e772      	b.n	800a74e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a868:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a86a:	f000 fa1b 	bl	800aca4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a86e:	f000 fd61 	bl	800b334 <xTaskResumeAll>
 800a872:	e76c      	b.n	800a74e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a874:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a876:	f000 fa15 	bl	800aca4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a87a:	f000 fd5b 	bl	800b334 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a87e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a880:	4618      	mov	r0, r3
 800a882:	3738      	adds	r7, #56	; 0x38
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}
 800a888:	e000ed04 	.word	0xe000ed04

0800a88c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b090      	sub	sp, #64	; 0x40
 800a890:	af00      	add	r7, sp, #0
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	60b9      	str	r1, [r7, #8]
 800a896:	607a      	str	r2, [r7, #4]
 800a898:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d10a      	bne.n	800a8ba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a8:	f383 8811 	msr	BASEPRI, r3
 800a8ac:	f3bf 8f6f 	isb	sy
 800a8b0:	f3bf 8f4f 	dsb	sy
 800a8b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a8b6:	bf00      	nop
 800a8b8:	e7fe      	b.n	800a8b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d103      	bne.n	800a8c8 <xQueueGenericSendFromISR+0x3c>
 800a8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d101      	bne.n	800a8cc <xQueueGenericSendFromISR+0x40>
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	e000      	b.n	800a8ce <xQueueGenericSendFromISR+0x42>
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d10a      	bne.n	800a8e8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d6:	f383 8811 	msr	BASEPRI, r3
 800a8da:	f3bf 8f6f 	isb	sy
 800a8de:	f3bf 8f4f 	dsb	sy
 800a8e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a8e4:	bf00      	nop
 800a8e6:	e7fe      	b.n	800a8e6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	2b02      	cmp	r3, #2
 800a8ec:	d103      	bne.n	800a8f6 <xQueueGenericSendFromISR+0x6a>
 800a8ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8f2:	2b01      	cmp	r3, #1
 800a8f4:	d101      	bne.n	800a8fa <xQueueGenericSendFromISR+0x6e>
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	e000      	b.n	800a8fc <xQueueGenericSendFromISR+0x70>
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d10a      	bne.n	800a916 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a904:	f383 8811 	msr	BASEPRI, r3
 800a908:	f3bf 8f6f 	isb	sy
 800a90c:	f3bf 8f4f 	dsb	sy
 800a910:	623b      	str	r3, [r7, #32]
}
 800a912:	bf00      	nop
 800a914:	e7fe      	b.n	800a914 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a916:	f7ff fd77 	bl	800a408 <vPortValidateInterruptPriority>
	__asm volatile
 800a91a:	f3ef 8211 	mrs	r2, BASEPRI
 800a91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a922:	f383 8811 	msr	BASEPRI, r3
 800a926:	f3bf 8f6f 	isb	sy
 800a92a:	f3bf 8f4f 	dsb	sy
 800a92e:	61fa      	str	r2, [r7, #28]
 800a930:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800a932:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a934:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a938:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a93c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a93e:	429a      	cmp	r2, r3
 800a940:	d302      	bcc.n	800a948 <xQueueGenericSendFromISR+0xbc>
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	2b02      	cmp	r3, #2
 800a946:	d12f      	bne.n	800a9a8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a94a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a94e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a956:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a958:	683a      	ldr	r2, [r7, #0]
 800a95a:	68b9      	ldr	r1, [r7, #8]
 800a95c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a95e:	f000 f911 	bl	800ab84 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a962:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a96a:	d112      	bne.n	800a992 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a96e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a970:	2b00      	cmp	r3, #0
 800a972:	d016      	beq.n	800a9a2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a976:	3324      	adds	r3, #36	; 0x24
 800a978:	4618      	mov	r0, r3
 800a97a:	f000 fef7 	bl	800b76c <xTaskRemoveFromEventList>
 800a97e:	4603      	mov	r3, r0
 800a980:	2b00      	cmp	r3, #0
 800a982:	d00e      	beq.n	800a9a2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d00b      	beq.n	800a9a2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2201      	movs	r2, #1
 800a98e:	601a      	str	r2, [r3, #0]
 800a990:	e007      	b.n	800a9a2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a992:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a996:	3301      	adds	r3, #1
 800a998:	b2db      	uxtb	r3, r3
 800a99a:	b25a      	sxtb	r2, r3
 800a99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a99e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a9a6:	e001      	b.n	800a9ac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9ae:	617b      	str	r3, [r7, #20]
	__asm volatile
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	f383 8811 	msr	BASEPRI, r3
}
 800a9b6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a9b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	3740      	adds	r7, #64	; 0x40
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}
	...

0800a9c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b08c      	sub	sp, #48	; 0x30
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	60f8      	str	r0, [r7, #12]
 800a9cc:	60b9      	str	r1, [r7, #8]
 800a9ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d10a      	bne.n	800a9f4 <xQueueReceive+0x30>
	__asm volatile
 800a9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e2:	f383 8811 	msr	BASEPRI, r3
 800a9e6:	f3bf 8f6f 	isb	sy
 800a9ea:	f3bf 8f4f 	dsb	sy
 800a9ee:	623b      	str	r3, [r7, #32]
}
 800a9f0:	bf00      	nop
 800a9f2:	e7fe      	b.n	800a9f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d103      	bne.n	800aa02 <xQueueReceive+0x3e>
 800a9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d101      	bne.n	800aa06 <xQueueReceive+0x42>
 800aa02:	2301      	movs	r3, #1
 800aa04:	e000      	b.n	800aa08 <xQueueReceive+0x44>
 800aa06:	2300      	movs	r3, #0
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d10a      	bne.n	800aa22 <xQueueReceive+0x5e>
	__asm volatile
 800aa0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa10:	f383 8811 	msr	BASEPRI, r3
 800aa14:	f3bf 8f6f 	isb	sy
 800aa18:	f3bf 8f4f 	dsb	sy
 800aa1c:	61fb      	str	r3, [r7, #28]
}
 800aa1e:	bf00      	nop
 800aa20:	e7fe      	b.n	800aa20 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aa22:	f001 f865 	bl	800baf0 <xTaskGetSchedulerState>
 800aa26:	4603      	mov	r3, r0
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d102      	bne.n	800aa32 <xQueueReceive+0x6e>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d101      	bne.n	800aa36 <xQueueReceive+0x72>
 800aa32:	2301      	movs	r3, #1
 800aa34:	e000      	b.n	800aa38 <xQueueReceive+0x74>
 800aa36:	2300      	movs	r3, #0
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d10a      	bne.n	800aa52 <xQueueReceive+0x8e>
	__asm volatile
 800aa3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa40:	f383 8811 	msr	BASEPRI, r3
 800aa44:	f3bf 8f6f 	isb	sy
 800aa48:	f3bf 8f4f 	dsb	sy
 800aa4c:	61bb      	str	r3, [r7, #24]
}
 800aa4e:	bf00      	nop
 800aa50:	e7fe      	b.n	800aa50 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aa52:	f7ff fbf7 	bl	800a244 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa5a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d01f      	beq.n	800aaa2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aa62:	68b9      	ldr	r1, [r7, #8]
 800aa64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa66:	f000 f8f7 	bl	800ac58 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aa6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa6c:	1e5a      	subs	r2, r3, #1
 800aa6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa70:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa74:	691b      	ldr	r3, [r3, #16]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d00f      	beq.n	800aa9a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa7c:	3310      	adds	r3, #16
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f000 fe74 	bl	800b76c <xTaskRemoveFromEventList>
 800aa84:	4603      	mov	r3, r0
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d007      	beq.n	800aa9a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aa8a:	4b3d      	ldr	r3, [pc, #244]	; (800ab80 <xQueueReceive+0x1bc>)
 800aa8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa90:	601a      	str	r2, [r3, #0]
 800aa92:	f3bf 8f4f 	dsb	sy
 800aa96:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aa9a:	f7ff fc03 	bl	800a2a4 <vPortExitCritical>
				return pdPASS;
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	e069      	b.n	800ab76 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d103      	bne.n	800aab0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aaa8:	f7ff fbfc 	bl	800a2a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aaac:	2300      	movs	r3, #0
 800aaae:	e062      	b.n	800ab76 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d106      	bne.n	800aac4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aab6:	f107 0310 	add.w	r3, r7, #16
 800aaba:	4618      	mov	r0, r3
 800aabc:	f000 feba 	bl	800b834 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aac0:	2301      	movs	r3, #1
 800aac2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aac4:	f7ff fbee 	bl	800a2a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aac8:	f000 fc26 	bl	800b318 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aacc:	f7ff fbba 	bl	800a244 <vPortEnterCritical>
 800aad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aad6:	b25b      	sxtb	r3, r3
 800aad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aadc:	d103      	bne.n	800aae6 <xQueueReceive+0x122>
 800aade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae0:	2200      	movs	r2, #0
 800aae2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aaec:	b25b      	sxtb	r3, r3
 800aaee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaf2:	d103      	bne.n	800aafc <xQueueReceive+0x138>
 800aaf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aafc:	f7ff fbd2 	bl	800a2a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ab00:	1d3a      	adds	r2, r7, #4
 800ab02:	f107 0310 	add.w	r3, r7, #16
 800ab06:	4611      	mov	r1, r2
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f000 fea9 	bl	800b860 <xTaskCheckForTimeOut>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d123      	bne.n	800ab5c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab16:	f000 f917 	bl	800ad48 <prvIsQueueEmpty>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d017      	beq.n	800ab50 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ab20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab22:	3324      	adds	r3, #36	; 0x24
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	4611      	mov	r1, r2
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f000 fdcf 	bl	800b6cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ab2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab30:	f000 f8b8 	bl	800aca4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ab34:	f000 fbfe 	bl	800b334 <xTaskResumeAll>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d189      	bne.n	800aa52 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ab3e:	4b10      	ldr	r3, [pc, #64]	; (800ab80 <xQueueReceive+0x1bc>)
 800ab40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab44:	601a      	str	r2, [r3, #0]
 800ab46:	f3bf 8f4f 	dsb	sy
 800ab4a:	f3bf 8f6f 	isb	sy
 800ab4e:	e780      	b.n	800aa52 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ab50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab52:	f000 f8a7 	bl	800aca4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab56:	f000 fbed 	bl	800b334 <xTaskResumeAll>
 800ab5a:	e77a      	b.n	800aa52 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ab5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab5e:	f000 f8a1 	bl	800aca4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab62:	f000 fbe7 	bl	800b334 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab68:	f000 f8ee 	bl	800ad48 <prvIsQueueEmpty>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	f43f af6f 	beq.w	800aa52 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ab74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3730      	adds	r7, #48	; 0x30
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}
 800ab7e:	bf00      	nop
 800ab80:	e000ed04 	.word	0xe000ed04

0800ab84 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b086      	sub	sp, #24
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	60f8      	str	r0, [r7, #12]
 800ab8c:	60b9      	str	r1, [r7, #8]
 800ab8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ab90:	2300      	movs	r3, #0
 800ab92:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab98:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d10d      	bne.n	800abbe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d14d      	bne.n	800ac46 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	689b      	ldr	r3, [r3, #8]
 800abae:	4618      	mov	r0, r3
 800abb0:	f000 ffbc 	bl	800bb2c <xTaskPriorityDisinherit>
 800abb4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2200      	movs	r2, #0
 800abba:	609a      	str	r2, [r3, #8]
 800abbc:	e043      	b.n	800ac46 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d119      	bne.n	800abf8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	6858      	ldr	r0, [r3, #4]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abcc:	461a      	mov	r2, r3
 800abce:	68b9      	ldr	r1, [r7, #8]
 800abd0:	f001 fcdf 	bl	800c592 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	685a      	ldr	r2, [r3, #4]
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abdc:	441a      	add	r2, r3
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	685a      	ldr	r2, [r3, #4]
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	689b      	ldr	r3, [r3, #8]
 800abea:	429a      	cmp	r2, r3
 800abec:	d32b      	bcc.n	800ac46 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	681a      	ldr	r2, [r3, #0]
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	605a      	str	r2, [r3, #4]
 800abf6:	e026      	b.n	800ac46 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	68d8      	ldr	r0, [r3, #12]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac00:	461a      	mov	r2, r3
 800ac02:	68b9      	ldr	r1, [r7, #8]
 800ac04:	f001 fcc5 	bl	800c592 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	68da      	ldr	r2, [r3, #12]
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac10:	425b      	negs	r3, r3
 800ac12:	441a      	add	r2, r3
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	68da      	ldr	r2, [r3, #12]
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	429a      	cmp	r2, r3
 800ac22:	d207      	bcs.n	800ac34 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	689a      	ldr	r2, [r3, #8]
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac2c:	425b      	negs	r3, r3
 800ac2e:	441a      	add	r2, r3
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2b02      	cmp	r3, #2
 800ac38:	d105      	bne.n	800ac46 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d002      	beq.n	800ac46 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	3b01      	subs	r3, #1
 800ac44:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	1c5a      	adds	r2, r3, #1
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ac4e:	697b      	ldr	r3, [r7, #20]
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	3718      	adds	r7, #24
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}

0800ac58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b082      	sub	sp, #8
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d018      	beq.n	800ac9c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	68da      	ldr	r2, [r3, #12]
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac72:	441a      	add	r2, r3
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	68da      	ldr	r2, [r3, #12]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	689b      	ldr	r3, [r3, #8]
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d303      	bcc.n	800ac8c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681a      	ldr	r2, [r3, #0]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	68d9      	ldr	r1, [r3, #12]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac94:	461a      	mov	r2, r3
 800ac96:	6838      	ldr	r0, [r7, #0]
 800ac98:	f001 fc7b 	bl	800c592 <memcpy>
	}
}
 800ac9c:	bf00      	nop
 800ac9e:	3708      	adds	r7, #8
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b084      	sub	sp, #16
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800acac:	f7ff faca 	bl	800a244 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800acb6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800acb8:	e011      	b.n	800acde <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d012      	beq.n	800ace8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	3324      	adds	r3, #36	; 0x24
 800acc6:	4618      	mov	r0, r3
 800acc8:	f000 fd50 	bl	800b76c <xTaskRemoveFromEventList>
 800accc:	4603      	mov	r3, r0
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d001      	beq.n	800acd6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800acd2:	f000 fe27 	bl	800b924 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800acd6:	7bfb      	ldrb	r3, [r7, #15]
 800acd8:	3b01      	subs	r3, #1
 800acda:	b2db      	uxtb	r3, r3
 800acdc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800acde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	dce9      	bgt.n	800acba <prvUnlockQueue+0x16>
 800ace6:	e000      	b.n	800acea <prvUnlockQueue+0x46>
					break;
 800ace8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	22ff      	movs	r2, #255	; 0xff
 800acee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800acf2:	f7ff fad7 	bl	800a2a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800acf6:	f7ff faa5 	bl	800a244 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ad02:	e011      	b.n	800ad28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	691b      	ldr	r3, [r3, #16]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d012      	beq.n	800ad32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	3310      	adds	r3, #16
 800ad10:	4618      	mov	r0, r3
 800ad12:	f000 fd2b 	bl	800b76c <xTaskRemoveFromEventList>
 800ad16:	4603      	mov	r3, r0
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d001      	beq.n	800ad20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ad1c:	f000 fe02 	bl	800b924 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ad20:	7bbb      	ldrb	r3, [r7, #14]
 800ad22:	3b01      	subs	r3, #1
 800ad24:	b2db      	uxtb	r3, r3
 800ad26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ad28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	dce9      	bgt.n	800ad04 <prvUnlockQueue+0x60>
 800ad30:	e000      	b.n	800ad34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ad32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	22ff      	movs	r2, #255	; 0xff
 800ad38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ad3c:	f7ff fab2 	bl	800a2a4 <vPortExitCritical>
}
 800ad40:	bf00      	nop
 800ad42:	3710      	adds	r7, #16
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}

0800ad48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b084      	sub	sp, #16
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ad50:	f7ff fa78 	bl	800a244 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d102      	bne.n	800ad62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	60fb      	str	r3, [r7, #12]
 800ad60:	e001      	b.n	800ad66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ad62:	2300      	movs	r3, #0
 800ad64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad66:	f7ff fa9d 	bl	800a2a4 <vPortExitCritical>

	return xReturn;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3710      	adds	r7, #16
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b084      	sub	sp, #16
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ad7c:	f7ff fa62 	bl	800a244 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	d102      	bne.n	800ad92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	60fb      	str	r3, [r7, #12]
 800ad90:	e001      	b.n	800ad96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ad92:	2300      	movs	r3, #0
 800ad94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad96:	f7ff fa85 	bl	800a2a4 <vPortExitCritical>

	return xReturn;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3710      	adds	r7, #16
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ada4:	b480      	push	{r7}
 800ada6:	b085      	sub	sp, #20
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800adae:	2300      	movs	r3, #0
 800adb0:	60fb      	str	r3, [r7, #12]
 800adb2:	e014      	b.n	800adde <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800adb4:	4a0f      	ldr	r2, [pc, #60]	; (800adf4 <vQueueAddToRegistry+0x50>)
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d10b      	bne.n	800add8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800adc0:	490c      	ldr	r1, [pc, #48]	; (800adf4 <vQueueAddToRegistry+0x50>)
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	683a      	ldr	r2, [r7, #0]
 800adc6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800adca:	4a0a      	ldr	r2, [pc, #40]	; (800adf4 <vQueueAddToRegistry+0x50>)
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	00db      	lsls	r3, r3, #3
 800add0:	4413      	add	r3, r2
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800add6:	e006      	b.n	800ade6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	3301      	adds	r3, #1
 800addc:	60fb      	str	r3, [r7, #12]
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	2b07      	cmp	r3, #7
 800ade2:	d9e7      	bls.n	800adb4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ade4:	bf00      	nop
 800ade6:	bf00      	nop
 800ade8:	3714      	adds	r7, #20
 800adea:	46bd      	mov	sp, r7
 800adec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf0:	4770      	bx	lr
 800adf2:	bf00      	nop
 800adf4:	24004a60 	.word	0x24004a60

0800adf8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b086      	sub	sp, #24
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	60f8      	str	r0, [r7, #12]
 800ae00:	60b9      	str	r1, [r7, #8]
 800ae02:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ae08:	f7ff fa1c 	bl	800a244 <vPortEnterCritical>
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae12:	b25b      	sxtb	r3, r3
 800ae14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae18:	d103      	bne.n	800ae22 <vQueueWaitForMessageRestricted+0x2a>
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae28:	b25b      	sxtb	r3, r3
 800ae2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae2e:	d103      	bne.n	800ae38 <vQueueWaitForMessageRestricted+0x40>
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	2200      	movs	r2, #0
 800ae34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae38:	f7ff fa34 	bl	800a2a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d106      	bne.n	800ae52 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	3324      	adds	r3, #36	; 0x24
 800ae48:	687a      	ldr	r2, [r7, #4]
 800ae4a:	68b9      	ldr	r1, [r7, #8]
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f000 fc61 	bl	800b714 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ae52:	6978      	ldr	r0, [r7, #20]
 800ae54:	f7ff ff26 	bl	800aca4 <prvUnlockQueue>
	}
 800ae58:	bf00      	nop
 800ae5a:	3718      	adds	r7, #24
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}

0800ae60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b08e      	sub	sp, #56	; 0x38
 800ae64:	af04      	add	r7, sp, #16
 800ae66:	60f8      	str	r0, [r7, #12]
 800ae68:	60b9      	str	r1, [r7, #8]
 800ae6a:	607a      	str	r2, [r7, #4]
 800ae6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ae6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d10a      	bne.n	800ae8a <xTaskCreateStatic+0x2a>
	__asm volatile
 800ae74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae78:	f383 8811 	msr	BASEPRI, r3
 800ae7c:	f3bf 8f6f 	isb	sy
 800ae80:	f3bf 8f4f 	dsb	sy
 800ae84:	623b      	str	r3, [r7, #32]
}
 800ae86:	bf00      	nop
 800ae88:	e7fe      	b.n	800ae88 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ae8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d10a      	bne.n	800aea6 <xTaskCreateStatic+0x46>
	__asm volatile
 800ae90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae94:	f383 8811 	msr	BASEPRI, r3
 800ae98:	f3bf 8f6f 	isb	sy
 800ae9c:	f3bf 8f4f 	dsb	sy
 800aea0:	61fb      	str	r3, [r7, #28]
}
 800aea2:	bf00      	nop
 800aea4:	e7fe      	b.n	800aea4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800aea6:	23bc      	movs	r3, #188	; 0xbc
 800aea8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	2bbc      	cmp	r3, #188	; 0xbc
 800aeae:	d00a      	beq.n	800aec6 <xTaskCreateStatic+0x66>
	__asm volatile
 800aeb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb4:	f383 8811 	msr	BASEPRI, r3
 800aeb8:	f3bf 8f6f 	isb	sy
 800aebc:	f3bf 8f4f 	dsb	sy
 800aec0:	61bb      	str	r3, [r7, #24]
}
 800aec2:	bf00      	nop
 800aec4:	e7fe      	b.n	800aec4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800aec6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800aec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d01e      	beq.n	800af0c <xTaskCreateStatic+0xac>
 800aece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d01b      	beq.n	800af0c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aed6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aedc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee0:	2202      	movs	r2, #2
 800aee2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aee6:	2300      	movs	r3, #0
 800aee8:	9303      	str	r3, [sp, #12]
 800aeea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeec:	9302      	str	r3, [sp, #8]
 800aeee:	f107 0314 	add.w	r3, r7, #20
 800aef2:	9301      	str	r3, [sp, #4]
 800aef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef6:	9300      	str	r3, [sp, #0]
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	687a      	ldr	r2, [r7, #4]
 800aefc:	68b9      	ldr	r1, [r7, #8]
 800aefe:	68f8      	ldr	r0, [r7, #12]
 800af00:	f000 f850 	bl	800afa4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800af04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800af06:	f000 f8f3 	bl	800b0f0 <prvAddNewTaskToReadyList>
 800af0a:	e001      	b.n	800af10 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800af0c:	2300      	movs	r3, #0
 800af0e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800af10:	697b      	ldr	r3, [r7, #20]
	}
 800af12:	4618      	mov	r0, r3
 800af14:	3728      	adds	r7, #40	; 0x28
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}

0800af1a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800af1a:	b580      	push	{r7, lr}
 800af1c:	b08c      	sub	sp, #48	; 0x30
 800af1e:	af04      	add	r7, sp, #16
 800af20:	60f8      	str	r0, [r7, #12]
 800af22:	60b9      	str	r1, [r7, #8]
 800af24:	603b      	str	r3, [r7, #0]
 800af26:	4613      	mov	r3, r2
 800af28:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800af2a:	88fb      	ldrh	r3, [r7, #6]
 800af2c:	009b      	lsls	r3, r3, #2
 800af2e:	4618      	mov	r0, r3
 800af30:	f7fe fdba 	bl	8009aa8 <pvPortMalloc>
 800af34:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d00e      	beq.n	800af5a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800af3c:	20bc      	movs	r0, #188	; 0xbc
 800af3e:	f7fe fdb3 	bl	8009aa8 <pvPortMalloc>
 800af42:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800af44:	69fb      	ldr	r3, [r7, #28]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d003      	beq.n	800af52 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800af4a:	69fb      	ldr	r3, [r7, #28]
 800af4c:	697a      	ldr	r2, [r7, #20]
 800af4e:	631a      	str	r2, [r3, #48]	; 0x30
 800af50:	e005      	b.n	800af5e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800af52:	6978      	ldr	r0, [r7, #20]
 800af54:	f7fe fe74 	bl	8009c40 <vPortFree>
 800af58:	e001      	b.n	800af5e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800af5a:	2300      	movs	r3, #0
 800af5c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800af5e:	69fb      	ldr	r3, [r7, #28]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d017      	beq.n	800af94 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800af64:	69fb      	ldr	r3, [r7, #28]
 800af66:	2200      	movs	r2, #0
 800af68:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800af6c:	88fa      	ldrh	r2, [r7, #6]
 800af6e:	2300      	movs	r3, #0
 800af70:	9303      	str	r3, [sp, #12]
 800af72:	69fb      	ldr	r3, [r7, #28]
 800af74:	9302      	str	r3, [sp, #8]
 800af76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af78:	9301      	str	r3, [sp, #4]
 800af7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af7c:	9300      	str	r3, [sp, #0]
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	68b9      	ldr	r1, [r7, #8]
 800af82:	68f8      	ldr	r0, [r7, #12]
 800af84:	f000 f80e 	bl	800afa4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800af88:	69f8      	ldr	r0, [r7, #28]
 800af8a:	f000 f8b1 	bl	800b0f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800af8e:	2301      	movs	r3, #1
 800af90:	61bb      	str	r3, [r7, #24]
 800af92:	e002      	b.n	800af9a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800af94:	f04f 33ff 	mov.w	r3, #4294967295
 800af98:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800af9a:	69bb      	ldr	r3, [r7, #24]
	}
 800af9c:	4618      	mov	r0, r3
 800af9e:	3720      	adds	r7, #32
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b088      	sub	sp, #32
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	60f8      	str	r0, [r7, #12]
 800afac:	60b9      	str	r1, [r7, #8]
 800afae:	607a      	str	r2, [r7, #4]
 800afb0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800afb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	009b      	lsls	r3, r3, #2
 800afba:	461a      	mov	r2, r3
 800afbc:	21a5      	movs	r1, #165	; 0xa5
 800afbe:	f001 faf6 	bl	800c5ae <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800afc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800afc6:	6879      	ldr	r1, [r7, #4]
 800afc8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800afcc:	440b      	add	r3, r1
 800afce:	009b      	lsls	r3, r3, #2
 800afd0:	4413      	add	r3, r2
 800afd2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800afd4:	69bb      	ldr	r3, [r7, #24]
 800afd6:	f023 0307 	bic.w	r3, r3, #7
 800afda:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800afdc:	69bb      	ldr	r3, [r7, #24]
 800afde:	f003 0307 	and.w	r3, r3, #7
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d00a      	beq.n	800affc <prvInitialiseNewTask+0x58>
	__asm volatile
 800afe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afea:	f383 8811 	msr	BASEPRI, r3
 800afee:	f3bf 8f6f 	isb	sy
 800aff2:	f3bf 8f4f 	dsb	sy
 800aff6:	617b      	str	r3, [r7, #20]
}
 800aff8:	bf00      	nop
 800affa:	e7fe      	b.n	800affa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d01f      	beq.n	800b042 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b002:	2300      	movs	r3, #0
 800b004:	61fb      	str	r3, [r7, #28]
 800b006:	e012      	b.n	800b02e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b008:	68ba      	ldr	r2, [r7, #8]
 800b00a:	69fb      	ldr	r3, [r7, #28]
 800b00c:	4413      	add	r3, r2
 800b00e:	7819      	ldrb	r1, [r3, #0]
 800b010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b012:	69fb      	ldr	r3, [r7, #28]
 800b014:	4413      	add	r3, r2
 800b016:	3334      	adds	r3, #52	; 0x34
 800b018:	460a      	mov	r2, r1
 800b01a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b01c:	68ba      	ldr	r2, [r7, #8]
 800b01e:	69fb      	ldr	r3, [r7, #28]
 800b020:	4413      	add	r3, r2
 800b022:	781b      	ldrb	r3, [r3, #0]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d006      	beq.n	800b036 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b028:	69fb      	ldr	r3, [r7, #28]
 800b02a:	3301      	adds	r3, #1
 800b02c:	61fb      	str	r3, [r7, #28]
 800b02e:	69fb      	ldr	r3, [r7, #28]
 800b030:	2b0f      	cmp	r3, #15
 800b032:	d9e9      	bls.n	800b008 <prvInitialiseNewTask+0x64>
 800b034:	e000      	b.n	800b038 <prvInitialiseNewTask+0x94>
			{
				break;
 800b036:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b03a:	2200      	movs	r2, #0
 800b03c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b040:	e003      	b.n	800b04a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b044:	2200      	movs	r2, #0
 800b046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b04c:	2b37      	cmp	r3, #55	; 0x37
 800b04e:	d901      	bls.n	800b054 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b050:	2337      	movs	r3, #55	; 0x37
 800b052:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b056:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b058:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b05c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b05e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b062:	2200      	movs	r2, #0
 800b064:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b068:	3304      	adds	r3, #4
 800b06a:	4618      	mov	r0, r3
 800b06c:	f7fe ff26 	bl	8009ebc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b072:	3318      	adds	r3, #24
 800b074:	4618      	mov	r0, r3
 800b076:	f7fe ff21 	bl	8009ebc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b07c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b07e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b082:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b088:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b08c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b08e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b092:	2200      	movs	r2, #0
 800b094:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b09a:	2200      	movs	r2, #0
 800b09c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a2:	3354      	adds	r3, #84	; 0x54
 800b0a4:	2260      	movs	r2, #96	; 0x60
 800b0a6:	2100      	movs	r1, #0
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f001 fa80 	bl	800c5ae <memset>
 800b0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b0:	4a0c      	ldr	r2, [pc, #48]	; (800b0e4 <prvInitialiseNewTask+0x140>)
 800b0b2:	659a      	str	r2, [r3, #88]	; 0x58
 800b0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b6:	4a0c      	ldr	r2, [pc, #48]	; (800b0e8 <prvInitialiseNewTask+0x144>)
 800b0b8:	65da      	str	r2, [r3, #92]	; 0x5c
 800b0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0bc:	4a0b      	ldr	r2, [pc, #44]	; (800b0ec <prvInitialiseNewTask+0x148>)
 800b0be:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b0c0:	683a      	ldr	r2, [r7, #0]
 800b0c2:	68f9      	ldr	r1, [r7, #12]
 800b0c4:	69b8      	ldr	r0, [r7, #24]
 800b0c6:	f7fe ff8d 	bl	8009fe4 <pxPortInitialiseStack>
 800b0ca:	4602      	mov	r2, r0
 800b0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ce:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d002      	beq.n	800b0dc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0da:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b0dc:	bf00      	nop
 800b0de:	3720      	adds	r7, #32
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}
 800b0e4:	0800f960 	.word	0x0800f960
 800b0e8:	0800f980 	.word	0x0800f980
 800b0ec:	0800f940 	.word	0x0800f940

0800b0f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b082      	sub	sp, #8
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b0f8:	f7ff f8a4 	bl	800a244 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b0fc:	4b2d      	ldr	r3, [pc, #180]	; (800b1b4 <prvAddNewTaskToReadyList+0xc4>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	3301      	adds	r3, #1
 800b102:	4a2c      	ldr	r2, [pc, #176]	; (800b1b4 <prvAddNewTaskToReadyList+0xc4>)
 800b104:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b106:	4b2c      	ldr	r3, [pc, #176]	; (800b1b8 <prvAddNewTaskToReadyList+0xc8>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d109      	bne.n	800b122 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b10e:	4a2a      	ldr	r2, [pc, #168]	; (800b1b8 <prvAddNewTaskToReadyList+0xc8>)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b114:	4b27      	ldr	r3, [pc, #156]	; (800b1b4 <prvAddNewTaskToReadyList+0xc4>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	2b01      	cmp	r3, #1
 800b11a:	d110      	bne.n	800b13e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b11c:	f000 fc26 	bl	800b96c <prvInitialiseTaskLists>
 800b120:	e00d      	b.n	800b13e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b122:	4b26      	ldr	r3, [pc, #152]	; (800b1bc <prvAddNewTaskToReadyList+0xcc>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d109      	bne.n	800b13e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b12a:	4b23      	ldr	r3, [pc, #140]	; (800b1b8 <prvAddNewTaskToReadyList+0xc8>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b134:	429a      	cmp	r2, r3
 800b136:	d802      	bhi.n	800b13e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b138:	4a1f      	ldr	r2, [pc, #124]	; (800b1b8 <prvAddNewTaskToReadyList+0xc8>)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b13e:	4b20      	ldr	r3, [pc, #128]	; (800b1c0 <prvAddNewTaskToReadyList+0xd0>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	3301      	adds	r3, #1
 800b144:	4a1e      	ldr	r2, [pc, #120]	; (800b1c0 <prvAddNewTaskToReadyList+0xd0>)
 800b146:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b148:	4b1d      	ldr	r3, [pc, #116]	; (800b1c0 <prvAddNewTaskToReadyList+0xd0>)
 800b14a:	681a      	ldr	r2, [r3, #0]
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b154:	4b1b      	ldr	r3, [pc, #108]	; (800b1c4 <prvAddNewTaskToReadyList+0xd4>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	429a      	cmp	r2, r3
 800b15a:	d903      	bls.n	800b164 <prvAddNewTaskToReadyList+0x74>
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b160:	4a18      	ldr	r2, [pc, #96]	; (800b1c4 <prvAddNewTaskToReadyList+0xd4>)
 800b162:	6013      	str	r3, [r2, #0]
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b168:	4613      	mov	r3, r2
 800b16a:	009b      	lsls	r3, r3, #2
 800b16c:	4413      	add	r3, r2
 800b16e:	009b      	lsls	r3, r3, #2
 800b170:	4a15      	ldr	r2, [pc, #84]	; (800b1c8 <prvAddNewTaskToReadyList+0xd8>)
 800b172:	441a      	add	r2, r3
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	3304      	adds	r3, #4
 800b178:	4619      	mov	r1, r3
 800b17a:	4610      	mov	r0, r2
 800b17c:	f7fe feab 	bl	8009ed6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b180:	f7ff f890 	bl	800a2a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b184:	4b0d      	ldr	r3, [pc, #52]	; (800b1bc <prvAddNewTaskToReadyList+0xcc>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d00e      	beq.n	800b1aa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b18c:	4b0a      	ldr	r3, [pc, #40]	; (800b1b8 <prvAddNewTaskToReadyList+0xc8>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b196:	429a      	cmp	r2, r3
 800b198:	d207      	bcs.n	800b1aa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b19a:	4b0c      	ldr	r3, [pc, #48]	; (800b1cc <prvAddNewTaskToReadyList+0xdc>)
 800b19c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1a0:	601a      	str	r2, [r3, #0]
 800b1a2:	f3bf 8f4f 	dsb	sy
 800b1a6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1aa:	bf00      	nop
 800b1ac:	3708      	adds	r7, #8
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}
 800b1b2:	bf00      	nop
 800b1b4:	24004f74 	.word	0x24004f74
 800b1b8:	24004aa0 	.word	0x24004aa0
 800b1bc:	24004f80 	.word	0x24004f80
 800b1c0:	24004f90 	.word	0x24004f90
 800b1c4:	24004f7c 	.word	0x24004f7c
 800b1c8:	24004aa4 	.word	0x24004aa4
 800b1cc:	e000ed04 	.word	0xe000ed04

0800b1d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b084      	sub	sp, #16
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d017      	beq.n	800b212 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b1e2:	4b13      	ldr	r3, [pc, #76]	; (800b230 <vTaskDelay+0x60>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d00a      	beq.n	800b200 <vTaskDelay+0x30>
	__asm volatile
 800b1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ee:	f383 8811 	msr	BASEPRI, r3
 800b1f2:	f3bf 8f6f 	isb	sy
 800b1f6:	f3bf 8f4f 	dsb	sy
 800b1fa:	60bb      	str	r3, [r7, #8]
}
 800b1fc:	bf00      	nop
 800b1fe:	e7fe      	b.n	800b1fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b200:	f000 f88a 	bl	800b318 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b204:	2100      	movs	r1, #0
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f000 fcfe 	bl	800bc08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b20c:	f000 f892 	bl	800b334 <xTaskResumeAll>
 800b210:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d107      	bne.n	800b228 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b218:	4b06      	ldr	r3, [pc, #24]	; (800b234 <vTaskDelay+0x64>)
 800b21a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b21e:	601a      	str	r2, [r3, #0]
 800b220:	f3bf 8f4f 	dsb	sy
 800b224:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b228:	bf00      	nop
 800b22a:	3710      	adds	r7, #16
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}
 800b230:	24004f9c 	.word	0x24004f9c
 800b234:	e000ed04 	.word	0xe000ed04

0800b238 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b08a      	sub	sp, #40	; 0x28
 800b23c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b23e:	2300      	movs	r3, #0
 800b240:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b242:	2300      	movs	r3, #0
 800b244:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b246:	463a      	mov	r2, r7
 800b248:	1d39      	adds	r1, r7, #4
 800b24a:	f107 0308 	add.w	r3, r7, #8
 800b24e:	4618      	mov	r0, r3
 800b250:	f7fe fbf6 	bl	8009a40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b254:	6839      	ldr	r1, [r7, #0]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	68ba      	ldr	r2, [r7, #8]
 800b25a:	9202      	str	r2, [sp, #8]
 800b25c:	9301      	str	r3, [sp, #4]
 800b25e:	2300      	movs	r3, #0
 800b260:	9300      	str	r3, [sp, #0]
 800b262:	2300      	movs	r3, #0
 800b264:	460a      	mov	r2, r1
 800b266:	4924      	ldr	r1, [pc, #144]	; (800b2f8 <vTaskStartScheduler+0xc0>)
 800b268:	4824      	ldr	r0, [pc, #144]	; (800b2fc <vTaskStartScheduler+0xc4>)
 800b26a:	f7ff fdf9 	bl	800ae60 <xTaskCreateStatic>
 800b26e:	4603      	mov	r3, r0
 800b270:	4a23      	ldr	r2, [pc, #140]	; (800b300 <vTaskStartScheduler+0xc8>)
 800b272:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b274:	4b22      	ldr	r3, [pc, #136]	; (800b300 <vTaskStartScheduler+0xc8>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d002      	beq.n	800b282 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b27c:	2301      	movs	r3, #1
 800b27e:	617b      	str	r3, [r7, #20]
 800b280:	e001      	b.n	800b286 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b282:	2300      	movs	r3, #0
 800b284:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	2b01      	cmp	r3, #1
 800b28a:	d102      	bne.n	800b292 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b28c:	f000 fd10 	bl	800bcb0 <xTimerCreateTimerTask>
 800b290:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	2b01      	cmp	r3, #1
 800b296:	d11b      	bne.n	800b2d0 <vTaskStartScheduler+0x98>
	__asm volatile
 800b298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b29c:	f383 8811 	msr	BASEPRI, r3
 800b2a0:	f3bf 8f6f 	isb	sy
 800b2a4:	f3bf 8f4f 	dsb	sy
 800b2a8:	613b      	str	r3, [r7, #16]
}
 800b2aa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b2ac:	4b15      	ldr	r3, [pc, #84]	; (800b304 <vTaskStartScheduler+0xcc>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	3354      	adds	r3, #84	; 0x54
 800b2b2:	4a15      	ldr	r2, [pc, #84]	; (800b308 <vTaskStartScheduler+0xd0>)
 800b2b4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b2b6:	4b15      	ldr	r3, [pc, #84]	; (800b30c <vTaskStartScheduler+0xd4>)
 800b2b8:	f04f 32ff 	mov.w	r2, #4294967295
 800b2bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b2be:	4b14      	ldr	r3, [pc, #80]	; (800b310 <vTaskStartScheduler+0xd8>)
 800b2c0:	2201      	movs	r2, #1
 800b2c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b2c4:	4b13      	ldr	r3, [pc, #76]	; (800b314 <vTaskStartScheduler+0xdc>)
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b2ca:	f7fe ff19 	bl	800a100 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b2ce:	e00e      	b.n	800b2ee <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2d6:	d10a      	bne.n	800b2ee <vTaskStartScheduler+0xb6>
	__asm volatile
 800b2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2dc:	f383 8811 	msr	BASEPRI, r3
 800b2e0:	f3bf 8f6f 	isb	sy
 800b2e4:	f3bf 8f4f 	dsb	sy
 800b2e8:	60fb      	str	r3, [r7, #12]
}
 800b2ea:	bf00      	nop
 800b2ec:	e7fe      	b.n	800b2ec <vTaskStartScheduler+0xb4>
}
 800b2ee:	bf00      	nop
 800b2f0:	3718      	adds	r7, #24
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}
 800b2f6:	bf00      	nop
 800b2f8:	0800f8bc 	.word	0x0800f8bc
 800b2fc:	0800b93d 	.word	0x0800b93d
 800b300:	24004f98 	.word	0x24004f98
 800b304:	24004aa0 	.word	0x24004aa0
 800b308:	2400001c 	.word	0x2400001c
 800b30c:	24004f94 	.word	0x24004f94
 800b310:	24004f80 	.word	0x24004f80
 800b314:	24004f78 	.word	0x24004f78

0800b318 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b318:	b480      	push	{r7}
 800b31a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b31c:	4b04      	ldr	r3, [pc, #16]	; (800b330 <vTaskSuspendAll+0x18>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	3301      	adds	r3, #1
 800b322:	4a03      	ldr	r2, [pc, #12]	; (800b330 <vTaskSuspendAll+0x18>)
 800b324:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b326:	bf00      	nop
 800b328:	46bd      	mov	sp, r7
 800b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32e:	4770      	bx	lr
 800b330:	24004f9c 	.word	0x24004f9c

0800b334 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b084      	sub	sp, #16
 800b338:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b33a:	2300      	movs	r3, #0
 800b33c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b33e:	2300      	movs	r3, #0
 800b340:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b342:	4b42      	ldr	r3, [pc, #264]	; (800b44c <xTaskResumeAll+0x118>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d10a      	bne.n	800b360 <xTaskResumeAll+0x2c>
	__asm volatile
 800b34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b34e:	f383 8811 	msr	BASEPRI, r3
 800b352:	f3bf 8f6f 	isb	sy
 800b356:	f3bf 8f4f 	dsb	sy
 800b35a:	603b      	str	r3, [r7, #0]
}
 800b35c:	bf00      	nop
 800b35e:	e7fe      	b.n	800b35e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b360:	f7fe ff70 	bl	800a244 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b364:	4b39      	ldr	r3, [pc, #228]	; (800b44c <xTaskResumeAll+0x118>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	3b01      	subs	r3, #1
 800b36a:	4a38      	ldr	r2, [pc, #224]	; (800b44c <xTaskResumeAll+0x118>)
 800b36c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b36e:	4b37      	ldr	r3, [pc, #220]	; (800b44c <xTaskResumeAll+0x118>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d162      	bne.n	800b43c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b376:	4b36      	ldr	r3, [pc, #216]	; (800b450 <xTaskResumeAll+0x11c>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d05e      	beq.n	800b43c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b37e:	e02f      	b.n	800b3e0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b380:	4b34      	ldr	r3, [pc, #208]	; (800b454 <xTaskResumeAll+0x120>)
 800b382:	68db      	ldr	r3, [r3, #12]
 800b384:	68db      	ldr	r3, [r3, #12]
 800b386:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	3318      	adds	r3, #24
 800b38c:	4618      	mov	r0, r3
 800b38e:	f7fe fdff 	bl	8009f90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	3304      	adds	r3, #4
 800b396:	4618      	mov	r0, r3
 800b398:	f7fe fdfa 	bl	8009f90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3a0:	4b2d      	ldr	r3, [pc, #180]	; (800b458 <xTaskResumeAll+0x124>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d903      	bls.n	800b3b0 <xTaskResumeAll+0x7c>
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ac:	4a2a      	ldr	r2, [pc, #168]	; (800b458 <xTaskResumeAll+0x124>)
 800b3ae:	6013      	str	r3, [r2, #0]
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3b4:	4613      	mov	r3, r2
 800b3b6:	009b      	lsls	r3, r3, #2
 800b3b8:	4413      	add	r3, r2
 800b3ba:	009b      	lsls	r3, r3, #2
 800b3bc:	4a27      	ldr	r2, [pc, #156]	; (800b45c <xTaskResumeAll+0x128>)
 800b3be:	441a      	add	r2, r3
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	3304      	adds	r3, #4
 800b3c4:	4619      	mov	r1, r3
 800b3c6:	4610      	mov	r0, r2
 800b3c8:	f7fe fd85 	bl	8009ed6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3d0:	4b23      	ldr	r3, [pc, #140]	; (800b460 <xTaskResumeAll+0x12c>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3d6:	429a      	cmp	r2, r3
 800b3d8:	d302      	bcc.n	800b3e0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b3da:	4b22      	ldr	r3, [pc, #136]	; (800b464 <xTaskResumeAll+0x130>)
 800b3dc:	2201      	movs	r2, #1
 800b3de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b3e0:	4b1c      	ldr	r3, [pc, #112]	; (800b454 <xTaskResumeAll+0x120>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d1cb      	bne.n	800b380 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d001      	beq.n	800b3f2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b3ee:	f000 fb5f 	bl	800bab0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b3f2:	4b1d      	ldr	r3, [pc, #116]	; (800b468 <xTaskResumeAll+0x134>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d010      	beq.n	800b420 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b3fe:	f000 f847 	bl	800b490 <xTaskIncrementTick>
 800b402:	4603      	mov	r3, r0
 800b404:	2b00      	cmp	r3, #0
 800b406:	d002      	beq.n	800b40e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b408:	4b16      	ldr	r3, [pc, #88]	; (800b464 <xTaskResumeAll+0x130>)
 800b40a:	2201      	movs	r2, #1
 800b40c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	3b01      	subs	r3, #1
 800b412:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d1f1      	bne.n	800b3fe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b41a:	4b13      	ldr	r3, [pc, #76]	; (800b468 <xTaskResumeAll+0x134>)
 800b41c:	2200      	movs	r2, #0
 800b41e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b420:	4b10      	ldr	r3, [pc, #64]	; (800b464 <xTaskResumeAll+0x130>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d009      	beq.n	800b43c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b428:	2301      	movs	r3, #1
 800b42a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b42c:	4b0f      	ldr	r3, [pc, #60]	; (800b46c <xTaskResumeAll+0x138>)
 800b42e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b432:	601a      	str	r2, [r3, #0]
 800b434:	f3bf 8f4f 	dsb	sy
 800b438:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b43c:	f7fe ff32 	bl	800a2a4 <vPortExitCritical>

	return xAlreadyYielded;
 800b440:	68bb      	ldr	r3, [r7, #8]
}
 800b442:	4618      	mov	r0, r3
 800b444:	3710      	adds	r7, #16
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}
 800b44a:	bf00      	nop
 800b44c:	24004f9c 	.word	0x24004f9c
 800b450:	24004f74 	.word	0x24004f74
 800b454:	24004f34 	.word	0x24004f34
 800b458:	24004f7c 	.word	0x24004f7c
 800b45c:	24004aa4 	.word	0x24004aa4
 800b460:	24004aa0 	.word	0x24004aa0
 800b464:	24004f88 	.word	0x24004f88
 800b468:	24004f84 	.word	0x24004f84
 800b46c:	e000ed04 	.word	0xe000ed04

0800b470 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b470:	b480      	push	{r7}
 800b472:	b083      	sub	sp, #12
 800b474:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b476:	4b05      	ldr	r3, [pc, #20]	; (800b48c <xTaskGetTickCount+0x1c>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b47c:	687b      	ldr	r3, [r7, #4]
}
 800b47e:	4618      	mov	r0, r3
 800b480:	370c      	adds	r7, #12
 800b482:	46bd      	mov	sp, r7
 800b484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b488:	4770      	bx	lr
 800b48a:	bf00      	nop
 800b48c:	24004f78 	.word	0x24004f78

0800b490 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b086      	sub	sp, #24
 800b494:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b496:	2300      	movs	r3, #0
 800b498:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b49a:	4b4f      	ldr	r3, [pc, #316]	; (800b5d8 <xTaskIncrementTick+0x148>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	f040 808f 	bne.w	800b5c2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b4a4:	4b4d      	ldr	r3, [pc, #308]	; (800b5dc <xTaskIncrementTick+0x14c>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	3301      	adds	r3, #1
 800b4aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b4ac:	4a4b      	ldr	r2, [pc, #300]	; (800b5dc <xTaskIncrementTick+0x14c>)
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d120      	bne.n	800b4fa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b4b8:	4b49      	ldr	r3, [pc, #292]	; (800b5e0 <xTaskIncrementTick+0x150>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d00a      	beq.n	800b4d8 <xTaskIncrementTick+0x48>
	__asm volatile
 800b4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c6:	f383 8811 	msr	BASEPRI, r3
 800b4ca:	f3bf 8f6f 	isb	sy
 800b4ce:	f3bf 8f4f 	dsb	sy
 800b4d2:	603b      	str	r3, [r7, #0]
}
 800b4d4:	bf00      	nop
 800b4d6:	e7fe      	b.n	800b4d6 <xTaskIncrementTick+0x46>
 800b4d8:	4b41      	ldr	r3, [pc, #260]	; (800b5e0 <xTaskIncrementTick+0x150>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	60fb      	str	r3, [r7, #12]
 800b4de:	4b41      	ldr	r3, [pc, #260]	; (800b5e4 <xTaskIncrementTick+0x154>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	4a3f      	ldr	r2, [pc, #252]	; (800b5e0 <xTaskIncrementTick+0x150>)
 800b4e4:	6013      	str	r3, [r2, #0]
 800b4e6:	4a3f      	ldr	r2, [pc, #252]	; (800b5e4 <xTaskIncrementTick+0x154>)
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	6013      	str	r3, [r2, #0]
 800b4ec:	4b3e      	ldr	r3, [pc, #248]	; (800b5e8 <xTaskIncrementTick+0x158>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	3301      	adds	r3, #1
 800b4f2:	4a3d      	ldr	r2, [pc, #244]	; (800b5e8 <xTaskIncrementTick+0x158>)
 800b4f4:	6013      	str	r3, [r2, #0]
 800b4f6:	f000 fadb 	bl	800bab0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b4fa:	4b3c      	ldr	r3, [pc, #240]	; (800b5ec <xTaskIncrementTick+0x15c>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	693a      	ldr	r2, [r7, #16]
 800b500:	429a      	cmp	r2, r3
 800b502:	d349      	bcc.n	800b598 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b504:	4b36      	ldr	r3, [pc, #216]	; (800b5e0 <xTaskIncrementTick+0x150>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d104      	bne.n	800b518 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b50e:	4b37      	ldr	r3, [pc, #220]	; (800b5ec <xTaskIncrementTick+0x15c>)
 800b510:	f04f 32ff 	mov.w	r2, #4294967295
 800b514:	601a      	str	r2, [r3, #0]
					break;
 800b516:	e03f      	b.n	800b598 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b518:	4b31      	ldr	r3, [pc, #196]	; (800b5e0 <xTaskIncrementTick+0x150>)
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	68db      	ldr	r3, [r3, #12]
 800b51e:	68db      	ldr	r3, [r3, #12]
 800b520:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	685b      	ldr	r3, [r3, #4]
 800b526:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b528:	693a      	ldr	r2, [r7, #16]
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d203      	bcs.n	800b538 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b530:	4a2e      	ldr	r2, [pc, #184]	; (800b5ec <xTaskIncrementTick+0x15c>)
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b536:	e02f      	b.n	800b598 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	3304      	adds	r3, #4
 800b53c:	4618      	mov	r0, r3
 800b53e:	f7fe fd27 	bl	8009f90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b546:	2b00      	cmp	r3, #0
 800b548:	d004      	beq.n	800b554 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	3318      	adds	r3, #24
 800b54e:	4618      	mov	r0, r3
 800b550:	f7fe fd1e 	bl	8009f90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b558:	4b25      	ldr	r3, [pc, #148]	; (800b5f0 <xTaskIncrementTick+0x160>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d903      	bls.n	800b568 <xTaskIncrementTick+0xd8>
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b564:	4a22      	ldr	r2, [pc, #136]	; (800b5f0 <xTaskIncrementTick+0x160>)
 800b566:	6013      	str	r3, [r2, #0]
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b56c:	4613      	mov	r3, r2
 800b56e:	009b      	lsls	r3, r3, #2
 800b570:	4413      	add	r3, r2
 800b572:	009b      	lsls	r3, r3, #2
 800b574:	4a1f      	ldr	r2, [pc, #124]	; (800b5f4 <xTaskIncrementTick+0x164>)
 800b576:	441a      	add	r2, r3
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	3304      	adds	r3, #4
 800b57c:	4619      	mov	r1, r3
 800b57e:	4610      	mov	r0, r2
 800b580:	f7fe fca9 	bl	8009ed6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b588:	4b1b      	ldr	r3, [pc, #108]	; (800b5f8 <xTaskIncrementTick+0x168>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b58e:	429a      	cmp	r2, r3
 800b590:	d3b8      	bcc.n	800b504 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b592:	2301      	movs	r3, #1
 800b594:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b596:	e7b5      	b.n	800b504 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b598:	4b17      	ldr	r3, [pc, #92]	; (800b5f8 <xTaskIncrementTick+0x168>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b59e:	4915      	ldr	r1, [pc, #84]	; (800b5f4 <xTaskIncrementTick+0x164>)
 800b5a0:	4613      	mov	r3, r2
 800b5a2:	009b      	lsls	r3, r3, #2
 800b5a4:	4413      	add	r3, r2
 800b5a6:	009b      	lsls	r3, r3, #2
 800b5a8:	440b      	add	r3, r1
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	2b01      	cmp	r3, #1
 800b5ae:	d901      	bls.n	800b5b4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b5b4:	4b11      	ldr	r3, [pc, #68]	; (800b5fc <xTaskIncrementTick+0x16c>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d007      	beq.n	800b5cc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b5bc:	2301      	movs	r3, #1
 800b5be:	617b      	str	r3, [r7, #20]
 800b5c0:	e004      	b.n	800b5cc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b5c2:	4b0f      	ldr	r3, [pc, #60]	; (800b600 <xTaskIncrementTick+0x170>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	3301      	adds	r3, #1
 800b5c8:	4a0d      	ldr	r2, [pc, #52]	; (800b600 <xTaskIncrementTick+0x170>)
 800b5ca:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b5cc:	697b      	ldr	r3, [r7, #20]
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3718      	adds	r7, #24
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}
 800b5d6:	bf00      	nop
 800b5d8:	24004f9c 	.word	0x24004f9c
 800b5dc:	24004f78 	.word	0x24004f78
 800b5e0:	24004f2c 	.word	0x24004f2c
 800b5e4:	24004f30 	.word	0x24004f30
 800b5e8:	24004f8c 	.word	0x24004f8c
 800b5ec:	24004f94 	.word	0x24004f94
 800b5f0:	24004f7c 	.word	0x24004f7c
 800b5f4:	24004aa4 	.word	0x24004aa4
 800b5f8:	24004aa0 	.word	0x24004aa0
 800b5fc:	24004f88 	.word	0x24004f88
 800b600:	24004f84 	.word	0x24004f84

0800b604 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b604:	b480      	push	{r7}
 800b606:	b085      	sub	sp, #20
 800b608:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b60a:	4b2a      	ldr	r3, [pc, #168]	; (800b6b4 <vTaskSwitchContext+0xb0>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d003      	beq.n	800b61a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b612:	4b29      	ldr	r3, [pc, #164]	; (800b6b8 <vTaskSwitchContext+0xb4>)
 800b614:	2201      	movs	r2, #1
 800b616:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b618:	e046      	b.n	800b6a8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b61a:	4b27      	ldr	r3, [pc, #156]	; (800b6b8 <vTaskSwitchContext+0xb4>)
 800b61c:	2200      	movs	r2, #0
 800b61e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b620:	4b26      	ldr	r3, [pc, #152]	; (800b6bc <vTaskSwitchContext+0xb8>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	60fb      	str	r3, [r7, #12]
 800b626:	e010      	b.n	800b64a <vTaskSwitchContext+0x46>
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d10a      	bne.n	800b644 <vTaskSwitchContext+0x40>
	__asm volatile
 800b62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b632:	f383 8811 	msr	BASEPRI, r3
 800b636:	f3bf 8f6f 	isb	sy
 800b63a:	f3bf 8f4f 	dsb	sy
 800b63e:	607b      	str	r3, [r7, #4]
}
 800b640:	bf00      	nop
 800b642:	e7fe      	b.n	800b642 <vTaskSwitchContext+0x3e>
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	3b01      	subs	r3, #1
 800b648:	60fb      	str	r3, [r7, #12]
 800b64a:	491d      	ldr	r1, [pc, #116]	; (800b6c0 <vTaskSwitchContext+0xbc>)
 800b64c:	68fa      	ldr	r2, [r7, #12]
 800b64e:	4613      	mov	r3, r2
 800b650:	009b      	lsls	r3, r3, #2
 800b652:	4413      	add	r3, r2
 800b654:	009b      	lsls	r3, r3, #2
 800b656:	440b      	add	r3, r1
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d0e4      	beq.n	800b628 <vTaskSwitchContext+0x24>
 800b65e:	68fa      	ldr	r2, [r7, #12]
 800b660:	4613      	mov	r3, r2
 800b662:	009b      	lsls	r3, r3, #2
 800b664:	4413      	add	r3, r2
 800b666:	009b      	lsls	r3, r3, #2
 800b668:	4a15      	ldr	r2, [pc, #84]	; (800b6c0 <vTaskSwitchContext+0xbc>)
 800b66a:	4413      	add	r3, r2
 800b66c:	60bb      	str	r3, [r7, #8]
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	685b      	ldr	r3, [r3, #4]
 800b672:	685a      	ldr	r2, [r3, #4]
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	605a      	str	r2, [r3, #4]
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	685a      	ldr	r2, [r3, #4]
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	3308      	adds	r3, #8
 800b680:	429a      	cmp	r2, r3
 800b682:	d104      	bne.n	800b68e <vTaskSwitchContext+0x8a>
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	685b      	ldr	r3, [r3, #4]
 800b688:	685a      	ldr	r2, [r3, #4]
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	605a      	str	r2, [r3, #4]
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	685b      	ldr	r3, [r3, #4]
 800b692:	68db      	ldr	r3, [r3, #12]
 800b694:	4a0b      	ldr	r2, [pc, #44]	; (800b6c4 <vTaskSwitchContext+0xc0>)
 800b696:	6013      	str	r3, [r2, #0]
 800b698:	4a08      	ldr	r2, [pc, #32]	; (800b6bc <vTaskSwitchContext+0xb8>)
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b69e:	4b09      	ldr	r3, [pc, #36]	; (800b6c4 <vTaskSwitchContext+0xc0>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	3354      	adds	r3, #84	; 0x54
 800b6a4:	4a08      	ldr	r2, [pc, #32]	; (800b6c8 <vTaskSwitchContext+0xc4>)
 800b6a6:	6013      	str	r3, [r2, #0]
}
 800b6a8:	bf00      	nop
 800b6aa:	3714      	adds	r7, #20
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b2:	4770      	bx	lr
 800b6b4:	24004f9c 	.word	0x24004f9c
 800b6b8:	24004f88 	.word	0x24004f88
 800b6bc:	24004f7c 	.word	0x24004f7c
 800b6c0:	24004aa4 	.word	0x24004aa4
 800b6c4:	24004aa0 	.word	0x24004aa0
 800b6c8:	2400001c 	.word	0x2400001c

0800b6cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b084      	sub	sp, #16
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d10a      	bne.n	800b6f2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b6dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e0:	f383 8811 	msr	BASEPRI, r3
 800b6e4:	f3bf 8f6f 	isb	sy
 800b6e8:	f3bf 8f4f 	dsb	sy
 800b6ec:	60fb      	str	r3, [r7, #12]
}
 800b6ee:	bf00      	nop
 800b6f0:	e7fe      	b.n	800b6f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b6f2:	4b07      	ldr	r3, [pc, #28]	; (800b710 <vTaskPlaceOnEventList+0x44>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	3318      	adds	r3, #24
 800b6f8:	4619      	mov	r1, r3
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f7fe fc0f 	bl	8009f1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b700:	2101      	movs	r1, #1
 800b702:	6838      	ldr	r0, [r7, #0]
 800b704:	f000 fa80 	bl	800bc08 <prvAddCurrentTaskToDelayedList>
}
 800b708:	bf00      	nop
 800b70a:	3710      	adds	r7, #16
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}
 800b710:	24004aa0 	.word	0x24004aa0

0800b714 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b714:	b580      	push	{r7, lr}
 800b716:	b086      	sub	sp, #24
 800b718:	af00      	add	r7, sp, #0
 800b71a:	60f8      	str	r0, [r7, #12]
 800b71c:	60b9      	str	r1, [r7, #8]
 800b71e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d10a      	bne.n	800b73c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b72a:	f383 8811 	msr	BASEPRI, r3
 800b72e:	f3bf 8f6f 	isb	sy
 800b732:	f3bf 8f4f 	dsb	sy
 800b736:	617b      	str	r3, [r7, #20]
}
 800b738:	bf00      	nop
 800b73a:	e7fe      	b.n	800b73a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b73c:	4b0a      	ldr	r3, [pc, #40]	; (800b768 <vTaskPlaceOnEventListRestricted+0x54>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	3318      	adds	r3, #24
 800b742:	4619      	mov	r1, r3
 800b744:	68f8      	ldr	r0, [r7, #12]
 800b746:	f7fe fbc6 	bl	8009ed6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d002      	beq.n	800b756 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b750:	f04f 33ff 	mov.w	r3, #4294967295
 800b754:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b756:	6879      	ldr	r1, [r7, #4]
 800b758:	68b8      	ldr	r0, [r7, #8]
 800b75a:	f000 fa55 	bl	800bc08 <prvAddCurrentTaskToDelayedList>
	}
 800b75e:	bf00      	nop
 800b760:	3718      	adds	r7, #24
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}
 800b766:	bf00      	nop
 800b768:	24004aa0 	.word	0x24004aa0

0800b76c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b086      	sub	sp, #24
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	68db      	ldr	r3, [r3, #12]
 800b778:	68db      	ldr	r3, [r3, #12]
 800b77a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d10a      	bne.n	800b798 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b786:	f383 8811 	msr	BASEPRI, r3
 800b78a:	f3bf 8f6f 	isb	sy
 800b78e:	f3bf 8f4f 	dsb	sy
 800b792:	60fb      	str	r3, [r7, #12]
}
 800b794:	bf00      	nop
 800b796:	e7fe      	b.n	800b796 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b798:	693b      	ldr	r3, [r7, #16]
 800b79a:	3318      	adds	r3, #24
 800b79c:	4618      	mov	r0, r3
 800b79e:	f7fe fbf7 	bl	8009f90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b7a2:	4b1e      	ldr	r3, [pc, #120]	; (800b81c <xTaskRemoveFromEventList+0xb0>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d11d      	bne.n	800b7e6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	3304      	adds	r3, #4
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f7fe fbee 	bl	8009f90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b7b4:	693b      	ldr	r3, [r7, #16]
 800b7b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7b8:	4b19      	ldr	r3, [pc, #100]	; (800b820 <xTaskRemoveFromEventList+0xb4>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	d903      	bls.n	800b7c8 <xTaskRemoveFromEventList+0x5c>
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c4:	4a16      	ldr	r2, [pc, #88]	; (800b820 <xTaskRemoveFromEventList+0xb4>)
 800b7c6:	6013      	str	r3, [r2, #0]
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7cc:	4613      	mov	r3, r2
 800b7ce:	009b      	lsls	r3, r3, #2
 800b7d0:	4413      	add	r3, r2
 800b7d2:	009b      	lsls	r3, r3, #2
 800b7d4:	4a13      	ldr	r2, [pc, #76]	; (800b824 <xTaskRemoveFromEventList+0xb8>)
 800b7d6:	441a      	add	r2, r3
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	3304      	adds	r3, #4
 800b7dc:	4619      	mov	r1, r3
 800b7de:	4610      	mov	r0, r2
 800b7e0:	f7fe fb79 	bl	8009ed6 <vListInsertEnd>
 800b7e4:	e005      	b.n	800b7f2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	3318      	adds	r3, #24
 800b7ea:	4619      	mov	r1, r3
 800b7ec:	480e      	ldr	r0, [pc, #56]	; (800b828 <xTaskRemoveFromEventList+0xbc>)
 800b7ee:	f7fe fb72 	bl	8009ed6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b7f2:	693b      	ldr	r3, [r7, #16]
 800b7f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7f6:	4b0d      	ldr	r3, [pc, #52]	; (800b82c <xTaskRemoveFromEventList+0xc0>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7fc:	429a      	cmp	r2, r3
 800b7fe:	d905      	bls.n	800b80c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b800:	2301      	movs	r3, #1
 800b802:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b804:	4b0a      	ldr	r3, [pc, #40]	; (800b830 <xTaskRemoveFromEventList+0xc4>)
 800b806:	2201      	movs	r2, #1
 800b808:	601a      	str	r2, [r3, #0]
 800b80a:	e001      	b.n	800b810 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b80c:	2300      	movs	r3, #0
 800b80e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b810:	697b      	ldr	r3, [r7, #20]
}
 800b812:	4618      	mov	r0, r3
 800b814:	3718      	adds	r7, #24
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}
 800b81a:	bf00      	nop
 800b81c:	24004f9c 	.word	0x24004f9c
 800b820:	24004f7c 	.word	0x24004f7c
 800b824:	24004aa4 	.word	0x24004aa4
 800b828:	24004f34 	.word	0x24004f34
 800b82c:	24004aa0 	.word	0x24004aa0
 800b830:	24004f88 	.word	0x24004f88

0800b834 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b834:	b480      	push	{r7}
 800b836:	b083      	sub	sp, #12
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b83c:	4b06      	ldr	r3, [pc, #24]	; (800b858 <vTaskInternalSetTimeOutState+0x24>)
 800b83e:	681a      	ldr	r2, [r3, #0]
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b844:	4b05      	ldr	r3, [pc, #20]	; (800b85c <vTaskInternalSetTimeOutState+0x28>)
 800b846:	681a      	ldr	r2, [r3, #0]
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	605a      	str	r2, [r3, #4]
}
 800b84c:	bf00      	nop
 800b84e:	370c      	adds	r7, #12
 800b850:	46bd      	mov	sp, r7
 800b852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b856:	4770      	bx	lr
 800b858:	24004f8c 	.word	0x24004f8c
 800b85c:	24004f78 	.word	0x24004f78

0800b860 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b088      	sub	sp, #32
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d10a      	bne.n	800b886 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b874:	f383 8811 	msr	BASEPRI, r3
 800b878:	f3bf 8f6f 	isb	sy
 800b87c:	f3bf 8f4f 	dsb	sy
 800b880:	613b      	str	r3, [r7, #16]
}
 800b882:	bf00      	nop
 800b884:	e7fe      	b.n	800b884 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d10a      	bne.n	800b8a2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b890:	f383 8811 	msr	BASEPRI, r3
 800b894:	f3bf 8f6f 	isb	sy
 800b898:	f3bf 8f4f 	dsb	sy
 800b89c:	60fb      	str	r3, [r7, #12]
}
 800b89e:	bf00      	nop
 800b8a0:	e7fe      	b.n	800b8a0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b8a2:	f7fe fccf 	bl	800a244 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b8a6:	4b1d      	ldr	r3, [pc, #116]	; (800b91c <xTaskCheckForTimeOut+0xbc>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	685b      	ldr	r3, [r3, #4]
 800b8b0:	69ba      	ldr	r2, [r7, #24]
 800b8b2:	1ad3      	subs	r3, r2, r3
 800b8b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8be:	d102      	bne.n	800b8c6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	61fb      	str	r3, [r7, #28]
 800b8c4:	e023      	b.n	800b90e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681a      	ldr	r2, [r3, #0]
 800b8ca:	4b15      	ldr	r3, [pc, #84]	; (800b920 <xTaskCheckForTimeOut+0xc0>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	429a      	cmp	r2, r3
 800b8d0:	d007      	beq.n	800b8e2 <xTaskCheckForTimeOut+0x82>
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	685b      	ldr	r3, [r3, #4]
 800b8d6:	69ba      	ldr	r2, [r7, #24]
 800b8d8:	429a      	cmp	r2, r3
 800b8da:	d302      	bcc.n	800b8e2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b8dc:	2301      	movs	r3, #1
 800b8de:	61fb      	str	r3, [r7, #28]
 800b8e0:	e015      	b.n	800b90e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	697a      	ldr	r2, [r7, #20]
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	d20b      	bcs.n	800b904 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	681a      	ldr	r2, [r3, #0]
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	1ad2      	subs	r2, r2, r3
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f7ff ff9b 	bl	800b834 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b8fe:	2300      	movs	r3, #0
 800b900:	61fb      	str	r3, [r7, #28]
 800b902:	e004      	b.n	800b90e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	2200      	movs	r2, #0
 800b908:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b90a:	2301      	movs	r3, #1
 800b90c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b90e:	f7fe fcc9 	bl	800a2a4 <vPortExitCritical>

	return xReturn;
 800b912:	69fb      	ldr	r3, [r7, #28]
}
 800b914:	4618      	mov	r0, r3
 800b916:	3720      	adds	r7, #32
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}
 800b91c:	24004f78 	.word	0x24004f78
 800b920:	24004f8c 	.word	0x24004f8c

0800b924 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b924:	b480      	push	{r7}
 800b926:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b928:	4b03      	ldr	r3, [pc, #12]	; (800b938 <vTaskMissedYield+0x14>)
 800b92a:	2201      	movs	r2, #1
 800b92c:	601a      	str	r2, [r3, #0]
}
 800b92e:	bf00      	nop
 800b930:	46bd      	mov	sp, r7
 800b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b936:	4770      	bx	lr
 800b938:	24004f88 	.word	0x24004f88

0800b93c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b082      	sub	sp, #8
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b944:	f000 f852 	bl	800b9ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b948:	4b06      	ldr	r3, [pc, #24]	; (800b964 <prvIdleTask+0x28>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	2b01      	cmp	r3, #1
 800b94e:	d9f9      	bls.n	800b944 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b950:	4b05      	ldr	r3, [pc, #20]	; (800b968 <prvIdleTask+0x2c>)
 800b952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b956:	601a      	str	r2, [r3, #0]
 800b958:	f3bf 8f4f 	dsb	sy
 800b95c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b960:	e7f0      	b.n	800b944 <prvIdleTask+0x8>
 800b962:	bf00      	nop
 800b964:	24004aa4 	.word	0x24004aa4
 800b968:	e000ed04 	.word	0xe000ed04

0800b96c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b082      	sub	sp, #8
 800b970:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b972:	2300      	movs	r3, #0
 800b974:	607b      	str	r3, [r7, #4]
 800b976:	e00c      	b.n	800b992 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b978:	687a      	ldr	r2, [r7, #4]
 800b97a:	4613      	mov	r3, r2
 800b97c:	009b      	lsls	r3, r3, #2
 800b97e:	4413      	add	r3, r2
 800b980:	009b      	lsls	r3, r3, #2
 800b982:	4a12      	ldr	r2, [pc, #72]	; (800b9cc <prvInitialiseTaskLists+0x60>)
 800b984:	4413      	add	r3, r2
 800b986:	4618      	mov	r0, r3
 800b988:	f7fe fa78 	bl	8009e7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	3301      	adds	r3, #1
 800b990:	607b      	str	r3, [r7, #4]
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2b37      	cmp	r3, #55	; 0x37
 800b996:	d9ef      	bls.n	800b978 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b998:	480d      	ldr	r0, [pc, #52]	; (800b9d0 <prvInitialiseTaskLists+0x64>)
 800b99a:	f7fe fa6f 	bl	8009e7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b99e:	480d      	ldr	r0, [pc, #52]	; (800b9d4 <prvInitialiseTaskLists+0x68>)
 800b9a0:	f7fe fa6c 	bl	8009e7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b9a4:	480c      	ldr	r0, [pc, #48]	; (800b9d8 <prvInitialiseTaskLists+0x6c>)
 800b9a6:	f7fe fa69 	bl	8009e7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b9aa:	480c      	ldr	r0, [pc, #48]	; (800b9dc <prvInitialiseTaskLists+0x70>)
 800b9ac:	f7fe fa66 	bl	8009e7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b9b0:	480b      	ldr	r0, [pc, #44]	; (800b9e0 <prvInitialiseTaskLists+0x74>)
 800b9b2:	f7fe fa63 	bl	8009e7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b9b6:	4b0b      	ldr	r3, [pc, #44]	; (800b9e4 <prvInitialiseTaskLists+0x78>)
 800b9b8:	4a05      	ldr	r2, [pc, #20]	; (800b9d0 <prvInitialiseTaskLists+0x64>)
 800b9ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b9bc:	4b0a      	ldr	r3, [pc, #40]	; (800b9e8 <prvInitialiseTaskLists+0x7c>)
 800b9be:	4a05      	ldr	r2, [pc, #20]	; (800b9d4 <prvInitialiseTaskLists+0x68>)
 800b9c0:	601a      	str	r2, [r3, #0]
}
 800b9c2:	bf00      	nop
 800b9c4:	3708      	adds	r7, #8
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}
 800b9ca:	bf00      	nop
 800b9cc:	24004aa4 	.word	0x24004aa4
 800b9d0:	24004f04 	.word	0x24004f04
 800b9d4:	24004f18 	.word	0x24004f18
 800b9d8:	24004f34 	.word	0x24004f34
 800b9dc:	24004f48 	.word	0x24004f48
 800b9e0:	24004f60 	.word	0x24004f60
 800b9e4:	24004f2c 	.word	0x24004f2c
 800b9e8:	24004f30 	.word	0x24004f30

0800b9ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b082      	sub	sp, #8
 800b9f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b9f2:	e019      	b.n	800ba28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b9f4:	f7fe fc26 	bl	800a244 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9f8:	4b10      	ldr	r3, [pc, #64]	; (800ba3c <prvCheckTasksWaitingTermination+0x50>)
 800b9fa:	68db      	ldr	r3, [r3, #12]
 800b9fc:	68db      	ldr	r3, [r3, #12]
 800b9fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	3304      	adds	r3, #4
 800ba04:	4618      	mov	r0, r3
 800ba06:	f7fe fac3 	bl	8009f90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ba0a:	4b0d      	ldr	r3, [pc, #52]	; (800ba40 <prvCheckTasksWaitingTermination+0x54>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	3b01      	subs	r3, #1
 800ba10:	4a0b      	ldr	r2, [pc, #44]	; (800ba40 <prvCheckTasksWaitingTermination+0x54>)
 800ba12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ba14:	4b0b      	ldr	r3, [pc, #44]	; (800ba44 <prvCheckTasksWaitingTermination+0x58>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	3b01      	subs	r3, #1
 800ba1a:	4a0a      	ldr	r2, [pc, #40]	; (800ba44 <prvCheckTasksWaitingTermination+0x58>)
 800ba1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ba1e:	f7fe fc41 	bl	800a2a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f000 f810 	bl	800ba48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba28:	4b06      	ldr	r3, [pc, #24]	; (800ba44 <prvCheckTasksWaitingTermination+0x58>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d1e1      	bne.n	800b9f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ba30:	bf00      	nop
 800ba32:	bf00      	nop
 800ba34:	3708      	adds	r7, #8
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}
 800ba3a:	bf00      	nop
 800ba3c:	24004f48 	.word	0x24004f48
 800ba40:	24004f74 	.word	0x24004f74
 800ba44:	24004f5c 	.word	0x24004f5c

0800ba48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b084      	sub	sp, #16
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	3354      	adds	r3, #84	; 0x54
 800ba54:	4618      	mov	r0, r3
 800ba56:	f001 fb25 	bl	800d0a4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d108      	bne.n	800ba76 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f7fe f8e9 	bl	8009c40 <vPortFree>
				vPortFree( pxTCB );
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f7fe f8e6 	bl	8009c40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ba74:	e018      	b.n	800baa8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ba7c:	2b01      	cmp	r3, #1
 800ba7e:	d103      	bne.n	800ba88 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f7fe f8dd 	bl	8009c40 <vPortFree>
	}
 800ba86:	e00f      	b.n	800baa8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ba8e:	2b02      	cmp	r3, #2
 800ba90:	d00a      	beq.n	800baa8 <prvDeleteTCB+0x60>
	__asm volatile
 800ba92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba96:	f383 8811 	msr	BASEPRI, r3
 800ba9a:	f3bf 8f6f 	isb	sy
 800ba9e:	f3bf 8f4f 	dsb	sy
 800baa2:	60fb      	str	r3, [r7, #12]
}
 800baa4:	bf00      	nop
 800baa6:	e7fe      	b.n	800baa6 <prvDeleteTCB+0x5e>
	}
 800baa8:	bf00      	nop
 800baaa:	3710      	adds	r7, #16
 800baac:	46bd      	mov	sp, r7
 800baae:	bd80      	pop	{r7, pc}

0800bab0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bab0:	b480      	push	{r7}
 800bab2:	b083      	sub	sp, #12
 800bab4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bab6:	4b0c      	ldr	r3, [pc, #48]	; (800bae8 <prvResetNextTaskUnblockTime+0x38>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d104      	bne.n	800baca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bac0:	4b0a      	ldr	r3, [pc, #40]	; (800baec <prvResetNextTaskUnblockTime+0x3c>)
 800bac2:	f04f 32ff 	mov.w	r2, #4294967295
 800bac6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bac8:	e008      	b.n	800badc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800baca:	4b07      	ldr	r3, [pc, #28]	; (800bae8 <prvResetNextTaskUnblockTime+0x38>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	68db      	ldr	r3, [r3, #12]
 800bad0:	68db      	ldr	r3, [r3, #12]
 800bad2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	685b      	ldr	r3, [r3, #4]
 800bad8:	4a04      	ldr	r2, [pc, #16]	; (800baec <prvResetNextTaskUnblockTime+0x3c>)
 800bada:	6013      	str	r3, [r2, #0]
}
 800badc:	bf00      	nop
 800bade:	370c      	adds	r7, #12
 800bae0:	46bd      	mov	sp, r7
 800bae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae6:	4770      	bx	lr
 800bae8:	24004f2c 	.word	0x24004f2c
 800baec:	24004f94 	.word	0x24004f94

0800baf0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800baf0:	b480      	push	{r7}
 800baf2:	b083      	sub	sp, #12
 800baf4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800baf6:	4b0b      	ldr	r3, [pc, #44]	; (800bb24 <xTaskGetSchedulerState+0x34>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d102      	bne.n	800bb04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bafe:	2301      	movs	r3, #1
 800bb00:	607b      	str	r3, [r7, #4]
 800bb02:	e008      	b.n	800bb16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb04:	4b08      	ldr	r3, [pc, #32]	; (800bb28 <xTaskGetSchedulerState+0x38>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d102      	bne.n	800bb12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bb0c:	2302      	movs	r3, #2
 800bb0e:	607b      	str	r3, [r7, #4]
 800bb10:	e001      	b.n	800bb16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bb12:	2300      	movs	r3, #0
 800bb14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bb16:	687b      	ldr	r3, [r7, #4]
	}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	370c      	adds	r7, #12
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb22:	4770      	bx	lr
 800bb24:	24004f80 	.word	0x24004f80
 800bb28:	24004f9c 	.word	0x24004f9c

0800bb2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b086      	sub	sp, #24
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bb38:	2300      	movs	r3, #0
 800bb3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d056      	beq.n	800bbf0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bb42:	4b2e      	ldr	r3, [pc, #184]	; (800bbfc <xTaskPriorityDisinherit+0xd0>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	693a      	ldr	r2, [r7, #16]
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	d00a      	beq.n	800bb62 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bb4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb50:	f383 8811 	msr	BASEPRI, r3
 800bb54:	f3bf 8f6f 	isb	sy
 800bb58:	f3bf 8f4f 	dsb	sy
 800bb5c:	60fb      	str	r3, [r7, #12]
}
 800bb5e:	bf00      	nop
 800bb60:	e7fe      	b.n	800bb60 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d10a      	bne.n	800bb80 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bb6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb6e:	f383 8811 	msr	BASEPRI, r3
 800bb72:	f3bf 8f6f 	isb	sy
 800bb76:	f3bf 8f4f 	dsb	sy
 800bb7a:	60bb      	str	r3, [r7, #8]
}
 800bb7c:	bf00      	nop
 800bb7e:	e7fe      	b.n	800bb7e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb84:	1e5a      	subs	r2, r3, #1
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bb8a:	693b      	ldr	r3, [r7, #16]
 800bb8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d02c      	beq.n	800bbf0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d128      	bne.n	800bbf0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb9e:	693b      	ldr	r3, [r7, #16]
 800bba0:	3304      	adds	r3, #4
 800bba2:	4618      	mov	r0, r3
 800bba4:	f7fe f9f4 	bl	8009f90 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bba8:	693b      	ldr	r3, [r7, #16]
 800bbaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbb4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bbbc:	693b      	ldr	r3, [r7, #16]
 800bbbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbc0:	4b0f      	ldr	r3, [pc, #60]	; (800bc00 <xTaskPriorityDisinherit+0xd4>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	d903      	bls.n	800bbd0 <xTaskPriorityDisinherit+0xa4>
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbcc:	4a0c      	ldr	r2, [pc, #48]	; (800bc00 <xTaskPriorityDisinherit+0xd4>)
 800bbce:	6013      	str	r3, [r2, #0]
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbd4:	4613      	mov	r3, r2
 800bbd6:	009b      	lsls	r3, r3, #2
 800bbd8:	4413      	add	r3, r2
 800bbda:	009b      	lsls	r3, r3, #2
 800bbdc:	4a09      	ldr	r2, [pc, #36]	; (800bc04 <xTaskPriorityDisinherit+0xd8>)
 800bbde:	441a      	add	r2, r3
 800bbe0:	693b      	ldr	r3, [r7, #16]
 800bbe2:	3304      	adds	r3, #4
 800bbe4:	4619      	mov	r1, r3
 800bbe6:	4610      	mov	r0, r2
 800bbe8:	f7fe f975 	bl	8009ed6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bbec:	2301      	movs	r3, #1
 800bbee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bbf0:	697b      	ldr	r3, [r7, #20]
	}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3718      	adds	r7, #24
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}
 800bbfa:	bf00      	nop
 800bbfc:	24004aa0 	.word	0x24004aa0
 800bc00:	24004f7c 	.word	0x24004f7c
 800bc04:	24004aa4 	.word	0x24004aa4

0800bc08 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b084      	sub	sp, #16
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bc12:	4b21      	ldr	r3, [pc, #132]	; (800bc98 <prvAddCurrentTaskToDelayedList+0x90>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc18:	4b20      	ldr	r3, [pc, #128]	; (800bc9c <prvAddCurrentTaskToDelayedList+0x94>)
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	3304      	adds	r3, #4
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7fe f9b6 	bl	8009f90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc2a:	d10a      	bne.n	800bc42 <prvAddCurrentTaskToDelayedList+0x3a>
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d007      	beq.n	800bc42 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc32:	4b1a      	ldr	r3, [pc, #104]	; (800bc9c <prvAddCurrentTaskToDelayedList+0x94>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	3304      	adds	r3, #4
 800bc38:	4619      	mov	r1, r3
 800bc3a:	4819      	ldr	r0, [pc, #100]	; (800bca0 <prvAddCurrentTaskToDelayedList+0x98>)
 800bc3c:	f7fe f94b 	bl	8009ed6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bc40:	e026      	b.n	800bc90 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bc42:	68fa      	ldr	r2, [r7, #12]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	4413      	add	r3, r2
 800bc48:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bc4a:	4b14      	ldr	r3, [pc, #80]	; (800bc9c <prvAddCurrentTaskToDelayedList+0x94>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	68ba      	ldr	r2, [r7, #8]
 800bc50:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bc52:	68ba      	ldr	r2, [r7, #8]
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	429a      	cmp	r2, r3
 800bc58:	d209      	bcs.n	800bc6e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc5a:	4b12      	ldr	r3, [pc, #72]	; (800bca4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bc5c:	681a      	ldr	r2, [r3, #0]
 800bc5e:	4b0f      	ldr	r3, [pc, #60]	; (800bc9c <prvAddCurrentTaskToDelayedList+0x94>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	3304      	adds	r3, #4
 800bc64:	4619      	mov	r1, r3
 800bc66:	4610      	mov	r0, r2
 800bc68:	f7fe f959 	bl	8009f1e <vListInsert>
}
 800bc6c:	e010      	b.n	800bc90 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc6e:	4b0e      	ldr	r3, [pc, #56]	; (800bca8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bc70:	681a      	ldr	r2, [r3, #0]
 800bc72:	4b0a      	ldr	r3, [pc, #40]	; (800bc9c <prvAddCurrentTaskToDelayedList+0x94>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	3304      	adds	r3, #4
 800bc78:	4619      	mov	r1, r3
 800bc7a:	4610      	mov	r0, r2
 800bc7c:	f7fe f94f 	bl	8009f1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bc80:	4b0a      	ldr	r3, [pc, #40]	; (800bcac <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	68ba      	ldr	r2, [r7, #8]
 800bc86:	429a      	cmp	r2, r3
 800bc88:	d202      	bcs.n	800bc90 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bc8a:	4a08      	ldr	r2, [pc, #32]	; (800bcac <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	6013      	str	r3, [r2, #0]
}
 800bc90:	bf00      	nop
 800bc92:	3710      	adds	r7, #16
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}
 800bc98:	24004f78 	.word	0x24004f78
 800bc9c:	24004aa0 	.word	0x24004aa0
 800bca0:	24004f60 	.word	0x24004f60
 800bca4:	24004f30 	.word	0x24004f30
 800bca8:	24004f2c 	.word	0x24004f2c
 800bcac:	24004f94 	.word	0x24004f94

0800bcb0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b08a      	sub	sp, #40	; 0x28
 800bcb4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bcba:	f000 fb07 	bl	800c2cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bcbe:	4b1c      	ldr	r3, [pc, #112]	; (800bd30 <xTimerCreateTimerTask+0x80>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d021      	beq.n	800bd0a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bcca:	2300      	movs	r3, #0
 800bccc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bcce:	1d3a      	adds	r2, r7, #4
 800bcd0:	f107 0108 	add.w	r1, r7, #8
 800bcd4:	f107 030c 	add.w	r3, r7, #12
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f7fd fecb 	bl	8009a74 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bcde:	6879      	ldr	r1, [r7, #4]
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	68fa      	ldr	r2, [r7, #12]
 800bce4:	9202      	str	r2, [sp, #8]
 800bce6:	9301      	str	r3, [sp, #4]
 800bce8:	2302      	movs	r3, #2
 800bcea:	9300      	str	r3, [sp, #0]
 800bcec:	2300      	movs	r3, #0
 800bcee:	460a      	mov	r2, r1
 800bcf0:	4910      	ldr	r1, [pc, #64]	; (800bd34 <xTimerCreateTimerTask+0x84>)
 800bcf2:	4811      	ldr	r0, [pc, #68]	; (800bd38 <xTimerCreateTimerTask+0x88>)
 800bcf4:	f7ff f8b4 	bl	800ae60 <xTaskCreateStatic>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	4a10      	ldr	r2, [pc, #64]	; (800bd3c <xTimerCreateTimerTask+0x8c>)
 800bcfc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bcfe:	4b0f      	ldr	r3, [pc, #60]	; (800bd3c <xTimerCreateTimerTask+0x8c>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d001      	beq.n	800bd0a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bd06:	2301      	movs	r3, #1
 800bd08:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d10a      	bne.n	800bd26 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bd10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd14:	f383 8811 	msr	BASEPRI, r3
 800bd18:	f3bf 8f6f 	isb	sy
 800bd1c:	f3bf 8f4f 	dsb	sy
 800bd20:	613b      	str	r3, [r7, #16]
}
 800bd22:	bf00      	nop
 800bd24:	e7fe      	b.n	800bd24 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bd26:	697b      	ldr	r3, [r7, #20]
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3718      	adds	r7, #24
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}
 800bd30:	24004fd0 	.word	0x24004fd0
 800bd34:	0800f8c4 	.word	0x0800f8c4
 800bd38:	0800be75 	.word	0x0800be75
 800bd3c:	24004fd4 	.word	0x24004fd4

0800bd40 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b08a      	sub	sp, #40	; 0x28
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	60f8      	str	r0, [r7, #12]
 800bd48:	60b9      	str	r1, [r7, #8]
 800bd4a:	607a      	str	r2, [r7, #4]
 800bd4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d10a      	bne.n	800bd6e <xTimerGenericCommand+0x2e>
	__asm volatile
 800bd58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd5c:	f383 8811 	msr	BASEPRI, r3
 800bd60:	f3bf 8f6f 	isb	sy
 800bd64:	f3bf 8f4f 	dsb	sy
 800bd68:	623b      	str	r3, [r7, #32]
}
 800bd6a:	bf00      	nop
 800bd6c:	e7fe      	b.n	800bd6c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bd6e:	4b1a      	ldr	r3, [pc, #104]	; (800bdd8 <xTimerGenericCommand+0x98>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d02a      	beq.n	800bdcc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	2b05      	cmp	r3, #5
 800bd86:	dc18      	bgt.n	800bdba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bd88:	f7ff feb2 	bl	800baf0 <xTaskGetSchedulerState>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	2b02      	cmp	r3, #2
 800bd90:	d109      	bne.n	800bda6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bd92:	4b11      	ldr	r3, [pc, #68]	; (800bdd8 <xTimerGenericCommand+0x98>)
 800bd94:	6818      	ldr	r0, [r3, #0]
 800bd96:	f107 0110 	add.w	r1, r7, #16
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd9e:	f7fe fc77 	bl	800a690 <xQueueGenericSend>
 800bda2:	6278      	str	r0, [r7, #36]	; 0x24
 800bda4:	e012      	b.n	800bdcc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bda6:	4b0c      	ldr	r3, [pc, #48]	; (800bdd8 <xTimerGenericCommand+0x98>)
 800bda8:	6818      	ldr	r0, [r3, #0]
 800bdaa:	f107 0110 	add.w	r1, r7, #16
 800bdae:	2300      	movs	r3, #0
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	f7fe fc6d 	bl	800a690 <xQueueGenericSend>
 800bdb6:	6278      	str	r0, [r7, #36]	; 0x24
 800bdb8:	e008      	b.n	800bdcc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bdba:	4b07      	ldr	r3, [pc, #28]	; (800bdd8 <xTimerGenericCommand+0x98>)
 800bdbc:	6818      	ldr	r0, [r3, #0]
 800bdbe:	f107 0110 	add.w	r1, r7, #16
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	683a      	ldr	r2, [r7, #0]
 800bdc6:	f7fe fd61 	bl	800a88c <xQueueGenericSendFromISR>
 800bdca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bdcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3728      	adds	r7, #40	; 0x28
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
 800bdd6:	bf00      	nop
 800bdd8:	24004fd0 	.word	0x24004fd0

0800bddc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b088      	sub	sp, #32
 800bde0:	af02      	add	r7, sp, #8
 800bde2:	6078      	str	r0, [r7, #4]
 800bde4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bde6:	4b22      	ldr	r3, [pc, #136]	; (800be70 <prvProcessExpiredTimer+0x94>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	68db      	ldr	r3, [r3, #12]
 800bdec:	68db      	ldr	r3, [r3, #12]
 800bdee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	3304      	adds	r3, #4
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f7fe f8cb 	bl	8009f90 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bdfa:	697b      	ldr	r3, [r7, #20]
 800bdfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be00:	f003 0304 	and.w	r3, r3, #4
 800be04:	2b00      	cmp	r3, #0
 800be06:	d022      	beq.n	800be4e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	699a      	ldr	r2, [r3, #24]
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	18d1      	adds	r1, r2, r3
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	683a      	ldr	r2, [r7, #0]
 800be14:	6978      	ldr	r0, [r7, #20]
 800be16:	f000 f8d1 	bl	800bfbc <prvInsertTimerInActiveList>
 800be1a:	4603      	mov	r3, r0
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d01f      	beq.n	800be60 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800be20:	2300      	movs	r3, #0
 800be22:	9300      	str	r3, [sp, #0]
 800be24:	2300      	movs	r3, #0
 800be26:	687a      	ldr	r2, [r7, #4]
 800be28:	2100      	movs	r1, #0
 800be2a:	6978      	ldr	r0, [r7, #20]
 800be2c:	f7ff ff88 	bl	800bd40 <xTimerGenericCommand>
 800be30:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d113      	bne.n	800be60 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800be38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be3c:	f383 8811 	msr	BASEPRI, r3
 800be40:	f3bf 8f6f 	isb	sy
 800be44:	f3bf 8f4f 	dsb	sy
 800be48:	60fb      	str	r3, [r7, #12]
}
 800be4a:	bf00      	nop
 800be4c:	e7fe      	b.n	800be4c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be4e:	697b      	ldr	r3, [r7, #20]
 800be50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be54:	f023 0301 	bic.w	r3, r3, #1
 800be58:	b2da      	uxtb	r2, r3
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be60:	697b      	ldr	r3, [r7, #20]
 800be62:	6a1b      	ldr	r3, [r3, #32]
 800be64:	6978      	ldr	r0, [r7, #20]
 800be66:	4798      	blx	r3
}
 800be68:	bf00      	nop
 800be6a:	3718      	adds	r7, #24
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}
 800be70:	24004fc8 	.word	0x24004fc8

0800be74 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b084      	sub	sp, #16
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be7c:	f107 0308 	add.w	r3, r7, #8
 800be80:	4618      	mov	r0, r3
 800be82:	f000 f857 	bl	800bf34 <prvGetNextExpireTime>
 800be86:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	4619      	mov	r1, r3
 800be8c:	68f8      	ldr	r0, [r7, #12]
 800be8e:	f000 f803 	bl	800be98 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800be92:	f000 f8d5 	bl	800c040 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be96:	e7f1      	b.n	800be7c <prvTimerTask+0x8>

0800be98 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b084      	sub	sp, #16
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bea2:	f7ff fa39 	bl	800b318 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bea6:	f107 0308 	add.w	r3, r7, #8
 800beaa:	4618      	mov	r0, r3
 800beac:	f000 f866 	bl	800bf7c <prvSampleTimeNow>
 800beb0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d130      	bne.n	800bf1a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d10a      	bne.n	800bed4 <prvProcessTimerOrBlockTask+0x3c>
 800bebe:	687a      	ldr	r2, [r7, #4]
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	429a      	cmp	r2, r3
 800bec4:	d806      	bhi.n	800bed4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bec6:	f7ff fa35 	bl	800b334 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800beca:	68f9      	ldr	r1, [r7, #12]
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f7ff ff85 	bl	800bddc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bed2:	e024      	b.n	800bf1e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d008      	beq.n	800beec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800beda:	4b13      	ldr	r3, [pc, #76]	; (800bf28 <prvProcessTimerOrBlockTask+0x90>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d101      	bne.n	800bee8 <prvProcessTimerOrBlockTask+0x50>
 800bee4:	2301      	movs	r3, #1
 800bee6:	e000      	b.n	800beea <prvProcessTimerOrBlockTask+0x52>
 800bee8:	2300      	movs	r3, #0
 800beea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800beec:	4b0f      	ldr	r3, [pc, #60]	; (800bf2c <prvProcessTimerOrBlockTask+0x94>)
 800beee:	6818      	ldr	r0, [r3, #0]
 800bef0:	687a      	ldr	r2, [r7, #4]
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	1ad3      	subs	r3, r2, r3
 800bef6:	683a      	ldr	r2, [r7, #0]
 800bef8:	4619      	mov	r1, r3
 800befa:	f7fe ff7d 	bl	800adf8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800befe:	f7ff fa19 	bl	800b334 <xTaskResumeAll>
 800bf02:	4603      	mov	r3, r0
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d10a      	bne.n	800bf1e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bf08:	4b09      	ldr	r3, [pc, #36]	; (800bf30 <prvProcessTimerOrBlockTask+0x98>)
 800bf0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf0e:	601a      	str	r2, [r3, #0]
 800bf10:	f3bf 8f4f 	dsb	sy
 800bf14:	f3bf 8f6f 	isb	sy
}
 800bf18:	e001      	b.n	800bf1e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bf1a:	f7ff fa0b 	bl	800b334 <xTaskResumeAll>
}
 800bf1e:	bf00      	nop
 800bf20:	3710      	adds	r7, #16
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}
 800bf26:	bf00      	nop
 800bf28:	24004fcc 	.word	0x24004fcc
 800bf2c:	24004fd0 	.word	0x24004fd0
 800bf30:	e000ed04 	.word	0xe000ed04

0800bf34 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bf34:	b480      	push	{r7}
 800bf36:	b085      	sub	sp, #20
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bf3c:	4b0e      	ldr	r3, [pc, #56]	; (800bf78 <prvGetNextExpireTime+0x44>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d101      	bne.n	800bf4a <prvGetNextExpireTime+0x16>
 800bf46:	2201      	movs	r2, #1
 800bf48:	e000      	b.n	800bf4c <prvGetNextExpireTime+0x18>
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d105      	bne.n	800bf64 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf58:	4b07      	ldr	r3, [pc, #28]	; (800bf78 <prvGetNextExpireTime+0x44>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	68db      	ldr	r3, [r3, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	60fb      	str	r3, [r7, #12]
 800bf62:	e001      	b.n	800bf68 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bf64:	2300      	movs	r3, #0
 800bf66:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bf68:	68fb      	ldr	r3, [r7, #12]
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3714      	adds	r7, #20
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf74:	4770      	bx	lr
 800bf76:	bf00      	nop
 800bf78:	24004fc8 	.word	0x24004fc8

0800bf7c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b084      	sub	sp, #16
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bf84:	f7ff fa74 	bl	800b470 <xTaskGetTickCount>
 800bf88:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bf8a:	4b0b      	ldr	r3, [pc, #44]	; (800bfb8 <prvSampleTimeNow+0x3c>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	68fa      	ldr	r2, [r7, #12]
 800bf90:	429a      	cmp	r2, r3
 800bf92:	d205      	bcs.n	800bfa0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bf94:	f000 f936 	bl	800c204 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2201      	movs	r2, #1
 800bf9c:	601a      	str	r2, [r3, #0]
 800bf9e:	e002      	b.n	800bfa6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bfa6:	4a04      	ldr	r2, [pc, #16]	; (800bfb8 <prvSampleTimeNow+0x3c>)
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bfac:	68fb      	ldr	r3, [r7, #12]
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3710      	adds	r7, #16
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
 800bfb6:	bf00      	nop
 800bfb8:	24004fd8 	.word	0x24004fd8

0800bfbc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b086      	sub	sp, #24
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	60f8      	str	r0, [r7, #12]
 800bfc4:	60b9      	str	r1, [r7, #8]
 800bfc6:	607a      	str	r2, [r7, #4]
 800bfc8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bfca:	2300      	movs	r3, #0
 800bfcc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	68ba      	ldr	r2, [r7, #8]
 800bfd2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	68fa      	ldr	r2, [r7, #12]
 800bfd8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bfda:	68ba      	ldr	r2, [r7, #8]
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d812      	bhi.n	800c008 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfe2:	687a      	ldr	r2, [r7, #4]
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	1ad2      	subs	r2, r2, r3
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	699b      	ldr	r3, [r3, #24]
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d302      	bcc.n	800bff6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bff0:	2301      	movs	r3, #1
 800bff2:	617b      	str	r3, [r7, #20]
 800bff4:	e01b      	b.n	800c02e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bff6:	4b10      	ldr	r3, [pc, #64]	; (800c038 <prvInsertTimerInActiveList+0x7c>)
 800bff8:	681a      	ldr	r2, [r3, #0]
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	3304      	adds	r3, #4
 800bffe:	4619      	mov	r1, r3
 800c000:	4610      	mov	r0, r2
 800c002:	f7fd ff8c 	bl	8009f1e <vListInsert>
 800c006:	e012      	b.n	800c02e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c008:	687a      	ldr	r2, [r7, #4]
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	429a      	cmp	r2, r3
 800c00e:	d206      	bcs.n	800c01e <prvInsertTimerInActiveList+0x62>
 800c010:	68ba      	ldr	r2, [r7, #8]
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	429a      	cmp	r2, r3
 800c016:	d302      	bcc.n	800c01e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c018:	2301      	movs	r3, #1
 800c01a:	617b      	str	r3, [r7, #20]
 800c01c:	e007      	b.n	800c02e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c01e:	4b07      	ldr	r3, [pc, #28]	; (800c03c <prvInsertTimerInActiveList+0x80>)
 800c020:	681a      	ldr	r2, [r3, #0]
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	3304      	adds	r3, #4
 800c026:	4619      	mov	r1, r3
 800c028:	4610      	mov	r0, r2
 800c02a:	f7fd ff78 	bl	8009f1e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c02e:	697b      	ldr	r3, [r7, #20]
}
 800c030:	4618      	mov	r0, r3
 800c032:	3718      	adds	r7, #24
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}
 800c038:	24004fcc 	.word	0x24004fcc
 800c03c:	24004fc8 	.word	0x24004fc8

0800c040 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b08e      	sub	sp, #56	; 0x38
 800c044:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c046:	e0ca      	b.n	800c1de <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	da18      	bge.n	800c080 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c04e:	1d3b      	adds	r3, r7, #4
 800c050:	3304      	adds	r3, #4
 800c052:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c056:	2b00      	cmp	r3, #0
 800c058:	d10a      	bne.n	800c070 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c05a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c05e:	f383 8811 	msr	BASEPRI, r3
 800c062:	f3bf 8f6f 	isb	sy
 800c066:	f3bf 8f4f 	dsb	sy
 800c06a:	61fb      	str	r3, [r7, #28]
}
 800c06c:	bf00      	nop
 800c06e:	e7fe      	b.n	800c06e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c076:	6850      	ldr	r0, [r2, #4]
 800c078:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c07a:	6892      	ldr	r2, [r2, #8]
 800c07c:	4611      	mov	r1, r2
 800c07e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2b00      	cmp	r3, #0
 800c084:	f2c0 80aa 	blt.w	800c1dc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c08e:	695b      	ldr	r3, [r3, #20]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d004      	beq.n	800c09e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c096:	3304      	adds	r3, #4
 800c098:	4618      	mov	r0, r3
 800c09a:	f7fd ff79 	bl	8009f90 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c09e:	463b      	mov	r3, r7
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f7ff ff6b 	bl	800bf7c <prvSampleTimeNow>
 800c0a6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2b09      	cmp	r3, #9
 800c0ac:	f200 8097 	bhi.w	800c1de <prvProcessReceivedCommands+0x19e>
 800c0b0:	a201      	add	r2, pc, #4	; (adr r2, 800c0b8 <prvProcessReceivedCommands+0x78>)
 800c0b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0b6:	bf00      	nop
 800c0b8:	0800c0e1 	.word	0x0800c0e1
 800c0bc:	0800c0e1 	.word	0x0800c0e1
 800c0c0:	0800c0e1 	.word	0x0800c0e1
 800c0c4:	0800c155 	.word	0x0800c155
 800c0c8:	0800c169 	.word	0x0800c169
 800c0cc:	0800c1b3 	.word	0x0800c1b3
 800c0d0:	0800c0e1 	.word	0x0800c0e1
 800c0d4:	0800c0e1 	.word	0x0800c0e1
 800c0d8:	0800c155 	.word	0x0800c155
 800c0dc:	0800c169 	.word	0x0800c169
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0e6:	f043 0301 	orr.w	r3, r3, #1
 800c0ea:	b2da      	uxtb	r2, r3
 800c0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c0f2:	68ba      	ldr	r2, [r7, #8]
 800c0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f6:	699b      	ldr	r3, [r3, #24]
 800c0f8:	18d1      	adds	r1, r2, r3
 800c0fa:	68bb      	ldr	r3, [r7, #8]
 800c0fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c100:	f7ff ff5c 	bl	800bfbc <prvInsertTimerInActiveList>
 800c104:	4603      	mov	r3, r0
 800c106:	2b00      	cmp	r3, #0
 800c108:	d069      	beq.n	800c1de <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c10c:	6a1b      	ldr	r3, [r3, #32]
 800c10e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c110:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c114:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c118:	f003 0304 	and.w	r3, r3, #4
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d05e      	beq.n	800c1de <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c120:	68ba      	ldr	r2, [r7, #8]
 800c122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c124:	699b      	ldr	r3, [r3, #24]
 800c126:	441a      	add	r2, r3
 800c128:	2300      	movs	r3, #0
 800c12a:	9300      	str	r3, [sp, #0]
 800c12c:	2300      	movs	r3, #0
 800c12e:	2100      	movs	r1, #0
 800c130:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c132:	f7ff fe05 	bl	800bd40 <xTimerGenericCommand>
 800c136:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c138:	6a3b      	ldr	r3, [r7, #32]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d14f      	bne.n	800c1de <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c142:	f383 8811 	msr	BASEPRI, r3
 800c146:	f3bf 8f6f 	isb	sy
 800c14a:	f3bf 8f4f 	dsb	sy
 800c14e:	61bb      	str	r3, [r7, #24]
}
 800c150:	bf00      	nop
 800c152:	e7fe      	b.n	800c152 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c156:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c15a:	f023 0301 	bic.w	r3, r3, #1
 800c15e:	b2da      	uxtb	r2, r3
 800c160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c162:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c166:	e03a      	b.n	800c1de <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c16a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c16e:	f043 0301 	orr.w	r3, r3, #1
 800c172:	b2da      	uxtb	r2, r3
 800c174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c176:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c17a:	68ba      	ldr	r2, [r7, #8]
 800c17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c17e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c182:	699b      	ldr	r3, [r3, #24]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d10a      	bne.n	800c19e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c18c:	f383 8811 	msr	BASEPRI, r3
 800c190:	f3bf 8f6f 	isb	sy
 800c194:	f3bf 8f4f 	dsb	sy
 800c198:	617b      	str	r3, [r7, #20]
}
 800c19a:	bf00      	nop
 800c19c:	e7fe      	b.n	800c19c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a0:	699a      	ldr	r2, [r3, #24]
 800c1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a4:	18d1      	adds	r1, r2, r3
 800c1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1ac:	f7ff ff06 	bl	800bfbc <prvInsertTimerInActiveList>
					break;
 800c1b0:	e015      	b.n	800c1de <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c1b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1b8:	f003 0302 	and.w	r3, r3, #2
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d103      	bne.n	800c1c8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c1c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1c2:	f7fd fd3d 	bl	8009c40 <vPortFree>
 800c1c6:	e00a      	b.n	800c1de <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1ce:	f023 0301 	bic.w	r3, r3, #1
 800c1d2:	b2da      	uxtb	r2, r3
 800c1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c1da:	e000      	b.n	800c1de <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c1dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c1de:	4b08      	ldr	r3, [pc, #32]	; (800c200 <prvProcessReceivedCommands+0x1c0>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	1d39      	adds	r1, r7, #4
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f7fe fbec 	bl	800a9c4 <xQueueReceive>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	f47f af2a 	bne.w	800c048 <prvProcessReceivedCommands+0x8>
	}
}
 800c1f4:	bf00      	nop
 800c1f6:	bf00      	nop
 800c1f8:	3730      	adds	r7, #48	; 0x30
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}
 800c1fe:	bf00      	nop
 800c200:	24004fd0 	.word	0x24004fd0

0800c204 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b088      	sub	sp, #32
 800c208:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c20a:	e048      	b.n	800c29e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c20c:	4b2d      	ldr	r3, [pc, #180]	; (800c2c4 <prvSwitchTimerLists+0xc0>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	68db      	ldr	r3, [r3, #12]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c216:	4b2b      	ldr	r3, [pc, #172]	; (800c2c4 <prvSwitchTimerLists+0xc0>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	68db      	ldr	r3, [r3, #12]
 800c21c:	68db      	ldr	r3, [r3, #12]
 800c21e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	3304      	adds	r3, #4
 800c224:	4618      	mov	r0, r3
 800c226:	f7fd feb3 	bl	8009f90 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	6a1b      	ldr	r3, [r3, #32]
 800c22e:	68f8      	ldr	r0, [r7, #12]
 800c230:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c238:	f003 0304 	and.w	r3, r3, #4
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d02e      	beq.n	800c29e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	699b      	ldr	r3, [r3, #24]
 800c244:	693a      	ldr	r2, [r7, #16]
 800c246:	4413      	add	r3, r2
 800c248:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c24a:	68ba      	ldr	r2, [r7, #8]
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	429a      	cmp	r2, r3
 800c250:	d90e      	bls.n	800c270 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	68ba      	ldr	r2, [r7, #8]
 800c256:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	68fa      	ldr	r2, [r7, #12]
 800c25c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c25e:	4b19      	ldr	r3, [pc, #100]	; (800c2c4 <prvSwitchTimerLists+0xc0>)
 800c260:	681a      	ldr	r2, [r3, #0]
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	3304      	adds	r3, #4
 800c266:	4619      	mov	r1, r3
 800c268:	4610      	mov	r0, r2
 800c26a:	f7fd fe58 	bl	8009f1e <vListInsert>
 800c26e:	e016      	b.n	800c29e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c270:	2300      	movs	r3, #0
 800c272:	9300      	str	r3, [sp, #0]
 800c274:	2300      	movs	r3, #0
 800c276:	693a      	ldr	r2, [r7, #16]
 800c278:	2100      	movs	r1, #0
 800c27a:	68f8      	ldr	r0, [r7, #12]
 800c27c:	f7ff fd60 	bl	800bd40 <xTimerGenericCommand>
 800c280:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d10a      	bne.n	800c29e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c28c:	f383 8811 	msr	BASEPRI, r3
 800c290:	f3bf 8f6f 	isb	sy
 800c294:	f3bf 8f4f 	dsb	sy
 800c298:	603b      	str	r3, [r7, #0]
}
 800c29a:	bf00      	nop
 800c29c:	e7fe      	b.n	800c29c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c29e:	4b09      	ldr	r3, [pc, #36]	; (800c2c4 <prvSwitchTimerLists+0xc0>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d1b1      	bne.n	800c20c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c2a8:	4b06      	ldr	r3, [pc, #24]	; (800c2c4 <prvSwitchTimerLists+0xc0>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c2ae:	4b06      	ldr	r3, [pc, #24]	; (800c2c8 <prvSwitchTimerLists+0xc4>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	4a04      	ldr	r2, [pc, #16]	; (800c2c4 <prvSwitchTimerLists+0xc0>)
 800c2b4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c2b6:	4a04      	ldr	r2, [pc, #16]	; (800c2c8 <prvSwitchTimerLists+0xc4>)
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	6013      	str	r3, [r2, #0]
}
 800c2bc:	bf00      	nop
 800c2be:	3718      	adds	r7, #24
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}
 800c2c4:	24004fc8 	.word	0x24004fc8
 800c2c8:	24004fcc 	.word	0x24004fcc

0800c2cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b082      	sub	sp, #8
 800c2d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c2d2:	f7fd ffb7 	bl	800a244 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c2d6:	4b15      	ldr	r3, [pc, #84]	; (800c32c <prvCheckForValidListAndQueue+0x60>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d120      	bne.n	800c320 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c2de:	4814      	ldr	r0, [pc, #80]	; (800c330 <prvCheckForValidListAndQueue+0x64>)
 800c2e0:	f7fd fdcc 	bl	8009e7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c2e4:	4813      	ldr	r0, [pc, #76]	; (800c334 <prvCheckForValidListAndQueue+0x68>)
 800c2e6:	f7fd fdc9 	bl	8009e7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c2ea:	4b13      	ldr	r3, [pc, #76]	; (800c338 <prvCheckForValidListAndQueue+0x6c>)
 800c2ec:	4a10      	ldr	r2, [pc, #64]	; (800c330 <prvCheckForValidListAndQueue+0x64>)
 800c2ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c2f0:	4b12      	ldr	r3, [pc, #72]	; (800c33c <prvCheckForValidListAndQueue+0x70>)
 800c2f2:	4a10      	ldr	r2, [pc, #64]	; (800c334 <prvCheckForValidListAndQueue+0x68>)
 800c2f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	9300      	str	r3, [sp, #0]
 800c2fa:	4b11      	ldr	r3, [pc, #68]	; (800c340 <prvCheckForValidListAndQueue+0x74>)
 800c2fc:	4a11      	ldr	r2, [pc, #68]	; (800c344 <prvCheckForValidListAndQueue+0x78>)
 800c2fe:	2110      	movs	r1, #16
 800c300:	200a      	movs	r0, #10
 800c302:	f7fe f929 	bl	800a558 <xQueueGenericCreateStatic>
 800c306:	4603      	mov	r3, r0
 800c308:	4a08      	ldr	r2, [pc, #32]	; (800c32c <prvCheckForValidListAndQueue+0x60>)
 800c30a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c30c:	4b07      	ldr	r3, [pc, #28]	; (800c32c <prvCheckForValidListAndQueue+0x60>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d005      	beq.n	800c320 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c314:	4b05      	ldr	r3, [pc, #20]	; (800c32c <prvCheckForValidListAndQueue+0x60>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	490b      	ldr	r1, [pc, #44]	; (800c348 <prvCheckForValidListAndQueue+0x7c>)
 800c31a:	4618      	mov	r0, r3
 800c31c:	f7fe fd42 	bl	800ada4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c320:	f7fd ffc0 	bl	800a2a4 <vPortExitCritical>
}
 800c324:	bf00      	nop
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
 800c32a:	bf00      	nop
 800c32c:	24004fd0 	.word	0x24004fd0
 800c330:	24004fa0 	.word	0x24004fa0
 800c334:	24004fb4 	.word	0x24004fb4
 800c338:	24004fc8 	.word	0x24004fc8
 800c33c:	24004fcc 	.word	0x24004fcc
 800c340:	2400507c 	.word	0x2400507c
 800c344:	24004fdc 	.word	0x24004fdc
 800c348:	0800f8cc 	.word	0x0800f8cc

0800c34c <__errno>:
 800c34c:	4b01      	ldr	r3, [pc, #4]	; (800c354 <__errno+0x8>)
 800c34e:	6818      	ldr	r0, [r3, #0]
 800c350:	4770      	bx	lr
 800c352:	bf00      	nop
 800c354:	2400001c 	.word	0x2400001c

0800c358 <std>:
 800c358:	2300      	movs	r3, #0
 800c35a:	b510      	push	{r4, lr}
 800c35c:	4604      	mov	r4, r0
 800c35e:	e9c0 3300 	strd	r3, r3, [r0]
 800c362:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c366:	6083      	str	r3, [r0, #8]
 800c368:	8181      	strh	r1, [r0, #12]
 800c36a:	6643      	str	r3, [r0, #100]	; 0x64
 800c36c:	81c2      	strh	r2, [r0, #14]
 800c36e:	6183      	str	r3, [r0, #24]
 800c370:	4619      	mov	r1, r3
 800c372:	2208      	movs	r2, #8
 800c374:	305c      	adds	r0, #92	; 0x5c
 800c376:	f000 f91a 	bl	800c5ae <memset>
 800c37a:	4b05      	ldr	r3, [pc, #20]	; (800c390 <std+0x38>)
 800c37c:	6263      	str	r3, [r4, #36]	; 0x24
 800c37e:	4b05      	ldr	r3, [pc, #20]	; (800c394 <std+0x3c>)
 800c380:	62a3      	str	r3, [r4, #40]	; 0x28
 800c382:	4b05      	ldr	r3, [pc, #20]	; (800c398 <std+0x40>)
 800c384:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c386:	4b05      	ldr	r3, [pc, #20]	; (800c39c <std+0x44>)
 800c388:	6224      	str	r4, [r4, #32]
 800c38a:	6323      	str	r3, [r4, #48]	; 0x30
 800c38c:	bd10      	pop	{r4, pc}
 800c38e:	bf00      	nop
 800c390:	0800d1bd 	.word	0x0800d1bd
 800c394:	0800d1df 	.word	0x0800d1df
 800c398:	0800d217 	.word	0x0800d217
 800c39c:	0800d23b 	.word	0x0800d23b

0800c3a0 <_cleanup_r>:
 800c3a0:	4901      	ldr	r1, [pc, #4]	; (800c3a8 <_cleanup_r+0x8>)
 800c3a2:	f000 b8af 	b.w	800c504 <_fwalk_reent>
 800c3a6:	bf00      	nop
 800c3a8:	0800e109 	.word	0x0800e109

0800c3ac <__sfmoreglue>:
 800c3ac:	b570      	push	{r4, r5, r6, lr}
 800c3ae:	2268      	movs	r2, #104	; 0x68
 800c3b0:	1e4d      	subs	r5, r1, #1
 800c3b2:	4355      	muls	r5, r2
 800c3b4:	460e      	mov	r6, r1
 800c3b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c3ba:	f000 f921 	bl	800c600 <_malloc_r>
 800c3be:	4604      	mov	r4, r0
 800c3c0:	b140      	cbz	r0, 800c3d4 <__sfmoreglue+0x28>
 800c3c2:	2100      	movs	r1, #0
 800c3c4:	e9c0 1600 	strd	r1, r6, [r0]
 800c3c8:	300c      	adds	r0, #12
 800c3ca:	60a0      	str	r0, [r4, #8]
 800c3cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c3d0:	f000 f8ed 	bl	800c5ae <memset>
 800c3d4:	4620      	mov	r0, r4
 800c3d6:	bd70      	pop	{r4, r5, r6, pc}

0800c3d8 <__sfp_lock_acquire>:
 800c3d8:	4801      	ldr	r0, [pc, #4]	; (800c3e0 <__sfp_lock_acquire+0x8>)
 800c3da:	f000 b8d8 	b.w	800c58e <__retarget_lock_acquire_recursive>
 800c3de:	bf00      	nop
 800c3e0:	240050cd 	.word	0x240050cd

0800c3e4 <__sfp_lock_release>:
 800c3e4:	4801      	ldr	r0, [pc, #4]	; (800c3ec <__sfp_lock_release+0x8>)
 800c3e6:	f000 b8d3 	b.w	800c590 <__retarget_lock_release_recursive>
 800c3ea:	bf00      	nop
 800c3ec:	240050cd 	.word	0x240050cd

0800c3f0 <__sinit_lock_acquire>:
 800c3f0:	4801      	ldr	r0, [pc, #4]	; (800c3f8 <__sinit_lock_acquire+0x8>)
 800c3f2:	f000 b8cc 	b.w	800c58e <__retarget_lock_acquire_recursive>
 800c3f6:	bf00      	nop
 800c3f8:	240050ce 	.word	0x240050ce

0800c3fc <__sinit_lock_release>:
 800c3fc:	4801      	ldr	r0, [pc, #4]	; (800c404 <__sinit_lock_release+0x8>)
 800c3fe:	f000 b8c7 	b.w	800c590 <__retarget_lock_release_recursive>
 800c402:	bf00      	nop
 800c404:	240050ce 	.word	0x240050ce

0800c408 <__sinit>:
 800c408:	b510      	push	{r4, lr}
 800c40a:	4604      	mov	r4, r0
 800c40c:	f7ff fff0 	bl	800c3f0 <__sinit_lock_acquire>
 800c410:	69a3      	ldr	r3, [r4, #24]
 800c412:	b11b      	cbz	r3, 800c41c <__sinit+0x14>
 800c414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c418:	f7ff bff0 	b.w	800c3fc <__sinit_lock_release>
 800c41c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c420:	6523      	str	r3, [r4, #80]	; 0x50
 800c422:	4b13      	ldr	r3, [pc, #76]	; (800c470 <__sinit+0x68>)
 800c424:	4a13      	ldr	r2, [pc, #76]	; (800c474 <__sinit+0x6c>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	62a2      	str	r2, [r4, #40]	; 0x28
 800c42a:	42a3      	cmp	r3, r4
 800c42c:	bf04      	itt	eq
 800c42e:	2301      	moveq	r3, #1
 800c430:	61a3      	streq	r3, [r4, #24]
 800c432:	4620      	mov	r0, r4
 800c434:	f000 f820 	bl	800c478 <__sfp>
 800c438:	6060      	str	r0, [r4, #4]
 800c43a:	4620      	mov	r0, r4
 800c43c:	f000 f81c 	bl	800c478 <__sfp>
 800c440:	60a0      	str	r0, [r4, #8]
 800c442:	4620      	mov	r0, r4
 800c444:	f000 f818 	bl	800c478 <__sfp>
 800c448:	2200      	movs	r2, #0
 800c44a:	60e0      	str	r0, [r4, #12]
 800c44c:	2104      	movs	r1, #4
 800c44e:	6860      	ldr	r0, [r4, #4]
 800c450:	f7ff ff82 	bl	800c358 <std>
 800c454:	68a0      	ldr	r0, [r4, #8]
 800c456:	2201      	movs	r2, #1
 800c458:	2109      	movs	r1, #9
 800c45a:	f7ff ff7d 	bl	800c358 <std>
 800c45e:	68e0      	ldr	r0, [r4, #12]
 800c460:	2202      	movs	r2, #2
 800c462:	2112      	movs	r1, #18
 800c464:	f7ff ff78 	bl	800c358 <std>
 800c468:	2301      	movs	r3, #1
 800c46a:	61a3      	str	r3, [r4, #24]
 800c46c:	e7d2      	b.n	800c414 <__sinit+0xc>
 800c46e:	bf00      	nop
 800c470:	0800f9a0 	.word	0x0800f9a0
 800c474:	0800c3a1 	.word	0x0800c3a1

0800c478 <__sfp>:
 800c478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c47a:	4607      	mov	r7, r0
 800c47c:	f7ff ffac 	bl	800c3d8 <__sfp_lock_acquire>
 800c480:	4b1e      	ldr	r3, [pc, #120]	; (800c4fc <__sfp+0x84>)
 800c482:	681e      	ldr	r6, [r3, #0]
 800c484:	69b3      	ldr	r3, [r6, #24]
 800c486:	b913      	cbnz	r3, 800c48e <__sfp+0x16>
 800c488:	4630      	mov	r0, r6
 800c48a:	f7ff ffbd 	bl	800c408 <__sinit>
 800c48e:	3648      	adds	r6, #72	; 0x48
 800c490:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c494:	3b01      	subs	r3, #1
 800c496:	d503      	bpl.n	800c4a0 <__sfp+0x28>
 800c498:	6833      	ldr	r3, [r6, #0]
 800c49a:	b30b      	cbz	r3, 800c4e0 <__sfp+0x68>
 800c49c:	6836      	ldr	r6, [r6, #0]
 800c49e:	e7f7      	b.n	800c490 <__sfp+0x18>
 800c4a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c4a4:	b9d5      	cbnz	r5, 800c4dc <__sfp+0x64>
 800c4a6:	4b16      	ldr	r3, [pc, #88]	; (800c500 <__sfp+0x88>)
 800c4a8:	60e3      	str	r3, [r4, #12]
 800c4aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c4ae:	6665      	str	r5, [r4, #100]	; 0x64
 800c4b0:	f000 f86c 	bl	800c58c <__retarget_lock_init_recursive>
 800c4b4:	f7ff ff96 	bl	800c3e4 <__sfp_lock_release>
 800c4b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c4bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c4c0:	6025      	str	r5, [r4, #0]
 800c4c2:	61a5      	str	r5, [r4, #24]
 800c4c4:	2208      	movs	r2, #8
 800c4c6:	4629      	mov	r1, r5
 800c4c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c4cc:	f000 f86f 	bl	800c5ae <memset>
 800c4d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c4d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c4d8:	4620      	mov	r0, r4
 800c4da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4dc:	3468      	adds	r4, #104	; 0x68
 800c4de:	e7d9      	b.n	800c494 <__sfp+0x1c>
 800c4e0:	2104      	movs	r1, #4
 800c4e2:	4638      	mov	r0, r7
 800c4e4:	f7ff ff62 	bl	800c3ac <__sfmoreglue>
 800c4e8:	4604      	mov	r4, r0
 800c4ea:	6030      	str	r0, [r6, #0]
 800c4ec:	2800      	cmp	r0, #0
 800c4ee:	d1d5      	bne.n	800c49c <__sfp+0x24>
 800c4f0:	f7ff ff78 	bl	800c3e4 <__sfp_lock_release>
 800c4f4:	230c      	movs	r3, #12
 800c4f6:	603b      	str	r3, [r7, #0]
 800c4f8:	e7ee      	b.n	800c4d8 <__sfp+0x60>
 800c4fa:	bf00      	nop
 800c4fc:	0800f9a0 	.word	0x0800f9a0
 800c500:	ffff0001 	.word	0xffff0001

0800c504 <_fwalk_reent>:
 800c504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c508:	4606      	mov	r6, r0
 800c50a:	4688      	mov	r8, r1
 800c50c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c510:	2700      	movs	r7, #0
 800c512:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c516:	f1b9 0901 	subs.w	r9, r9, #1
 800c51a:	d505      	bpl.n	800c528 <_fwalk_reent+0x24>
 800c51c:	6824      	ldr	r4, [r4, #0]
 800c51e:	2c00      	cmp	r4, #0
 800c520:	d1f7      	bne.n	800c512 <_fwalk_reent+0xe>
 800c522:	4638      	mov	r0, r7
 800c524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c528:	89ab      	ldrh	r3, [r5, #12]
 800c52a:	2b01      	cmp	r3, #1
 800c52c:	d907      	bls.n	800c53e <_fwalk_reent+0x3a>
 800c52e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c532:	3301      	adds	r3, #1
 800c534:	d003      	beq.n	800c53e <_fwalk_reent+0x3a>
 800c536:	4629      	mov	r1, r5
 800c538:	4630      	mov	r0, r6
 800c53a:	47c0      	blx	r8
 800c53c:	4307      	orrs	r7, r0
 800c53e:	3568      	adds	r5, #104	; 0x68
 800c540:	e7e9      	b.n	800c516 <_fwalk_reent+0x12>
	...

0800c544 <__libc_init_array>:
 800c544:	b570      	push	{r4, r5, r6, lr}
 800c546:	4d0d      	ldr	r5, [pc, #52]	; (800c57c <__libc_init_array+0x38>)
 800c548:	4c0d      	ldr	r4, [pc, #52]	; (800c580 <__libc_init_array+0x3c>)
 800c54a:	1b64      	subs	r4, r4, r5
 800c54c:	10a4      	asrs	r4, r4, #2
 800c54e:	2600      	movs	r6, #0
 800c550:	42a6      	cmp	r6, r4
 800c552:	d109      	bne.n	800c568 <__libc_init_array+0x24>
 800c554:	4d0b      	ldr	r5, [pc, #44]	; (800c584 <__libc_init_array+0x40>)
 800c556:	4c0c      	ldr	r4, [pc, #48]	; (800c588 <__libc_init_array+0x44>)
 800c558:	f002 fe5e 	bl	800f218 <_init>
 800c55c:	1b64      	subs	r4, r4, r5
 800c55e:	10a4      	asrs	r4, r4, #2
 800c560:	2600      	movs	r6, #0
 800c562:	42a6      	cmp	r6, r4
 800c564:	d105      	bne.n	800c572 <__libc_init_array+0x2e>
 800c566:	bd70      	pop	{r4, r5, r6, pc}
 800c568:	f855 3b04 	ldr.w	r3, [r5], #4
 800c56c:	4798      	blx	r3
 800c56e:	3601      	adds	r6, #1
 800c570:	e7ee      	b.n	800c550 <__libc_init_array+0xc>
 800c572:	f855 3b04 	ldr.w	r3, [r5], #4
 800c576:	4798      	blx	r3
 800c578:	3601      	adds	r6, #1
 800c57a:	e7f2      	b.n	800c562 <__libc_init_array+0x1e>
 800c57c:	0800fd24 	.word	0x0800fd24
 800c580:	0800fd24 	.word	0x0800fd24
 800c584:	0800fd24 	.word	0x0800fd24
 800c588:	0800fd28 	.word	0x0800fd28

0800c58c <__retarget_lock_init_recursive>:
 800c58c:	4770      	bx	lr

0800c58e <__retarget_lock_acquire_recursive>:
 800c58e:	4770      	bx	lr

0800c590 <__retarget_lock_release_recursive>:
 800c590:	4770      	bx	lr

0800c592 <memcpy>:
 800c592:	440a      	add	r2, r1
 800c594:	4291      	cmp	r1, r2
 800c596:	f100 33ff 	add.w	r3, r0, #4294967295
 800c59a:	d100      	bne.n	800c59e <memcpy+0xc>
 800c59c:	4770      	bx	lr
 800c59e:	b510      	push	{r4, lr}
 800c5a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c5a8:	4291      	cmp	r1, r2
 800c5aa:	d1f9      	bne.n	800c5a0 <memcpy+0xe>
 800c5ac:	bd10      	pop	{r4, pc}

0800c5ae <memset>:
 800c5ae:	4402      	add	r2, r0
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	d100      	bne.n	800c5b8 <memset+0xa>
 800c5b6:	4770      	bx	lr
 800c5b8:	f803 1b01 	strb.w	r1, [r3], #1
 800c5bc:	e7f9      	b.n	800c5b2 <memset+0x4>
	...

0800c5c0 <sbrk_aligned>:
 800c5c0:	b570      	push	{r4, r5, r6, lr}
 800c5c2:	4e0e      	ldr	r6, [pc, #56]	; (800c5fc <sbrk_aligned+0x3c>)
 800c5c4:	460c      	mov	r4, r1
 800c5c6:	6831      	ldr	r1, [r6, #0]
 800c5c8:	4605      	mov	r5, r0
 800c5ca:	b911      	cbnz	r1, 800c5d2 <sbrk_aligned+0x12>
 800c5cc:	f000 fdc6 	bl	800d15c <_sbrk_r>
 800c5d0:	6030      	str	r0, [r6, #0]
 800c5d2:	4621      	mov	r1, r4
 800c5d4:	4628      	mov	r0, r5
 800c5d6:	f000 fdc1 	bl	800d15c <_sbrk_r>
 800c5da:	1c43      	adds	r3, r0, #1
 800c5dc:	d00a      	beq.n	800c5f4 <sbrk_aligned+0x34>
 800c5de:	1cc4      	adds	r4, r0, #3
 800c5e0:	f024 0403 	bic.w	r4, r4, #3
 800c5e4:	42a0      	cmp	r0, r4
 800c5e6:	d007      	beq.n	800c5f8 <sbrk_aligned+0x38>
 800c5e8:	1a21      	subs	r1, r4, r0
 800c5ea:	4628      	mov	r0, r5
 800c5ec:	f000 fdb6 	bl	800d15c <_sbrk_r>
 800c5f0:	3001      	adds	r0, #1
 800c5f2:	d101      	bne.n	800c5f8 <sbrk_aligned+0x38>
 800c5f4:	f04f 34ff 	mov.w	r4, #4294967295
 800c5f8:	4620      	mov	r0, r4
 800c5fa:	bd70      	pop	{r4, r5, r6, pc}
 800c5fc:	240050d4 	.word	0x240050d4

0800c600 <_malloc_r>:
 800c600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c604:	1ccd      	adds	r5, r1, #3
 800c606:	f025 0503 	bic.w	r5, r5, #3
 800c60a:	3508      	adds	r5, #8
 800c60c:	2d0c      	cmp	r5, #12
 800c60e:	bf38      	it	cc
 800c610:	250c      	movcc	r5, #12
 800c612:	2d00      	cmp	r5, #0
 800c614:	4607      	mov	r7, r0
 800c616:	db01      	blt.n	800c61c <_malloc_r+0x1c>
 800c618:	42a9      	cmp	r1, r5
 800c61a:	d905      	bls.n	800c628 <_malloc_r+0x28>
 800c61c:	230c      	movs	r3, #12
 800c61e:	603b      	str	r3, [r7, #0]
 800c620:	2600      	movs	r6, #0
 800c622:	4630      	mov	r0, r6
 800c624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c628:	4e2e      	ldr	r6, [pc, #184]	; (800c6e4 <_malloc_r+0xe4>)
 800c62a:	f001 fe2d 	bl	800e288 <__malloc_lock>
 800c62e:	6833      	ldr	r3, [r6, #0]
 800c630:	461c      	mov	r4, r3
 800c632:	bb34      	cbnz	r4, 800c682 <_malloc_r+0x82>
 800c634:	4629      	mov	r1, r5
 800c636:	4638      	mov	r0, r7
 800c638:	f7ff ffc2 	bl	800c5c0 <sbrk_aligned>
 800c63c:	1c43      	adds	r3, r0, #1
 800c63e:	4604      	mov	r4, r0
 800c640:	d14d      	bne.n	800c6de <_malloc_r+0xde>
 800c642:	6834      	ldr	r4, [r6, #0]
 800c644:	4626      	mov	r6, r4
 800c646:	2e00      	cmp	r6, #0
 800c648:	d140      	bne.n	800c6cc <_malloc_r+0xcc>
 800c64a:	6823      	ldr	r3, [r4, #0]
 800c64c:	4631      	mov	r1, r6
 800c64e:	4638      	mov	r0, r7
 800c650:	eb04 0803 	add.w	r8, r4, r3
 800c654:	f000 fd82 	bl	800d15c <_sbrk_r>
 800c658:	4580      	cmp	r8, r0
 800c65a:	d13a      	bne.n	800c6d2 <_malloc_r+0xd2>
 800c65c:	6821      	ldr	r1, [r4, #0]
 800c65e:	3503      	adds	r5, #3
 800c660:	1a6d      	subs	r5, r5, r1
 800c662:	f025 0503 	bic.w	r5, r5, #3
 800c666:	3508      	adds	r5, #8
 800c668:	2d0c      	cmp	r5, #12
 800c66a:	bf38      	it	cc
 800c66c:	250c      	movcc	r5, #12
 800c66e:	4629      	mov	r1, r5
 800c670:	4638      	mov	r0, r7
 800c672:	f7ff ffa5 	bl	800c5c0 <sbrk_aligned>
 800c676:	3001      	adds	r0, #1
 800c678:	d02b      	beq.n	800c6d2 <_malloc_r+0xd2>
 800c67a:	6823      	ldr	r3, [r4, #0]
 800c67c:	442b      	add	r3, r5
 800c67e:	6023      	str	r3, [r4, #0]
 800c680:	e00e      	b.n	800c6a0 <_malloc_r+0xa0>
 800c682:	6822      	ldr	r2, [r4, #0]
 800c684:	1b52      	subs	r2, r2, r5
 800c686:	d41e      	bmi.n	800c6c6 <_malloc_r+0xc6>
 800c688:	2a0b      	cmp	r2, #11
 800c68a:	d916      	bls.n	800c6ba <_malloc_r+0xba>
 800c68c:	1961      	adds	r1, r4, r5
 800c68e:	42a3      	cmp	r3, r4
 800c690:	6025      	str	r5, [r4, #0]
 800c692:	bf18      	it	ne
 800c694:	6059      	strne	r1, [r3, #4]
 800c696:	6863      	ldr	r3, [r4, #4]
 800c698:	bf08      	it	eq
 800c69a:	6031      	streq	r1, [r6, #0]
 800c69c:	5162      	str	r2, [r4, r5]
 800c69e:	604b      	str	r3, [r1, #4]
 800c6a0:	4638      	mov	r0, r7
 800c6a2:	f104 060b 	add.w	r6, r4, #11
 800c6a6:	f001 fdf5 	bl	800e294 <__malloc_unlock>
 800c6aa:	f026 0607 	bic.w	r6, r6, #7
 800c6ae:	1d23      	adds	r3, r4, #4
 800c6b0:	1af2      	subs	r2, r6, r3
 800c6b2:	d0b6      	beq.n	800c622 <_malloc_r+0x22>
 800c6b4:	1b9b      	subs	r3, r3, r6
 800c6b6:	50a3      	str	r3, [r4, r2]
 800c6b8:	e7b3      	b.n	800c622 <_malloc_r+0x22>
 800c6ba:	6862      	ldr	r2, [r4, #4]
 800c6bc:	42a3      	cmp	r3, r4
 800c6be:	bf0c      	ite	eq
 800c6c0:	6032      	streq	r2, [r6, #0]
 800c6c2:	605a      	strne	r2, [r3, #4]
 800c6c4:	e7ec      	b.n	800c6a0 <_malloc_r+0xa0>
 800c6c6:	4623      	mov	r3, r4
 800c6c8:	6864      	ldr	r4, [r4, #4]
 800c6ca:	e7b2      	b.n	800c632 <_malloc_r+0x32>
 800c6cc:	4634      	mov	r4, r6
 800c6ce:	6876      	ldr	r6, [r6, #4]
 800c6d0:	e7b9      	b.n	800c646 <_malloc_r+0x46>
 800c6d2:	230c      	movs	r3, #12
 800c6d4:	603b      	str	r3, [r7, #0]
 800c6d6:	4638      	mov	r0, r7
 800c6d8:	f001 fddc 	bl	800e294 <__malloc_unlock>
 800c6dc:	e7a1      	b.n	800c622 <_malloc_r+0x22>
 800c6de:	6025      	str	r5, [r4, #0]
 800c6e0:	e7de      	b.n	800c6a0 <_malloc_r+0xa0>
 800c6e2:	bf00      	nop
 800c6e4:	240050d0 	.word	0x240050d0

0800c6e8 <__cvt>:
 800c6e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6ea:	ed2d 8b02 	vpush	{d8}
 800c6ee:	eeb0 8b40 	vmov.f64	d8, d0
 800c6f2:	b085      	sub	sp, #20
 800c6f4:	4617      	mov	r7, r2
 800c6f6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c6f8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c6fa:	ee18 2a90 	vmov	r2, s17
 800c6fe:	f025 0520 	bic.w	r5, r5, #32
 800c702:	2a00      	cmp	r2, #0
 800c704:	bfb6      	itet	lt
 800c706:	222d      	movlt	r2, #45	; 0x2d
 800c708:	2200      	movge	r2, #0
 800c70a:	eeb1 8b40 	vneglt.f64	d8, d0
 800c70e:	2d46      	cmp	r5, #70	; 0x46
 800c710:	460c      	mov	r4, r1
 800c712:	701a      	strb	r2, [r3, #0]
 800c714:	d004      	beq.n	800c720 <__cvt+0x38>
 800c716:	2d45      	cmp	r5, #69	; 0x45
 800c718:	d100      	bne.n	800c71c <__cvt+0x34>
 800c71a:	3401      	adds	r4, #1
 800c71c:	2102      	movs	r1, #2
 800c71e:	e000      	b.n	800c722 <__cvt+0x3a>
 800c720:	2103      	movs	r1, #3
 800c722:	ab03      	add	r3, sp, #12
 800c724:	9301      	str	r3, [sp, #4]
 800c726:	ab02      	add	r3, sp, #8
 800c728:	9300      	str	r3, [sp, #0]
 800c72a:	4622      	mov	r2, r4
 800c72c:	4633      	mov	r3, r6
 800c72e:	eeb0 0b48 	vmov.f64	d0, d8
 800c732:	f000 fef5 	bl	800d520 <_dtoa_r>
 800c736:	2d47      	cmp	r5, #71	; 0x47
 800c738:	d101      	bne.n	800c73e <__cvt+0x56>
 800c73a:	07fb      	lsls	r3, r7, #31
 800c73c:	d51a      	bpl.n	800c774 <__cvt+0x8c>
 800c73e:	2d46      	cmp	r5, #70	; 0x46
 800c740:	eb00 0204 	add.w	r2, r0, r4
 800c744:	d10c      	bne.n	800c760 <__cvt+0x78>
 800c746:	7803      	ldrb	r3, [r0, #0]
 800c748:	2b30      	cmp	r3, #48	; 0x30
 800c74a:	d107      	bne.n	800c75c <__cvt+0x74>
 800c74c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c754:	bf1c      	itt	ne
 800c756:	f1c4 0401 	rsbne	r4, r4, #1
 800c75a:	6034      	strne	r4, [r6, #0]
 800c75c:	6833      	ldr	r3, [r6, #0]
 800c75e:	441a      	add	r2, r3
 800c760:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c768:	bf08      	it	eq
 800c76a:	9203      	streq	r2, [sp, #12]
 800c76c:	2130      	movs	r1, #48	; 0x30
 800c76e:	9b03      	ldr	r3, [sp, #12]
 800c770:	4293      	cmp	r3, r2
 800c772:	d307      	bcc.n	800c784 <__cvt+0x9c>
 800c774:	9b03      	ldr	r3, [sp, #12]
 800c776:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c778:	1a1b      	subs	r3, r3, r0
 800c77a:	6013      	str	r3, [r2, #0]
 800c77c:	b005      	add	sp, #20
 800c77e:	ecbd 8b02 	vpop	{d8}
 800c782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c784:	1c5c      	adds	r4, r3, #1
 800c786:	9403      	str	r4, [sp, #12]
 800c788:	7019      	strb	r1, [r3, #0]
 800c78a:	e7f0      	b.n	800c76e <__cvt+0x86>

0800c78c <__exponent>:
 800c78c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c78e:	4603      	mov	r3, r0
 800c790:	2900      	cmp	r1, #0
 800c792:	bfb8      	it	lt
 800c794:	4249      	neglt	r1, r1
 800c796:	f803 2b02 	strb.w	r2, [r3], #2
 800c79a:	bfb4      	ite	lt
 800c79c:	222d      	movlt	r2, #45	; 0x2d
 800c79e:	222b      	movge	r2, #43	; 0x2b
 800c7a0:	2909      	cmp	r1, #9
 800c7a2:	7042      	strb	r2, [r0, #1]
 800c7a4:	dd2a      	ble.n	800c7fc <__exponent+0x70>
 800c7a6:	f10d 0407 	add.w	r4, sp, #7
 800c7aa:	46a4      	mov	ip, r4
 800c7ac:	270a      	movs	r7, #10
 800c7ae:	46a6      	mov	lr, r4
 800c7b0:	460a      	mov	r2, r1
 800c7b2:	fb91 f6f7 	sdiv	r6, r1, r7
 800c7b6:	fb07 1516 	mls	r5, r7, r6, r1
 800c7ba:	3530      	adds	r5, #48	; 0x30
 800c7bc:	2a63      	cmp	r2, #99	; 0x63
 800c7be:	f104 34ff 	add.w	r4, r4, #4294967295
 800c7c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c7c6:	4631      	mov	r1, r6
 800c7c8:	dcf1      	bgt.n	800c7ae <__exponent+0x22>
 800c7ca:	3130      	adds	r1, #48	; 0x30
 800c7cc:	f1ae 0502 	sub.w	r5, lr, #2
 800c7d0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c7d4:	1c44      	adds	r4, r0, #1
 800c7d6:	4629      	mov	r1, r5
 800c7d8:	4561      	cmp	r1, ip
 800c7da:	d30a      	bcc.n	800c7f2 <__exponent+0x66>
 800c7dc:	f10d 0209 	add.w	r2, sp, #9
 800c7e0:	eba2 020e 	sub.w	r2, r2, lr
 800c7e4:	4565      	cmp	r5, ip
 800c7e6:	bf88      	it	hi
 800c7e8:	2200      	movhi	r2, #0
 800c7ea:	4413      	add	r3, r2
 800c7ec:	1a18      	subs	r0, r3, r0
 800c7ee:	b003      	add	sp, #12
 800c7f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c7f6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c7fa:	e7ed      	b.n	800c7d8 <__exponent+0x4c>
 800c7fc:	2330      	movs	r3, #48	; 0x30
 800c7fe:	3130      	adds	r1, #48	; 0x30
 800c800:	7083      	strb	r3, [r0, #2]
 800c802:	70c1      	strb	r1, [r0, #3]
 800c804:	1d03      	adds	r3, r0, #4
 800c806:	e7f1      	b.n	800c7ec <__exponent+0x60>

0800c808 <_printf_float>:
 800c808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c80c:	b08b      	sub	sp, #44	; 0x2c
 800c80e:	460c      	mov	r4, r1
 800c810:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800c814:	4616      	mov	r6, r2
 800c816:	461f      	mov	r7, r3
 800c818:	4605      	mov	r5, r0
 800c81a:	f001 fcb1 	bl	800e180 <_localeconv_r>
 800c81e:	f8d0 b000 	ldr.w	fp, [r0]
 800c822:	4658      	mov	r0, fp
 800c824:	f7f3 fd5c 	bl	80002e0 <strlen>
 800c828:	2300      	movs	r3, #0
 800c82a:	9308      	str	r3, [sp, #32]
 800c82c:	f8d8 3000 	ldr.w	r3, [r8]
 800c830:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c834:	6822      	ldr	r2, [r4, #0]
 800c836:	3307      	adds	r3, #7
 800c838:	f023 0307 	bic.w	r3, r3, #7
 800c83c:	f103 0108 	add.w	r1, r3, #8
 800c840:	f8c8 1000 	str.w	r1, [r8]
 800c844:	4682      	mov	sl, r0
 800c846:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c84a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800c84e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800cab0 <_printf_float+0x2a8>
 800c852:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800c856:	eeb0 6bc0 	vabs.f64	d6, d0
 800c85a:	eeb4 6b47 	vcmp.f64	d6, d7
 800c85e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c862:	dd24      	ble.n	800c8ae <_printf_float+0xa6>
 800c864:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c86c:	d502      	bpl.n	800c874 <_printf_float+0x6c>
 800c86e:	232d      	movs	r3, #45	; 0x2d
 800c870:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c874:	4b90      	ldr	r3, [pc, #576]	; (800cab8 <_printf_float+0x2b0>)
 800c876:	4891      	ldr	r0, [pc, #580]	; (800cabc <_printf_float+0x2b4>)
 800c878:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c87c:	bf94      	ite	ls
 800c87e:	4698      	movls	r8, r3
 800c880:	4680      	movhi	r8, r0
 800c882:	2303      	movs	r3, #3
 800c884:	6123      	str	r3, [r4, #16]
 800c886:	f022 0204 	bic.w	r2, r2, #4
 800c88a:	2300      	movs	r3, #0
 800c88c:	6022      	str	r2, [r4, #0]
 800c88e:	9304      	str	r3, [sp, #16]
 800c890:	9700      	str	r7, [sp, #0]
 800c892:	4633      	mov	r3, r6
 800c894:	aa09      	add	r2, sp, #36	; 0x24
 800c896:	4621      	mov	r1, r4
 800c898:	4628      	mov	r0, r5
 800c89a:	f000 f9d3 	bl	800cc44 <_printf_common>
 800c89e:	3001      	adds	r0, #1
 800c8a0:	f040 808a 	bne.w	800c9b8 <_printf_float+0x1b0>
 800c8a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c8a8:	b00b      	add	sp, #44	; 0x2c
 800c8aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8ae:	eeb4 0b40 	vcmp.f64	d0, d0
 800c8b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8b6:	d709      	bvc.n	800c8cc <_printf_float+0xc4>
 800c8b8:	ee10 3a90 	vmov	r3, s1
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	bfbc      	itt	lt
 800c8c0:	232d      	movlt	r3, #45	; 0x2d
 800c8c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c8c6:	487e      	ldr	r0, [pc, #504]	; (800cac0 <_printf_float+0x2b8>)
 800c8c8:	4b7e      	ldr	r3, [pc, #504]	; (800cac4 <_printf_float+0x2bc>)
 800c8ca:	e7d5      	b.n	800c878 <_printf_float+0x70>
 800c8cc:	6863      	ldr	r3, [r4, #4]
 800c8ce:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800c8d2:	9104      	str	r1, [sp, #16]
 800c8d4:	1c59      	adds	r1, r3, #1
 800c8d6:	d13c      	bne.n	800c952 <_printf_float+0x14a>
 800c8d8:	2306      	movs	r3, #6
 800c8da:	6063      	str	r3, [r4, #4]
 800c8dc:	2300      	movs	r3, #0
 800c8de:	9303      	str	r3, [sp, #12]
 800c8e0:	ab08      	add	r3, sp, #32
 800c8e2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800c8e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c8ea:	ab07      	add	r3, sp, #28
 800c8ec:	6861      	ldr	r1, [r4, #4]
 800c8ee:	9300      	str	r3, [sp, #0]
 800c8f0:	6022      	str	r2, [r4, #0]
 800c8f2:	f10d 031b 	add.w	r3, sp, #27
 800c8f6:	4628      	mov	r0, r5
 800c8f8:	f7ff fef6 	bl	800c6e8 <__cvt>
 800c8fc:	9b04      	ldr	r3, [sp, #16]
 800c8fe:	9907      	ldr	r1, [sp, #28]
 800c900:	2b47      	cmp	r3, #71	; 0x47
 800c902:	4680      	mov	r8, r0
 800c904:	d108      	bne.n	800c918 <_printf_float+0x110>
 800c906:	1cc8      	adds	r0, r1, #3
 800c908:	db02      	blt.n	800c910 <_printf_float+0x108>
 800c90a:	6863      	ldr	r3, [r4, #4]
 800c90c:	4299      	cmp	r1, r3
 800c90e:	dd41      	ble.n	800c994 <_printf_float+0x18c>
 800c910:	f1a9 0902 	sub.w	r9, r9, #2
 800c914:	fa5f f989 	uxtb.w	r9, r9
 800c918:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c91c:	d820      	bhi.n	800c960 <_printf_float+0x158>
 800c91e:	3901      	subs	r1, #1
 800c920:	464a      	mov	r2, r9
 800c922:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c926:	9107      	str	r1, [sp, #28]
 800c928:	f7ff ff30 	bl	800c78c <__exponent>
 800c92c:	9a08      	ldr	r2, [sp, #32]
 800c92e:	9004      	str	r0, [sp, #16]
 800c930:	1813      	adds	r3, r2, r0
 800c932:	2a01      	cmp	r2, #1
 800c934:	6123      	str	r3, [r4, #16]
 800c936:	dc02      	bgt.n	800c93e <_printf_float+0x136>
 800c938:	6822      	ldr	r2, [r4, #0]
 800c93a:	07d2      	lsls	r2, r2, #31
 800c93c:	d501      	bpl.n	800c942 <_printf_float+0x13a>
 800c93e:	3301      	adds	r3, #1
 800c940:	6123      	str	r3, [r4, #16]
 800c942:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d0a2      	beq.n	800c890 <_printf_float+0x88>
 800c94a:	232d      	movs	r3, #45	; 0x2d
 800c94c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c950:	e79e      	b.n	800c890 <_printf_float+0x88>
 800c952:	9904      	ldr	r1, [sp, #16]
 800c954:	2947      	cmp	r1, #71	; 0x47
 800c956:	d1c1      	bne.n	800c8dc <_printf_float+0xd4>
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d1bf      	bne.n	800c8dc <_printf_float+0xd4>
 800c95c:	2301      	movs	r3, #1
 800c95e:	e7bc      	b.n	800c8da <_printf_float+0xd2>
 800c960:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800c964:	d118      	bne.n	800c998 <_printf_float+0x190>
 800c966:	2900      	cmp	r1, #0
 800c968:	6863      	ldr	r3, [r4, #4]
 800c96a:	dd0b      	ble.n	800c984 <_printf_float+0x17c>
 800c96c:	6121      	str	r1, [r4, #16]
 800c96e:	b913      	cbnz	r3, 800c976 <_printf_float+0x16e>
 800c970:	6822      	ldr	r2, [r4, #0]
 800c972:	07d0      	lsls	r0, r2, #31
 800c974:	d502      	bpl.n	800c97c <_printf_float+0x174>
 800c976:	3301      	adds	r3, #1
 800c978:	440b      	add	r3, r1
 800c97a:	6123      	str	r3, [r4, #16]
 800c97c:	2300      	movs	r3, #0
 800c97e:	65a1      	str	r1, [r4, #88]	; 0x58
 800c980:	9304      	str	r3, [sp, #16]
 800c982:	e7de      	b.n	800c942 <_printf_float+0x13a>
 800c984:	b913      	cbnz	r3, 800c98c <_printf_float+0x184>
 800c986:	6822      	ldr	r2, [r4, #0]
 800c988:	07d2      	lsls	r2, r2, #31
 800c98a:	d501      	bpl.n	800c990 <_printf_float+0x188>
 800c98c:	3302      	adds	r3, #2
 800c98e:	e7f4      	b.n	800c97a <_printf_float+0x172>
 800c990:	2301      	movs	r3, #1
 800c992:	e7f2      	b.n	800c97a <_printf_float+0x172>
 800c994:	f04f 0967 	mov.w	r9, #103	; 0x67
 800c998:	9b08      	ldr	r3, [sp, #32]
 800c99a:	4299      	cmp	r1, r3
 800c99c:	db05      	blt.n	800c9aa <_printf_float+0x1a2>
 800c99e:	6823      	ldr	r3, [r4, #0]
 800c9a0:	6121      	str	r1, [r4, #16]
 800c9a2:	07d8      	lsls	r0, r3, #31
 800c9a4:	d5ea      	bpl.n	800c97c <_printf_float+0x174>
 800c9a6:	1c4b      	adds	r3, r1, #1
 800c9a8:	e7e7      	b.n	800c97a <_printf_float+0x172>
 800c9aa:	2900      	cmp	r1, #0
 800c9ac:	bfd4      	ite	le
 800c9ae:	f1c1 0202 	rsble	r2, r1, #2
 800c9b2:	2201      	movgt	r2, #1
 800c9b4:	4413      	add	r3, r2
 800c9b6:	e7e0      	b.n	800c97a <_printf_float+0x172>
 800c9b8:	6823      	ldr	r3, [r4, #0]
 800c9ba:	055a      	lsls	r2, r3, #21
 800c9bc:	d407      	bmi.n	800c9ce <_printf_float+0x1c6>
 800c9be:	6923      	ldr	r3, [r4, #16]
 800c9c0:	4642      	mov	r2, r8
 800c9c2:	4631      	mov	r1, r6
 800c9c4:	4628      	mov	r0, r5
 800c9c6:	47b8      	blx	r7
 800c9c8:	3001      	adds	r0, #1
 800c9ca:	d12a      	bne.n	800ca22 <_printf_float+0x21a>
 800c9cc:	e76a      	b.n	800c8a4 <_printf_float+0x9c>
 800c9ce:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c9d2:	f240 80e2 	bls.w	800cb9a <_printf_float+0x392>
 800c9d6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c9da:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c9de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9e2:	d133      	bne.n	800ca4c <_printf_float+0x244>
 800c9e4:	4a38      	ldr	r2, [pc, #224]	; (800cac8 <_printf_float+0x2c0>)
 800c9e6:	2301      	movs	r3, #1
 800c9e8:	4631      	mov	r1, r6
 800c9ea:	4628      	mov	r0, r5
 800c9ec:	47b8      	blx	r7
 800c9ee:	3001      	adds	r0, #1
 800c9f0:	f43f af58 	beq.w	800c8a4 <_printf_float+0x9c>
 800c9f4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c9f8:	429a      	cmp	r2, r3
 800c9fa:	db02      	blt.n	800ca02 <_printf_float+0x1fa>
 800c9fc:	6823      	ldr	r3, [r4, #0]
 800c9fe:	07d8      	lsls	r0, r3, #31
 800ca00:	d50f      	bpl.n	800ca22 <_printf_float+0x21a>
 800ca02:	4653      	mov	r3, sl
 800ca04:	465a      	mov	r2, fp
 800ca06:	4631      	mov	r1, r6
 800ca08:	4628      	mov	r0, r5
 800ca0a:	47b8      	blx	r7
 800ca0c:	3001      	adds	r0, #1
 800ca0e:	f43f af49 	beq.w	800c8a4 <_printf_float+0x9c>
 800ca12:	f04f 0800 	mov.w	r8, #0
 800ca16:	f104 091a 	add.w	r9, r4, #26
 800ca1a:	9b08      	ldr	r3, [sp, #32]
 800ca1c:	3b01      	subs	r3, #1
 800ca1e:	4543      	cmp	r3, r8
 800ca20:	dc09      	bgt.n	800ca36 <_printf_float+0x22e>
 800ca22:	6823      	ldr	r3, [r4, #0]
 800ca24:	079b      	lsls	r3, r3, #30
 800ca26:	f100 8108 	bmi.w	800cc3a <_printf_float+0x432>
 800ca2a:	68e0      	ldr	r0, [r4, #12]
 800ca2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca2e:	4298      	cmp	r0, r3
 800ca30:	bfb8      	it	lt
 800ca32:	4618      	movlt	r0, r3
 800ca34:	e738      	b.n	800c8a8 <_printf_float+0xa0>
 800ca36:	2301      	movs	r3, #1
 800ca38:	464a      	mov	r2, r9
 800ca3a:	4631      	mov	r1, r6
 800ca3c:	4628      	mov	r0, r5
 800ca3e:	47b8      	blx	r7
 800ca40:	3001      	adds	r0, #1
 800ca42:	f43f af2f 	beq.w	800c8a4 <_printf_float+0x9c>
 800ca46:	f108 0801 	add.w	r8, r8, #1
 800ca4a:	e7e6      	b.n	800ca1a <_printf_float+0x212>
 800ca4c:	9b07      	ldr	r3, [sp, #28]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	dc3c      	bgt.n	800cacc <_printf_float+0x2c4>
 800ca52:	4a1d      	ldr	r2, [pc, #116]	; (800cac8 <_printf_float+0x2c0>)
 800ca54:	2301      	movs	r3, #1
 800ca56:	4631      	mov	r1, r6
 800ca58:	4628      	mov	r0, r5
 800ca5a:	47b8      	blx	r7
 800ca5c:	3001      	adds	r0, #1
 800ca5e:	f43f af21 	beq.w	800c8a4 <_printf_float+0x9c>
 800ca62:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ca66:	4313      	orrs	r3, r2
 800ca68:	d102      	bne.n	800ca70 <_printf_float+0x268>
 800ca6a:	6823      	ldr	r3, [r4, #0]
 800ca6c:	07d9      	lsls	r1, r3, #31
 800ca6e:	d5d8      	bpl.n	800ca22 <_printf_float+0x21a>
 800ca70:	4653      	mov	r3, sl
 800ca72:	465a      	mov	r2, fp
 800ca74:	4631      	mov	r1, r6
 800ca76:	4628      	mov	r0, r5
 800ca78:	47b8      	blx	r7
 800ca7a:	3001      	adds	r0, #1
 800ca7c:	f43f af12 	beq.w	800c8a4 <_printf_float+0x9c>
 800ca80:	f04f 0900 	mov.w	r9, #0
 800ca84:	f104 0a1a 	add.w	sl, r4, #26
 800ca88:	9b07      	ldr	r3, [sp, #28]
 800ca8a:	425b      	negs	r3, r3
 800ca8c:	454b      	cmp	r3, r9
 800ca8e:	dc01      	bgt.n	800ca94 <_printf_float+0x28c>
 800ca90:	9b08      	ldr	r3, [sp, #32]
 800ca92:	e795      	b.n	800c9c0 <_printf_float+0x1b8>
 800ca94:	2301      	movs	r3, #1
 800ca96:	4652      	mov	r2, sl
 800ca98:	4631      	mov	r1, r6
 800ca9a:	4628      	mov	r0, r5
 800ca9c:	47b8      	blx	r7
 800ca9e:	3001      	adds	r0, #1
 800caa0:	f43f af00 	beq.w	800c8a4 <_printf_float+0x9c>
 800caa4:	f109 0901 	add.w	r9, r9, #1
 800caa8:	e7ee      	b.n	800ca88 <_printf_float+0x280>
 800caaa:	bf00      	nop
 800caac:	f3af 8000 	nop.w
 800cab0:	ffffffff 	.word	0xffffffff
 800cab4:	7fefffff 	.word	0x7fefffff
 800cab8:	0800f9a4 	.word	0x0800f9a4
 800cabc:	0800f9a8 	.word	0x0800f9a8
 800cac0:	0800f9b0 	.word	0x0800f9b0
 800cac4:	0800f9ac 	.word	0x0800f9ac
 800cac8:	0800f9b4 	.word	0x0800f9b4
 800cacc:	9a08      	ldr	r2, [sp, #32]
 800cace:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cad0:	429a      	cmp	r2, r3
 800cad2:	bfa8      	it	ge
 800cad4:	461a      	movge	r2, r3
 800cad6:	2a00      	cmp	r2, #0
 800cad8:	4691      	mov	r9, r2
 800cada:	dc38      	bgt.n	800cb4e <_printf_float+0x346>
 800cadc:	2300      	movs	r3, #0
 800cade:	9305      	str	r3, [sp, #20]
 800cae0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cae4:	f104 021a 	add.w	r2, r4, #26
 800cae8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800caea:	9905      	ldr	r1, [sp, #20]
 800caec:	9304      	str	r3, [sp, #16]
 800caee:	eba3 0309 	sub.w	r3, r3, r9
 800caf2:	428b      	cmp	r3, r1
 800caf4:	dc33      	bgt.n	800cb5e <_printf_float+0x356>
 800caf6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800cafa:	429a      	cmp	r2, r3
 800cafc:	db3c      	blt.n	800cb78 <_printf_float+0x370>
 800cafe:	6823      	ldr	r3, [r4, #0]
 800cb00:	07da      	lsls	r2, r3, #31
 800cb02:	d439      	bmi.n	800cb78 <_printf_float+0x370>
 800cb04:	9b08      	ldr	r3, [sp, #32]
 800cb06:	9a04      	ldr	r2, [sp, #16]
 800cb08:	9907      	ldr	r1, [sp, #28]
 800cb0a:	1a9a      	subs	r2, r3, r2
 800cb0c:	eba3 0901 	sub.w	r9, r3, r1
 800cb10:	4591      	cmp	r9, r2
 800cb12:	bfa8      	it	ge
 800cb14:	4691      	movge	r9, r2
 800cb16:	f1b9 0f00 	cmp.w	r9, #0
 800cb1a:	dc35      	bgt.n	800cb88 <_printf_float+0x380>
 800cb1c:	f04f 0800 	mov.w	r8, #0
 800cb20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cb24:	f104 0a1a 	add.w	sl, r4, #26
 800cb28:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800cb2c:	1a9b      	subs	r3, r3, r2
 800cb2e:	eba3 0309 	sub.w	r3, r3, r9
 800cb32:	4543      	cmp	r3, r8
 800cb34:	f77f af75 	ble.w	800ca22 <_printf_float+0x21a>
 800cb38:	2301      	movs	r3, #1
 800cb3a:	4652      	mov	r2, sl
 800cb3c:	4631      	mov	r1, r6
 800cb3e:	4628      	mov	r0, r5
 800cb40:	47b8      	blx	r7
 800cb42:	3001      	adds	r0, #1
 800cb44:	f43f aeae 	beq.w	800c8a4 <_printf_float+0x9c>
 800cb48:	f108 0801 	add.w	r8, r8, #1
 800cb4c:	e7ec      	b.n	800cb28 <_printf_float+0x320>
 800cb4e:	4613      	mov	r3, r2
 800cb50:	4631      	mov	r1, r6
 800cb52:	4642      	mov	r2, r8
 800cb54:	4628      	mov	r0, r5
 800cb56:	47b8      	blx	r7
 800cb58:	3001      	adds	r0, #1
 800cb5a:	d1bf      	bne.n	800cadc <_printf_float+0x2d4>
 800cb5c:	e6a2      	b.n	800c8a4 <_printf_float+0x9c>
 800cb5e:	2301      	movs	r3, #1
 800cb60:	4631      	mov	r1, r6
 800cb62:	4628      	mov	r0, r5
 800cb64:	9204      	str	r2, [sp, #16]
 800cb66:	47b8      	blx	r7
 800cb68:	3001      	adds	r0, #1
 800cb6a:	f43f ae9b 	beq.w	800c8a4 <_printf_float+0x9c>
 800cb6e:	9b05      	ldr	r3, [sp, #20]
 800cb70:	9a04      	ldr	r2, [sp, #16]
 800cb72:	3301      	adds	r3, #1
 800cb74:	9305      	str	r3, [sp, #20]
 800cb76:	e7b7      	b.n	800cae8 <_printf_float+0x2e0>
 800cb78:	4653      	mov	r3, sl
 800cb7a:	465a      	mov	r2, fp
 800cb7c:	4631      	mov	r1, r6
 800cb7e:	4628      	mov	r0, r5
 800cb80:	47b8      	blx	r7
 800cb82:	3001      	adds	r0, #1
 800cb84:	d1be      	bne.n	800cb04 <_printf_float+0x2fc>
 800cb86:	e68d      	b.n	800c8a4 <_printf_float+0x9c>
 800cb88:	9a04      	ldr	r2, [sp, #16]
 800cb8a:	464b      	mov	r3, r9
 800cb8c:	4442      	add	r2, r8
 800cb8e:	4631      	mov	r1, r6
 800cb90:	4628      	mov	r0, r5
 800cb92:	47b8      	blx	r7
 800cb94:	3001      	adds	r0, #1
 800cb96:	d1c1      	bne.n	800cb1c <_printf_float+0x314>
 800cb98:	e684      	b.n	800c8a4 <_printf_float+0x9c>
 800cb9a:	9a08      	ldr	r2, [sp, #32]
 800cb9c:	2a01      	cmp	r2, #1
 800cb9e:	dc01      	bgt.n	800cba4 <_printf_float+0x39c>
 800cba0:	07db      	lsls	r3, r3, #31
 800cba2:	d537      	bpl.n	800cc14 <_printf_float+0x40c>
 800cba4:	2301      	movs	r3, #1
 800cba6:	4642      	mov	r2, r8
 800cba8:	4631      	mov	r1, r6
 800cbaa:	4628      	mov	r0, r5
 800cbac:	47b8      	blx	r7
 800cbae:	3001      	adds	r0, #1
 800cbb0:	f43f ae78 	beq.w	800c8a4 <_printf_float+0x9c>
 800cbb4:	4653      	mov	r3, sl
 800cbb6:	465a      	mov	r2, fp
 800cbb8:	4631      	mov	r1, r6
 800cbba:	4628      	mov	r0, r5
 800cbbc:	47b8      	blx	r7
 800cbbe:	3001      	adds	r0, #1
 800cbc0:	f43f ae70 	beq.w	800c8a4 <_printf_float+0x9c>
 800cbc4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800cbc8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cbcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbd0:	d01b      	beq.n	800cc0a <_printf_float+0x402>
 800cbd2:	9b08      	ldr	r3, [sp, #32]
 800cbd4:	f108 0201 	add.w	r2, r8, #1
 800cbd8:	3b01      	subs	r3, #1
 800cbda:	4631      	mov	r1, r6
 800cbdc:	4628      	mov	r0, r5
 800cbde:	47b8      	blx	r7
 800cbe0:	3001      	adds	r0, #1
 800cbe2:	d10e      	bne.n	800cc02 <_printf_float+0x3fa>
 800cbe4:	e65e      	b.n	800c8a4 <_printf_float+0x9c>
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	464a      	mov	r2, r9
 800cbea:	4631      	mov	r1, r6
 800cbec:	4628      	mov	r0, r5
 800cbee:	47b8      	blx	r7
 800cbf0:	3001      	adds	r0, #1
 800cbf2:	f43f ae57 	beq.w	800c8a4 <_printf_float+0x9c>
 800cbf6:	f108 0801 	add.w	r8, r8, #1
 800cbfa:	9b08      	ldr	r3, [sp, #32]
 800cbfc:	3b01      	subs	r3, #1
 800cbfe:	4543      	cmp	r3, r8
 800cc00:	dcf1      	bgt.n	800cbe6 <_printf_float+0x3de>
 800cc02:	9b04      	ldr	r3, [sp, #16]
 800cc04:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cc08:	e6db      	b.n	800c9c2 <_printf_float+0x1ba>
 800cc0a:	f04f 0800 	mov.w	r8, #0
 800cc0e:	f104 091a 	add.w	r9, r4, #26
 800cc12:	e7f2      	b.n	800cbfa <_printf_float+0x3f2>
 800cc14:	2301      	movs	r3, #1
 800cc16:	4642      	mov	r2, r8
 800cc18:	e7df      	b.n	800cbda <_printf_float+0x3d2>
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	464a      	mov	r2, r9
 800cc1e:	4631      	mov	r1, r6
 800cc20:	4628      	mov	r0, r5
 800cc22:	47b8      	blx	r7
 800cc24:	3001      	adds	r0, #1
 800cc26:	f43f ae3d 	beq.w	800c8a4 <_printf_float+0x9c>
 800cc2a:	f108 0801 	add.w	r8, r8, #1
 800cc2e:	68e3      	ldr	r3, [r4, #12]
 800cc30:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cc32:	1a5b      	subs	r3, r3, r1
 800cc34:	4543      	cmp	r3, r8
 800cc36:	dcf0      	bgt.n	800cc1a <_printf_float+0x412>
 800cc38:	e6f7      	b.n	800ca2a <_printf_float+0x222>
 800cc3a:	f04f 0800 	mov.w	r8, #0
 800cc3e:	f104 0919 	add.w	r9, r4, #25
 800cc42:	e7f4      	b.n	800cc2e <_printf_float+0x426>

0800cc44 <_printf_common>:
 800cc44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc48:	4616      	mov	r6, r2
 800cc4a:	4699      	mov	r9, r3
 800cc4c:	688a      	ldr	r2, [r1, #8]
 800cc4e:	690b      	ldr	r3, [r1, #16]
 800cc50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cc54:	4293      	cmp	r3, r2
 800cc56:	bfb8      	it	lt
 800cc58:	4613      	movlt	r3, r2
 800cc5a:	6033      	str	r3, [r6, #0]
 800cc5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cc60:	4607      	mov	r7, r0
 800cc62:	460c      	mov	r4, r1
 800cc64:	b10a      	cbz	r2, 800cc6a <_printf_common+0x26>
 800cc66:	3301      	adds	r3, #1
 800cc68:	6033      	str	r3, [r6, #0]
 800cc6a:	6823      	ldr	r3, [r4, #0]
 800cc6c:	0699      	lsls	r1, r3, #26
 800cc6e:	bf42      	ittt	mi
 800cc70:	6833      	ldrmi	r3, [r6, #0]
 800cc72:	3302      	addmi	r3, #2
 800cc74:	6033      	strmi	r3, [r6, #0]
 800cc76:	6825      	ldr	r5, [r4, #0]
 800cc78:	f015 0506 	ands.w	r5, r5, #6
 800cc7c:	d106      	bne.n	800cc8c <_printf_common+0x48>
 800cc7e:	f104 0a19 	add.w	sl, r4, #25
 800cc82:	68e3      	ldr	r3, [r4, #12]
 800cc84:	6832      	ldr	r2, [r6, #0]
 800cc86:	1a9b      	subs	r3, r3, r2
 800cc88:	42ab      	cmp	r3, r5
 800cc8a:	dc26      	bgt.n	800ccda <_printf_common+0x96>
 800cc8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cc90:	1e13      	subs	r3, r2, #0
 800cc92:	6822      	ldr	r2, [r4, #0]
 800cc94:	bf18      	it	ne
 800cc96:	2301      	movne	r3, #1
 800cc98:	0692      	lsls	r2, r2, #26
 800cc9a:	d42b      	bmi.n	800ccf4 <_printf_common+0xb0>
 800cc9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cca0:	4649      	mov	r1, r9
 800cca2:	4638      	mov	r0, r7
 800cca4:	47c0      	blx	r8
 800cca6:	3001      	adds	r0, #1
 800cca8:	d01e      	beq.n	800cce8 <_printf_common+0xa4>
 800ccaa:	6823      	ldr	r3, [r4, #0]
 800ccac:	68e5      	ldr	r5, [r4, #12]
 800ccae:	6832      	ldr	r2, [r6, #0]
 800ccb0:	f003 0306 	and.w	r3, r3, #6
 800ccb4:	2b04      	cmp	r3, #4
 800ccb6:	bf08      	it	eq
 800ccb8:	1aad      	subeq	r5, r5, r2
 800ccba:	68a3      	ldr	r3, [r4, #8]
 800ccbc:	6922      	ldr	r2, [r4, #16]
 800ccbe:	bf0c      	ite	eq
 800ccc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ccc4:	2500      	movne	r5, #0
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	bfc4      	itt	gt
 800ccca:	1a9b      	subgt	r3, r3, r2
 800cccc:	18ed      	addgt	r5, r5, r3
 800ccce:	2600      	movs	r6, #0
 800ccd0:	341a      	adds	r4, #26
 800ccd2:	42b5      	cmp	r5, r6
 800ccd4:	d11a      	bne.n	800cd0c <_printf_common+0xc8>
 800ccd6:	2000      	movs	r0, #0
 800ccd8:	e008      	b.n	800ccec <_printf_common+0xa8>
 800ccda:	2301      	movs	r3, #1
 800ccdc:	4652      	mov	r2, sl
 800ccde:	4649      	mov	r1, r9
 800cce0:	4638      	mov	r0, r7
 800cce2:	47c0      	blx	r8
 800cce4:	3001      	adds	r0, #1
 800cce6:	d103      	bne.n	800ccf0 <_printf_common+0xac>
 800cce8:	f04f 30ff 	mov.w	r0, #4294967295
 800ccec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccf0:	3501      	adds	r5, #1
 800ccf2:	e7c6      	b.n	800cc82 <_printf_common+0x3e>
 800ccf4:	18e1      	adds	r1, r4, r3
 800ccf6:	1c5a      	adds	r2, r3, #1
 800ccf8:	2030      	movs	r0, #48	; 0x30
 800ccfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ccfe:	4422      	add	r2, r4
 800cd00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cd04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cd08:	3302      	adds	r3, #2
 800cd0a:	e7c7      	b.n	800cc9c <_printf_common+0x58>
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	4622      	mov	r2, r4
 800cd10:	4649      	mov	r1, r9
 800cd12:	4638      	mov	r0, r7
 800cd14:	47c0      	blx	r8
 800cd16:	3001      	adds	r0, #1
 800cd18:	d0e6      	beq.n	800cce8 <_printf_common+0xa4>
 800cd1a:	3601      	adds	r6, #1
 800cd1c:	e7d9      	b.n	800ccd2 <_printf_common+0x8e>
	...

0800cd20 <_printf_i>:
 800cd20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd24:	7e0f      	ldrb	r7, [r1, #24]
 800cd26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cd28:	2f78      	cmp	r7, #120	; 0x78
 800cd2a:	4691      	mov	r9, r2
 800cd2c:	4680      	mov	r8, r0
 800cd2e:	460c      	mov	r4, r1
 800cd30:	469a      	mov	sl, r3
 800cd32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cd36:	d807      	bhi.n	800cd48 <_printf_i+0x28>
 800cd38:	2f62      	cmp	r7, #98	; 0x62
 800cd3a:	d80a      	bhi.n	800cd52 <_printf_i+0x32>
 800cd3c:	2f00      	cmp	r7, #0
 800cd3e:	f000 80d8 	beq.w	800cef2 <_printf_i+0x1d2>
 800cd42:	2f58      	cmp	r7, #88	; 0x58
 800cd44:	f000 80a3 	beq.w	800ce8e <_printf_i+0x16e>
 800cd48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cd4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cd50:	e03a      	b.n	800cdc8 <_printf_i+0xa8>
 800cd52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cd56:	2b15      	cmp	r3, #21
 800cd58:	d8f6      	bhi.n	800cd48 <_printf_i+0x28>
 800cd5a:	a101      	add	r1, pc, #4	; (adr r1, 800cd60 <_printf_i+0x40>)
 800cd5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cd60:	0800cdb9 	.word	0x0800cdb9
 800cd64:	0800cdcd 	.word	0x0800cdcd
 800cd68:	0800cd49 	.word	0x0800cd49
 800cd6c:	0800cd49 	.word	0x0800cd49
 800cd70:	0800cd49 	.word	0x0800cd49
 800cd74:	0800cd49 	.word	0x0800cd49
 800cd78:	0800cdcd 	.word	0x0800cdcd
 800cd7c:	0800cd49 	.word	0x0800cd49
 800cd80:	0800cd49 	.word	0x0800cd49
 800cd84:	0800cd49 	.word	0x0800cd49
 800cd88:	0800cd49 	.word	0x0800cd49
 800cd8c:	0800ced9 	.word	0x0800ced9
 800cd90:	0800cdfd 	.word	0x0800cdfd
 800cd94:	0800cebb 	.word	0x0800cebb
 800cd98:	0800cd49 	.word	0x0800cd49
 800cd9c:	0800cd49 	.word	0x0800cd49
 800cda0:	0800cefb 	.word	0x0800cefb
 800cda4:	0800cd49 	.word	0x0800cd49
 800cda8:	0800cdfd 	.word	0x0800cdfd
 800cdac:	0800cd49 	.word	0x0800cd49
 800cdb0:	0800cd49 	.word	0x0800cd49
 800cdb4:	0800cec3 	.word	0x0800cec3
 800cdb8:	682b      	ldr	r3, [r5, #0]
 800cdba:	1d1a      	adds	r2, r3, #4
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	602a      	str	r2, [r5, #0]
 800cdc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cdc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cdc8:	2301      	movs	r3, #1
 800cdca:	e0a3      	b.n	800cf14 <_printf_i+0x1f4>
 800cdcc:	6820      	ldr	r0, [r4, #0]
 800cdce:	6829      	ldr	r1, [r5, #0]
 800cdd0:	0606      	lsls	r6, r0, #24
 800cdd2:	f101 0304 	add.w	r3, r1, #4
 800cdd6:	d50a      	bpl.n	800cdee <_printf_i+0xce>
 800cdd8:	680e      	ldr	r6, [r1, #0]
 800cdda:	602b      	str	r3, [r5, #0]
 800cddc:	2e00      	cmp	r6, #0
 800cdde:	da03      	bge.n	800cde8 <_printf_i+0xc8>
 800cde0:	232d      	movs	r3, #45	; 0x2d
 800cde2:	4276      	negs	r6, r6
 800cde4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cde8:	485e      	ldr	r0, [pc, #376]	; (800cf64 <_printf_i+0x244>)
 800cdea:	230a      	movs	r3, #10
 800cdec:	e019      	b.n	800ce22 <_printf_i+0x102>
 800cdee:	680e      	ldr	r6, [r1, #0]
 800cdf0:	602b      	str	r3, [r5, #0]
 800cdf2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cdf6:	bf18      	it	ne
 800cdf8:	b236      	sxthne	r6, r6
 800cdfa:	e7ef      	b.n	800cddc <_printf_i+0xbc>
 800cdfc:	682b      	ldr	r3, [r5, #0]
 800cdfe:	6820      	ldr	r0, [r4, #0]
 800ce00:	1d19      	adds	r1, r3, #4
 800ce02:	6029      	str	r1, [r5, #0]
 800ce04:	0601      	lsls	r1, r0, #24
 800ce06:	d501      	bpl.n	800ce0c <_printf_i+0xec>
 800ce08:	681e      	ldr	r6, [r3, #0]
 800ce0a:	e002      	b.n	800ce12 <_printf_i+0xf2>
 800ce0c:	0646      	lsls	r6, r0, #25
 800ce0e:	d5fb      	bpl.n	800ce08 <_printf_i+0xe8>
 800ce10:	881e      	ldrh	r6, [r3, #0]
 800ce12:	4854      	ldr	r0, [pc, #336]	; (800cf64 <_printf_i+0x244>)
 800ce14:	2f6f      	cmp	r7, #111	; 0x6f
 800ce16:	bf0c      	ite	eq
 800ce18:	2308      	moveq	r3, #8
 800ce1a:	230a      	movne	r3, #10
 800ce1c:	2100      	movs	r1, #0
 800ce1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ce22:	6865      	ldr	r5, [r4, #4]
 800ce24:	60a5      	str	r5, [r4, #8]
 800ce26:	2d00      	cmp	r5, #0
 800ce28:	bfa2      	ittt	ge
 800ce2a:	6821      	ldrge	r1, [r4, #0]
 800ce2c:	f021 0104 	bicge.w	r1, r1, #4
 800ce30:	6021      	strge	r1, [r4, #0]
 800ce32:	b90e      	cbnz	r6, 800ce38 <_printf_i+0x118>
 800ce34:	2d00      	cmp	r5, #0
 800ce36:	d04d      	beq.n	800ced4 <_printf_i+0x1b4>
 800ce38:	4615      	mov	r5, r2
 800ce3a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ce3e:	fb03 6711 	mls	r7, r3, r1, r6
 800ce42:	5dc7      	ldrb	r7, [r0, r7]
 800ce44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ce48:	4637      	mov	r7, r6
 800ce4a:	42bb      	cmp	r3, r7
 800ce4c:	460e      	mov	r6, r1
 800ce4e:	d9f4      	bls.n	800ce3a <_printf_i+0x11a>
 800ce50:	2b08      	cmp	r3, #8
 800ce52:	d10b      	bne.n	800ce6c <_printf_i+0x14c>
 800ce54:	6823      	ldr	r3, [r4, #0]
 800ce56:	07de      	lsls	r6, r3, #31
 800ce58:	d508      	bpl.n	800ce6c <_printf_i+0x14c>
 800ce5a:	6923      	ldr	r3, [r4, #16]
 800ce5c:	6861      	ldr	r1, [r4, #4]
 800ce5e:	4299      	cmp	r1, r3
 800ce60:	bfde      	ittt	le
 800ce62:	2330      	movle	r3, #48	; 0x30
 800ce64:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ce68:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ce6c:	1b52      	subs	r2, r2, r5
 800ce6e:	6122      	str	r2, [r4, #16]
 800ce70:	f8cd a000 	str.w	sl, [sp]
 800ce74:	464b      	mov	r3, r9
 800ce76:	aa03      	add	r2, sp, #12
 800ce78:	4621      	mov	r1, r4
 800ce7a:	4640      	mov	r0, r8
 800ce7c:	f7ff fee2 	bl	800cc44 <_printf_common>
 800ce80:	3001      	adds	r0, #1
 800ce82:	d14c      	bne.n	800cf1e <_printf_i+0x1fe>
 800ce84:	f04f 30ff 	mov.w	r0, #4294967295
 800ce88:	b004      	add	sp, #16
 800ce8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce8e:	4835      	ldr	r0, [pc, #212]	; (800cf64 <_printf_i+0x244>)
 800ce90:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ce94:	6829      	ldr	r1, [r5, #0]
 800ce96:	6823      	ldr	r3, [r4, #0]
 800ce98:	f851 6b04 	ldr.w	r6, [r1], #4
 800ce9c:	6029      	str	r1, [r5, #0]
 800ce9e:	061d      	lsls	r5, r3, #24
 800cea0:	d514      	bpl.n	800cecc <_printf_i+0x1ac>
 800cea2:	07df      	lsls	r7, r3, #31
 800cea4:	bf44      	itt	mi
 800cea6:	f043 0320 	orrmi.w	r3, r3, #32
 800ceaa:	6023      	strmi	r3, [r4, #0]
 800ceac:	b91e      	cbnz	r6, 800ceb6 <_printf_i+0x196>
 800ceae:	6823      	ldr	r3, [r4, #0]
 800ceb0:	f023 0320 	bic.w	r3, r3, #32
 800ceb4:	6023      	str	r3, [r4, #0]
 800ceb6:	2310      	movs	r3, #16
 800ceb8:	e7b0      	b.n	800ce1c <_printf_i+0xfc>
 800ceba:	6823      	ldr	r3, [r4, #0]
 800cebc:	f043 0320 	orr.w	r3, r3, #32
 800cec0:	6023      	str	r3, [r4, #0]
 800cec2:	2378      	movs	r3, #120	; 0x78
 800cec4:	4828      	ldr	r0, [pc, #160]	; (800cf68 <_printf_i+0x248>)
 800cec6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ceca:	e7e3      	b.n	800ce94 <_printf_i+0x174>
 800cecc:	0659      	lsls	r1, r3, #25
 800cece:	bf48      	it	mi
 800ced0:	b2b6      	uxthmi	r6, r6
 800ced2:	e7e6      	b.n	800cea2 <_printf_i+0x182>
 800ced4:	4615      	mov	r5, r2
 800ced6:	e7bb      	b.n	800ce50 <_printf_i+0x130>
 800ced8:	682b      	ldr	r3, [r5, #0]
 800ceda:	6826      	ldr	r6, [r4, #0]
 800cedc:	6961      	ldr	r1, [r4, #20]
 800cede:	1d18      	adds	r0, r3, #4
 800cee0:	6028      	str	r0, [r5, #0]
 800cee2:	0635      	lsls	r5, r6, #24
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	d501      	bpl.n	800ceec <_printf_i+0x1cc>
 800cee8:	6019      	str	r1, [r3, #0]
 800ceea:	e002      	b.n	800cef2 <_printf_i+0x1d2>
 800ceec:	0670      	lsls	r0, r6, #25
 800ceee:	d5fb      	bpl.n	800cee8 <_printf_i+0x1c8>
 800cef0:	8019      	strh	r1, [r3, #0]
 800cef2:	2300      	movs	r3, #0
 800cef4:	6123      	str	r3, [r4, #16]
 800cef6:	4615      	mov	r5, r2
 800cef8:	e7ba      	b.n	800ce70 <_printf_i+0x150>
 800cefa:	682b      	ldr	r3, [r5, #0]
 800cefc:	1d1a      	adds	r2, r3, #4
 800cefe:	602a      	str	r2, [r5, #0]
 800cf00:	681d      	ldr	r5, [r3, #0]
 800cf02:	6862      	ldr	r2, [r4, #4]
 800cf04:	2100      	movs	r1, #0
 800cf06:	4628      	mov	r0, r5
 800cf08:	f7f3 f9f2 	bl	80002f0 <memchr>
 800cf0c:	b108      	cbz	r0, 800cf12 <_printf_i+0x1f2>
 800cf0e:	1b40      	subs	r0, r0, r5
 800cf10:	6060      	str	r0, [r4, #4]
 800cf12:	6863      	ldr	r3, [r4, #4]
 800cf14:	6123      	str	r3, [r4, #16]
 800cf16:	2300      	movs	r3, #0
 800cf18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf1c:	e7a8      	b.n	800ce70 <_printf_i+0x150>
 800cf1e:	6923      	ldr	r3, [r4, #16]
 800cf20:	462a      	mov	r2, r5
 800cf22:	4649      	mov	r1, r9
 800cf24:	4640      	mov	r0, r8
 800cf26:	47d0      	blx	sl
 800cf28:	3001      	adds	r0, #1
 800cf2a:	d0ab      	beq.n	800ce84 <_printf_i+0x164>
 800cf2c:	6823      	ldr	r3, [r4, #0]
 800cf2e:	079b      	lsls	r3, r3, #30
 800cf30:	d413      	bmi.n	800cf5a <_printf_i+0x23a>
 800cf32:	68e0      	ldr	r0, [r4, #12]
 800cf34:	9b03      	ldr	r3, [sp, #12]
 800cf36:	4298      	cmp	r0, r3
 800cf38:	bfb8      	it	lt
 800cf3a:	4618      	movlt	r0, r3
 800cf3c:	e7a4      	b.n	800ce88 <_printf_i+0x168>
 800cf3e:	2301      	movs	r3, #1
 800cf40:	4632      	mov	r2, r6
 800cf42:	4649      	mov	r1, r9
 800cf44:	4640      	mov	r0, r8
 800cf46:	47d0      	blx	sl
 800cf48:	3001      	adds	r0, #1
 800cf4a:	d09b      	beq.n	800ce84 <_printf_i+0x164>
 800cf4c:	3501      	adds	r5, #1
 800cf4e:	68e3      	ldr	r3, [r4, #12]
 800cf50:	9903      	ldr	r1, [sp, #12]
 800cf52:	1a5b      	subs	r3, r3, r1
 800cf54:	42ab      	cmp	r3, r5
 800cf56:	dcf2      	bgt.n	800cf3e <_printf_i+0x21e>
 800cf58:	e7eb      	b.n	800cf32 <_printf_i+0x212>
 800cf5a:	2500      	movs	r5, #0
 800cf5c:	f104 0619 	add.w	r6, r4, #25
 800cf60:	e7f5      	b.n	800cf4e <_printf_i+0x22e>
 800cf62:	bf00      	nop
 800cf64:	0800f9b6 	.word	0x0800f9b6
 800cf68:	0800f9c7 	.word	0x0800f9c7

0800cf6c <iprintf>:
 800cf6c:	b40f      	push	{r0, r1, r2, r3}
 800cf6e:	4b0a      	ldr	r3, [pc, #40]	; (800cf98 <iprintf+0x2c>)
 800cf70:	b513      	push	{r0, r1, r4, lr}
 800cf72:	681c      	ldr	r4, [r3, #0]
 800cf74:	b124      	cbz	r4, 800cf80 <iprintf+0x14>
 800cf76:	69a3      	ldr	r3, [r4, #24]
 800cf78:	b913      	cbnz	r3, 800cf80 <iprintf+0x14>
 800cf7a:	4620      	mov	r0, r4
 800cf7c:	f7ff fa44 	bl	800c408 <__sinit>
 800cf80:	ab05      	add	r3, sp, #20
 800cf82:	9a04      	ldr	r2, [sp, #16]
 800cf84:	68a1      	ldr	r1, [r4, #8]
 800cf86:	9301      	str	r3, [sp, #4]
 800cf88:	4620      	mov	r0, r4
 800cf8a:	f001 fef5 	bl	800ed78 <_vfiprintf_r>
 800cf8e:	b002      	add	sp, #8
 800cf90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf94:	b004      	add	sp, #16
 800cf96:	4770      	bx	lr
 800cf98:	2400001c 	.word	0x2400001c

0800cf9c <_puts_r>:
 800cf9c:	b570      	push	{r4, r5, r6, lr}
 800cf9e:	460e      	mov	r6, r1
 800cfa0:	4605      	mov	r5, r0
 800cfa2:	b118      	cbz	r0, 800cfac <_puts_r+0x10>
 800cfa4:	6983      	ldr	r3, [r0, #24]
 800cfa6:	b90b      	cbnz	r3, 800cfac <_puts_r+0x10>
 800cfa8:	f7ff fa2e 	bl	800c408 <__sinit>
 800cfac:	69ab      	ldr	r3, [r5, #24]
 800cfae:	68ac      	ldr	r4, [r5, #8]
 800cfb0:	b913      	cbnz	r3, 800cfb8 <_puts_r+0x1c>
 800cfb2:	4628      	mov	r0, r5
 800cfb4:	f7ff fa28 	bl	800c408 <__sinit>
 800cfb8:	4b2c      	ldr	r3, [pc, #176]	; (800d06c <_puts_r+0xd0>)
 800cfba:	429c      	cmp	r4, r3
 800cfbc:	d120      	bne.n	800d000 <_puts_r+0x64>
 800cfbe:	686c      	ldr	r4, [r5, #4]
 800cfc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cfc2:	07db      	lsls	r3, r3, #31
 800cfc4:	d405      	bmi.n	800cfd2 <_puts_r+0x36>
 800cfc6:	89a3      	ldrh	r3, [r4, #12]
 800cfc8:	0598      	lsls	r0, r3, #22
 800cfca:	d402      	bmi.n	800cfd2 <_puts_r+0x36>
 800cfcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cfce:	f7ff fade 	bl	800c58e <__retarget_lock_acquire_recursive>
 800cfd2:	89a3      	ldrh	r3, [r4, #12]
 800cfd4:	0719      	lsls	r1, r3, #28
 800cfd6:	d51d      	bpl.n	800d014 <_puts_r+0x78>
 800cfd8:	6923      	ldr	r3, [r4, #16]
 800cfda:	b1db      	cbz	r3, 800d014 <_puts_r+0x78>
 800cfdc:	3e01      	subs	r6, #1
 800cfde:	68a3      	ldr	r3, [r4, #8]
 800cfe0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cfe4:	3b01      	subs	r3, #1
 800cfe6:	60a3      	str	r3, [r4, #8]
 800cfe8:	bb39      	cbnz	r1, 800d03a <_puts_r+0x9e>
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	da38      	bge.n	800d060 <_puts_r+0xc4>
 800cfee:	4622      	mov	r2, r4
 800cff0:	210a      	movs	r1, #10
 800cff2:	4628      	mov	r0, r5
 800cff4:	f000 f926 	bl	800d244 <__swbuf_r>
 800cff8:	3001      	adds	r0, #1
 800cffa:	d011      	beq.n	800d020 <_puts_r+0x84>
 800cffc:	250a      	movs	r5, #10
 800cffe:	e011      	b.n	800d024 <_puts_r+0x88>
 800d000:	4b1b      	ldr	r3, [pc, #108]	; (800d070 <_puts_r+0xd4>)
 800d002:	429c      	cmp	r4, r3
 800d004:	d101      	bne.n	800d00a <_puts_r+0x6e>
 800d006:	68ac      	ldr	r4, [r5, #8]
 800d008:	e7da      	b.n	800cfc0 <_puts_r+0x24>
 800d00a:	4b1a      	ldr	r3, [pc, #104]	; (800d074 <_puts_r+0xd8>)
 800d00c:	429c      	cmp	r4, r3
 800d00e:	bf08      	it	eq
 800d010:	68ec      	ldreq	r4, [r5, #12]
 800d012:	e7d5      	b.n	800cfc0 <_puts_r+0x24>
 800d014:	4621      	mov	r1, r4
 800d016:	4628      	mov	r0, r5
 800d018:	f000 f978 	bl	800d30c <__swsetup_r>
 800d01c:	2800      	cmp	r0, #0
 800d01e:	d0dd      	beq.n	800cfdc <_puts_r+0x40>
 800d020:	f04f 35ff 	mov.w	r5, #4294967295
 800d024:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d026:	07da      	lsls	r2, r3, #31
 800d028:	d405      	bmi.n	800d036 <_puts_r+0x9a>
 800d02a:	89a3      	ldrh	r3, [r4, #12]
 800d02c:	059b      	lsls	r3, r3, #22
 800d02e:	d402      	bmi.n	800d036 <_puts_r+0x9a>
 800d030:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d032:	f7ff faad 	bl	800c590 <__retarget_lock_release_recursive>
 800d036:	4628      	mov	r0, r5
 800d038:	bd70      	pop	{r4, r5, r6, pc}
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	da04      	bge.n	800d048 <_puts_r+0xac>
 800d03e:	69a2      	ldr	r2, [r4, #24]
 800d040:	429a      	cmp	r2, r3
 800d042:	dc06      	bgt.n	800d052 <_puts_r+0xb6>
 800d044:	290a      	cmp	r1, #10
 800d046:	d004      	beq.n	800d052 <_puts_r+0xb6>
 800d048:	6823      	ldr	r3, [r4, #0]
 800d04a:	1c5a      	adds	r2, r3, #1
 800d04c:	6022      	str	r2, [r4, #0]
 800d04e:	7019      	strb	r1, [r3, #0]
 800d050:	e7c5      	b.n	800cfde <_puts_r+0x42>
 800d052:	4622      	mov	r2, r4
 800d054:	4628      	mov	r0, r5
 800d056:	f000 f8f5 	bl	800d244 <__swbuf_r>
 800d05a:	3001      	adds	r0, #1
 800d05c:	d1bf      	bne.n	800cfde <_puts_r+0x42>
 800d05e:	e7df      	b.n	800d020 <_puts_r+0x84>
 800d060:	6823      	ldr	r3, [r4, #0]
 800d062:	250a      	movs	r5, #10
 800d064:	1c5a      	adds	r2, r3, #1
 800d066:	6022      	str	r2, [r4, #0]
 800d068:	701d      	strb	r5, [r3, #0]
 800d06a:	e7db      	b.n	800d024 <_puts_r+0x88>
 800d06c:	0800f960 	.word	0x0800f960
 800d070:	0800f980 	.word	0x0800f980
 800d074:	0800f940 	.word	0x0800f940

0800d078 <puts>:
 800d078:	4b02      	ldr	r3, [pc, #8]	; (800d084 <puts+0xc>)
 800d07a:	4601      	mov	r1, r0
 800d07c:	6818      	ldr	r0, [r3, #0]
 800d07e:	f7ff bf8d 	b.w	800cf9c <_puts_r>
 800d082:	bf00      	nop
 800d084:	2400001c 	.word	0x2400001c

0800d088 <cleanup_glue>:
 800d088:	b538      	push	{r3, r4, r5, lr}
 800d08a:	460c      	mov	r4, r1
 800d08c:	6809      	ldr	r1, [r1, #0]
 800d08e:	4605      	mov	r5, r0
 800d090:	b109      	cbz	r1, 800d096 <cleanup_glue+0xe>
 800d092:	f7ff fff9 	bl	800d088 <cleanup_glue>
 800d096:	4621      	mov	r1, r4
 800d098:	4628      	mov	r0, r5
 800d09a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d09e:	f001 bc99 	b.w	800e9d4 <_free_r>
	...

0800d0a4 <_reclaim_reent>:
 800d0a4:	4b2c      	ldr	r3, [pc, #176]	; (800d158 <_reclaim_reent+0xb4>)
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	4283      	cmp	r3, r0
 800d0aa:	b570      	push	{r4, r5, r6, lr}
 800d0ac:	4604      	mov	r4, r0
 800d0ae:	d051      	beq.n	800d154 <_reclaim_reent+0xb0>
 800d0b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d0b2:	b143      	cbz	r3, 800d0c6 <_reclaim_reent+0x22>
 800d0b4:	68db      	ldr	r3, [r3, #12]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d14a      	bne.n	800d150 <_reclaim_reent+0xac>
 800d0ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d0bc:	6819      	ldr	r1, [r3, #0]
 800d0be:	b111      	cbz	r1, 800d0c6 <_reclaim_reent+0x22>
 800d0c0:	4620      	mov	r0, r4
 800d0c2:	f001 fc87 	bl	800e9d4 <_free_r>
 800d0c6:	6961      	ldr	r1, [r4, #20]
 800d0c8:	b111      	cbz	r1, 800d0d0 <_reclaim_reent+0x2c>
 800d0ca:	4620      	mov	r0, r4
 800d0cc:	f001 fc82 	bl	800e9d4 <_free_r>
 800d0d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d0d2:	b111      	cbz	r1, 800d0da <_reclaim_reent+0x36>
 800d0d4:	4620      	mov	r0, r4
 800d0d6:	f001 fc7d 	bl	800e9d4 <_free_r>
 800d0da:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d0dc:	b111      	cbz	r1, 800d0e4 <_reclaim_reent+0x40>
 800d0de:	4620      	mov	r0, r4
 800d0e0:	f001 fc78 	bl	800e9d4 <_free_r>
 800d0e4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d0e6:	b111      	cbz	r1, 800d0ee <_reclaim_reent+0x4a>
 800d0e8:	4620      	mov	r0, r4
 800d0ea:	f001 fc73 	bl	800e9d4 <_free_r>
 800d0ee:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d0f0:	b111      	cbz	r1, 800d0f8 <_reclaim_reent+0x54>
 800d0f2:	4620      	mov	r0, r4
 800d0f4:	f001 fc6e 	bl	800e9d4 <_free_r>
 800d0f8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d0fa:	b111      	cbz	r1, 800d102 <_reclaim_reent+0x5e>
 800d0fc:	4620      	mov	r0, r4
 800d0fe:	f001 fc69 	bl	800e9d4 <_free_r>
 800d102:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d104:	b111      	cbz	r1, 800d10c <_reclaim_reent+0x68>
 800d106:	4620      	mov	r0, r4
 800d108:	f001 fc64 	bl	800e9d4 <_free_r>
 800d10c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d10e:	b111      	cbz	r1, 800d116 <_reclaim_reent+0x72>
 800d110:	4620      	mov	r0, r4
 800d112:	f001 fc5f 	bl	800e9d4 <_free_r>
 800d116:	69a3      	ldr	r3, [r4, #24]
 800d118:	b1e3      	cbz	r3, 800d154 <_reclaim_reent+0xb0>
 800d11a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d11c:	4620      	mov	r0, r4
 800d11e:	4798      	blx	r3
 800d120:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d122:	b1b9      	cbz	r1, 800d154 <_reclaim_reent+0xb0>
 800d124:	4620      	mov	r0, r4
 800d126:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d12a:	f7ff bfad 	b.w	800d088 <cleanup_glue>
 800d12e:	5949      	ldr	r1, [r1, r5]
 800d130:	b941      	cbnz	r1, 800d144 <_reclaim_reent+0xa0>
 800d132:	3504      	adds	r5, #4
 800d134:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d136:	2d80      	cmp	r5, #128	; 0x80
 800d138:	68d9      	ldr	r1, [r3, #12]
 800d13a:	d1f8      	bne.n	800d12e <_reclaim_reent+0x8a>
 800d13c:	4620      	mov	r0, r4
 800d13e:	f001 fc49 	bl	800e9d4 <_free_r>
 800d142:	e7ba      	b.n	800d0ba <_reclaim_reent+0x16>
 800d144:	680e      	ldr	r6, [r1, #0]
 800d146:	4620      	mov	r0, r4
 800d148:	f001 fc44 	bl	800e9d4 <_free_r>
 800d14c:	4631      	mov	r1, r6
 800d14e:	e7ef      	b.n	800d130 <_reclaim_reent+0x8c>
 800d150:	2500      	movs	r5, #0
 800d152:	e7ef      	b.n	800d134 <_reclaim_reent+0x90>
 800d154:	bd70      	pop	{r4, r5, r6, pc}
 800d156:	bf00      	nop
 800d158:	2400001c 	.word	0x2400001c

0800d15c <_sbrk_r>:
 800d15c:	b538      	push	{r3, r4, r5, lr}
 800d15e:	4d06      	ldr	r5, [pc, #24]	; (800d178 <_sbrk_r+0x1c>)
 800d160:	2300      	movs	r3, #0
 800d162:	4604      	mov	r4, r0
 800d164:	4608      	mov	r0, r1
 800d166:	602b      	str	r3, [r5, #0]
 800d168:	f7f5 ff40 	bl	8002fec <_sbrk>
 800d16c:	1c43      	adds	r3, r0, #1
 800d16e:	d102      	bne.n	800d176 <_sbrk_r+0x1a>
 800d170:	682b      	ldr	r3, [r5, #0]
 800d172:	b103      	cbz	r3, 800d176 <_sbrk_r+0x1a>
 800d174:	6023      	str	r3, [r4, #0]
 800d176:	bd38      	pop	{r3, r4, r5, pc}
 800d178:	240050d8 	.word	0x240050d8

0800d17c <siprintf>:
 800d17c:	b40e      	push	{r1, r2, r3}
 800d17e:	b500      	push	{lr}
 800d180:	b09c      	sub	sp, #112	; 0x70
 800d182:	ab1d      	add	r3, sp, #116	; 0x74
 800d184:	9002      	str	r0, [sp, #8]
 800d186:	9006      	str	r0, [sp, #24]
 800d188:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d18c:	4809      	ldr	r0, [pc, #36]	; (800d1b4 <siprintf+0x38>)
 800d18e:	9107      	str	r1, [sp, #28]
 800d190:	9104      	str	r1, [sp, #16]
 800d192:	4909      	ldr	r1, [pc, #36]	; (800d1b8 <siprintf+0x3c>)
 800d194:	f853 2b04 	ldr.w	r2, [r3], #4
 800d198:	9105      	str	r1, [sp, #20]
 800d19a:	6800      	ldr	r0, [r0, #0]
 800d19c:	9301      	str	r3, [sp, #4]
 800d19e:	a902      	add	r1, sp, #8
 800d1a0:	f001 fcc0 	bl	800eb24 <_svfiprintf_r>
 800d1a4:	9b02      	ldr	r3, [sp, #8]
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	701a      	strb	r2, [r3, #0]
 800d1aa:	b01c      	add	sp, #112	; 0x70
 800d1ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800d1b0:	b003      	add	sp, #12
 800d1b2:	4770      	bx	lr
 800d1b4:	2400001c 	.word	0x2400001c
 800d1b8:	ffff0208 	.word	0xffff0208

0800d1bc <__sread>:
 800d1bc:	b510      	push	{r4, lr}
 800d1be:	460c      	mov	r4, r1
 800d1c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1c4:	f001 ff08 	bl	800efd8 <_read_r>
 800d1c8:	2800      	cmp	r0, #0
 800d1ca:	bfab      	itete	ge
 800d1cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d1ce:	89a3      	ldrhlt	r3, [r4, #12]
 800d1d0:	181b      	addge	r3, r3, r0
 800d1d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d1d6:	bfac      	ite	ge
 800d1d8:	6563      	strge	r3, [r4, #84]	; 0x54
 800d1da:	81a3      	strhlt	r3, [r4, #12]
 800d1dc:	bd10      	pop	{r4, pc}

0800d1de <__swrite>:
 800d1de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1e2:	461f      	mov	r7, r3
 800d1e4:	898b      	ldrh	r3, [r1, #12]
 800d1e6:	05db      	lsls	r3, r3, #23
 800d1e8:	4605      	mov	r5, r0
 800d1ea:	460c      	mov	r4, r1
 800d1ec:	4616      	mov	r6, r2
 800d1ee:	d505      	bpl.n	800d1fc <__swrite+0x1e>
 800d1f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1f4:	2302      	movs	r3, #2
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	f000 ffc6 	bl	800e188 <_lseek_r>
 800d1fc:	89a3      	ldrh	r3, [r4, #12]
 800d1fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d202:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d206:	81a3      	strh	r3, [r4, #12]
 800d208:	4632      	mov	r2, r6
 800d20a:	463b      	mov	r3, r7
 800d20c:	4628      	mov	r0, r5
 800d20e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d212:	f000 b869 	b.w	800d2e8 <_write_r>

0800d216 <__sseek>:
 800d216:	b510      	push	{r4, lr}
 800d218:	460c      	mov	r4, r1
 800d21a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d21e:	f000 ffb3 	bl	800e188 <_lseek_r>
 800d222:	1c43      	adds	r3, r0, #1
 800d224:	89a3      	ldrh	r3, [r4, #12]
 800d226:	bf15      	itete	ne
 800d228:	6560      	strne	r0, [r4, #84]	; 0x54
 800d22a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d22e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d232:	81a3      	strheq	r3, [r4, #12]
 800d234:	bf18      	it	ne
 800d236:	81a3      	strhne	r3, [r4, #12]
 800d238:	bd10      	pop	{r4, pc}

0800d23a <__sclose>:
 800d23a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d23e:	f000 b8d3 	b.w	800d3e8 <_close_r>
	...

0800d244 <__swbuf_r>:
 800d244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d246:	460e      	mov	r6, r1
 800d248:	4614      	mov	r4, r2
 800d24a:	4605      	mov	r5, r0
 800d24c:	b118      	cbz	r0, 800d256 <__swbuf_r+0x12>
 800d24e:	6983      	ldr	r3, [r0, #24]
 800d250:	b90b      	cbnz	r3, 800d256 <__swbuf_r+0x12>
 800d252:	f7ff f8d9 	bl	800c408 <__sinit>
 800d256:	4b21      	ldr	r3, [pc, #132]	; (800d2dc <__swbuf_r+0x98>)
 800d258:	429c      	cmp	r4, r3
 800d25a:	d12b      	bne.n	800d2b4 <__swbuf_r+0x70>
 800d25c:	686c      	ldr	r4, [r5, #4]
 800d25e:	69a3      	ldr	r3, [r4, #24]
 800d260:	60a3      	str	r3, [r4, #8]
 800d262:	89a3      	ldrh	r3, [r4, #12]
 800d264:	071a      	lsls	r2, r3, #28
 800d266:	d52f      	bpl.n	800d2c8 <__swbuf_r+0x84>
 800d268:	6923      	ldr	r3, [r4, #16]
 800d26a:	b36b      	cbz	r3, 800d2c8 <__swbuf_r+0x84>
 800d26c:	6923      	ldr	r3, [r4, #16]
 800d26e:	6820      	ldr	r0, [r4, #0]
 800d270:	1ac0      	subs	r0, r0, r3
 800d272:	6963      	ldr	r3, [r4, #20]
 800d274:	b2f6      	uxtb	r6, r6
 800d276:	4283      	cmp	r3, r0
 800d278:	4637      	mov	r7, r6
 800d27a:	dc04      	bgt.n	800d286 <__swbuf_r+0x42>
 800d27c:	4621      	mov	r1, r4
 800d27e:	4628      	mov	r0, r5
 800d280:	f000 ff42 	bl	800e108 <_fflush_r>
 800d284:	bb30      	cbnz	r0, 800d2d4 <__swbuf_r+0x90>
 800d286:	68a3      	ldr	r3, [r4, #8]
 800d288:	3b01      	subs	r3, #1
 800d28a:	60a3      	str	r3, [r4, #8]
 800d28c:	6823      	ldr	r3, [r4, #0]
 800d28e:	1c5a      	adds	r2, r3, #1
 800d290:	6022      	str	r2, [r4, #0]
 800d292:	701e      	strb	r6, [r3, #0]
 800d294:	6963      	ldr	r3, [r4, #20]
 800d296:	3001      	adds	r0, #1
 800d298:	4283      	cmp	r3, r0
 800d29a:	d004      	beq.n	800d2a6 <__swbuf_r+0x62>
 800d29c:	89a3      	ldrh	r3, [r4, #12]
 800d29e:	07db      	lsls	r3, r3, #31
 800d2a0:	d506      	bpl.n	800d2b0 <__swbuf_r+0x6c>
 800d2a2:	2e0a      	cmp	r6, #10
 800d2a4:	d104      	bne.n	800d2b0 <__swbuf_r+0x6c>
 800d2a6:	4621      	mov	r1, r4
 800d2a8:	4628      	mov	r0, r5
 800d2aa:	f000 ff2d 	bl	800e108 <_fflush_r>
 800d2ae:	b988      	cbnz	r0, 800d2d4 <__swbuf_r+0x90>
 800d2b0:	4638      	mov	r0, r7
 800d2b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2b4:	4b0a      	ldr	r3, [pc, #40]	; (800d2e0 <__swbuf_r+0x9c>)
 800d2b6:	429c      	cmp	r4, r3
 800d2b8:	d101      	bne.n	800d2be <__swbuf_r+0x7a>
 800d2ba:	68ac      	ldr	r4, [r5, #8]
 800d2bc:	e7cf      	b.n	800d25e <__swbuf_r+0x1a>
 800d2be:	4b09      	ldr	r3, [pc, #36]	; (800d2e4 <__swbuf_r+0xa0>)
 800d2c0:	429c      	cmp	r4, r3
 800d2c2:	bf08      	it	eq
 800d2c4:	68ec      	ldreq	r4, [r5, #12]
 800d2c6:	e7ca      	b.n	800d25e <__swbuf_r+0x1a>
 800d2c8:	4621      	mov	r1, r4
 800d2ca:	4628      	mov	r0, r5
 800d2cc:	f000 f81e 	bl	800d30c <__swsetup_r>
 800d2d0:	2800      	cmp	r0, #0
 800d2d2:	d0cb      	beq.n	800d26c <__swbuf_r+0x28>
 800d2d4:	f04f 37ff 	mov.w	r7, #4294967295
 800d2d8:	e7ea      	b.n	800d2b0 <__swbuf_r+0x6c>
 800d2da:	bf00      	nop
 800d2dc:	0800f960 	.word	0x0800f960
 800d2e0:	0800f980 	.word	0x0800f980
 800d2e4:	0800f940 	.word	0x0800f940

0800d2e8 <_write_r>:
 800d2e8:	b538      	push	{r3, r4, r5, lr}
 800d2ea:	4d07      	ldr	r5, [pc, #28]	; (800d308 <_write_r+0x20>)
 800d2ec:	4604      	mov	r4, r0
 800d2ee:	4608      	mov	r0, r1
 800d2f0:	4611      	mov	r1, r2
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	602a      	str	r2, [r5, #0]
 800d2f6:	461a      	mov	r2, r3
 800d2f8:	f7f5 fe27 	bl	8002f4a <_write>
 800d2fc:	1c43      	adds	r3, r0, #1
 800d2fe:	d102      	bne.n	800d306 <_write_r+0x1e>
 800d300:	682b      	ldr	r3, [r5, #0]
 800d302:	b103      	cbz	r3, 800d306 <_write_r+0x1e>
 800d304:	6023      	str	r3, [r4, #0]
 800d306:	bd38      	pop	{r3, r4, r5, pc}
 800d308:	240050d8 	.word	0x240050d8

0800d30c <__swsetup_r>:
 800d30c:	4b32      	ldr	r3, [pc, #200]	; (800d3d8 <__swsetup_r+0xcc>)
 800d30e:	b570      	push	{r4, r5, r6, lr}
 800d310:	681d      	ldr	r5, [r3, #0]
 800d312:	4606      	mov	r6, r0
 800d314:	460c      	mov	r4, r1
 800d316:	b125      	cbz	r5, 800d322 <__swsetup_r+0x16>
 800d318:	69ab      	ldr	r3, [r5, #24]
 800d31a:	b913      	cbnz	r3, 800d322 <__swsetup_r+0x16>
 800d31c:	4628      	mov	r0, r5
 800d31e:	f7ff f873 	bl	800c408 <__sinit>
 800d322:	4b2e      	ldr	r3, [pc, #184]	; (800d3dc <__swsetup_r+0xd0>)
 800d324:	429c      	cmp	r4, r3
 800d326:	d10f      	bne.n	800d348 <__swsetup_r+0x3c>
 800d328:	686c      	ldr	r4, [r5, #4]
 800d32a:	89a3      	ldrh	r3, [r4, #12]
 800d32c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d330:	0719      	lsls	r1, r3, #28
 800d332:	d42c      	bmi.n	800d38e <__swsetup_r+0x82>
 800d334:	06dd      	lsls	r5, r3, #27
 800d336:	d411      	bmi.n	800d35c <__swsetup_r+0x50>
 800d338:	2309      	movs	r3, #9
 800d33a:	6033      	str	r3, [r6, #0]
 800d33c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d340:	81a3      	strh	r3, [r4, #12]
 800d342:	f04f 30ff 	mov.w	r0, #4294967295
 800d346:	e03e      	b.n	800d3c6 <__swsetup_r+0xba>
 800d348:	4b25      	ldr	r3, [pc, #148]	; (800d3e0 <__swsetup_r+0xd4>)
 800d34a:	429c      	cmp	r4, r3
 800d34c:	d101      	bne.n	800d352 <__swsetup_r+0x46>
 800d34e:	68ac      	ldr	r4, [r5, #8]
 800d350:	e7eb      	b.n	800d32a <__swsetup_r+0x1e>
 800d352:	4b24      	ldr	r3, [pc, #144]	; (800d3e4 <__swsetup_r+0xd8>)
 800d354:	429c      	cmp	r4, r3
 800d356:	bf08      	it	eq
 800d358:	68ec      	ldreq	r4, [r5, #12]
 800d35a:	e7e6      	b.n	800d32a <__swsetup_r+0x1e>
 800d35c:	0758      	lsls	r0, r3, #29
 800d35e:	d512      	bpl.n	800d386 <__swsetup_r+0x7a>
 800d360:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d362:	b141      	cbz	r1, 800d376 <__swsetup_r+0x6a>
 800d364:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d368:	4299      	cmp	r1, r3
 800d36a:	d002      	beq.n	800d372 <__swsetup_r+0x66>
 800d36c:	4630      	mov	r0, r6
 800d36e:	f001 fb31 	bl	800e9d4 <_free_r>
 800d372:	2300      	movs	r3, #0
 800d374:	6363      	str	r3, [r4, #52]	; 0x34
 800d376:	89a3      	ldrh	r3, [r4, #12]
 800d378:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d37c:	81a3      	strh	r3, [r4, #12]
 800d37e:	2300      	movs	r3, #0
 800d380:	6063      	str	r3, [r4, #4]
 800d382:	6923      	ldr	r3, [r4, #16]
 800d384:	6023      	str	r3, [r4, #0]
 800d386:	89a3      	ldrh	r3, [r4, #12]
 800d388:	f043 0308 	orr.w	r3, r3, #8
 800d38c:	81a3      	strh	r3, [r4, #12]
 800d38e:	6923      	ldr	r3, [r4, #16]
 800d390:	b94b      	cbnz	r3, 800d3a6 <__swsetup_r+0x9a>
 800d392:	89a3      	ldrh	r3, [r4, #12]
 800d394:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d398:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d39c:	d003      	beq.n	800d3a6 <__swsetup_r+0x9a>
 800d39e:	4621      	mov	r1, r4
 800d3a0:	4630      	mov	r0, r6
 800d3a2:	f000 ff29 	bl	800e1f8 <__smakebuf_r>
 800d3a6:	89a0      	ldrh	r0, [r4, #12]
 800d3a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d3ac:	f010 0301 	ands.w	r3, r0, #1
 800d3b0:	d00a      	beq.n	800d3c8 <__swsetup_r+0xbc>
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	60a3      	str	r3, [r4, #8]
 800d3b6:	6963      	ldr	r3, [r4, #20]
 800d3b8:	425b      	negs	r3, r3
 800d3ba:	61a3      	str	r3, [r4, #24]
 800d3bc:	6923      	ldr	r3, [r4, #16]
 800d3be:	b943      	cbnz	r3, 800d3d2 <__swsetup_r+0xc6>
 800d3c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d3c4:	d1ba      	bne.n	800d33c <__swsetup_r+0x30>
 800d3c6:	bd70      	pop	{r4, r5, r6, pc}
 800d3c8:	0781      	lsls	r1, r0, #30
 800d3ca:	bf58      	it	pl
 800d3cc:	6963      	ldrpl	r3, [r4, #20]
 800d3ce:	60a3      	str	r3, [r4, #8]
 800d3d0:	e7f4      	b.n	800d3bc <__swsetup_r+0xb0>
 800d3d2:	2000      	movs	r0, #0
 800d3d4:	e7f7      	b.n	800d3c6 <__swsetup_r+0xba>
 800d3d6:	bf00      	nop
 800d3d8:	2400001c 	.word	0x2400001c
 800d3dc:	0800f960 	.word	0x0800f960
 800d3e0:	0800f980 	.word	0x0800f980
 800d3e4:	0800f940 	.word	0x0800f940

0800d3e8 <_close_r>:
 800d3e8:	b538      	push	{r3, r4, r5, lr}
 800d3ea:	4d06      	ldr	r5, [pc, #24]	; (800d404 <_close_r+0x1c>)
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	4604      	mov	r4, r0
 800d3f0:	4608      	mov	r0, r1
 800d3f2:	602b      	str	r3, [r5, #0]
 800d3f4:	f7f5 fdc5 	bl	8002f82 <_close>
 800d3f8:	1c43      	adds	r3, r0, #1
 800d3fa:	d102      	bne.n	800d402 <_close_r+0x1a>
 800d3fc:	682b      	ldr	r3, [r5, #0]
 800d3fe:	b103      	cbz	r3, 800d402 <_close_r+0x1a>
 800d400:	6023      	str	r3, [r4, #0]
 800d402:	bd38      	pop	{r3, r4, r5, pc}
 800d404:	240050d8 	.word	0x240050d8

0800d408 <quorem>:
 800d408:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d40c:	6903      	ldr	r3, [r0, #16]
 800d40e:	690c      	ldr	r4, [r1, #16]
 800d410:	42a3      	cmp	r3, r4
 800d412:	4607      	mov	r7, r0
 800d414:	f2c0 8081 	blt.w	800d51a <quorem+0x112>
 800d418:	3c01      	subs	r4, #1
 800d41a:	f101 0814 	add.w	r8, r1, #20
 800d41e:	f100 0514 	add.w	r5, r0, #20
 800d422:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d426:	9301      	str	r3, [sp, #4]
 800d428:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d42c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d430:	3301      	adds	r3, #1
 800d432:	429a      	cmp	r2, r3
 800d434:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d438:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d43c:	fbb2 f6f3 	udiv	r6, r2, r3
 800d440:	d331      	bcc.n	800d4a6 <quorem+0x9e>
 800d442:	f04f 0e00 	mov.w	lr, #0
 800d446:	4640      	mov	r0, r8
 800d448:	46ac      	mov	ip, r5
 800d44a:	46f2      	mov	sl, lr
 800d44c:	f850 2b04 	ldr.w	r2, [r0], #4
 800d450:	b293      	uxth	r3, r2
 800d452:	fb06 e303 	mla	r3, r6, r3, lr
 800d456:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d45a:	b29b      	uxth	r3, r3
 800d45c:	ebaa 0303 	sub.w	r3, sl, r3
 800d460:	f8dc a000 	ldr.w	sl, [ip]
 800d464:	0c12      	lsrs	r2, r2, #16
 800d466:	fa13 f38a 	uxtah	r3, r3, sl
 800d46a:	fb06 e202 	mla	r2, r6, r2, lr
 800d46e:	9300      	str	r3, [sp, #0]
 800d470:	9b00      	ldr	r3, [sp, #0]
 800d472:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d476:	b292      	uxth	r2, r2
 800d478:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d47c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d480:	f8bd 3000 	ldrh.w	r3, [sp]
 800d484:	4581      	cmp	r9, r0
 800d486:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d48a:	f84c 3b04 	str.w	r3, [ip], #4
 800d48e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d492:	d2db      	bcs.n	800d44c <quorem+0x44>
 800d494:	f855 300b 	ldr.w	r3, [r5, fp]
 800d498:	b92b      	cbnz	r3, 800d4a6 <quorem+0x9e>
 800d49a:	9b01      	ldr	r3, [sp, #4]
 800d49c:	3b04      	subs	r3, #4
 800d49e:	429d      	cmp	r5, r3
 800d4a0:	461a      	mov	r2, r3
 800d4a2:	d32e      	bcc.n	800d502 <quorem+0xfa>
 800d4a4:	613c      	str	r4, [r7, #16]
 800d4a6:	4638      	mov	r0, r7
 800d4a8:	f001 f97c 	bl	800e7a4 <__mcmp>
 800d4ac:	2800      	cmp	r0, #0
 800d4ae:	db24      	blt.n	800d4fa <quorem+0xf2>
 800d4b0:	3601      	adds	r6, #1
 800d4b2:	4628      	mov	r0, r5
 800d4b4:	f04f 0c00 	mov.w	ip, #0
 800d4b8:	f858 2b04 	ldr.w	r2, [r8], #4
 800d4bc:	f8d0 e000 	ldr.w	lr, [r0]
 800d4c0:	b293      	uxth	r3, r2
 800d4c2:	ebac 0303 	sub.w	r3, ip, r3
 800d4c6:	0c12      	lsrs	r2, r2, #16
 800d4c8:	fa13 f38e 	uxtah	r3, r3, lr
 800d4cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d4d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d4d4:	b29b      	uxth	r3, r3
 800d4d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d4da:	45c1      	cmp	r9, r8
 800d4dc:	f840 3b04 	str.w	r3, [r0], #4
 800d4e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d4e4:	d2e8      	bcs.n	800d4b8 <quorem+0xb0>
 800d4e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d4ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d4ee:	b922      	cbnz	r2, 800d4fa <quorem+0xf2>
 800d4f0:	3b04      	subs	r3, #4
 800d4f2:	429d      	cmp	r5, r3
 800d4f4:	461a      	mov	r2, r3
 800d4f6:	d30a      	bcc.n	800d50e <quorem+0x106>
 800d4f8:	613c      	str	r4, [r7, #16]
 800d4fa:	4630      	mov	r0, r6
 800d4fc:	b003      	add	sp, #12
 800d4fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d502:	6812      	ldr	r2, [r2, #0]
 800d504:	3b04      	subs	r3, #4
 800d506:	2a00      	cmp	r2, #0
 800d508:	d1cc      	bne.n	800d4a4 <quorem+0x9c>
 800d50a:	3c01      	subs	r4, #1
 800d50c:	e7c7      	b.n	800d49e <quorem+0x96>
 800d50e:	6812      	ldr	r2, [r2, #0]
 800d510:	3b04      	subs	r3, #4
 800d512:	2a00      	cmp	r2, #0
 800d514:	d1f0      	bne.n	800d4f8 <quorem+0xf0>
 800d516:	3c01      	subs	r4, #1
 800d518:	e7eb      	b.n	800d4f2 <quorem+0xea>
 800d51a:	2000      	movs	r0, #0
 800d51c:	e7ee      	b.n	800d4fc <quorem+0xf4>
	...

0800d520 <_dtoa_r>:
 800d520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d524:	ed2d 8b02 	vpush	{d8}
 800d528:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d52a:	b091      	sub	sp, #68	; 0x44
 800d52c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d530:	ec59 8b10 	vmov	r8, r9, d0
 800d534:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800d536:	9106      	str	r1, [sp, #24]
 800d538:	4606      	mov	r6, r0
 800d53a:	9208      	str	r2, [sp, #32]
 800d53c:	930c      	str	r3, [sp, #48]	; 0x30
 800d53e:	b975      	cbnz	r5, 800d55e <_dtoa_r+0x3e>
 800d540:	2010      	movs	r0, #16
 800d542:	f000 fe99 	bl	800e278 <malloc>
 800d546:	4602      	mov	r2, r0
 800d548:	6270      	str	r0, [r6, #36]	; 0x24
 800d54a:	b920      	cbnz	r0, 800d556 <_dtoa_r+0x36>
 800d54c:	4baa      	ldr	r3, [pc, #680]	; (800d7f8 <_dtoa_r+0x2d8>)
 800d54e:	21ea      	movs	r1, #234	; 0xea
 800d550:	48aa      	ldr	r0, [pc, #680]	; (800d7fc <_dtoa_r+0x2dc>)
 800d552:	f001 fd53 	bl	800effc <__assert_func>
 800d556:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d55a:	6005      	str	r5, [r0, #0]
 800d55c:	60c5      	str	r5, [r0, #12]
 800d55e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d560:	6819      	ldr	r1, [r3, #0]
 800d562:	b151      	cbz	r1, 800d57a <_dtoa_r+0x5a>
 800d564:	685a      	ldr	r2, [r3, #4]
 800d566:	604a      	str	r2, [r1, #4]
 800d568:	2301      	movs	r3, #1
 800d56a:	4093      	lsls	r3, r2
 800d56c:	608b      	str	r3, [r1, #8]
 800d56e:	4630      	mov	r0, r6
 800d570:	f000 fed6 	bl	800e320 <_Bfree>
 800d574:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d576:	2200      	movs	r2, #0
 800d578:	601a      	str	r2, [r3, #0]
 800d57a:	f1b9 0300 	subs.w	r3, r9, #0
 800d57e:	bfbb      	ittet	lt
 800d580:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d584:	9303      	strlt	r3, [sp, #12]
 800d586:	2300      	movge	r3, #0
 800d588:	2201      	movlt	r2, #1
 800d58a:	bfac      	ite	ge
 800d58c:	6023      	strge	r3, [r4, #0]
 800d58e:	6022      	strlt	r2, [r4, #0]
 800d590:	4b9b      	ldr	r3, [pc, #620]	; (800d800 <_dtoa_r+0x2e0>)
 800d592:	9c03      	ldr	r4, [sp, #12]
 800d594:	43a3      	bics	r3, r4
 800d596:	d11c      	bne.n	800d5d2 <_dtoa_r+0xb2>
 800d598:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d59a:	f242 730f 	movw	r3, #9999	; 0x270f
 800d59e:	6013      	str	r3, [r2, #0]
 800d5a0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800d5a4:	ea53 0308 	orrs.w	r3, r3, r8
 800d5a8:	f000 84fd 	beq.w	800dfa6 <_dtoa_r+0xa86>
 800d5ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d5ae:	b963      	cbnz	r3, 800d5ca <_dtoa_r+0xaa>
 800d5b0:	4b94      	ldr	r3, [pc, #592]	; (800d804 <_dtoa_r+0x2e4>)
 800d5b2:	e01f      	b.n	800d5f4 <_dtoa_r+0xd4>
 800d5b4:	4b94      	ldr	r3, [pc, #592]	; (800d808 <_dtoa_r+0x2e8>)
 800d5b6:	9301      	str	r3, [sp, #4]
 800d5b8:	3308      	adds	r3, #8
 800d5ba:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d5bc:	6013      	str	r3, [r2, #0]
 800d5be:	9801      	ldr	r0, [sp, #4]
 800d5c0:	b011      	add	sp, #68	; 0x44
 800d5c2:	ecbd 8b02 	vpop	{d8}
 800d5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5ca:	4b8e      	ldr	r3, [pc, #568]	; (800d804 <_dtoa_r+0x2e4>)
 800d5cc:	9301      	str	r3, [sp, #4]
 800d5ce:	3303      	adds	r3, #3
 800d5d0:	e7f3      	b.n	800d5ba <_dtoa_r+0x9a>
 800d5d2:	ed9d 8b02 	vldr	d8, [sp, #8]
 800d5d6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d5da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5de:	d10b      	bne.n	800d5f8 <_dtoa_r+0xd8>
 800d5e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d5e2:	2301      	movs	r3, #1
 800d5e4:	6013      	str	r3, [r2, #0]
 800d5e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	f000 84d9 	beq.w	800dfa0 <_dtoa_r+0xa80>
 800d5ee:	4887      	ldr	r0, [pc, #540]	; (800d80c <_dtoa_r+0x2ec>)
 800d5f0:	6018      	str	r0, [r3, #0]
 800d5f2:	1e43      	subs	r3, r0, #1
 800d5f4:	9301      	str	r3, [sp, #4]
 800d5f6:	e7e2      	b.n	800d5be <_dtoa_r+0x9e>
 800d5f8:	a90f      	add	r1, sp, #60	; 0x3c
 800d5fa:	aa0e      	add	r2, sp, #56	; 0x38
 800d5fc:	4630      	mov	r0, r6
 800d5fe:	eeb0 0b48 	vmov.f64	d0, d8
 800d602:	f001 f975 	bl	800e8f0 <__d2b>
 800d606:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800d60a:	4605      	mov	r5, r0
 800d60c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800d60e:	2900      	cmp	r1, #0
 800d610:	d046      	beq.n	800d6a0 <_dtoa_r+0x180>
 800d612:	ee18 4a90 	vmov	r4, s17
 800d616:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d61a:	ec53 2b18 	vmov	r2, r3, d8
 800d61e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800d622:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d626:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d62a:	2400      	movs	r4, #0
 800d62c:	ec43 2b16 	vmov	d6, r2, r3
 800d630:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800d634:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800d7e0 <_dtoa_r+0x2c0>
 800d638:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d63c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800d7e8 <_dtoa_r+0x2c8>
 800d640:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d644:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800d7f0 <_dtoa_r+0x2d0>
 800d648:	ee07 1a90 	vmov	s15, r1
 800d64c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800d650:	eeb0 7b46 	vmov.f64	d7, d6
 800d654:	eea4 7b05 	vfma.f64	d7, d4, d5
 800d658:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d65c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d664:	ee16 ba90 	vmov	fp, s13
 800d668:	940a      	str	r4, [sp, #40]	; 0x28
 800d66a:	d508      	bpl.n	800d67e <_dtoa_r+0x15e>
 800d66c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d670:	eeb4 6b47 	vcmp.f64	d6, d7
 800d674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d678:	bf18      	it	ne
 800d67a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800d67e:	f1bb 0f16 	cmp.w	fp, #22
 800d682:	d82f      	bhi.n	800d6e4 <_dtoa_r+0x1c4>
 800d684:	4b62      	ldr	r3, [pc, #392]	; (800d810 <_dtoa_r+0x2f0>)
 800d686:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d68a:	ed93 7b00 	vldr	d7, [r3]
 800d68e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d696:	d501      	bpl.n	800d69c <_dtoa_r+0x17c>
 800d698:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d69c:	2300      	movs	r3, #0
 800d69e:	e022      	b.n	800d6e6 <_dtoa_r+0x1c6>
 800d6a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d6a2:	4401      	add	r1, r0
 800d6a4:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800d6a8:	2b20      	cmp	r3, #32
 800d6aa:	bfc1      	itttt	gt
 800d6ac:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d6b0:	fa04 f303 	lslgt.w	r3, r4, r3
 800d6b4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800d6b8:	fa28 f804 	lsrgt.w	r8, r8, r4
 800d6bc:	bfd6      	itet	le
 800d6be:	f1c3 0320 	rsble	r3, r3, #32
 800d6c2:	ea43 0808 	orrgt.w	r8, r3, r8
 800d6c6:	fa08 f803 	lslle.w	r8, r8, r3
 800d6ca:	ee07 8a90 	vmov	s15, r8
 800d6ce:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d6d2:	3901      	subs	r1, #1
 800d6d4:	ee17 4a90 	vmov	r4, s15
 800d6d8:	ec53 2b17 	vmov	r2, r3, d7
 800d6dc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800d6e0:	2401      	movs	r4, #1
 800d6e2:	e7a3      	b.n	800d62c <_dtoa_r+0x10c>
 800d6e4:	2301      	movs	r3, #1
 800d6e6:	930b      	str	r3, [sp, #44]	; 0x2c
 800d6e8:	1a43      	subs	r3, r0, r1
 800d6ea:	1e5a      	subs	r2, r3, #1
 800d6ec:	bf45      	ittet	mi
 800d6ee:	f1c3 0301 	rsbmi	r3, r3, #1
 800d6f2:	9304      	strmi	r3, [sp, #16]
 800d6f4:	2300      	movpl	r3, #0
 800d6f6:	2300      	movmi	r3, #0
 800d6f8:	9205      	str	r2, [sp, #20]
 800d6fa:	bf54      	ite	pl
 800d6fc:	9304      	strpl	r3, [sp, #16]
 800d6fe:	9305      	strmi	r3, [sp, #20]
 800d700:	f1bb 0f00 	cmp.w	fp, #0
 800d704:	db18      	blt.n	800d738 <_dtoa_r+0x218>
 800d706:	9b05      	ldr	r3, [sp, #20]
 800d708:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800d70c:	445b      	add	r3, fp
 800d70e:	9305      	str	r3, [sp, #20]
 800d710:	2300      	movs	r3, #0
 800d712:	9a06      	ldr	r2, [sp, #24]
 800d714:	2a09      	cmp	r2, #9
 800d716:	d849      	bhi.n	800d7ac <_dtoa_r+0x28c>
 800d718:	2a05      	cmp	r2, #5
 800d71a:	bfc4      	itt	gt
 800d71c:	3a04      	subgt	r2, #4
 800d71e:	9206      	strgt	r2, [sp, #24]
 800d720:	9a06      	ldr	r2, [sp, #24]
 800d722:	f1a2 0202 	sub.w	r2, r2, #2
 800d726:	bfcc      	ite	gt
 800d728:	2400      	movgt	r4, #0
 800d72a:	2401      	movle	r4, #1
 800d72c:	2a03      	cmp	r2, #3
 800d72e:	d848      	bhi.n	800d7c2 <_dtoa_r+0x2a2>
 800d730:	e8df f002 	tbb	[pc, r2]
 800d734:	3a2c2e0b 	.word	0x3a2c2e0b
 800d738:	9b04      	ldr	r3, [sp, #16]
 800d73a:	2200      	movs	r2, #0
 800d73c:	eba3 030b 	sub.w	r3, r3, fp
 800d740:	9304      	str	r3, [sp, #16]
 800d742:	9209      	str	r2, [sp, #36]	; 0x24
 800d744:	f1cb 0300 	rsb	r3, fp, #0
 800d748:	e7e3      	b.n	800d712 <_dtoa_r+0x1f2>
 800d74a:	2200      	movs	r2, #0
 800d74c:	9207      	str	r2, [sp, #28]
 800d74e:	9a08      	ldr	r2, [sp, #32]
 800d750:	2a00      	cmp	r2, #0
 800d752:	dc39      	bgt.n	800d7c8 <_dtoa_r+0x2a8>
 800d754:	f04f 0a01 	mov.w	sl, #1
 800d758:	46d1      	mov	r9, sl
 800d75a:	4652      	mov	r2, sl
 800d75c:	f8cd a020 	str.w	sl, [sp, #32]
 800d760:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800d762:	2100      	movs	r1, #0
 800d764:	6079      	str	r1, [r7, #4]
 800d766:	2004      	movs	r0, #4
 800d768:	f100 0c14 	add.w	ip, r0, #20
 800d76c:	4594      	cmp	ip, r2
 800d76e:	6879      	ldr	r1, [r7, #4]
 800d770:	d92f      	bls.n	800d7d2 <_dtoa_r+0x2b2>
 800d772:	4630      	mov	r0, r6
 800d774:	930d      	str	r3, [sp, #52]	; 0x34
 800d776:	f000 fd93 	bl	800e2a0 <_Balloc>
 800d77a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d77c:	9001      	str	r0, [sp, #4]
 800d77e:	4602      	mov	r2, r0
 800d780:	2800      	cmp	r0, #0
 800d782:	d149      	bne.n	800d818 <_dtoa_r+0x2f8>
 800d784:	4b23      	ldr	r3, [pc, #140]	; (800d814 <_dtoa_r+0x2f4>)
 800d786:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d78a:	e6e1      	b.n	800d550 <_dtoa_r+0x30>
 800d78c:	2201      	movs	r2, #1
 800d78e:	e7dd      	b.n	800d74c <_dtoa_r+0x22c>
 800d790:	2200      	movs	r2, #0
 800d792:	9207      	str	r2, [sp, #28]
 800d794:	9a08      	ldr	r2, [sp, #32]
 800d796:	eb0b 0a02 	add.w	sl, fp, r2
 800d79a:	f10a 0901 	add.w	r9, sl, #1
 800d79e:	464a      	mov	r2, r9
 800d7a0:	2a01      	cmp	r2, #1
 800d7a2:	bfb8      	it	lt
 800d7a4:	2201      	movlt	r2, #1
 800d7a6:	e7db      	b.n	800d760 <_dtoa_r+0x240>
 800d7a8:	2201      	movs	r2, #1
 800d7aa:	e7f2      	b.n	800d792 <_dtoa_r+0x272>
 800d7ac:	2401      	movs	r4, #1
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800d7b4:	f04f 3aff 	mov.w	sl, #4294967295
 800d7b8:	2100      	movs	r1, #0
 800d7ba:	46d1      	mov	r9, sl
 800d7bc:	2212      	movs	r2, #18
 800d7be:	9108      	str	r1, [sp, #32]
 800d7c0:	e7ce      	b.n	800d760 <_dtoa_r+0x240>
 800d7c2:	2201      	movs	r2, #1
 800d7c4:	9207      	str	r2, [sp, #28]
 800d7c6:	e7f5      	b.n	800d7b4 <_dtoa_r+0x294>
 800d7c8:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d7cc:	46d1      	mov	r9, sl
 800d7ce:	4652      	mov	r2, sl
 800d7d0:	e7c6      	b.n	800d760 <_dtoa_r+0x240>
 800d7d2:	3101      	adds	r1, #1
 800d7d4:	6079      	str	r1, [r7, #4]
 800d7d6:	0040      	lsls	r0, r0, #1
 800d7d8:	e7c6      	b.n	800d768 <_dtoa_r+0x248>
 800d7da:	bf00      	nop
 800d7dc:	f3af 8000 	nop.w
 800d7e0:	636f4361 	.word	0x636f4361
 800d7e4:	3fd287a7 	.word	0x3fd287a7
 800d7e8:	8b60c8b3 	.word	0x8b60c8b3
 800d7ec:	3fc68a28 	.word	0x3fc68a28
 800d7f0:	509f79fb 	.word	0x509f79fb
 800d7f4:	3fd34413 	.word	0x3fd34413
 800d7f8:	0800f9e5 	.word	0x0800f9e5
 800d7fc:	0800f9fc 	.word	0x0800f9fc
 800d800:	7ff00000 	.word	0x7ff00000
 800d804:	0800f9e1 	.word	0x0800f9e1
 800d808:	0800f9d8 	.word	0x0800f9d8
 800d80c:	0800f9b5 	.word	0x0800f9b5
 800d810:	0800faf0 	.word	0x0800faf0
 800d814:	0800fa57 	.word	0x0800fa57
 800d818:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800d81a:	9901      	ldr	r1, [sp, #4]
 800d81c:	6011      	str	r1, [r2, #0]
 800d81e:	f1b9 0f0e 	cmp.w	r9, #14
 800d822:	d86c      	bhi.n	800d8fe <_dtoa_r+0x3de>
 800d824:	2c00      	cmp	r4, #0
 800d826:	d06a      	beq.n	800d8fe <_dtoa_r+0x3de>
 800d828:	f1bb 0f00 	cmp.w	fp, #0
 800d82c:	f340 80a0 	ble.w	800d970 <_dtoa_r+0x450>
 800d830:	49c1      	ldr	r1, [pc, #772]	; (800db38 <_dtoa_r+0x618>)
 800d832:	f00b 020f 	and.w	r2, fp, #15
 800d836:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800d83a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d83e:	ed92 7b00 	vldr	d7, [r2]
 800d842:	ea4f 112b 	mov.w	r1, fp, asr #4
 800d846:	f000 8087 	beq.w	800d958 <_dtoa_r+0x438>
 800d84a:	4abc      	ldr	r2, [pc, #752]	; (800db3c <_dtoa_r+0x61c>)
 800d84c:	ed92 6b08 	vldr	d6, [r2, #32]
 800d850:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800d854:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d858:	f001 010f 	and.w	r1, r1, #15
 800d85c:	2203      	movs	r2, #3
 800d85e:	48b7      	ldr	r0, [pc, #732]	; (800db3c <_dtoa_r+0x61c>)
 800d860:	2900      	cmp	r1, #0
 800d862:	d17b      	bne.n	800d95c <_dtoa_r+0x43c>
 800d864:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d868:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d86c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d870:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d872:	2900      	cmp	r1, #0
 800d874:	f000 80a2 	beq.w	800d9bc <_dtoa_r+0x49c>
 800d878:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d87c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d880:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d888:	f140 8098 	bpl.w	800d9bc <_dtoa_r+0x49c>
 800d88c:	f1b9 0f00 	cmp.w	r9, #0
 800d890:	f000 8094 	beq.w	800d9bc <_dtoa_r+0x49c>
 800d894:	f1ba 0f00 	cmp.w	sl, #0
 800d898:	dd2f      	ble.n	800d8fa <_dtoa_r+0x3da>
 800d89a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800d89e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d8a2:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d8a6:	f10b 37ff 	add.w	r7, fp, #4294967295
 800d8aa:	3201      	adds	r2, #1
 800d8ac:	4650      	mov	r0, sl
 800d8ae:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d8b2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800d8b6:	ee07 2a90 	vmov	s15, r2
 800d8ba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d8be:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d8c2:	ee15 4a90 	vmov	r4, s11
 800d8c6:	ec52 1b15 	vmov	r1, r2, d5
 800d8ca:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800d8ce:	2800      	cmp	r0, #0
 800d8d0:	d177      	bne.n	800d9c2 <_dtoa_r+0x4a2>
 800d8d2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d8d6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d8da:	ec42 1b17 	vmov	d7, r1, r2
 800d8de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d8e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8e6:	f300 8263 	bgt.w	800ddb0 <_dtoa_r+0x890>
 800d8ea:	eeb1 7b47 	vneg.f64	d7, d7
 800d8ee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d8f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8f6:	f100 8258 	bmi.w	800ddaa <_dtoa_r+0x88a>
 800d8fa:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d8fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d900:	2a00      	cmp	r2, #0
 800d902:	f2c0 811d 	blt.w	800db40 <_dtoa_r+0x620>
 800d906:	f1bb 0f0e 	cmp.w	fp, #14
 800d90a:	f300 8119 	bgt.w	800db40 <_dtoa_r+0x620>
 800d90e:	4b8a      	ldr	r3, [pc, #552]	; (800db38 <_dtoa_r+0x618>)
 800d910:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d914:	ed93 6b00 	vldr	d6, [r3]
 800d918:	9b08      	ldr	r3, [sp, #32]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	f280 80b7 	bge.w	800da8e <_dtoa_r+0x56e>
 800d920:	f1b9 0f00 	cmp.w	r9, #0
 800d924:	f300 80b3 	bgt.w	800da8e <_dtoa_r+0x56e>
 800d928:	f040 823f 	bne.w	800ddaa <_dtoa_r+0x88a>
 800d92c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d930:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d934:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d938:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d93c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d940:	464c      	mov	r4, r9
 800d942:	464f      	mov	r7, r9
 800d944:	f280 8215 	bge.w	800dd72 <_dtoa_r+0x852>
 800d948:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d94c:	2331      	movs	r3, #49	; 0x31
 800d94e:	f808 3b01 	strb.w	r3, [r8], #1
 800d952:	f10b 0b01 	add.w	fp, fp, #1
 800d956:	e211      	b.n	800dd7c <_dtoa_r+0x85c>
 800d958:	2202      	movs	r2, #2
 800d95a:	e780      	b.n	800d85e <_dtoa_r+0x33e>
 800d95c:	07cc      	lsls	r4, r1, #31
 800d95e:	d504      	bpl.n	800d96a <_dtoa_r+0x44a>
 800d960:	ed90 6b00 	vldr	d6, [r0]
 800d964:	3201      	adds	r2, #1
 800d966:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d96a:	1049      	asrs	r1, r1, #1
 800d96c:	3008      	adds	r0, #8
 800d96e:	e777      	b.n	800d860 <_dtoa_r+0x340>
 800d970:	d022      	beq.n	800d9b8 <_dtoa_r+0x498>
 800d972:	f1cb 0100 	rsb	r1, fp, #0
 800d976:	4a70      	ldr	r2, [pc, #448]	; (800db38 <_dtoa_r+0x618>)
 800d978:	f001 000f 	and.w	r0, r1, #15
 800d97c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d980:	ed92 7b00 	vldr	d7, [r2]
 800d984:	ee28 7b07 	vmul.f64	d7, d8, d7
 800d988:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d98c:	486b      	ldr	r0, [pc, #428]	; (800db3c <_dtoa_r+0x61c>)
 800d98e:	1109      	asrs	r1, r1, #4
 800d990:	2400      	movs	r4, #0
 800d992:	2202      	movs	r2, #2
 800d994:	b929      	cbnz	r1, 800d9a2 <_dtoa_r+0x482>
 800d996:	2c00      	cmp	r4, #0
 800d998:	f43f af6a 	beq.w	800d870 <_dtoa_r+0x350>
 800d99c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d9a0:	e766      	b.n	800d870 <_dtoa_r+0x350>
 800d9a2:	07cf      	lsls	r7, r1, #31
 800d9a4:	d505      	bpl.n	800d9b2 <_dtoa_r+0x492>
 800d9a6:	ed90 6b00 	vldr	d6, [r0]
 800d9aa:	3201      	adds	r2, #1
 800d9ac:	2401      	movs	r4, #1
 800d9ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d9b2:	1049      	asrs	r1, r1, #1
 800d9b4:	3008      	adds	r0, #8
 800d9b6:	e7ed      	b.n	800d994 <_dtoa_r+0x474>
 800d9b8:	2202      	movs	r2, #2
 800d9ba:	e759      	b.n	800d870 <_dtoa_r+0x350>
 800d9bc:	465f      	mov	r7, fp
 800d9be:	4648      	mov	r0, r9
 800d9c0:	e775      	b.n	800d8ae <_dtoa_r+0x38e>
 800d9c2:	ec42 1b17 	vmov	d7, r1, r2
 800d9c6:	4a5c      	ldr	r2, [pc, #368]	; (800db38 <_dtoa_r+0x618>)
 800d9c8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d9cc:	ed12 4b02 	vldr	d4, [r2, #-8]
 800d9d0:	9a01      	ldr	r2, [sp, #4]
 800d9d2:	1814      	adds	r4, r2, r0
 800d9d4:	9a07      	ldr	r2, [sp, #28]
 800d9d6:	b352      	cbz	r2, 800da2e <_dtoa_r+0x50e>
 800d9d8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800d9dc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800d9e0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d9e4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d9e8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d9ec:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d9f0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d9f4:	ee14 2a90 	vmov	r2, s9
 800d9f8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d9fc:	3230      	adds	r2, #48	; 0x30
 800d9fe:	ee36 6b45 	vsub.f64	d6, d6, d5
 800da02:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800da06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da0a:	f808 2b01 	strb.w	r2, [r8], #1
 800da0e:	d439      	bmi.n	800da84 <_dtoa_r+0x564>
 800da10:	ee32 5b46 	vsub.f64	d5, d2, d6
 800da14:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800da18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da1c:	d472      	bmi.n	800db04 <_dtoa_r+0x5e4>
 800da1e:	45a0      	cmp	r8, r4
 800da20:	f43f af6b 	beq.w	800d8fa <_dtoa_r+0x3da>
 800da24:	ee27 7b03 	vmul.f64	d7, d7, d3
 800da28:	ee26 6b03 	vmul.f64	d6, d6, d3
 800da2c:	e7e0      	b.n	800d9f0 <_dtoa_r+0x4d0>
 800da2e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800da32:	ee27 7b04 	vmul.f64	d7, d7, d4
 800da36:	4621      	mov	r1, r4
 800da38:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800da3c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800da40:	ee14 2a90 	vmov	r2, s9
 800da44:	3230      	adds	r2, #48	; 0x30
 800da46:	f808 2b01 	strb.w	r2, [r8], #1
 800da4a:	45a0      	cmp	r8, r4
 800da4c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800da50:	ee36 6b45 	vsub.f64	d6, d6, d5
 800da54:	d118      	bne.n	800da88 <_dtoa_r+0x568>
 800da56:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800da5a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800da5e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800da62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da66:	dc4d      	bgt.n	800db04 <_dtoa_r+0x5e4>
 800da68:	ee35 7b47 	vsub.f64	d7, d5, d7
 800da6c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800da70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da74:	f57f af41 	bpl.w	800d8fa <_dtoa_r+0x3da>
 800da78:	4688      	mov	r8, r1
 800da7a:	3901      	subs	r1, #1
 800da7c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800da80:	2b30      	cmp	r3, #48	; 0x30
 800da82:	d0f9      	beq.n	800da78 <_dtoa_r+0x558>
 800da84:	46bb      	mov	fp, r7
 800da86:	e02a      	b.n	800dade <_dtoa_r+0x5be>
 800da88:	ee26 6b03 	vmul.f64	d6, d6, d3
 800da8c:	e7d6      	b.n	800da3c <_dtoa_r+0x51c>
 800da8e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800da92:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800da96:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800da9a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800da9e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800daa2:	ee15 3a10 	vmov	r3, s10
 800daa6:	3330      	adds	r3, #48	; 0x30
 800daa8:	f808 3b01 	strb.w	r3, [r8], #1
 800daac:	9b01      	ldr	r3, [sp, #4]
 800daae:	eba8 0303 	sub.w	r3, r8, r3
 800dab2:	4599      	cmp	r9, r3
 800dab4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800dab8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800dabc:	d133      	bne.n	800db26 <_dtoa_r+0x606>
 800dabe:	ee37 7b07 	vadd.f64	d7, d7, d7
 800dac2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800dac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800daca:	dc1a      	bgt.n	800db02 <_dtoa_r+0x5e2>
 800dacc:	eeb4 7b46 	vcmp.f64	d7, d6
 800dad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dad4:	d103      	bne.n	800dade <_dtoa_r+0x5be>
 800dad6:	ee15 3a10 	vmov	r3, s10
 800dada:	07d9      	lsls	r1, r3, #31
 800dadc:	d411      	bmi.n	800db02 <_dtoa_r+0x5e2>
 800dade:	4629      	mov	r1, r5
 800dae0:	4630      	mov	r0, r6
 800dae2:	f000 fc1d 	bl	800e320 <_Bfree>
 800dae6:	2300      	movs	r3, #0
 800dae8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800daea:	f888 3000 	strb.w	r3, [r8]
 800daee:	f10b 0301 	add.w	r3, fp, #1
 800daf2:	6013      	str	r3, [r2, #0]
 800daf4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	f43f ad61 	beq.w	800d5be <_dtoa_r+0x9e>
 800dafc:	f8c3 8000 	str.w	r8, [r3]
 800db00:	e55d      	b.n	800d5be <_dtoa_r+0x9e>
 800db02:	465f      	mov	r7, fp
 800db04:	4643      	mov	r3, r8
 800db06:	4698      	mov	r8, r3
 800db08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db0c:	2a39      	cmp	r2, #57	; 0x39
 800db0e:	d106      	bne.n	800db1e <_dtoa_r+0x5fe>
 800db10:	9a01      	ldr	r2, [sp, #4]
 800db12:	429a      	cmp	r2, r3
 800db14:	d1f7      	bne.n	800db06 <_dtoa_r+0x5e6>
 800db16:	9901      	ldr	r1, [sp, #4]
 800db18:	2230      	movs	r2, #48	; 0x30
 800db1a:	3701      	adds	r7, #1
 800db1c:	700a      	strb	r2, [r1, #0]
 800db1e:	781a      	ldrb	r2, [r3, #0]
 800db20:	3201      	adds	r2, #1
 800db22:	701a      	strb	r2, [r3, #0]
 800db24:	e7ae      	b.n	800da84 <_dtoa_r+0x564>
 800db26:	ee27 7b04 	vmul.f64	d7, d7, d4
 800db2a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800db2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db32:	d1b2      	bne.n	800da9a <_dtoa_r+0x57a>
 800db34:	e7d3      	b.n	800dade <_dtoa_r+0x5be>
 800db36:	bf00      	nop
 800db38:	0800faf0 	.word	0x0800faf0
 800db3c:	0800fac8 	.word	0x0800fac8
 800db40:	9907      	ldr	r1, [sp, #28]
 800db42:	2900      	cmp	r1, #0
 800db44:	f000 80d0 	beq.w	800dce8 <_dtoa_r+0x7c8>
 800db48:	9906      	ldr	r1, [sp, #24]
 800db4a:	2901      	cmp	r1, #1
 800db4c:	f300 80b4 	bgt.w	800dcb8 <_dtoa_r+0x798>
 800db50:	990a      	ldr	r1, [sp, #40]	; 0x28
 800db52:	2900      	cmp	r1, #0
 800db54:	f000 80ac 	beq.w	800dcb0 <_dtoa_r+0x790>
 800db58:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800db5c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800db60:	461c      	mov	r4, r3
 800db62:	930a      	str	r3, [sp, #40]	; 0x28
 800db64:	9b04      	ldr	r3, [sp, #16]
 800db66:	4413      	add	r3, r2
 800db68:	9304      	str	r3, [sp, #16]
 800db6a:	9b05      	ldr	r3, [sp, #20]
 800db6c:	2101      	movs	r1, #1
 800db6e:	4413      	add	r3, r2
 800db70:	4630      	mov	r0, r6
 800db72:	9305      	str	r3, [sp, #20]
 800db74:	f000 fc8c 	bl	800e490 <__i2b>
 800db78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db7a:	4607      	mov	r7, r0
 800db7c:	f1b8 0f00 	cmp.w	r8, #0
 800db80:	dd0d      	ble.n	800db9e <_dtoa_r+0x67e>
 800db82:	9a05      	ldr	r2, [sp, #20]
 800db84:	2a00      	cmp	r2, #0
 800db86:	dd0a      	ble.n	800db9e <_dtoa_r+0x67e>
 800db88:	4542      	cmp	r2, r8
 800db8a:	9904      	ldr	r1, [sp, #16]
 800db8c:	bfa8      	it	ge
 800db8e:	4642      	movge	r2, r8
 800db90:	1a89      	subs	r1, r1, r2
 800db92:	9104      	str	r1, [sp, #16]
 800db94:	9905      	ldr	r1, [sp, #20]
 800db96:	eba8 0802 	sub.w	r8, r8, r2
 800db9a:	1a8a      	subs	r2, r1, r2
 800db9c:	9205      	str	r2, [sp, #20]
 800db9e:	b303      	cbz	r3, 800dbe2 <_dtoa_r+0x6c2>
 800dba0:	9a07      	ldr	r2, [sp, #28]
 800dba2:	2a00      	cmp	r2, #0
 800dba4:	f000 80a5 	beq.w	800dcf2 <_dtoa_r+0x7d2>
 800dba8:	2c00      	cmp	r4, #0
 800dbaa:	dd13      	ble.n	800dbd4 <_dtoa_r+0x6b4>
 800dbac:	4639      	mov	r1, r7
 800dbae:	4622      	mov	r2, r4
 800dbb0:	4630      	mov	r0, r6
 800dbb2:	930d      	str	r3, [sp, #52]	; 0x34
 800dbb4:	f000 fd2c 	bl	800e610 <__pow5mult>
 800dbb8:	462a      	mov	r2, r5
 800dbba:	4601      	mov	r1, r0
 800dbbc:	4607      	mov	r7, r0
 800dbbe:	4630      	mov	r0, r6
 800dbc0:	f000 fc7c 	bl	800e4bc <__multiply>
 800dbc4:	4629      	mov	r1, r5
 800dbc6:	900a      	str	r0, [sp, #40]	; 0x28
 800dbc8:	4630      	mov	r0, r6
 800dbca:	f000 fba9 	bl	800e320 <_Bfree>
 800dbce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dbd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dbd2:	4615      	mov	r5, r2
 800dbd4:	1b1a      	subs	r2, r3, r4
 800dbd6:	d004      	beq.n	800dbe2 <_dtoa_r+0x6c2>
 800dbd8:	4629      	mov	r1, r5
 800dbda:	4630      	mov	r0, r6
 800dbdc:	f000 fd18 	bl	800e610 <__pow5mult>
 800dbe0:	4605      	mov	r5, r0
 800dbe2:	2101      	movs	r1, #1
 800dbe4:	4630      	mov	r0, r6
 800dbe6:	f000 fc53 	bl	800e490 <__i2b>
 800dbea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	4604      	mov	r4, r0
 800dbf0:	f340 8081 	ble.w	800dcf6 <_dtoa_r+0x7d6>
 800dbf4:	461a      	mov	r2, r3
 800dbf6:	4601      	mov	r1, r0
 800dbf8:	4630      	mov	r0, r6
 800dbfa:	f000 fd09 	bl	800e610 <__pow5mult>
 800dbfe:	9b06      	ldr	r3, [sp, #24]
 800dc00:	2b01      	cmp	r3, #1
 800dc02:	4604      	mov	r4, r0
 800dc04:	dd7a      	ble.n	800dcfc <_dtoa_r+0x7dc>
 800dc06:	2300      	movs	r3, #0
 800dc08:	930a      	str	r3, [sp, #40]	; 0x28
 800dc0a:	6922      	ldr	r2, [r4, #16]
 800dc0c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800dc10:	6910      	ldr	r0, [r2, #16]
 800dc12:	f000 fbed 	bl	800e3f0 <__hi0bits>
 800dc16:	f1c0 0020 	rsb	r0, r0, #32
 800dc1a:	9b05      	ldr	r3, [sp, #20]
 800dc1c:	4418      	add	r0, r3
 800dc1e:	f010 001f 	ands.w	r0, r0, #31
 800dc22:	f000 808c 	beq.w	800dd3e <_dtoa_r+0x81e>
 800dc26:	f1c0 0220 	rsb	r2, r0, #32
 800dc2a:	2a04      	cmp	r2, #4
 800dc2c:	f340 8085 	ble.w	800dd3a <_dtoa_r+0x81a>
 800dc30:	f1c0 001c 	rsb	r0, r0, #28
 800dc34:	9b04      	ldr	r3, [sp, #16]
 800dc36:	4403      	add	r3, r0
 800dc38:	9304      	str	r3, [sp, #16]
 800dc3a:	9b05      	ldr	r3, [sp, #20]
 800dc3c:	4403      	add	r3, r0
 800dc3e:	4480      	add	r8, r0
 800dc40:	9305      	str	r3, [sp, #20]
 800dc42:	9b04      	ldr	r3, [sp, #16]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	dd05      	ble.n	800dc54 <_dtoa_r+0x734>
 800dc48:	4629      	mov	r1, r5
 800dc4a:	461a      	mov	r2, r3
 800dc4c:	4630      	mov	r0, r6
 800dc4e:	f000 fd39 	bl	800e6c4 <__lshift>
 800dc52:	4605      	mov	r5, r0
 800dc54:	9b05      	ldr	r3, [sp, #20]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	dd05      	ble.n	800dc66 <_dtoa_r+0x746>
 800dc5a:	4621      	mov	r1, r4
 800dc5c:	461a      	mov	r2, r3
 800dc5e:	4630      	mov	r0, r6
 800dc60:	f000 fd30 	bl	800e6c4 <__lshift>
 800dc64:	4604      	mov	r4, r0
 800dc66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d06a      	beq.n	800dd42 <_dtoa_r+0x822>
 800dc6c:	4621      	mov	r1, r4
 800dc6e:	4628      	mov	r0, r5
 800dc70:	f000 fd98 	bl	800e7a4 <__mcmp>
 800dc74:	2800      	cmp	r0, #0
 800dc76:	da64      	bge.n	800dd42 <_dtoa_r+0x822>
 800dc78:	2300      	movs	r3, #0
 800dc7a:	4629      	mov	r1, r5
 800dc7c:	220a      	movs	r2, #10
 800dc7e:	4630      	mov	r0, r6
 800dc80:	f000 fb70 	bl	800e364 <__multadd>
 800dc84:	9b07      	ldr	r3, [sp, #28]
 800dc86:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dc8a:	4605      	mov	r5, r0
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	f000 8191 	beq.w	800dfb4 <_dtoa_r+0xa94>
 800dc92:	4639      	mov	r1, r7
 800dc94:	2300      	movs	r3, #0
 800dc96:	220a      	movs	r2, #10
 800dc98:	4630      	mov	r0, r6
 800dc9a:	f000 fb63 	bl	800e364 <__multadd>
 800dc9e:	f1ba 0f00 	cmp.w	sl, #0
 800dca2:	4607      	mov	r7, r0
 800dca4:	f300 808d 	bgt.w	800ddc2 <_dtoa_r+0x8a2>
 800dca8:	9b06      	ldr	r3, [sp, #24]
 800dcaa:	2b02      	cmp	r3, #2
 800dcac:	dc50      	bgt.n	800dd50 <_dtoa_r+0x830>
 800dcae:	e088      	b.n	800ddc2 <_dtoa_r+0x8a2>
 800dcb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dcb2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800dcb6:	e751      	b.n	800db5c <_dtoa_r+0x63c>
 800dcb8:	f109 34ff 	add.w	r4, r9, #4294967295
 800dcbc:	42a3      	cmp	r3, r4
 800dcbe:	bfbf      	itttt	lt
 800dcc0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800dcc2:	1ae3      	sublt	r3, r4, r3
 800dcc4:	18d2      	addlt	r2, r2, r3
 800dcc6:	9209      	strlt	r2, [sp, #36]	; 0x24
 800dcc8:	bfb6      	itet	lt
 800dcca:	4623      	movlt	r3, r4
 800dccc:	1b1c      	subge	r4, r3, r4
 800dcce:	2400      	movlt	r4, #0
 800dcd0:	f1b9 0f00 	cmp.w	r9, #0
 800dcd4:	bfb5      	itete	lt
 800dcd6:	9a04      	ldrlt	r2, [sp, #16]
 800dcd8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800dcdc:	eba2 0809 	sublt.w	r8, r2, r9
 800dce0:	464a      	movge	r2, r9
 800dce2:	bfb8      	it	lt
 800dce4:	2200      	movlt	r2, #0
 800dce6:	e73c      	b.n	800db62 <_dtoa_r+0x642>
 800dce8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800dcec:	9f07      	ldr	r7, [sp, #28]
 800dcee:	461c      	mov	r4, r3
 800dcf0:	e744      	b.n	800db7c <_dtoa_r+0x65c>
 800dcf2:	461a      	mov	r2, r3
 800dcf4:	e770      	b.n	800dbd8 <_dtoa_r+0x6b8>
 800dcf6:	9b06      	ldr	r3, [sp, #24]
 800dcf8:	2b01      	cmp	r3, #1
 800dcfa:	dc18      	bgt.n	800dd2e <_dtoa_r+0x80e>
 800dcfc:	9b02      	ldr	r3, [sp, #8]
 800dcfe:	b9b3      	cbnz	r3, 800dd2e <_dtoa_r+0x80e>
 800dd00:	9b03      	ldr	r3, [sp, #12]
 800dd02:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800dd06:	b9a2      	cbnz	r2, 800dd32 <_dtoa_r+0x812>
 800dd08:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800dd0c:	0d12      	lsrs	r2, r2, #20
 800dd0e:	0512      	lsls	r2, r2, #20
 800dd10:	b18a      	cbz	r2, 800dd36 <_dtoa_r+0x816>
 800dd12:	9b04      	ldr	r3, [sp, #16]
 800dd14:	3301      	adds	r3, #1
 800dd16:	9304      	str	r3, [sp, #16]
 800dd18:	9b05      	ldr	r3, [sp, #20]
 800dd1a:	3301      	adds	r3, #1
 800dd1c:	9305      	str	r3, [sp, #20]
 800dd1e:	2301      	movs	r3, #1
 800dd20:	930a      	str	r3, [sp, #40]	; 0x28
 800dd22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	f47f af70 	bne.w	800dc0a <_dtoa_r+0x6ea>
 800dd2a:	2001      	movs	r0, #1
 800dd2c:	e775      	b.n	800dc1a <_dtoa_r+0x6fa>
 800dd2e:	2300      	movs	r3, #0
 800dd30:	e7f6      	b.n	800dd20 <_dtoa_r+0x800>
 800dd32:	9b02      	ldr	r3, [sp, #8]
 800dd34:	e7f4      	b.n	800dd20 <_dtoa_r+0x800>
 800dd36:	920a      	str	r2, [sp, #40]	; 0x28
 800dd38:	e7f3      	b.n	800dd22 <_dtoa_r+0x802>
 800dd3a:	d082      	beq.n	800dc42 <_dtoa_r+0x722>
 800dd3c:	4610      	mov	r0, r2
 800dd3e:	301c      	adds	r0, #28
 800dd40:	e778      	b.n	800dc34 <_dtoa_r+0x714>
 800dd42:	f1b9 0f00 	cmp.w	r9, #0
 800dd46:	dc37      	bgt.n	800ddb8 <_dtoa_r+0x898>
 800dd48:	9b06      	ldr	r3, [sp, #24]
 800dd4a:	2b02      	cmp	r3, #2
 800dd4c:	dd34      	ble.n	800ddb8 <_dtoa_r+0x898>
 800dd4e:	46ca      	mov	sl, r9
 800dd50:	f1ba 0f00 	cmp.w	sl, #0
 800dd54:	d10d      	bne.n	800dd72 <_dtoa_r+0x852>
 800dd56:	4621      	mov	r1, r4
 800dd58:	4653      	mov	r3, sl
 800dd5a:	2205      	movs	r2, #5
 800dd5c:	4630      	mov	r0, r6
 800dd5e:	f000 fb01 	bl	800e364 <__multadd>
 800dd62:	4601      	mov	r1, r0
 800dd64:	4604      	mov	r4, r0
 800dd66:	4628      	mov	r0, r5
 800dd68:	f000 fd1c 	bl	800e7a4 <__mcmp>
 800dd6c:	2800      	cmp	r0, #0
 800dd6e:	f73f adeb 	bgt.w	800d948 <_dtoa_r+0x428>
 800dd72:	9b08      	ldr	r3, [sp, #32]
 800dd74:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800dd78:	ea6f 0b03 	mvn.w	fp, r3
 800dd7c:	f04f 0900 	mov.w	r9, #0
 800dd80:	4621      	mov	r1, r4
 800dd82:	4630      	mov	r0, r6
 800dd84:	f000 facc 	bl	800e320 <_Bfree>
 800dd88:	2f00      	cmp	r7, #0
 800dd8a:	f43f aea8 	beq.w	800dade <_dtoa_r+0x5be>
 800dd8e:	f1b9 0f00 	cmp.w	r9, #0
 800dd92:	d005      	beq.n	800dda0 <_dtoa_r+0x880>
 800dd94:	45b9      	cmp	r9, r7
 800dd96:	d003      	beq.n	800dda0 <_dtoa_r+0x880>
 800dd98:	4649      	mov	r1, r9
 800dd9a:	4630      	mov	r0, r6
 800dd9c:	f000 fac0 	bl	800e320 <_Bfree>
 800dda0:	4639      	mov	r1, r7
 800dda2:	4630      	mov	r0, r6
 800dda4:	f000 fabc 	bl	800e320 <_Bfree>
 800dda8:	e699      	b.n	800dade <_dtoa_r+0x5be>
 800ddaa:	2400      	movs	r4, #0
 800ddac:	4627      	mov	r7, r4
 800ddae:	e7e0      	b.n	800dd72 <_dtoa_r+0x852>
 800ddb0:	46bb      	mov	fp, r7
 800ddb2:	4604      	mov	r4, r0
 800ddb4:	4607      	mov	r7, r0
 800ddb6:	e5c7      	b.n	800d948 <_dtoa_r+0x428>
 800ddb8:	9b07      	ldr	r3, [sp, #28]
 800ddba:	46ca      	mov	sl, r9
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	f000 8100 	beq.w	800dfc2 <_dtoa_r+0xaa2>
 800ddc2:	f1b8 0f00 	cmp.w	r8, #0
 800ddc6:	dd05      	ble.n	800ddd4 <_dtoa_r+0x8b4>
 800ddc8:	4639      	mov	r1, r7
 800ddca:	4642      	mov	r2, r8
 800ddcc:	4630      	mov	r0, r6
 800ddce:	f000 fc79 	bl	800e6c4 <__lshift>
 800ddd2:	4607      	mov	r7, r0
 800ddd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d05d      	beq.n	800de96 <_dtoa_r+0x976>
 800ddda:	6879      	ldr	r1, [r7, #4]
 800dddc:	4630      	mov	r0, r6
 800ddde:	f000 fa5f 	bl	800e2a0 <_Balloc>
 800dde2:	4680      	mov	r8, r0
 800dde4:	b928      	cbnz	r0, 800ddf2 <_dtoa_r+0x8d2>
 800dde6:	4b82      	ldr	r3, [pc, #520]	; (800dff0 <_dtoa_r+0xad0>)
 800dde8:	4602      	mov	r2, r0
 800ddea:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ddee:	f7ff bbaf 	b.w	800d550 <_dtoa_r+0x30>
 800ddf2:	693a      	ldr	r2, [r7, #16]
 800ddf4:	3202      	adds	r2, #2
 800ddf6:	0092      	lsls	r2, r2, #2
 800ddf8:	f107 010c 	add.w	r1, r7, #12
 800ddfc:	300c      	adds	r0, #12
 800ddfe:	f7fe fbc8 	bl	800c592 <memcpy>
 800de02:	2201      	movs	r2, #1
 800de04:	4641      	mov	r1, r8
 800de06:	4630      	mov	r0, r6
 800de08:	f000 fc5c 	bl	800e6c4 <__lshift>
 800de0c:	9b01      	ldr	r3, [sp, #4]
 800de0e:	3301      	adds	r3, #1
 800de10:	9304      	str	r3, [sp, #16]
 800de12:	9b01      	ldr	r3, [sp, #4]
 800de14:	4453      	add	r3, sl
 800de16:	9308      	str	r3, [sp, #32]
 800de18:	9b02      	ldr	r3, [sp, #8]
 800de1a:	f003 0301 	and.w	r3, r3, #1
 800de1e:	46b9      	mov	r9, r7
 800de20:	9307      	str	r3, [sp, #28]
 800de22:	4607      	mov	r7, r0
 800de24:	9b04      	ldr	r3, [sp, #16]
 800de26:	4621      	mov	r1, r4
 800de28:	3b01      	subs	r3, #1
 800de2a:	4628      	mov	r0, r5
 800de2c:	9302      	str	r3, [sp, #8]
 800de2e:	f7ff faeb 	bl	800d408 <quorem>
 800de32:	4603      	mov	r3, r0
 800de34:	3330      	adds	r3, #48	; 0x30
 800de36:	9005      	str	r0, [sp, #20]
 800de38:	4649      	mov	r1, r9
 800de3a:	4628      	mov	r0, r5
 800de3c:	9309      	str	r3, [sp, #36]	; 0x24
 800de3e:	f000 fcb1 	bl	800e7a4 <__mcmp>
 800de42:	463a      	mov	r2, r7
 800de44:	4682      	mov	sl, r0
 800de46:	4621      	mov	r1, r4
 800de48:	4630      	mov	r0, r6
 800de4a:	f000 fcc7 	bl	800e7dc <__mdiff>
 800de4e:	68c2      	ldr	r2, [r0, #12]
 800de50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de52:	4680      	mov	r8, r0
 800de54:	bb0a      	cbnz	r2, 800de9a <_dtoa_r+0x97a>
 800de56:	4601      	mov	r1, r0
 800de58:	4628      	mov	r0, r5
 800de5a:	f000 fca3 	bl	800e7a4 <__mcmp>
 800de5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de60:	4602      	mov	r2, r0
 800de62:	4641      	mov	r1, r8
 800de64:	4630      	mov	r0, r6
 800de66:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800de6a:	f000 fa59 	bl	800e320 <_Bfree>
 800de6e:	9b06      	ldr	r3, [sp, #24]
 800de70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800de72:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800de76:	ea43 0102 	orr.w	r1, r3, r2
 800de7a:	9b07      	ldr	r3, [sp, #28]
 800de7c:	430b      	orrs	r3, r1
 800de7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de80:	d10d      	bne.n	800de9e <_dtoa_r+0x97e>
 800de82:	2b39      	cmp	r3, #57	; 0x39
 800de84:	d029      	beq.n	800deda <_dtoa_r+0x9ba>
 800de86:	f1ba 0f00 	cmp.w	sl, #0
 800de8a:	dd01      	ble.n	800de90 <_dtoa_r+0x970>
 800de8c:	9b05      	ldr	r3, [sp, #20]
 800de8e:	3331      	adds	r3, #49	; 0x31
 800de90:	9a02      	ldr	r2, [sp, #8]
 800de92:	7013      	strb	r3, [r2, #0]
 800de94:	e774      	b.n	800dd80 <_dtoa_r+0x860>
 800de96:	4638      	mov	r0, r7
 800de98:	e7b8      	b.n	800de0c <_dtoa_r+0x8ec>
 800de9a:	2201      	movs	r2, #1
 800de9c:	e7e1      	b.n	800de62 <_dtoa_r+0x942>
 800de9e:	f1ba 0f00 	cmp.w	sl, #0
 800dea2:	db06      	blt.n	800deb2 <_dtoa_r+0x992>
 800dea4:	9906      	ldr	r1, [sp, #24]
 800dea6:	ea41 0a0a 	orr.w	sl, r1, sl
 800deaa:	9907      	ldr	r1, [sp, #28]
 800deac:	ea5a 0101 	orrs.w	r1, sl, r1
 800deb0:	d120      	bne.n	800def4 <_dtoa_r+0x9d4>
 800deb2:	2a00      	cmp	r2, #0
 800deb4:	ddec      	ble.n	800de90 <_dtoa_r+0x970>
 800deb6:	4629      	mov	r1, r5
 800deb8:	2201      	movs	r2, #1
 800deba:	4630      	mov	r0, r6
 800debc:	9304      	str	r3, [sp, #16]
 800debe:	f000 fc01 	bl	800e6c4 <__lshift>
 800dec2:	4621      	mov	r1, r4
 800dec4:	4605      	mov	r5, r0
 800dec6:	f000 fc6d 	bl	800e7a4 <__mcmp>
 800deca:	2800      	cmp	r0, #0
 800decc:	9b04      	ldr	r3, [sp, #16]
 800dece:	dc02      	bgt.n	800ded6 <_dtoa_r+0x9b6>
 800ded0:	d1de      	bne.n	800de90 <_dtoa_r+0x970>
 800ded2:	07da      	lsls	r2, r3, #31
 800ded4:	d5dc      	bpl.n	800de90 <_dtoa_r+0x970>
 800ded6:	2b39      	cmp	r3, #57	; 0x39
 800ded8:	d1d8      	bne.n	800de8c <_dtoa_r+0x96c>
 800deda:	9a02      	ldr	r2, [sp, #8]
 800dedc:	2339      	movs	r3, #57	; 0x39
 800dede:	7013      	strb	r3, [r2, #0]
 800dee0:	4643      	mov	r3, r8
 800dee2:	4698      	mov	r8, r3
 800dee4:	3b01      	subs	r3, #1
 800dee6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800deea:	2a39      	cmp	r2, #57	; 0x39
 800deec:	d051      	beq.n	800df92 <_dtoa_r+0xa72>
 800deee:	3201      	adds	r2, #1
 800def0:	701a      	strb	r2, [r3, #0]
 800def2:	e745      	b.n	800dd80 <_dtoa_r+0x860>
 800def4:	2a00      	cmp	r2, #0
 800def6:	dd03      	ble.n	800df00 <_dtoa_r+0x9e0>
 800def8:	2b39      	cmp	r3, #57	; 0x39
 800defa:	d0ee      	beq.n	800deda <_dtoa_r+0x9ba>
 800defc:	3301      	adds	r3, #1
 800defe:	e7c7      	b.n	800de90 <_dtoa_r+0x970>
 800df00:	9a04      	ldr	r2, [sp, #16]
 800df02:	9908      	ldr	r1, [sp, #32]
 800df04:	f802 3c01 	strb.w	r3, [r2, #-1]
 800df08:	428a      	cmp	r2, r1
 800df0a:	d02b      	beq.n	800df64 <_dtoa_r+0xa44>
 800df0c:	4629      	mov	r1, r5
 800df0e:	2300      	movs	r3, #0
 800df10:	220a      	movs	r2, #10
 800df12:	4630      	mov	r0, r6
 800df14:	f000 fa26 	bl	800e364 <__multadd>
 800df18:	45b9      	cmp	r9, r7
 800df1a:	4605      	mov	r5, r0
 800df1c:	f04f 0300 	mov.w	r3, #0
 800df20:	f04f 020a 	mov.w	r2, #10
 800df24:	4649      	mov	r1, r9
 800df26:	4630      	mov	r0, r6
 800df28:	d107      	bne.n	800df3a <_dtoa_r+0xa1a>
 800df2a:	f000 fa1b 	bl	800e364 <__multadd>
 800df2e:	4681      	mov	r9, r0
 800df30:	4607      	mov	r7, r0
 800df32:	9b04      	ldr	r3, [sp, #16]
 800df34:	3301      	adds	r3, #1
 800df36:	9304      	str	r3, [sp, #16]
 800df38:	e774      	b.n	800de24 <_dtoa_r+0x904>
 800df3a:	f000 fa13 	bl	800e364 <__multadd>
 800df3e:	4639      	mov	r1, r7
 800df40:	4681      	mov	r9, r0
 800df42:	2300      	movs	r3, #0
 800df44:	220a      	movs	r2, #10
 800df46:	4630      	mov	r0, r6
 800df48:	f000 fa0c 	bl	800e364 <__multadd>
 800df4c:	4607      	mov	r7, r0
 800df4e:	e7f0      	b.n	800df32 <_dtoa_r+0xa12>
 800df50:	f1ba 0f00 	cmp.w	sl, #0
 800df54:	9a01      	ldr	r2, [sp, #4]
 800df56:	bfcc      	ite	gt
 800df58:	46d0      	movgt	r8, sl
 800df5a:	f04f 0801 	movle.w	r8, #1
 800df5e:	4490      	add	r8, r2
 800df60:	f04f 0900 	mov.w	r9, #0
 800df64:	4629      	mov	r1, r5
 800df66:	2201      	movs	r2, #1
 800df68:	4630      	mov	r0, r6
 800df6a:	9302      	str	r3, [sp, #8]
 800df6c:	f000 fbaa 	bl	800e6c4 <__lshift>
 800df70:	4621      	mov	r1, r4
 800df72:	4605      	mov	r5, r0
 800df74:	f000 fc16 	bl	800e7a4 <__mcmp>
 800df78:	2800      	cmp	r0, #0
 800df7a:	dcb1      	bgt.n	800dee0 <_dtoa_r+0x9c0>
 800df7c:	d102      	bne.n	800df84 <_dtoa_r+0xa64>
 800df7e:	9b02      	ldr	r3, [sp, #8]
 800df80:	07db      	lsls	r3, r3, #31
 800df82:	d4ad      	bmi.n	800dee0 <_dtoa_r+0x9c0>
 800df84:	4643      	mov	r3, r8
 800df86:	4698      	mov	r8, r3
 800df88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800df8c:	2a30      	cmp	r2, #48	; 0x30
 800df8e:	d0fa      	beq.n	800df86 <_dtoa_r+0xa66>
 800df90:	e6f6      	b.n	800dd80 <_dtoa_r+0x860>
 800df92:	9a01      	ldr	r2, [sp, #4]
 800df94:	429a      	cmp	r2, r3
 800df96:	d1a4      	bne.n	800dee2 <_dtoa_r+0x9c2>
 800df98:	f10b 0b01 	add.w	fp, fp, #1
 800df9c:	2331      	movs	r3, #49	; 0x31
 800df9e:	e778      	b.n	800de92 <_dtoa_r+0x972>
 800dfa0:	4b14      	ldr	r3, [pc, #80]	; (800dff4 <_dtoa_r+0xad4>)
 800dfa2:	f7ff bb27 	b.w	800d5f4 <_dtoa_r+0xd4>
 800dfa6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	f47f ab03 	bne.w	800d5b4 <_dtoa_r+0x94>
 800dfae:	4b12      	ldr	r3, [pc, #72]	; (800dff8 <_dtoa_r+0xad8>)
 800dfb0:	f7ff bb20 	b.w	800d5f4 <_dtoa_r+0xd4>
 800dfb4:	f1ba 0f00 	cmp.w	sl, #0
 800dfb8:	dc03      	bgt.n	800dfc2 <_dtoa_r+0xaa2>
 800dfba:	9b06      	ldr	r3, [sp, #24]
 800dfbc:	2b02      	cmp	r3, #2
 800dfbe:	f73f aec7 	bgt.w	800dd50 <_dtoa_r+0x830>
 800dfc2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800dfc6:	4621      	mov	r1, r4
 800dfc8:	4628      	mov	r0, r5
 800dfca:	f7ff fa1d 	bl	800d408 <quorem>
 800dfce:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800dfd2:	f808 3b01 	strb.w	r3, [r8], #1
 800dfd6:	9a01      	ldr	r2, [sp, #4]
 800dfd8:	eba8 0202 	sub.w	r2, r8, r2
 800dfdc:	4592      	cmp	sl, r2
 800dfde:	ddb7      	ble.n	800df50 <_dtoa_r+0xa30>
 800dfe0:	4629      	mov	r1, r5
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	220a      	movs	r2, #10
 800dfe6:	4630      	mov	r0, r6
 800dfe8:	f000 f9bc 	bl	800e364 <__multadd>
 800dfec:	4605      	mov	r5, r0
 800dfee:	e7ea      	b.n	800dfc6 <_dtoa_r+0xaa6>
 800dff0:	0800fa57 	.word	0x0800fa57
 800dff4:	0800f9b4 	.word	0x0800f9b4
 800dff8:	0800f9d8 	.word	0x0800f9d8

0800dffc <__sflush_r>:
 800dffc:	898a      	ldrh	r2, [r1, #12]
 800dffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e002:	4605      	mov	r5, r0
 800e004:	0710      	lsls	r0, r2, #28
 800e006:	460c      	mov	r4, r1
 800e008:	d458      	bmi.n	800e0bc <__sflush_r+0xc0>
 800e00a:	684b      	ldr	r3, [r1, #4]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	dc05      	bgt.n	800e01c <__sflush_r+0x20>
 800e010:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e012:	2b00      	cmp	r3, #0
 800e014:	dc02      	bgt.n	800e01c <__sflush_r+0x20>
 800e016:	2000      	movs	r0, #0
 800e018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e01c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e01e:	2e00      	cmp	r6, #0
 800e020:	d0f9      	beq.n	800e016 <__sflush_r+0x1a>
 800e022:	2300      	movs	r3, #0
 800e024:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e028:	682f      	ldr	r7, [r5, #0]
 800e02a:	602b      	str	r3, [r5, #0]
 800e02c:	d032      	beq.n	800e094 <__sflush_r+0x98>
 800e02e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e030:	89a3      	ldrh	r3, [r4, #12]
 800e032:	075a      	lsls	r2, r3, #29
 800e034:	d505      	bpl.n	800e042 <__sflush_r+0x46>
 800e036:	6863      	ldr	r3, [r4, #4]
 800e038:	1ac0      	subs	r0, r0, r3
 800e03a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e03c:	b10b      	cbz	r3, 800e042 <__sflush_r+0x46>
 800e03e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e040:	1ac0      	subs	r0, r0, r3
 800e042:	2300      	movs	r3, #0
 800e044:	4602      	mov	r2, r0
 800e046:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e048:	6a21      	ldr	r1, [r4, #32]
 800e04a:	4628      	mov	r0, r5
 800e04c:	47b0      	blx	r6
 800e04e:	1c43      	adds	r3, r0, #1
 800e050:	89a3      	ldrh	r3, [r4, #12]
 800e052:	d106      	bne.n	800e062 <__sflush_r+0x66>
 800e054:	6829      	ldr	r1, [r5, #0]
 800e056:	291d      	cmp	r1, #29
 800e058:	d82c      	bhi.n	800e0b4 <__sflush_r+0xb8>
 800e05a:	4a2a      	ldr	r2, [pc, #168]	; (800e104 <__sflush_r+0x108>)
 800e05c:	40ca      	lsrs	r2, r1
 800e05e:	07d6      	lsls	r6, r2, #31
 800e060:	d528      	bpl.n	800e0b4 <__sflush_r+0xb8>
 800e062:	2200      	movs	r2, #0
 800e064:	6062      	str	r2, [r4, #4]
 800e066:	04d9      	lsls	r1, r3, #19
 800e068:	6922      	ldr	r2, [r4, #16]
 800e06a:	6022      	str	r2, [r4, #0]
 800e06c:	d504      	bpl.n	800e078 <__sflush_r+0x7c>
 800e06e:	1c42      	adds	r2, r0, #1
 800e070:	d101      	bne.n	800e076 <__sflush_r+0x7a>
 800e072:	682b      	ldr	r3, [r5, #0]
 800e074:	b903      	cbnz	r3, 800e078 <__sflush_r+0x7c>
 800e076:	6560      	str	r0, [r4, #84]	; 0x54
 800e078:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e07a:	602f      	str	r7, [r5, #0]
 800e07c:	2900      	cmp	r1, #0
 800e07e:	d0ca      	beq.n	800e016 <__sflush_r+0x1a>
 800e080:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e084:	4299      	cmp	r1, r3
 800e086:	d002      	beq.n	800e08e <__sflush_r+0x92>
 800e088:	4628      	mov	r0, r5
 800e08a:	f000 fca3 	bl	800e9d4 <_free_r>
 800e08e:	2000      	movs	r0, #0
 800e090:	6360      	str	r0, [r4, #52]	; 0x34
 800e092:	e7c1      	b.n	800e018 <__sflush_r+0x1c>
 800e094:	6a21      	ldr	r1, [r4, #32]
 800e096:	2301      	movs	r3, #1
 800e098:	4628      	mov	r0, r5
 800e09a:	47b0      	blx	r6
 800e09c:	1c41      	adds	r1, r0, #1
 800e09e:	d1c7      	bne.n	800e030 <__sflush_r+0x34>
 800e0a0:	682b      	ldr	r3, [r5, #0]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d0c4      	beq.n	800e030 <__sflush_r+0x34>
 800e0a6:	2b1d      	cmp	r3, #29
 800e0a8:	d001      	beq.n	800e0ae <__sflush_r+0xb2>
 800e0aa:	2b16      	cmp	r3, #22
 800e0ac:	d101      	bne.n	800e0b2 <__sflush_r+0xb6>
 800e0ae:	602f      	str	r7, [r5, #0]
 800e0b0:	e7b1      	b.n	800e016 <__sflush_r+0x1a>
 800e0b2:	89a3      	ldrh	r3, [r4, #12]
 800e0b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0b8:	81a3      	strh	r3, [r4, #12]
 800e0ba:	e7ad      	b.n	800e018 <__sflush_r+0x1c>
 800e0bc:	690f      	ldr	r7, [r1, #16]
 800e0be:	2f00      	cmp	r7, #0
 800e0c0:	d0a9      	beq.n	800e016 <__sflush_r+0x1a>
 800e0c2:	0793      	lsls	r3, r2, #30
 800e0c4:	680e      	ldr	r6, [r1, #0]
 800e0c6:	bf08      	it	eq
 800e0c8:	694b      	ldreq	r3, [r1, #20]
 800e0ca:	600f      	str	r7, [r1, #0]
 800e0cc:	bf18      	it	ne
 800e0ce:	2300      	movne	r3, #0
 800e0d0:	eba6 0807 	sub.w	r8, r6, r7
 800e0d4:	608b      	str	r3, [r1, #8]
 800e0d6:	f1b8 0f00 	cmp.w	r8, #0
 800e0da:	dd9c      	ble.n	800e016 <__sflush_r+0x1a>
 800e0dc:	6a21      	ldr	r1, [r4, #32]
 800e0de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e0e0:	4643      	mov	r3, r8
 800e0e2:	463a      	mov	r2, r7
 800e0e4:	4628      	mov	r0, r5
 800e0e6:	47b0      	blx	r6
 800e0e8:	2800      	cmp	r0, #0
 800e0ea:	dc06      	bgt.n	800e0fa <__sflush_r+0xfe>
 800e0ec:	89a3      	ldrh	r3, [r4, #12]
 800e0ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0f2:	81a3      	strh	r3, [r4, #12]
 800e0f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e0f8:	e78e      	b.n	800e018 <__sflush_r+0x1c>
 800e0fa:	4407      	add	r7, r0
 800e0fc:	eba8 0800 	sub.w	r8, r8, r0
 800e100:	e7e9      	b.n	800e0d6 <__sflush_r+0xda>
 800e102:	bf00      	nop
 800e104:	20400001 	.word	0x20400001

0800e108 <_fflush_r>:
 800e108:	b538      	push	{r3, r4, r5, lr}
 800e10a:	690b      	ldr	r3, [r1, #16]
 800e10c:	4605      	mov	r5, r0
 800e10e:	460c      	mov	r4, r1
 800e110:	b913      	cbnz	r3, 800e118 <_fflush_r+0x10>
 800e112:	2500      	movs	r5, #0
 800e114:	4628      	mov	r0, r5
 800e116:	bd38      	pop	{r3, r4, r5, pc}
 800e118:	b118      	cbz	r0, 800e122 <_fflush_r+0x1a>
 800e11a:	6983      	ldr	r3, [r0, #24]
 800e11c:	b90b      	cbnz	r3, 800e122 <_fflush_r+0x1a>
 800e11e:	f7fe f973 	bl	800c408 <__sinit>
 800e122:	4b14      	ldr	r3, [pc, #80]	; (800e174 <_fflush_r+0x6c>)
 800e124:	429c      	cmp	r4, r3
 800e126:	d11b      	bne.n	800e160 <_fflush_r+0x58>
 800e128:	686c      	ldr	r4, [r5, #4]
 800e12a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d0ef      	beq.n	800e112 <_fflush_r+0xa>
 800e132:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e134:	07d0      	lsls	r0, r2, #31
 800e136:	d404      	bmi.n	800e142 <_fflush_r+0x3a>
 800e138:	0599      	lsls	r1, r3, #22
 800e13a:	d402      	bmi.n	800e142 <_fflush_r+0x3a>
 800e13c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e13e:	f7fe fa26 	bl	800c58e <__retarget_lock_acquire_recursive>
 800e142:	4628      	mov	r0, r5
 800e144:	4621      	mov	r1, r4
 800e146:	f7ff ff59 	bl	800dffc <__sflush_r>
 800e14a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e14c:	07da      	lsls	r2, r3, #31
 800e14e:	4605      	mov	r5, r0
 800e150:	d4e0      	bmi.n	800e114 <_fflush_r+0xc>
 800e152:	89a3      	ldrh	r3, [r4, #12]
 800e154:	059b      	lsls	r3, r3, #22
 800e156:	d4dd      	bmi.n	800e114 <_fflush_r+0xc>
 800e158:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e15a:	f7fe fa19 	bl	800c590 <__retarget_lock_release_recursive>
 800e15e:	e7d9      	b.n	800e114 <_fflush_r+0xc>
 800e160:	4b05      	ldr	r3, [pc, #20]	; (800e178 <_fflush_r+0x70>)
 800e162:	429c      	cmp	r4, r3
 800e164:	d101      	bne.n	800e16a <_fflush_r+0x62>
 800e166:	68ac      	ldr	r4, [r5, #8]
 800e168:	e7df      	b.n	800e12a <_fflush_r+0x22>
 800e16a:	4b04      	ldr	r3, [pc, #16]	; (800e17c <_fflush_r+0x74>)
 800e16c:	429c      	cmp	r4, r3
 800e16e:	bf08      	it	eq
 800e170:	68ec      	ldreq	r4, [r5, #12]
 800e172:	e7da      	b.n	800e12a <_fflush_r+0x22>
 800e174:	0800f960 	.word	0x0800f960
 800e178:	0800f980 	.word	0x0800f980
 800e17c:	0800f940 	.word	0x0800f940

0800e180 <_localeconv_r>:
 800e180:	4800      	ldr	r0, [pc, #0]	; (800e184 <_localeconv_r+0x4>)
 800e182:	4770      	bx	lr
 800e184:	24000170 	.word	0x24000170

0800e188 <_lseek_r>:
 800e188:	b538      	push	{r3, r4, r5, lr}
 800e18a:	4d07      	ldr	r5, [pc, #28]	; (800e1a8 <_lseek_r+0x20>)
 800e18c:	4604      	mov	r4, r0
 800e18e:	4608      	mov	r0, r1
 800e190:	4611      	mov	r1, r2
 800e192:	2200      	movs	r2, #0
 800e194:	602a      	str	r2, [r5, #0]
 800e196:	461a      	mov	r2, r3
 800e198:	f7f4 ff1a 	bl	8002fd0 <_lseek>
 800e19c:	1c43      	adds	r3, r0, #1
 800e19e:	d102      	bne.n	800e1a6 <_lseek_r+0x1e>
 800e1a0:	682b      	ldr	r3, [r5, #0]
 800e1a2:	b103      	cbz	r3, 800e1a6 <_lseek_r+0x1e>
 800e1a4:	6023      	str	r3, [r4, #0]
 800e1a6:	bd38      	pop	{r3, r4, r5, pc}
 800e1a8:	240050d8 	.word	0x240050d8

0800e1ac <__swhatbuf_r>:
 800e1ac:	b570      	push	{r4, r5, r6, lr}
 800e1ae:	460e      	mov	r6, r1
 800e1b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1b4:	2900      	cmp	r1, #0
 800e1b6:	b096      	sub	sp, #88	; 0x58
 800e1b8:	4614      	mov	r4, r2
 800e1ba:	461d      	mov	r5, r3
 800e1bc:	da08      	bge.n	800e1d0 <__swhatbuf_r+0x24>
 800e1be:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	602a      	str	r2, [r5, #0]
 800e1c6:	061a      	lsls	r2, r3, #24
 800e1c8:	d410      	bmi.n	800e1ec <__swhatbuf_r+0x40>
 800e1ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e1ce:	e00e      	b.n	800e1ee <__swhatbuf_r+0x42>
 800e1d0:	466a      	mov	r2, sp
 800e1d2:	f000 ff43 	bl	800f05c <_fstat_r>
 800e1d6:	2800      	cmp	r0, #0
 800e1d8:	dbf1      	blt.n	800e1be <__swhatbuf_r+0x12>
 800e1da:	9a01      	ldr	r2, [sp, #4]
 800e1dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e1e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e1e4:	425a      	negs	r2, r3
 800e1e6:	415a      	adcs	r2, r3
 800e1e8:	602a      	str	r2, [r5, #0]
 800e1ea:	e7ee      	b.n	800e1ca <__swhatbuf_r+0x1e>
 800e1ec:	2340      	movs	r3, #64	; 0x40
 800e1ee:	2000      	movs	r0, #0
 800e1f0:	6023      	str	r3, [r4, #0]
 800e1f2:	b016      	add	sp, #88	; 0x58
 800e1f4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e1f8 <__smakebuf_r>:
 800e1f8:	898b      	ldrh	r3, [r1, #12]
 800e1fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e1fc:	079d      	lsls	r5, r3, #30
 800e1fe:	4606      	mov	r6, r0
 800e200:	460c      	mov	r4, r1
 800e202:	d507      	bpl.n	800e214 <__smakebuf_r+0x1c>
 800e204:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e208:	6023      	str	r3, [r4, #0]
 800e20a:	6123      	str	r3, [r4, #16]
 800e20c:	2301      	movs	r3, #1
 800e20e:	6163      	str	r3, [r4, #20]
 800e210:	b002      	add	sp, #8
 800e212:	bd70      	pop	{r4, r5, r6, pc}
 800e214:	ab01      	add	r3, sp, #4
 800e216:	466a      	mov	r2, sp
 800e218:	f7ff ffc8 	bl	800e1ac <__swhatbuf_r>
 800e21c:	9900      	ldr	r1, [sp, #0]
 800e21e:	4605      	mov	r5, r0
 800e220:	4630      	mov	r0, r6
 800e222:	f7fe f9ed 	bl	800c600 <_malloc_r>
 800e226:	b948      	cbnz	r0, 800e23c <__smakebuf_r+0x44>
 800e228:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e22c:	059a      	lsls	r2, r3, #22
 800e22e:	d4ef      	bmi.n	800e210 <__smakebuf_r+0x18>
 800e230:	f023 0303 	bic.w	r3, r3, #3
 800e234:	f043 0302 	orr.w	r3, r3, #2
 800e238:	81a3      	strh	r3, [r4, #12]
 800e23a:	e7e3      	b.n	800e204 <__smakebuf_r+0xc>
 800e23c:	4b0d      	ldr	r3, [pc, #52]	; (800e274 <__smakebuf_r+0x7c>)
 800e23e:	62b3      	str	r3, [r6, #40]	; 0x28
 800e240:	89a3      	ldrh	r3, [r4, #12]
 800e242:	6020      	str	r0, [r4, #0]
 800e244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e248:	81a3      	strh	r3, [r4, #12]
 800e24a:	9b00      	ldr	r3, [sp, #0]
 800e24c:	6163      	str	r3, [r4, #20]
 800e24e:	9b01      	ldr	r3, [sp, #4]
 800e250:	6120      	str	r0, [r4, #16]
 800e252:	b15b      	cbz	r3, 800e26c <__smakebuf_r+0x74>
 800e254:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e258:	4630      	mov	r0, r6
 800e25a:	f000 ff11 	bl	800f080 <_isatty_r>
 800e25e:	b128      	cbz	r0, 800e26c <__smakebuf_r+0x74>
 800e260:	89a3      	ldrh	r3, [r4, #12]
 800e262:	f023 0303 	bic.w	r3, r3, #3
 800e266:	f043 0301 	orr.w	r3, r3, #1
 800e26a:	81a3      	strh	r3, [r4, #12]
 800e26c:	89a0      	ldrh	r0, [r4, #12]
 800e26e:	4305      	orrs	r5, r0
 800e270:	81a5      	strh	r5, [r4, #12]
 800e272:	e7cd      	b.n	800e210 <__smakebuf_r+0x18>
 800e274:	0800c3a1 	.word	0x0800c3a1

0800e278 <malloc>:
 800e278:	4b02      	ldr	r3, [pc, #8]	; (800e284 <malloc+0xc>)
 800e27a:	4601      	mov	r1, r0
 800e27c:	6818      	ldr	r0, [r3, #0]
 800e27e:	f7fe b9bf 	b.w	800c600 <_malloc_r>
 800e282:	bf00      	nop
 800e284:	2400001c 	.word	0x2400001c

0800e288 <__malloc_lock>:
 800e288:	4801      	ldr	r0, [pc, #4]	; (800e290 <__malloc_lock+0x8>)
 800e28a:	f7fe b980 	b.w	800c58e <__retarget_lock_acquire_recursive>
 800e28e:	bf00      	nop
 800e290:	240050cc 	.word	0x240050cc

0800e294 <__malloc_unlock>:
 800e294:	4801      	ldr	r0, [pc, #4]	; (800e29c <__malloc_unlock+0x8>)
 800e296:	f7fe b97b 	b.w	800c590 <__retarget_lock_release_recursive>
 800e29a:	bf00      	nop
 800e29c:	240050cc 	.word	0x240050cc

0800e2a0 <_Balloc>:
 800e2a0:	b570      	push	{r4, r5, r6, lr}
 800e2a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e2a4:	4604      	mov	r4, r0
 800e2a6:	460d      	mov	r5, r1
 800e2a8:	b976      	cbnz	r6, 800e2c8 <_Balloc+0x28>
 800e2aa:	2010      	movs	r0, #16
 800e2ac:	f7ff ffe4 	bl	800e278 <malloc>
 800e2b0:	4602      	mov	r2, r0
 800e2b2:	6260      	str	r0, [r4, #36]	; 0x24
 800e2b4:	b920      	cbnz	r0, 800e2c0 <_Balloc+0x20>
 800e2b6:	4b18      	ldr	r3, [pc, #96]	; (800e318 <_Balloc+0x78>)
 800e2b8:	4818      	ldr	r0, [pc, #96]	; (800e31c <_Balloc+0x7c>)
 800e2ba:	2166      	movs	r1, #102	; 0x66
 800e2bc:	f000 fe9e 	bl	800effc <__assert_func>
 800e2c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e2c4:	6006      	str	r6, [r0, #0]
 800e2c6:	60c6      	str	r6, [r0, #12]
 800e2c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e2ca:	68f3      	ldr	r3, [r6, #12]
 800e2cc:	b183      	cbz	r3, 800e2f0 <_Balloc+0x50>
 800e2ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e2d0:	68db      	ldr	r3, [r3, #12]
 800e2d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e2d6:	b9b8      	cbnz	r0, 800e308 <_Balloc+0x68>
 800e2d8:	2101      	movs	r1, #1
 800e2da:	fa01 f605 	lsl.w	r6, r1, r5
 800e2de:	1d72      	adds	r2, r6, #5
 800e2e0:	0092      	lsls	r2, r2, #2
 800e2e2:	4620      	mov	r0, r4
 800e2e4:	f000 fb60 	bl	800e9a8 <_calloc_r>
 800e2e8:	b160      	cbz	r0, 800e304 <_Balloc+0x64>
 800e2ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e2ee:	e00e      	b.n	800e30e <_Balloc+0x6e>
 800e2f0:	2221      	movs	r2, #33	; 0x21
 800e2f2:	2104      	movs	r1, #4
 800e2f4:	4620      	mov	r0, r4
 800e2f6:	f000 fb57 	bl	800e9a8 <_calloc_r>
 800e2fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e2fc:	60f0      	str	r0, [r6, #12]
 800e2fe:	68db      	ldr	r3, [r3, #12]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d1e4      	bne.n	800e2ce <_Balloc+0x2e>
 800e304:	2000      	movs	r0, #0
 800e306:	bd70      	pop	{r4, r5, r6, pc}
 800e308:	6802      	ldr	r2, [r0, #0]
 800e30a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e30e:	2300      	movs	r3, #0
 800e310:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e314:	e7f7      	b.n	800e306 <_Balloc+0x66>
 800e316:	bf00      	nop
 800e318:	0800f9e5 	.word	0x0800f9e5
 800e31c:	0800fa68 	.word	0x0800fa68

0800e320 <_Bfree>:
 800e320:	b570      	push	{r4, r5, r6, lr}
 800e322:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e324:	4605      	mov	r5, r0
 800e326:	460c      	mov	r4, r1
 800e328:	b976      	cbnz	r6, 800e348 <_Bfree+0x28>
 800e32a:	2010      	movs	r0, #16
 800e32c:	f7ff ffa4 	bl	800e278 <malloc>
 800e330:	4602      	mov	r2, r0
 800e332:	6268      	str	r0, [r5, #36]	; 0x24
 800e334:	b920      	cbnz	r0, 800e340 <_Bfree+0x20>
 800e336:	4b09      	ldr	r3, [pc, #36]	; (800e35c <_Bfree+0x3c>)
 800e338:	4809      	ldr	r0, [pc, #36]	; (800e360 <_Bfree+0x40>)
 800e33a:	218a      	movs	r1, #138	; 0x8a
 800e33c:	f000 fe5e 	bl	800effc <__assert_func>
 800e340:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e344:	6006      	str	r6, [r0, #0]
 800e346:	60c6      	str	r6, [r0, #12]
 800e348:	b13c      	cbz	r4, 800e35a <_Bfree+0x3a>
 800e34a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e34c:	6862      	ldr	r2, [r4, #4]
 800e34e:	68db      	ldr	r3, [r3, #12]
 800e350:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e354:	6021      	str	r1, [r4, #0]
 800e356:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e35a:	bd70      	pop	{r4, r5, r6, pc}
 800e35c:	0800f9e5 	.word	0x0800f9e5
 800e360:	0800fa68 	.word	0x0800fa68

0800e364 <__multadd>:
 800e364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e368:	690d      	ldr	r5, [r1, #16]
 800e36a:	4607      	mov	r7, r0
 800e36c:	460c      	mov	r4, r1
 800e36e:	461e      	mov	r6, r3
 800e370:	f101 0c14 	add.w	ip, r1, #20
 800e374:	2000      	movs	r0, #0
 800e376:	f8dc 3000 	ldr.w	r3, [ip]
 800e37a:	b299      	uxth	r1, r3
 800e37c:	fb02 6101 	mla	r1, r2, r1, r6
 800e380:	0c1e      	lsrs	r6, r3, #16
 800e382:	0c0b      	lsrs	r3, r1, #16
 800e384:	fb02 3306 	mla	r3, r2, r6, r3
 800e388:	b289      	uxth	r1, r1
 800e38a:	3001      	adds	r0, #1
 800e38c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e390:	4285      	cmp	r5, r0
 800e392:	f84c 1b04 	str.w	r1, [ip], #4
 800e396:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e39a:	dcec      	bgt.n	800e376 <__multadd+0x12>
 800e39c:	b30e      	cbz	r6, 800e3e2 <__multadd+0x7e>
 800e39e:	68a3      	ldr	r3, [r4, #8]
 800e3a0:	42ab      	cmp	r3, r5
 800e3a2:	dc19      	bgt.n	800e3d8 <__multadd+0x74>
 800e3a4:	6861      	ldr	r1, [r4, #4]
 800e3a6:	4638      	mov	r0, r7
 800e3a8:	3101      	adds	r1, #1
 800e3aa:	f7ff ff79 	bl	800e2a0 <_Balloc>
 800e3ae:	4680      	mov	r8, r0
 800e3b0:	b928      	cbnz	r0, 800e3be <__multadd+0x5a>
 800e3b2:	4602      	mov	r2, r0
 800e3b4:	4b0c      	ldr	r3, [pc, #48]	; (800e3e8 <__multadd+0x84>)
 800e3b6:	480d      	ldr	r0, [pc, #52]	; (800e3ec <__multadd+0x88>)
 800e3b8:	21b5      	movs	r1, #181	; 0xb5
 800e3ba:	f000 fe1f 	bl	800effc <__assert_func>
 800e3be:	6922      	ldr	r2, [r4, #16]
 800e3c0:	3202      	adds	r2, #2
 800e3c2:	f104 010c 	add.w	r1, r4, #12
 800e3c6:	0092      	lsls	r2, r2, #2
 800e3c8:	300c      	adds	r0, #12
 800e3ca:	f7fe f8e2 	bl	800c592 <memcpy>
 800e3ce:	4621      	mov	r1, r4
 800e3d0:	4638      	mov	r0, r7
 800e3d2:	f7ff ffa5 	bl	800e320 <_Bfree>
 800e3d6:	4644      	mov	r4, r8
 800e3d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e3dc:	3501      	adds	r5, #1
 800e3de:	615e      	str	r6, [r3, #20]
 800e3e0:	6125      	str	r5, [r4, #16]
 800e3e2:	4620      	mov	r0, r4
 800e3e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3e8:	0800fa57 	.word	0x0800fa57
 800e3ec:	0800fa68 	.word	0x0800fa68

0800e3f0 <__hi0bits>:
 800e3f0:	0c03      	lsrs	r3, r0, #16
 800e3f2:	041b      	lsls	r3, r3, #16
 800e3f4:	b9d3      	cbnz	r3, 800e42c <__hi0bits+0x3c>
 800e3f6:	0400      	lsls	r0, r0, #16
 800e3f8:	2310      	movs	r3, #16
 800e3fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e3fe:	bf04      	itt	eq
 800e400:	0200      	lsleq	r0, r0, #8
 800e402:	3308      	addeq	r3, #8
 800e404:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e408:	bf04      	itt	eq
 800e40a:	0100      	lsleq	r0, r0, #4
 800e40c:	3304      	addeq	r3, #4
 800e40e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e412:	bf04      	itt	eq
 800e414:	0080      	lsleq	r0, r0, #2
 800e416:	3302      	addeq	r3, #2
 800e418:	2800      	cmp	r0, #0
 800e41a:	db05      	blt.n	800e428 <__hi0bits+0x38>
 800e41c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e420:	f103 0301 	add.w	r3, r3, #1
 800e424:	bf08      	it	eq
 800e426:	2320      	moveq	r3, #32
 800e428:	4618      	mov	r0, r3
 800e42a:	4770      	bx	lr
 800e42c:	2300      	movs	r3, #0
 800e42e:	e7e4      	b.n	800e3fa <__hi0bits+0xa>

0800e430 <__lo0bits>:
 800e430:	6803      	ldr	r3, [r0, #0]
 800e432:	f013 0207 	ands.w	r2, r3, #7
 800e436:	4601      	mov	r1, r0
 800e438:	d00b      	beq.n	800e452 <__lo0bits+0x22>
 800e43a:	07da      	lsls	r2, r3, #31
 800e43c:	d423      	bmi.n	800e486 <__lo0bits+0x56>
 800e43e:	0798      	lsls	r0, r3, #30
 800e440:	bf49      	itett	mi
 800e442:	085b      	lsrmi	r3, r3, #1
 800e444:	089b      	lsrpl	r3, r3, #2
 800e446:	2001      	movmi	r0, #1
 800e448:	600b      	strmi	r3, [r1, #0]
 800e44a:	bf5c      	itt	pl
 800e44c:	600b      	strpl	r3, [r1, #0]
 800e44e:	2002      	movpl	r0, #2
 800e450:	4770      	bx	lr
 800e452:	b298      	uxth	r0, r3
 800e454:	b9a8      	cbnz	r0, 800e482 <__lo0bits+0x52>
 800e456:	0c1b      	lsrs	r3, r3, #16
 800e458:	2010      	movs	r0, #16
 800e45a:	b2da      	uxtb	r2, r3
 800e45c:	b90a      	cbnz	r2, 800e462 <__lo0bits+0x32>
 800e45e:	3008      	adds	r0, #8
 800e460:	0a1b      	lsrs	r3, r3, #8
 800e462:	071a      	lsls	r2, r3, #28
 800e464:	bf04      	itt	eq
 800e466:	091b      	lsreq	r3, r3, #4
 800e468:	3004      	addeq	r0, #4
 800e46a:	079a      	lsls	r2, r3, #30
 800e46c:	bf04      	itt	eq
 800e46e:	089b      	lsreq	r3, r3, #2
 800e470:	3002      	addeq	r0, #2
 800e472:	07da      	lsls	r2, r3, #31
 800e474:	d403      	bmi.n	800e47e <__lo0bits+0x4e>
 800e476:	085b      	lsrs	r3, r3, #1
 800e478:	f100 0001 	add.w	r0, r0, #1
 800e47c:	d005      	beq.n	800e48a <__lo0bits+0x5a>
 800e47e:	600b      	str	r3, [r1, #0]
 800e480:	4770      	bx	lr
 800e482:	4610      	mov	r0, r2
 800e484:	e7e9      	b.n	800e45a <__lo0bits+0x2a>
 800e486:	2000      	movs	r0, #0
 800e488:	4770      	bx	lr
 800e48a:	2020      	movs	r0, #32
 800e48c:	4770      	bx	lr
	...

0800e490 <__i2b>:
 800e490:	b510      	push	{r4, lr}
 800e492:	460c      	mov	r4, r1
 800e494:	2101      	movs	r1, #1
 800e496:	f7ff ff03 	bl	800e2a0 <_Balloc>
 800e49a:	4602      	mov	r2, r0
 800e49c:	b928      	cbnz	r0, 800e4aa <__i2b+0x1a>
 800e49e:	4b05      	ldr	r3, [pc, #20]	; (800e4b4 <__i2b+0x24>)
 800e4a0:	4805      	ldr	r0, [pc, #20]	; (800e4b8 <__i2b+0x28>)
 800e4a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e4a6:	f000 fda9 	bl	800effc <__assert_func>
 800e4aa:	2301      	movs	r3, #1
 800e4ac:	6144      	str	r4, [r0, #20]
 800e4ae:	6103      	str	r3, [r0, #16]
 800e4b0:	bd10      	pop	{r4, pc}
 800e4b2:	bf00      	nop
 800e4b4:	0800fa57 	.word	0x0800fa57
 800e4b8:	0800fa68 	.word	0x0800fa68

0800e4bc <__multiply>:
 800e4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4c0:	4691      	mov	r9, r2
 800e4c2:	690a      	ldr	r2, [r1, #16]
 800e4c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e4c8:	429a      	cmp	r2, r3
 800e4ca:	bfb8      	it	lt
 800e4cc:	460b      	movlt	r3, r1
 800e4ce:	460c      	mov	r4, r1
 800e4d0:	bfbc      	itt	lt
 800e4d2:	464c      	movlt	r4, r9
 800e4d4:	4699      	movlt	r9, r3
 800e4d6:	6927      	ldr	r7, [r4, #16]
 800e4d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e4dc:	68a3      	ldr	r3, [r4, #8]
 800e4de:	6861      	ldr	r1, [r4, #4]
 800e4e0:	eb07 060a 	add.w	r6, r7, sl
 800e4e4:	42b3      	cmp	r3, r6
 800e4e6:	b085      	sub	sp, #20
 800e4e8:	bfb8      	it	lt
 800e4ea:	3101      	addlt	r1, #1
 800e4ec:	f7ff fed8 	bl	800e2a0 <_Balloc>
 800e4f0:	b930      	cbnz	r0, 800e500 <__multiply+0x44>
 800e4f2:	4602      	mov	r2, r0
 800e4f4:	4b44      	ldr	r3, [pc, #272]	; (800e608 <__multiply+0x14c>)
 800e4f6:	4845      	ldr	r0, [pc, #276]	; (800e60c <__multiply+0x150>)
 800e4f8:	f240 115d 	movw	r1, #349	; 0x15d
 800e4fc:	f000 fd7e 	bl	800effc <__assert_func>
 800e500:	f100 0514 	add.w	r5, r0, #20
 800e504:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e508:	462b      	mov	r3, r5
 800e50a:	2200      	movs	r2, #0
 800e50c:	4543      	cmp	r3, r8
 800e50e:	d321      	bcc.n	800e554 <__multiply+0x98>
 800e510:	f104 0314 	add.w	r3, r4, #20
 800e514:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e518:	f109 0314 	add.w	r3, r9, #20
 800e51c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e520:	9202      	str	r2, [sp, #8]
 800e522:	1b3a      	subs	r2, r7, r4
 800e524:	3a15      	subs	r2, #21
 800e526:	f022 0203 	bic.w	r2, r2, #3
 800e52a:	3204      	adds	r2, #4
 800e52c:	f104 0115 	add.w	r1, r4, #21
 800e530:	428f      	cmp	r7, r1
 800e532:	bf38      	it	cc
 800e534:	2204      	movcc	r2, #4
 800e536:	9201      	str	r2, [sp, #4]
 800e538:	9a02      	ldr	r2, [sp, #8]
 800e53a:	9303      	str	r3, [sp, #12]
 800e53c:	429a      	cmp	r2, r3
 800e53e:	d80c      	bhi.n	800e55a <__multiply+0x9e>
 800e540:	2e00      	cmp	r6, #0
 800e542:	dd03      	ble.n	800e54c <__multiply+0x90>
 800e544:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d05a      	beq.n	800e602 <__multiply+0x146>
 800e54c:	6106      	str	r6, [r0, #16]
 800e54e:	b005      	add	sp, #20
 800e550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e554:	f843 2b04 	str.w	r2, [r3], #4
 800e558:	e7d8      	b.n	800e50c <__multiply+0x50>
 800e55a:	f8b3 a000 	ldrh.w	sl, [r3]
 800e55e:	f1ba 0f00 	cmp.w	sl, #0
 800e562:	d024      	beq.n	800e5ae <__multiply+0xf2>
 800e564:	f104 0e14 	add.w	lr, r4, #20
 800e568:	46a9      	mov	r9, r5
 800e56a:	f04f 0c00 	mov.w	ip, #0
 800e56e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e572:	f8d9 1000 	ldr.w	r1, [r9]
 800e576:	fa1f fb82 	uxth.w	fp, r2
 800e57a:	b289      	uxth	r1, r1
 800e57c:	fb0a 110b 	mla	r1, sl, fp, r1
 800e580:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e584:	f8d9 2000 	ldr.w	r2, [r9]
 800e588:	4461      	add	r1, ip
 800e58a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e58e:	fb0a c20b 	mla	r2, sl, fp, ip
 800e592:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e596:	b289      	uxth	r1, r1
 800e598:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e59c:	4577      	cmp	r7, lr
 800e59e:	f849 1b04 	str.w	r1, [r9], #4
 800e5a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e5a6:	d8e2      	bhi.n	800e56e <__multiply+0xb2>
 800e5a8:	9a01      	ldr	r2, [sp, #4]
 800e5aa:	f845 c002 	str.w	ip, [r5, r2]
 800e5ae:	9a03      	ldr	r2, [sp, #12]
 800e5b0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e5b4:	3304      	adds	r3, #4
 800e5b6:	f1b9 0f00 	cmp.w	r9, #0
 800e5ba:	d020      	beq.n	800e5fe <__multiply+0x142>
 800e5bc:	6829      	ldr	r1, [r5, #0]
 800e5be:	f104 0c14 	add.w	ip, r4, #20
 800e5c2:	46ae      	mov	lr, r5
 800e5c4:	f04f 0a00 	mov.w	sl, #0
 800e5c8:	f8bc b000 	ldrh.w	fp, [ip]
 800e5cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e5d0:	fb09 220b 	mla	r2, r9, fp, r2
 800e5d4:	4492      	add	sl, r2
 800e5d6:	b289      	uxth	r1, r1
 800e5d8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e5dc:	f84e 1b04 	str.w	r1, [lr], #4
 800e5e0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e5e4:	f8be 1000 	ldrh.w	r1, [lr]
 800e5e8:	0c12      	lsrs	r2, r2, #16
 800e5ea:	fb09 1102 	mla	r1, r9, r2, r1
 800e5ee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e5f2:	4567      	cmp	r7, ip
 800e5f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e5f8:	d8e6      	bhi.n	800e5c8 <__multiply+0x10c>
 800e5fa:	9a01      	ldr	r2, [sp, #4]
 800e5fc:	50a9      	str	r1, [r5, r2]
 800e5fe:	3504      	adds	r5, #4
 800e600:	e79a      	b.n	800e538 <__multiply+0x7c>
 800e602:	3e01      	subs	r6, #1
 800e604:	e79c      	b.n	800e540 <__multiply+0x84>
 800e606:	bf00      	nop
 800e608:	0800fa57 	.word	0x0800fa57
 800e60c:	0800fa68 	.word	0x0800fa68

0800e610 <__pow5mult>:
 800e610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e614:	4615      	mov	r5, r2
 800e616:	f012 0203 	ands.w	r2, r2, #3
 800e61a:	4606      	mov	r6, r0
 800e61c:	460f      	mov	r7, r1
 800e61e:	d007      	beq.n	800e630 <__pow5mult+0x20>
 800e620:	4c25      	ldr	r4, [pc, #148]	; (800e6b8 <__pow5mult+0xa8>)
 800e622:	3a01      	subs	r2, #1
 800e624:	2300      	movs	r3, #0
 800e626:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e62a:	f7ff fe9b 	bl	800e364 <__multadd>
 800e62e:	4607      	mov	r7, r0
 800e630:	10ad      	asrs	r5, r5, #2
 800e632:	d03d      	beq.n	800e6b0 <__pow5mult+0xa0>
 800e634:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e636:	b97c      	cbnz	r4, 800e658 <__pow5mult+0x48>
 800e638:	2010      	movs	r0, #16
 800e63a:	f7ff fe1d 	bl	800e278 <malloc>
 800e63e:	4602      	mov	r2, r0
 800e640:	6270      	str	r0, [r6, #36]	; 0x24
 800e642:	b928      	cbnz	r0, 800e650 <__pow5mult+0x40>
 800e644:	4b1d      	ldr	r3, [pc, #116]	; (800e6bc <__pow5mult+0xac>)
 800e646:	481e      	ldr	r0, [pc, #120]	; (800e6c0 <__pow5mult+0xb0>)
 800e648:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e64c:	f000 fcd6 	bl	800effc <__assert_func>
 800e650:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e654:	6004      	str	r4, [r0, #0]
 800e656:	60c4      	str	r4, [r0, #12]
 800e658:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e65c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e660:	b94c      	cbnz	r4, 800e676 <__pow5mult+0x66>
 800e662:	f240 2171 	movw	r1, #625	; 0x271
 800e666:	4630      	mov	r0, r6
 800e668:	f7ff ff12 	bl	800e490 <__i2b>
 800e66c:	2300      	movs	r3, #0
 800e66e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e672:	4604      	mov	r4, r0
 800e674:	6003      	str	r3, [r0, #0]
 800e676:	f04f 0900 	mov.w	r9, #0
 800e67a:	07eb      	lsls	r3, r5, #31
 800e67c:	d50a      	bpl.n	800e694 <__pow5mult+0x84>
 800e67e:	4639      	mov	r1, r7
 800e680:	4622      	mov	r2, r4
 800e682:	4630      	mov	r0, r6
 800e684:	f7ff ff1a 	bl	800e4bc <__multiply>
 800e688:	4639      	mov	r1, r7
 800e68a:	4680      	mov	r8, r0
 800e68c:	4630      	mov	r0, r6
 800e68e:	f7ff fe47 	bl	800e320 <_Bfree>
 800e692:	4647      	mov	r7, r8
 800e694:	106d      	asrs	r5, r5, #1
 800e696:	d00b      	beq.n	800e6b0 <__pow5mult+0xa0>
 800e698:	6820      	ldr	r0, [r4, #0]
 800e69a:	b938      	cbnz	r0, 800e6ac <__pow5mult+0x9c>
 800e69c:	4622      	mov	r2, r4
 800e69e:	4621      	mov	r1, r4
 800e6a0:	4630      	mov	r0, r6
 800e6a2:	f7ff ff0b 	bl	800e4bc <__multiply>
 800e6a6:	6020      	str	r0, [r4, #0]
 800e6a8:	f8c0 9000 	str.w	r9, [r0]
 800e6ac:	4604      	mov	r4, r0
 800e6ae:	e7e4      	b.n	800e67a <__pow5mult+0x6a>
 800e6b0:	4638      	mov	r0, r7
 800e6b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6b6:	bf00      	nop
 800e6b8:	0800fbb8 	.word	0x0800fbb8
 800e6bc:	0800f9e5 	.word	0x0800f9e5
 800e6c0:	0800fa68 	.word	0x0800fa68

0800e6c4 <__lshift>:
 800e6c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6c8:	460c      	mov	r4, r1
 800e6ca:	6849      	ldr	r1, [r1, #4]
 800e6cc:	6923      	ldr	r3, [r4, #16]
 800e6ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e6d2:	68a3      	ldr	r3, [r4, #8]
 800e6d4:	4607      	mov	r7, r0
 800e6d6:	4691      	mov	r9, r2
 800e6d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e6dc:	f108 0601 	add.w	r6, r8, #1
 800e6e0:	42b3      	cmp	r3, r6
 800e6e2:	db0b      	blt.n	800e6fc <__lshift+0x38>
 800e6e4:	4638      	mov	r0, r7
 800e6e6:	f7ff fddb 	bl	800e2a0 <_Balloc>
 800e6ea:	4605      	mov	r5, r0
 800e6ec:	b948      	cbnz	r0, 800e702 <__lshift+0x3e>
 800e6ee:	4602      	mov	r2, r0
 800e6f0:	4b2a      	ldr	r3, [pc, #168]	; (800e79c <__lshift+0xd8>)
 800e6f2:	482b      	ldr	r0, [pc, #172]	; (800e7a0 <__lshift+0xdc>)
 800e6f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e6f8:	f000 fc80 	bl	800effc <__assert_func>
 800e6fc:	3101      	adds	r1, #1
 800e6fe:	005b      	lsls	r3, r3, #1
 800e700:	e7ee      	b.n	800e6e0 <__lshift+0x1c>
 800e702:	2300      	movs	r3, #0
 800e704:	f100 0114 	add.w	r1, r0, #20
 800e708:	f100 0210 	add.w	r2, r0, #16
 800e70c:	4618      	mov	r0, r3
 800e70e:	4553      	cmp	r3, sl
 800e710:	db37      	blt.n	800e782 <__lshift+0xbe>
 800e712:	6920      	ldr	r0, [r4, #16]
 800e714:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e718:	f104 0314 	add.w	r3, r4, #20
 800e71c:	f019 091f 	ands.w	r9, r9, #31
 800e720:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e724:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e728:	d02f      	beq.n	800e78a <__lshift+0xc6>
 800e72a:	f1c9 0e20 	rsb	lr, r9, #32
 800e72e:	468a      	mov	sl, r1
 800e730:	f04f 0c00 	mov.w	ip, #0
 800e734:	681a      	ldr	r2, [r3, #0]
 800e736:	fa02 f209 	lsl.w	r2, r2, r9
 800e73a:	ea42 020c 	orr.w	r2, r2, ip
 800e73e:	f84a 2b04 	str.w	r2, [sl], #4
 800e742:	f853 2b04 	ldr.w	r2, [r3], #4
 800e746:	4298      	cmp	r0, r3
 800e748:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e74c:	d8f2      	bhi.n	800e734 <__lshift+0x70>
 800e74e:	1b03      	subs	r3, r0, r4
 800e750:	3b15      	subs	r3, #21
 800e752:	f023 0303 	bic.w	r3, r3, #3
 800e756:	3304      	adds	r3, #4
 800e758:	f104 0215 	add.w	r2, r4, #21
 800e75c:	4290      	cmp	r0, r2
 800e75e:	bf38      	it	cc
 800e760:	2304      	movcc	r3, #4
 800e762:	f841 c003 	str.w	ip, [r1, r3]
 800e766:	f1bc 0f00 	cmp.w	ip, #0
 800e76a:	d001      	beq.n	800e770 <__lshift+0xac>
 800e76c:	f108 0602 	add.w	r6, r8, #2
 800e770:	3e01      	subs	r6, #1
 800e772:	4638      	mov	r0, r7
 800e774:	612e      	str	r6, [r5, #16]
 800e776:	4621      	mov	r1, r4
 800e778:	f7ff fdd2 	bl	800e320 <_Bfree>
 800e77c:	4628      	mov	r0, r5
 800e77e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e782:	f842 0f04 	str.w	r0, [r2, #4]!
 800e786:	3301      	adds	r3, #1
 800e788:	e7c1      	b.n	800e70e <__lshift+0x4a>
 800e78a:	3904      	subs	r1, #4
 800e78c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e790:	f841 2f04 	str.w	r2, [r1, #4]!
 800e794:	4298      	cmp	r0, r3
 800e796:	d8f9      	bhi.n	800e78c <__lshift+0xc8>
 800e798:	e7ea      	b.n	800e770 <__lshift+0xac>
 800e79a:	bf00      	nop
 800e79c:	0800fa57 	.word	0x0800fa57
 800e7a0:	0800fa68 	.word	0x0800fa68

0800e7a4 <__mcmp>:
 800e7a4:	b530      	push	{r4, r5, lr}
 800e7a6:	6902      	ldr	r2, [r0, #16]
 800e7a8:	690c      	ldr	r4, [r1, #16]
 800e7aa:	1b12      	subs	r2, r2, r4
 800e7ac:	d10e      	bne.n	800e7cc <__mcmp+0x28>
 800e7ae:	f100 0314 	add.w	r3, r0, #20
 800e7b2:	3114      	adds	r1, #20
 800e7b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e7b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e7bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e7c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e7c4:	42a5      	cmp	r5, r4
 800e7c6:	d003      	beq.n	800e7d0 <__mcmp+0x2c>
 800e7c8:	d305      	bcc.n	800e7d6 <__mcmp+0x32>
 800e7ca:	2201      	movs	r2, #1
 800e7cc:	4610      	mov	r0, r2
 800e7ce:	bd30      	pop	{r4, r5, pc}
 800e7d0:	4283      	cmp	r3, r0
 800e7d2:	d3f3      	bcc.n	800e7bc <__mcmp+0x18>
 800e7d4:	e7fa      	b.n	800e7cc <__mcmp+0x28>
 800e7d6:	f04f 32ff 	mov.w	r2, #4294967295
 800e7da:	e7f7      	b.n	800e7cc <__mcmp+0x28>

0800e7dc <__mdiff>:
 800e7dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7e0:	460c      	mov	r4, r1
 800e7e2:	4606      	mov	r6, r0
 800e7e4:	4611      	mov	r1, r2
 800e7e6:	4620      	mov	r0, r4
 800e7e8:	4690      	mov	r8, r2
 800e7ea:	f7ff ffdb 	bl	800e7a4 <__mcmp>
 800e7ee:	1e05      	subs	r5, r0, #0
 800e7f0:	d110      	bne.n	800e814 <__mdiff+0x38>
 800e7f2:	4629      	mov	r1, r5
 800e7f4:	4630      	mov	r0, r6
 800e7f6:	f7ff fd53 	bl	800e2a0 <_Balloc>
 800e7fa:	b930      	cbnz	r0, 800e80a <__mdiff+0x2e>
 800e7fc:	4b3a      	ldr	r3, [pc, #232]	; (800e8e8 <__mdiff+0x10c>)
 800e7fe:	4602      	mov	r2, r0
 800e800:	f240 2132 	movw	r1, #562	; 0x232
 800e804:	4839      	ldr	r0, [pc, #228]	; (800e8ec <__mdiff+0x110>)
 800e806:	f000 fbf9 	bl	800effc <__assert_func>
 800e80a:	2301      	movs	r3, #1
 800e80c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e810:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e814:	bfa4      	itt	ge
 800e816:	4643      	movge	r3, r8
 800e818:	46a0      	movge	r8, r4
 800e81a:	4630      	mov	r0, r6
 800e81c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e820:	bfa6      	itte	ge
 800e822:	461c      	movge	r4, r3
 800e824:	2500      	movge	r5, #0
 800e826:	2501      	movlt	r5, #1
 800e828:	f7ff fd3a 	bl	800e2a0 <_Balloc>
 800e82c:	b920      	cbnz	r0, 800e838 <__mdiff+0x5c>
 800e82e:	4b2e      	ldr	r3, [pc, #184]	; (800e8e8 <__mdiff+0x10c>)
 800e830:	4602      	mov	r2, r0
 800e832:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e836:	e7e5      	b.n	800e804 <__mdiff+0x28>
 800e838:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e83c:	6926      	ldr	r6, [r4, #16]
 800e83e:	60c5      	str	r5, [r0, #12]
 800e840:	f104 0914 	add.w	r9, r4, #20
 800e844:	f108 0514 	add.w	r5, r8, #20
 800e848:	f100 0e14 	add.w	lr, r0, #20
 800e84c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e850:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e854:	f108 0210 	add.w	r2, r8, #16
 800e858:	46f2      	mov	sl, lr
 800e85a:	2100      	movs	r1, #0
 800e85c:	f859 3b04 	ldr.w	r3, [r9], #4
 800e860:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e864:	fa1f f883 	uxth.w	r8, r3
 800e868:	fa11 f18b 	uxtah	r1, r1, fp
 800e86c:	0c1b      	lsrs	r3, r3, #16
 800e86e:	eba1 0808 	sub.w	r8, r1, r8
 800e872:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e876:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e87a:	fa1f f888 	uxth.w	r8, r8
 800e87e:	1419      	asrs	r1, r3, #16
 800e880:	454e      	cmp	r6, r9
 800e882:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e886:	f84a 3b04 	str.w	r3, [sl], #4
 800e88a:	d8e7      	bhi.n	800e85c <__mdiff+0x80>
 800e88c:	1b33      	subs	r3, r6, r4
 800e88e:	3b15      	subs	r3, #21
 800e890:	f023 0303 	bic.w	r3, r3, #3
 800e894:	3304      	adds	r3, #4
 800e896:	3415      	adds	r4, #21
 800e898:	42a6      	cmp	r6, r4
 800e89a:	bf38      	it	cc
 800e89c:	2304      	movcc	r3, #4
 800e89e:	441d      	add	r5, r3
 800e8a0:	4473      	add	r3, lr
 800e8a2:	469e      	mov	lr, r3
 800e8a4:	462e      	mov	r6, r5
 800e8a6:	4566      	cmp	r6, ip
 800e8a8:	d30e      	bcc.n	800e8c8 <__mdiff+0xec>
 800e8aa:	f10c 0203 	add.w	r2, ip, #3
 800e8ae:	1b52      	subs	r2, r2, r5
 800e8b0:	f022 0203 	bic.w	r2, r2, #3
 800e8b4:	3d03      	subs	r5, #3
 800e8b6:	45ac      	cmp	ip, r5
 800e8b8:	bf38      	it	cc
 800e8ba:	2200      	movcc	r2, #0
 800e8bc:	441a      	add	r2, r3
 800e8be:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e8c2:	b17b      	cbz	r3, 800e8e4 <__mdiff+0x108>
 800e8c4:	6107      	str	r7, [r0, #16]
 800e8c6:	e7a3      	b.n	800e810 <__mdiff+0x34>
 800e8c8:	f856 8b04 	ldr.w	r8, [r6], #4
 800e8cc:	fa11 f288 	uxtah	r2, r1, r8
 800e8d0:	1414      	asrs	r4, r2, #16
 800e8d2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e8d6:	b292      	uxth	r2, r2
 800e8d8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e8dc:	f84e 2b04 	str.w	r2, [lr], #4
 800e8e0:	1421      	asrs	r1, r4, #16
 800e8e2:	e7e0      	b.n	800e8a6 <__mdiff+0xca>
 800e8e4:	3f01      	subs	r7, #1
 800e8e6:	e7ea      	b.n	800e8be <__mdiff+0xe2>
 800e8e8:	0800fa57 	.word	0x0800fa57
 800e8ec:	0800fa68 	.word	0x0800fa68

0800e8f0 <__d2b>:
 800e8f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e8f4:	4689      	mov	r9, r1
 800e8f6:	2101      	movs	r1, #1
 800e8f8:	ec57 6b10 	vmov	r6, r7, d0
 800e8fc:	4690      	mov	r8, r2
 800e8fe:	f7ff fccf 	bl	800e2a0 <_Balloc>
 800e902:	4604      	mov	r4, r0
 800e904:	b930      	cbnz	r0, 800e914 <__d2b+0x24>
 800e906:	4602      	mov	r2, r0
 800e908:	4b25      	ldr	r3, [pc, #148]	; (800e9a0 <__d2b+0xb0>)
 800e90a:	4826      	ldr	r0, [pc, #152]	; (800e9a4 <__d2b+0xb4>)
 800e90c:	f240 310a 	movw	r1, #778	; 0x30a
 800e910:	f000 fb74 	bl	800effc <__assert_func>
 800e914:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e918:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e91c:	bb35      	cbnz	r5, 800e96c <__d2b+0x7c>
 800e91e:	2e00      	cmp	r6, #0
 800e920:	9301      	str	r3, [sp, #4]
 800e922:	d028      	beq.n	800e976 <__d2b+0x86>
 800e924:	4668      	mov	r0, sp
 800e926:	9600      	str	r6, [sp, #0]
 800e928:	f7ff fd82 	bl	800e430 <__lo0bits>
 800e92c:	9900      	ldr	r1, [sp, #0]
 800e92e:	b300      	cbz	r0, 800e972 <__d2b+0x82>
 800e930:	9a01      	ldr	r2, [sp, #4]
 800e932:	f1c0 0320 	rsb	r3, r0, #32
 800e936:	fa02 f303 	lsl.w	r3, r2, r3
 800e93a:	430b      	orrs	r3, r1
 800e93c:	40c2      	lsrs	r2, r0
 800e93e:	6163      	str	r3, [r4, #20]
 800e940:	9201      	str	r2, [sp, #4]
 800e942:	9b01      	ldr	r3, [sp, #4]
 800e944:	61a3      	str	r3, [r4, #24]
 800e946:	2b00      	cmp	r3, #0
 800e948:	bf14      	ite	ne
 800e94a:	2202      	movne	r2, #2
 800e94c:	2201      	moveq	r2, #1
 800e94e:	6122      	str	r2, [r4, #16]
 800e950:	b1d5      	cbz	r5, 800e988 <__d2b+0x98>
 800e952:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e956:	4405      	add	r5, r0
 800e958:	f8c9 5000 	str.w	r5, [r9]
 800e95c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e960:	f8c8 0000 	str.w	r0, [r8]
 800e964:	4620      	mov	r0, r4
 800e966:	b003      	add	sp, #12
 800e968:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e96c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e970:	e7d5      	b.n	800e91e <__d2b+0x2e>
 800e972:	6161      	str	r1, [r4, #20]
 800e974:	e7e5      	b.n	800e942 <__d2b+0x52>
 800e976:	a801      	add	r0, sp, #4
 800e978:	f7ff fd5a 	bl	800e430 <__lo0bits>
 800e97c:	9b01      	ldr	r3, [sp, #4]
 800e97e:	6163      	str	r3, [r4, #20]
 800e980:	2201      	movs	r2, #1
 800e982:	6122      	str	r2, [r4, #16]
 800e984:	3020      	adds	r0, #32
 800e986:	e7e3      	b.n	800e950 <__d2b+0x60>
 800e988:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e98c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e990:	f8c9 0000 	str.w	r0, [r9]
 800e994:	6918      	ldr	r0, [r3, #16]
 800e996:	f7ff fd2b 	bl	800e3f0 <__hi0bits>
 800e99a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e99e:	e7df      	b.n	800e960 <__d2b+0x70>
 800e9a0:	0800fa57 	.word	0x0800fa57
 800e9a4:	0800fa68 	.word	0x0800fa68

0800e9a8 <_calloc_r>:
 800e9a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e9aa:	fba1 2402 	umull	r2, r4, r1, r2
 800e9ae:	b94c      	cbnz	r4, 800e9c4 <_calloc_r+0x1c>
 800e9b0:	4611      	mov	r1, r2
 800e9b2:	9201      	str	r2, [sp, #4]
 800e9b4:	f7fd fe24 	bl	800c600 <_malloc_r>
 800e9b8:	9a01      	ldr	r2, [sp, #4]
 800e9ba:	4605      	mov	r5, r0
 800e9bc:	b930      	cbnz	r0, 800e9cc <_calloc_r+0x24>
 800e9be:	4628      	mov	r0, r5
 800e9c0:	b003      	add	sp, #12
 800e9c2:	bd30      	pop	{r4, r5, pc}
 800e9c4:	220c      	movs	r2, #12
 800e9c6:	6002      	str	r2, [r0, #0]
 800e9c8:	2500      	movs	r5, #0
 800e9ca:	e7f8      	b.n	800e9be <_calloc_r+0x16>
 800e9cc:	4621      	mov	r1, r4
 800e9ce:	f7fd fdee 	bl	800c5ae <memset>
 800e9d2:	e7f4      	b.n	800e9be <_calloc_r+0x16>

0800e9d4 <_free_r>:
 800e9d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e9d6:	2900      	cmp	r1, #0
 800e9d8:	d044      	beq.n	800ea64 <_free_r+0x90>
 800e9da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e9de:	9001      	str	r0, [sp, #4]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	f1a1 0404 	sub.w	r4, r1, #4
 800e9e6:	bfb8      	it	lt
 800e9e8:	18e4      	addlt	r4, r4, r3
 800e9ea:	f7ff fc4d 	bl	800e288 <__malloc_lock>
 800e9ee:	4a1e      	ldr	r2, [pc, #120]	; (800ea68 <_free_r+0x94>)
 800e9f0:	9801      	ldr	r0, [sp, #4]
 800e9f2:	6813      	ldr	r3, [r2, #0]
 800e9f4:	b933      	cbnz	r3, 800ea04 <_free_r+0x30>
 800e9f6:	6063      	str	r3, [r4, #4]
 800e9f8:	6014      	str	r4, [r2, #0]
 800e9fa:	b003      	add	sp, #12
 800e9fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ea00:	f7ff bc48 	b.w	800e294 <__malloc_unlock>
 800ea04:	42a3      	cmp	r3, r4
 800ea06:	d908      	bls.n	800ea1a <_free_r+0x46>
 800ea08:	6825      	ldr	r5, [r4, #0]
 800ea0a:	1961      	adds	r1, r4, r5
 800ea0c:	428b      	cmp	r3, r1
 800ea0e:	bf01      	itttt	eq
 800ea10:	6819      	ldreq	r1, [r3, #0]
 800ea12:	685b      	ldreq	r3, [r3, #4]
 800ea14:	1949      	addeq	r1, r1, r5
 800ea16:	6021      	streq	r1, [r4, #0]
 800ea18:	e7ed      	b.n	800e9f6 <_free_r+0x22>
 800ea1a:	461a      	mov	r2, r3
 800ea1c:	685b      	ldr	r3, [r3, #4]
 800ea1e:	b10b      	cbz	r3, 800ea24 <_free_r+0x50>
 800ea20:	42a3      	cmp	r3, r4
 800ea22:	d9fa      	bls.n	800ea1a <_free_r+0x46>
 800ea24:	6811      	ldr	r1, [r2, #0]
 800ea26:	1855      	adds	r5, r2, r1
 800ea28:	42a5      	cmp	r5, r4
 800ea2a:	d10b      	bne.n	800ea44 <_free_r+0x70>
 800ea2c:	6824      	ldr	r4, [r4, #0]
 800ea2e:	4421      	add	r1, r4
 800ea30:	1854      	adds	r4, r2, r1
 800ea32:	42a3      	cmp	r3, r4
 800ea34:	6011      	str	r1, [r2, #0]
 800ea36:	d1e0      	bne.n	800e9fa <_free_r+0x26>
 800ea38:	681c      	ldr	r4, [r3, #0]
 800ea3a:	685b      	ldr	r3, [r3, #4]
 800ea3c:	6053      	str	r3, [r2, #4]
 800ea3e:	4421      	add	r1, r4
 800ea40:	6011      	str	r1, [r2, #0]
 800ea42:	e7da      	b.n	800e9fa <_free_r+0x26>
 800ea44:	d902      	bls.n	800ea4c <_free_r+0x78>
 800ea46:	230c      	movs	r3, #12
 800ea48:	6003      	str	r3, [r0, #0]
 800ea4a:	e7d6      	b.n	800e9fa <_free_r+0x26>
 800ea4c:	6825      	ldr	r5, [r4, #0]
 800ea4e:	1961      	adds	r1, r4, r5
 800ea50:	428b      	cmp	r3, r1
 800ea52:	bf04      	itt	eq
 800ea54:	6819      	ldreq	r1, [r3, #0]
 800ea56:	685b      	ldreq	r3, [r3, #4]
 800ea58:	6063      	str	r3, [r4, #4]
 800ea5a:	bf04      	itt	eq
 800ea5c:	1949      	addeq	r1, r1, r5
 800ea5e:	6021      	streq	r1, [r4, #0]
 800ea60:	6054      	str	r4, [r2, #4]
 800ea62:	e7ca      	b.n	800e9fa <_free_r+0x26>
 800ea64:	b003      	add	sp, #12
 800ea66:	bd30      	pop	{r4, r5, pc}
 800ea68:	240050d0 	.word	0x240050d0

0800ea6c <__ssputs_r>:
 800ea6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea70:	688e      	ldr	r6, [r1, #8]
 800ea72:	429e      	cmp	r6, r3
 800ea74:	4682      	mov	sl, r0
 800ea76:	460c      	mov	r4, r1
 800ea78:	4690      	mov	r8, r2
 800ea7a:	461f      	mov	r7, r3
 800ea7c:	d838      	bhi.n	800eaf0 <__ssputs_r+0x84>
 800ea7e:	898a      	ldrh	r2, [r1, #12]
 800ea80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ea84:	d032      	beq.n	800eaec <__ssputs_r+0x80>
 800ea86:	6825      	ldr	r5, [r4, #0]
 800ea88:	6909      	ldr	r1, [r1, #16]
 800ea8a:	eba5 0901 	sub.w	r9, r5, r1
 800ea8e:	6965      	ldr	r5, [r4, #20]
 800ea90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ea94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ea98:	3301      	adds	r3, #1
 800ea9a:	444b      	add	r3, r9
 800ea9c:	106d      	asrs	r5, r5, #1
 800ea9e:	429d      	cmp	r5, r3
 800eaa0:	bf38      	it	cc
 800eaa2:	461d      	movcc	r5, r3
 800eaa4:	0553      	lsls	r3, r2, #21
 800eaa6:	d531      	bpl.n	800eb0c <__ssputs_r+0xa0>
 800eaa8:	4629      	mov	r1, r5
 800eaaa:	f7fd fda9 	bl	800c600 <_malloc_r>
 800eaae:	4606      	mov	r6, r0
 800eab0:	b950      	cbnz	r0, 800eac8 <__ssputs_r+0x5c>
 800eab2:	230c      	movs	r3, #12
 800eab4:	f8ca 3000 	str.w	r3, [sl]
 800eab8:	89a3      	ldrh	r3, [r4, #12]
 800eaba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eabe:	81a3      	strh	r3, [r4, #12]
 800eac0:	f04f 30ff 	mov.w	r0, #4294967295
 800eac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eac8:	6921      	ldr	r1, [r4, #16]
 800eaca:	464a      	mov	r2, r9
 800eacc:	f7fd fd61 	bl	800c592 <memcpy>
 800ead0:	89a3      	ldrh	r3, [r4, #12]
 800ead2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ead6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eada:	81a3      	strh	r3, [r4, #12]
 800eadc:	6126      	str	r6, [r4, #16]
 800eade:	6165      	str	r5, [r4, #20]
 800eae0:	444e      	add	r6, r9
 800eae2:	eba5 0509 	sub.w	r5, r5, r9
 800eae6:	6026      	str	r6, [r4, #0]
 800eae8:	60a5      	str	r5, [r4, #8]
 800eaea:	463e      	mov	r6, r7
 800eaec:	42be      	cmp	r6, r7
 800eaee:	d900      	bls.n	800eaf2 <__ssputs_r+0x86>
 800eaf0:	463e      	mov	r6, r7
 800eaf2:	6820      	ldr	r0, [r4, #0]
 800eaf4:	4632      	mov	r2, r6
 800eaf6:	4641      	mov	r1, r8
 800eaf8:	f000 fae4 	bl	800f0c4 <memmove>
 800eafc:	68a3      	ldr	r3, [r4, #8]
 800eafe:	1b9b      	subs	r3, r3, r6
 800eb00:	60a3      	str	r3, [r4, #8]
 800eb02:	6823      	ldr	r3, [r4, #0]
 800eb04:	4433      	add	r3, r6
 800eb06:	6023      	str	r3, [r4, #0]
 800eb08:	2000      	movs	r0, #0
 800eb0a:	e7db      	b.n	800eac4 <__ssputs_r+0x58>
 800eb0c:	462a      	mov	r2, r5
 800eb0e:	f000 faf3 	bl	800f0f8 <_realloc_r>
 800eb12:	4606      	mov	r6, r0
 800eb14:	2800      	cmp	r0, #0
 800eb16:	d1e1      	bne.n	800eadc <__ssputs_r+0x70>
 800eb18:	6921      	ldr	r1, [r4, #16]
 800eb1a:	4650      	mov	r0, sl
 800eb1c:	f7ff ff5a 	bl	800e9d4 <_free_r>
 800eb20:	e7c7      	b.n	800eab2 <__ssputs_r+0x46>
	...

0800eb24 <_svfiprintf_r>:
 800eb24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb28:	4698      	mov	r8, r3
 800eb2a:	898b      	ldrh	r3, [r1, #12]
 800eb2c:	061b      	lsls	r3, r3, #24
 800eb2e:	b09d      	sub	sp, #116	; 0x74
 800eb30:	4607      	mov	r7, r0
 800eb32:	460d      	mov	r5, r1
 800eb34:	4614      	mov	r4, r2
 800eb36:	d50e      	bpl.n	800eb56 <_svfiprintf_r+0x32>
 800eb38:	690b      	ldr	r3, [r1, #16]
 800eb3a:	b963      	cbnz	r3, 800eb56 <_svfiprintf_r+0x32>
 800eb3c:	2140      	movs	r1, #64	; 0x40
 800eb3e:	f7fd fd5f 	bl	800c600 <_malloc_r>
 800eb42:	6028      	str	r0, [r5, #0]
 800eb44:	6128      	str	r0, [r5, #16]
 800eb46:	b920      	cbnz	r0, 800eb52 <_svfiprintf_r+0x2e>
 800eb48:	230c      	movs	r3, #12
 800eb4a:	603b      	str	r3, [r7, #0]
 800eb4c:	f04f 30ff 	mov.w	r0, #4294967295
 800eb50:	e0d1      	b.n	800ecf6 <_svfiprintf_r+0x1d2>
 800eb52:	2340      	movs	r3, #64	; 0x40
 800eb54:	616b      	str	r3, [r5, #20]
 800eb56:	2300      	movs	r3, #0
 800eb58:	9309      	str	r3, [sp, #36]	; 0x24
 800eb5a:	2320      	movs	r3, #32
 800eb5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eb60:	f8cd 800c 	str.w	r8, [sp, #12]
 800eb64:	2330      	movs	r3, #48	; 0x30
 800eb66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ed10 <_svfiprintf_r+0x1ec>
 800eb6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eb6e:	f04f 0901 	mov.w	r9, #1
 800eb72:	4623      	mov	r3, r4
 800eb74:	469a      	mov	sl, r3
 800eb76:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb7a:	b10a      	cbz	r2, 800eb80 <_svfiprintf_r+0x5c>
 800eb7c:	2a25      	cmp	r2, #37	; 0x25
 800eb7e:	d1f9      	bne.n	800eb74 <_svfiprintf_r+0x50>
 800eb80:	ebba 0b04 	subs.w	fp, sl, r4
 800eb84:	d00b      	beq.n	800eb9e <_svfiprintf_r+0x7a>
 800eb86:	465b      	mov	r3, fp
 800eb88:	4622      	mov	r2, r4
 800eb8a:	4629      	mov	r1, r5
 800eb8c:	4638      	mov	r0, r7
 800eb8e:	f7ff ff6d 	bl	800ea6c <__ssputs_r>
 800eb92:	3001      	adds	r0, #1
 800eb94:	f000 80aa 	beq.w	800ecec <_svfiprintf_r+0x1c8>
 800eb98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eb9a:	445a      	add	r2, fp
 800eb9c:	9209      	str	r2, [sp, #36]	; 0x24
 800eb9e:	f89a 3000 	ldrb.w	r3, [sl]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	f000 80a2 	beq.w	800ecec <_svfiprintf_r+0x1c8>
 800eba8:	2300      	movs	r3, #0
 800ebaa:	f04f 32ff 	mov.w	r2, #4294967295
 800ebae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ebb2:	f10a 0a01 	add.w	sl, sl, #1
 800ebb6:	9304      	str	r3, [sp, #16]
 800ebb8:	9307      	str	r3, [sp, #28]
 800ebba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ebbe:	931a      	str	r3, [sp, #104]	; 0x68
 800ebc0:	4654      	mov	r4, sl
 800ebc2:	2205      	movs	r2, #5
 800ebc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebc8:	4851      	ldr	r0, [pc, #324]	; (800ed10 <_svfiprintf_r+0x1ec>)
 800ebca:	f7f1 fb91 	bl	80002f0 <memchr>
 800ebce:	9a04      	ldr	r2, [sp, #16]
 800ebd0:	b9d8      	cbnz	r0, 800ec0a <_svfiprintf_r+0xe6>
 800ebd2:	06d0      	lsls	r0, r2, #27
 800ebd4:	bf44      	itt	mi
 800ebd6:	2320      	movmi	r3, #32
 800ebd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ebdc:	0711      	lsls	r1, r2, #28
 800ebde:	bf44      	itt	mi
 800ebe0:	232b      	movmi	r3, #43	; 0x2b
 800ebe2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ebe6:	f89a 3000 	ldrb.w	r3, [sl]
 800ebea:	2b2a      	cmp	r3, #42	; 0x2a
 800ebec:	d015      	beq.n	800ec1a <_svfiprintf_r+0xf6>
 800ebee:	9a07      	ldr	r2, [sp, #28]
 800ebf0:	4654      	mov	r4, sl
 800ebf2:	2000      	movs	r0, #0
 800ebf4:	f04f 0c0a 	mov.w	ip, #10
 800ebf8:	4621      	mov	r1, r4
 800ebfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ebfe:	3b30      	subs	r3, #48	; 0x30
 800ec00:	2b09      	cmp	r3, #9
 800ec02:	d94e      	bls.n	800eca2 <_svfiprintf_r+0x17e>
 800ec04:	b1b0      	cbz	r0, 800ec34 <_svfiprintf_r+0x110>
 800ec06:	9207      	str	r2, [sp, #28]
 800ec08:	e014      	b.n	800ec34 <_svfiprintf_r+0x110>
 800ec0a:	eba0 0308 	sub.w	r3, r0, r8
 800ec0e:	fa09 f303 	lsl.w	r3, r9, r3
 800ec12:	4313      	orrs	r3, r2
 800ec14:	9304      	str	r3, [sp, #16]
 800ec16:	46a2      	mov	sl, r4
 800ec18:	e7d2      	b.n	800ebc0 <_svfiprintf_r+0x9c>
 800ec1a:	9b03      	ldr	r3, [sp, #12]
 800ec1c:	1d19      	adds	r1, r3, #4
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	9103      	str	r1, [sp, #12]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	bfbb      	ittet	lt
 800ec26:	425b      	neglt	r3, r3
 800ec28:	f042 0202 	orrlt.w	r2, r2, #2
 800ec2c:	9307      	strge	r3, [sp, #28]
 800ec2e:	9307      	strlt	r3, [sp, #28]
 800ec30:	bfb8      	it	lt
 800ec32:	9204      	strlt	r2, [sp, #16]
 800ec34:	7823      	ldrb	r3, [r4, #0]
 800ec36:	2b2e      	cmp	r3, #46	; 0x2e
 800ec38:	d10c      	bne.n	800ec54 <_svfiprintf_r+0x130>
 800ec3a:	7863      	ldrb	r3, [r4, #1]
 800ec3c:	2b2a      	cmp	r3, #42	; 0x2a
 800ec3e:	d135      	bne.n	800ecac <_svfiprintf_r+0x188>
 800ec40:	9b03      	ldr	r3, [sp, #12]
 800ec42:	1d1a      	adds	r2, r3, #4
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	9203      	str	r2, [sp, #12]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	bfb8      	it	lt
 800ec4c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ec50:	3402      	adds	r4, #2
 800ec52:	9305      	str	r3, [sp, #20]
 800ec54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ed20 <_svfiprintf_r+0x1fc>
 800ec58:	7821      	ldrb	r1, [r4, #0]
 800ec5a:	2203      	movs	r2, #3
 800ec5c:	4650      	mov	r0, sl
 800ec5e:	f7f1 fb47 	bl	80002f0 <memchr>
 800ec62:	b140      	cbz	r0, 800ec76 <_svfiprintf_r+0x152>
 800ec64:	2340      	movs	r3, #64	; 0x40
 800ec66:	eba0 000a 	sub.w	r0, r0, sl
 800ec6a:	fa03 f000 	lsl.w	r0, r3, r0
 800ec6e:	9b04      	ldr	r3, [sp, #16]
 800ec70:	4303      	orrs	r3, r0
 800ec72:	3401      	adds	r4, #1
 800ec74:	9304      	str	r3, [sp, #16]
 800ec76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec7a:	4826      	ldr	r0, [pc, #152]	; (800ed14 <_svfiprintf_r+0x1f0>)
 800ec7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ec80:	2206      	movs	r2, #6
 800ec82:	f7f1 fb35 	bl	80002f0 <memchr>
 800ec86:	2800      	cmp	r0, #0
 800ec88:	d038      	beq.n	800ecfc <_svfiprintf_r+0x1d8>
 800ec8a:	4b23      	ldr	r3, [pc, #140]	; (800ed18 <_svfiprintf_r+0x1f4>)
 800ec8c:	bb1b      	cbnz	r3, 800ecd6 <_svfiprintf_r+0x1b2>
 800ec8e:	9b03      	ldr	r3, [sp, #12]
 800ec90:	3307      	adds	r3, #7
 800ec92:	f023 0307 	bic.w	r3, r3, #7
 800ec96:	3308      	adds	r3, #8
 800ec98:	9303      	str	r3, [sp, #12]
 800ec9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec9c:	4433      	add	r3, r6
 800ec9e:	9309      	str	r3, [sp, #36]	; 0x24
 800eca0:	e767      	b.n	800eb72 <_svfiprintf_r+0x4e>
 800eca2:	fb0c 3202 	mla	r2, ip, r2, r3
 800eca6:	460c      	mov	r4, r1
 800eca8:	2001      	movs	r0, #1
 800ecaa:	e7a5      	b.n	800ebf8 <_svfiprintf_r+0xd4>
 800ecac:	2300      	movs	r3, #0
 800ecae:	3401      	adds	r4, #1
 800ecb0:	9305      	str	r3, [sp, #20]
 800ecb2:	4619      	mov	r1, r3
 800ecb4:	f04f 0c0a 	mov.w	ip, #10
 800ecb8:	4620      	mov	r0, r4
 800ecba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ecbe:	3a30      	subs	r2, #48	; 0x30
 800ecc0:	2a09      	cmp	r2, #9
 800ecc2:	d903      	bls.n	800eccc <_svfiprintf_r+0x1a8>
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d0c5      	beq.n	800ec54 <_svfiprintf_r+0x130>
 800ecc8:	9105      	str	r1, [sp, #20]
 800ecca:	e7c3      	b.n	800ec54 <_svfiprintf_r+0x130>
 800eccc:	fb0c 2101 	mla	r1, ip, r1, r2
 800ecd0:	4604      	mov	r4, r0
 800ecd2:	2301      	movs	r3, #1
 800ecd4:	e7f0      	b.n	800ecb8 <_svfiprintf_r+0x194>
 800ecd6:	ab03      	add	r3, sp, #12
 800ecd8:	9300      	str	r3, [sp, #0]
 800ecda:	462a      	mov	r2, r5
 800ecdc:	4b0f      	ldr	r3, [pc, #60]	; (800ed1c <_svfiprintf_r+0x1f8>)
 800ecde:	a904      	add	r1, sp, #16
 800ece0:	4638      	mov	r0, r7
 800ece2:	f7fd fd91 	bl	800c808 <_printf_float>
 800ece6:	1c42      	adds	r2, r0, #1
 800ece8:	4606      	mov	r6, r0
 800ecea:	d1d6      	bne.n	800ec9a <_svfiprintf_r+0x176>
 800ecec:	89ab      	ldrh	r3, [r5, #12]
 800ecee:	065b      	lsls	r3, r3, #25
 800ecf0:	f53f af2c 	bmi.w	800eb4c <_svfiprintf_r+0x28>
 800ecf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ecf6:	b01d      	add	sp, #116	; 0x74
 800ecf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecfc:	ab03      	add	r3, sp, #12
 800ecfe:	9300      	str	r3, [sp, #0]
 800ed00:	462a      	mov	r2, r5
 800ed02:	4b06      	ldr	r3, [pc, #24]	; (800ed1c <_svfiprintf_r+0x1f8>)
 800ed04:	a904      	add	r1, sp, #16
 800ed06:	4638      	mov	r0, r7
 800ed08:	f7fe f80a 	bl	800cd20 <_printf_i>
 800ed0c:	e7eb      	b.n	800ece6 <_svfiprintf_r+0x1c2>
 800ed0e:	bf00      	nop
 800ed10:	0800fbc4 	.word	0x0800fbc4
 800ed14:	0800fbce 	.word	0x0800fbce
 800ed18:	0800c809 	.word	0x0800c809
 800ed1c:	0800ea6d 	.word	0x0800ea6d
 800ed20:	0800fbca 	.word	0x0800fbca

0800ed24 <__sfputc_r>:
 800ed24:	6893      	ldr	r3, [r2, #8]
 800ed26:	3b01      	subs	r3, #1
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	b410      	push	{r4}
 800ed2c:	6093      	str	r3, [r2, #8]
 800ed2e:	da08      	bge.n	800ed42 <__sfputc_r+0x1e>
 800ed30:	6994      	ldr	r4, [r2, #24]
 800ed32:	42a3      	cmp	r3, r4
 800ed34:	db01      	blt.n	800ed3a <__sfputc_r+0x16>
 800ed36:	290a      	cmp	r1, #10
 800ed38:	d103      	bne.n	800ed42 <__sfputc_r+0x1e>
 800ed3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed3e:	f7fe ba81 	b.w	800d244 <__swbuf_r>
 800ed42:	6813      	ldr	r3, [r2, #0]
 800ed44:	1c58      	adds	r0, r3, #1
 800ed46:	6010      	str	r0, [r2, #0]
 800ed48:	7019      	strb	r1, [r3, #0]
 800ed4a:	4608      	mov	r0, r1
 800ed4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed50:	4770      	bx	lr

0800ed52 <__sfputs_r>:
 800ed52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed54:	4606      	mov	r6, r0
 800ed56:	460f      	mov	r7, r1
 800ed58:	4614      	mov	r4, r2
 800ed5a:	18d5      	adds	r5, r2, r3
 800ed5c:	42ac      	cmp	r4, r5
 800ed5e:	d101      	bne.n	800ed64 <__sfputs_r+0x12>
 800ed60:	2000      	movs	r0, #0
 800ed62:	e007      	b.n	800ed74 <__sfputs_r+0x22>
 800ed64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed68:	463a      	mov	r2, r7
 800ed6a:	4630      	mov	r0, r6
 800ed6c:	f7ff ffda 	bl	800ed24 <__sfputc_r>
 800ed70:	1c43      	adds	r3, r0, #1
 800ed72:	d1f3      	bne.n	800ed5c <__sfputs_r+0xa>
 800ed74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ed78 <_vfiprintf_r>:
 800ed78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed7c:	460d      	mov	r5, r1
 800ed7e:	b09d      	sub	sp, #116	; 0x74
 800ed80:	4614      	mov	r4, r2
 800ed82:	4698      	mov	r8, r3
 800ed84:	4606      	mov	r6, r0
 800ed86:	b118      	cbz	r0, 800ed90 <_vfiprintf_r+0x18>
 800ed88:	6983      	ldr	r3, [r0, #24]
 800ed8a:	b90b      	cbnz	r3, 800ed90 <_vfiprintf_r+0x18>
 800ed8c:	f7fd fb3c 	bl	800c408 <__sinit>
 800ed90:	4b89      	ldr	r3, [pc, #548]	; (800efb8 <_vfiprintf_r+0x240>)
 800ed92:	429d      	cmp	r5, r3
 800ed94:	d11b      	bne.n	800edce <_vfiprintf_r+0x56>
 800ed96:	6875      	ldr	r5, [r6, #4]
 800ed98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed9a:	07d9      	lsls	r1, r3, #31
 800ed9c:	d405      	bmi.n	800edaa <_vfiprintf_r+0x32>
 800ed9e:	89ab      	ldrh	r3, [r5, #12]
 800eda0:	059a      	lsls	r2, r3, #22
 800eda2:	d402      	bmi.n	800edaa <_vfiprintf_r+0x32>
 800eda4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eda6:	f7fd fbf2 	bl	800c58e <__retarget_lock_acquire_recursive>
 800edaa:	89ab      	ldrh	r3, [r5, #12]
 800edac:	071b      	lsls	r3, r3, #28
 800edae:	d501      	bpl.n	800edb4 <_vfiprintf_r+0x3c>
 800edb0:	692b      	ldr	r3, [r5, #16]
 800edb2:	b9eb      	cbnz	r3, 800edf0 <_vfiprintf_r+0x78>
 800edb4:	4629      	mov	r1, r5
 800edb6:	4630      	mov	r0, r6
 800edb8:	f7fe faa8 	bl	800d30c <__swsetup_r>
 800edbc:	b1c0      	cbz	r0, 800edf0 <_vfiprintf_r+0x78>
 800edbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800edc0:	07dc      	lsls	r4, r3, #31
 800edc2:	d50e      	bpl.n	800ede2 <_vfiprintf_r+0x6a>
 800edc4:	f04f 30ff 	mov.w	r0, #4294967295
 800edc8:	b01d      	add	sp, #116	; 0x74
 800edca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edce:	4b7b      	ldr	r3, [pc, #492]	; (800efbc <_vfiprintf_r+0x244>)
 800edd0:	429d      	cmp	r5, r3
 800edd2:	d101      	bne.n	800edd8 <_vfiprintf_r+0x60>
 800edd4:	68b5      	ldr	r5, [r6, #8]
 800edd6:	e7df      	b.n	800ed98 <_vfiprintf_r+0x20>
 800edd8:	4b79      	ldr	r3, [pc, #484]	; (800efc0 <_vfiprintf_r+0x248>)
 800edda:	429d      	cmp	r5, r3
 800eddc:	bf08      	it	eq
 800edde:	68f5      	ldreq	r5, [r6, #12]
 800ede0:	e7da      	b.n	800ed98 <_vfiprintf_r+0x20>
 800ede2:	89ab      	ldrh	r3, [r5, #12]
 800ede4:	0598      	lsls	r0, r3, #22
 800ede6:	d4ed      	bmi.n	800edc4 <_vfiprintf_r+0x4c>
 800ede8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800edea:	f7fd fbd1 	bl	800c590 <__retarget_lock_release_recursive>
 800edee:	e7e9      	b.n	800edc4 <_vfiprintf_r+0x4c>
 800edf0:	2300      	movs	r3, #0
 800edf2:	9309      	str	r3, [sp, #36]	; 0x24
 800edf4:	2320      	movs	r3, #32
 800edf6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800edfa:	f8cd 800c 	str.w	r8, [sp, #12]
 800edfe:	2330      	movs	r3, #48	; 0x30
 800ee00:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800efc4 <_vfiprintf_r+0x24c>
 800ee04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ee08:	f04f 0901 	mov.w	r9, #1
 800ee0c:	4623      	mov	r3, r4
 800ee0e:	469a      	mov	sl, r3
 800ee10:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee14:	b10a      	cbz	r2, 800ee1a <_vfiprintf_r+0xa2>
 800ee16:	2a25      	cmp	r2, #37	; 0x25
 800ee18:	d1f9      	bne.n	800ee0e <_vfiprintf_r+0x96>
 800ee1a:	ebba 0b04 	subs.w	fp, sl, r4
 800ee1e:	d00b      	beq.n	800ee38 <_vfiprintf_r+0xc0>
 800ee20:	465b      	mov	r3, fp
 800ee22:	4622      	mov	r2, r4
 800ee24:	4629      	mov	r1, r5
 800ee26:	4630      	mov	r0, r6
 800ee28:	f7ff ff93 	bl	800ed52 <__sfputs_r>
 800ee2c:	3001      	adds	r0, #1
 800ee2e:	f000 80aa 	beq.w	800ef86 <_vfiprintf_r+0x20e>
 800ee32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee34:	445a      	add	r2, fp
 800ee36:	9209      	str	r2, [sp, #36]	; 0x24
 800ee38:	f89a 3000 	ldrb.w	r3, [sl]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	f000 80a2 	beq.w	800ef86 <_vfiprintf_r+0x20e>
 800ee42:	2300      	movs	r3, #0
 800ee44:	f04f 32ff 	mov.w	r2, #4294967295
 800ee48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee4c:	f10a 0a01 	add.w	sl, sl, #1
 800ee50:	9304      	str	r3, [sp, #16]
 800ee52:	9307      	str	r3, [sp, #28]
 800ee54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ee58:	931a      	str	r3, [sp, #104]	; 0x68
 800ee5a:	4654      	mov	r4, sl
 800ee5c:	2205      	movs	r2, #5
 800ee5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee62:	4858      	ldr	r0, [pc, #352]	; (800efc4 <_vfiprintf_r+0x24c>)
 800ee64:	f7f1 fa44 	bl	80002f0 <memchr>
 800ee68:	9a04      	ldr	r2, [sp, #16]
 800ee6a:	b9d8      	cbnz	r0, 800eea4 <_vfiprintf_r+0x12c>
 800ee6c:	06d1      	lsls	r1, r2, #27
 800ee6e:	bf44      	itt	mi
 800ee70:	2320      	movmi	r3, #32
 800ee72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee76:	0713      	lsls	r3, r2, #28
 800ee78:	bf44      	itt	mi
 800ee7a:	232b      	movmi	r3, #43	; 0x2b
 800ee7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee80:	f89a 3000 	ldrb.w	r3, [sl]
 800ee84:	2b2a      	cmp	r3, #42	; 0x2a
 800ee86:	d015      	beq.n	800eeb4 <_vfiprintf_r+0x13c>
 800ee88:	9a07      	ldr	r2, [sp, #28]
 800ee8a:	4654      	mov	r4, sl
 800ee8c:	2000      	movs	r0, #0
 800ee8e:	f04f 0c0a 	mov.w	ip, #10
 800ee92:	4621      	mov	r1, r4
 800ee94:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee98:	3b30      	subs	r3, #48	; 0x30
 800ee9a:	2b09      	cmp	r3, #9
 800ee9c:	d94e      	bls.n	800ef3c <_vfiprintf_r+0x1c4>
 800ee9e:	b1b0      	cbz	r0, 800eece <_vfiprintf_r+0x156>
 800eea0:	9207      	str	r2, [sp, #28]
 800eea2:	e014      	b.n	800eece <_vfiprintf_r+0x156>
 800eea4:	eba0 0308 	sub.w	r3, r0, r8
 800eea8:	fa09 f303 	lsl.w	r3, r9, r3
 800eeac:	4313      	orrs	r3, r2
 800eeae:	9304      	str	r3, [sp, #16]
 800eeb0:	46a2      	mov	sl, r4
 800eeb2:	e7d2      	b.n	800ee5a <_vfiprintf_r+0xe2>
 800eeb4:	9b03      	ldr	r3, [sp, #12]
 800eeb6:	1d19      	adds	r1, r3, #4
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	9103      	str	r1, [sp, #12]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	bfbb      	ittet	lt
 800eec0:	425b      	neglt	r3, r3
 800eec2:	f042 0202 	orrlt.w	r2, r2, #2
 800eec6:	9307      	strge	r3, [sp, #28]
 800eec8:	9307      	strlt	r3, [sp, #28]
 800eeca:	bfb8      	it	lt
 800eecc:	9204      	strlt	r2, [sp, #16]
 800eece:	7823      	ldrb	r3, [r4, #0]
 800eed0:	2b2e      	cmp	r3, #46	; 0x2e
 800eed2:	d10c      	bne.n	800eeee <_vfiprintf_r+0x176>
 800eed4:	7863      	ldrb	r3, [r4, #1]
 800eed6:	2b2a      	cmp	r3, #42	; 0x2a
 800eed8:	d135      	bne.n	800ef46 <_vfiprintf_r+0x1ce>
 800eeda:	9b03      	ldr	r3, [sp, #12]
 800eedc:	1d1a      	adds	r2, r3, #4
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	9203      	str	r2, [sp, #12]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	bfb8      	it	lt
 800eee6:	f04f 33ff 	movlt.w	r3, #4294967295
 800eeea:	3402      	adds	r4, #2
 800eeec:	9305      	str	r3, [sp, #20]
 800eeee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800efd4 <_vfiprintf_r+0x25c>
 800eef2:	7821      	ldrb	r1, [r4, #0]
 800eef4:	2203      	movs	r2, #3
 800eef6:	4650      	mov	r0, sl
 800eef8:	f7f1 f9fa 	bl	80002f0 <memchr>
 800eefc:	b140      	cbz	r0, 800ef10 <_vfiprintf_r+0x198>
 800eefe:	2340      	movs	r3, #64	; 0x40
 800ef00:	eba0 000a 	sub.w	r0, r0, sl
 800ef04:	fa03 f000 	lsl.w	r0, r3, r0
 800ef08:	9b04      	ldr	r3, [sp, #16]
 800ef0a:	4303      	orrs	r3, r0
 800ef0c:	3401      	adds	r4, #1
 800ef0e:	9304      	str	r3, [sp, #16]
 800ef10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef14:	482c      	ldr	r0, [pc, #176]	; (800efc8 <_vfiprintf_r+0x250>)
 800ef16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ef1a:	2206      	movs	r2, #6
 800ef1c:	f7f1 f9e8 	bl	80002f0 <memchr>
 800ef20:	2800      	cmp	r0, #0
 800ef22:	d03f      	beq.n	800efa4 <_vfiprintf_r+0x22c>
 800ef24:	4b29      	ldr	r3, [pc, #164]	; (800efcc <_vfiprintf_r+0x254>)
 800ef26:	bb1b      	cbnz	r3, 800ef70 <_vfiprintf_r+0x1f8>
 800ef28:	9b03      	ldr	r3, [sp, #12]
 800ef2a:	3307      	adds	r3, #7
 800ef2c:	f023 0307 	bic.w	r3, r3, #7
 800ef30:	3308      	adds	r3, #8
 800ef32:	9303      	str	r3, [sp, #12]
 800ef34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef36:	443b      	add	r3, r7
 800ef38:	9309      	str	r3, [sp, #36]	; 0x24
 800ef3a:	e767      	b.n	800ee0c <_vfiprintf_r+0x94>
 800ef3c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef40:	460c      	mov	r4, r1
 800ef42:	2001      	movs	r0, #1
 800ef44:	e7a5      	b.n	800ee92 <_vfiprintf_r+0x11a>
 800ef46:	2300      	movs	r3, #0
 800ef48:	3401      	adds	r4, #1
 800ef4a:	9305      	str	r3, [sp, #20]
 800ef4c:	4619      	mov	r1, r3
 800ef4e:	f04f 0c0a 	mov.w	ip, #10
 800ef52:	4620      	mov	r0, r4
 800ef54:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef58:	3a30      	subs	r2, #48	; 0x30
 800ef5a:	2a09      	cmp	r2, #9
 800ef5c:	d903      	bls.n	800ef66 <_vfiprintf_r+0x1ee>
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d0c5      	beq.n	800eeee <_vfiprintf_r+0x176>
 800ef62:	9105      	str	r1, [sp, #20]
 800ef64:	e7c3      	b.n	800eeee <_vfiprintf_r+0x176>
 800ef66:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef6a:	4604      	mov	r4, r0
 800ef6c:	2301      	movs	r3, #1
 800ef6e:	e7f0      	b.n	800ef52 <_vfiprintf_r+0x1da>
 800ef70:	ab03      	add	r3, sp, #12
 800ef72:	9300      	str	r3, [sp, #0]
 800ef74:	462a      	mov	r2, r5
 800ef76:	4b16      	ldr	r3, [pc, #88]	; (800efd0 <_vfiprintf_r+0x258>)
 800ef78:	a904      	add	r1, sp, #16
 800ef7a:	4630      	mov	r0, r6
 800ef7c:	f7fd fc44 	bl	800c808 <_printf_float>
 800ef80:	4607      	mov	r7, r0
 800ef82:	1c78      	adds	r0, r7, #1
 800ef84:	d1d6      	bne.n	800ef34 <_vfiprintf_r+0x1bc>
 800ef86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ef88:	07d9      	lsls	r1, r3, #31
 800ef8a:	d405      	bmi.n	800ef98 <_vfiprintf_r+0x220>
 800ef8c:	89ab      	ldrh	r3, [r5, #12]
 800ef8e:	059a      	lsls	r2, r3, #22
 800ef90:	d402      	bmi.n	800ef98 <_vfiprintf_r+0x220>
 800ef92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ef94:	f7fd fafc 	bl	800c590 <__retarget_lock_release_recursive>
 800ef98:	89ab      	ldrh	r3, [r5, #12]
 800ef9a:	065b      	lsls	r3, r3, #25
 800ef9c:	f53f af12 	bmi.w	800edc4 <_vfiprintf_r+0x4c>
 800efa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800efa2:	e711      	b.n	800edc8 <_vfiprintf_r+0x50>
 800efa4:	ab03      	add	r3, sp, #12
 800efa6:	9300      	str	r3, [sp, #0]
 800efa8:	462a      	mov	r2, r5
 800efaa:	4b09      	ldr	r3, [pc, #36]	; (800efd0 <_vfiprintf_r+0x258>)
 800efac:	a904      	add	r1, sp, #16
 800efae:	4630      	mov	r0, r6
 800efb0:	f7fd feb6 	bl	800cd20 <_printf_i>
 800efb4:	e7e4      	b.n	800ef80 <_vfiprintf_r+0x208>
 800efb6:	bf00      	nop
 800efb8:	0800f960 	.word	0x0800f960
 800efbc:	0800f980 	.word	0x0800f980
 800efc0:	0800f940 	.word	0x0800f940
 800efc4:	0800fbc4 	.word	0x0800fbc4
 800efc8:	0800fbce 	.word	0x0800fbce
 800efcc:	0800c809 	.word	0x0800c809
 800efd0:	0800ed53 	.word	0x0800ed53
 800efd4:	0800fbca 	.word	0x0800fbca

0800efd8 <_read_r>:
 800efd8:	b538      	push	{r3, r4, r5, lr}
 800efda:	4d07      	ldr	r5, [pc, #28]	; (800eff8 <_read_r+0x20>)
 800efdc:	4604      	mov	r4, r0
 800efde:	4608      	mov	r0, r1
 800efe0:	4611      	mov	r1, r2
 800efe2:	2200      	movs	r2, #0
 800efe4:	602a      	str	r2, [r5, #0]
 800efe6:	461a      	mov	r2, r3
 800efe8:	f7f3 ff92 	bl	8002f10 <_read>
 800efec:	1c43      	adds	r3, r0, #1
 800efee:	d102      	bne.n	800eff6 <_read_r+0x1e>
 800eff0:	682b      	ldr	r3, [r5, #0]
 800eff2:	b103      	cbz	r3, 800eff6 <_read_r+0x1e>
 800eff4:	6023      	str	r3, [r4, #0]
 800eff6:	bd38      	pop	{r3, r4, r5, pc}
 800eff8:	240050d8 	.word	0x240050d8

0800effc <__assert_func>:
 800effc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800effe:	4614      	mov	r4, r2
 800f000:	461a      	mov	r2, r3
 800f002:	4b09      	ldr	r3, [pc, #36]	; (800f028 <__assert_func+0x2c>)
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	4605      	mov	r5, r0
 800f008:	68d8      	ldr	r0, [r3, #12]
 800f00a:	b14c      	cbz	r4, 800f020 <__assert_func+0x24>
 800f00c:	4b07      	ldr	r3, [pc, #28]	; (800f02c <__assert_func+0x30>)
 800f00e:	9100      	str	r1, [sp, #0]
 800f010:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f014:	4906      	ldr	r1, [pc, #24]	; (800f030 <__assert_func+0x34>)
 800f016:	462b      	mov	r3, r5
 800f018:	f000 f80e 	bl	800f038 <fiprintf>
 800f01c:	f000 f8a8 	bl	800f170 <abort>
 800f020:	4b04      	ldr	r3, [pc, #16]	; (800f034 <__assert_func+0x38>)
 800f022:	461c      	mov	r4, r3
 800f024:	e7f3      	b.n	800f00e <__assert_func+0x12>
 800f026:	bf00      	nop
 800f028:	2400001c 	.word	0x2400001c
 800f02c:	0800fbd5 	.word	0x0800fbd5
 800f030:	0800fbe2 	.word	0x0800fbe2
 800f034:	0800fc10 	.word	0x0800fc10

0800f038 <fiprintf>:
 800f038:	b40e      	push	{r1, r2, r3}
 800f03a:	b503      	push	{r0, r1, lr}
 800f03c:	4601      	mov	r1, r0
 800f03e:	ab03      	add	r3, sp, #12
 800f040:	4805      	ldr	r0, [pc, #20]	; (800f058 <fiprintf+0x20>)
 800f042:	f853 2b04 	ldr.w	r2, [r3], #4
 800f046:	6800      	ldr	r0, [r0, #0]
 800f048:	9301      	str	r3, [sp, #4]
 800f04a:	f7ff fe95 	bl	800ed78 <_vfiprintf_r>
 800f04e:	b002      	add	sp, #8
 800f050:	f85d eb04 	ldr.w	lr, [sp], #4
 800f054:	b003      	add	sp, #12
 800f056:	4770      	bx	lr
 800f058:	2400001c 	.word	0x2400001c

0800f05c <_fstat_r>:
 800f05c:	b538      	push	{r3, r4, r5, lr}
 800f05e:	4d07      	ldr	r5, [pc, #28]	; (800f07c <_fstat_r+0x20>)
 800f060:	2300      	movs	r3, #0
 800f062:	4604      	mov	r4, r0
 800f064:	4608      	mov	r0, r1
 800f066:	4611      	mov	r1, r2
 800f068:	602b      	str	r3, [r5, #0]
 800f06a:	f7f3 ff96 	bl	8002f9a <_fstat>
 800f06e:	1c43      	adds	r3, r0, #1
 800f070:	d102      	bne.n	800f078 <_fstat_r+0x1c>
 800f072:	682b      	ldr	r3, [r5, #0]
 800f074:	b103      	cbz	r3, 800f078 <_fstat_r+0x1c>
 800f076:	6023      	str	r3, [r4, #0]
 800f078:	bd38      	pop	{r3, r4, r5, pc}
 800f07a:	bf00      	nop
 800f07c:	240050d8 	.word	0x240050d8

0800f080 <_isatty_r>:
 800f080:	b538      	push	{r3, r4, r5, lr}
 800f082:	4d06      	ldr	r5, [pc, #24]	; (800f09c <_isatty_r+0x1c>)
 800f084:	2300      	movs	r3, #0
 800f086:	4604      	mov	r4, r0
 800f088:	4608      	mov	r0, r1
 800f08a:	602b      	str	r3, [r5, #0]
 800f08c:	f7f3 ff95 	bl	8002fba <_isatty>
 800f090:	1c43      	adds	r3, r0, #1
 800f092:	d102      	bne.n	800f09a <_isatty_r+0x1a>
 800f094:	682b      	ldr	r3, [r5, #0]
 800f096:	b103      	cbz	r3, 800f09a <_isatty_r+0x1a>
 800f098:	6023      	str	r3, [r4, #0]
 800f09a:	bd38      	pop	{r3, r4, r5, pc}
 800f09c:	240050d8 	.word	0x240050d8

0800f0a0 <__ascii_mbtowc>:
 800f0a0:	b082      	sub	sp, #8
 800f0a2:	b901      	cbnz	r1, 800f0a6 <__ascii_mbtowc+0x6>
 800f0a4:	a901      	add	r1, sp, #4
 800f0a6:	b142      	cbz	r2, 800f0ba <__ascii_mbtowc+0x1a>
 800f0a8:	b14b      	cbz	r3, 800f0be <__ascii_mbtowc+0x1e>
 800f0aa:	7813      	ldrb	r3, [r2, #0]
 800f0ac:	600b      	str	r3, [r1, #0]
 800f0ae:	7812      	ldrb	r2, [r2, #0]
 800f0b0:	1e10      	subs	r0, r2, #0
 800f0b2:	bf18      	it	ne
 800f0b4:	2001      	movne	r0, #1
 800f0b6:	b002      	add	sp, #8
 800f0b8:	4770      	bx	lr
 800f0ba:	4610      	mov	r0, r2
 800f0bc:	e7fb      	b.n	800f0b6 <__ascii_mbtowc+0x16>
 800f0be:	f06f 0001 	mvn.w	r0, #1
 800f0c2:	e7f8      	b.n	800f0b6 <__ascii_mbtowc+0x16>

0800f0c4 <memmove>:
 800f0c4:	4288      	cmp	r0, r1
 800f0c6:	b510      	push	{r4, lr}
 800f0c8:	eb01 0402 	add.w	r4, r1, r2
 800f0cc:	d902      	bls.n	800f0d4 <memmove+0x10>
 800f0ce:	4284      	cmp	r4, r0
 800f0d0:	4623      	mov	r3, r4
 800f0d2:	d807      	bhi.n	800f0e4 <memmove+0x20>
 800f0d4:	1e43      	subs	r3, r0, #1
 800f0d6:	42a1      	cmp	r1, r4
 800f0d8:	d008      	beq.n	800f0ec <memmove+0x28>
 800f0da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f0de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f0e2:	e7f8      	b.n	800f0d6 <memmove+0x12>
 800f0e4:	4402      	add	r2, r0
 800f0e6:	4601      	mov	r1, r0
 800f0e8:	428a      	cmp	r2, r1
 800f0ea:	d100      	bne.n	800f0ee <memmove+0x2a>
 800f0ec:	bd10      	pop	{r4, pc}
 800f0ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f0f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f0f6:	e7f7      	b.n	800f0e8 <memmove+0x24>

0800f0f8 <_realloc_r>:
 800f0f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0fc:	4680      	mov	r8, r0
 800f0fe:	4614      	mov	r4, r2
 800f100:	460e      	mov	r6, r1
 800f102:	b921      	cbnz	r1, 800f10e <_realloc_r+0x16>
 800f104:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f108:	4611      	mov	r1, r2
 800f10a:	f7fd ba79 	b.w	800c600 <_malloc_r>
 800f10e:	b92a      	cbnz	r2, 800f11c <_realloc_r+0x24>
 800f110:	f7ff fc60 	bl	800e9d4 <_free_r>
 800f114:	4625      	mov	r5, r4
 800f116:	4628      	mov	r0, r5
 800f118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f11c:	f000 f82f 	bl	800f17e <_malloc_usable_size_r>
 800f120:	4284      	cmp	r4, r0
 800f122:	4607      	mov	r7, r0
 800f124:	d802      	bhi.n	800f12c <_realloc_r+0x34>
 800f126:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f12a:	d812      	bhi.n	800f152 <_realloc_r+0x5a>
 800f12c:	4621      	mov	r1, r4
 800f12e:	4640      	mov	r0, r8
 800f130:	f7fd fa66 	bl	800c600 <_malloc_r>
 800f134:	4605      	mov	r5, r0
 800f136:	2800      	cmp	r0, #0
 800f138:	d0ed      	beq.n	800f116 <_realloc_r+0x1e>
 800f13a:	42bc      	cmp	r4, r7
 800f13c:	4622      	mov	r2, r4
 800f13e:	4631      	mov	r1, r6
 800f140:	bf28      	it	cs
 800f142:	463a      	movcs	r2, r7
 800f144:	f7fd fa25 	bl	800c592 <memcpy>
 800f148:	4631      	mov	r1, r6
 800f14a:	4640      	mov	r0, r8
 800f14c:	f7ff fc42 	bl	800e9d4 <_free_r>
 800f150:	e7e1      	b.n	800f116 <_realloc_r+0x1e>
 800f152:	4635      	mov	r5, r6
 800f154:	e7df      	b.n	800f116 <_realloc_r+0x1e>

0800f156 <__ascii_wctomb>:
 800f156:	b149      	cbz	r1, 800f16c <__ascii_wctomb+0x16>
 800f158:	2aff      	cmp	r2, #255	; 0xff
 800f15a:	bf85      	ittet	hi
 800f15c:	238a      	movhi	r3, #138	; 0x8a
 800f15e:	6003      	strhi	r3, [r0, #0]
 800f160:	700a      	strbls	r2, [r1, #0]
 800f162:	f04f 30ff 	movhi.w	r0, #4294967295
 800f166:	bf98      	it	ls
 800f168:	2001      	movls	r0, #1
 800f16a:	4770      	bx	lr
 800f16c:	4608      	mov	r0, r1
 800f16e:	4770      	bx	lr

0800f170 <abort>:
 800f170:	b508      	push	{r3, lr}
 800f172:	2006      	movs	r0, #6
 800f174:	f000 f834 	bl	800f1e0 <raise>
 800f178:	2001      	movs	r0, #1
 800f17a:	f7f3 febf 	bl	8002efc <_exit>

0800f17e <_malloc_usable_size_r>:
 800f17e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f182:	1f18      	subs	r0, r3, #4
 800f184:	2b00      	cmp	r3, #0
 800f186:	bfbc      	itt	lt
 800f188:	580b      	ldrlt	r3, [r1, r0]
 800f18a:	18c0      	addlt	r0, r0, r3
 800f18c:	4770      	bx	lr

0800f18e <_raise_r>:
 800f18e:	291f      	cmp	r1, #31
 800f190:	b538      	push	{r3, r4, r5, lr}
 800f192:	4604      	mov	r4, r0
 800f194:	460d      	mov	r5, r1
 800f196:	d904      	bls.n	800f1a2 <_raise_r+0x14>
 800f198:	2316      	movs	r3, #22
 800f19a:	6003      	str	r3, [r0, #0]
 800f19c:	f04f 30ff 	mov.w	r0, #4294967295
 800f1a0:	bd38      	pop	{r3, r4, r5, pc}
 800f1a2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f1a4:	b112      	cbz	r2, 800f1ac <_raise_r+0x1e>
 800f1a6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f1aa:	b94b      	cbnz	r3, 800f1c0 <_raise_r+0x32>
 800f1ac:	4620      	mov	r0, r4
 800f1ae:	f000 f831 	bl	800f214 <_getpid_r>
 800f1b2:	462a      	mov	r2, r5
 800f1b4:	4601      	mov	r1, r0
 800f1b6:	4620      	mov	r0, r4
 800f1b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f1bc:	f000 b818 	b.w	800f1f0 <_kill_r>
 800f1c0:	2b01      	cmp	r3, #1
 800f1c2:	d00a      	beq.n	800f1da <_raise_r+0x4c>
 800f1c4:	1c59      	adds	r1, r3, #1
 800f1c6:	d103      	bne.n	800f1d0 <_raise_r+0x42>
 800f1c8:	2316      	movs	r3, #22
 800f1ca:	6003      	str	r3, [r0, #0]
 800f1cc:	2001      	movs	r0, #1
 800f1ce:	e7e7      	b.n	800f1a0 <_raise_r+0x12>
 800f1d0:	2400      	movs	r4, #0
 800f1d2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f1d6:	4628      	mov	r0, r5
 800f1d8:	4798      	blx	r3
 800f1da:	2000      	movs	r0, #0
 800f1dc:	e7e0      	b.n	800f1a0 <_raise_r+0x12>
	...

0800f1e0 <raise>:
 800f1e0:	4b02      	ldr	r3, [pc, #8]	; (800f1ec <raise+0xc>)
 800f1e2:	4601      	mov	r1, r0
 800f1e4:	6818      	ldr	r0, [r3, #0]
 800f1e6:	f7ff bfd2 	b.w	800f18e <_raise_r>
 800f1ea:	bf00      	nop
 800f1ec:	2400001c 	.word	0x2400001c

0800f1f0 <_kill_r>:
 800f1f0:	b538      	push	{r3, r4, r5, lr}
 800f1f2:	4d07      	ldr	r5, [pc, #28]	; (800f210 <_kill_r+0x20>)
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	4604      	mov	r4, r0
 800f1f8:	4608      	mov	r0, r1
 800f1fa:	4611      	mov	r1, r2
 800f1fc:	602b      	str	r3, [r5, #0]
 800f1fe:	f7f3 fe6d 	bl	8002edc <_kill>
 800f202:	1c43      	adds	r3, r0, #1
 800f204:	d102      	bne.n	800f20c <_kill_r+0x1c>
 800f206:	682b      	ldr	r3, [r5, #0]
 800f208:	b103      	cbz	r3, 800f20c <_kill_r+0x1c>
 800f20a:	6023      	str	r3, [r4, #0]
 800f20c:	bd38      	pop	{r3, r4, r5, pc}
 800f20e:	bf00      	nop
 800f210:	240050d8 	.word	0x240050d8

0800f214 <_getpid_r>:
 800f214:	f7f3 be5a 	b.w	8002ecc <_getpid>

0800f218 <_init>:
 800f218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f21a:	bf00      	nop
 800f21c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f21e:	bc08      	pop	{r3}
 800f220:	469e      	mov	lr, r3
 800f222:	4770      	bx	lr

0800f224 <_fini>:
 800f224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f226:	bf00      	nop
 800f228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f22a:	bc08      	pop	{r3}
 800f22c:	469e      	mov	lr, r3
 800f22e:	4770      	bx	lr
