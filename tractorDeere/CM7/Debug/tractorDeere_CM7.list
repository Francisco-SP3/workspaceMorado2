
tractorDeere_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5e0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  0800b880  0800b880  0001b880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba1c  0800ba1c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba1c  0800ba1c  0001ba1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba24  0800ba24  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba24  0800ba24  0001ba24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba28  0800ba28  0001ba28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  0800ba2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c98  24000078  0800baa4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24004d10  0800baa4  00024d10  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000297b2  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044e1  00000000  00000000  00049858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001eb8  00000000  00000000  0004dd40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d20  00000000  00000000  0004fbf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003e723  00000000  00000000  00051918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023915  00000000  00000000  0009003b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019eb8c  00000000  00000000  000b3950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002524dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008c20  00000000  00000000  0025252c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b868 	.word	0x0800b868

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	0800b868 	.word	0x0800b868

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000688:	4b3d      	ldr	r3, [pc, #244]	; (8000780 <SystemInit+0xfc>)
 800068a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068e:	4a3c      	ldr	r2, [pc, #240]	; (8000780 <SystemInit+0xfc>)
 8000690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0xfc>)
 800069a:	691b      	ldr	r3, [r3, #16]
 800069c:	4a38      	ldr	r2, [pc, #224]	; (8000780 <SystemInit+0xfc>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a4:	4b37      	ldr	r3, [pc, #220]	; (8000784 <SystemInit+0x100>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	2b06      	cmp	r3, #6
 80006ae:	d807      	bhi.n	80006c0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b0:	4b34      	ldr	r3, [pc, #208]	; (8000784 <SystemInit+0x100>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f023 030f 	bic.w	r3, r3, #15
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x100>)
 80006ba:	f043 0307 	orr.w	r3, r3, #7
 80006be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c0:	4b31      	ldr	r3, [pc, #196]	; (8000788 <SystemInit+0x104>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a30      	ldr	r2, [pc, #192]	; (8000788 <SystemInit+0x104>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x104>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d2:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <SystemInit+0x104>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	492c      	ldr	r1, [pc, #176]	; (8000788 <SystemInit+0x104>)
 80006d8:	4b2c      	ldr	r3, [pc, #176]	; (800078c <SystemInit+0x108>)
 80006da:	4013      	ands	r3, r2
 80006dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006de:	4b29      	ldr	r3, [pc, #164]	; (8000784 <SystemInit+0x100>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f003 0308 	and.w	r3, r3, #8
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d007      	beq.n	80006fa <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SystemInit+0x100>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f023 030f 	bic.w	r3, r3, #15
 80006f2:	4a24      	ldr	r2, [pc, #144]	; (8000784 <SystemInit+0x100>)
 80006f4:	f043 0307 	orr.w	r3, r3, #7
 80006f8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <SystemInit+0x104>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <SystemInit+0x104>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <SystemInit+0x104>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <SystemInit+0x104>)
 800070e:	4a20      	ldr	r2, [pc, #128]	; (8000790 <SystemInit+0x10c>)
 8000710:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <SystemInit+0x104>)
 8000714:	4a1f      	ldr	r2, [pc, #124]	; (8000794 <SystemInit+0x110>)
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <SystemInit+0x104>)
 800071a:	4a1f      	ldr	r2, [pc, #124]	; (8000798 <SystemInit+0x114>)
 800071c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <SystemInit+0x104>)
 8000720:	2200      	movs	r2, #0
 8000722:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <SystemInit+0x104>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <SystemInit+0x114>)
 8000728:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <SystemInit+0x104>)
 800072c:	2200      	movs	r2, #0
 800072e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <SystemInit+0x104>)
 8000732:	4a19      	ldr	r2, [pc, #100]	; (8000798 <SystemInit+0x114>)
 8000734:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <SystemInit+0x104>)
 8000738:	2200      	movs	r2, #0
 800073a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <SystemInit+0x104>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a11      	ldr	r2, [pc, #68]	; (8000788 <SystemInit+0x104>)
 8000742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000746:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <SystemInit+0x104>)
 800074a:	2200      	movs	r2, #0
 800074c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x118>)
 8000750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <SystemInit+0x118>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000758:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <SystemInit+0x11c>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x120>)
 8000760:	4013      	ands	r3, r2
 8000762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000766:	d202      	bcs.n	800076e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <SystemInit+0x124>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <SystemInit+0x128>)
 8000770:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000774:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00
 8000784:	52002000 	.word	0x52002000
 8000788:	58024400 	.word	0x58024400
 800078c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000790:	02020200 	.word	0x02020200
 8000794:	01ff0000 	.word	0x01ff0000
 8000798:	01010280 	.word	0x01010280
 800079c:	580000c0 	.word	0x580000c0
 80007a0:	5c001000 	.word	0x5c001000
 80007a4:	ffff0000 	.word	0xffff0000
 80007a8:	51008108 	.word	0x51008108
 80007ac:	52004000 	.word	0x52004000

080007b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ba:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007bc:	bf00      	nop
 80007be:	4b2a      	ldr	r3, [pc, #168]	; (8000868 <main+0xb8>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d004      	beq.n	80007d4 <main+0x24>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	1e5a      	subs	r2, r3, #1
 80007ce:	607a      	str	r2, [r7, #4]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	dcf4      	bgt.n	80007be <main+0xe>
  if ( timeout < 0 )
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	da01      	bge.n	80007de <main+0x2e>
  {
  Error_Handler();
 80007da:	f000 fc4f 	bl	800107c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007de:	f000 ff6b 	bl	80016b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e2:	f000 f849 	bl	8000878 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007e6:	4b20      	ldr	r3, [pc, #128]	; (8000868 <main+0xb8>)
 80007e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ec:	4a1e      	ldr	r2, [pc, #120]	; (8000868 <main+0xb8>)
 80007ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007f6:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <main+0xb8>)
 80007f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000804:	2000      	movs	r0, #0
 8000806:	f001 fdcd 	bl	80023a4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800080a:	2100      	movs	r1, #0
 800080c:	2000      	movs	r0, #0
 800080e:	f001 fde3 	bl	80023d8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000812:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000816:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000818:	bf00      	nop
 800081a:	4b13      	ldr	r3, [pc, #76]	; (8000868 <main+0xb8>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000822:	2b00      	cmp	r3, #0
 8000824:	d104      	bne.n	8000830 <main+0x80>
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	1e5a      	subs	r2, r3, #1
 800082a:	607a      	str	r2, [r7, #4]
 800082c:	2b00      	cmp	r3, #0
 800082e:	dcf4      	bgt.n	800081a <main+0x6a>
if ( timeout < 0 )
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2b00      	cmp	r3, #0
 8000834:	da01      	bge.n	800083a <main+0x8a>
{
Error_Handler();
 8000836:	f000 fc21 	bl	800107c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083a:	f000 fa3f 	bl	8000cbc <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800083e:	f000 f899 	bl	8000974 <MX_FDCAN1_Init>
  MX_TIM1_Init();
 8000842:	f000 f953 	bl	8000aec <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000846:	f000 f9ed 	bl	8000c24 <MX_USART3_UART_Init>
  MX_SPI4_Init();
 800084a:	f000 f8f7 	bl	8000a3c <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800084e:	f007 faa9 	bl	8007da4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000852:	4a06      	ldr	r2, [pc, #24]	; (800086c <main+0xbc>)
 8000854:	2100      	movs	r1, #0
 8000856:	4806      	ldr	r0, [pc, #24]	; (8000870 <main+0xc0>)
 8000858:	f007 faee 	bl	8007e38 <osThreadNew>
 800085c:	4603      	mov	r3, r0
 800085e:	4a05      	ldr	r2, [pc, #20]	; (8000874 <main+0xc4>)
 8000860:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000862:	f007 fac3 	bl	8007dec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000866:	e7fe      	b.n	8000866 <main+0xb6>
 8000868:	58024400 	.word	0x58024400
 800086c:	0800b938 	.word	0x0800b938
 8000870:	08000e41 	.word	0x08000e41
 8000874:	24000298 	.word	0x24000298

08000878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b09c      	sub	sp, #112	; 0x70
 800087c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000882:	224c      	movs	r2, #76	; 0x4c
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f00a f8e5 	bl	800aa56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	2220      	movs	r2, #32
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f00a f8df 	bl	800aa56 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000898:	2004      	movs	r0, #4
 800089a:	f001 fdb1 	bl	8002400 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800089e:	2300      	movs	r3, #0
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	4b32      	ldr	r3, [pc, #200]	; (800096c <SystemClock_Config+0xf4>)
 80008a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008a6:	4a31      	ldr	r2, [pc, #196]	; (800096c <SystemClock_Config+0xf4>)
 80008a8:	f023 0301 	bic.w	r3, r3, #1
 80008ac:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008ae:	4b2f      	ldr	r3, [pc, #188]	; (800096c <SystemClock_Config+0xf4>)
 80008b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	4b2d      	ldr	r3, [pc, #180]	; (8000970 <SystemClock_Config+0xf8>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008c0:	4a2b      	ldr	r2, [pc, #172]	; (8000970 <SystemClock_Config+0xf8>)
 80008c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c6:	6193      	str	r3, [r2, #24]
 80008c8:	4b29      	ldr	r3, [pc, #164]	; (8000970 <SystemClock_Config+0xf8>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008d0:	603b      	str	r3, [r7, #0]
 80008d2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008d4:	bf00      	nop
 80008d6:	4b26      	ldr	r3, [pc, #152]	; (8000970 <SystemClock_Config+0xf8>)
 80008d8:	699b      	ldr	r3, [r3, #24]
 80008da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008e2:	d1f8      	bne.n	80008d6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008e4:	2302      	movs	r3, #2
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008e8:	2301      	movs	r3, #1
 80008ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ec:	2340      	movs	r3, #64	; 0x40
 80008ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f0:	2302      	movs	r3, #2
 80008f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008f4:	2300      	movs	r3, #0
 80008f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008f8:	2304      	movs	r3, #4
 80008fa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 80008fc:	2309      	movs	r3, #9
 80008fe:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000900:	2302      	movs	r3, #2
 8000902:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000904:	2303      	movs	r3, #3
 8000906:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000908:	2302      	movs	r3, #2
 800090a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800090c:	230c      	movs	r3, #12
 800090e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000910:	2302      	movs	r3, #2
 8000912:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000914:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000918:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091e:	4618      	mov	r0, r3
 8000920:	f001 fdc8 	bl	80024b4 <HAL_RCC_OscConfig>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800092a:	f000 fba7 	bl	800107c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800092e:	233f      	movs	r3, #63	; 0x3f
 8000930:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000932:	2300      	movs	r3, #0
 8000934:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800093a:	2300      	movs	r3, #0
 800093c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000942:	2340      	movs	r3, #64	; 0x40
 8000944:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000946:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800094a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800094c:	2300      	movs	r3, #0
 800094e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	2101      	movs	r1, #1
 8000954:	4618      	mov	r0, r3
 8000956:	f002 f9db 	bl	8002d10 <HAL_RCC_ClockConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000960:	f000 fb8c 	bl	800107c <Error_Handler>
  }
}
 8000964:	bf00      	nop
 8000966:	3770      	adds	r7, #112	; 0x70
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	58000400 	.word	0x58000400
 8000970:	58024800 	.word	0x58024800

08000974 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000978:	4b2e      	ldr	r3, [pc, #184]	; (8000a34 <MX_FDCAN1_Init+0xc0>)
 800097a:	4a2f      	ldr	r2, [pc, #188]	; (8000a38 <MX_FDCAN1_Init+0xc4>)
 800097c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800097e:	4b2d      	ldr	r3, [pc, #180]	; (8000a34 <MX_FDCAN1_Init+0xc0>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000984:	4b2b      	ldr	r3, [pc, #172]	; (8000a34 <MX_FDCAN1_Init+0xc0>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800098a:	4b2a      	ldr	r3, [pc, #168]	; (8000a34 <MX_FDCAN1_Init+0xc0>)
 800098c:	2200      	movs	r2, #0
 800098e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000990:	4b28      	ldr	r3, [pc, #160]	; (8000a34 <MX_FDCAN1_Init+0xc0>)
 8000992:	2200      	movs	r2, #0
 8000994:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000996:	4b27      	ldr	r3, [pc, #156]	; (8000a34 <MX_FDCAN1_Init+0xc0>)
 8000998:	2200      	movs	r2, #0
 800099a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 800099c:	4b25      	ldr	r3, [pc, #148]	; (8000a34 <MX_FDCAN1_Init+0xc0>)
 800099e:	2210      	movs	r2, #16
 80009a0:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80009a2:	4b24      	ldr	r3, [pc, #144]	; (8000a34 <MX_FDCAN1_Init+0xc0>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80009a8:	4b22      	ldr	r3, [pc, #136]	; (8000a34 <MX_FDCAN1_Init+0xc0>)
 80009aa:	2202      	movs	r2, #2
 80009ac:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80009ae:	4b21      	ldr	r3, [pc, #132]	; (8000a34 <MX_FDCAN1_Init+0xc0>)
 80009b0:	2202      	movs	r2, #2
 80009b2:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80009b4:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <MX_FDCAN1_Init+0xc0>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80009ba:	4b1e      	ldr	r3, [pc, #120]	; (8000a34 <MX_FDCAN1_Init+0xc0>)
 80009bc:	2201      	movs	r2, #1
 80009be:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80009c0:	4b1c      	ldr	r3, [pc, #112]	; (8000a34 <MX_FDCAN1_Init+0xc0>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80009c6:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <MX_FDCAN1_Init+0xc0>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80009cc:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <MX_FDCAN1_Init+0xc0>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 80009d2:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <MX_FDCAN1_Init+0xc0>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80009d8:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <MX_FDCAN1_Init+0xc0>)
 80009da:	2200      	movs	r2, #0
 80009dc:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 80009de:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <MX_FDCAN1_Init+0xc0>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80009e4:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <MX_FDCAN1_Init+0xc0>)
 80009e6:	2204      	movs	r2, #4
 80009e8:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80009ea:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <MX_FDCAN1_Init+0xc0>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80009f0:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <MX_FDCAN1_Init+0xc0>)
 80009f2:	2204      	movs	r2, #4
 80009f4:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80009f6:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_FDCAN1_Init+0xc0>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80009fc:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <MX_FDCAN1_Init+0xc0>)
 80009fe:	2204      	movs	r2, #4
 8000a00:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000a02:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <MX_FDCAN1_Init+0xc0>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000a08:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <MX_FDCAN1_Init+0xc0>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_FDCAN1_Init+0xc0>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000a14:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <MX_FDCAN1_Init+0xc0>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_FDCAN1_Init+0xc0>)
 8000a1c:	2204      	movs	r2, #4
 8000a1e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000a20:	4804      	ldr	r0, [pc, #16]	; (8000a34 <MX_FDCAN1_Init+0xc0>)
 8000a22:	f000 ff91 	bl	8001948 <HAL_FDCAN_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000a2c:	f000 fb26 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	24000094 	.word	0x24000094
 8000a38:	4000a000 	.word	0x4000a000

08000a3c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000a40:	4b28      	ldr	r3, [pc, #160]	; (8000ae4 <MX_SPI4_Init+0xa8>)
 8000a42:	4a29      	ldr	r2, [pc, #164]	; (8000ae8 <MX_SPI4_Init+0xac>)
 8000a44:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000a46:	4b27      	ldr	r3, [pc, #156]	; (8000ae4 <MX_SPI4_Init+0xa8>)
 8000a48:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000a4c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000a4e:	4b25      	ldr	r3, [pc, #148]	; (8000ae4 <MX_SPI4_Init+0xa8>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a54:	4b23      	ldr	r3, [pc, #140]	; (8000ae4 <MX_SPI4_Init+0xa8>)
 8000a56:	2207      	movs	r2, #7
 8000a58:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000a5a:	4b22      	ldr	r3, [pc, #136]	; (8000ae4 <MX_SPI4_Init+0xa8>)
 8000a5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000a60:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000a62:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <MX_SPI4_Init+0xa8>)
 8000a64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000a68:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000a6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ae4 <MX_SPI4_Init+0xa8>)
 8000a6c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000a70:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a72:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <MX_SPI4_Init+0xa8>)
 8000a74:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8000a78:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <MX_SPI4_Init+0xa8>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a80:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <MX_SPI4_Init+0xa8>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a86:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <MX_SPI4_Init+0xa8>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000a8c:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <MX_SPI4_Init+0xa8>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a92:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <MX_SPI4_Init+0xa8>)
 8000a94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a98:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a9a:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <MX_SPI4_Init+0xa8>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000aa0:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <MX_SPI4_Init+0xa8>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <MX_SPI4_Init+0xa8>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000aac:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <MX_SPI4_Init+0xa8>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_SPI4_Init+0xa8>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ab8:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <MX_SPI4_Init+0xa8>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <MX_SPI4_Init+0xa8>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ac4:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <MX_SPI4_Init+0xa8>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <MX_SPI4_Init+0xa8>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000ad0:	4804      	ldr	r0, [pc, #16]	; (8000ae4 <MX_SPI4_Init+0xa8>)
 8000ad2:	f004 f853 	bl	8004b7c <HAL_SPI_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_SPI4_Init+0xa4>
  {
    Error_Handler();
 8000adc:	f000 face 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	24000134 	.word	0x24000134
 8000ae8:	40013400 	.word	0x40013400

08000aec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b096      	sub	sp, #88	; 0x58
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000afe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]
 8000b0c:	611a      	str	r2, [r3, #16]
 8000b0e:	615a      	str	r2, [r3, #20]
 8000b10:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	222c      	movs	r2, #44	; 0x2c
 8000b16:	2100      	movs	r1, #0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f009 ff9c 	bl	800aa56 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b1e:	4b3f      	ldr	r3, [pc, #252]	; (8000c1c <MX_TIM1_Init+0x130>)
 8000b20:	4a3f      	ldr	r2, [pc, #252]	; (8000c20 <MX_TIM1_Init+0x134>)
 8000b22:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b24:	4b3d      	ldr	r3, [pc, #244]	; (8000c1c <MX_TIM1_Init+0x130>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b2a:	4b3c      	ldr	r3, [pc, #240]	; (8000c1c <MX_TIM1_Init+0x130>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b30:	4b3a      	ldr	r3, [pc, #232]	; (8000c1c <MX_TIM1_Init+0x130>)
 8000b32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b36:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b38:	4b38      	ldr	r3, [pc, #224]	; (8000c1c <MX_TIM1_Init+0x130>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b3e:	4b37      	ldr	r3, [pc, #220]	; (8000c1c <MX_TIM1_Init+0x130>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b44:	4b35      	ldr	r3, [pc, #212]	; (8000c1c <MX_TIM1_Init+0x130>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b4a:	4834      	ldr	r0, [pc, #208]	; (8000c1c <MX_TIM1_Init+0x130>)
 8000b4c:	f005 f894 	bl	8005c78 <HAL_TIM_PWM_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000b56:	f000 fa91 	bl	800107c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b66:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	482b      	ldr	r0, [pc, #172]	; (8000c1c <MX_TIM1_Init+0x130>)
 8000b6e:	f005 fea5 	bl	80068bc <HAL_TIMEx_MasterConfigSynchronization>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b78:	f000 fa80 	bl	800107c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b7c:	2360      	movs	r3, #96	; 0x60
 8000b7e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b84:	2300      	movs	r3, #0
 8000b86:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b90:	2300      	movs	r3, #0
 8000b92:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b94:	2300      	movs	r3, #0
 8000b96:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	481e      	ldr	r0, [pc, #120]	; (8000c1c <MX_TIM1_Init+0x130>)
 8000ba2:	f005 f9df 	bl	8005f64 <HAL_TIM_PWM_ConfigChannel>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000bac:	f000 fa66 	bl	800107c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bb4:	2208      	movs	r2, #8
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4818      	ldr	r0, [pc, #96]	; (8000c1c <MX_TIM1_Init+0x130>)
 8000bba:	f005 f9d3 	bl	8005f64 <HAL_TIM_PWM_ConfigChannel>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000bc4:	f000 fa5a 	bl	800107c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000be0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000be6:	2300      	movs	r3, #0
 8000be8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4807      	ldr	r0, [pc, #28]	; (8000c1c <MX_TIM1_Init+0x130>)
 8000bfe:	f005 feeb 	bl	80069d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8000c08:	f000 fa38 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c0c:	4803      	ldr	r0, [pc, #12]	; (8000c1c <MX_TIM1_Init+0x130>)
 8000c0e:	f000 fb57 	bl	80012c0 <HAL_TIM_MspPostInit>

}
 8000c12:	bf00      	nop
 8000c14:	3758      	adds	r7, #88	; 0x58
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	240001bc 	.word	0x240001bc
 8000c20:	40010000 	.word	0x40010000

08000c24 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c28:	4b22      	ldr	r3, [pc, #136]	; (8000cb4 <MX_USART3_UART_Init+0x90>)
 8000c2a:	4a23      	ldr	r2, [pc, #140]	; (8000cb8 <MX_USART3_UART_Init+0x94>)
 8000c2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c2e:	4b21      	ldr	r3, [pc, #132]	; (8000cb4 <MX_USART3_UART_Init+0x90>)
 8000c30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c36:	4b1f      	ldr	r3, [pc, #124]	; (8000cb4 <MX_USART3_UART_Init+0x90>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c3c:	4b1d      	ldr	r3, [pc, #116]	; (8000cb4 <MX_USART3_UART_Init+0x90>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c42:	4b1c      	ldr	r3, [pc, #112]	; (8000cb4 <MX_USART3_UART_Init+0x90>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c48:	4b1a      	ldr	r3, [pc, #104]	; (8000cb4 <MX_USART3_UART_Init+0x90>)
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4e:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <MX_USART3_UART_Init+0x90>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c54:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <MX_USART3_UART_Init+0x90>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c5a:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <MX_USART3_UART_Init+0x90>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c60:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <MX_USART3_UART_Init+0x90>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c66:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <MX_USART3_UART_Init+0x90>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c6c:	4811      	ldr	r0, [pc, #68]	; (8000cb4 <MX_USART3_UART_Init+0x90>)
 8000c6e:	f005 ff4f 	bl	8006b10 <HAL_UART_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c78:	f000 fa00 	bl	800107c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	480d      	ldr	r0, [pc, #52]	; (8000cb4 <MX_USART3_UART_Init+0x90>)
 8000c80:	f006 ff82 	bl	8007b88 <HAL_UARTEx_SetTxFifoThreshold>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c8a:	f000 f9f7 	bl	800107c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4808      	ldr	r0, [pc, #32]	; (8000cb4 <MX_USART3_UART_Init+0x90>)
 8000c92:	f006 ffb7 	bl	8007c04 <HAL_UARTEx_SetRxFifoThreshold>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c9c:	f000 f9ee 	bl	800107c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ca0:	4804      	ldr	r0, [pc, #16]	; (8000cb4 <MX_USART3_UART_Init+0x90>)
 8000ca2:	f006 ff38 	bl	8007b16 <HAL_UARTEx_DisableFifoMode>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000cac:	f000 f9e6 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	24000208 	.word	0x24000208
 8000cb8:	40004800 	.word	0x40004800

08000cbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	; 0x28
 8000cc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
 8000cd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cd2:	4b42      	ldr	r3, [pc, #264]	; (8000ddc <MX_GPIO_Init+0x120>)
 8000cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd8:	4a40      	ldr	r2, [pc, #256]	; (8000ddc <MX_GPIO_Init+0x120>)
 8000cda:	f043 0310 	orr.w	r3, r3, #16
 8000cde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ce2:	4b3e      	ldr	r3, [pc, #248]	; (8000ddc <MX_GPIO_Init+0x120>)
 8000ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce8:	f003 0310 	and.w	r3, r3, #16
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf0:	4b3a      	ldr	r3, [pc, #232]	; (8000ddc <MX_GPIO_Init+0x120>)
 8000cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf6:	4a39      	ldr	r2, [pc, #228]	; (8000ddc <MX_GPIO_Init+0x120>)
 8000cf8:	f043 0304 	orr.w	r3, r3, #4
 8000cfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d00:	4b36      	ldr	r3, [pc, #216]	; (8000ddc <MX_GPIO_Init+0x120>)
 8000d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d06:	f003 0304 	and.w	r3, r3, #4
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d0e:	4b33      	ldr	r3, [pc, #204]	; (8000ddc <MX_GPIO_Init+0x120>)
 8000d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d14:	4a31      	ldr	r2, [pc, #196]	; (8000ddc <MX_GPIO_Init+0x120>)
 8000d16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d1e:	4b2f      	ldr	r3, [pc, #188]	; (8000ddc <MX_GPIO_Init+0x120>)
 8000d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2c:	4b2b      	ldr	r3, [pc, #172]	; (8000ddc <MX_GPIO_Init+0x120>)
 8000d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d32:	4a2a      	ldr	r2, [pc, #168]	; (8000ddc <MX_GPIO_Init+0x120>)
 8000d34:	f043 0302 	orr.w	r3, r3, #2
 8000d38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d3c:	4b27      	ldr	r3, [pc, #156]	; (8000ddc <MX_GPIO_Init+0x120>)
 8000d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d42:	f003 0302 	and.w	r3, r3, #2
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d4a:	4b24      	ldr	r3, [pc, #144]	; (8000ddc <MX_GPIO_Init+0x120>)
 8000d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d50:	4a22      	ldr	r2, [pc, #136]	; (8000ddc <MX_GPIO_Init+0x120>)
 8000d52:	f043 0308 	orr.w	r3, r3, #8
 8000d56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d5a:	4b20      	ldr	r3, [pc, #128]	; (8000ddc <MX_GPIO_Init+0x120>)
 8000d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d60:	f003 0308 	and.w	r3, r3, #8
 8000d64:	603b      	str	r3, [r7, #0]
 8000d66:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS2_Pin|CS1_Pin, GPIO_PIN_RESET);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2118      	movs	r1, #24
 8000d6c:	481c      	ldr	r0, [pc, #112]	; (8000de0 <MX_GPIO_Init+0x124>)
 8000d6e:	f001 faff 	bl	8002370 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	f244 0101 	movw	r1, #16385	; 0x4001
 8000d78:	481a      	ldr	r0, [pc, #104]	; (8000de4 <MX_GPIO_Init+0x128>)
 8000d7a:	f001 faf9 	bl	8002370 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS2_Pin CS1_Pin */
  GPIO_InitStruct.Pin = CS2_Pin|CS1_Pin;
 8000d7e:	2318      	movs	r3, #24
 8000d80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d82:	2301      	movs	r3, #1
 8000d84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	4619      	mov	r1, r3
 8000d94:	4812      	ldr	r0, [pc, #72]	; (8000de0 <MX_GPIO_Init+0x124>)
 8000d96:	f001 f93b 	bl	8002010 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	4619      	mov	r1, r3
 8000dae:	480e      	ldr	r0, [pc, #56]	; (8000de8 <MX_GPIO_Init+0x12c>)
 8000db0:	f001 f92e 	bl	8002010 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000db4:	f244 0301 	movw	r3, #16385	; 0x4001
 8000db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc6:	f107 0314 	add.w	r3, r7, #20
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4805      	ldr	r0, [pc, #20]	; (8000de4 <MX_GPIO_Init+0x128>)
 8000dce:	f001 f91f 	bl	8002010 <HAL_GPIO_Init>

}
 8000dd2:	bf00      	nop
 8000dd4:	3728      	adds	r7, #40	; 0x28
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	58024400 	.word	0x58024400
 8000de0:	58021000 	.word	0x58021000
 8000de4:	58020400 	.word	0x58020400
 8000de8:	58020800 	.word	0x58020800

08000dec <mpu9250_write_reg.0>:
void StartDefaultTask(void *argument)
{
  /* USER CODE BEGIN 5 */

	void mpu9250_write_reg(uint8_t reg, uint8_t data)
	{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	460a      	mov	r2, r1
 8000df6:	71fb      	strb	r3, [r7, #7]
 8000df8:	4613      	mov	r3, r2
 8000dfa:	71bb      	strb	r3, [r7, #6]
 8000dfc:	f8c7 c000 	str.w	ip, [r7]
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2110      	movs	r1, #16
 8000e04:	480b      	ldr	r0, [pc, #44]	; (8000e34 <mpu9250_write_reg.0+0x48>)
 8000e06:	f001 fab3 	bl	8002370 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi4, &reg, 1, 100);
 8000e0a:	1df9      	adds	r1, r7, #7
 8000e0c:	2364      	movs	r3, #100	; 0x64
 8000e0e:	2201      	movs	r2, #1
 8000e10:	4809      	ldr	r0, [pc, #36]	; (8000e38 <mpu9250_write_reg.0+0x4c>)
 8000e12:	f003 ffb9 	bl	8004d88 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi4, &data, 1, 100);
 8000e16:	1db9      	adds	r1, r7, #6
 8000e18:	2364      	movs	r3, #100	; 0x64
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	4806      	ldr	r0, [pc, #24]	; (8000e38 <mpu9250_write_reg.0+0x4c>)
 8000e1e:	f003 ffb3 	bl	8004d88 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8000e22:	2201      	movs	r2, #1
 8000e24:	2110      	movs	r1, #16
 8000e26:	4803      	ldr	r0, [pc, #12]	; (8000e34 <mpu9250_write_reg.0+0x48>)
 8000e28:	f001 faa2 	bl	8002370 <HAL_GPIO_WritePin>
	}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	58021000 	.word	0x58021000
 8000e38:	24000134 	.word	0x24000134
 8000e3c:	00000000 	.word	0x00000000

08000e40 <StartDefaultTask>:
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08e      	sub	sp, #56	; 0x38
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
void StartDefaultTask(void *argument)
 8000e48:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e4c:	60bb      	str	r3, [r7, #8]
  int16_t magnZ_data;
  // Datos imu y magnetometro
  uint8_t imu_data[14];
  uint8_t magn_data[6];
  // Configuracion imu y magnetometro
  mpu9250_write_reg(27, 0b00001100); // 16 Resolution
 8000e4e:	f107 0308 	add.w	r3, r7, #8
 8000e52:	469c      	mov	ip, r3
 8000e54:	210c      	movs	r1, #12
 8000e56:	201b      	movs	r0, #27
 8000e58:	f7ff ffc8 	bl	8000dec <mpu9250_write_reg.0>
  mpu9250_write_reg(28, 0b00001100); // 2000 Resolution
 8000e5c:	f107 0308 	add.w	r3, r7, #8
 8000e60:	469c      	mov	ip, r3
 8000e62:	210c      	movs	r1, #12
 8000e64:	201c      	movs	r0, #28
 8000e66:	f7ff ffc1 	bl	8000dec <mpu9250_write_reg.0>
  //mpu9250_write_reg(??, 0b00000100); // 10. * 4912. / 32760.0 Resolution

  printf("Hello World\n\r");
 8000e6a:	4861      	ldr	r0, [pc, #388]	; (8000ff0 <StartDefaultTask+0x1b0>)
 8000e6c:	f009 fe90 	bl	800ab90 <iprintf>

  /* Infinite loop */
  for(;;)
  {
    // Obtención de datos imu
	mpu9250_read_reg(59, imu_data, sizeof(imu_data));
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	f107 0208 	add.w	r2, r7, #8
 8000e78:	4694      	mov	ip, r2
 8000e7a:	220e      	movs	r2, #14
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	203b      	movs	r0, #59	; 0x3b
 8000e80:	f000 f8ba 	bl	8000ff8 <mpu9250_read_reg.1>
	// Obtención de datos magnometro
	mpu9250_read_reg(03, magn_data, sizeof(magn_data));
 8000e84:	f107 030c 	add.w	r3, r7, #12
 8000e88:	f107 0208 	add.w	r2, r7, #8
 8000e8c:	4694      	mov	ip, r2
 8000e8e:	2206      	movs	r2, #6
 8000e90:	4619      	mov	r1, r3
 8000e92:	2003      	movs	r0, #3
 8000e94:	f000 f8b0 	bl	8000ff8 <mpu9250_read_reg.1>
	// Obtención de lectura acelerómetro
	accelX_raw = ((int16_t)imu_data[0]<<8) + imu_data[1];
 8000e98:	7d3b      	ldrb	r3, [r7, #20]
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	021b      	lsls	r3, r3, #8
 8000e9e:	b29a      	uxth	r2, r3
 8000ea0:	7d7b      	ldrb	r3, [r7, #21]
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	4413      	add	r3, r2
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	86fb      	strh	r3, [r7, #54]	; 0x36
	accelY_raw = ((int16_t)imu_data[2]<<8) + imu_data[3];
 8000eaa:	7dbb      	ldrb	r3, [r7, #22]
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	021b      	lsls	r3, r3, #8
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	7dfb      	ldrb	r3, [r7, #23]
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	4413      	add	r3, r2
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	86bb      	strh	r3, [r7, #52]	; 0x34
	accelZ_raw = ((int16_t)imu_data[4]<<8) + imu_data[5];
 8000ebc:	7e3b      	ldrb	r3, [r7, #24]
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	021b      	lsls	r3, r3, #8
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	7e7b      	ldrb	r3, [r7, #25]
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	4413      	add	r3, r2
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	867b      	strh	r3, [r7, #50]	; 0x32
	accelX_data = accelX_raw * (16.0 / 32768.0);
 8000ece:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8000ed2:	ee07 3a90 	vmov	s15, r3
 8000ed6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000eda:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8000fe0 <StartDefaultTask+0x1a0>
 8000ede:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ee2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000ee6:	edc7 7a00 	vstr	s15, [r7]
 8000eea:	783b      	ldrb	r3, [r7, #0]
 8000eec:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	accelY_data = accelY_raw * (16.0 / 32768.0);
 8000ef0:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8000ef4:	ee07 3a90 	vmov	s15, r3
 8000ef8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000efc:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8000fe0 <StartDefaultTask+0x1a0>
 8000f00:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f04:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000f08:	edc7 7a00 	vstr	s15, [r7]
 8000f0c:	783b      	ldrb	r3, [r7, #0]
 8000f0e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	accelZ_data = accelZ_raw * (16.0 / 32768.0);
 8000f12:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8000f16:	ee07 3a90 	vmov	s15, r3
 8000f1a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f1e:	ed9f 6b30 	vldr	d6, [pc, #192]	; 8000fe0 <StartDefaultTask+0x1a0>
 8000f22:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f26:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000f2a:	edc7 7a00 	vstr	s15, [r7]
 8000f2e:	783b      	ldrb	r3, [r7, #0]
 8000f30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	// Obtención de lectura giroscopio
	gyroX_raw = ((int16_t)imu_data[8]<<8) + imu_data[9];
 8000f34:	7f3b      	ldrb	r3, [r7, #28]
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	021b      	lsls	r3, r3, #8
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	7f7b      	ldrb	r3, [r7, #29]
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	4413      	add	r3, r2
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	85bb      	strh	r3, [r7, #44]	; 0x2c
	gyroY_raw = ((int16_t)imu_data[10]<<8) + imu_data[11];
 8000f46:	7fbb      	ldrb	r3, [r7, #30]
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	021b      	lsls	r3, r3, #8
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	7ffb      	ldrb	r3, [r7, #31]
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	4413      	add	r3, r2
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	857b      	strh	r3, [r7, #42]	; 0x2a
	gyroZ_raw = ((int16_t)imu_data[12]<<8) + imu_data[13];
 8000f58:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	021b      	lsls	r3, r3, #8
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	4413      	add	r3, r2
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	853b      	strh	r3, [r7, #40]	; 0x28
	gyroX_data = gyroX_raw * (2000.0 / 32768.0) ;
 8000f6e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8000f72:	ee07 3a90 	vmov	s15, r3
 8000f76:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f7a:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 8000fe8 <StartDefaultTask+0x1a8>
 8000f7e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f82:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000f86:	ee17 3a90 	vmov	r3, s15
 8000f8a:	84fb      	strh	r3, [r7, #38]	; 0x26
	gyroY_data = gyroY_raw * (2000.0 / 32768.0) ;
 8000f8c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000f90:	ee07 3a90 	vmov	s15, r3
 8000f94:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f98:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8000fe8 <StartDefaultTask+0x1a8>
 8000f9c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000fa0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000fa4:	ee17 3a90 	vmov	r3, s15
 8000fa8:	84bb      	strh	r3, [r7, #36]	; 0x24
	gyroZ_data = gyroZ_raw * (2000.0 / 32768.0) ;
 8000faa:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8000fae:	ee07 3a90 	vmov	s15, r3
 8000fb2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000fb6:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8000fe8 <StartDefaultTask+0x1a8>
 8000fba:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000fbe:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000fc2:	ee17 3a90 	vmov	r3, s15
 8000fc6:	847b      	strh	r3, [r7, #34]	; 0x22
	//magnX_data = magnX_raw * (10. * 4912. / 32760.0);
	//magnY_data = magnY_raw * (10. * 4912. / 32760.0);
	//magnZ_data = magnZ_raw * (10. * 4912. / 32760.0);

	//printf("Accelerator data: X %d / Y %d / Z %d\n\r",accelX_data,accelY_data,accelZ_data);
	printf("Gyroscope data: X %d / Y %d / Z %d\n\r",gyroX_raw,gyroY_raw,gyroZ_raw);
 8000fc8:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8000fcc:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8000fd0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8000fd4:	4807      	ldr	r0, [pc, #28]	; (8000ff4 <StartDefaultTask+0x1b4>)
 8000fd6:	f009 fddb 	bl	800ab90 <iprintf>
	mpu9250_read_reg(59, imu_data, sizeof(imu_data));
 8000fda:	e749      	b.n	8000e70 <StartDefaultTask+0x30>
 8000fdc:	f3af 8000 	nop.w
 8000fe0:	00000000 	.word	0x00000000
 8000fe4:	3f400000 	.word	0x3f400000
 8000fe8:	00000000 	.word	0x00000000
 8000fec:	3faf4000 	.word	0x3faf4000
 8000ff0:	0800b88c 	.word	0x0800b88c
 8000ff4:	0800b89c 	.word	0x0800b89c

08000ff8 <mpu9250_read_reg.1>:
	{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	73fb      	strb	r3, [r7, #15]
 8001004:	4613      	mov	r3, r2
 8001006:	73bb      	strb	r3, [r7, #14]
 8001008:	f8c7 c004 	str.w	ip, [r7, #4]
		uint8_t temp_data = 0x80|reg;
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001012:	b2db      	uxtb	r3, r3
 8001014:	75fb      	strb	r3, [r7, #23]
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	2110      	movs	r1, #16
 800101a:	480d      	ldr	r0, [pc, #52]	; (8001050 <mpu9250_read_reg.1+0x58>)
 800101c:	f001 f9a8 	bl	8002370 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi4, &temp_data , 1, 100);
 8001020:	f107 0117 	add.w	r1, r7, #23
 8001024:	2364      	movs	r3, #100	; 0x64
 8001026:	2201      	movs	r2, #1
 8001028:	480a      	ldr	r0, [pc, #40]	; (8001054 <mpu9250_read_reg.1+0x5c>)
 800102a:	f003 fead 	bl	8004d88 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi4, data, len, 100);
 800102e:	7bbb      	ldrb	r3, [r7, #14]
 8001030:	b29a      	uxth	r2, r3
 8001032:	2364      	movs	r3, #100	; 0x64
 8001034:	68b9      	ldr	r1, [r7, #8]
 8001036:	4807      	ldr	r0, [pc, #28]	; (8001054 <mpu9250_read_reg.1+0x5c>)
 8001038:	f004 f898 	bl	800516c <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 800103c:	2201      	movs	r2, #1
 800103e:	2110      	movs	r1, #16
 8001040:	4803      	ldr	r0, [pc, #12]	; (8001050 <mpu9250_read_reg.1+0x58>)
 8001042:	f001 f995 	bl	8002370 <HAL_GPIO_WritePin>
	}
 8001046:	bf00      	nop
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	58021000 	.word	0x58021000
 8001054:	24000134 	.word	0x24000134

08001058 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a04      	ldr	r2, [pc, #16]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d101      	bne.n	800106e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800106a:	f000 fb61 	bl	8001730 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40001400 	.word	0x40001400

0800107c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001080:	b672      	cpsid	i
}
 8001082:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001084:	e7fe      	b.n	8001084 <Error_Handler+0x8>
	...

08001088 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001090:	1d39      	adds	r1, r7, #4
 8001092:	f04f 33ff 	mov.w	r3, #4294967295
 8001096:	2201      	movs	r2, #1
 8001098:	4803      	ldr	r0, [pc, #12]	; (80010a8 <__io_putchar+0x20>)
 800109a:	f005 fd89 	bl	8006bb0 <HAL_UART_Transmit>
  return ch;
 800109e:	687b      	ldr	r3, [r7, #4]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	24000208 	.word	0x24000208

080010ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b2:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <HAL_MspInit+0x38>)
 80010b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010b8:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <HAL_MspInit+0x38>)
 80010ba:	f043 0302 	orr.w	r3, r3, #2
 80010be:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80010c2:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <HAL_MspInit+0x38>)
 80010c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010c8:	f003 0302 	and.w	r3, r3, #2
 80010cc:	607b      	str	r3, [r7, #4]
 80010ce:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010d0:	2200      	movs	r2, #0
 80010d2:	210f      	movs	r1, #15
 80010d4:	f06f 0001 	mvn.w	r0, #1
 80010d8:	f000 fc0e 	bl	80018f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	58024400 	.word	0x58024400

080010e8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b0b8      	sub	sp, #224	; 0xe0
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001100:	f107 0310 	add.w	r3, r7, #16
 8001104:	22bc      	movs	r2, #188	; 0xbc
 8001106:	2100      	movs	r1, #0
 8001108:	4618      	mov	r0, r3
 800110a:	f009 fca4 	bl	800aa56 <memset>
  if(hfdcan->Instance==FDCAN1)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a25      	ldr	r2, [pc, #148]	; (80011a8 <HAL_FDCAN_MspInit+0xc0>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d142      	bne.n	800119e <HAL_FDCAN_MspInit+0xb6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001118:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800111c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800111e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001122:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001124:	f107 0310 	add.w	r3, r7, #16
 8001128:	4618      	mov	r0, r3
 800112a:	f002 f9bf 	bl	80034ac <HAL_RCCEx_PeriphCLKConfig>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001134:	f7ff ffa2 	bl	800107c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001138:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <HAL_FDCAN_MspInit+0xc4>)
 800113a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800113e:	4a1b      	ldr	r2, [pc, #108]	; (80011ac <HAL_FDCAN_MspInit+0xc4>)
 8001140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001144:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001148:	4b18      	ldr	r3, [pc, #96]	; (80011ac <HAL_FDCAN_MspInit+0xc4>)
 800114a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800114e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <HAL_FDCAN_MspInit+0xc4>)
 8001158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800115c:	4a13      	ldr	r2, [pc, #76]	; (80011ac <HAL_FDCAN_MspInit+0xc4>)
 800115e:	f043 0308 	orr.w	r3, r3, #8
 8001162:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <HAL_FDCAN_MspInit+0xc4>)
 8001168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800116c:	f003 0308 	and.w	r3, r3, #8
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001174:	2303      	movs	r3, #3
 8001176:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	2302      	movs	r3, #2
 800117c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	2300      	movs	r3, #0
 8001188:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800118c:	2309      	movs	r3, #9
 800118e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001192:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001196:	4619      	mov	r1, r3
 8001198:	4805      	ldr	r0, [pc, #20]	; (80011b0 <HAL_FDCAN_MspInit+0xc8>)
 800119a:	f000 ff39 	bl	8002010 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800119e:	bf00      	nop
 80011a0:	37e0      	adds	r7, #224	; 0xe0
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	4000a000 	.word	0x4000a000
 80011ac:	58024400 	.word	0x58024400
 80011b0:	58020c00 	.word	0x58020c00

080011b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b0b8      	sub	sp, #224	; 0xe0
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011cc:	f107 0310 	add.w	r3, r7, #16
 80011d0:	22bc      	movs	r2, #188	; 0xbc
 80011d2:	2100      	movs	r1, #0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f009 fc3e 	bl	800aa56 <memset>
  if(hspi->Instance==SPI4)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a24      	ldr	r2, [pc, #144]	; (8001270 <HAL_SPI_MspInit+0xbc>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d141      	bne.n	8001268 <HAL_SPI_MspInit+0xb4>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80011e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011e8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80011ea:	2300      	movs	r3, #0
 80011ec:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ee:	f107 0310 	add.w	r3, r7, #16
 80011f2:	4618      	mov	r0, r3
 80011f4:	f002 f95a 	bl	80034ac <HAL_RCCEx_PeriphCLKConfig>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80011fe:	f7ff ff3d 	bl	800107c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001202:	4b1c      	ldr	r3, [pc, #112]	; (8001274 <HAL_SPI_MspInit+0xc0>)
 8001204:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001208:	4a1a      	ldr	r2, [pc, #104]	; (8001274 <HAL_SPI_MspInit+0xc0>)
 800120a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800120e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001212:	4b18      	ldr	r3, [pc, #96]	; (8001274 <HAL_SPI_MspInit+0xc0>)
 8001214:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001218:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001220:	4b14      	ldr	r3, [pc, #80]	; (8001274 <HAL_SPI_MspInit+0xc0>)
 8001222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001226:	4a13      	ldr	r2, [pc, #76]	; (8001274 <HAL_SPI_MspInit+0xc0>)
 8001228:	f043 0310 	orr.w	r3, r3, #16
 800122c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001230:	4b10      	ldr	r3, [pc, #64]	; (8001274 <HAL_SPI_MspInit+0xc0>)
 8001232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001236:	f003 0310 	and.w	r3, r3, #16
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800123e:	2364      	movs	r3, #100	; 0x64
 8001240:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001244:	2302      	movs	r3, #2
 8001246:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001250:	2300      	movs	r3, #0
 8001252:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001256:	2305      	movs	r3, #5
 8001258:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800125c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001260:	4619      	mov	r1, r3
 8001262:	4805      	ldr	r0, [pc, #20]	; (8001278 <HAL_SPI_MspInit+0xc4>)
 8001264:	f000 fed4 	bl	8002010 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001268:	bf00      	nop
 800126a:	37e0      	adds	r7, #224	; 0xe0
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40013400 	.word	0x40013400
 8001274:	58024400 	.word	0x58024400
 8001278:	58021000 	.word	0x58021000

0800127c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a0b      	ldr	r2, [pc, #44]	; (80012b8 <HAL_TIM_PWM_MspInit+0x3c>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d10e      	bne.n	80012ac <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800128e:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <HAL_TIM_PWM_MspInit+0x40>)
 8001290:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001294:	4a09      	ldr	r2, [pc, #36]	; (80012bc <HAL_TIM_PWM_MspInit+0x40>)
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800129e:	4b07      	ldr	r3, [pc, #28]	; (80012bc <HAL_TIM_PWM_MspInit+0x40>)
 80012a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80012ac:	bf00      	nop
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	40010000 	.word	0x40010000
 80012bc:	58024400 	.word	0x58024400

080012c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b088      	sub	sp, #32
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	f107 030c 	add.w	r3, r7, #12
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a13      	ldr	r2, [pc, #76]	; (800132c <HAL_TIM_MspPostInit+0x6c>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d11f      	bne.n	8001322 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e2:	4b13      	ldr	r3, [pc, #76]	; (8001330 <HAL_TIM_MspPostInit+0x70>)
 80012e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e8:	4a11      	ldr	r2, [pc, #68]	; (8001330 <HAL_TIM_MspPostInit+0x70>)
 80012ea:	f043 0302 	orr.w	r3, r3, #2
 80012ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012f2:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <HAL_TIM_MspPostInit+0x70>)
 80012f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f8:	f003 0302 	and.w	r3, r3, #2
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB13     ------> TIM1_CH1N
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001300:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001304:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	2302      	movs	r3, #2
 8001308:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130e:	2300      	movs	r3, #0
 8001310:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001312:	2301      	movs	r3, #1
 8001314:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001316:	f107 030c 	add.w	r3, r7, #12
 800131a:	4619      	mov	r1, r3
 800131c:	4805      	ldr	r0, [pc, #20]	; (8001334 <HAL_TIM_MspPostInit+0x74>)
 800131e:	f000 fe77 	bl	8002010 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001322:	bf00      	nop
 8001324:	3720      	adds	r7, #32
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40010000 	.word	0x40010000
 8001330:	58024400 	.word	0x58024400
 8001334:	58020400 	.word	0x58020400

08001338 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b0b8      	sub	sp, #224	; 0xe0
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001350:	f107 0310 	add.w	r3, r7, #16
 8001354:	22bc      	movs	r2, #188	; 0xbc
 8001356:	2100      	movs	r1, #0
 8001358:	4618      	mov	r0, r3
 800135a:	f009 fb7c 	bl	800aa56 <memset>
  if(huart->Instance==USART3)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a25      	ldr	r2, [pc, #148]	; (80013f8 <HAL_UART_MspInit+0xc0>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d142      	bne.n	80013ee <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001368:	2302      	movs	r3, #2
 800136a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800136c:	2300      	movs	r3, #0
 800136e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001372:	f107 0310 	add.w	r3, r7, #16
 8001376:	4618      	mov	r0, r3
 8001378:	f002 f898 	bl	80034ac <HAL_RCCEx_PeriphCLKConfig>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001382:	f7ff fe7b 	bl	800107c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001386:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <HAL_UART_MspInit+0xc4>)
 8001388:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800138c:	4a1b      	ldr	r2, [pc, #108]	; (80013fc <HAL_UART_MspInit+0xc4>)
 800138e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001392:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001396:	4b19      	ldr	r3, [pc, #100]	; (80013fc <HAL_UART_MspInit+0xc4>)
 8001398:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800139c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a4:	4b15      	ldr	r3, [pc, #84]	; (80013fc <HAL_UART_MspInit+0xc4>)
 80013a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013aa:	4a14      	ldr	r2, [pc, #80]	; (80013fc <HAL_UART_MspInit+0xc4>)
 80013ac:	f043 0308 	orr.w	r3, r3, #8
 80013b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013b4:	4b11      	ldr	r3, [pc, #68]	; (80013fc <HAL_UART_MspInit+0xc4>)
 80013b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ba:	f003 0308 	and.w	r3, r3, #8
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80013c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ca:	2302      	movs	r3, #2
 80013cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d6:	2300      	movs	r3, #0
 80013d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013dc:	2307      	movs	r3, #7
 80013de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013e2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013e6:	4619      	mov	r1, r3
 80013e8:	4805      	ldr	r0, [pc, #20]	; (8001400 <HAL_UART_MspInit+0xc8>)
 80013ea:	f000 fe11 	bl	8002010 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013ee:	bf00      	nop
 80013f0:	37e0      	adds	r7, #224	; 0xe0
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40004800 	.word	0x40004800
 80013fc:	58024400 	.word	0x58024400
 8001400:	58020c00 	.word	0x58020c00

08001404 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b090      	sub	sp, #64	; 0x40
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b0f      	cmp	r3, #15
 8001410:	d827      	bhi.n	8001462 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 8001412:	2200      	movs	r2, #0
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	2037      	movs	r0, #55	; 0x37
 8001418:	f000 fa6e 	bl	80018f8 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800141c:	2037      	movs	r0, #55	; 0x37
 800141e:	f000 fa85 	bl	800192c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001422:	4a29      	ldr	r2, [pc, #164]	; (80014c8 <HAL_InitTick+0xc4>)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001428:	4b28      	ldr	r3, [pc, #160]	; (80014cc <HAL_InitTick+0xc8>)
 800142a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800142e:	4a27      	ldr	r2, [pc, #156]	; (80014cc <HAL_InitTick+0xc8>)
 8001430:	f043 0320 	orr.w	r3, r3, #32
 8001434:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001438:	4b24      	ldr	r3, [pc, #144]	; (80014cc <HAL_InitTick+0xc8>)
 800143a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800143e:	f003 0320 	and.w	r3, r3, #32
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001446:	f107 0210 	add.w	r2, r7, #16
 800144a:	f107 0314 	add.w	r3, r7, #20
 800144e:	4611      	mov	r1, r2
 8001450:	4618      	mov	r0, r3
 8001452:	f001 ffe9 	bl	8003428 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001458:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800145a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800145c:	2b00      	cmp	r3, #0
 800145e:	d106      	bne.n	800146e <HAL_InitTick+0x6a>
 8001460:	e001      	b.n	8001466 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e02b      	b.n	80014be <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001466:	f001 ffb3 	bl	80033d0 <HAL_RCC_GetPCLK1Freq>
 800146a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800146c:	e004      	b.n	8001478 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800146e:	f001 ffaf 	bl	80033d0 <HAL_RCC_GetPCLK1Freq>
 8001472:	4603      	mov	r3, r0
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800147a:	4a15      	ldr	r2, [pc, #84]	; (80014d0 <HAL_InitTick+0xcc>)
 800147c:	fba2 2303 	umull	r2, r3, r2, r3
 8001480:	0c9b      	lsrs	r3, r3, #18
 8001482:	3b01      	subs	r3, #1
 8001484:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001486:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <HAL_InitTick+0xd0>)
 8001488:	4a13      	ldr	r2, [pc, #76]	; (80014d8 <HAL_InitTick+0xd4>)
 800148a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <HAL_InitTick+0xd0>)
 800148e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001492:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001494:	4a0f      	ldr	r2, [pc, #60]	; (80014d4 <HAL_InitTick+0xd0>)
 8001496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001498:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <HAL_InitTick+0xd0>)
 800149c:	2200      	movs	r2, #0
 800149e:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a0:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <HAL_InitTick+0xd0>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 80014a6:	480b      	ldr	r0, [pc, #44]	; (80014d4 <HAL_InitTick+0xd0>)
 80014a8:	f004 fb0d 	bl	8005ac6 <HAL_TIM_Base_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d104      	bne.n	80014bc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 80014b2:	4808      	ldr	r0, [pc, #32]	; (80014d4 <HAL_InitTick+0xd0>)
 80014b4:	f004 fb68 	bl	8005b88 <HAL_TIM_Base_Start_IT>
 80014b8:	4603      	mov	r3, r0
 80014ba:	e000      	b.n	80014be <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3740      	adds	r7, #64	; 0x40
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	24000008 	.word	0x24000008
 80014cc:	58024400 	.word	0x58024400
 80014d0:	431bde83 	.word	0x431bde83
 80014d4:	2400029c 	.word	0x2400029c
 80014d8:	40001400 	.word	0x40001400

080014dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <NMI_Handler+0x4>

080014e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e6:	e7fe      	b.n	80014e6 <HardFault_Handler+0x4>

080014e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014ec:	e7fe      	b.n	80014ec <MemManage_Handler+0x4>

080014ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014f2:	e7fe      	b.n	80014f2 <BusFault_Handler+0x4>

080014f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <UsageFault_Handler+0x4>

080014fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800150c:	4802      	ldr	r0, [pc, #8]	; (8001518 <TIM7_IRQHandler+0x10>)
 800150e:	f004 fc0a 	bl	8005d26 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	2400029c 	.word	0x2400029c

0800151c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	e00a      	b.n	8001544 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800152e:	f3af 8000 	nop.w
 8001532:	4601      	mov	r1, r0
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	1c5a      	adds	r2, r3, #1
 8001538:	60ba      	str	r2, [r7, #8]
 800153a:	b2ca      	uxtb	r2, r1
 800153c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	3301      	adds	r3, #1
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	697a      	ldr	r2, [r7, #20]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	429a      	cmp	r2, r3
 800154a:	dbf0      	blt.n	800152e <_read+0x12>
	}

return len;
 800154c:	687b      	ldr	r3, [r7, #4]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b086      	sub	sp, #24
 800155a:	af00      	add	r7, sp, #0
 800155c:	60f8      	str	r0, [r7, #12]
 800155e:	60b9      	str	r1, [r7, #8]
 8001560:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	e009      	b.n	800157c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	1c5a      	adds	r2, r3, #1
 800156c:	60ba      	str	r2, [r7, #8]
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fd89 	bl	8001088 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	3301      	adds	r3, #1
 800157a:	617b      	str	r3, [r7, #20]
 800157c:	697a      	ldr	r2, [r7, #20]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	429a      	cmp	r2, r3
 8001582:	dbf1      	blt.n	8001568 <_write+0x12>
	}
	return len;
 8001584:	687b      	ldr	r3, [r7, #4]
}
 8001586:	4618      	mov	r0, r3
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <_close>:

int _close(int file)
{
 800158e:	b480      	push	{r7}
 8001590:	b083      	sub	sp, #12
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
	return -1;
 8001596:	f04f 33ff 	mov.w	r3, #4294967295
}
 800159a:	4618      	mov	r0, r3
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
 80015ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015b6:	605a      	str	r2, [r3, #4]
	return 0;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <_isatty>:

int _isatty(int file)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
	return 1;
 80015ce:	2301      	movs	r3, #1
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
	return 0;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
	...

080015f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001600:	4a14      	ldr	r2, [pc, #80]	; (8001654 <_sbrk+0x5c>)
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <_sbrk+0x60>)
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800160c:	4b13      	ldr	r3, [pc, #76]	; (800165c <_sbrk+0x64>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d102      	bne.n	800161a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001614:	4b11      	ldr	r3, [pc, #68]	; (800165c <_sbrk+0x64>)
 8001616:	4a12      	ldr	r2, [pc, #72]	; (8001660 <_sbrk+0x68>)
 8001618:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <_sbrk+0x64>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4413      	add	r3, r2
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	429a      	cmp	r2, r3
 8001626:	d207      	bcs.n	8001638 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001628:	f009 f8e4 	bl	800a7f4 <__errno>
 800162c:	4603      	mov	r3, r0
 800162e:	220c      	movs	r2, #12
 8001630:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001632:	f04f 33ff 	mov.w	r3, #4294967295
 8001636:	e009      	b.n	800164c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <_sbrk+0x64>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800163e:	4b07      	ldr	r3, [pc, #28]	; (800165c <_sbrk+0x64>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	4a05      	ldr	r2, [pc, #20]	; (800165c <_sbrk+0x64>)
 8001648:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800164a:	68fb      	ldr	r3, [r7, #12]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	24080000 	.word	0x24080000
 8001658:	00000400 	.word	0x00000400
 800165c:	240002e8 	.word	0x240002e8
 8001660:	24004d10 	.word	0x24004d10

08001664 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001664:	f8df d034 	ldr.w	sp, [pc, #52]	; 800169c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001668:	f7ff f80c 	bl	8000684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800166c:	480c      	ldr	r0, [pc, #48]	; (80016a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800166e:	490d      	ldr	r1, [pc, #52]	; (80016a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001670:	4a0d      	ldr	r2, [pc, #52]	; (80016a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001674:	e002      	b.n	800167c <LoopCopyDataInit>

08001676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800167a:	3304      	adds	r3, #4

0800167c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800167c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800167e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001680:	d3f9      	bcc.n	8001676 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001682:	4a0a      	ldr	r2, [pc, #40]	; (80016ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001684:	4c0a      	ldr	r4, [pc, #40]	; (80016b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001688:	e001      	b.n	800168e <LoopFillZerobss>

0800168a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800168a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800168c:	3204      	adds	r2, #4

0800168e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800168e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001690:	d3fb      	bcc.n	800168a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001692:	f009 f9ab 	bl	800a9ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001696:	f7ff f88b 	bl	80007b0 <main>
  bx  lr
 800169a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800169c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80016a0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016a4:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80016a8:	0800ba2c 	.word	0x0800ba2c
  ldr r2, =_sbss
 80016ac:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 80016b0:	24004d10 	.word	0x24004d10

080016b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016b4:	e7fe      	b.n	80016b4 <ADC3_IRQHandler>
	...

080016b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016be:	2003      	movs	r0, #3
 80016c0:	f000 f90f 	bl	80018e2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016c4:	f001 fcda 	bl	800307c <HAL_RCC_GetSysClockFreq>
 80016c8:	4602      	mov	r2, r0
 80016ca:	4b15      	ldr	r3, [pc, #84]	; (8001720 <HAL_Init+0x68>)
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	0a1b      	lsrs	r3, r3, #8
 80016d0:	f003 030f 	and.w	r3, r3, #15
 80016d4:	4913      	ldr	r1, [pc, #76]	; (8001724 <HAL_Init+0x6c>)
 80016d6:	5ccb      	ldrb	r3, [r1, r3]
 80016d8:	f003 031f 	and.w	r3, r3, #31
 80016dc:	fa22 f303 	lsr.w	r3, r2, r3
 80016e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016e2:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <HAL_Init+0x68>)
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	4a0e      	ldr	r2, [pc, #56]	; (8001724 <HAL_Init+0x6c>)
 80016ec:	5cd3      	ldrb	r3, [r2, r3]
 80016ee:	f003 031f 	and.w	r3, r3, #31
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	fa22 f303 	lsr.w	r3, r2, r3
 80016f8:	4a0b      	ldr	r2, [pc, #44]	; (8001728 <HAL_Init+0x70>)
 80016fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016fc:	4a0b      	ldr	r2, [pc, #44]	; (800172c <HAL_Init+0x74>)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001702:	200f      	movs	r0, #15
 8001704:	f7ff fe7e 	bl	8001404 <HAL_InitTick>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e002      	b.n	8001718 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001712:	f7ff fccb 	bl	80010ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	58024400 	.word	0x58024400
 8001724:	0800b928 	.word	0x0800b928
 8001728:	24000004 	.word	0x24000004
 800172c:	24000000 	.word	0x24000000

08001730 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <HAL_IncTick+0x20>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	461a      	mov	r2, r3
 800173a:	4b06      	ldr	r3, [pc, #24]	; (8001754 <HAL_IncTick+0x24>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4413      	add	r3, r2
 8001740:	4a04      	ldr	r2, [pc, #16]	; (8001754 <HAL_IncTick+0x24>)
 8001742:	6013      	str	r3, [r2, #0]
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	2400000c 	.word	0x2400000c
 8001754:	240002ec 	.word	0x240002ec

08001758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  return uwTick;
 800175c:	4b03      	ldr	r3, [pc, #12]	; (800176c <HAL_GetTick+0x14>)
 800175e:	681b      	ldr	r3, [r3, #0]
}
 8001760:	4618      	mov	r0, r3
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	240002ec 	.word	0x240002ec

08001770 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001774:	4b03      	ldr	r3, [pc, #12]	; (8001784 <HAL_GetREVID+0x14>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	0c1b      	lsrs	r3, r3, #16
}
 800177a:	4618      	mov	r0, r3
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	5c001000 	.word	0x5c001000

08001788 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001798:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <__NVIC_SetPriorityGrouping+0x40>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a4:	4013      	ands	r3, r2
 80017a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <__NVIC_SetPriorityGrouping+0x44>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017b6:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <__NVIC_SetPriorityGrouping+0x40>)
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	60d3      	str	r3, [r2, #12]
}
 80017bc:	bf00      	nop
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000ed00 	.word	0xe000ed00
 80017cc:	05fa0000 	.word	0x05fa0000

080017d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d4:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <__NVIC_GetPriorityGrouping+0x18>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	0a1b      	lsrs	r3, r3, #8
 80017da:	f003 0307 	and.w	r3, r3, #7
}
 80017de:	4618      	mov	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	db0b      	blt.n	8001816 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017fe:	88fb      	ldrh	r3, [r7, #6]
 8001800:	f003 021f 	and.w	r2, r3, #31
 8001804:	4907      	ldr	r1, [pc, #28]	; (8001824 <__NVIC_EnableIRQ+0x38>)
 8001806:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800180a:	095b      	lsrs	r3, r3, #5
 800180c:	2001      	movs	r0, #1
 800180e:	fa00 f202 	lsl.w	r2, r0, r2
 8001812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000e100 	.word	0xe000e100

08001828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	6039      	str	r1, [r7, #0]
 8001832:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001834:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001838:	2b00      	cmp	r3, #0
 800183a:	db0a      	blt.n	8001852 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	b2da      	uxtb	r2, r3
 8001840:	490c      	ldr	r1, [pc, #48]	; (8001874 <__NVIC_SetPriority+0x4c>)
 8001842:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001846:	0112      	lsls	r2, r2, #4
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	440b      	add	r3, r1
 800184c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001850:	e00a      	b.n	8001868 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	b2da      	uxtb	r2, r3
 8001856:	4908      	ldr	r1, [pc, #32]	; (8001878 <__NVIC_SetPriority+0x50>)
 8001858:	88fb      	ldrh	r3, [r7, #6]
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	3b04      	subs	r3, #4
 8001860:	0112      	lsls	r2, r2, #4
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	440b      	add	r3, r1
 8001866:	761a      	strb	r2, [r3, #24]
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000e100 	.word	0xe000e100
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800187c:	b480      	push	{r7}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f1c3 0307 	rsb	r3, r3, #7
 8001896:	2b04      	cmp	r3, #4
 8001898:	bf28      	it	cs
 800189a:	2304      	movcs	r3, #4
 800189c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3304      	adds	r3, #4
 80018a2:	2b06      	cmp	r3, #6
 80018a4:	d902      	bls.n	80018ac <NVIC_EncodePriority+0x30>
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3b03      	subs	r3, #3
 80018aa:	e000      	b.n	80018ae <NVIC_EncodePriority+0x32>
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b0:	f04f 32ff 	mov.w	r2, #4294967295
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43da      	mvns	r2, r3
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	401a      	ands	r2, r3
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c4:	f04f 31ff 	mov.w	r1, #4294967295
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	fa01 f303 	lsl.w	r3, r1, r3
 80018ce:	43d9      	mvns	r1, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d4:	4313      	orrs	r3, r2
         );
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3724      	adds	r7, #36	; 0x24
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff ff4c 	bl	8001788 <__NVIC_SetPriorityGrouping>
}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
 8001904:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001906:	f7ff ff63 	bl	80017d0 <__NVIC_GetPriorityGrouping>
 800190a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	68b9      	ldr	r1, [r7, #8]
 8001910:	6978      	ldr	r0, [r7, #20]
 8001912:	f7ff ffb3 	bl	800187c <NVIC_EncodePriority>
 8001916:	4602      	mov	r2, r0
 8001918:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800191c:	4611      	mov	r1, r2
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff ff82 	bl	8001828 <__NVIC_SetPriority>
}
 8001924:	bf00      	nop
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001936:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff ff56 	bl	80017ec <__NVIC_EnableIRQ>
}
 8001940:	bf00      	nop
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b098      	sub	sp, #96	; 0x60
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8001950:	4a84      	ldr	r2, [pc, #528]	; (8001b64 <HAL_FDCAN_Init+0x21c>)
 8001952:	f107 030c 	add.w	r3, r7, #12
 8001956:	4611      	mov	r1, r2
 8001958:	224c      	movs	r2, #76	; 0x4c
 800195a:	4618      	mov	r0, r3
 800195c:	f009 f86d 	bl	800aa3a <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e1c6      	b.n	8001cf8 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a7e      	ldr	r2, [pc, #504]	; (8001b68 <HAL_FDCAN_Init+0x220>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d106      	bne.n	8001982 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800197c:	461a      	mov	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b00      	cmp	r3, #0
 800198c:	d106      	bne.n	800199c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff fba6 	bl	80010e8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	699a      	ldr	r2, [r3, #24]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 0210 	bic.w	r2, r2, #16
 80019aa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019ac:	f7ff fed4 	bl	8001758 <HAL_GetTick>
 80019b0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80019b2:	e014      	b.n	80019de <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80019b4:	f7ff fed0 	bl	8001758 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b0a      	cmp	r3, #10
 80019c0:	d90d      	bls.n	80019de <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80019c8:	f043 0201 	orr.w	r2, r3, #1
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2203      	movs	r2, #3
 80019d6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e18c      	b.n	8001cf8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	f003 0308 	and.w	r3, r3, #8
 80019e8:	2b08      	cmp	r3, #8
 80019ea:	d0e3      	beq.n	80019b4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	699a      	ldr	r2, [r3, #24]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 0201 	orr.w	r2, r2, #1
 80019fa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019fc:	f7ff feac 	bl	8001758 <HAL_GetTick>
 8001a00:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001a02:	e014      	b.n	8001a2e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001a04:	f7ff fea8 	bl	8001758 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b0a      	cmp	r3, #10
 8001a10:	d90d      	bls.n	8001a2e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001a18:	f043 0201 	orr.w	r2, r3, #1
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2203      	movs	r2, #3
 8001a26:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e164      	b.n	8001cf8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0e3      	beq.n	8001a04 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	699a      	ldr	r2, [r3, #24]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 0202 	orr.w	r2, r2, #2
 8001a4a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	7c1b      	ldrb	r3, [r3, #16]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d108      	bne.n	8001a66 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	699a      	ldr	r2, [r3, #24]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a62:	619a      	str	r2, [r3, #24]
 8001a64:	e007      	b.n	8001a76 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	699a      	ldr	r2, [r3, #24]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a74:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	7c5b      	ldrb	r3, [r3, #17]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d108      	bne.n	8001a90 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	699a      	ldr	r2, [r3, #24]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a8c:	619a      	str	r2, [r3, #24]
 8001a8e:	e007      	b.n	8001aa0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	699a      	ldr	r2, [r3, #24]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001a9e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	7c9b      	ldrb	r3, [r3, #18]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d108      	bne.n	8001aba <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	699a      	ldr	r2, [r3, #24]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ab6:	619a      	str	r2, [r3, #24]
 8001ab8:	e007      	b.n	8001aca <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	699a      	ldr	r2, [r3, #24]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001ac8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	430a      	orrs	r2, r1
 8001ade:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	699a      	ldr	r2, [r3, #24]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001aee:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	691a      	ldr	r2, [r3, #16]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 0210 	bic.w	r2, r2, #16
 8001afe:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d108      	bne.n	8001b1a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	699a      	ldr	r2, [r3, #24]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f042 0204 	orr.w	r2, r2, #4
 8001b16:	619a      	str	r2, [r3, #24]
 8001b18:	e030      	b.n	8001b7c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d02c      	beq.n	8001b7c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d020      	beq.n	8001b6c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	699a      	ldr	r2, [r3, #24]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b38:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	691a      	ldr	r2, [r3, #16]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f042 0210 	orr.w	r2, r2, #16
 8001b48:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	2b03      	cmp	r3, #3
 8001b50:	d114      	bne.n	8001b7c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	699a      	ldr	r2, [r3, #24]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f042 0220 	orr.w	r2, r2, #32
 8001b60:	619a      	str	r2, [r3, #24]
 8001b62:	e00b      	b.n	8001b7c <HAL_FDCAN_Init+0x234>
 8001b64:	0800b8c4 	.word	0x0800b8c4
 8001b68:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	699a      	ldr	r2, [r3, #24]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f042 0220 	orr.w	r2, r2, #32
 8001b7a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	3b01      	subs	r3, #1
 8001b82:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69db      	ldr	r3, [r3, #28]
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001b8c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a1b      	ldr	r3, [r3, #32]
 8001b92:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001b94:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	695b      	ldr	r3, [r3, #20]
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001ba4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001ba6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001bb0:	d115      	bne.n	8001bde <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001bc0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001bca:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001bda:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001bdc:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d00a      	beq.n	8001bfc <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c04:	4413      	add	r3, r2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d011      	beq.n	8001c2e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001c12:	f023 0107 	bic.w	r1, r3, #7
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	3360      	adds	r3, #96	; 0x60
 8001c1e:	443b      	add	r3, r7
 8001c20:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d011      	beq.n	8001c5a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001c3e:	f023 0107 	bic.w	r1, r3, #7
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	3360      	adds	r3, #96	; 0x60
 8001c4a:	443b      	add	r3, r7
 8001c4c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	430a      	orrs	r2, r1
 8001c56:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d012      	beq.n	8001c88 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001c6a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	3360      	adds	r3, #96	; 0x60
 8001c76:	443b      	add	r3, r7
 8001c78:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001c7c:	011a      	lsls	r2, r3, #4
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d012      	beq.n	8001cb6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001c98:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	3360      	adds	r3, #96	; 0x60
 8001ca4:	443b      	add	r3, r7
 8001ca6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001caa:	021a      	lsls	r2, r3, #8
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a11      	ldr	r2, [pc, #68]	; (8001d00 <HAL_FDCAN_Init+0x3b8>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d107      	bne.n	8001cd0 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	689a      	ldr	r2, [r3, #8]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f022 0203 	bic.w	r2, r2, #3
 8001cce:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 f80b 	bl	8001d04 <FDCAN_CalcultateRamBlockAddresses>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8001cf4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3760      	adds	r7, #96	; 0x60
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	4000a000 	.word	0x4000a000

08001d04 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d10:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001d1a:	4ba7      	ldr	r3, [pc, #668]	; (8001fb8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	0091      	lsls	r1, r2, #2
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	6812      	ldr	r2, [r2, #0]
 8001d26:	430b      	orrs	r3, r1
 8001d28:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d34:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d3c:	041a      	lsls	r2, r3, #16
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	430a      	orrs	r2, r1
 8001d44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d4c:	68ba      	ldr	r2, [r7, #8]
 8001d4e:	4413      	add	r3, r2
 8001d50:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001d5a:	4b97      	ldr	r3, [pc, #604]	; (8001fb8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	0091      	lsls	r1, r2, #2
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6812      	ldr	r2, [r2, #0]
 8001d66:	430b      	orrs	r3, r1
 8001d68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d74:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d7c:	041a      	lsls	r2, r3, #16
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	4413      	add	r3, r2
 8001d92:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001d9c:	4b86      	ldr	r3, [pc, #536]	; (8001fb8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d9e:	4013      	ands	r3, r2
 8001da0:	68ba      	ldr	r2, [r7, #8]
 8001da2:	0091      	lsls	r1, r2, #2
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6812      	ldr	r2, [r2, #0]
 8001da8:	430b      	orrs	r3, r1
 8001daa:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001db6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	041a      	lsls	r2, r3, #16
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001dd2:	fb02 f303 	mul.w	r3, r2, r3
 8001dd6:	68ba      	ldr	r2, [r7, #8]
 8001dd8:	4413      	add	r3, r2
 8001dda:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001de4:	4b74      	ldr	r3, [pc, #464]	; (8001fb8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001de6:	4013      	ands	r3, r2
 8001de8:	68ba      	ldr	r2, [r7, #8]
 8001dea:	0091      	lsls	r1, r2, #2
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	6812      	ldr	r2, [r2, #0]
 8001df0:	430b      	orrs	r3, r1
 8001df2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001dfe:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e06:	041a      	lsls	r2, r3, #16
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001e1a:	fb02 f303 	mul.w	r3, r2, r3
 8001e1e:	68ba      	ldr	r2, [r7, #8]
 8001e20:	4413      	add	r3, r2
 8001e22:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001e2c:	4b62      	ldr	r3, [pc, #392]	; (8001fb8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e2e:	4013      	ands	r3, r2
 8001e30:	68ba      	ldr	r2, [r7, #8]
 8001e32:	0091      	lsls	r1, r2, #2
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	6812      	ldr	r2, [r2, #0]
 8001e38:	430b      	orrs	r3, r1
 8001e3a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001e46:	fb02 f303 	mul.w	r3, r2, r3
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001e58:	4b57      	ldr	r3, [pc, #348]	; (8001fb8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	68ba      	ldr	r2, [r7, #8]
 8001e5e:	0091      	lsls	r1, r2, #2
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	6812      	ldr	r2, [r2, #0]
 8001e64:	430b      	orrs	r3, r1
 8001e66:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e72:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7a:	041a      	lsls	r2, r3, #16
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	68ba      	ldr	r2, [r7, #8]
 8001e8e:	4413      	add	r3, r2
 8001e90:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001e9a:	4b47      	ldr	r3, [pc, #284]	; (8001fb8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	68ba      	ldr	r2, [r7, #8]
 8001ea0:	0091      	lsls	r1, r2, #2
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	6812      	ldr	r2, [r2, #0]
 8001ea6:	430b      	orrs	r3, r1
 8001ea8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001eb4:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ebc:	041a      	lsls	r2, r3, #16
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001ed0:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ed8:	061a      	lsls	r2, r3, #24
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ee8:	4b34      	ldr	r3, [pc, #208]	; (8001fbc <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8001eea:	4413      	add	r3, r2
 8001eec:	009a      	lsls	r2, r3, #2
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	441a      	add	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	441a      	add	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8001f1e:	fb01 f303 	mul.w	r3, r1, r3
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	441a      	add	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8001f36:	fb01 f303 	mul.w	r3, r1, r3
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	441a      	add	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8001f4e:	fb01 f303 	mul.w	r3, r1, r3
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	441a      	add	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	441a      	add	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001f7e:	fb01 f303 	mul.w	r3, r1, r3
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	441a      	add	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001f9a:	fb01 f303 	mul.w	r3, r1, r3
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	441a      	add	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fae:	4a04      	ldr	r2, [pc, #16]	; (8001fc0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d915      	bls.n	8001fe0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8001fb4:	e006      	b.n	8001fc4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8001fb6:	bf00      	nop
 8001fb8:	ffff0003 	.word	0xffff0003
 8001fbc:	10002b00 	.word	0x10002b00
 8001fc0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001fca:	f043 0220 	orr.w	r2, r3, #32
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2203      	movs	r2, #3
 8001fd8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e010      	b.n	8002002 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	e005      	b.n	8001ff4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d3f3      	bcc.n	8001fe8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop

08002010 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002010:	b480      	push	{r7}
 8002012:	b089      	sub	sp, #36	; 0x24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800201a:	2300      	movs	r3, #0
 800201c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800201e:	4b89      	ldr	r3, [pc, #548]	; (8002244 <HAL_GPIO_Init+0x234>)
 8002020:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002022:	e194      	b.n	800234e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	2101      	movs	r1, #1
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	fa01 f303 	lsl.w	r3, r1, r3
 8002030:	4013      	ands	r3, r2
 8002032:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 8186 	beq.w	8002348 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f003 0303 	and.w	r3, r3, #3
 8002044:	2b01      	cmp	r3, #1
 8002046:	d005      	beq.n	8002054 <HAL_GPIO_Init+0x44>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 0303 	and.w	r3, r3, #3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d130      	bne.n	80020b6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	2203      	movs	r2, #3
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	43db      	mvns	r3, r3
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4013      	ands	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	68da      	ldr	r2, [r3, #12]
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800208a:	2201      	movs	r2, #1
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4013      	ands	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	091b      	lsrs	r3, r3, #4
 80020a0:	f003 0201 	and.w	r2, r3, #1
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f003 0303 	and.w	r3, r3, #3
 80020be:	2b03      	cmp	r3, #3
 80020c0:	d017      	beq.n	80020f2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	2203      	movs	r2, #3
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43db      	mvns	r3, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4013      	ands	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 0303 	and.w	r3, r3, #3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d123      	bne.n	8002146 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	08da      	lsrs	r2, r3, #3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3208      	adds	r2, #8
 8002106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800210a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	220f      	movs	r2, #15
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	43db      	mvns	r3, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4013      	ands	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	691a      	ldr	r2, [r3, #16]
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4313      	orrs	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	08da      	lsrs	r2, r3, #3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3208      	adds	r2, #8
 8002140:	69b9      	ldr	r1, [r7, #24]
 8002142:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	2203      	movs	r2, #3
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43db      	mvns	r3, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4013      	ands	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f003 0203 	and.w	r2, r3, #3
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4313      	orrs	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002182:	2b00      	cmp	r3, #0
 8002184:	f000 80e0 	beq.w	8002348 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002188:	4b2f      	ldr	r3, [pc, #188]	; (8002248 <HAL_GPIO_Init+0x238>)
 800218a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800218e:	4a2e      	ldr	r2, [pc, #184]	; (8002248 <HAL_GPIO_Init+0x238>)
 8002190:	f043 0302 	orr.w	r3, r3, #2
 8002194:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002198:	4b2b      	ldr	r3, [pc, #172]	; (8002248 <HAL_GPIO_Init+0x238>)
 800219a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021a6:	4a29      	ldr	r2, [pc, #164]	; (800224c <HAL_GPIO_Init+0x23c>)
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	089b      	lsrs	r3, r3, #2
 80021ac:	3302      	adds	r3, #2
 80021ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	f003 0303 	and.w	r3, r3, #3
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	220f      	movs	r2, #15
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43db      	mvns	r3, r3
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	4013      	ands	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a20      	ldr	r2, [pc, #128]	; (8002250 <HAL_GPIO_Init+0x240>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d052      	beq.n	8002278 <HAL_GPIO_Init+0x268>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a1f      	ldr	r2, [pc, #124]	; (8002254 <HAL_GPIO_Init+0x244>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d031      	beq.n	800223e <HAL_GPIO_Init+0x22e>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a1e      	ldr	r2, [pc, #120]	; (8002258 <HAL_GPIO_Init+0x248>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d02b      	beq.n	800223a <HAL_GPIO_Init+0x22a>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a1d      	ldr	r2, [pc, #116]	; (800225c <HAL_GPIO_Init+0x24c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d025      	beq.n	8002236 <HAL_GPIO_Init+0x226>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a1c      	ldr	r2, [pc, #112]	; (8002260 <HAL_GPIO_Init+0x250>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d01f      	beq.n	8002232 <HAL_GPIO_Init+0x222>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a1b      	ldr	r2, [pc, #108]	; (8002264 <HAL_GPIO_Init+0x254>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d019      	beq.n	800222e <HAL_GPIO_Init+0x21e>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a1a      	ldr	r2, [pc, #104]	; (8002268 <HAL_GPIO_Init+0x258>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d013      	beq.n	800222a <HAL_GPIO_Init+0x21a>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a19      	ldr	r2, [pc, #100]	; (800226c <HAL_GPIO_Init+0x25c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d00d      	beq.n	8002226 <HAL_GPIO_Init+0x216>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a18      	ldr	r2, [pc, #96]	; (8002270 <HAL_GPIO_Init+0x260>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d007      	beq.n	8002222 <HAL_GPIO_Init+0x212>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a17      	ldr	r2, [pc, #92]	; (8002274 <HAL_GPIO_Init+0x264>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d101      	bne.n	800221e <HAL_GPIO_Init+0x20e>
 800221a:	2309      	movs	r3, #9
 800221c:	e02d      	b.n	800227a <HAL_GPIO_Init+0x26a>
 800221e:	230a      	movs	r3, #10
 8002220:	e02b      	b.n	800227a <HAL_GPIO_Init+0x26a>
 8002222:	2308      	movs	r3, #8
 8002224:	e029      	b.n	800227a <HAL_GPIO_Init+0x26a>
 8002226:	2307      	movs	r3, #7
 8002228:	e027      	b.n	800227a <HAL_GPIO_Init+0x26a>
 800222a:	2306      	movs	r3, #6
 800222c:	e025      	b.n	800227a <HAL_GPIO_Init+0x26a>
 800222e:	2305      	movs	r3, #5
 8002230:	e023      	b.n	800227a <HAL_GPIO_Init+0x26a>
 8002232:	2304      	movs	r3, #4
 8002234:	e021      	b.n	800227a <HAL_GPIO_Init+0x26a>
 8002236:	2303      	movs	r3, #3
 8002238:	e01f      	b.n	800227a <HAL_GPIO_Init+0x26a>
 800223a:	2302      	movs	r3, #2
 800223c:	e01d      	b.n	800227a <HAL_GPIO_Init+0x26a>
 800223e:	2301      	movs	r3, #1
 8002240:	e01b      	b.n	800227a <HAL_GPIO_Init+0x26a>
 8002242:	bf00      	nop
 8002244:	58000080 	.word	0x58000080
 8002248:	58024400 	.word	0x58024400
 800224c:	58000400 	.word	0x58000400
 8002250:	58020000 	.word	0x58020000
 8002254:	58020400 	.word	0x58020400
 8002258:	58020800 	.word	0x58020800
 800225c:	58020c00 	.word	0x58020c00
 8002260:	58021000 	.word	0x58021000
 8002264:	58021400 	.word	0x58021400
 8002268:	58021800 	.word	0x58021800
 800226c:	58021c00 	.word	0x58021c00
 8002270:	58022000 	.word	0x58022000
 8002274:	58022400 	.word	0x58022400
 8002278:	2300      	movs	r3, #0
 800227a:	69fa      	ldr	r2, [r7, #28]
 800227c:	f002 0203 	and.w	r2, r2, #3
 8002280:	0092      	lsls	r2, r2, #2
 8002282:	4093      	lsls	r3, r2
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4313      	orrs	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800228a:	4938      	ldr	r1, [pc, #224]	; (800236c <HAL_GPIO_Init+0x35c>)
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	089b      	lsrs	r3, r3, #2
 8002290:	3302      	adds	r3, #2
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	43db      	mvns	r3, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4013      	ands	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80022be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80022c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	43db      	mvns	r3, r3
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4013      	ands	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d003      	beq.n	80022ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80022ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	43db      	mvns	r3, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4013      	ands	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d003      	beq.n	8002318 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	4313      	orrs	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	43db      	mvns	r3, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4013      	ands	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4313      	orrs	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	3301      	adds	r3, #1
 800234c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	fa22 f303 	lsr.w	r3, r2, r3
 8002358:	2b00      	cmp	r3, #0
 800235a:	f47f ae63 	bne.w	8002024 <HAL_GPIO_Init+0x14>
  }
}
 800235e:	bf00      	nop
 8002360:	bf00      	nop
 8002362:	3724      	adds	r7, #36	; 0x24
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	58000400 	.word	0x58000400

08002370 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	460b      	mov	r3, r1
 800237a:	807b      	strh	r3, [r7, #2]
 800237c:	4613      	mov	r3, r2
 800237e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002380:	787b      	ldrb	r3, [r7, #1]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002386:	887a      	ldrh	r2, [r7, #2]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800238c:	e003      	b.n	8002396 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800238e:	887b      	ldrh	r3, [r7, #2]
 8002390:	041a      	lsls	r2, r3, #16
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	619a      	str	r2, [r3, #24]
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
	...

080023a4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80023ac:	4a08      	ldr	r2, [pc, #32]	; (80023d0 <HAL_HSEM_FastTake+0x2c>)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	3320      	adds	r3, #32
 80023b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b6:	4a07      	ldr	r2, [pc, #28]	; (80023d4 <HAL_HSEM_FastTake+0x30>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d101      	bne.n	80023c0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80023bc:	2300      	movs	r3, #0
 80023be:	e000      	b.n	80023c2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	58026400 	.word	0x58026400
 80023d4:	80000300 	.word	0x80000300

080023d8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80023e2:	4906      	ldr	r1, [pc, #24]	; (80023fc <HAL_HSEM_Release+0x24>)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	58026400 	.word	0x58026400

08002400 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002408:	4b29      	ldr	r3, [pc, #164]	; (80024b0 <HAL_PWREx_ConfigSupply+0xb0>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	2b06      	cmp	r3, #6
 8002412:	d00a      	beq.n	800242a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002414:	4b26      	ldr	r3, [pc, #152]	; (80024b0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	429a      	cmp	r2, r3
 8002420:	d001      	beq.n	8002426 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e040      	b.n	80024a8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002426:	2300      	movs	r3, #0
 8002428:	e03e      	b.n	80024a8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800242a:	4b21      	ldr	r3, [pc, #132]	; (80024b0 <HAL_PWREx_ConfigSupply+0xb0>)
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002432:	491f      	ldr	r1, [pc, #124]	; (80024b0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4313      	orrs	r3, r2
 8002438:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800243a:	f7ff f98d 	bl	8001758 <HAL_GetTick>
 800243e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002440:	e009      	b.n	8002456 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002442:	f7ff f989 	bl	8001758 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002450:	d901      	bls.n	8002456 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e028      	b.n	80024a8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002456:	4b16      	ldr	r3, [pc, #88]	; (80024b0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800245e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002462:	d1ee      	bne.n	8002442 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b1e      	cmp	r3, #30
 8002468:	d008      	beq.n	800247c <HAL_PWREx_ConfigSupply+0x7c>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2b2e      	cmp	r3, #46	; 0x2e
 800246e:	d005      	beq.n	800247c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b1d      	cmp	r3, #29
 8002474:	d002      	beq.n	800247c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b2d      	cmp	r3, #45	; 0x2d
 800247a:	d114      	bne.n	80024a6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800247c:	f7ff f96c 	bl	8001758 <HAL_GetTick>
 8002480:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002482:	e009      	b.n	8002498 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002484:	f7ff f968 	bl	8001758 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002492:	d901      	bls.n	8002498 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e007      	b.n	80024a8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002498:	4b05      	ldr	r3, [pc, #20]	; (80024b0 <HAL_PWREx_ConfigSupply+0xb0>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a4:	d1ee      	bne.n	8002484 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	58024800 	.word	0x58024800

080024b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08c      	sub	sp, #48	; 0x30
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d102      	bne.n	80024c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	f000 bc1d 	b.w	8002d02 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 8087 	beq.w	80025e4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024d6:	4b99      	ldr	r3, [pc, #612]	; (800273c <HAL_RCC_OscConfig+0x288>)
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024de:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024e0:	4b96      	ldr	r3, [pc, #600]	; (800273c <HAL_RCC_OscConfig+0x288>)
 80024e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80024e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e8:	2b10      	cmp	r3, #16
 80024ea:	d007      	beq.n	80024fc <HAL_RCC_OscConfig+0x48>
 80024ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ee:	2b18      	cmp	r3, #24
 80024f0:	d110      	bne.n	8002514 <HAL_RCC_OscConfig+0x60>
 80024f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f4:	f003 0303 	and.w	r3, r3, #3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d10b      	bne.n	8002514 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024fc:	4b8f      	ldr	r3, [pc, #572]	; (800273c <HAL_RCC_OscConfig+0x288>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d06c      	beq.n	80025e2 <HAL_RCC_OscConfig+0x12e>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d168      	bne.n	80025e2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e3f6      	b.n	8002d02 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800251c:	d106      	bne.n	800252c <HAL_RCC_OscConfig+0x78>
 800251e:	4b87      	ldr	r3, [pc, #540]	; (800273c <HAL_RCC_OscConfig+0x288>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a86      	ldr	r2, [pc, #536]	; (800273c <HAL_RCC_OscConfig+0x288>)
 8002524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	e02e      	b.n	800258a <HAL_RCC_OscConfig+0xd6>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10c      	bne.n	800254e <HAL_RCC_OscConfig+0x9a>
 8002534:	4b81      	ldr	r3, [pc, #516]	; (800273c <HAL_RCC_OscConfig+0x288>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a80      	ldr	r2, [pc, #512]	; (800273c <HAL_RCC_OscConfig+0x288>)
 800253a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800253e:	6013      	str	r3, [r2, #0]
 8002540:	4b7e      	ldr	r3, [pc, #504]	; (800273c <HAL_RCC_OscConfig+0x288>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a7d      	ldr	r2, [pc, #500]	; (800273c <HAL_RCC_OscConfig+0x288>)
 8002546:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800254a:	6013      	str	r3, [r2, #0]
 800254c:	e01d      	b.n	800258a <HAL_RCC_OscConfig+0xd6>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002556:	d10c      	bne.n	8002572 <HAL_RCC_OscConfig+0xbe>
 8002558:	4b78      	ldr	r3, [pc, #480]	; (800273c <HAL_RCC_OscConfig+0x288>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a77      	ldr	r2, [pc, #476]	; (800273c <HAL_RCC_OscConfig+0x288>)
 800255e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002562:	6013      	str	r3, [r2, #0]
 8002564:	4b75      	ldr	r3, [pc, #468]	; (800273c <HAL_RCC_OscConfig+0x288>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a74      	ldr	r2, [pc, #464]	; (800273c <HAL_RCC_OscConfig+0x288>)
 800256a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800256e:	6013      	str	r3, [r2, #0]
 8002570:	e00b      	b.n	800258a <HAL_RCC_OscConfig+0xd6>
 8002572:	4b72      	ldr	r3, [pc, #456]	; (800273c <HAL_RCC_OscConfig+0x288>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a71      	ldr	r2, [pc, #452]	; (800273c <HAL_RCC_OscConfig+0x288>)
 8002578:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	4b6f      	ldr	r3, [pc, #444]	; (800273c <HAL_RCC_OscConfig+0x288>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a6e      	ldr	r2, [pc, #440]	; (800273c <HAL_RCC_OscConfig+0x288>)
 8002584:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002588:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d013      	beq.n	80025ba <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002592:	f7ff f8e1 	bl	8001758 <HAL_GetTick>
 8002596:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800259a:	f7ff f8dd 	bl	8001758 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b64      	cmp	r3, #100	; 0x64
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e3aa      	b.n	8002d02 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025ac:	4b63      	ldr	r3, [pc, #396]	; (800273c <HAL_RCC_OscConfig+0x288>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0f0      	beq.n	800259a <HAL_RCC_OscConfig+0xe6>
 80025b8:	e014      	b.n	80025e4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ba:	f7ff f8cd 	bl	8001758 <HAL_GetTick>
 80025be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025c2:	f7ff f8c9 	bl	8001758 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b64      	cmp	r3, #100	; 0x64
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e396      	b.n	8002d02 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025d4:	4b59      	ldr	r3, [pc, #356]	; (800273c <HAL_RCC_OscConfig+0x288>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1f0      	bne.n	80025c2 <HAL_RCC_OscConfig+0x10e>
 80025e0:	e000      	b.n	80025e4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 80cb 	beq.w	8002788 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025f2:	4b52      	ldr	r3, [pc, #328]	; (800273c <HAL_RCC_OscConfig+0x288>)
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025fa:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025fc:	4b4f      	ldr	r3, [pc, #316]	; (800273c <HAL_RCC_OscConfig+0x288>)
 80025fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002600:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002602:	6a3b      	ldr	r3, [r7, #32]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d007      	beq.n	8002618 <HAL_RCC_OscConfig+0x164>
 8002608:	6a3b      	ldr	r3, [r7, #32]
 800260a:	2b18      	cmp	r3, #24
 800260c:	d156      	bne.n	80026bc <HAL_RCC_OscConfig+0x208>
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	f003 0303 	and.w	r3, r3, #3
 8002614:	2b00      	cmp	r3, #0
 8002616:	d151      	bne.n	80026bc <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002618:	4b48      	ldr	r3, [pc, #288]	; (800273c <HAL_RCC_OscConfig+0x288>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	2b00      	cmp	r3, #0
 8002622:	d005      	beq.n	8002630 <HAL_RCC_OscConfig+0x17c>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e368      	b.n	8002d02 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002630:	4b42      	ldr	r3, [pc, #264]	; (800273c <HAL_RCC_OscConfig+0x288>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f023 0219 	bic.w	r2, r3, #25
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	493f      	ldr	r1, [pc, #252]	; (800273c <HAL_RCC_OscConfig+0x288>)
 800263e:	4313      	orrs	r3, r2
 8002640:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002642:	f7ff f889 	bl	8001758 <HAL_GetTick>
 8002646:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800264a:	f7ff f885 	bl	8001758 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e352      	b.n	8002d02 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800265c:	4b37      	ldr	r3, [pc, #220]	; (800273c <HAL_RCC_OscConfig+0x288>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0f0      	beq.n	800264a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002668:	f7ff f882 	bl	8001770 <HAL_GetREVID>
 800266c:	4603      	mov	r3, r0
 800266e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002672:	4293      	cmp	r3, r2
 8002674:	d817      	bhi.n	80026a6 <HAL_RCC_OscConfig+0x1f2>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	2b40      	cmp	r3, #64	; 0x40
 800267c:	d108      	bne.n	8002690 <HAL_RCC_OscConfig+0x1dc>
 800267e:	4b2f      	ldr	r3, [pc, #188]	; (800273c <HAL_RCC_OscConfig+0x288>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002686:	4a2d      	ldr	r2, [pc, #180]	; (800273c <HAL_RCC_OscConfig+0x288>)
 8002688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800268c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800268e:	e07b      	b.n	8002788 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002690:	4b2a      	ldr	r3, [pc, #168]	; (800273c <HAL_RCC_OscConfig+0x288>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	031b      	lsls	r3, r3, #12
 800269e:	4927      	ldr	r1, [pc, #156]	; (800273c <HAL_RCC_OscConfig+0x288>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026a4:	e070      	b.n	8002788 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a6:	4b25      	ldr	r3, [pc, #148]	; (800273c <HAL_RCC_OscConfig+0x288>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	061b      	lsls	r3, r3, #24
 80026b4:	4921      	ldr	r1, [pc, #132]	; (800273c <HAL_RCC_OscConfig+0x288>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026ba:	e065      	b.n	8002788 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d048      	beq.n	8002756 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026c4:	4b1d      	ldr	r3, [pc, #116]	; (800273c <HAL_RCC_OscConfig+0x288>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f023 0219 	bic.w	r2, r3, #25
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	491a      	ldr	r1, [pc, #104]	; (800273c <HAL_RCC_OscConfig+0x288>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d6:	f7ff f83f 	bl	8001758 <HAL_GetTick>
 80026da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026de:	f7ff f83b 	bl	8001758 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e308      	b.n	8002d02 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026f0:	4b12      	ldr	r3, [pc, #72]	; (800273c <HAL_RCC_OscConfig+0x288>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0f0      	beq.n	80026de <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026fc:	f7ff f838 	bl	8001770 <HAL_GetREVID>
 8002700:	4603      	mov	r3, r0
 8002702:	f241 0203 	movw	r2, #4099	; 0x1003
 8002706:	4293      	cmp	r3, r2
 8002708:	d81a      	bhi.n	8002740 <HAL_RCC_OscConfig+0x28c>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	2b40      	cmp	r3, #64	; 0x40
 8002710:	d108      	bne.n	8002724 <HAL_RCC_OscConfig+0x270>
 8002712:	4b0a      	ldr	r3, [pc, #40]	; (800273c <HAL_RCC_OscConfig+0x288>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800271a:	4a08      	ldr	r2, [pc, #32]	; (800273c <HAL_RCC_OscConfig+0x288>)
 800271c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002720:	6053      	str	r3, [r2, #4]
 8002722:	e031      	b.n	8002788 <HAL_RCC_OscConfig+0x2d4>
 8002724:	4b05      	ldr	r3, [pc, #20]	; (800273c <HAL_RCC_OscConfig+0x288>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	031b      	lsls	r3, r3, #12
 8002732:	4902      	ldr	r1, [pc, #8]	; (800273c <HAL_RCC_OscConfig+0x288>)
 8002734:	4313      	orrs	r3, r2
 8002736:	604b      	str	r3, [r1, #4]
 8002738:	e026      	b.n	8002788 <HAL_RCC_OscConfig+0x2d4>
 800273a:	bf00      	nop
 800273c:	58024400 	.word	0x58024400
 8002740:	4b9a      	ldr	r3, [pc, #616]	; (80029ac <HAL_RCC_OscConfig+0x4f8>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	061b      	lsls	r3, r3, #24
 800274e:	4997      	ldr	r1, [pc, #604]	; (80029ac <HAL_RCC_OscConfig+0x4f8>)
 8002750:	4313      	orrs	r3, r2
 8002752:	604b      	str	r3, [r1, #4]
 8002754:	e018      	b.n	8002788 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002756:	4b95      	ldr	r3, [pc, #596]	; (80029ac <HAL_RCC_OscConfig+0x4f8>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a94      	ldr	r2, [pc, #592]	; (80029ac <HAL_RCC_OscConfig+0x4f8>)
 800275c:	f023 0301 	bic.w	r3, r3, #1
 8002760:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002762:	f7fe fff9 	bl	8001758 <HAL_GetTick>
 8002766:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800276a:	f7fe fff5 	bl	8001758 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e2c2      	b.n	8002d02 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800277c:	4b8b      	ldr	r3, [pc, #556]	; (80029ac <HAL_RCC_OscConfig+0x4f8>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1f0      	bne.n	800276a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0310 	and.w	r3, r3, #16
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 80a9 	beq.w	80028e8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002796:	4b85      	ldr	r3, [pc, #532]	; (80029ac <HAL_RCC_OscConfig+0x4f8>)
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800279e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027a0:	4b82      	ldr	r3, [pc, #520]	; (80029ac <HAL_RCC_OscConfig+0x4f8>)
 80027a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	2b08      	cmp	r3, #8
 80027aa:	d007      	beq.n	80027bc <HAL_RCC_OscConfig+0x308>
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	2b18      	cmp	r3, #24
 80027b0:	d13a      	bne.n	8002828 <HAL_RCC_OscConfig+0x374>
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f003 0303 	and.w	r3, r3, #3
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d135      	bne.n	8002828 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027bc:	4b7b      	ldr	r3, [pc, #492]	; (80029ac <HAL_RCC_OscConfig+0x4f8>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d005      	beq.n	80027d4 <HAL_RCC_OscConfig+0x320>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	2b80      	cmp	r3, #128	; 0x80
 80027ce:	d001      	beq.n	80027d4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e296      	b.n	8002d02 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027d4:	f7fe ffcc 	bl	8001770 <HAL_GetREVID>
 80027d8:	4603      	mov	r3, r0
 80027da:	f241 0203 	movw	r2, #4099	; 0x1003
 80027de:	4293      	cmp	r3, r2
 80027e0:	d817      	bhi.n	8002812 <HAL_RCC_OscConfig+0x35e>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	2b20      	cmp	r3, #32
 80027e8:	d108      	bne.n	80027fc <HAL_RCC_OscConfig+0x348>
 80027ea:	4b70      	ldr	r3, [pc, #448]	; (80029ac <HAL_RCC_OscConfig+0x4f8>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80027f2:	4a6e      	ldr	r2, [pc, #440]	; (80029ac <HAL_RCC_OscConfig+0x4f8>)
 80027f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80027f8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027fa:	e075      	b.n	80028e8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027fc:	4b6b      	ldr	r3, [pc, #428]	; (80029ac <HAL_RCC_OscConfig+0x4f8>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	069b      	lsls	r3, r3, #26
 800280a:	4968      	ldr	r1, [pc, #416]	; (80029ac <HAL_RCC_OscConfig+0x4f8>)
 800280c:	4313      	orrs	r3, r2
 800280e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002810:	e06a      	b.n	80028e8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002812:	4b66      	ldr	r3, [pc, #408]	; (80029ac <HAL_RCC_OscConfig+0x4f8>)
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	061b      	lsls	r3, r3, #24
 8002820:	4962      	ldr	r1, [pc, #392]	; (80029ac <HAL_RCC_OscConfig+0x4f8>)
 8002822:	4313      	orrs	r3, r2
 8002824:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002826:	e05f      	b.n	80028e8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	69db      	ldr	r3, [r3, #28]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d042      	beq.n	80028b6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002830:	4b5e      	ldr	r3, [pc, #376]	; (80029ac <HAL_RCC_OscConfig+0x4f8>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a5d      	ldr	r2, [pc, #372]	; (80029ac <HAL_RCC_OscConfig+0x4f8>)
 8002836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800283a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283c:	f7fe ff8c 	bl	8001758 <HAL_GetTick>
 8002840:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002844:	f7fe ff88 	bl	8001758 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e255      	b.n	8002d02 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002856:	4b55      	ldr	r3, [pc, #340]	; (80029ac <HAL_RCC_OscConfig+0x4f8>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285e:	2b00      	cmp	r3, #0
 8002860:	d0f0      	beq.n	8002844 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002862:	f7fe ff85 	bl	8001770 <HAL_GetREVID>
 8002866:	4603      	mov	r3, r0
 8002868:	f241 0203 	movw	r2, #4099	; 0x1003
 800286c:	4293      	cmp	r3, r2
 800286e:	d817      	bhi.n	80028a0 <HAL_RCC_OscConfig+0x3ec>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	2b20      	cmp	r3, #32
 8002876:	d108      	bne.n	800288a <HAL_RCC_OscConfig+0x3d6>
 8002878:	4b4c      	ldr	r3, [pc, #304]	; (80029ac <HAL_RCC_OscConfig+0x4f8>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002880:	4a4a      	ldr	r2, [pc, #296]	; (80029ac <HAL_RCC_OscConfig+0x4f8>)
 8002882:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002886:	6053      	str	r3, [r2, #4]
 8002888:	e02e      	b.n	80028e8 <HAL_RCC_OscConfig+0x434>
 800288a:	4b48      	ldr	r3, [pc, #288]	; (80029ac <HAL_RCC_OscConfig+0x4f8>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	069b      	lsls	r3, r3, #26
 8002898:	4944      	ldr	r1, [pc, #272]	; (80029ac <HAL_RCC_OscConfig+0x4f8>)
 800289a:	4313      	orrs	r3, r2
 800289c:	604b      	str	r3, [r1, #4]
 800289e:	e023      	b.n	80028e8 <HAL_RCC_OscConfig+0x434>
 80028a0:	4b42      	ldr	r3, [pc, #264]	; (80029ac <HAL_RCC_OscConfig+0x4f8>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	061b      	lsls	r3, r3, #24
 80028ae:	493f      	ldr	r1, [pc, #252]	; (80029ac <HAL_RCC_OscConfig+0x4f8>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	60cb      	str	r3, [r1, #12]
 80028b4:	e018      	b.n	80028e8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80028b6:	4b3d      	ldr	r3, [pc, #244]	; (80029ac <HAL_RCC_OscConfig+0x4f8>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a3c      	ldr	r2, [pc, #240]	; (80029ac <HAL_RCC_OscConfig+0x4f8>)
 80028bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c2:	f7fe ff49 	bl	8001758 <HAL_GetTick>
 80028c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80028c8:	e008      	b.n	80028dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80028ca:	f7fe ff45 	bl	8001758 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e212      	b.n	8002d02 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80028dc:	4b33      	ldr	r3, [pc, #204]	; (80029ac <HAL_RCC_OscConfig+0x4f8>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1f0      	bne.n	80028ca <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0308 	and.w	r3, r3, #8
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d036      	beq.n	8002962 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d019      	beq.n	8002930 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028fc:	4b2b      	ldr	r3, [pc, #172]	; (80029ac <HAL_RCC_OscConfig+0x4f8>)
 80028fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002900:	4a2a      	ldr	r2, [pc, #168]	; (80029ac <HAL_RCC_OscConfig+0x4f8>)
 8002902:	f043 0301 	orr.w	r3, r3, #1
 8002906:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002908:	f7fe ff26 	bl	8001758 <HAL_GetTick>
 800290c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002910:	f7fe ff22 	bl	8001758 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e1ef      	b.n	8002d02 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002922:	4b22      	ldr	r3, [pc, #136]	; (80029ac <HAL_RCC_OscConfig+0x4f8>)
 8002924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0f0      	beq.n	8002910 <HAL_RCC_OscConfig+0x45c>
 800292e:	e018      	b.n	8002962 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002930:	4b1e      	ldr	r3, [pc, #120]	; (80029ac <HAL_RCC_OscConfig+0x4f8>)
 8002932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002934:	4a1d      	ldr	r2, [pc, #116]	; (80029ac <HAL_RCC_OscConfig+0x4f8>)
 8002936:	f023 0301 	bic.w	r3, r3, #1
 800293a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800293c:	f7fe ff0c 	bl	8001758 <HAL_GetTick>
 8002940:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002944:	f7fe ff08 	bl	8001758 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e1d5      	b.n	8002d02 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002956:	4b15      	ldr	r3, [pc, #84]	; (80029ac <HAL_RCC_OscConfig+0x4f8>)
 8002958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f0      	bne.n	8002944 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0320 	and.w	r3, r3, #32
 800296a:	2b00      	cmp	r3, #0
 800296c:	d039      	beq.n	80029e2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d01c      	beq.n	80029b0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002976:	4b0d      	ldr	r3, [pc, #52]	; (80029ac <HAL_RCC_OscConfig+0x4f8>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a0c      	ldr	r2, [pc, #48]	; (80029ac <HAL_RCC_OscConfig+0x4f8>)
 800297c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002980:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002982:	f7fe fee9 	bl	8001758 <HAL_GetTick>
 8002986:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800298a:	f7fe fee5 	bl	8001758 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e1b2      	b.n	8002d02 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800299c:	4b03      	ldr	r3, [pc, #12]	; (80029ac <HAL_RCC_OscConfig+0x4f8>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0f0      	beq.n	800298a <HAL_RCC_OscConfig+0x4d6>
 80029a8:	e01b      	b.n	80029e2 <HAL_RCC_OscConfig+0x52e>
 80029aa:	bf00      	nop
 80029ac:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029b0:	4b9b      	ldr	r3, [pc, #620]	; (8002c20 <HAL_RCC_OscConfig+0x76c>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a9a      	ldr	r2, [pc, #616]	; (8002c20 <HAL_RCC_OscConfig+0x76c>)
 80029b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029ba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80029bc:	f7fe fecc 	bl	8001758 <HAL_GetTick>
 80029c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80029c4:	f7fe fec8 	bl	8001758 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e195      	b.n	8002d02 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80029d6:	4b92      	ldr	r3, [pc, #584]	; (8002c20 <HAL_RCC_OscConfig+0x76c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1f0      	bne.n	80029c4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0304 	and.w	r3, r3, #4
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 8081 	beq.w	8002af2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80029f0:	4b8c      	ldr	r3, [pc, #560]	; (8002c24 <HAL_RCC_OscConfig+0x770>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a8b      	ldr	r2, [pc, #556]	; (8002c24 <HAL_RCC_OscConfig+0x770>)
 80029f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029fc:	f7fe feac 	bl	8001758 <HAL_GetTick>
 8002a00:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002a04:	f7fe fea8 	bl	8001758 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b64      	cmp	r3, #100	; 0x64
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e175      	b.n	8002d02 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a16:	4b83      	ldr	r3, [pc, #524]	; (8002c24 <HAL_RCC_OscConfig+0x770>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0f0      	beq.n	8002a04 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d106      	bne.n	8002a38 <HAL_RCC_OscConfig+0x584>
 8002a2a:	4b7d      	ldr	r3, [pc, #500]	; (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2e:	4a7c      	ldr	r2, [pc, #496]	; (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002a30:	f043 0301 	orr.w	r3, r3, #1
 8002a34:	6713      	str	r3, [r2, #112]	; 0x70
 8002a36:	e02d      	b.n	8002a94 <HAL_RCC_OscConfig+0x5e0>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10c      	bne.n	8002a5a <HAL_RCC_OscConfig+0x5a6>
 8002a40:	4b77      	ldr	r3, [pc, #476]	; (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a44:	4a76      	ldr	r2, [pc, #472]	; (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002a46:	f023 0301 	bic.w	r3, r3, #1
 8002a4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a4c:	4b74      	ldr	r3, [pc, #464]	; (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a50:	4a73      	ldr	r2, [pc, #460]	; (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002a52:	f023 0304 	bic.w	r3, r3, #4
 8002a56:	6713      	str	r3, [r2, #112]	; 0x70
 8002a58:	e01c      	b.n	8002a94 <HAL_RCC_OscConfig+0x5e0>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	2b05      	cmp	r3, #5
 8002a60:	d10c      	bne.n	8002a7c <HAL_RCC_OscConfig+0x5c8>
 8002a62:	4b6f      	ldr	r3, [pc, #444]	; (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a66:	4a6e      	ldr	r2, [pc, #440]	; (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002a68:	f043 0304 	orr.w	r3, r3, #4
 8002a6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a6e:	4b6c      	ldr	r3, [pc, #432]	; (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a72:	4a6b      	ldr	r2, [pc, #428]	; (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002a74:	f043 0301 	orr.w	r3, r3, #1
 8002a78:	6713      	str	r3, [r2, #112]	; 0x70
 8002a7a:	e00b      	b.n	8002a94 <HAL_RCC_OscConfig+0x5e0>
 8002a7c:	4b68      	ldr	r3, [pc, #416]	; (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a80:	4a67      	ldr	r2, [pc, #412]	; (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002a82:	f023 0301 	bic.w	r3, r3, #1
 8002a86:	6713      	str	r3, [r2, #112]	; 0x70
 8002a88:	4b65      	ldr	r3, [pc, #404]	; (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8c:	4a64      	ldr	r2, [pc, #400]	; (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002a8e:	f023 0304 	bic.w	r3, r3, #4
 8002a92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d015      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9c:	f7fe fe5c 	bl	8001758 <HAL_GetTick>
 8002aa0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002aa2:	e00a      	b.n	8002aba <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aa4:	f7fe fe58 	bl	8001758 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e123      	b.n	8002d02 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002aba:	4b59      	ldr	r3, [pc, #356]	; (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0ee      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x5f0>
 8002ac6:	e014      	b.n	8002af2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac8:	f7fe fe46 	bl	8001758 <HAL_GetTick>
 8002acc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ace:	e00a      	b.n	8002ae6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ad0:	f7fe fe42 	bl	8001758 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e10d      	b.n	8002d02 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ae6:	4b4e      	ldr	r3, [pc, #312]	; (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1ee      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 8102 	beq.w	8002d00 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002afc:	4b48      	ldr	r3, [pc, #288]	; (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b04:	2b18      	cmp	r3, #24
 8002b06:	f000 80bd 	beq.w	8002c84 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	f040 809e 	bne.w	8002c50 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b14:	4b42      	ldr	r3, [pc, #264]	; (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a41      	ldr	r2, [pc, #260]	; (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002b1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b20:	f7fe fe1a 	bl	8001758 <HAL_GetTick>
 8002b24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b28:	f7fe fe16 	bl	8001758 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e0e3      	b.n	8002d02 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b3a:	4b39      	ldr	r3, [pc, #228]	; (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1f0      	bne.n	8002b28 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b46:	4b36      	ldr	r3, [pc, #216]	; (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002b48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b4a:	4b37      	ldr	r3, [pc, #220]	; (8002c28 <HAL_RCC_OscConfig+0x774>)
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b56:	0112      	lsls	r2, r2, #4
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	4931      	ldr	r1, [pc, #196]	; (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	628b      	str	r3, [r1, #40]	; 0x28
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b64:	3b01      	subs	r3, #1
 8002b66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	025b      	lsls	r3, r3, #9
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	431a      	orrs	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	041b      	lsls	r3, r3, #16
 8002b7e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002b82:	431a      	orrs	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	061b      	lsls	r3, r3, #24
 8002b8c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002b90:	4923      	ldr	r1, [pc, #140]	; (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002b96:	4b22      	ldr	r3, [pc, #136]	; (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9a:	4a21      	ldr	r2, [pc, #132]	; (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002b9c:	f023 0301 	bic.w	r3, r3, #1
 8002ba0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ba2:	4b1f      	ldr	r3, [pc, #124]	; (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002ba4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ba6:	4b21      	ldr	r3, [pc, #132]	; (8002c2c <HAL_RCC_OscConfig+0x778>)
 8002ba8:	4013      	ands	r3, r2
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002bae:	00d2      	lsls	r2, r2, #3
 8002bb0:	491b      	ldr	r1, [pc, #108]	; (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002bb6:	4b1a      	ldr	r3, [pc, #104]	; (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bba:	f023 020c 	bic.w	r2, r3, #12
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	4917      	ldr	r1, [pc, #92]	; (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002bc8:	4b15      	ldr	r3, [pc, #84]	; (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bcc:	f023 0202 	bic.w	r2, r3, #2
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd4:	4912      	ldr	r1, [pc, #72]	; (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002bda:	4b11      	ldr	r3, [pc, #68]	; (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bde:	4a10      	ldr	r2, [pc, #64]	; (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002be6:	4b0e      	ldr	r3, [pc, #56]	; (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bea:	4a0d      	ldr	r2, [pc, #52]	; (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bf0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002bf2:	4b0b      	ldr	r3, [pc, #44]	; (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf6:	4a0a      	ldr	r2, [pc, #40]	; (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bfc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002bfe:	4b08      	ldr	r3, [pc, #32]	; (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c02:	4a07      	ldr	r2, [pc, #28]	; (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002c04:	f043 0301 	orr.w	r3, r3, #1
 8002c08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c0a:	4b05      	ldr	r3, [pc, #20]	; (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a04      	ldr	r2, [pc, #16]	; (8002c20 <HAL_RCC_OscConfig+0x76c>)
 8002c10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c16:	f7fe fd9f 	bl	8001758 <HAL_GetTick>
 8002c1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c1c:	e011      	b.n	8002c42 <HAL_RCC_OscConfig+0x78e>
 8002c1e:	bf00      	nop
 8002c20:	58024400 	.word	0x58024400
 8002c24:	58024800 	.word	0x58024800
 8002c28:	fffffc0c 	.word	0xfffffc0c
 8002c2c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c30:	f7fe fd92 	bl	8001758 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e05f      	b.n	8002d02 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c42:	4b32      	ldr	r3, [pc, #200]	; (8002d0c <HAL_RCC_OscConfig+0x858>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d0f0      	beq.n	8002c30 <HAL_RCC_OscConfig+0x77c>
 8002c4e:	e057      	b.n	8002d00 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c50:	4b2e      	ldr	r3, [pc, #184]	; (8002d0c <HAL_RCC_OscConfig+0x858>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a2d      	ldr	r2, [pc, #180]	; (8002d0c <HAL_RCC_OscConfig+0x858>)
 8002c56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5c:	f7fe fd7c 	bl	8001758 <HAL_GetTick>
 8002c60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c64:	f7fe fd78 	bl	8001758 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e045      	b.n	8002d02 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c76:	4b25      	ldr	r3, [pc, #148]	; (8002d0c <HAL_RCC_OscConfig+0x858>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1f0      	bne.n	8002c64 <HAL_RCC_OscConfig+0x7b0>
 8002c82:	e03d      	b.n	8002d00 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002c84:	4b21      	ldr	r3, [pc, #132]	; (8002d0c <HAL_RCC_OscConfig+0x858>)
 8002c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c88:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002c8a:	4b20      	ldr	r3, [pc, #128]	; (8002d0c <HAL_RCC_OscConfig+0x858>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d031      	beq.n	8002cfc <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	f003 0203 	and.w	r2, r3, #3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d12a      	bne.n	8002cfc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	091b      	lsrs	r3, r3, #4
 8002caa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d122      	bne.n	8002cfc <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d11a      	bne.n	8002cfc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	0a5b      	lsrs	r3, r3, #9
 8002cca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d111      	bne.n	8002cfc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	0c1b      	lsrs	r3, r3, #16
 8002cdc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d108      	bne.n	8002cfc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	0e1b      	lsrs	r3, r3, #24
 8002cee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d001      	beq.n	8002d00 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e000      	b.n	8002d02 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3730      	adds	r7, #48	; 0x30
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	58024400 	.word	0x58024400

08002d10 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e19c      	b.n	800305e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d24:	4b8a      	ldr	r3, [pc, #552]	; (8002f50 <HAL_RCC_ClockConfig+0x240>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 030f 	and.w	r3, r3, #15
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d910      	bls.n	8002d54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d32:	4b87      	ldr	r3, [pc, #540]	; (8002f50 <HAL_RCC_ClockConfig+0x240>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f023 020f 	bic.w	r2, r3, #15
 8002d3a:	4985      	ldr	r1, [pc, #532]	; (8002f50 <HAL_RCC_ClockConfig+0x240>)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d42:	4b83      	ldr	r3, [pc, #524]	; (8002f50 <HAL_RCC_ClockConfig+0x240>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 030f 	and.w	r3, r3, #15
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d001      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e184      	b.n	800305e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d010      	beq.n	8002d82 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	4b7b      	ldr	r3, [pc, #492]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d908      	bls.n	8002d82 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d70:	4b78      	ldr	r3, [pc, #480]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	4975      	ldr	r1, [pc, #468]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d010      	beq.n	8002db0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	695a      	ldr	r2, [r3, #20]
 8002d92:	4b70      	ldr	r3, [pc, #448]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d908      	bls.n	8002db0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d9e:	4b6d      	ldr	r3, [pc, #436]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	496a      	ldr	r1, [pc, #424]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0310 	and.w	r3, r3, #16
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d010      	beq.n	8002dde <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	699a      	ldr	r2, [r3, #24]
 8002dc0:	4b64      	ldr	r3, [pc, #400]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d908      	bls.n	8002dde <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002dcc:	4b61      	ldr	r3, [pc, #388]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	495e      	ldr	r1, [pc, #376]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0320 	and.w	r3, r3, #32
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d010      	beq.n	8002e0c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69da      	ldr	r2, [r3, #28]
 8002dee:	4b59      	ldr	r3, [pc, #356]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d908      	bls.n	8002e0c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002dfa:	4b56      	ldr	r3, [pc, #344]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	4953      	ldr	r1, [pc, #332]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d010      	beq.n	8002e3a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68da      	ldr	r2, [r3, #12]
 8002e1c:	4b4d      	ldr	r3, [pc, #308]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	f003 030f 	and.w	r3, r3, #15
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d908      	bls.n	8002e3a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e28:	4b4a      	ldr	r3, [pc, #296]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	f023 020f 	bic.w	r2, r3, #15
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	4947      	ldr	r1, [pc, #284]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d055      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002e46:	4b43      	ldr	r3, [pc, #268]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	4940      	ldr	r1, [pc, #256]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d107      	bne.n	8002e70 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e60:	4b3c      	ldr	r3, [pc, #240]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d121      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e0f6      	b.n	800305e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b03      	cmp	r3, #3
 8002e76:	d107      	bne.n	8002e88 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e78:	4b36      	ldr	r3, [pc, #216]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d115      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e0ea      	b.n	800305e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d107      	bne.n	8002ea0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e90:	4b30      	ldr	r3, [pc, #192]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d109      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e0de      	b.n	800305e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ea0:	4b2c      	ldr	r3, [pc, #176]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e0d6      	b.n	800305e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002eb0:	4b28      	ldr	r3, [pc, #160]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	f023 0207 	bic.w	r2, r3, #7
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	4925      	ldr	r1, [pc, #148]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec2:	f7fe fc49 	bl	8001758 <HAL_GetTick>
 8002ec6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec8:	e00a      	b.n	8002ee0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eca:	f7fe fc45 	bl	8001758 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e0be      	b.n	800305e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ee0:	4b1c      	ldr	r3, [pc, #112]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d1eb      	bne.n	8002eca <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d010      	beq.n	8002f20 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68da      	ldr	r2, [r3, #12]
 8002f02:	4b14      	ldr	r3, [pc, #80]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	f003 030f 	and.w	r3, r3, #15
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d208      	bcs.n	8002f20 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f0e:	4b11      	ldr	r3, [pc, #68]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	f023 020f 	bic.w	r2, r3, #15
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	490e      	ldr	r1, [pc, #56]	; (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f20:	4b0b      	ldr	r3, [pc, #44]	; (8002f50 <HAL_RCC_ClockConfig+0x240>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 030f 	and.w	r3, r3, #15
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d214      	bcs.n	8002f58 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2e:	4b08      	ldr	r3, [pc, #32]	; (8002f50 <HAL_RCC_ClockConfig+0x240>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f023 020f 	bic.w	r2, r3, #15
 8002f36:	4906      	ldr	r1, [pc, #24]	; (8002f50 <HAL_RCC_ClockConfig+0x240>)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3e:	4b04      	ldr	r3, [pc, #16]	; (8002f50 <HAL_RCC_ClockConfig+0x240>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 030f 	and.w	r3, r3, #15
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d005      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e086      	b.n	800305e <HAL_RCC_ClockConfig+0x34e>
 8002f50:	52002000 	.word	0x52002000
 8002f54:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d010      	beq.n	8002f86 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691a      	ldr	r2, [r3, #16]
 8002f68:	4b3f      	ldr	r3, [pc, #252]	; (8003068 <HAL_RCC_ClockConfig+0x358>)
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d208      	bcs.n	8002f86 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f74:	4b3c      	ldr	r3, [pc, #240]	; (8003068 <HAL_RCC_ClockConfig+0x358>)
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	4939      	ldr	r1, [pc, #228]	; (8003068 <HAL_RCC_ClockConfig+0x358>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0308 	and.w	r3, r3, #8
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d010      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	695a      	ldr	r2, [r3, #20]
 8002f96:	4b34      	ldr	r3, [pc, #208]	; (8003068 <HAL_RCC_ClockConfig+0x358>)
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d208      	bcs.n	8002fb4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002fa2:	4b31      	ldr	r3, [pc, #196]	; (8003068 <HAL_RCC_ClockConfig+0x358>)
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	492e      	ldr	r1, [pc, #184]	; (8003068 <HAL_RCC_ClockConfig+0x358>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0310 	and.w	r3, r3, #16
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d010      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	699a      	ldr	r2, [r3, #24]
 8002fc4:	4b28      	ldr	r3, [pc, #160]	; (8003068 <HAL_RCC_ClockConfig+0x358>)
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d208      	bcs.n	8002fe2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002fd0:	4b25      	ldr	r3, [pc, #148]	; (8003068 <HAL_RCC_ClockConfig+0x358>)
 8002fd2:	69db      	ldr	r3, [r3, #28]
 8002fd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	4922      	ldr	r1, [pc, #136]	; (8003068 <HAL_RCC_ClockConfig+0x358>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0320 	and.w	r3, r3, #32
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d010      	beq.n	8003010 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69da      	ldr	r2, [r3, #28]
 8002ff2:	4b1d      	ldr	r3, [pc, #116]	; (8003068 <HAL_RCC_ClockConfig+0x358>)
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d208      	bcs.n	8003010 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002ffe:	4b1a      	ldr	r3, [pc, #104]	; (8003068 <HAL_RCC_ClockConfig+0x358>)
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	4917      	ldr	r1, [pc, #92]	; (8003068 <HAL_RCC_ClockConfig+0x358>)
 800300c:	4313      	orrs	r3, r2
 800300e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003010:	f000 f834 	bl	800307c <HAL_RCC_GetSysClockFreq>
 8003014:	4602      	mov	r2, r0
 8003016:	4b14      	ldr	r3, [pc, #80]	; (8003068 <HAL_RCC_ClockConfig+0x358>)
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	0a1b      	lsrs	r3, r3, #8
 800301c:	f003 030f 	and.w	r3, r3, #15
 8003020:	4912      	ldr	r1, [pc, #72]	; (800306c <HAL_RCC_ClockConfig+0x35c>)
 8003022:	5ccb      	ldrb	r3, [r1, r3]
 8003024:	f003 031f 	and.w	r3, r3, #31
 8003028:	fa22 f303 	lsr.w	r3, r2, r3
 800302c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800302e:	4b0e      	ldr	r3, [pc, #56]	; (8003068 <HAL_RCC_ClockConfig+0x358>)
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	f003 030f 	and.w	r3, r3, #15
 8003036:	4a0d      	ldr	r2, [pc, #52]	; (800306c <HAL_RCC_ClockConfig+0x35c>)
 8003038:	5cd3      	ldrb	r3, [r2, r3]
 800303a:	f003 031f 	and.w	r3, r3, #31
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	fa22 f303 	lsr.w	r3, r2, r3
 8003044:	4a0a      	ldr	r2, [pc, #40]	; (8003070 <HAL_RCC_ClockConfig+0x360>)
 8003046:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003048:	4a0a      	ldr	r2, [pc, #40]	; (8003074 <HAL_RCC_ClockConfig+0x364>)
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800304e:	4b0a      	ldr	r3, [pc, #40]	; (8003078 <HAL_RCC_ClockConfig+0x368>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f7fe f9d6 	bl	8001404 <HAL_InitTick>
 8003058:	4603      	mov	r3, r0
 800305a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800305c:	7bfb      	ldrb	r3, [r7, #15]
}
 800305e:	4618      	mov	r0, r3
 8003060:	3718      	adds	r7, #24
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	58024400 	.word	0x58024400
 800306c:	0800b928 	.word	0x0800b928
 8003070:	24000004 	.word	0x24000004
 8003074:	24000000 	.word	0x24000000
 8003078:	24000008 	.word	0x24000008

0800307c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800307c:	b480      	push	{r7}
 800307e:	b089      	sub	sp, #36	; 0x24
 8003080:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003082:	4bb3      	ldr	r3, [pc, #716]	; (8003350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800308a:	2b18      	cmp	r3, #24
 800308c:	f200 8155 	bhi.w	800333a <HAL_RCC_GetSysClockFreq+0x2be>
 8003090:	a201      	add	r2, pc, #4	; (adr r2, 8003098 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003096:	bf00      	nop
 8003098:	080030fd 	.word	0x080030fd
 800309c:	0800333b 	.word	0x0800333b
 80030a0:	0800333b 	.word	0x0800333b
 80030a4:	0800333b 	.word	0x0800333b
 80030a8:	0800333b 	.word	0x0800333b
 80030ac:	0800333b 	.word	0x0800333b
 80030b0:	0800333b 	.word	0x0800333b
 80030b4:	0800333b 	.word	0x0800333b
 80030b8:	08003123 	.word	0x08003123
 80030bc:	0800333b 	.word	0x0800333b
 80030c0:	0800333b 	.word	0x0800333b
 80030c4:	0800333b 	.word	0x0800333b
 80030c8:	0800333b 	.word	0x0800333b
 80030cc:	0800333b 	.word	0x0800333b
 80030d0:	0800333b 	.word	0x0800333b
 80030d4:	0800333b 	.word	0x0800333b
 80030d8:	08003129 	.word	0x08003129
 80030dc:	0800333b 	.word	0x0800333b
 80030e0:	0800333b 	.word	0x0800333b
 80030e4:	0800333b 	.word	0x0800333b
 80030e8:	0800333b 	.word	0x0800333b
 80030ec:	0800333b 	.word	0x0800333b
 80030f0:	0800333b 	.word	0x0800333b
 80030f4:	0800333b 	.word	0x0800333b
 80030f8:	0800312f 	.word	0x0800312f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030fc:	4b94      	ldr	r3, [pc, #592]	; (8003350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0320 	and.w	r3, r3, #32
 8003104:	2b00      	cmp	r3, #0
 8003106:	d009      	beq.n	800311c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003108:	4b91      	ldr	r3, [pc, #580]	; (8003350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	08db      	lsrs	r3, r3, #3
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	4a90      	ldr	r2, [pc, #576]	; (8003354 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003114:	fa22 f303 	lsr.w	r3, r2, r3
 8003118:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800311a:	e111      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800311c:	4b8d      	ldr	r3, [pc, #564]	; (8003354 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800311e:	61bb      	str	r3, [r7, #24]
    break;
 8003120:	e10e      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003122:	4b8d      	ldr	r3, [pc, #564]	; (8003358 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003124:	61bb      	str	r3, [r7, #24]
    break;
 8003126:	e10b      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003128:	4b8c      	ldr	r3, [pc, #560]	; (800335c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800312a:	61bb      	str	r3, [r7, #24]
    break;
 800312c:	e108      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800312e:	4b88      	ldr	r3, [pc, #544]	; (8003350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003132:	f003 0303 	and.w	r3, r3, #3
 8003136:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003138:	4b85      	ldr	r3, [pc, #532]	; (8003350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800313a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313c:	091b      	lsrs	r3, r3, #4
 800313e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003142:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003144:	4b82      	ldr	r3, [pc, #520]	; (8003350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800314e:	4b80      	ldr	r3, [pc, #512]	; (8003350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003152:	08db      	lsrs	r3, r3, #3
 8003154:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	fb02 f303 	mul.w	r3, r2, r3
 800315e:	ee07 3a90 	vmov	s15, r3
 8003162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003166:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 80e1 	beq.w	8003334 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	2b02      	cmp	r3, #2
 8003176:	f000 8083 	beq.w	8003280 <HAL_RCC_GetSysClockFreq+0x204>
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	2b02      	cmp	r3, #2
 800317e:	f200 80a1 	bhi.w	80032c4 <HAL_RCC_GetSysClockFreq+0x248>
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d003      	beq.n	8003190 <HAL_RCC_GetSysClockFreq+0x114>
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d056      	beq.n	800323c <HAL_RCC_GetSysClockFreq+0x1c0>
 800318e:	e099      	b.n	80032c4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003190:	4b6f      	ldr	r3, [pc, #444]	; (8003350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0320 	and.w	r3, r3, #32
 8003198:	2b00      	cmp	r3, #0
 800319a:	d02d      	beq.n	80031f8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800319c:	4b6c      	ldr	r3, [pc, #432]	; (8003350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	08db      	lsrs	r3, r3, #3
 80031a2:	f003 0303 	and.w	r3, r3, #3
 80031a6:	4a6b      	ldr	r2, [pc, #428]	; (8003354 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031a8:	fa22 f303 	lsr.w	r3, r2, r3
 80031ac:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	ee07 3a90 	vmov	s15, r3
 80031b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	ee07 3a90 	vmov	s15, r3
 80031be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031c6:	4b62      	ldr	r3, [pc, #392]	; (8003350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ce:	ee07 3a90 	vmov	s15, r3
 80031d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80031da:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003360 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80031f6:	e087      	b.n	8003308 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	ee07 3a90 	vmov	s15, r3
 80031fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003202:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003364 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800320a:	4b51      	ldr	r3, [pc, #324]	; (8003350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003212:	ee07 3a90 	vmov	s15, r3
 8003216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800321a:	ed97 6a02 	vldr	s12, [r7, #8]
 800321e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003360 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800322a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800322e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003236:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800323a:	e065      	b.n	8003308 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	ee07 3a90 	vmov	s15, r3
 8003242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003246:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003368 <HAL_RCC_GetSysClockFreq+0x2ec>
 800324a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800324e:	4b40      	ldr	r3, [pc, #256]	; (8003350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003256:	ee07 3a90 	vmov	s15, r3
 800325a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800325e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003262:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003360 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800326a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800326e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800327a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800327e:	e043      	b.n	8003308 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	ee07 3a90 	vmov	s15, r3
 8003286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800328a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800336c <HAL_RCC_GetSysClockFreq+0x2f0>
 800328e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003292:	4b2f      	ldr	r3, [pc, #188]	; (8003350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800329a:	ee07 3a90 	vmov	s15, r3
 800329e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80032a6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003360 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80032c2:	e021      	b.n	8003308 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	ee07 3a90 	vmov	s15, r3
 80032ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ce:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003368 <HAL_RCC_GetSysClockFreq+0x2ec>
 80032d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032d6:	4b1e      	ldr	r3, [pc, #120]	; (8003350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032de:	ee07 3a90 	vmov	s15, r3
 80032e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80032ea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003360 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003302:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003306:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003308:	4b11      	ldr	r3, [pc, #68]	; (8003350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800330a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330c:	0a5b      	lsrs	r3, r3, #9
 800330e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003312:	3301      	adds	r3, #1
 8003314:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	ee07 3a90 	vmov	s15, r3
 800331c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003320:	edd7 6a07 	vldr	s13, [r7, #28]
 8003324:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003328:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800332c:	ee17 3a90 	vmov	r3, s15
 8003330:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003332:	e005      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003334:	2300      	movs	r3, #0
 8003336:	61bb      	str	r3, [r7, #24]
    break;
 8003338:	e002      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800333a:	4b07      	ldr	r3, [pc, #28]	; (8003358 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800333c:	61bb      	str	r3, [r7, #24]
    break;
 800333e:	bf00      	nop
  }

  return sysclockfreq;
 8003340:	69bb      	ldr	r3, [r7, #24]
}
 8003342:	4618      	mov	r0, r3
 8003344:	3724      	adds	r7, #36	; 0x24
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	58024400 	.word	0x58024400
 8003354:	03d09000 	.word	0x03d09000
 8003358:	003d0900 	.word	0x003d0900
 800335c:	017d7840 	.word	0x017d7840
 8003360:	46000000 	.word	0x46000000
 8003364:	4c742400 	.word	0x4c742400
 8003368:	4a742400 	.word	0x4a742400
 800336c:	4bbebc20 	.word	0x4bbebc20

08003370 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003376:	f7ff fe81 	bl	800307c <HAL_RCC_GetSysClockFreq>
 800337a:	4602      	mov	r2, r0
 800337c:	4b10      	ldr	r3, [pc, #64]	; (80033c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	0a1b      	lsrs	r3, r3, #8
 8003382:	f003 030f 	and.w	r3, r3, #15
 8003386:	490f      	ldr	r1, [pc, #60]	; (80033c4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003388:	5ccb      	ldrb	r3, [r1, r3]
 800338a:	f003 031f 	and.w	r3, r3, #31
 800338e:	fa22 f303 	lsr.w	r3, r2, r3
 8003392:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003394:	4b0a      	ldr	r3, [pc, #40]	; (80033c0 <HAL_RCC_GetHCLKFreq+0x50>)
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	f003 030f 	and.w	r3, r3, #15
 800339c:	4a09      	ldr	r2, [pc, #36]	; (80033c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800339e:	5cd3      	ldrb	r3, [r2, r3]
 80033a0:	f003 031f 	and.w	r3, r3, #31
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	fa22 f303 	lsr.w	r3, r2, r3
 80033aa:	4a07      	ldr	r2, [pc, #28]	; (80033c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80033ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033ae:	4a07      	ldr	r2, [pc, #28]	; (80033cc <HAL_RCC_GetHCLKFreq+0x5c>)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80033b4:	4b04      	ldr	r3, [pc, #16]	; (80033c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80033b6:	681b      	ldr	r3, [r3, #0]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3708      	adds	r7, #8
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	58024400 	.word	0x58024400
 80033c4:	0800b928 	.word	0x0800b928
 80033c8:	24000004 	.word	0x24000004
 80033cc:	24000000 	.word	0x24000000

080033d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80033d4:	f7ff ffcc 	bl	8003370 <HAL_RCC_GetHCLKFreq>
 80033d8:	4602      	mov	r2, r0
 80033da:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	091b      	lsrs	r3, r3, #4
 80033e0:	f003 0307 	and.w	r3, r3, #7
 80033e4:	4904      	ldr	r1, [pc, #16]	; (80033f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033e6:	5ccb      	ldrb	r3, [r1, r3]
 80033e8:	f003 031f 	and.w	r3, r3, #31
 80033ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	58024400 	.word	0x58024400
 80033f8:	0800b928 	.word	0x0800b928

080033fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003400:	f7ff ffb6 	bl	8003370 <HAL_RCC_GetHCLKFreq>
 8003404:	4602      	mov	r2, r0
 8003406:	4b06      	ldr	r3, [pc, #24]	; (8003420 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	0a1b      	lsrs	r3, r3, #8
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	4904      	ldr	r1, [pc, #16]	; (8003424 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003412:	5ccb      	ldrb	r3, [r1, r3]
 8003414:	f003 031f 	and.w	r3, r3, #31
 8003418:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800341c:	4618      	mov	r0, r3
 800341e:	bd80      	pop	{r7, pc}
 8003420:	58024400 	.word	0x58024400
 8003424:	0800b928 	.word	0x0800b928

08003428 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	223f      	movs	r2, #63	; 0x3f
 8003436:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003438:	4b1a      	ldr	r3, [pc, #104]	; (80034a4 <HAL_RCC_GetClockConfig+0x7c>)
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	f003 0207 	and.w	r2, r3, #7
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003444:	4b17      	ldr	r3, [pc, #92]	; (80034a4 <HAL_RCC_GetClockConfig+0x7c>)
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003450:	4b14      	ldr	r3, [pc, #80]	; (80034a4 <HAL_RCC_GetClockConfig+0x7c>)
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	f003 020f 	and.w	r2, r3, #15
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800345c:	4b11      	ldr	r3, [pc, #68]	; (80034a4 <HAL_RCC_GetClockConfig+0x7c>)
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003468:	4b0e      	ldr	r3, [pc, #56]	; (80034a4 <HAL_RCC_GetClockConfig+0x7c>)
 800346a:	69db      	ldr	r3, [r3, #28]
 800346c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003474:	4b0b      	ldr	r3, [pc, #44]	; (80034a4 <HAL_RCC_GetClockConfig+0x7c>)
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003480:	4b08      	ldr	r3, [pc, #32]	; (80034a4 <HAL_RCC_GetClockConfig+0x7c>)
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800348c:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <HAL_RCC_GetClockConfig+0x80>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 020f 	and.w	r2, r3, #15
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	601a      	str	r2, [r3, #0]
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr
 80034a4:	58024400 	.word	0x58024400
 80034a8:	52002000 	.word	0x52002000

080034ac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034b4:	2300      	movs	r3, #0
 80034b6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034b8:	2300      	movs	r3, #0
 80034ba:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d03f      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034d0:	d02a      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80034d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034d6:	d824      	bhi.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034dc:	d018      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80034de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034e2:	d81e      	bhi.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d003      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80034e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034ec:	d007      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x52>
 80034ee:	e018      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034f0:	4ba3      	ldr	r3, [pc, #652]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80034f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f4:	4aa2      	ldr	r2, [pc, #648]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80034f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80034fc:	e015      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	3304      	adds	r3, #4
 8003502:	2102      	movs	r1, #2
 8003504:	4618      	mov	r0, r3
 8003506:	f001 f9d5 	bl	80048b4 <RCCEx_PLL2_Config>
 800350a:	4603      	mov	r3, r0
 800350c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800350e:	e00c      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	3324      	adds	r3, #36	; 0x24
 8003514:	2102      	movs	r1, #2
 8003516:	4618      	mov	r0, r3
 8003518:	f001 fa7e 	bl	8004a18 <RCCEx_PLL3_Config>
 800351c:	4603      	mov	r3, r0
 800351e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003520:	e003      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	75fb      	strb	r3, [r7, #23]
      break;
 8003526:	e000      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003528:	bf00      	nop
    }

    if(ret == HAL_OK)
 800352a:	7dfb      	ldrb	r3, [r7, #23]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d109      	bne.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003530:	4b93      	ldr	r3, [pc, #588]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003534:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800353c:	4990      	ldr	r1, [pc, #576]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800353e:	4313      	orrs	r3, r2
 8003540:	650b      	str	r3, [r1, #80]	; 0x50
 8003542:	e001      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003544:	7dfb      	ldrb	r3, [r7, #23]
 8003546:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003550:	2b00      	cmp	r3, #0
 8003552:	d03d      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003558:	2b04      	cmp	r3, #4
 800355a:	d826      	bhi.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800355c:	a201      	add	r2, pc, #4	; (adr r2, 8003564 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800355e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003562:	bf00      	nop
 8003564:	08003579 	.word	0x08003579
 8003568:	08003587 	.word	0x08003587
 800356c:	08003599 	.word	0x08003599
 8003570:	080035b1 	.word	0x080035b1
 8003574:	080035b1 	.word	0x080035b1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003578:	4b81      	ldr	r3, [pc, #516]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800357a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357c:	4a80      	ldr	r2, [pc, #512]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800357e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003582:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003584:	e015      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	3304      	adds	r3, #4
 800358a:	2100      	movs	r1, #0
 800358c:	4618      	mov	r0, r3
 800358e:	f001 f991 	bl	80048b4 <RCCEx_PLL2_Config>
 8003592:	4603      	mov	r3, r0
 8003594:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003596:	e00c      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3324      	adds	r3, #36	; 0x24
 800359c:	2100      	movs	r1, #0
 800359e:	4618      	mov	r0, r3
 80035a0:	f001 fa3a 	bl	8004a18 <RCCEx_PLL3_Config>
 80035a4:	4603      	mov	r3, r0
 80035a6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035a8:	e003      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	75fb      	strb	r3, [r7, #23]
      break;
 80035ae:	e000      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80035b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035b2:	7dfb      	ldrb	r3, [r7, #23]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d109      	bne.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035b8:	4b71      	ldr	r3, [pc, #452]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035bc:	f023 0207 	bic.w	r2, r3, #7
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c4:	496e      	ldr	r1, [pc, #440]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	650b      	str	r3, [r1, #80]	; 0x50
 80035ca:	e001      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035cc:	7dfb      	ldrb	r3, [r7, #23]
 80035ce:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d042      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035e4:	d02b      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x192>
 80035e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035ea:	d825      	bhi.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80035ec:	2bc0      	cmp	r3, #192	; 0xc0
 80035ee:	d028      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80035f0:	2bc0      	cmp	r3, #192	; 0xc0
 80035f2:	d821      	bhi.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80035f4:	2b80      	cmp	r3, #128	; 0x80
 80035f6:	d016      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80035f8:	2b80      	cmp	r3, #128	; 0x80
 80035fa:	d81d      	bhi.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d002      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003600:	2b40      	cmp	r3, #64	; 0x40
 8003602:	d007      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003604:	e018      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003606:	4b5e      	ldr	r3, [pc, #376]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360a:	4a5d      	ldr	r2, [pc, #372]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800360c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003610:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003612:	e017      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3304      	adds	r3, #4
 8003618:	2100      	movs	r1, #0
 800361a:	4618      	mov	r0, r3
 800361c:	f001 f94a 	bl	80048b4 <RCCEx_PLL2_Config>
 8003620:	4603      	mov	r3, r0
 8003622:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003624:	e00e      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3324      	adds	r3, #36	; 0x24
 800362a:	2100      	movs	r1, #0
 800362c:	4618      	mov	r0, r3
 800362e:	f001 f9f3 	bl	8004a18 <RCCEx_PLL3_Config>
 8003632:	4603      	mov	r3, r0
 8003634:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003636:	e005      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	75fb      	strb	r3, [r7, #23]
      break;
 800363c:	e002      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800363e:	bf00      	nop
 8003640:	e000      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003642:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003644:	7dfb      	ldrb	r3, [r7, #23]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d109      	bne.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800364a:	4b4d      	ldr	r3, [pc, #308]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800364c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800364e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003656:	494a      	ldr	r1, [pc, #296]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003658:	4313      	orrs	r3, r2
 800365a:	650b      	str	r3, [r1, #80]	; 0x50
 800365c:	e001      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800365e:	7dfb      	ldrb	r3, [r7, #23]
 8003660:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800366a:	2b00      	cmp	r3, #0
 800366c:	d049      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003674:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003678:	d030      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x230>
 800367a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800367e:	d82a      	bhi.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003680:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003684:	d02c      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003686:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800368a:	d824      	bhi.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800368c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003690:	d018      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003692:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003696:	d81e      	bhi.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003698:	2b00      	cmp	r3, #0
 800369a:	d003      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800369c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036a0:	d007      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80036a2:	e018      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036a4:	4b36      	ldr	r3, [pc, #216]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	4a35      	ldr	r2, [pc, #212]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036b0:	e017      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	3304      	adds	r3, #4
 80036b6:	2100      	movs	r1, #0
 80036b8:	4618      	mov	r0, r3
 80036ba:	f001 f8fb 	bl	80048b4 <RCCEx_PLL2_Config>
 80036be:	4603      	mov	r3, r0
 80036c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80036c2:	e00e      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3324      	adds	r3, #36	; 0x24
 80036c8:	2100      	movs	r1, #0
 80036ca:	4618      	mov	r0, r3
 80036cc:	f001 f9a4 	bl	8004a18 <RCCEx_PLL3_Config>
 80036d0:	4603      	mov	r3, r0
 80036d2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036d4:	e005      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	75fb      	strb	r3, [r7, #23]
      break;
 80036da:	e002      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80036dc:	bf00      	nop
 80036de:	e000      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80036e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036e2:	7dfb      	ldrb	r3, [r7, #23]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10a      	bne.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80036e8:	4b25      	ldr	r3, [pc, #148]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ec:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80036f6:	4922      	ldr	r1, [pc, #136]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	658b      	str	r3, [r1, #88]	; 0x58
 80036fc:	e001      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036fe:	7dfb      	ldrb	r3, [r7, #23]
 8003700:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800370a:	2b00      	cmp	r3, #0
 800370c:	d04b      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003714:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003718:	d030      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800371a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800371e:	d82a      	bhi.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003720:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003724:	d02e      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003726:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800372a:	d824      	bhi.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800372c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003730:	d018      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003732:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003736:	d81e      	bhi.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003738:	2b00      	cmp	r3, #0
 800373a:	d003      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800373c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003740:	d007      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003742:	e018      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003744:	4b0e      	ldr	r3, [pc, #56]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003748:	4a0d      	ldr	r2, [pc, #52]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800374a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800374e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003750:	e019      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	3304      	adds	r3, #4
 8003756:	2100      	movs	r1, #0
 8003758:	4618      	mov	r0, r3
 800375a:	f001 f8ab 	bl	80048b4 <RCCEx_PLL2_Config>
 800375e:	4603      	mov	r3, r0
 8003760:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003762:	e010      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	3324      	adds	r3, #36	; 0x24
 8003768:	2100      	movs	r1, #0
 800376a:	4618      	mov	r0, r3
 800376c:	f001 f954 	bl	8004a18 <RCCEx_PLL3_Config>
 8003770:	4603      	mov	r3, r0
 8003772:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003774:	e007      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	75fb      	strb	r3, [r7, #23]
      break;
 800377a:	e004      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800377c:	bf00      	nop
 800377e:	e002      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003780:	58024400 	.word	0x58024400
      break;
 8003784:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003786:	7dfb      	ldrb	r3, [r7, #23]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10a      	bne.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800378c:	4b99      	ldr	r3, [pc, #612]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800378e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003790:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800379a:	4996      	ldr	r1, [pc, #600]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800379c:	4313      	orrs	r3, r2
 800379e:	658b      	str	r3, [r1, #88]	; 0x58
 80037a0:	e001      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037a2:	7dfb      	ldrb	r3, [r7, #23]
 80037a4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d032      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037b6:	2b30      	cmp	r3, #48	; 0x30
 80037b8:	d01c      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80037ba:	2b30      	cmp	r3, #48	; 0x30
 80037bc:	d817      	bhi.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x342>
 80037be:	2b20      	cmp	r3, #32
 80037c0:	d00c      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x330>
 80037c2:	2b20      	cmp	r3, #32
 80037c4:	d813      	bhi.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x342>
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d016      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80037ca:	2b10      	cmp	r3, #16
 80037cc:	d10f      	bne.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037ce:	4b89      	ldr	r3, [pc, #548]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d2:	4a88      	ldr	r2, [pc, #544]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80037da:	e00e      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3304      	adds	r3, #4
 80037e0:	2102      	movs	r1, #2
 80037e2:	4618      	mov	r0, r3
 80037e4:	f001 f866 	bl	80048b4 <RCCEx_PLL2_Config>
 80037e8:	4603      	mov	r3, r0
 80037ea:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80037ec:	e005      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	75fb      	strb	r3, [r7, #23]
      break;
 80037f2:	e002      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80037f4:	bf00      	nop
 80037f6:	e000      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80037f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037fa:	7dfb      	ldrb	r3, [r7, #23]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d109      	bne.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003800:	4b7c      	ldr	r3, [pc, #496]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003804:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800380c:	4979      	ldr	r1, [pc, #484]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800380e:	4313      	orrs	r3, r2
 8003810:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003812:	e001      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003814:	7dfb      	ldrb	r3, [r7, #23]
 8003816:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d047      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003828:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800382c:	d030      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800382e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003832:	d82a      	bhi.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003834:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003838:	d02c      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800383a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800383e:	d824      	bhi.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003840:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003844:	d018      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800384a:	d81e      	bhi.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800384c:	2b00      	cmp	r3, #0
 800384e:	d003      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003854:	d007      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8003856:	e018      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003858:	4b66      	ldr	r3, [pc, #408]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385c:	4a65      	ldr	r2, [pc, #404]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800385e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003862:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003864:	e017      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	3304      	adds	r3, #4
 800386a:	2100      	movs	r1, #0
 800386c:	4618      	mov	r0, r3
 800386e:	f001 f821 	bl	80048b4 <RCCEx_PLL2_Config>
 8003872:	4603      	mov	r3, r0
 8003874:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003876:	e00e      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	3324      	adds	r3, #36	; 0x24
 800387c:	2100      	movs	r1, #0
 800387e:	4618      	mov	r0, r3
 8003880:	f001 f8ca 	bl	8004a18 <RCCEx_PLL3_Config>
 8003884:	4603      	mov	r3, r0
 8003886:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003888:	e005      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	75fb      	strb	r3, [r7, #23]
      break;
 800388e:	e002      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003890:	bf00      	nop
 8003892:	e000      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003894:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003896:	7dfb      	ldrb	r3, [r7, #23]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d109      	bne.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800389c:	4b55      	ldr	r3, [pc, #340]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800389e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a8:	4952      	ldr	r1, [pc, #328]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	650b      	str	r3, [r1, #80]	; 0x50
 80038ae:	e001      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b0:	7dfb      	ldrb	r3, [r7, #23]
 80038b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d049      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038c8:	d02e      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80038ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038ce:	d828      	bhi.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80038d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038d4:	d02a      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x480>
 80038d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038da:	d822      	bhi.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80038dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038e0:	d026      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80038e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038e6:	d81c      	bhi.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80038e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038ec:	d010      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80038ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038f2:	d816      	bhi.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d01d      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80038f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038fc:	d111      	bne.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	3304      	adds	r3, #4
 8003902:	2101      	movs	r1, #1
 8003904:	4618      	mov	r0, r3
 8003906:	f000 ffd5 	bl	80048b4 <RCCEx_PLL2_Config>
 800390a:	4603      	mov	r3, r0
 800390c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800390e:	e012      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	3324      	adds	r3, #36	; 0x24
 8003914:	2101      	movs	r1, #1
 8003916:	4618      	mov	r0, r3
 8003918:	f001 f87e 	bl	8004a18 <RCCEx_PLL3_Config>
 800391c:	4603      	mov	r3, r0
 800391e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003920:	e009      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	75fb      	strb	r3, [r7, #23]
      break;
 8003926:	e006      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003928:	bf00      	nop
 800392a:	e004      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800392c:	bf00      	nop
 800392e:	e002      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003930:	bf00      	nop
 8003932:	e000      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003934:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003936:	7dfb      	ldrb	r3, [r7, #23]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d109      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800393c:	4b2d      	ldr	r3, [pc, #180]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800393e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003940:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003948:	492a      	ldr	r1, [pc, #168]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800394a:	4313      	orrs	r3, r2
 800394c:	650b      	str	r3, [r1, #80]	; 0x50
 800394e:	e001      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003950:	7dfb      	ldrb	r3, [r7, #23]
 8003952:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d04d      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003966:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800396a:	d02e      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800396c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003970:	d828      	bhi.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003976:	d02a      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800397c:	d822      	bhi.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800397e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003982:	d026      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8003984:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003988:	d81c      	bhi.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800398a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800398e:	d010      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003990:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003994:	d816      	bhi.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003996:	2b00      	cmp	r3, #0
 8003998:	d01d      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800399a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800399e:	d111      	bne.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3304      	adds	r3, #4
 80039a4:	2101      	movs	r1, #1
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 ff84 	bl	80048b4 <RCCEx_PLL2_Config>
 80039ac:	4603      	mov	r3, r0
 80039ae:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80039b0:	e012      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	3324      	adds	r3, #36	; 0x24
 80039b6:	2101      	movs	r1, #1
 80039b8:	4618      	mov	r0, r3
 80039ba:	f001 f82d 	bl	8004a18 <RCCEx_PLL3_Config>
 80039be:	4603      	mov	r3, r0
 80039c0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80039c2:	e009      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	75fb      	strb	r3, [r7, #23]
      break;
 80039c8:	e006      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80039ca:	bf00      	nop
 80039cc:	e004      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80039ce:	bf00      	nop
 80039d0:	e002      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80039d2:	bf00      	nop
 80039d4:	e000      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80039d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039d8:	7dfb      	ldrb	r3, [r7, #23]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10c      	bne.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80039de:	4b05      	ldr	r3, [pc, #20]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80039e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80039ec:	4901      	ldr	r1, [pc, #4]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	658b      	str	r3, [r1, #88]	; 0x58
 80039f2:	e003      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x550>
 80039f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f8:	7dfb      	ldrb	r3, [r7, #23]
 80039fa:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d02f      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a10:	d00e      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003a12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a16:	d814      	bhi.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d015      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003a1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a20:	d10f      	bne.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a22:	4baf      	ldr	r3, [pc, #700]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a26:	4aae      	ldr	r2, [pc, #696]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003a2e:	e00c      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	3304      	adds	r3, #4
 8003a34:	2101      	movs	r1, #1
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 ff3c 	bl	80048b4 <RCCEx_PLL2_Config>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003a40:	e003      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	75fb      	strb	r3, [r7, #23]
      break;
 8003a46:	e000      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003a48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a4a:	7dfb      	ldrb	r3, [r7, #23]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d109      	bne.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a50:	4ba3      	ldr	r3, [pc, #652]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a54:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a5c:	49a0      	ldr	r1, [pc, #640]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	650b      	str	r3, [r1, #80]	; 0x50
 8003a62:	e001      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a64:	7dfb      	ldrb	r3, [r7, #23]
 8003a66:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d032      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a78:	2b03      	cmp	r3, #3
 8003a7a:	d81b      	bhi.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003a7c:	a201      	add	r2, pc, #4	; (adr r2, 8003a84 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8003a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a82:	bf00      	nop
 8003a84:	08003abb 	.word	0x08003abb
 8003a88:	08003a95 	.word	0x08003a95
 8003a8c:	08003aa3 	.word	0x08003aa3
 8003a90:	08003abb 	.word	0x08003abb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a94:	4b92      	ldr	r3, [pc, #584]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a98:	4a91      	ldr	r2, [pc, #580]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003aa0:	e00c      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	2102      	movs	r1, #2
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 ff03 	bl	80048b4 <RCCEx_PLL2_Config>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003ab2:	e003      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ab8:	e000      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003aba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003abc:	7dfb      	ldrb	r3, [r7, #23]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d109      	bne.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003ac2:	4b87      	ldr	r3, [pc, #540]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ac6:	f023 0203 	bic.w	r2, r3, #3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ace:	4984      	ldr	r1, [pc, #528]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003ad4:	e001      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ad6:	7dfb      	ldrb	r3, [r7, #23]
 8003ad8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f000 8086 	beq.w	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ae8:	4b7e      	ldr	r3, [pc, #504]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a7d      	ldr	r2, [pc, #500]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003af4:	f7fd fe30 	bl	8001758 <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003afa:	e009      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003afc:	f7fd fe2c 	bl	8001758 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b64      	cmp	r3, #100	; 0x64
 8003b08:	d902      	bls.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	75fb      	strb	r3, [r7, #23]
        break;
 8003b0e:	e005      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b10:	4b74      	ldr	r3, [pc, #464]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0ef      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003b1c:	7dfb      	ldrb	r3, [r7, #23]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d166      	bne.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b22:	4b6f      	ldr	r3, [pc, #444]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b2c:	4053      	eors	r3, r2
 8003b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d013      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b36:	4b6a      	ldr	r3, [pc, #424]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b3e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b40:	4b67      	ldr	r3, [pc, #412]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b44:	4a66      	ldr	r2, [pc, #408]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b4a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b4c:	4b64      	ldr	r3, [pc, #400]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b50:	4a63      	ldr	r2, [pc, #396]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b56:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003b58:	4a61      	ldr	r2, [pc, #388]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b68:	d115      	bne.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6a:	f7fd fdf5 	bl	8001758 <HAL_GetTick>
 8003b6e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b70:	e00b      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b72:	f7fd fdf1 	bl	8001758 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d902      	bls.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	75fb      	strb	r3, [r7, #23]
            break;
 8003b88:	e005      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b8a:	4b55      	ldr	r3, [pc, #340]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0ed      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003b96:	7dfb      	ldrb	r3, [r7, #23]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d126      	bne.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ba6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003baa:	d10d      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003bac:	4b4c      	ldr	r3, [pc, #304]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bba:	0919      	lsrs	r1, r3, #4
 8003bbc:	4b4a      	ldr	r3, [pc, #296]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003bbe:	400b      	ands	r3, r1
 8003bc0:	4947      	ldr	r1, [pc, #284]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	610b      	str	r3, [r1, #16]
 8003bc6:	e005      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003bc8:	4b45      	ldr	r3, [pc, #276]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	4a44      	ldr	r2, [pc, #272]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003bd2:	6113      	str	r3, [r2, #16]
 8003bd4:	4b42      	ldr	r3, [pc, #264]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bd6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be2:	493f      	ldr	r1, [pc, #252]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	670b      	str	r3, [r1, #112]	; 0x70
 8003be8:	e004      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bea:	7dfb      	ldrb	r3, [r7, #23]
 8003bec:	75bb      	strb	r3, [r7, #22]
 8003bee:	e001      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf0:	7dfb      	ldrb	r3, [r7, #23]
 8003bf2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 8085 	beq.w	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c06:	2b28      	cmp	r3, #40	; 0x28
 8003c08:	d866      	bhi.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003c0a:	a201      	add	r2, pc, #4	; (adr r2, 8003c10 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c10:	08003ced 	.word	0x08003ced
 8003c14:	08003cd9 	.word	0x08003cd9
 8003c18:	08003cd9 	.word	0x08003cd9
 8003c1c:	08003cd9 	.word	0x08003cd9
 8003c20:	08003cd9 	.word	0x08003cd9
 8003c24:	08003cd9 	.word	0x08003cd9
 8003c28:	08003cd9 	.word	0x08003cd9
 8003c2c:	08003cd9 	.word	0x08003cd9
 8003c30:	08003cb5 	.word	0x08003cb5
 8003c34:	08003cd9 	.word	0x08003cd9
 8003c38:	08003cd9 	.word	0x08003cd9
 8003c3c:	08003cd9 	.word	0x08003cd9
 8003c40:	08003cd9 	.word	0x08003cd9
 8003c44:	08003cd9 	.word	0x08003cd9
 8003c48:	08003cd9 	.word	0x08003cd9
 8003c4c:	08003cd9 	.word	0x08003cd9
 8003c50:	08003cc7 	.word	0x08003cc7
 8003c54:	08003cd9 	.word	0x08003cd9
 8003c58:	08003cd9 	.word	0x08003cd9
 8003c5c:	08003cd9 	.word	0x08003cd9
 8003c60:	08003cd9 	.word	0x08003cd9
 8003c64:	08003cd9 	.word	0x08003cd9
 8003c68:	08003cd9 	.word	0x08003cd9
 8003c6c:	08003cd9 	.word	0x08003cd9
 8003c70:	08003ced 	.word	0x08003ced
 8003c74:	08003cd9 	.word	0x08003cd9
 8003c78:	08003cd9 	.word	0x08003cd9
 8003c7c:	08003cd9 	.word	0x08003cd9
 8003c80:	08003cd9 	.word	0x08003cd9
 8003c84:	08003cd9 	.word	0x08003cd9
 8003c88:	08003cd9 	.word	0x08003cd9
 8003c8c:	08003cd9 	.word	0x08003cd9
 8003c90:	08003ced 	.word	0x08003ced
 8003c94:	08003cd9 	.word	0x08003cd9
 8003c98:	08003cd9 	.word	0x08003cd9
 8003c9c:	08003cd9 	.word	0x08003cd9
 8003ca0:	08003cd9 	.word	0x08003cd9
 8003ca4:	08003cd9 	.word	0x08003cd9
 8003ca8:	08003cd9 	.word	0x08003cd9
 8003cac:	08003cd9 	.word	0x08003cd9
 8003cb0:	08003ced 	.word	0x08003ced
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	2101      	movs	r1, #1
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 fdfa 	bl	80048b4 <RCCEx_PLL2_Config>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003cc4:	e013      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	3324      	adds	r3, #36	; 0x24
 8003cca:	2101      	movs	r1, #1
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f000 fea3 	bl	8004a18 <RCCEx_PLL3_Config>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003cd6:	e00a      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	75fb      	strb	r3, [r7, #23]
      break;
 8003cdc:	e007      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003cde:	bf00      	nop
 8003ce0:	58024400 	.word	0x58024400
 8003ce4:	58024800 	.word	0x58024800
 8003ce8:	00ffffcf 	.word	0x00ffffcf
      break;
 8003cec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cee:	7dfb      	ldrb	r3, [r7, #23]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d109      	bne.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003cf4:	4b96      	ldr	r3, [pc, #600]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d00:	4993      	ldr	r1, [pc, #588]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	654b      	str	r3, [r1, #84]	; 0x54
 8003d06:	e001      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d08:	7dfb      	ldrb	r3, [r7, #23]
 8003d0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d038      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d1c:	2b05      	cmp	r3, #5
 8003d1e:	d821      	bhi.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003d20:	a201      	add	r2, pc, #4	; (adr r2, 8003d28 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8003d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d26:	bf00      	nop
 8003d28:	08003d6b 	.word	0x08003d6b
 8003d2c:	08003d41 	.word	0x08003d41
 8003d30:	08003d53 	.word	0x08003d53
 8003d34:	08003d6b 	.word	0x08003d6b
 8003d38:	08003d6b 	.word	0x08003d6b
 8003d3c:	08003d6b 	.word	0x08003d6b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	3304      	adds	r3, #4
 8003d44:	2101      	movs	r1, #1
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 fdb4 	bl	80048b4 <RCCEx_PLL2_Config>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003d50:	e00c      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	3324      	adds	r3, #36	; 0x24
 8003d56:	2101      	movs	r1, #1
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f000 fe5d 	bl	8004a18 <RCCEx_PLL3_Config>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003d62:	e003      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	75fb      	strb	r3, [r7, #23]
      break;
 8003d68:	e000      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003d6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d6c:	7dfb      	ldrb	r3, [r7, #23]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d109      	bne.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003d72:	4b77      	ldr	r3, [pc, #476]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d76:	f023 0207 	bic.w	r2, r3, #7
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d7e:	4974      	ldr	r1, [pc, #464]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	654b      	str	r3, [r1, #84]	; 0x54
 8003d84:	e001      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d86:	7dfb      	ldrb	r3, [r7, #23]
 8003d88:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0304 	and.w	r3, r3, #4
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d03a      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9c:	2b05      	cmp	r3, #5
 8003d9e:	d821      	bhi.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003da0:	a201      	add	r2, pc, #4	; (adr r2, 8003da8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8003da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da6:	bf00      	nop
 8003da8:	08003deb 	.word	0x08003deb
 8003dac:	08003dc1 	.word	0x08003dc1
 8003db0:	08003dd3 	.word	0x08003dd3
 8003db4:	08003deb 	.word	0x08003deb
 8003db8:	08003deb 	.word	0x08003deb
 8003dbc:	08003deb 	.word	0x08003deb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	3304      	adds	r3, #4
 8003dc4:	2101      	movs	r1, #1
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 fd74 	bl	80048b4 <RCCEx_PLL2_Config>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003dd0:	e00c      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	3324      	adds	r3, #36	; 0x24
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f000 fe1d 	bl	8004a18 <RCCEx_PLL3_Config>
 8003dde:	4603      	mov	r3, r0
 8003de0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003de2:	e003      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	75fb      	strb	r3, [r7, #23]
      break;
 8003de8:	e000      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003dea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dec:	7dfb      	ldrb	r3, [r7, #23]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10a      	bne.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003df2:	4b57      	ldr	r3, [pc, #348]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df6:	f023 0207 	bic.w	r2, r3, #7
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e00:	4953      	ldr	r1, [pc, #332]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	658b      	str	r3, [r1, #88]	; 0x58
 8003e06:	e001      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e08:	7dfb      	ldrb	r3, [r7, #23]
 8003e0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0320 	and.w	r3, r3, #32
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d04b      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e22:	d02e      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003e24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e28:	d828      	bhi.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e2e:	d02a      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e34:	d822      	bhi.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003e36:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e3a:	d026      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003e3c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e40:	d81c      	bhi.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003e42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e46:	d010      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003e48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e4c:	d816      	bhi.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d01d      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8003e52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e56:	d111      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	3304      	adds	r3, #4
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 fd28 	bl	80048b4 <RCCEx_PLL2_Config>
 8003e64:	4603      	mov	r3, r0
 8003e66:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003e68:	e012      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	3324      	adds	r3, #36	; 0x24
 8003e6e:	2102      	movs	r1, #2
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 fdd1 	bl	8004a18 <RCCEx_PLL3_Config>
 8003e76:	4603      	mov	r3, r0
 8003e78:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003e7a:	e009      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e80:	e006      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003e82:	bf00      	nop
 8003e84:	e004      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003e86:	bf00      	nop
 8003e88:	e002      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003e8a:	bf00      	nop
 8003e8c:	e000      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003e8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e90:	7dfb      	ldrb	r3, [r7, #23]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10a      	bne.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e96:	4b2e      	ldr	r3, [pc, #184]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ea4:	492a      	ldr	r1, [pc, #168]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	654b      	str	r3, [r1, #84]	; 0x54
 8003eaa:	e001      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eac:	7dfb      	ldrb	r3, [r7, #23]
 8003eae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d04d      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ec2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003ec6:	d02e      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003ec8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003ecc:	d828      	bhi.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ed2:	d02a      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ed8:	d822      	bhi.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003eda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ede:	d026      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003ee0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ee4:	d81c      	bhi.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003ee6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eea:	d010      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003eec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ef0:	d816      	bhi.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d01d      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003ef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003efa:	d111      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3304      	adds	r3, #4
 8003f00:	2100      	movs	r1, #0
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 fcd6 	bl	80048b4 <RCCEx_PLL2_Config>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003f0c:	e012      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	3324      	adds	r3, #36	; 0x24
 8003f12:	2102      	movs	r1, #2
 8003f14:	4618      	mov	r0, r3
 8003f16:	f000 fd7f 	bl	8004a18 <RCCEx_PLL3_Config>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003f1e:	e009      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	75fb      	strb	r3, [r7, #23]
      break;
 8003f24:	e006      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f26:	bf00      	nop
 8003f28:	e004      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f2a:	bf00      	nop
 8003f2c:	e002      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f2e:	bf00      	nop
 8003f30:	e000      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f34:	7dfb      	ldrb	r3, [r7, #23]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10c      	bne.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f3a:	4b05      	ldr	r3, [pc, #20]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f3e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f48:	4901      	ldr	r1, [pc, #4]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	658b      	str	r3, [r1, #88]	; 0x58
 8003f4e:	e003      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003f50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f54:	7dfb      	ldrb	r3, [r7, #23]
 8003f56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d04b      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f6a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003f6e:	d02e      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003f70:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003f74:	d828      	bhi.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003f76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f7a:	d02a      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003f7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f80:	d822      	bhi.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003f82:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003f86:	d026      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003f88:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003f8c:	d81c      	bhi.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003f8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f92:	d010      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003f94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f98:	d816      	bhi.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d01d      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003f9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fa2:	d111      	bne.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	3304      	adds	r3, #4
 8003fa8:	2100      	movs	r1, #0
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 fc82 	bl	80048b4 <RCCEx_PLL2_Config>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003fb4:	e012      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	3324      	adds	r3, #36	; 0x24
 8003fba:	2102      	movs	r1, #2
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 fd2b 	bl	8004a18 <RCCEx_PLL3_Config>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003fc6:	e009      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	75fb      	strb	r3, [r7, #23]
      break;
 8003fcc:	e006      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003fce:	bf00      	nop
 8003fd0:	e004      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003fd2:	bf00      	nop
 8003fd4:	e002      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003fd6:	bf00      	nop
 8003fd8:	e000      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003fda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fdc:	7dfb      	ldrb	r3, [r7, #23]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10a      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003fe2:	4b9d      	ldr	r3, [pc, #628]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ff0:	4999      	ldr	r1, [pc, #612]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	658b      	str	r3, [r1, #88]	; 0x58
 8003ff6:	e001      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff8:	7dfb      	ldrb	r3, [r7, #23]
 8003ffa:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0308 	and.w	r3, r3, #8
 8004004:	2b00      	cmp	r3, #0
 8004006:	d01a      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800400e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004012:	d10a      	bne.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3324      	adds	r3, #36	; 0x24
 8004018:	2102      	movs	r1, #2
 800401a:	4618      	mov	r0, r3
 800401c:	f000 fcfc 	bl	8004a18 <RCCEx_PLL3_Config>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800402a:	4b8b      	ldr	r3, [pc, #556]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800402c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004038:	4987      	ldr	r1, [pc, #540]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800403a:	4313      	orrs	r3, r2
 800403c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0310 	and.w	r3, r3, #16
 8004046:	2b00      	cmp	r3, #0
 8004048:	d01a      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004050:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004054:	d10a      	bne.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	3324      	adds	r3, #36	; 0x24
 800405a:	2102      	movs	r1, #2
 800405c:	4618      	mov	r0, r3
 800405e:	f000 fcdb 	bl	8004a18 <RCCEx_PLL3_Config>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800406c:	4b7a      	ldr	r3, [pc, #488]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800406e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004070:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800407a:	4977      	ldr	r1, [pc, #476]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800407c:	4313      	orrs	r3, r2
 800407e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d034      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004092:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004096:	d01d      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004098:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800409c:	d817      	bhi.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80040a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040a6:	d009      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80040a8:	e011      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	3304      	adds	r3, #4
 80040ae:	2100      	movs	r1, #0
 80040b0:	4618      	mov	r0, r3
 80040b2:	f000 fbff 	bl	80048b4 <RCCEx_PLL2_Config>
 80040b6:	4603      	mov	r3, r0
 80040b8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80040ba:	e00c      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	3324      	adds	r3, #36	; 0x24
 80040c0:	2102      	movs	r1, #2
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 fca8 	bl	8004a18 <RCCEx_PLL3_Config>
 80040c8:	4603      	mov	r3, r0
 80040ca:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80040cc:	e003      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	75fb      	strb	r3, [r7, #23]
      break;
 80040d2:	e000      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80040d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040d6:	7dfb      	ldrb	r3, [r7, #23]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10a      	bne.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040dc:	4b5e      	ldr	r3, [pc, #376]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80040ea:	495b      	ldr	r1, [pc, #364]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	658b      	str	r3, [r1, #88]	; 0x58
 80040f0:	e001      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040f2:	7dfb      	ldrb	r3, [r7, #23]
 80040f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d033      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004108:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800410c:	d01c      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800410e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004112:	d816      	bhi.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004114:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004118:	d003      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800411a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800411e:	d007      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8004120:	e00f      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004122:	4b4d      	ldr	r3, [pc, #308]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004126:	4a4c      	ldr	r2, [pc, #304]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800412c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800412e:	e00c      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3324      	adds	r3, #36	; 0x24
 8004134:	2101      	movs	r1, #1
 8004136:	4618      	mov	r0, r3
 8004138:	f000 fc6e 	bl	8004a18 <RCCEx_PLL3_Config>
 800413c:	4603      	mov	r3, r0
 800413e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004140:	e003      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	75fb      	strb	r3, [r7, #23]
      break;
 8004146:	e000      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8004148:	bf00      	nop
    }

    if(ret == HAL_OK)
 800414a:	7dfb      	ldrb	r3, [r7, #23]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10a      	bne.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004150:	4b41      	ldr	r3, [pc, #260]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004154:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800415e:	493e      	ldr	r1, [pc, #248]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004160:	4313      	orrs	r3, r2
 8004162:	654b      	str	r3, [r1, #84]	; 0x54
 8004164:	e001      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004166:	7dfb      	ldrb	r3, [r7, #23]
 8004168:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d029      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800417e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004182:	d007      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8004184:	e00f      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004186:	4b34      	ldr	r3, [pc, #208]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418a:	4a33      	ldr	r2, [pc, #204]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800418c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004190:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004192:	e00b      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	3304      	adds	r3, #4
 8004198:	2102      	movs	r1, #2
 800419a:	4618      	mov	r0, r3
 800419c:	f000 fb8a 	bl	80048b4 <RCCEx_PLL2_Config>
 80041a0:	4603      	mov	r3, r0
 80041a2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80041a4:	e002      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	75fb      	strb	r3, [r7, #23]
      break;
 80041aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041ac:	7dfb      	ldrb	r3, [r7, #23]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d109      	bne.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80041b2:	4b29      	ldr	r3, [pc, #164]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041be:	4926      	ldr	r1, [pc, #152]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80041c4:	e001      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c6:	7dfb      	ldrb	r3, [r7, #23]
 80041c8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00a      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	3324      	adds	r3, #36	; 0x24
 80041da:	2102      	movs	r1, #2
 80041dc:	4618      	mov	r0, r3
 80041de:	f000 fc1b 	bl	8004a18 <RCCEx_PLL3_Config>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d033      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004200:	d017      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004202:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004206:	d811      	bhi.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004208:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800420c:	d013      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800420e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004212:	d80b      	bhi.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004214:	2b00      	cmp	r3, #0
 8004216:	d010      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004218:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800421c:	d106      	bne.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800421e:	4b0e      	ldr	r3, [pc, #56]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004222:	4a0d      	ldr	r2, [pc, #52]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004228:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800422a:	e007      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	75fb      	strb	r3, [r7, #23]
      break;
 8004230:	e004      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004232:	bf00      	nop
 8004234:	e002      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004236:	bf00      	nop
 8004238:	e000      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800423a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800423c:	7dfb      	ldrb	r3, [r7, #23]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10c      	bne.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004242:	4b05      	ldr	r3, [pc, #20]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004246:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800424e:	4902      	ldr	r1, [pc, #8]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004250:	4313      	orrs	r3, r2
 8004252:	654b      	str	r3, [r1, #84]	; 0x54
 8004254:	e004      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8004256:	bf00      	nop
 8004258:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800425c:	7dfb      	ldrb	r3, [r7, #23]
 800425e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d008      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800426c:	4b31      	ldr	r3, [pc, #196]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800426e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004270:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004278:	492e      	ldr	r1, [pc, #184]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800427a:	4313      	orrs	r3, r2
 800427c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d009      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800428a:	4b2a      	ldr	r3, [pc, #168]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004298:	4926      	ldr	r1, [pc, #152]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800429a:	4313      	orrs	r3, r2
 800429c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d008      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042aa:	4b22      	ldr	r3, [pc, #136]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ae:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042b6:	491f      	ldr	r1, [pc, #124]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00d      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042c8:	4b1a      	ldr	r3, [pc, #104]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	4a19      	ldr	r2, [pc, #100]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80042d2:	6113      	str	r3, [r2, #16]
 80042d4:	4b17      	ldr	r3, [pc, #92]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042d6:	691a      	ldr	r2, [r3, #16]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80042de:	4915      	ldr	r1, [pc, #84]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	da08      	bge.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80042ec:	4b11      	ldr	r3, [pc, #68]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042f0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042f8:	490e      	ldr	r1, [pc, #56]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d009      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800430a:	4b0a      	ldr	r3, [pc, #40]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800430c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004318:	4906      	ldr	r1, [pc, #24]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800431a:	4313      	orrs	r3, r2
 800431c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800431e:	7dbb      	ldrb	r3, [r7, #22]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004324:	2300      	movs	r3, #0
 8004326:	e000      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
}
 800432a:	4618      	mov	r0, r3
 800432c:	3718      	adds	r7, #24
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	58024400 	.word	0x58024400

08004338 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800433c:	f7ff f818 	bl	8003370 <HAL_RCC_GetHCLKFreq>
 8004340:	4602      	mov	r2, r0
 8004342:	4b06      	ldr	r3, [pc, #24]	; (800435c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	091b      	lsrs	r3, r3, #4
 8004348:	f003 0307 	and.w	r3, r3, #7
 800434c:	4904      	ldr	r1, [pc, #16]	; (8004360 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800434e:	5ccb      	ldrb	r3, [r1, r3]
 8004350:	f003 031f 	and.w	r3, r3, #31
 8004354:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004358:	4618      	mov	r0, r3
 800435a:	bd80      	pop	{r7, pc}
 800435c:	58024400 	.word	0x58024400
 8004360:	0800b928 	.word	0x0800b928

08004364 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004364:	b480      	push	{r7}
 8004366:	b089      	sub	sp, #36	; 0x24
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800436c:	4ba1      	ldr	r3, [pc, #644]	; (80045f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800436e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004370:	f003 0303 	and.w	r3, r3, #3
 8004374:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004376:	4b9f      	ldr	r3, [pc, #636]	; (80045f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437a:	0b1b      	lsrs	r3, r3, #12
 800437c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004380:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004382:	4b9c      	ldr	r3, [pc, #624]	; (80045f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004386:	091b      	lsrs	r3, r3, #4
 8004388:	f003 0301 	and.w	r3, r3, #1
 800438c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800438e:	4b99      	ldr	r3, [pc, #612]	; (80045f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004392:	08db      	lsrs	r3, r3, #3
 8004394:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	fb02 f303 	mul.w	r3, r2, r3
 800439e:	ee07 3a90 	vmov	s15, r3
 80043a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 8111 	beq.w	80045d4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	f000 8083 	beq.w	80044c0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	2b02      	cmp	r3, #2
 80043be:	f200 80a1 	bhi.w	8004504 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d003      	beq.n	80043d0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d056      	beq.n	800447c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80043ce:	e099      	b.n	8004504 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043d0:	4b88      	ldr	r3, [pc, #544]	; (80045f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0320 	and.w	r3, r3, #32
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d02d      	beq.n	8004438 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80043dc:	4b85      	ldr	r3, [pc, #532]	; (80045f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	08db      	lsrs	r3, r3, #3
 80043e2:	f003 0303 	and.w	r3, r3, #3
 80043e6:	4a84      	ldr	r2, [pc, #528]	; (80045f8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80043e8:	fa22 f303 	lsr.w	r3, r2, r3
 80043ec:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	ee07 3a90 	vmov	s15, r3
 80043f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	ee07 3a90 	vmov	s15, r3
 80043fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004406:	4b7b      	ldr	r3, [pc, #492]	; (80045f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800440e:	ee07 3a90 	vmov	s15, r3
 8004412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004416:	ed97 6a03 	vldr	s12, [r7, #12]
 800441a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80045fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800441e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800442a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800442e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004432:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004436:	e087      	b.n	8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	ee07 3a90 	vmov	s15, r3
 800443e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004442:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004600 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800444a:	4b6a      	ldr	r3, [pc, #424]	; (80045f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800444c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004452:	ee07 3a90 	vmov	s15, r3
 8004456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800445a:	ed97 6a03 	vldr	s12, [r7, #12]
 800445e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80045fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800446a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800446e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004476:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800447a:	e065      	b.n	8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	ee07 3a90 	vmov	s15, r3
 8004482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004486:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004604 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800448a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800448e:	4b59      	ldr	r3, [pc, #356]	; (80045f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004496:	ee07 3a90 	vmov	s15, r3
 800449a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800449e:	ed97 6a03 	vldr	s12, [r7, #12]
 80044a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 80045fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044be:	e043      	b.n	8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	ee07 3a90 	vmov	s15, r3
 80044c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004608 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80044ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044d2:	4b48      	ldr	r3, [pc, #288]	; (80045f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044da:	ee07 3a90 	vmov	s15, r3
 80044de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80044e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80045fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004502:	e021      	b.n	8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	ee07 3a90 	vmov	s15, r3
 800450a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800450e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004604 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004516:	4b37      	ldr	r3, [pc, #220]	; (80045f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800451e:	ee07 3a90 	vmov	s15, r3
 8004522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004526:	ed97 6a03 	vldr	s12, [r7, #12]
 800452a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80045fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800452e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800453a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800453e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004542:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004546:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004548:	4b2a      	ldr	r3, [pc, #168]	; (80045f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800454a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454c:	0a5b      	lsrs	r3, r3, #9
 800454e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004552:	ee07 3a90 	vmov	s15, r3
 8004556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800455a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800455e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004562:	edd7 6a07 	vldr	s13, [r7, #28]
 8004566:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800456a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800456e:	ee17 2a90 	vmov	r2, s15
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004576:	4b1f      	ldr	r3, [pc, #124]	; (80045f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457a:	0c1b      	lsrs	r3, r3, #16
 800457c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004580:	ee07 3a90 	vmov	s15, r3
 8004584:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004588:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800458c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004590:	edd7 6a07 	vldr	s13, [r7, #28]
 8004594:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004598:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800459c:	ee17 2a90 	vmov	r2, s15
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80045a4:	4b13      	ldr	r3, [pc, #76]	; (80045f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a8:	0e1b      	lsrs	r3, r3, #24
 80045aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045ae:	ee07 3a90 	vmov	s15, r3
 80045b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045be:	edd7 6a07 	vldr	s13, [r7, #28]
 80045c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045ca:	ee17 2a90 	vmov	r2, s15
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80045d2:	e008      	b.n	80045e6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	609a      	str	r2, [r3, #8]
}
 80045e6:	bf00      	nop
 80045e8:	3724      	adds	r7, #36	; 0x24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	58024400 	.word	0x58024400
 80045f8:	03d09000 	.word	0x03d09000
 80045fc:	46000000 	.word	0x46000000
 8004600:	4c742400 	.word	0x4c742400
 8004604:	4a742400 	.word	0x4a742400
 8004608:	4bbebc20 	.word	0x4bbebc20

0800460c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800460c:	b480      	push	{r7}
 800460e:	b089      	sub	sp, #36	; 0x24
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004614:	4ba1      	ldr	r3, [pc, #644]	; (800489c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004618:	f003 0303 	and.w	r3, r3, #3
 800461c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800461e:	4b9f      	ldr	r3, [pc, #636]	; (800489c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004622:	0d1b      	lsrs	r3, r3, #20
 8004624:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004628:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800462a:	4b9c      	ldr	r3, [pc, #624]	; (800489c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800462c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462e:	0a1b      	lsrs	r3, r3, #8
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004636:	4b99      	ldr	r3, [pc, #612]	; (800489c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463a:	08db      	lsrs	r3, r3, #3
 800463c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	fb02 f303 	mul.w	r3, r2, r3
 8004646:	ee07 3a90 	vmov	s15, r3
 800464a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800464e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 8111 	beq.w	800487c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	2b02      	cmp	r3, #2
 800465e:	f000 8083 	beq.w	8004768 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	2b02      	cmp	r3, #2
 8004666:	f200 80a1 	bhi.w	80047ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d003      	beq.n	8004678 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d056      	beq.n	8004724 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004676:	e099      	b.n	80047ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004678:	4b88      	ldr	r3, [pc, #544]	; (800489c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0320 	and.w	r3, r3, #32
 8004680:	2b00      	cmp	r3, #0
 8004682:	d02d      	beq.n	80046e0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004684:	4b85      	ldr	r3, [pc, #532]	; (800489c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	08db      	lsrs	r3, r3, #3
 800468a:	f003 0303 	and.w	r3, r3, #3
 800468e:	4a84      	ldr	r2, [pc, #528]	; (80048a0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004690:	fa22 f303 	lsr.w	r3, r2, r3
 8004694:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	ee07 3a90 	vmov	s15, r3
 800469c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	ee07 3a90 	vmov	s15, r3
 80046a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ae:	4b7b      	ldr	r3, [pc, #492]	; (800489c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046b6:	ee07 3a90 	vmov	s15, r3
 80046ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046be:	ed97 6a03 	vldr	s12, [r7, #12]
 80046c2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80048a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046da:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80046de:	e087      	b.n	80047f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	ee07 3a90 	vmov	s15, r3
 80046e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80048a8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80046ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046f2:	4b6a      	ldr	r3, [pc, #424]	; (800489c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046fa:	ee07 3a90 	vmov	s15, r3
 80046fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004702:	ed97 6a03 	vldr	s12, [r7, #12]
 8004706:	eddf 5a67 	vldr	s11, [pc, #412]	; 80048a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800470a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800470e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004712:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800471a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800471e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004722:	e065      	b.n	80047f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	ee07 3a90 	vmov	s15, r3
 800472a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800472e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80048ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004736:	4b59      	ldr	r3, [pc, #356]	; (800489c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800473e:	ee07 3a90 	vmov	s15, r3
 8004742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004746:	ed97 6a03 	vldr	s12, [r7, #12]
 800474a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80048a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800474e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004756:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800475a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800475e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004762:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004766:	e043      	b.n	80047f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	ee07 3a90 	vmov	s15, r3
 800476e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004772:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80048b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800477a:	4b48      	ldr	r3, [pc, #288]	; (800489c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004782:	ee07 3a90 	vmov	s15, r3
 8004786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800478a:	ed97 6a03 	vldr	s12, [r7, #12]
 800478e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80048a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800479a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800479e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047aa:	e021      	b.n	80047f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	ee07 3a90 	vmov	s15, r3
 80047b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047b6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80048ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80047ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047be:	4b37      	ldr	r3, [pc, #220]	; (800489c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047c6:	ee07 3a90 	vmov	s15, r3
 80047ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80047d2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80048a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047ee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80047f0:	4b2a      	ldr	r3, [pc, #168]	; (800489c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f4:	0a5b      	lsrs	r3, r3, #9
 80047f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047fa:	ee07 3a90 	vmov	s15, r3
 80047fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004802:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004806:	ee37 7a87 	vadd.f32	s14, s15, s14
 800480a:	edd7 6a07 	vldr	s13, [r7, #28]
 800480e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004812:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004816:	ee17 2a90 	vmov	r2, s15
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800481e:	4b1f      	ldr	r3, [pc, #124]	; (800489c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004822:	0c1b      	lsrs	r3, r3, #16
 8004824:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004828:	ee07 3a90 	vmov	s15, r3
 800482c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004830:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004834:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004838:	edd7 6a07 	vldr	s13, [r7, #28]
 800483c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004840:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004844:	ee17 2a90 	vmov	r2, s15
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800484c:	4b13      	ldr	r3, [pc, #76]	; (800489c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800484e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004850:	0e1b      	lsrs	r3, r3, #24
 8004852:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004856:	ee07 3a90 	vmov	s15, r3
 800485a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800485e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004862:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004866:	edd7 6a07 	vldr	s13, [r7, #28]
 800486a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800486e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004872:	ee17 2a90 	vmov	r2, s15
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800487a:	e008      	b.n	800488e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	609a      	str	r2, [r3, #8]
}
 800488e:	bf00      	nop
 8004890:	3724      	adds	r7, #36	; 0x24
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	58024400 	.word	0x58024400
 80048a0:	03d09000 	.word	0x03d09000
 80048a4:	46000000 	.word	0x46000000
 80048a8:	4c742400 	.word	0x4c742400
 80048ac:	4a742400 	.word	0x4a742400
 80048b0:	4bbebc20 	.word	0x4bbebc20

080048b4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048be:	2300      	movs	r3, #0
 80048c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80048c2:	4b53      	ldr	r3, [pc, #332]	; (8004a10 <RCCEx_PLL2_Config+0x15c>)
 80048c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c6:	f003 0303 	and.w	r3, r3, #3
 80048ca:	2b03      	cmp	r3, #3
 80048cc:	d101      	bne.n	80048d2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e099      	b.n	8004a06 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80048d2:	4b4f      	ldr	r3, [pc, #316]	; (8004a10 <RCCEx_PLL2_Config+0x15c>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a4e      	ldr	r2, [pc, #312]	; (8004a10 <RCCEx_PLL2_Config+0x15c>)
 80048d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048de:	f7fc ff3b 	bl	8001758 <HAL_GetTick>
 80048e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80048e4:	e008      	b.n	80048f8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80048e6:	f7fc ff37 	bl	8001758 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d901      	bls.n	80048f8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e086      	b.n	8004a06 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80048f8:	4b45      	ldr	r3, [pc, #276]	; (8004a10 <RCCEx_PLL2_Config+0x15c>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1f0      	bne.n	80048e6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004904:	4b42      	ldr	r3, [pc, #264]	; (8004a10 <RCCEx_PLL2_Config+0x15c>)
 8004906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004908:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	031b      	lsls	r3, r3, #12
 8004912:	493f      	ldr	r1, [pc, #252]	; (8004a10 <RCCEx_PLL2_Config+0x15c>)
 8004914:	4313      	orrs	r3, r2
 8004916:	628b      	str	r3, [r1, #40]	; 0x28
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	3b01      	subs	r3, #1
 800491e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	3b01      	subs	r3, #1
 8004928:	025b      	lsls	r3, r3, #9
 800492a:	b29b      	uxth	r3, r3
 800492c:	431a      	orrs	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	3b01      	subs	r3, #1
 8004934:	041b      	lsls	r3, r3, #16
 8004936:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800493a:	431a      	orrs	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	3b01      	subs	r3, #1
 8004942:	061b      	lsls	r3, r3, #24
 8004944:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004948:	4931      	ldr	r1, [pc, #196]	; (8004a10 <RCCEx_PLL2_Config+0x15c>)
 800494a:	4313      	orrs	r3, r2
 800494c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800494e:	4b30      	ldr	r3, [pc, #192]	; (8004a10 <RCCEx_PLL2_Config+0x15c>)
 8004950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004952:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	492d      	ldr	r1, [pc, #180]	; (8004a10 <RCCEx_PLL2_Config+0x15c>)
 800495c:	4313      	orrs	r3, r2
 800495e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004960:	4b2b      	ldr	r3, [pc, #172]	; (8004a10 <RCCEx_PLL2_Config+0x15c>)
 8004962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004964:	f023 0220 	bic.w	r2, r3, #32
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	4928      	ldr	r1, [pc, #160]	; (8004a10 <RCCEx_PLL2_Config+0x15c>)
 800496e:	4313      	orrs	r3, r2
 8004970:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004972:	4b27      	ldr	r3, [pc, #156]	; (8004a10 <RCCEx_PLL2_Config+0x15c>)
 8004974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004976:	4a26      	ldr	r2, [pc, #152]	; (8004a10 <RCCEx_PLL2_Config+0x15c>)
 8004978:	f023 0310 	bic.w	r3, r3, #16
 800497c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800497e:	4b24      	ldr	r3, [pc, #144]	; (8004a10 <RCCEx_PLL2_Config+0x15c>)
 8004980:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004982:	4b24      	ldr	r3, [pc, #144]	; (8004a14 <RCCEx_PLL2_Config+0x160>)
 8004984:	4013      	ands	r3, r2
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	69d2      	ldr	r2, [r2, #28]
 800498a:	00d2      	lsls	r2, r2, #3
 800498c:	4920      	ldr	r1, [pc, #128]	; (8004a10 <RCCEx_PLL2_Config+0x15c>)
 800498e:	4313      	orrs	r3, r2
 8004990:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004992:	4b1f      	ldr	r3, [pc, #124]	; (8004a10 <RCCEx_PLL2_Config+0x15c>)
 8004994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004996:	4a1e      	ldr	r2, [pc, #120]	; (8004a10 <RCCEx_PLL2_Config+0x15c>)
 8004998:	f043 0310 	orr.w	r3, r3, #16
 800499c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d106      	bne.n	80049b2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80049a4:	4b1a      	ldr	r3, [pc, #104]	; (8004a10 <RCCEx_PLL2_Config+0x15c>)
 80049a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a8:	4a19      	ldr	r2, [pc, #100]	; (8004a10 <RCCEx_PLL2_Config+0x15c>)
 80049aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80049b0:	e00f      	b.n	80049d2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d106      	bne.n	80049c6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80049b8:	4b15      	ldr	r3, [pc, #84]	; (8004a10 <RCCEx_PLL2_Config+0x15c>)
 80049ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049bc:	4a14      	ldr	r2, [pc, #80]	; (8004a10 <RCCEx_PLL2_Config+0x15c>)
 80049be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80049c4:	e005      	b.n	80049d2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80049c6:	4b12      	ldr	r3, [pc, #72]	; (8004a10 <RCCEx_PLL2_Config+0x15c>)
 80049c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ca:	4a11      	ldr	r2, [pc, #68]	; (8004a10 <RCCEx_PLL2_Config+0x15c>)
 80049cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80049d2:	4b0f      	ldr	r3, [pc, #60]	; (8004a10 <RCCEx_PLL2_Config+0x15c>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a0e      	ldr	r2, [pc, #56]	; (8004a10 <RCCEx_PLL2_Config+0x15c>)
 80049d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049de:	f7fc febb 	bl	8001758 <HAL_GetTick>
 80049e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80049e4:	e008      	b.n	80049f8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80049e6:	f7fc feb7 	bl	8001758 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d901      	bls.n	80049f8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e006      	b.n	8004a06 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80049f8:	4b05      	ldr	r3, [pc, #20]	; (8004a10 <RCCEx_PLL2_Config+0x15c>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d0f0      	beq.n	80049e6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3710      	adds	r7, #16
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	58024400 	.word	0x58024400
 8004a14:	ffff0007 	.word	0xffff0007

08004a18 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a22:	2300      	movs	r3, #0
 8004a24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a26:	4b53      	ldr	r3, [pc, #332]	; (8004b74 <RCCEx_PLL3_Config+0x15c>)
 8004a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2a:	f003 0303 	and.w	r3, r3, #3
 8004a2e:	2b03      	cmp	r3, #3
 8004a30:	d101      	bne.n	8004a36 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e099      	b.n	8004b6a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004a36:	4b4f      	ldr	r3, [pc, #316]	; (8004b74 <RCCEx_PLL3_Config+0x15c>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a4e      	ldr	r2, [pc, #312]	; (8004b74 <RCCEx_PLL3_Config+0x15c>)
 8004a3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a42:	f7fc fe89 	bl	8001758 <HAL_GetTick>
 8004a46:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004a48:	e008      	b.n	8004a5c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004a4a:	f7fc fe85 	bl	8001758 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d901      	bls.n	8004a5c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e086      	b.n	8004b6a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004a5c:	4b45      	ldr	r3, [pc, #276]	; (8004b74 <RCCEx_PLL3_Config+0x15c>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1f0      	bne.n	8004a4a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004a68:	4b42      	ldr	r3, [pc, #264]	; (8004b74 <RCCEx_PLL3_Config+0x15c>)
 8004a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	051b      	lsls	r3, r3, #20
 8004a76:	493f      	ldr	r1, [pc, #252]	; (8004b74 <RCCEx_PLL3_Config+0x15c>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	628b      	str	r3, [r1, #40]	; 0x28
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	3b01      	subs	r3, #1
 8004a82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	025b      	lsls	r3, r3, #9
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	431a      	orrs	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	3b01      	subs	r3, #1
 8004a98:	041b      	lsls	r3, r3, #16
 8004a9a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	061b      	lsls	r3, r3, #24
 8004aa8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004aac:	4931      	ldr	r1, [pc, #196]	; (8004b74 <RCCEx_PLL3_Config+0x15c>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004ab2:	4b30      	ldr	r3, [pc, #192]	; (8004b74 <RCCEx_PLL3_Config+0x15c>)
 8004ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	492d      	ldr	r1, [pc, #180]	; (8004b74 <RCCEx_PLL3_Config+0x15c>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004ac4:	4b2b      	ldr	r3, [pc, #172]	; (8004b74 <RCCEx_PLL3_Config+0x15c>)
 8004ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	4928      	ldr	r1, [pc, #160]	; (8004b74 <RCCEx_PLL3_Config+0x15c>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004ad6:	4b27      	ldr	r3, [pc, #156]	; (8004b74 <RCCEx_PLL3_Config+0x15c>)
 8004ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ada:	4a26      	ldr	r2, [pc, #152]	; (8004b74 <RCCEx_PLL3_Config+0x15c>)
 8004adc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ae0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004ae2:	4b24      	ldr	r3, [pc, #144]	; (8004b74 <RCCEx_PLL3_Config+0x15c>)
 8004ae4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ae6:	4b24      	ldr	r3, [pc, #144]	; (8004b78 <RCCEx_PLL3_Config+0x160>)
 8004ae8:	4013      	ands	r3, r2
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	69d2      	ldr	r2, [r2, #28]
 8004aee:	00d2      	lsls	r2, r2, #3
 8004af0:	4920      	ldr	r1, [pc, #128]	; (8004b74 <RCCEx_PLL3_Config+0x15c>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004af6:	4b1f      	ldr	r3, [pc, #124]	; (8004b74 <RCCEx_PLL3_Config+0x15c>)
 8004af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afa:	4a1e      	ldr	r2, [pc, #120]	; (8004b74 <RCCEx_PLL3_Config+0x15c>)
 8004afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d106      	bne.n	8004b16 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004b08:	4b1a      	ldr	r3, [pc, #104]	; (8004b74 <RCCEx_PLL3_Config+0x15c>)
 8004b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0c:	4a19      	ldr	r2, [pc, #100]	; (8004b74 <RCCEx_PLL3_Config+0x15c>)
 8004b0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b12:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b14:	e00f      	b.n	8004b36 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d106      	bne.n	8004b2a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004b1c:	4b15      	ldr	r3, [pc, #84]	; (8004b74 <RCCEx_PLL3_Config+0x15c>)
 8004b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b20:	4a14      	ldr	r2, [pc, #80]	; (8004b74 <RCCEx_PLL3_Config+0x15c>)
 8004b22:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b28:	e005      	b.n	8004b36 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004b2a:	4b12      	ldr	r3, [pc, #72]	; (8004b74 <RCCEx_PLL3_Config+0x15c>)
 8004b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2e:	4a11      	ldr	r2, [pc, #68]	; (8004b74 <RCCEx_PLL3_Config+0x15c>)
 8004b30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b34:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004b36:	4b0f      	ldr	r3, [pc, #60]	; (8004b74 <RCCEx_PLL3_Config+0x15c>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a0e      	ldr	r2, [pc, #56]	; (8004b74 <RCCEx_PLL3_Config+0x15c>)
 8004b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b42:	f7fc fe09 	bl	8001758 <HAL_GetTick>
 8004b46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004b48:	e008      	b.n	8004b5c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004b4a:	f7fc fe05 	bl	8001758 <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d901      	bls.n	8004b5c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e006      	b.n	8004b6a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004b5c:	4b05      	ldr	r3, [pc, #20]	; (8004b74 <RCCEx_PLL3_Config+0x15c>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d0f0      	beq.n	8004b4a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	58024400 	.word	0x58024400
 8004b78:	ffff0007 	.word	0xffff0007

08004b7c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d101      	bne.n	8004b8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e0f1      	b.n	8004d72 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a78      	ldr	r2, [pc, #480]	; (8004d7c <HAL_SPI_Init+0x200>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d00f      	beq.n	8004bbe <HAL_SPI_Init+0x42>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a77      	ldr	r2, [pc, #476]	; (8004d80 <HAL_SPI_Init+0x204>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d00a      	beq.n	8004bbe <HAL_SPI_Init+0x42>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a75      	ldr	r2, [pc, #468]	; (8004d84 <HAL_SPI_Init+0x208>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d005      	beq.n	8004bbe <HAL_SPI_Init+0x42>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	2b0f      	cmp	r3, #15
 8004bb8:	d901      	bls.n	8004bbe <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e0d9      	b.n	8004d72 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 ff66 	bl	8005a90 <SPI_GetPacketSize>
 8004bc4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a6c      	ldr	r2, [pc, #432]	; (8004d7c <HAL_SPI_Init+0x200>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d00c      	beq.n	8004bea <HAL_SPI_Init+0x6e>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a6a      	ldr	r2, [pc, #424]	; (8004d80 <HAL_SPI_Init+0x204>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d007      	beq.n	8004bea <HAL_SPI_Init+0x6e>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a69      	ldr	r2, [pc, #420]	; (8004d84 <HAL_SPI_Init+0x208>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d002      	beq.n	8004bea <HAL_SPI_Init+0x6e>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2b08      	cmp	r3, #8
 8004be8:	d811      	bhi.n	8004c0e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004bee:	4a63      	ldr	r2, [pc, #396]	; (8004d7c <HAL_SPI_Init+0x200>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d009      	beq.n	8004c08 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a61      	ldr	r2, [pc, #388]	; (8004d80 <HAL_SPI_Init+0x204>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d004      	beq.n	8004c08 <HAL_SPI_Init+0x8c>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a60      	ldr	r2, [pc, #384]	; (8004d84 <HAL_SPI_Init+0x208>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d104      	bne.n	8004c12 <HAL_SPI_Init+0x96>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2b10      	cmp	r3, #16
 8004c0c:	d901      	bls.n	8004c12 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e0af      	b.n	8004d72 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d106      	bne.n	8004c2c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f7fc fac4 	bl	80011b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2202      	movs	r2, #2
 8004c30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 0201 	bic.w	r2, r2, #1
 8004c42:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8004c4e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c58:	d119      	bne.n	8004c8e <HAL_SPI_Init+0x112>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c62:	d103      	bne.n	8004c6c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d008      	beq.n	8004c7e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10c      	bne.n	8004c8e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004c78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c7c:	d107      	bne.n	8004c8e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c8c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	69da      	ldr	r2, [r3, #28]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c96:	431a      	orrs	r2, r3
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca0:	ea42 0103 	orr.w	r1, r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	68da      	ldr	r2, [r3, #12]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	430a      	orrs	r2, r1
 8004cae:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb8:	431a      	orrs	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cee:	ea42 0103 	orr.w	r1, r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d113      	bne.n	8004d2e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d18:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d2c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 0201 	bic.w	r2, r2, #1
 8004d3c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00a      	beq.n	8004d60 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	430a      	orrs	r2, r1
 8004d5e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	40013000 	.word	0x40013000
 8004d80:	40003800 	.word	0x40003800
 8004d84:	40003c00 	.word	0x40003c00

08004d88 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b08a      	sub	sp, #40	; 0x28
 8004d8c:	af02      	add	r7, sp, #8
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	603b      	str	r3, [r7, #0]
 8004d94:	4613      	mov	r3, r2
 8004d96:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	3320      	adds	r3, #32
 8004d9e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004da0:	2300      	movs	r3, #0
 8004da2:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d101      	bne.n	8004db2 <HAL_SPI_Transmit+0x2a>
 8004dae:	2302      	movs	r3, #2
 8004db0:	e1d7      	b.n	8005162 <HAL_SPI_Transmit+0x3da>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004dba:	f7fc fccd 	bl	8001758 <HAL_GetTick>
 8004dbe:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d007      	beq.n	8004ddc <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8004dcc:	2302      	movs	r3, #2
 8004dce:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004dd8:	7efb      	ldrb	r3, [r7, #27]
 8004dda:	e1c2      	b.n	8005162 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d002      	beq.n	8004de8 <HAL_SPI_Transmit+0x60>
 8004de2:	88fb      	ldrh	r3, [r7, #6]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d107      	bne.n	8004df8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004df4:	7efb      	ldrb	r3, [r7, #27]
 8004df6:	e1b4      	b.n	8005162 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2203      	movs	r2, #3
 8004dfc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	88fa      	ldrh	r2, [r7, #6]
 8004e12:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	88fa      	ldrh	r2, [r7, #6]
 8004e1a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8004e48:	d107      	bne.n	8004e5a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e58:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	4b96      	ldr	r3, [pc, #600]	; (80050bc <HAL_SPI_Transmit+0x334>)
 8004e62:	4013      	ands	r3, r2
 8004e64:	88f9      	ldrh	r1, [r7, #6]
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	6812      	ldr	r2, [r2, #0]
 8004e6a:	430b      	orrs	r3, r1
 8004e6c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f042 0201 	orr.w	r2, r2, #1
 8004e7c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e86:	d107      	bne.n	8004e98 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	2b0f      	cmp	r3, #15
 8004e9e:	d947      	bls.n	8004f30 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004ea0:	e03f      	b.n	8004f22 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	695b      	ldr	r3, [r3, #20]
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d114      	bne.n	8004eda <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6812      	ldr	r2, [r2, #0]
 8004eba:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec0:	1d1a      	adds	r2, r3, #4
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004ed8:	e023      	b.n	8004f22 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004eda:	f7fc fc3d 	bl	8001758 <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	683a      	ldr	r2, [r7, #0]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d803      	bhi.n	8004ef2 <HAL_SPI_Transmit+0x16a>
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef0:	d102      	bne.n	8004ef8 <HAL_SPI_Transmit+0x170>
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d114      	bne.n	8004f22 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f000 fcfb 	bl	80058f4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e11f      	b.n	8005162 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1b9      	bne.n	8004ea2 <HAL_SPI_Transmit+0x11a>
 8004f2e:	e0f2      	b.n	8005116 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	2b07      	cmp	r3, #7
 8004f36:	f240 80e7 	bls.w	8005108 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004f3a:	e05d      	b.n	8004ff8 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d132      	bne.n	8004fb0 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d918      	bls.n	8004f88 <HAL_SPI_Transmit+0x200>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d014      	beq.n	8004f88 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	6812      	ldr	r2, [r2, #0]
 8004f68:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f6e:	1d1a      	adds	r2, r3, #4
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	3b02      	subs	r3, #2
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004f86:	e037      	b.n	8004ff8 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f8c:	881a      	ldrh	r2, [r3, #0]
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f96:	1c9a      	adds	r2, r3, #2
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004fae:	e023      	b.n	8004ff8 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fb0:	f7fc fbd2 	bl	8001758 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	683a      	ldr	r2, [r7, #0]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d803      	bhi.n	8004fc8 <HAL_SPI_Transmit+0x240>
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc6:	d102      	bne.n	8004fce <HAL_SPI_Transmit+0x246>
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d114      	bne.n	8004ff8 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f000 fc90 	bl	80058f4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fe2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e0b4      	b.n	8005162 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	2b00      	cmp	r3, #0
 8005002:	d19b      	bne.n	8004f3c <HAL_SPI_Transmit+0x1b4>
 8005004:	e087      	b.n	8005116 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	f003 0302 	and.w	r3, r3, #2
 8005010:	2b02      	cmp	r3, #2
 8005012:	d155      	bne.n	80050c0 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800501a:	b29b      	uxth	r3, r3
 800501c:	2b03      	cmp	r3, #3
 800501e:	d918      	bls.n	8005052 <HAL_SPI_Transmit+0x2ca>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005024:	2b40      	cmp	r3, #64	; 0x40
 8005026:	d914      	bls.n	8005052 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	6812      	ldr	r2, [r2, #0]
 8005032:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005038:	1d1a      	adds	r2, r3, #4
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005044:	b29b      	uxth	r3, r3
 8005046:	3b04      	subs	r3, #4
 8005048:	b29a      	uxth	r2, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005050:	e05a      	b.n	8005108 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005058:	b29b      	uxth	r3, r3
 800505a:	2b01      	cmp	r3, #1
 800505c:	d917      	bls.n	800508e <HAL_SPI_Transmit+0x306>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005062:	2b00      	cmp	r3, #0
 8005064:	d013      	beq.n	800508e <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800506a:	881a      	ldrh	r2, [r3, #0]
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005074:	1c9a      	adds	r2, r3, #2
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005080:	b29b      	uxth	r3, r3
 8005082:	3b02      	subs	r3, #2
 8005084:	b29a      	uxth	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800508c:	e03c      	b.n	8005108 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	3320      	adds	r3, #32
 8005098:	7812      	ldrb	r2, [r2, #0]
 800509a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050a0:	1c5a      	adds	r2, r3, #1
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	3b01      	subs	r3, #1
 80050b0:	b29a      	uxth	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80050b8:	e026      	b.n	8005108 <HAL_SPI_Transmit+0x380>
 80050ba:	bf00      	nop
 80050bc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050c0:	f7fc fb4a 	bl	8001758 <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	683a      	ldr	r2, [r7, #0]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d803      	bhi.n	80050d8 <HAL_SPI_Transmit+0x350>
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d6:	d102      	bne.n	80050de <HAL_SPI_Transmit+0x356>
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d114      	bne.n	8005108 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f000 fc08 	bl	80058f4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e02c      	b.n	8005162 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800510e:	b29b      	uxth	r3, r3
 8005110:	2b00      	cmp	r3, #0
 8005112:	f47f af78 	bne.w	8005006 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	2200      	movs	r2, #0
 800511e:	2108      	movs	r1, #8
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f000 fc87 	bl	8005a34 <SPI_WaitOnFlagUntilTimeout>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d007      	beq.n	800513c <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005132:	f043 0220 	orr.w	r2, r3, #32
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f000 fbd9 	bl	80058f4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005158:	2b00      	cmp	r3, #0
 800515a:	d001      	beq.n	8005160 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e000      	b.n	8005162 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8005160:	7efb      	ldrb	r3, [r7, #27]
}
 8005162:	4618      	mov	r0, r3
 8005164:	3720      	adds	r7, #32
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop

0800516c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b08a      	sub	sp, #40	; 0x28
 8005170:	af02      	add	r7, sp, #8
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	603b      	str	r3, [r7, #0]
 8005178:	4613      	mov	r3, r2
 800517a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800517c:	2300      	movs	r3, #0
 800517e:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	3330      	adds	r3, #48	; 0x30
 8005186:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005190:	d112      	bne.n	80051b8 <HAL_SPI_Receive+0x4c>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10e      	bne.n	80051b8 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2204      	movs	r2, #4
 800519e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80051a2:	88fa      	ldrh	r2, [r7, #6]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	9300      	str	r3, [sp, #0]
 80051a8:	4613      	mov	r3, r2
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	68b9      	ldr	r1, [r7, #8]
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f000 f978 	bl	80054a4 <HAL_SPI_TransmitReceive>
 80051b4:	4603      	mov	r3, r0
 80051b6:	e16f      	b.n	8005498 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d101      	bne.n	80051c6 <HAL_SPI_Receive+0x5a>
 80051c2:	2302      	movs	r3, #2
 80051c4:	e168      	b.n	8005498 <HAL_SPI_Receive+0x32c>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2201      	movs	r2, #1
 80051ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051ce:	f7fc fac3 	bl	8001758 <HAL_GetTick>
 80051d2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d007      	beq.n	80051f0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 80051e0:	2302      	movs	r3, #2
 80051e2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80051ec:	7ffb      	ldrb	r3, [r7, #31]
 80051ee:	e153      	b.n	8005498 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d002      	beq.n	80051fc <HAL_SPI_Receive+0x90>
 80051f6:	88fb      	ldrh	r3, [r7, #6]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d107      	bne.n	800520c <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005208:	7ffb      	ldrb	r3, [r7, #31]
 800520a:	e145      	b.n	8005498 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2204      	movs	r2, #4
 8005210:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2200      	movs	r2, #0
 8005218:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	88fa      	ldrh	r2, [r7, #6]
 8005226:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	88fa      	ldrh	r2, [r7, #6]
 800522e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800525c:	d107      	bne.n	800526e <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800526c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	685a      	ldr	r2, [r3, #4]
 8005274:	4b8a      	ldr	r3, [pc, #552]	; (80054a0 <HAL_SPI_Receive+0x334>)
 8005276:	4013      	ands	r3, r2
 8005278:	88f9      	ldrh	r1, [r7, #6]
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	6812      	ldr	r2, [r2, #0]
 800527e:	430b      	orrs	r3, r1
 8005280:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f042 0201 	orr.w	r2, r2, #1
 8005290:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800529a:	d107      	bne.n	80052ac <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052aa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	2b0f      	cmp	r3, #15
 80052b2:	d948      	bls.n	8005346 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80052b4:	e040      	b.n	8005338 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	695a      	ldr	r2, [r3, #20]
 80052bc:	f248 0308 	movw	r3, #32776	; 0x8008
 80052c0:	4013      	ands	r3, r2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d014      	beq.n	80052f0 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052ce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80052d0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052d6:	1d1a      	adds	r2, r3, #4
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	3b01      	subs	r3, #1
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80052ee:	e023      	b.n	8005338 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052f0:	f7fc fa32 	bl	8001758 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d803      	bhi.n	8005308 <HAL_SPI_Receive+0x19c>
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005306:	d102      	bne.n	800530e <HAL_SPI_Receive+0x1a2>
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d114      	bne.n	8005338 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f000 faf0 	bl	80058f4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005322:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e0af      	b.n	8005498 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800533e:	b29b      	uxth	r3, r3
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1b8      	bne.n	80052b6 <HAL_SPI_Receive+0x14a>
 8005344:	e095      	b.n	8005472 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	2b07      	cmp	r3, #7
 800534c:	f240 808b 	bls.w	8005466 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005350:	e03f      	b.n	80053d2 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	f003 0301 	and.w	r3, r3, #1
 800535c:	2b01      	cmp	r3, #1
 800535e:	d114      	bne.n	800538a <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005364:	69ba      	ldr	r2, [r7, #24]
 8005366:	8812      	ldrh	r2, [r2, #0]
 8005368:	b292      	uxth	r2, r2
 800536a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005370:	1c9a      	adds	r2, r3, #2
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800537c:	b29b      	uxth	r3, r3
 800537e:	3b01      	subs	r3, #1
 8005380:	b29a      	uxth	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005388:	e023      	b.n	80053d2 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800538a:	f7fc f9e5 	bl	8001758 <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	683a      	ldr	r2, [r7, #0]
 8005396:	429a      	cmp	r2, r3
 8005398:	d803      	bhi.n	80053a2 <HAL_SPI_Receive+0x236>
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a0:	d102      	bne.n	80053a8 <HAL_SPI_Receive+0x23c>
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d114      	bne.n	80053d2 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f000 faa3 	bl	80058f4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e062      	b.n	8005498 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80053d8:	b29b      	uxth	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1b9      	bne.n	8005352 <HAL_SPI_Receive+0x1e6>
 80053de:	e048      	b.n	8005472 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	f003 0301 	and.w	r3, r3, #1
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d117      	bne.n	800541e <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053fa:	7812      	ldrb	r2, [r2, #0]
 80053fc:	b2d2      	uxtb	r2, r2
 80053fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005404:	1c5a      	adds	r2, r3, #1
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005410:	b29b      	uxth	r3, r3
 8005412:	3b01      	subs	r3, #1
 8005414:	b29a      	uxth	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800541c:	e023      	b.n	8005466 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800541e:	f7fc f99b 	bl	8001758 <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	683a      	ldr	r2, [r7, #0]
 800542a:	429a      	cmp	r2, r3
 800542c:	d803      	bhi.n	8005436 <HAL_SPI_Receive+0x2ca>
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005434:	d102      	bne.n	800543c <HAL_SPI_Receive+0x2d0>
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d114      	bne.n	8005466 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	f000 fa59 	bl	80058f4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005450:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e018      	b.n	8005498 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800546c:	b29b      	uxth	r3, r3
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1b6      	bne.n	80053e0 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f000 fa3e 	bl	80058f4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800548e:	2b00      	cmp	r3, #0
 8005490:	d001      	beq.n	8005496 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e000      	b.n	8005498 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 8005496:	7ffb      	ldrb	r3, [r7, #31]
}
 8005498:	4618      	mov	r0, r3
 800549a:	3720      	adds	r7, #32
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	ffff0000 	.word	0xffff0000

080054a4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b08e      	sub	sp, #56	; 0x38
 80054a8:	af02      	add	r7, sp, #8
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
 80054b0:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054b2:	2300      	movs	r3, #0
 80054b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	3320      	adds	r3, #32
 80054be:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	3330      	adds	r3, #48	; 0x30
 80054c6:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d101      	bne.n	80054d6 <HAL_SPI_TransmitReceive+0x32>
 80054d2:	2302      	movs	r3, #2
 80054d4:	e209      	b.n	80058ea <HAL_SPI_TransmitReceive+0x446>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054de:	f7fc f93b 	bl	8001758 <HAL_GetTick>
 80054e2:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 80054e4:	887b      	ldrh	r3, [r7, #2]
 80054e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 80054e8:	887b      	ldrh	r3, [r7, #2]
 80054ea:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80054f2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80054fa:	7efb      	ldrb	r3, [r7, #27]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d014      	beq.n	800552a <HAL_SPI_TransmitReceive+0x86>
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005506:	d106      	bne.n	8005516 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800550c:	2b00      	cmp	r3, #0
 800550e:	d102      	bne.n	8005516 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8005510:	7efb      	ldrb	r3, [r7, #27]
 8005512:	2b04      	cmp	r3, #4
 8005514:	d009      	beq.n	800552a <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8005516:	2302      	movs	r3, #2
 8005518:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005524:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005528:	e1df      	b.n	80058ea <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d005      	beq.n	800553c <HAL_SPI_TransmitReceive+0x98>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d002      	beq.n	800553c <HAL_SPI_TransmitReceive+0x98>
 8005536:	887b      	ldrh	r3, [r7, #2]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d109      	bne.n	8005550 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800554a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800554e:	e1cc      	b.n	80058ea <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005556:	b2db      	uxtb	r3, r3
 8005558:	2b04      	cmp	r3, #4
 800555a:	d003      	beq.n	8005564 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2205      	movs	r2, #5
 8005560:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	887a      	ldrh	r2, [r7, #2]
 8005576:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	887a      	ldrh	r2, [r7, #2]
 800557e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	887a      	ldrh	r2, [r7, #2]
 800558c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	887a      	ldrh	r2, [r7, #2]
 8005594:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	685a      	ldr	r2, [r3, #4]
 80055aa:	4b82      	ldr	r3, [pc, #520]	; (80057b4 <HAL_SPI_TransmitReceive+0x310>)
 80055ac:	4013      	ands	r3, r2
 80055ae:	8879      	ldrh	r1, [r7, #2]
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	6812      	ldr	r2, [r2, #0]
 80055b4:	430b      	orrs	r3, r1
 80055b6:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f042 0201 	orr.w	r2, r2, #1
 80055c6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055d0:	d107      	bne.n	80055e2 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	2b0f      	cmp	r3, #15
 80055e8:	d970      	bls.n	80056cc <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80055ea:	e068      	b.n	80056be <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d11a      	bne.n	8005630 <HAL_SPI_TransmitReceive+0x18c>
 80055fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d017      	beq.n	8005630 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6812      	ldr	r2, [r2, #0]
 800560a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005610:	1d1a      	adds	r2, r3, #4
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800561c:	b29b      	uxth	r3, r3
 800561e:	3b01      	subs	r3, #1
 8005620:	b29a      	uxth	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800562e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	695a      	ldr	r2, [r3, #20]
 8005636:	f248 0308 	movw	r3, #32776	; 0x8008
 800563a:	4013      	ands	r3, r2
 800563c:	2b00      	cmp	r3, #0
 800563e:	d01a      	beq.n	8005676 <HAL_SPI_TransmitReceive+0x1d2>
 8005640:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005642:	2b00      	cmp	r3, #0
 8005644:	d017      	beq.n	8005676 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800564e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005650:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005656:	1d1a      	adds	r2, r3, #4
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005662:	b29b      	uxth	r3, r3
 8005664:	3b01      	subs	r3, #1
 8005666:	b29a      	uxth	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005674:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005676:	f7fc f86f 	bl	8001758 <HAL_GetTick>
 800567a:	4602      	mov	r2, r0
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005682:	429a      	cmp	r2, r3
 8005684:	d803      	bhi.n	800568e <HAL_SPI_TransmitReceive+0x1ea>
 8005686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800568c:	d102      	bne.n	8005694 <HAL_SPI_TransmitReceive+0x1f0>
 800568e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005690:	2b00      	cmp	r3, #0
 8005692:	d114      	bne.n	80056be <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	f000 f92d 	bl	80058f4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e115      	b.n	80058ea <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80056be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d193      	bne.n	80055ec <HAL_SPI_TransmitReceive+0x148>
 80056c4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d190      	bne.n	80055ec <HAL_SPI_TransmitReceive+0x148>
 80056ca:	e0e7      	b.n	800589c <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	2b07      	cmp	r3, #7
 80056d2:	f240 80dd 	bls.w	8005890 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80056d6:	e066      	b.n	80057a6 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	f003 0302 	and.w	r3, r3, #2
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d119      	bne.n	800571a <HAL_SPI_TransmitReceive+0x276>
 80056e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d016      	beq.n	800571a <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056f0:	881a      	ldrh	r2, [r3, #0]
 80056f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f4:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056fa:	1c9a      	adds	r2, r3, #2
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005706:	b29b      	uxth	r3, r3
 8005708:	3b01      	subs	r3, #1
 800570a:	b29a      	uxth	r2, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005718:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	695b      	ldr	r3, [r3, #20]
 8005720:	f003 0301 	and.w	r3, r3, #1
 8005724:	2b01      	cmp	r3, #1
 8005726:	d11a      	bne.n	800575e <HAL_SPI_TransmitReceive+0x2ba>
 8005728:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800572a:	2b00      	cmp	r3, #0
 800572c:	d017      	beq.n	800575e <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005732:	6a3a      	ldr	r2, [r7, #32]
 8005734:	8812      	ldrh	r2, [r2, #0]
 8005736:	b292      	uxth	r2, r2
 8005738:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800573e:	1c9a      	adds	r2, r3, #2
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800574a:	b29b      	uxth	r3, r3
 800574c:	3b01      	subs	r3, #1
 800574e:	b29a      	uxth	r2, r3
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800575c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800575e:	f7fb fffb 	bl	8001758 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800576a:	429a      	cmp	r2, r3
 800576c:	d803      	bhi.n	8005776 <HAL_SPI_TransmitReceive+0x2d2>
 800576e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005774:	d102      	bne.n	800577c <HAL_SPI_TransmitReceive+0x2d8>
 8005776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005778:	2b00      	cmp	r3, #0
 800577a:	d114      	bne.n	80057a6 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f000 f8b9 	bl	80058f4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005790:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e0a1      	b.n	80058ea <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80057a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d195      	bne.n	80056d8 <HAL_SPI_TransmitReceive+0x234>
 80057ac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d192      	bne.n	80056d8 <HAL_SPI_TransmitReceive+0x234>
 80057b2:	e073      	b.n	800589c <HAL_SPI_TransmitReceive+0x3f8>
 80057b4:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d11b      	bne.n	80057fe <HAL_SPI_TransmitReceive+0x35a>
 80057c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d018      	beq.n	80057fe <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	3320      	adds	r3, #32
 80057d6:	7812      	ldrb	r2, [r2, #0]
 80057d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057de:	1c5a      	adds	r2, r3, #1
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	3b01      	subs	r3, #1
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80057fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	695b      	ldr	r3, [r3, #20]
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	2b01      	cmp	r3, #1
 800580a:	d11d      	bne.n	8005848 <HAL_SPI_TransmitReceive+0x3a4>
 800580c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800580e:	2b00      	cmp	r3, #0
 8005810:	d01a      	beq.n	8005848 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800581e:	7812      	ldrb	r2, [r2, #0]
 8005820:	b2d2      	uxtb	r2, r2
 8005822:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005828:	1c5a      	adds	r2, r3, #1
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005834:	b29b      	uxth	r3, r3
 8005836:	3b01      	subs	r3, #1
 8005838:	b29a      	uxth	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005846:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005848:	f7fb ff86 	bl	8001758 <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005854:	429a      	cmp	r2, r3
 8005856:	d803      	bhi.n	8005860 <HAL_SPI_TransmitReceive+0x3bc>
 8005858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800585a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800585e:	d102      	bne.n	8005866 <HAL_SPI_TransmitReceive+0x3c2>
 8005860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005862:	2b00      	cmp	r3, #0
 8005864:	d114      	bne.n	8005890 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f000 f844 	bl	80058f4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800587a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e02c      	b.n	80058ea <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005890:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005892:	2b00      	cmp	r3, #0
 8005894:	d190      	bne.n	80057b8 <HAL_SPI_TransmitReceive+0x314>
 8005896:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005898:	2b00      	cmp	r3, #0
 800589a:	d18d      	bne.n	80057b8 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800589c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	2200      	movs	r2, #0
 80058a4:	2108      	movs	r1, #8
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f000 f8c4 	bl	8005a34 <SPI_WaitOnFlagUntilTimeout>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d007      	beq.n	80058c2 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058b8:	f043 0220 	orr.w	r2, r3, #32
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f000 f816 	bl	80058f4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d001      	beq.n	80058e6 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e001      	b.n	80058ea <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 80058e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3730      	adds	r7, #48	; 0x30
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop

080058f4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	699a      	ldr	r2, [r3, #24]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f042 0208 	orr.w	r2, r2, #8
 8005912:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	699a      	ldr	r2, [r3, #24]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f042 0210 	orr.w	r2, r2, #16
 8005922:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f022 0201 	bic.w	r2, r2, #1
 8005932:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6919      	ldr	r1, [r3, #16]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	4b3c      	ldr	r3, [pc, #240]	; (8005a30 <SPI_CloseTransfer+0x13c>)
 8005940:	400b      	ands	r3, r1
 8005942:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	689a      	ldr	r2, [r3, #8]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005952:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b04      	cmp	r3, #4
 800595e:	d014      	beq.n	800598a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f003 0320 	and.w	r3, r3, #32
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00f      	beq.n	800598a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005970:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	699a      	ldr	r2, [r3, #24]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f042 0220 	orr.w	r2, r2, #32
 8005988:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005990:	b2db      	uxtb	r3, r3
 8005992:	2b03      	cmp	r3, #3
 8005994:	d014      	beq.n	80059c0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00f      	beq.n	80059c0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059a6:	f043 0204 	orr.w	r2, r3, #4
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	699a      	ldr	r2, [r3, #24]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059be:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00f      	beq.n	80059ea <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059d0:	f043 0201 	orr.w	r2, r3, #1
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	699a      	ldr	r2, [r3, #24]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059e8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00f      	beq.n	8005a14 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059fa:	f043 0208 	orr.w	r2, r3, #8
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	699a      	ldr	r2, [r3, #24]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a12:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8005a24:	bf00      	nop
 8005a26:	3714      	adds	r7, #20
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr
 8005a30:	fffffc90 	.word	0xfffffc90

08005a34 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	603b      	str	r3, [r7, #0]
 8005a40:	4613      	mov	r3, r2
 8005a42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005a44:	e010      	b.n	8005a68 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a46:	f7fb fe87 	bl	8001758 <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	69ba      	ldr	r2, [r7, #24]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d803      	bhi.n	8005a5e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a5c:	d102      	bne.n	8005a64 <SPI_WaitOnFlagUntilTimeout+0x30>
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d101      	bne.n	8005a68 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e00f      	b.n	8005a88 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	695a      	ldr	r2, [r3, #20]
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	4013      	ands	r3, r2
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	bf0c      	ite	eq
 8005a78:	2301      	moveq	r3, #1
 8005a7a:	2300      	movne	r3, #0
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	461a      	mov	r2, r3
 8005a80:	79fb      	ldrb	r3, [r7, #7]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d0df      	beq.n	8005a46 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a9c:	095b      	lsrs	r3, r3, #5
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	3307      	adds	r3, #7
 8005aae:	08db      	lsrs	r3, r3, #3
 8005ab0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	fb02 f303 	mul.w	r3, r2, r3
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3714      	adds	r7, #20
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr

08005ac6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b082      	sub	sp, #8
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d101      	bne.n	8005ad8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e049      	b.n	8005b6c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d106      	bne.n	8005af2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 f841 	bl	8005b74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2202      	movs	r2, #2
 8005af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	3304      	adds	r3, #4
 8005b02:	4619      	mov	r1, r3
 8005b04:	4610      	mov	r0, r2
 8005b06:	f000 fb69 	bl	80061dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2201      	movs	r2, #1
 8005b36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3708      	adds	r7, #8
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005b7c:	bf00      	nop
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d001      	beq.n	8005ba0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e054      	b.n	8005c4a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2202      	movs	r2, #2
 8005ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68da      	ldr	r2, [r3, #12]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f042 0201 	orr.w	r2, r2, #1
 8005bb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a26      	ldr	r2, [pc, #152]	; (8005c58 <HAL_TIM_Base_Start_IT+0xd0>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d022      	beq.n	8005c08 <HAL_TIM_Base_Start_IT+0x80>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bca:	d01d      	beq.n	8005c08 <HAL_TIM_Base_Start_IT+0x80>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a22      	ldr	r2, [pc, #136]	; (8005c5c <HAL_TIM_Base_Start_IT+0xd4>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d018      	beq.n	8005c08 <HAL_TIM_Base_Start_IT+0x80>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a21      	ldr	r2, [pc, #132]	; (8005c60 <HAL_TIM_Base_Start_IT+0xd8>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d013      	beq.n	8005c08 <HAL_TIM_Base_Start_IT+0x80>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a1f      	ldr	r2, [pc, #124]	; (8005c64 <HAL_TIM_Base_Start_IT+0xdc>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d00e      	beq.n	8005c08 <HAL_TIM_Base_Start_IT+0x80>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a1e      	ldr	r2, [pc, #120]	; (8005c68 <HAL_TIM_Base_Start_IT+0xe0>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d009      	beq.n	8005c08 <HAL_TIM_Base_Start_IT+0x80>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a1c      	ldr	r2, [pc, #112]	; (8005c6c <HAL_TIM_Base_Start_IT+0xe4>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d004      	beq.n	8005c08 <HAL_TIM_Base_Start_IT+0x80>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a1b      	ldr	r2, [pc, #108]	; (8005c70 <HAL_TIM_Base_Start_IT+0xe8>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d115      	bne.n	8005c34 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689a      	ldr	r2, [r3, #8]
 8005c0e:	4b19      	ldr	r3, [pc, #100]	; (8005c74 <HAL_TIM_Base_Start_IT+0xec>)
 8005c10:	4013      	ands	r3, r2
 8005c12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2b06      	cmp	r3, #6
 8005c18:	d015      	beq.n	8005c46 <HAL_TIM_Base_Start_IT+0xbe>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c20:	d011      	beq.n	8005c46 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f042 0201 	orr.w	r2, r2, #1
 8005c30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c32:	e008      	b.n	8005c46 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f042 0201 	orr.w	r2, r2, #1
 8005c42:	601a      	str	r2, [r3, #0]
 8005c44:	e000      	b.n	8005c48 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c46:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3714      	adds	r7, #20
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	40010000 	.word	0x40010000
 8005c5c:	40000400 	.word	0x40000400
 8005c60:	40000800 	.word	0x40000800
 8005c64:	40000c00 	.word	0x40000c00
 8005c68:	40010400 	.word	0x40010400
 8005c6c:	40001800 	.word	0x40001800
 8005c70:	40014000 	.word	0x40014000
 8005c74:	00010007 	.word	0x00010007

08005c78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d101      	bne.n	8005c8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e049      	b.n	8005d1e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d106      	bne.n	8005ca4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f7fb faec 	bl	800127c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	3304      	adds	r3, #4
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	4610      	mov	r0, r2
 8005cb8:	f000 fa90 	bl	80061dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3708      	adds	r7, #8
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b082      	sub	sp, #8
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	f003 0302 	and.w	r3, r3, #2
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d122      	bne.n	8005d82 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	f003 0302 	and.w	r3, r3, #2
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d11b      	bne.n	8005d82 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f06f 0202 	mvn.w	r2, #2
 8005d52:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	f003 0303 	and.w	r3, r3, #3
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d003      	beq.n	8005d70 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 fa19 	bl	80061a0 <HAL_TIM_IC_CaptureCallback>
 8005d6e:	e005      	b.n	8005d7c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 fa0b 	bl	800618c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 fa1c 	bl	80061b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	f003 0304 	and.w	r3, r3, #4
 8005d8c:	2b04      	cmp	r3, #4
 8005d8e:	d122      	bne.n	8005dd6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	f003 0304 	and.w	r3, r3, #4
 8005d9a:	2b04      	cmp	r3, #4
 8005d9c:	d11b      	bne.n	8005dd6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f06f 0204 	mvn.w	r2, #4
 8005da6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2202      	movs	r2, #2
 8005dac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	699b      	ldr	r3, [r3, #24]
 8005db4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d003      	beq.n	8005dc4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 f9ef 	bl	80061a0 <HAL_TIM_IC_CaptureCallback>
 8005dc2:	e005      	b.n	8005dd0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 f9e1 	bl	800618c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 f9f2 	bl	80061b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	f003 0308 	and.w	r3, r3, #8
 8005de0:	2b08      	cmp	r3, #8
 8005de2:	d122      	bne.n	8005e2a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	f003 0308 	and.w	r3, r3, #8
 8005dee:	2b08      	cmp	r3, #8
 8005df0:	d11b      	bne.n	8005e2a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f06f 0208 	mvn.w	r2, #8
 8005dfa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2204      	movs	r2, #4
 8005e00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	69db      	ldr	r3, [r3, #28]
 8005e08:	f003 0303 	and.w	r3, r3, #3
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d003      	beq.n	8005e18 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 f9c5 	bl	80061a0 <HAL_TIM_IC_CaptureCallback>
 8005e16:	e005      	b.n	8005e24 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 f9b7 	bl	800618c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 f9c8 	bl	80061b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	f003 0310 	and.w	r3, r3, #16
 8005e34:	2b10      	cmp	r3, #16
 8005e36:	d122      	bne.n	8005e7e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	f003 0310 	and.w	r3, r3, #16
 8005e42:	2b10      	cmp	r3, #16
 8005e44:	d11b      	bne.n	8005e7e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f06f 0210 	mvn.w	r2, #16
 8005e4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2208      	movs	r2, #8
 8005e54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	69db      	ldr	r3, [r3, #28]
 8005e5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d003      	beq.n	8005e6c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 f99b 	bl	80061a0 <HAL_TIM_IC_CaptureCallback>
 8005e6a:	e005      	b.n	8005e78 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 f98d 	bl	800618c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f99e 	bl	80061b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	f003 0301 	and.w	r3, r3, #1
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d10e      	bne.n	8005eaa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	f003 0301 	and.w	r3, r3, #1
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d107      	bne.n	8005eaa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f06f 0201 	mvn.w	r2, #1
 8005ea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f7fb f8d7 	bl	8001058 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eb4:	2b80      	cmp	r3, #128	; 0x80
 8005eb6:	d10e      	bne.n	8005ed6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ec2:	2b80      	cmp	r3, #128	; 0x80
 8005ec4:	d107      	bne.n	8005ed6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 fe09 	bl	8006ae8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ee0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ee4:	d10e      	bne.n	8005f04 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef0:	2b80      	cmp	r3, #128	; 0x80
 8005ef2:	d107      	bne.n	8005f04 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 fdfc 	bl	8006afc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f0e:	2b40      	cmp	r3, #64	; 0x40
 8005f10:	d10e      	bne.n	8005f30 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f1c:	2b40      	cmp	r3, #64	; 0x40
 8005f1e:	d107      	bne.n	8005f30 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f94c 	bl	80061c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	f003 0320 	and.w	r3, r3, #32
 8005f3a:	2b20      	cmp	r3, #32
 8005f3c:	d10e      	bne.n	8005f5c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	f003 0320 	and.w	r3, r3, #32
 8005f48:	2b20      	cmp	r3, #32
 8005f4a:	d107      	bne.n	8005f5c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f06f 0220 	mvn.w	r2, #32
 8005f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 fdbc 	bl	8006ad4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f5c:	bf00      	nop
 8005f5e:	3708      	adds	r7, #8
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b086      	sub	sp, #24
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f70:	2300      	movs	r3, #0
 8005f72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d101      	bne.n	8005f82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f7e:	2302      	movs	r3, #2
 8005f80:	e0ff      	b.n	8006182 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2b14      	cmp	r3, #20
 8005f8e:	f200 80f0 	bhi.w	8006172 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005f92:	a201      	add	r2, pc, #4	; (adr r2, 8005f98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f98:	08005fed 	.word	0x08005fed
 8005f9c:	08006173 	.word	0x08006173
 8005fa0:	08006173 	.word	0x08006173
 8005fa4:	08006173 	.word	0x08006173
 8005fa8:	0800602d 	.word	0x0800602d
 8005fac:	08006173 	.word	0x08006173
 8005fb0:	08006173 	.word	0x08006173
 8005fb4:	08006173 	.word	0x08006173
 8005fb8:	0800606f 	.word	0x0800606f
 8005fbc:	08006173 	.word	0x08006173
 8005fc0:	08006173 	.word	0x08006173
 8005fc4:	08006173 	.word	0x08006173
 8005fc8:	080060af 	.word	0x080060af
 8005fcc:	08006173 	.word	0x08006173
 8005fd0:	08006173 	.word	0x08006173
 8005fd4:	08006173 	.word	0x08006173
 8005fd8:	080060f1 	.word	0x080060f1
 8005fdc:	08006173 	.word	0x08006173
 8005fe0:	08006173 	.word	0x08006173
 8005fe4:	08006173 	.word	0x08006173
 8005fe8:	08006131 	.word	0x08006131
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68b9      	ldr	r1, [r7, #8]
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f000 f98c 	bl	8006310 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	699a      	ldr	r2, [r3, #24]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f042 0208 	orr.w	r2, r2, #8
 8006006:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	699a      	ldr	r2, [r3, #24]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f022 0204 	bic.w	r2, r2, #4
 8006016:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	6999      	ldr	r1, [r3, #24]
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	691a      	ldr	r2, [r3, #16]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	430a      	orrs	r2, r1
 8006028:	619a      	str	r2, [r3, #24]
      break;
 800602a:	e0a5      	b.n	8006178 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68b9      	ldr	r1, [r7, #8]
 8006032:	4618      	mov	r0, r3
 8006034:	f000 f9fc 	bl	8006430 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	699a      	ldr	r2, [r3, #24]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006046:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	699a      	ldr	r2, [r3, #24]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006056:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	6999      	ldr	r1, [r3, #24]
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	021a      	lsls	r2, r3, #8
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	430a      	orrs	r2, r1
 800606a:	619a      	str	r2, [r3, #24]
      break;
 800606c:	e084      	b.n	8006178 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68b9      	ldr	r1, [r7, #8]
 8006074:	4618      	mov	r0, r3
 8006076:	f000 fa65 	bl	8006544 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	69da      	ldr	r2, [r3, #28]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f042 0208 	orr.w	r2, r2, #8
 8006088:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	69da      	ldr	r2, [r3, #28]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f022 0204 	bic.w	r2, r2, #4
 8006098:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	69d9      	ldr	r1, [r3, #28]
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	691a      	ldr	r2, [r3, #16]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	430a      	orrs	r2, r1
 80060aa:	61da      	str	r2, [r3, #28]
      break;
 80060ac:	e064      	b.n	8006178 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68b9      	ldr	r1, [r7, #8]
 80060b4:	4618      	mov	r0, r3
 80060b6:	f000 facd 	bl	8006654 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	69da      	ldr	r2, [r3, #28]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	69da      	ldr	r2, [r3, #28]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	69d9      	ldr	r1, [r3, #28]
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	021a      	lsls	r2, r3, #8
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	430a      	orrs	r2, r1
 80060ec:	61da      	str	r2, [r3, #28]
      break;
 80060ee:	e043      	b.n	8006178 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68b9      	ldr	r1, [r7, #8]
 80060f6:	4618      	mov	r0, r3
 80060f8:	f000 fb16 	bl	8006728 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f042 0208 	orr.w	r2, r2, #8
 800610a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f022 0204 	bic.w	r2, r2, #4
 800611a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	691a      	ldr	r2, [r3, #16]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	430a      	orrs	r2, r1
 800612c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800612e:	e023      	b.n	8006178 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68b9      	ldr	r1, [r7, #8]
 8006136:	4618      	mov	r0, r3
 8006138:	f000 fb5a 	bl	80067f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800614a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800615a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	021a      	lsls	r2, r3, #8
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	430a      	orrs	r2, r1
 800616e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006170:	e002      	b.n	8006178 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	75fb      	strb	r3, [r7, #23]
      break;
 8006176:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2200      	movs	r2, #0
 800617c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006180:	7dfb      	ldrb	r3, [r7, #23]
}
 8006182:	4618      	mov	r0, r3
 8006184:	3718      	adds	r7, #24
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop

0800618c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006194:	bf00      	nop
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061a8:	bf00      	nop
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061bc:	bf00      	nop
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061d0:	bf00      	nop
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a40      	ldr	r2, [pc, #256]	; (80062f0 <TIM_Base_SetConfig+0x114>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d013      	beq.n	800621c <TIM_Base_SetConfig+0x40>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061fa:	d00f      	beq.n	800621c <TIM_Base_SetConfig+0x40>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a3d      	ldr	r2, [pc, #244]	; (80062f4 <TIM_Base_SetConfig+0x118>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d00b      	beq.n	800621c <TIM_Base_SetConfig+0x40>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a3c      	ldr	r2, [pc, #240]	; (80062f8 <TIM_Base_SetConfig+0x11c>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d007      	beq.n	800621c <TIM_Base_SetConfig+0x40>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a3b      	ldr	r2, [pc, #236]	; (80062fc <TIM_Base_SetConfig+0x120>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d003      	beq.n	800621c <TIM_Base_SetConfig+0x40>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a3a      	ldr	r2, [pc, #232]	; (8006300 <TIM_Base_SetConfig+0x124>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d108      	bne.n	800622e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006222:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	4313      	orrs	r3, r2
 800622c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a2f      	ldr	r2, [pc, #188]	; (80062f0 <TIM_Base_SetConfig+0x114>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d01f      	beq.n	8006276 <TIM_Base_SetConfig+0x9a>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800623c:	d01b      	beq.n	8006276 <TIM_Base_SetConfig+0x9a>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a2c      	ldr	r2, [pc, #176]	; (80062f4 <TIM_Base_SetConfig+0x118>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d017      	beq.n	8006276 <TIM_Base_SetConfig+0x9a>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a2b      	ldr	r2, [pc, #172]	; (80062f8 <TIM_Base_SetConfig+0x11c>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d013      	beq.n	8006276 <TIM_Base_SetConfig+0x9a>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a2a      	ldr	r2, [pc, #168]	; (80062fc <TIM_Base_SetConfig+0x120>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d00f      	beq.n	8006276 <TIM_Base_SetConfig+0x9a>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a29      	ldr	r2, [pc, #164]	; (8006300 <TIM_Base_SetConfig+0x124>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d00b      	beq.n	8006276 <TIM_Base_SetConfig+0x9a>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a28      	ldr	r2, [pc, #160]	; (8006304 <TIM_Base_SetConfig+0x128>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d007      	beq.n	8006276 <TIM_Base_SetConfig+0x9a>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a27      	ldr	r2, [pc, #156]	; (8006308 <TIM_Base_SetConfig+0x12c>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d003      	beq.n	8006276 <TIM_Base_SetConfig+0x9a>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a26      	ldr	r2, [pc, #152]	; (800630c <TIM_Base_SetConfig+0x130>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d108      	bne.n	8006288 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800627c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	4313      	orrs	r3, r2
 8006286:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	695b      	ldr	r3, [r3, #20]
 8006292:	4313      	orrs	r3, r2
 8006294:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	689a      	ldr	r2, [r3, #8]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a10      	ldr	r2, [pc, #64]	; (80062f0 <TIM_Base_SetConfig+0x114>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d00f      	beq.n	80062d4 <TIM_Base_SetConfig+0xf8>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a12      	ldr	r2, [pc, #72]	; (8006300 <TIM_Base_SetConfig+0x124>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d00b      	beq.n	80062d4 <TIM_Base_SetConfig+0xf8>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a11      	ldr	r2, [pc, #68]	; (8006304 <TIM_Base_SetConfig+0x128>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d007      	beq.n	80062d4 <TIM_Base_SetConfig+0xf8>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a10      	ldr	r2, [pc, #64]	; (8006308 <TIM_Base_SetConfig+0x12c>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d003      	beq.n	80062d4 <TIM_Base_SetConfig+0xf8>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a0f      	ldr	r2, [pc, #60]	; (800630c <TIM_Base_SetConfig+0x130>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d103      	bne.n	80062dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	691a      	ldr	r2, [r3, #16]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	615a      	str	r2, [r3, #20]
}
 80062e2:	bf00      	nop
 80062e4:	3714      	adds	r7, #20
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	40010000 	.word	0x40010000
 80062f4:	40000400 	.word	0x40000400
 80062f8:	40000800 	.word	0x40000800
 80062fc:	40000c00 	.word	0x40000c00
 8006300:	40010400 	.word	0x40010400
 8006304:	40014000 	.word	0x40014000
 8006308:	40014400 	.word	0x40014400
 800630c:	40014800 	.word	0x40014800

08006310 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006310:	b480      	push	{r7}
 8006312:	b087      	sub	sp, #28
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	f023 0201 	bic.w	r2, r3, #1
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	4b37      	ldr	r3, [pc, #220]	; (8006418 <TIM_OC1_SetConfig+0x108>)
 800633c:	4013      	ands	r3, r2
 800633e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f023 0303 	bic.w	r3, r3, #3
 8006346:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	4313      	orrs	r3, r2
 8006350:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	f023 0302 	bic.w	r3, r3, #2
 8006358:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	697a      	ldr	r2, [r7, #20]
 8006360:	4313      	orrs	r3, r2
 8006362:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a2d      	ldr	r2, [pc, #180]	; (800641c <TIM_OC1_SetConfig+0x10c>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d00f      	beq.n	800638c <TIM_OC1_SetConfig+0x7c>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a2c      	ldr	r2, [pc, #176]	; (8006420 <TIM_OC1_SetConfig+0x110>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d00b      	beq.n	800638c <TIM_OC1_SetConfig+0x7c>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a2b      	ldr	r2, [pc, #172]	; (8006424 <TIM_OC1_SetConfig+0x114>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d007      	beq.n	800638c <TIM_OC1_SetConfig+0x7c>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a2a      	ldr	r2, [pc, #168]	; (8006428 <TIM_OC1_SetConfig+0x118>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d003      	beq.n	800638c <TIM_OC1_SetConfig+0x7c>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a29      	ldr	r2, [pc, #164]	; (800642c <TIM_OC1_SetConfig+0x11c>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d10c      	bne.n	80063a6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	f023 0308 	bic.w	r3, r3, #8
 8006392:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	4313      	orrs	r3, r2
 800639c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	f023 0304 	bic.w	r3, r3, #4
 80063a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a1c      	ldr	r2, [pc, #112]	; (800641c <TIM_OC1_SetConfig+0x10c>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d00f      	beq.n	80063ce <TIM_OC1_SetConfig+0xbe>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a1b      	ldr	r2, [pc, #108]	; (8006420 <TIM_OC1_SetConfig+0x110>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d00b      	beq.n	80063ce <TIM_OC1_SetConfig+0xbe>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a1a      	ldr	r2, [pc, #104]	; (8006424 <TIM_OC1_SetConfig+0x114>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d007      	beq.n	80063ce <TIM_OC1_SetConfig+0xbe>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a19      	ldr	r2, [pc, #100]	; (8006428 <TIM_OC1_SetConfig+0x118>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d003      	beq.n	80063ce <TIM_OC1_SetConfig+0xbe>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a18      	ldr	r2, [pc, #96]	; (800642c <TIM_OC1_SetConfig+0x11c>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d111      	bne.n	80063f2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	693a      	ldr	r2, [r7, #16]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	699b      	ldr	r3, [r3, #24]
 80063ec:	693a      	ldr	r2, [r7, #16]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	693a      	ldr	r2, [r7, #16]
 80063f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	685a      	ldr	r2, [r3, #4]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	697a      	ldr	r2, [r7, #20]
 800640a:	621a      	str	r2, [r3, #32]
}
 800640c:	bf00      	nop
 800640e:	371c      	adds	r7, #28
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr
 8006418:	fffeff8f 	.word	0xfffeff8f
 800641c:	40010000 	.word	0x40010000
 8006420:	40010400 	.word	0x40010400
 8006424:	40014000 	.word	0x40014000
 8006428:	40014400 	.word	0x40014400
 800642c:	40014800 	.word	0x40014800

08006430 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006430:	b480      	push	{r7}
 8006432:	b087      	sub	sp, #28
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	f023 0210 	bic.w	r2, r3, #16
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	4b34      	ldr	r3, [pc, #208]	; (800652c <TIM_OC2_SetConfig+0xfc>)
 800645c:	4013      	ands	r3, r2
 800645e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006466:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	021b      	lsls	r3, r3, #8
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	4313      	orrs	r3, r2
 8006472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	f023 0320 	bic.w	r3, r3, #32
 800647a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	011b      	lsls	r3, r3, #4
 8006482:	697a      	ldr	r2, [r7, #20]
 8006484:	4313      	orrs	r3, r2
 8006486:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a29      	ldr	r2, [pc, #164]	; (8006530 <TIM_OC2_SetConfig+0x100>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d003      	beq.n	8006498 <TIM_OC2_SetConfig+0x68>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a28      	ldr	r2, [pc, #160]	; (8006534 <TIM_OC2_SetConfig+0x104>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d10d      	bne.n	80064b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800649e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	011b      	lsls	r3, r3, #4
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a1e      	ldr	r2, [pc, #120]	; (8006530 <TIM_OC2_SetConfig+0x100>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d00f      	beq.n	80064dc <TIM_OC2_SetConfig+0xac>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a1d      	ldr	r2, [pc, #116]	; (8006534 <TIM_OC2_SetConfig+0x104>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d00b      	beq.n	80064dc <TIM_OC2_SetConfig+0xac>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a1c      	ldr	r2, [pc, #112]	; (8006538 <TIM_OC2_SetConfig+0x108>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d007      	beq.n	80064dc <TIM_OC2_SetConfig+0xac>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a1b      	ldr	r2, [pc, #108]	; (800653c <TIM_OC2_SetConfig+0x10c>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d003      	beq.n	80064dc <TIM_OC2_SetConfig+0xac>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a1a      	ldr	r2, [pc, #104]	; (8006540 <TIM_OC2_SetConfig+0x110>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d113      	bne.n	8006504 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	695b      	ldr	r3, [r3, #20]
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	693a      	ldr	r2, [r7, #16]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	693a      	ldr	r2, [r7, #16]
 8006500:	4313      	orrs	r3, r2
 8006502:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	693a      	ldr	r2, [r7, #16]
 8006508:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	685a      	ldr	r2, [r3, #4]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	621a      	str	r2, [r3, #32]
}
 800651e:	bf00      	nop
 8006520:	371c      	adds	r7, #28
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	feff8fff 	.word	0xfeff8fff
 8006530:	40010000 	.word	0x40010000
 8006534:	40010400 	.word	0x40010400
 8006538:	40014000 	.word	0x40014000
 800653c:	40014400 	.word	0x40014400
 8006540:	40014800 	.word	0x40014800

08006544 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006544:	b480      	push	{r7}
 8006546:	b087      	sub	sp, #28
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	69db      	ldr	r3, [r3, #28]
 800656a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	4b33      	ldr	r3, [pc, #204]	; (800663c <TIM_OC3_SetConfig+0xf8>)
 8006570:	4013      	ands	r3, r2
 8006572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f023 0303 	bic.w	r3, r3, #3
 800657a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	4313      	orrs	r3, r2
 8006584:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800658c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	021b      	lsls	r3, r3, #8
 8006594:	697a      	ldr	r2, [r7, #20]
 8006596:	4313      	orrs	r3, r2
 8006598:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a28      	ldr	r2, [pc, #160]	; (8006640 <TIM_OC3_SetConfig+0xfc>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d003      	beq.n	80065aa <TIM_OC3_SetConfig+0x66>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a27      	ldr	r2, [pc, #156]	; (8006644 <TIM_OC3_SetConfig+0x100>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d10d      	bne.n	80065c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	021b      	lsls	r3, r3, #8
 80065b8:	697a      	ldr	r2, [r7, #20]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a1d      	ldr	r2, [pc, #116]	; (8006640 <TIM_OC3_SetConfig+0xfc>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d00f      	beq.n	80065ee <TIM_OC3_SetConfig+0xaa>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a1c      	ldr	r2, [pc, #112]	; (8006644 <TIM_OC3_SetConfig+0x100>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d00b      	beq.n	80065ee <TIM_OC3_SetConfig+0xaa>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a1b      	ldr	r2, [pc, #108]	; (8006648 <TIM_OC3_SetConfig+0x104>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d007      	beq.n	80065ee <TIM_OC3_SetConfig+0xaa>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a1a      	ldr	r2, [pc, #104]	; (800664c <TIM_OC3_SetConfig+0x108>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d003      	beq.n	80065ee <TIM_OC3_SetConfig+0xaa>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a19      	ldr	r2, [pc, #100]	; (8006650 <TIM_OC3_SetConfig+0x10c>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d113      	bne.n	8006616 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	695b      	ldr	r3, [r3, #20]
 8006602:	011b      	lsls	r3, r3, #4
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	4313      	orrs	r3, r2
 8006608:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	699b      	ldr	r3, [r3, #24]
 800660e:	011b      	lsls	r3, r3, #4
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	4313      	orrs	r3, r2
 8006614:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	693a      	ldr	r2, [r7, #16]
 800661a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	685a      	ldr	r2, [r3, #4]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	697a      	ldr	r2, [r7, #20]
 800662e:	621a      	str	r2, [r3, #32]
}
 8006630:	bf00      	nop
 8006632:	371c      	adds	r7, #28
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr
 800663c:	fffeff8f 	.word	0xfffeff8f
 8006640:	40010000 	.word	0x40010000
 8006644:	40010400 	.word	0x40010400
 8006648:	40014000 	.word	0x40014000
 800664c:	40014400 	.word	0x40014400
 8006650:	40014800 	.word	0x40014800

08006654 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006654:	b480      	push	{r7}
 8006656:	b087      	sub	sp, #28
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6a1b      	ldr	r3, [r3, #32]
 800666e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	69db      	ldr	r3, [r3, #28]
 800667a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	4b24      	ldr	r3, [pc, #144]	; (8006710 <TIM_OC4_SetConfig+0xbc>)
 8006680:	4013      	ands	r3, r2
 8006682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800668a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	021b      	lsls	r3, r3, #8
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	4313      	orrs	r3, r2
 8006696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800669e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	031b      	lsls	r3, r3, #12
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a19      	ldr	r2, [pc, #100]	; (8006714 <TIM_OC4_SetConfig+0xc0>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d00f      	beq.n	80066d4 <TIM_OC4_SetConfig+0x80>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a18      	ldr	r2, [pc, #96]	; (8006718 <TIM_OC4_SetConfig+0xc4>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d00b      	beq.n	80066d4 <TIM_OC4_SetConfig+0x80>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a17      	ldr	r2, [pc, #92]	; (800671c <TIM_OC4_SetConfig+0xc8>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d007      	beq.n	80066d4 <TIM_OC4_SetConfig+0x80>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a16      	ldr	r2, [pc, #88]	; (8006720 <TIM_OC4_SetConfig+0xcc>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d003      	beq.n	80066d4 <TIM_OC4_SetConfig+0x80>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a15      	ldr	r2, [pc, #84]	; (8006724 <TIM_OC4_SetConfig+0xd0>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d109      	bne.n	80066e8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	695b      	ldr	r3, [r3, #20]
 80066e0:	019b      	lsls	r3, r3, #6
 80066e2:	697a      	ldr	r2, [r7, #20]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	685a      	ldr	r2, [r3, #4]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	621a      	str	r2, [r3, #32]
}
 8006702:	bf00      	nop
 8006704:	371c      	adds	r7, #28
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	feff8fff 	.word	0xfeff8fff
 8006714:	40010000 	.word	0x40010000
 8006718:	40010400 	.word	0x40010400
 800671c:	40014000 	.word	0x40014000
 8006720:	40014400 	.word	0x40014400
 8006724:	40014800 	.word	0x40014800

08006728 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006728:	b480      	push	{r7}
 800672a:	b087      	sub	sp, #28
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a1b      	ldr	r3, [r3, #32]
 8006742:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800674e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	4b21      	ldr	r3, [pc, #132]	; (80067d8 <TIM_OC5_SetConfig+0xb0>)
 8006754:	4013      	ands	r3, r2
 8006756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	4313      	orrs	r3, r2
 8006760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006768:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	041b      	lsls	r3, r3, #16
 8006770:	693a      	ldr	r2, [r7, #16]
 8006772:	4313      	orrs	r3, r2
 8006774:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a18      	ldr	r2, [pc, #96]	; (80067dc <TIM_OC5_SetConfig+0xb4>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d00f      	beq.n	800679e <TIM_OC5_SetConfig+0x76>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a17      	ldr	r2, [pc, #92]	; (80067e0 <TIM_OC5_SetConfig+0xb8>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d00b      	beq.n	800679e <TIM_OC5_SetConfig+0x76>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a16      	ldr	r2, [pc, #88]	; (80067e4 <TIM_OC5_SetConfig+0xbc>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d007      	beq.n	800679e <TIM_OC5_SetConfig+0x76>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a15      	ldr	r2, [pc, #84]	; (80067e8 <TIM_OC5_SetConfig+0xc0>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d003      	beq.n	800679e <TIM_OC5_SetConfig+0x76>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a14      	ldr	r2, [pc, #80]	; (80067ec <TIM_OC5_SetConfig+0xc4>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d109      	bne.n	80067b2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	021b      	lsls	r3, r3, #8
 80067ac:	697a      	ldr	r2, [r7, #20]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	697a      	ldr	r2, [r7, #20]
 80067b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	685a      	ldr	r2, [r3, #4]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	693a      	ldr	r2, [r7, #16]
 80067ca:	621a      	str	r2, [r3, #32]
}
 80067cc:	bf00      	nop
 80067ce:	371c      	adds	r7, #28
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr
 80067d8:	fffeff8f 	.word	0xfffeff8f
 80067dc:	40010000 	.word	0x40010000
 80067e0:	40010400 	.word	0x40010400
 80067e4:	40014000 	.word	0x40014000
 80067e8:	40014400 	.word	0x40014400
 80067ec:	40014800 	.word	0x40014800

080067f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b087      	sub	sp, #28
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a1b      	ldr	r3, [r3, #32]
 80067fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	4b22      	ldr	r3, [pc, #136]	; (80068a4 <TIM_OC6_SetConfig+0xb4>)
 800681c:	4013      	ands	r3, r2
 800681e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	021b      	lsls	r3, r3, #8
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	4313      	orrs	r3, r2
 800682a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006832:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	051b      	lsls	r3, r3, #20
 800683a:	693a      	ldr	r2, [r7, #16]
 800683c:	4313      	orrs	r3, r2
 800683e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a19      	ldr	r2, [pc, #100]	; (80068a8 <TIM_OC6_SetConfig+0xb8>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d00f      	beq.n	8006868 <TIM_OC6_SetConfig+0x78>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a18      	ldr	r2, [pc, #96]	; (80068ac <TIM_OC6_SetConfig+0xbc>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d00b      	beq.n	8006868 <TIM_OC6_SetConfig+0x78>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a17      	ldr	r2, [pc, #92]	; (80068b0 <TIM_OC6_SetConfig+0xc0>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d007      	beq.n	8006868 <TIM_OC6_SetConfig+0x78>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a16      	ldr	r2, [pc, #88]	; (80068b4 <TIM_OC6_SetConfig+0xc4>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d003      	beq.n	8006868 <TIM_OC6_SetConfig+0x78>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a15      	ldr	r2, [pc, #84]	; (80068b8 <TIM_OC6_SetConfig+0xc8>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d109      	bne.n	800687c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800686e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	695b      	ldr	r3, [r3, #20]
 8006874:	029b      	lsls	r3, r3, #10
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	4313      	orrs	r3, r2
 800687a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	697a      	ldr	r2, [r7, #20]
 8006880:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	685a      	ldr	r2, [r3, #4]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	693a      	ldr	r2, [r7, #16]
 8006894:	621a      	str	r2, [r3, #32]
}
 8006896:	bf00      	nop
 8006898:	371c      	adds	r7, #28
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	feff8fff 	.word	0xfeff8fff
 80068a8:	40010000 	.word	0x40010000
 80068ac:	40010400 	.word	0x40010400
 80068b0:	40014000 	.word	0x40014000
 80068b4:	40014400 	.word	0x40014400
 80068b8:	40014800 	.word	0x40014800

080068bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068bc:	b480      	push	{r7}
 80068be:	b085      	sub	sp, #20
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d101      	bne.n	80068d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068d0:	2302      	movs	r3, #2
 80068d2:	e06d      	b.n	80069b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2202      	movs	r2, #2
 80068e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a30      	ldr	r2, [pc, #192]	; (80069bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d004      	beq.n	8006908 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a2f      	ldr	r2, [pc, #188]	; (80069c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d108      	bne.n	800691a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800690e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	4313      	orrs	r3, r2
 8006918:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006920:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	4313      	orrs	r3, r2
 800692a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a20      	ldr	r2, [pc, #128]	; (80069bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d022      	beq.n	8006984 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006946:	d01d      	beq.n	8006984 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a1d      	ldr	r2, [pc, #116]	; (80069c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d018      	beq.n	8006984 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a1c      	ldr	r2, [pc, #112]	; (80069c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d013      	beq.n	8006984 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a1a      	ldr	r2, [pc, #104]	; (80069cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d00e      	beq.n	8006984 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a15      	ldr	r2, [pc, #84]	; (80069c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d009      	beq.n	8006984 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a16      	ldr	r2, [pc, #88]	; (80069d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d004      	beq.n	8006984 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a15      	ldr	r2, [pc, #84]	; (80069d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d10c      	bne.n	800699e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800698a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	68ba      	ldr	r2, [r7, #8]
 8006992:	4313      	orrs	r3, r2
 8006994:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68ba      	ldr	r2, [r7, #8]
 800699c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2201      	movs	r2, #1
 80069a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3714      	adds	r7, #20
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr
 80069bc:	40010000 	.word	0x40010000
 80069c0:	40010400 	.word	0x40010400
 80069c4:	40000400 	.word	0x40000400
 80069c8:	40000800 	.word	0x40000800
 80069cc:	40000c00 	.word	0x40000c00
 80069d0:	40001800 	.word	0x40001800
 80069d4:	40014000 	.word	0x40014000

080069d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80069e2:	2300      	movs	r3, #0
 80069e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d101      	bne.n	80069f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80069f0:	2302      	movs	r3, #2
 80069f2:	e065      	b.n	8006ac0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	695b      	ldr	r3, [r3, #20]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	699b      	ldr	r3, [r3, #24]
 8006a68:	041b      	lsls	r3, r3, #16
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a16      	ldr	r2, [pc, #88]	; (8006acc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d004      	beq.n	8006a82 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a14      	ldr	r2, [pc, #80]	; (8006ad0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d115      	bne.n	8006aae <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8c:	051b      	lsls	r3, r3, #20
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	69db      	ldr	r3, [r3, #28]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	6a1b      	ldr	r3, [r3, #32]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3714      	adds	r7, #20
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr
 8006acc:	40010000 	.word	0x40010000
 8006ad0:	40010400 	.word	0x40010400

08006ad4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006adc:	bf00      	nop
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006af0:	bf00      	nop
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b04:	bf00      	nop
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d101      	bne.n	8006b22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e042      	b.n	8006ba8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d106      	bne.n	8006b3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f7fa fbff 	bl	8001338 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2224      	movs	r2, #36	; 0x24
 8006b3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f022 0201 	bic.w	r2, r2, #1
 8006b50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 f8c2 	bl	8006cdc <UART_SetConfig>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d101      	bne.n	8006b62 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e022      	b.n	8006ba8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d002      	beq.n	8006b70 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 fe1e 	bl	80077ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	685a      	ldr	r2, [r3, #4]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	689a      	ldr	r2, [r3, #8]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f042 0201 	orr.w	r2, r2, #1
 8006b9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 fea5 	bl	80078f0 <UART_CheckIdleState>
 8006ba6:	4603      	mov	r3, r0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3708      	adds	r7, #8
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b08a      	sub	sp, #40	; 0x28
 8006bb4:	af02      	add	r7, sp, #8
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	603b      	str	r3, [r7, #0]
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bc6:	2b20      	cmp	r3, #32
 8006bc8:	f040 8083 	bne.w	8006cd2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d002      	beq.n	8006bd8 <HAL_UART_Transmit+0x28>
 8006bd2:	88fb      	ldrh	r3, [r7, #6]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d101      	bne.n	8006bdc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e07b      	b.n	8006cd4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d101      	bne.n	8006bea <HAL_UART_Transmit+0x3a>
 8006be6:	2302      	movs	r3, #2
 8006be8:	e074      	b.n	8006cd4 <HAL_UART_Transmit+0x124>
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2201      	movs	r2, #1
 8006bee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2221      	movs	r2, #33	; 0x21
 8006bfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c02:	f7fa fda9 	bl	8001758 <HAL_GetTick>
 8006c06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	88fa      	ldrh	r2, [r7, #6]
 8006c0c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	88fa      	ldrh	r2, [r7, #6]
 8006c14:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c20:	d108      	bne.n	8006c34 <HAL_UART_Transmit+0x84>
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d104      	bne.n	8006c34 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	61bb      	str	r3, [r7, #24]
 8006c32:	e003      	b.n	8006c3c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006c44:	e02c      	b.n	8006ca0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	9300      	str	r3, [sp, #0]
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	2180      	movs	r1, #128	; 0x80
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f000 fe98 	bl	8007986 <UART_WaitOnFlagUntilTimeout>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d001      	beq.n	8006c60 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	e039      	b.n	8006cd4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d10b      	bne.n	8006c7e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	881b      	ldrh	r3, [r3, #0]
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c74:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	3302      	adds	r3, #2
 8006c7a:	61bb      	str	r3, [r7, #24]
 8006c7c:	e007      	b.n	8006c8e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	781a      	ldrb	r2, [r3, #0]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	3b01      	subs	r3, #1
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1cc      	bne.n	8006c46 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	9300      	str	r3, [sp, #0]
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	2140      	movs	r1, #64	; 0x40
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f000 fe65 	bl	8007986 <UART_WaitOnFlagUntilTimeout>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d001      	beq.n	8006cc6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e006      	b.n	8006cd4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2220      	movs	r2, #32
 8006cca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	e000      	b.n	8006cd4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006cd2:	2302      	movs	r3, #2
  }
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3720      	adds	r7, #32
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ce0:	b092      	sub	sp, #72	; 0x48
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	689a      	ldr	r2, [r3, #8]
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	431a      	orrs	r2, r3
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	695b      	ldr	r3, [r3, #20]
 8006cfa:	431a      	orrs	r2, r3
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	69db      	ldr	r3, [r3, #28]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	4bbe      	ldr	r3, [pc, #760]	; (8007004 <UART_SetConfig+0x328>)
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	697a      	ldr	r2, [r7, #20]
 8006d10:	6812      	ldr	r2, [r2, #0]
 8006d12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d14:	430b      	orrs	r3, r1
 8006d16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	68da      	ldr	r2, [r3, #12]
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	430a      	orrs	r2, r1
 8006d2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	699b      	ldr	r3, [r3, #24]
 8006d32:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4ab3      	ldr	r2, [pc, #716]	; (8007008 <UART_SetConfig+0x32c>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d004      	beq.n	8006d48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	6a1b      	ldr	r3, [r3, #32]
 8006d42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d44:	4313      	orrs	r3, r2
 8006d46:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	689a      	ldr	r2, [r3, #8]
 8006d4e:	4baf      	ldr	r3, [pc, #700]	; (800700c <UART_SetConfig+0x330>)
 8006d50:	4013      	ands	r3, r2
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	6812      	ldr	r2, [r2, #0]
 8006d56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d58:	430b      	orrs	r3, r1
 8006d5a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d62:	f023 010f 	bic.w	r1, r3, #15
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	430a      	orrs	r2, r1
 8006d70:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4aa6      	ldr	r2, [pc, #664]	; (8007010 <UART_SetConfig+0x334>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d177      	bne.n	8006e6c <UART_SetConfig+0x190>
 8006d7c:	4ba5      	ldr	r3, [pc, #660]	; (8007014 <UART_SetConfig+0x338>)
 8006d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d84:	2b28      	cmp	r3, #40	; 0x28
 8006d86:	d86d      	bhi.n	8006e64 <UART_SetConfig+0x188>
 8006d88:	a201      	add	r2, pc, #4	; (adr r2, 8006d90 <UART_SetConfig+0xb4>)
 8006d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d8e:	bf00      	nop
 8006d90:	08006e35 	.word	0x08006e35
 8006d94:	08006e65 	.word	0x08006e65
 8006d98:	08006e65 	.word	0x08006e65
 8006d9c:	08006e65 	.word	0x08006e65
 8006da0:	08006e65 	.word	0x08006e65
 8006da4:	08006e65 	.word	0x08006e65
 8006da8:	08006e65 	.word	0x08006e65
 8006dac:	08006e65 	.word	0x08006e65
 8006db0:	08006e3d 	.word	0x08006e3d
 8006db4:	08006e65 	.word	0x08006e65
 8006db8:	08006e65 	.word	0x08006e65
 8006dbc:	08006e65 	.word	0x08006e65
 8006dc0:	08006e65 	.word	0x08006e65
 8006dc4:	08006e65 	.word	0x08006e65
 8006dc8:	08006e65 	.word	0x08006e65
 8006dcc:	08006e65 	.word	0x08006e65
 8006dd0:	08006e45 	.word	0x08006e45
 8006dd4:	08006e65 	.word	0x08006e65
 8006dd8:	08006e65 	.word	0x08006e65
 8006ddc:	08006e65 	.word	0x08006e65
 8006de0:	08006e65 	.word	0x08006e65
 8006de4:	08006e65 	.word	0x08006e65
 8006de8:	08006e65 	.word	0x08006e65
 8006dec:	08006e65 	.word	0x08006e65
 8006df0:	08006e4d 	.word	0x08006e4d
 8006df4:	08006e65 	.word	0x08006e65
 8006df8:	08006e65 	.word	0x08006e65
 8006dfc:	08006e65 	.word	0x08006e65
 8006e00:	08006e65 	.word	0x08006e65
 8006e04:	08006e65 	.word	0x08006e65
 8006e08:	08006e65 	.word	0x08006e65
 8006e0c:	08006e65 	.word	0x08006e65
 8006e10:	08006e55 	.word	0x08006e55
 8006e14:	08006e65 	.word	0x08006e65
 8006e18:	08006e65 	.word	0x08006e65
 8006e1c:	08006e65 	.word	0x08006e65
 8006e20:	08006e65 	.word	0x08006e65
 8006e24:	08006e65 	.word	0x08006e65
 8006e28:	08006e65 	.word	0x08006e65
 8006e2c:	08006e65 	.word	0x08006e65
 8006e30:	08006e5d 	.word	0x08006e5d
 8006e34:	2301      	movs	r3, #1
 8006e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e3a:	e222      	b.n	8007282 <UART_SetConfig+0x5a6>
 8006e3c:	2304      	movs	r3, #4
 8006e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e42:	e21e      	b.n	8007282 <UART_SetConfig+0x5a6>
 8006e44:	2308      	movs	r3, #8
 8006e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e4a:	e21a      	b.n	8007282 <UART_SetConfig+0x5a6>
 8006e4c:	2310      	movs	r3, #16
 8006e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e52:	e216      	b.n	8007282 <UART_SetConfig+0x5a6>
 8006e54:	2320      	movs	r3, #32
 8006e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e5a:	e212      	b.n	8007282 <UART_SetConfig+0x5a6>
 8006e5c:	2340      	movs	r3, #64	; 0x40
 8006e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e62:	e20e      	b.n	8007282 <UART_SetConfig+0x5a6>
 8006e64:	2380      	movs	r3, #128	; 0x80
 8006e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e6a:	e20a      	b.n	8007282 <UART_SetConfig+0x5a6>
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a69      	ldr	r2, [pc, #420]	; (8007018 <UART_SetConfig+0x33c>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d130      	bne.n	8006ed8 <UART_SetConfig+0x1fc>
 8006e76:	4b67      	ldr	r3, [pc, #412]	; (8007014 <UART_SetConfig+0x338>)
 8006e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e7a:	f003 0307 	and.w	r3, r3, #7
 8006e7e:	2b05      	cmp	r3, #5
 8006e80:	d826      	bhi.n	8006ed0 <UART_SetConfig+0x1f4>
 8006e82:	a201      	add	r2, pc, #4	; (adr r2, 8006e88 <UART_SetConfig+0x1ac>)
 8006e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e88:	08006ea1 	.word	0x08006ea1
 8006e8c:	08006ea9 	.word	0x08006ea9
 8006e90:	08006eb1 	.word	0x08006eb1
 8006e94:	08006eb9 	.word	0x08006eb9
 8006e98:	08006ec1 	.word	0x08006ec1
 8006e9c:	08006ec9 	.word	0x08006ec9
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ea6:	e1ec      	b.n	8007282 <UART_SetConfig+0x5a6>
 8006ea8:	2304      	movs	r3, #4
 8006eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eae:	e1e8      	b.n	8007282 <UART_SetConfig+0x5a6>
 8006eb0:	2308      	movs	r3, #8
 8006eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eb6:	e1e4      	b.n	8007282 <UART_SetConfig+0x5a6>
 8006eb8:	2310      	movs	r3, #16
 8006eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ebe:	e1e0      	b.n	8007282 <UART_SetConfig+0x5a6>
 8006ec0:	2320      	movs	r3, #32
 8006ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ec6:	e1dc      	b.n	8007282 <UART_SetConfig+0x5a6>
 8006ec8:	2340      	movs	r3, #64	; 0x40
 8006eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ece:	e1d8      	b.n	8007282 <UART_SetConfig+0x5a6>
 8006ed0:	2380      	movs	r3, #128	; 0x80
 8006ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ed6:	e1d4      	b.n	8007282 <UART_SetConfig+0x5a6>
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a4f      	ldr	r2, [pc, #316]	; (800701c <UART_SetConfig+0x340>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d130      	bne.n	8006f44 <UART_SetConfig+0x268>
 8006ee2:	4b4c      	ldr	r3, [pc, #304]	; (8007014 <UART_SetConfig+0x338>)
 8006ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ee6:	f003 0307 	and.w	r3, r3, #7
 8006eea:	2b05      	cmp	r3, #5
 8006eec:	d826      	bhi.n	8006f3c <UART_SetConfig+0x260>
 8006eee:	a201      	add	r2, pc, #4	; (adr r2, 8006ef4 <UART_SetConfig+0x218>)
 8006ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef4:	08006f0d 	.word	0x08006f0d
 8006ef8:	08006f15 	.word	0x08006f15
 8006efc:	08006f1d 	.word	0x08006f1d
 8006f00:	08006f25 	.word	0x08006f25
 8006f04:	08006f2d 	.word	0x08006f2d
 8006f08:	08006f35 	.word	0x08006f35
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f12:	e1b6      	b.n	8007282 <UART_SetConfig+0x5a6>
 8006f14:	2304      	movs	r3, #4
 8006f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f1a:	e1b2      	b.n	8007282 <UART_SetConfig+0x5a6>
 8006f1c:	2308      	movs	r3, #8
 8006f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f22:	e1ae      	b.n	8007282 <UART_SetConfig+0x5a6>
 8006f24:	2310      	movs	r3, #16
 8006f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f2a:	e1aa      	b.n	8007282 <UART_SetConfig+0x5a6>
 8006f2c:	2320      	movs	r3, #32
 8006f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f32:	e1a6      	b.n	8007282 <UART_SetConfig+0x5a6>
 8006f34:	2340      	movs	r3, #64	; 0x40
 8006f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f3a:	e1a2      	b.n	8007282 <UART_SetConfig+0x5a6>
 8006f3c:	2380      	movs	r3, #128	; 0x80
 8006f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f42:	e19e      	b.n	8007282 <UART_SetConfig+0x5a6>
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a35      	ldr	r2, [pc, #212]	; (8007020 <UART_SetConfig+0x344>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d130      	bne.n	8006fb0 <UART_SetConfig+0x2d4>
 8006f4e:	4b31      	ldr	r3, [pc, #196]	; (8007014 <UART_SetConfig+0x338>)
 8006f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f52:	f003 0307 	and.w	r3, r3, #7
 8006f56:	2b05      	cmp	r3, #5
 8006f58:	d826      	bhi.n	8006fa8 <UART_SetConfig+0x2cc>
 8006f5a:	a201      	add	r2, pc, #4	; (adr r2, 8006f60 <UART_SetConfig+0x284>)
 8006f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f60:	08006f79 	.word	0x08006f79
 8006f64:	08006f81 	.word	0x08006f81
 8006f68:	08006f89 	.word	0x08006f89
 8006f6c:	08006f91 	.word	0x08006f91
 8006f70:	08006f99 	.word	0x08006f99
 8006f74:	08006fa1 	.word	0x08006fa1
 8006f78:	2300      	movs	r3, #0
 8006f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f7e:	e180      	b.n	8007282 <UART_SetConfig+0x5a6>
 8006f80:	2304      	movs	r3, #4
 8006f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f86:	e17c      	b.n	8007282 <UART_SetConfig+0x5a6>
 8006f88:	2308      	movs	r3, #8
 8006f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f8e:	e178      	b.n	8007282 <UART_SetConfig+0x5a6>
 8006f90:	2310      	movs	r3, #16
 8006f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f96:	e174      	b.n	8007282 <UART_SetConfig+0x5a6>
 8006f98:	2320      	movs	r3, #32
 8006f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f9e:	e170      	b.n	8007282 <UART_SetConfig+0x5a6>
 8006fa0:	2340      	movs	r3, #64	; 0x40
 8006fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fa6:	e16c      	b.n	8007282 <UART_SetConfig+0x5a6>
 8006fa8:	2380      	movs	r3, #128	; 0x80
 8006faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fae:	e168      	b.n	8007282 <UART_SetConfig+0x5a6>
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a1b      	ldr	r2, [pc, #108]	; (8007024 <UART_SetConfig+0x348>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d142      	bne.n	8007040 <UART_SetConfig+0x364>
 8006fba:	4b16      	ldr	r3, [pc, #88]	; (8007014 <UART_SetConfig+0x338>)
 8006fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fbe:	f003 0307 	and.w	r3, r3, #7
 8006fc2:	2b05      	cmp	r3, #5
 8006fc4:	d838      	bhi.n	8007038 <UART_SetConfig+0x35c>
 8006fc6:	a201      	add	r2, pc, #4	; (adr r2, 8006fcc <UART_SetConfig+0x2f0>)
 8006fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fcc:	08006fe5 	.word	0x08006fe5
 8006fd0:	08006fed 	.word	0x08006fed
 8006fd4:	08006ff5 	.word	0x08006ff5
 8006fd8:	08006ffd 	.word	0x08006ffd
 8006fdc:	08007029 	.word	0x08007029
 8006fe0:	08007031 	.word	0x08007031
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fea:	e14a      	b.n	8007282 <UART_SetConfig+0x5a6>
 8006fec:	2304      	movs	r3, #4
 8006fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ff2:	e146      	b.n	8007282 <UART_SetConfig+0x5a6>
 8006ff4:	2308      	movs	r3, #8
 8006ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ffa:	e142      	b.n	8007282 <UART_SetConfig+0x5a6>
 8006ffc:	2310      	movs	r3, #16
 8006ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007002:	e13e      	b.n	8007282 <UART_SetConfig+0x5a6>
 8007004:	cfff69f3 	.word	0xcfff69f3
 8007008:	58000c00 	.word	0x58000c00
 800700c:	11fff4ff 	.word	0x11fff4ff
 8007010:	40011000 	.word	0x40011000
 8007014:	58024400 	.word	0x58024400
 8007018:	40004400 	.word	0x40004400
 800701c:	40004800 	.word	0x40004800
 8007020:	40004c00 	.word	0x40004c00
 8007024:	40005000 	.word	0x40005000
 8007028:	2320      	movs	r3, #32
 800702a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800702e:	e128      	b.n	8007282 <UART_SetConfig+0x5a6>
 8007030:	2340      	movs	r3, #64	; 0x40
 8007032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007036:	e124      	b.n	8007282 <UART_SetConfig+0x5a6>
 8007038:	2380      	movs	r3, #128	; 0x80
 800703a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800703e:	e120      	b.n	8007282 <UART_SetConfig+0x5a6>
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4acb      	ldr	r2, [pc, #812]	; (8007374 <UART_SetConfig+0x698>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d176      	bne.n	8007138 <UART_SetConfig+0x45c>
 800704a:	4bcb      	ldr	r3, [pc, #812]	; (8007378 <UART_SetConfig+0x69c>)
 800704c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800704e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007052:	2b28      	cmp	r3, #40	; 0x28
 8007054:	d86c      	bhi.n	8007130 <UART_SetConfig+0x454>
 8007056:	a201      	add	r2, pc, #4	; (adr r2, 800705c <UART_SetConfig+0x380>)
 8007058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800705c:	08007101 	.word	0x08007101
 8007060:	08007131 	.word	0x08007131
 8007064:	08007131 	.word	0x08007131
 8007068:	08007131 	.word	0x08007131
 800706c:	08007131 	.word	0x08007131
 8007070:	08007131 	.word	0x08007131
 8007074:	08007131 	.word	0x08007131
 8007078:	08007131 	.word	0x08007131
 800707c:	08007109 	.word	0x08007109
 8007080:	08007131 	.word	0x08007131
 8007084:	08007131 	.word	0x08007131
 8007088:	08007131 	.word	0x08007131
 800708c:	08007131 	.word	0x08007131
 8007090:	08007131 	.word	0x08007131
 8007094:	08007131 	.word	0x08007131
 8007098:	08007131 	.word	0x08007131
 800709c:	08007111 	.word	0x08007111
 80070a0:	08007131 	.word	0x08007131
 80070a4:	08007131 	.word	0x08007131
 80070a8:	08007131 	.word	0x08007131
 80070ac:	08007131 	.word	0x08007131
 80070b0:	08007131 	.word	0x08007131
 80070b4:	08007131 	.word	0x08007131
 80070b8:	08007131 	.word	0x08007131
 80070bc:	08007119 	.word	0x08007119
 80070c0:	08007131 	.word	0x08007131
 80070c4:	08007131 	.word	0x08007131
 80070c8:	08007131 	.word	0x08007131
 80070cc:	08007131 	.word	0x08007131
 80070d0:	08007131 	.word	0x08007131
 80070d4:	08007131 	.word	0x08007131
 80070d8:	08007131 	.word	0x08007131
 80070dc:	08007121 	.word	0x08007121
 80070e0:	08007131 	.word	0x08007131
 80070e4:	08007131 	.word	0x08007131
 80070e8:	08007131 	.word	0x08007131
 80070ec:	08007131 	.word	0x08007131
 80070f0:	08007131 	.word	0x08007131
 80070f4:	08007131 	.word	0x08007131
 80070f8:	08007131 	.word	0x08007131
 80070fc:	08007129 	.word	0x08007129
 8007100:	2301      	movs	r3, #1
 8007102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007106:	e0bc      	b.n	8007282 <UART_SetConfig+0x5a6>
 8007108:	2304      	movs	r3, #4
 800710a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800710e:	e0b8      	b.n	8007282 <UART_SetConfig+0x5a6>
 8007110:	2308      	movs	r3, #8
 8007112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007116:	e0b4      	b.n	8007282 <UART_SetConfig+0x5a6>
 8007118:	2310      	movs	r3, #16
 800711a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800711e:	e0b0      	b.n	8007282 <UART_SetConfig+0x5a6>
 8007120:	2320      	movs	r3, #32
 8007122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007126:	e0ac      	b.n	8007282 <UART_SetConfig+0x5a6>
 8007128:	2340      	movs	r3, #64	; 0x40
 800712a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800712e:	e0a8      	b.n	8007282 <UART_SetConfig+0x5a6>
 8007130:	2380      	movs	r3, #128	; 0x80
 8007132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007136:	e0a4      	b.n	8007282 <UART_SetConfig+0x5a6>
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a8f      	ldr	r2, [pc, #572]	; (800737c <UART_SetConfig+0x6a0>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d130      	bne.n	80071a4 <UART_SetConfig+0x4c8>
 8007142:	4b8d      	ldr	r3, [pc, #564]	; (8007378 <UART_SetConfig+0x69c>)
 8007144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007146:	f003 0307 	and.w	r3, r3, #7
 800714a:	2b05      	cmp	r3, #5
 800714c:	d826      	bhi.n	800719c <UART_SetConfig+0x4c0>
 800714e:	a201      	add	r2, pc, #4	; (adr r2, 8007154 <UART_SetConfig+0x478>)
 8007150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007154:	0800716d 	.word	0x0800716d
 8007158:	08007175 	.word	0x08007175
 800715c:	0800717d 	.word	0x0800717d
 8007160:	08007185 	.word	0x08007185
 8007164:	0800718d 	.word	0x0800718d
 8007168:	08007195 	.word	0x08007195
 800716c:	2300      	movs	r3, #0
 800716e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007172:	e086      	b.n	8007282 <UART_SetConfig+0x5a6>
 8007174:	2304      	movs	r3, #4
 8007176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800717a:	e082      	b.n	8007282 <UART_SetConfig+0x5a6>
 800717c:	2308      	movs	r3, #8
 800717e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007182:	e07e      	b.n	8007282 <UART_SetConfig+0x5a6>
 8007184:	2310      	movs	r3, #16
 8007186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800718a:	e07a      	b.n	8007282 <UART_SetConfig+0x5a6>
 800718c:	2320      	movs	r3, #32
 800718e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007192:	e076      	b.n	8007282 <UART_SetConfig+0x5a6>
 8007194:	2340      	movs	r3, #64	; 0x40
 8007196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800719a:	e072      	b.n	8007282 <UART_SetConfig+0x5a6>
 800719c:	2380      	movs	r3, #128	; 0x80
 800719e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071a2:	e06e      	b.n	8007282 <UART_SetConfig+0x5a6>
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a75      	ldr	r2, [pc, #468]	; (8007380 <UART_SetConfig+0x6a4>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d130      	bne.n	8007210 <UART_SetConfig+0x534>
 80071ae:	4b72      	ldr	r3, [pc, #456]	; (8007378 <UART_SetConfig+0x69c>)
 80071b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071b2:	f003 0307 	and.w	r3, r3, #7
 80071b6:	2b05      	cmp	r3, #5
 80071b8:	d826      	bhi.n	8007208 <UART_SetConfig+0x52c>
 80071ba:	a201      	add	r2, pc, #4	; (adr r2, 80071c0 <UART_SetConfig+0x4e4>)
 80071bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c0:	080071d9 	.word	0x080071d9
 80071c4:	080071e1 	.word	0x080071e1
 80071c8:	080071e9 	.word	0x080071e9
 80071cc:	080071f1 	.word	0x080071f1
 80071d0:	080071f9 	.word	0x080071f9
 80071d4:	08007201 	.word	0x08007201
 80071d8:	2300      	movs	r3, #0
 80071da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071de:	e050      	b.n	8007282 <UART_SetConfig+0x5a6>
 80071e0:	2304      	movs	r3, #4
 80071e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071e6:	e04c      	b.n	8007282 <UART_SetConfig+0x5a6>
 80071e8:	2308      	movs	r3, #8
 80071ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071ee:	e048      	b.n	8007282 <UART_SetConfig+0x5a6>
 80071f0:	2310      	movs	r3, #16
 80071f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071f6:	e044      	b.n	8007282 <UART_SetConfig+0x5a6>
 80071f8:	2320      	movs	r3, #32
 80071fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071fe:	e040      	b.n	8007282 <UART_SetConfig+0x5a6>
 8007200:	2340      	movs	r3, #64	; 0x40
 8007202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007206:	e03c      	b.n	8007282 <UART_SetConfig+0x5a6>
 8007208:	2380      	movs	r3, #128	; 0x80
 800720a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800720e:	e038      	b.n	8007282 <UART_SetConfig+0x5a6>
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a5b      	ldr	r2, [pc, #364]	; (8007384 <UART_SetConfig+0x6a8>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d130      	bne.n	800727c <UART_SetConfig+0x5a0>
 800721a:	4b57      	ldr	r3, [pc, #348]	; (8007378 <UART_SetConfig+0x69c>)
 800721c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800721e:	f003 0307 	and.w	r3, r3, #7
 8007222:	2b05      	cmp	r3, #5
 8007224:	d826      	bhi.n	8007274 <UART_SetConfig+0x598>
 8007226:	a201      	add	r2, pc, #4	; (adr r2, 800722c <UART_SetConfig+0x550>)
 8007228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800722c:	08007245 	.word	0x08007245
 8007230:	0800724d 	.word	0x0800724d
 8007234:	08007255 	.word	0x08007255
 8007238:	0800725d 	.word	0x0800725d
 800723c:	08007265 	.word	0x08007265
 8007240:	0800726d 	.word	0x0800726d
 8007244:	2302      	movs	r3, #2
 8007246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800724a:	e01a      	b.n	8007282 <UART_SetConfig+0x5a6>
 800724c:	2304      	movs	r3, #4
 800724e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007252:	e016      	b.n	8007282 <UART_SetConfig+0x5a6>
 8007254:	2308      	movs	r3, #8
 8007256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800725a:	e012      	b.n	8007282 <UART_SetConfig+0x5a6>
 800725c:	2310      	movs	r3, #16
 800725e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007262:	e00e      	b.n	8007282 <UART_SetConfig+0x5a6>
 8007264:	2320      	movs	r3, #32
 8007266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800726a:	e00a      	b.n	8007282 <UART_SetConfig+0x5a6>
 800726c:	2340      	movs	r3, #64	; 0x40
 800726e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007272:	e006      	b.n	8007282 <UART_SetConfig+0x5a6>
 8007274:	2380      	movs	r3, #128	; 0x80
 8007276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800727a:	e002      	b.n	8007282 <UART_SetConfig+0x5a6>
 800727c:	2380      	movs	r3, #128	; 0x80
 800727e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a3f      	ldr	r2, [pc, #252]	; (8007384 <UART_SetConfig+0x6a8>)
 8007288:	4293      	cmp	r3, r2
 800728a:	f040 80f8 	bne.w	800747e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800728e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007292:	2b20      	cmp	r3, #32
 8007294:	dc46      	bgt.n	8007324 <UART_SetConfig+0x648>
 8007296:	2b02      	cmp	r3, #2
 8007298:	f2c0 8082 	blt.w	80073a0 <UART_SetConfig+0x6c4>
 800729c:	3b02      	subs	r3, #2
 800729e:	2b1e      	cmp	r3, #30
 80072a0:	d87e      	bhi.n	80073a0 <UART_SetConfig+0x6c4>
 80072a2:	a201      	add	r2, pc, #4	; (adr r2, 80072a8 <UART_SetConfig+0x5cc>)
 80072a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a8:	0800732b 	.word	0x0800732b
 80072ac:	080073a1 	.word	0x080073a1
 80072b0:	08007333 	.word	0x08007333
 80072b4:	080073a1 	.word	0x080073a1
 80072b8:	080073a1 	.word	0x080073a1
 80072bc:	080073a1 	.word	0x080073a1
 80072c0:	08007343 	.word	0x08007343
 80072c4:	080073a1 	.word	0x080073a1
 80072c8:	080073a1 	.word	0x080073a1
 80072cc:	080073a1 	.word	0x080073a1
 80072d0:	080073a1 	.word	0x080073a1
 80072d4:	080073a1 	.word	0x080073a1
 80072d8:	080073a1 	.word	0x080073a1
 80072dc:	080073a1 	.word	0x080073a1
 80072e0:	08007353 	.word	0x08007353
 80072e4:	080073a1 	.word	0x080073a1
 80072e8:	080073a1 	.word	0x080073a1
 80072ec:	080073a1 	.word	0x080073a1
 80072f0:	080073a1 	.word	0x080073a1
 80072f4:	080073a1 	.word	0x080073a1
 80072f8:	080073a1 	.word	0x080073a1
 80072fc:	080073a1 	.word	0x080073a1
 8007300:	080073a1 	.word	0x080073a1
 8007304:	080073a1 	.word	0x080073a1
 8007308:	080073a1 	.word	0x080073a1
 800730c:	080073a1 	.word	0x080073a1
 8007310:	080073a1 	.word	0x080073a1
 8007314:	080073a1 	.word	0x080073a1
 8007318:	080073a1 	.word	0x080073a1
 800731c:	080073a1 	.word	0x080073a1
 8007320:	08007393 	.word	0x08007393
 8007324:	2b40      	cmp	r3, #64	; 0x40
 8007326:	d037      	beq.n	8007398 <UART_SetConfig+0x6bc>
 8007328:	e03a      	b.n	80073a0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800732a:	f7fd f805 	bl	8004338 <HAL_RCCEx_GetD3PCLK1Freq>
 800732e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007330:	e03c      	b.n	80073ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007332:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007336:	4618      	mov	r0, r3
 8007338:	f7fd f814 	bl	8004364 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800733c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007340:	e034      	b.n	80073ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007342:	f107 0318 	add.w	r3, r7, #24
 8007346:	4618      	mov	r0, r3
 8007348:	f7fd f960 	bl	800460c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007350:	e02c      	b.n	80073ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007352:	4b09      	ldr	r3, [pc, #36]	; (8007378 <UART_SetConfig+0x69c>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 0320 	and.w	r3, r3, #32
 800735a:	2b00      	cmp	r3, #0
 800735c:	d016      	beq.n	800738c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800735e:	4b06      	ldr	r3, [pc, #24]	; (8007378 <UART_SetConfig+0x69c>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	08db      	lsrs	r3, r3, #3
 8007364:	f003 0303 	and.w	r3, r3, #3
 8007368:	4a07      	ldr	r2, [pc, #28]	; (8007388 <UART_SetConfig+0x6ac>)
 800736a:	fa22 f303 	lsr.w	r3, r2, r3
 800736e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007370:	e01c      	b.n	80073ac <UART_SetConfig+0x6d0>
 8007372:	bf00      	nop
 8007374:	40011400 	.word	0x40011400
 8007378:	58024400 	.word	0x58024400
 800737c:	40007800 	.word	0x40007800
 8007380:	40007c00 	.word	0x40007c00
 8007384:	58000c00 	.word	0x58000c00
 8007388:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800738c:	4b9d      	ldr	r3, [pc, #628]	; (8007604 <UART_SetConfig+0x928>)
 800738e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007390:	e00c      	b.n	80073ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007392:	4b9d      	ldr	r3, [pc, #628]	; (8007608 <UART_SetConfig+0x92c>)
 8007394:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007396:	e009      	b.n	80073ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007398:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800739c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800739e:	e005      	b.n	80073ac <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80073a0:	2300      	movs	r3, #0
 80073a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80073aa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80073ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	f000 81de 	beq.w	8007770 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b8:	4a94      	ldr	r2, [pc, #592]	; (800760c <UART_SetConfig+0x930>)
 80073ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073be:	461a      	mov	r2, r3
 80073c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80073c6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	685a      	ldr	r2, [r3, #4]
 80073cc:	4613      	mov	r3, r2
 80073ce:	005b      	lsls	r3, r3, #1
 80073d0:	4413      	add	r3, r2
 80073d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d305      	bcc.n	80073e4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d903      	bls.n	80073ec <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80073e4:	2301      	movs	r3, #1
 80073e6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80073ea:	e1c1      	b.n	8007770 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ee:	2200      	movs	r2, #0
 80073f0:	60bb      	str	r3, [r7, #8]
 80073f2:	60fa      	str	r2, [r7, #12]
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f8:	4a84      	ldr	r2, [pc, #528]	; (800760c <UART_SetConfig+0x930>)
 80073fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073fe:	b29b      	uxth	r3, r3
 8007400:	2200      	movs	r2, #0
 8007402:	603b      	str	r3, [r7, #0]
 8007404:	607a      	str	r2, [r7, #4]
 8007406:	e9d7 2300 	ldrd	r2, r3, [r7]
 800740a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800740e:	f7f8 ffb7 	bl	8000380 <__aeabi_uldivmod>
 8007412:	4602      	mov	r2, r0
 8007414:	460b      	mov	r3, r1
 8007416:	4610      	mov	r0, r2
 8007418:	4619      	mov	r1, r3
 800741a:	f04f 0200 	mov.w	r2, #0
 800741e:	f04f 0300 	mov.w	r3, #0
 8007422:	020b      	lsls	r3, r1, #8
 8007424:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007428:	0202      	lsls	r2, r0, #8
 800742a:	6979      	ldr	r1, [r7, #20]
 800742c:	6849      	ldr	r1, [r1, #4]
 800742e:	0849      	lsrs	r1, r1, #1
 8007430:	2000      	movs	r0, #0
 8007432:	460c      	mov	r4, r1
 8007434:	4605      	mov	r5, r0
 8007436:	eb12 0804 	adds.w	r8, r2, r4
 800743a:	eb43 0905 	adc.w	r9, r3, r5
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	469a      	mov	sl, r3
 8007446:	4693      	mov	fp, r2
 8007448:	4652      	mov	r2, sl
 800744a:	465b      	mov	r3, fp
 800744c:	4640      	mov	r0, r8
 800744e:	4649      	mov	r1, r9
 8007450:	f7f8 ff96 	bl	8000380 <__aeabi_uldivmod>
 8007454:	4602      	mov	r2, r0
 8007456:	460b      	mov	r3, r1
 8007458:	4613      	mov	r3, r2
 800745a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800745c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800745e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007462:	d308      	bcc.n	8007476 <UART_SetConfig+0x79a>
 8007464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007466:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800746a:	d204      	bcs.n	8007476 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007472:	60da      	str	r2, [r3, #12]
 8007474:	e17c      	b.n	8007770 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800747c:	e178      	b.n	8007770 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	69db      	ldr	r3, [r3, #28]
 8007482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007486:	f040 80c5 	bne.w	8007614 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800748a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800748e:	2b20      	cmp	r3, #32
 8007490:	dc48      	bgt.n	8007524 <UART_SetConfig+0x848>
 8007492:	2b00      	cmp	r3, #0
 8007494:	db7b      	blt.n	800758e <UART_SetConfig+0x8b2>
 8007496:	2b20      	cmp	r3, #32
 8007498:	d879      	bhi.n	800758e <UART_SetConfig+0x8b2>
 800749a:	a201      	add	r2, pc, #4	; (adr r2, 80074a0 <UART_SetConfig+0x7c4>)
 800749c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a0:	0800752b 	.word	0x0800752b
 80074a4:	08007533 	.word	0x08007533
 80074a8:	0800758f 	.word	0x0800758f
 80074ac:	0800758f 	.word	0x0800758f
 80074b0:	0800753b 	.word	0x0800753b
 80074b4:	0800758f 	.word	0x0800758f
 80074b8:	0800758f 	.word	0x0800758f
 80074bc:	0800758f 	.word	0x0800758f
 80074c0:	0800754b 	.word	0x0800754b
 80074c4:	0800758f 	.word	0x0800758f
 80074c8:	0800758f 	.word	0x0800758f
 80074cc:	0800758f 	.word	0x0800758f
 80074d0:	0800758f 	.word	0x0800758f
 80074d4:	0800758f 	.word	0x0800758f
 80074d8:	0800758f 	.word	0x0800758f
 80074dc:	0800758f 	.word	0x0800758f
 80074e0:	0800755b 	.word	0x0800755b
 80074e4:	0800758f 	.word	0x0800758f
 80074e8:	0800758f 	.word	0x0800758f
 80074ec:	0800758f 	.word	0x0800758f
 80074f0:	0800758f 	.word	0x0800758f
 80074f4:	0800758f 	.word	0x0800758f
 80074f8:	0800758f 	.word	0x0800758f
 80074fc:	0800758f 	.word	0x0800758f
 8007500:	0800758f 	.word	0x0800758f
 8007504:	0800758f 	.word	0x0800758f
 8007508:	0800758f 	.word	0x0800758f
 800750c:	0800758f 	.word	0x0800758f
 8007510:	0800758f 	.word	0x0800758f
 8007514:	0800758f 	.word	0x0800758f
 8007518:	0800758f 	.word	0x0800758f
 800751c:	0800758f 	.word	0x0800758f
 8007520:	08007581 	.word	0x08007581
 8007524:	2b40      	cmp	r3, #64	; 0x40
 8007526:	d02e      	beq.n	8007586 <UART_SetConfig+0x8aa>
 8007528:	e031      	b.n	800758e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800752a:	f7fb ff51 	bl	80033d0 <HAL_RCC_GetPCLK1Freq>
 800752e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007530:	e033      	b.n	800759a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007532:	f7fb ff63 	bl	80033fc <HAL_RCC_GetPCLK2Freq>
 8007536:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007538:	e02f      	b.n	800759a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800753a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800753e:	4618      	mov	r0, r3
 8007540:	f7fc ff10 	bl	8004364 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007546:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007548:	e027      	b.n	800759a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800754a:	f107 0318 	add.w	r3, r7, #24
 800754e:	4618      	mov	r0, r3
 8007550:	f7fd f85c 	bl	800460c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007558:	e01f      	b.n	800759a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800755a:	4b2d      	ldr	r3, [pc, #180]	; (8007610 <UART_SetConfig+0x934>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 0320 	and.w	r3, r3, #32
 8007562:	2b00      	cmp	r3, #0
 8007564:	d009      	beq.n	800757a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007566:	4b2a      	ldr	r3, [pc, #168]	; (8007610 <UART_SetConfig+0x934>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	08db      	lsrs	r3, r3, #3
 800756c:	f003 0303 	and.w	r3, r3, #3
 8007570:	4a24      	ldr	r2, [pc, #144]	; (8007604 <UART_SetConfig+0x928>)
 8007572:	fa22 f303 	lsr.w	r3, r2, r3
 8007576:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007578:	e00f      	b.n	800759a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800757a:	4b22      	ldr	r3, [pc, #136]	; (8007604 <UART_SetConfig+0x928>)
 800757c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800757e:	e00c      	b.n	800759a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007580:	4b21      	ldr	r3, [pc, #132]	; (8007608 <UART_SetConfig+0x92c>)
 8007582:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007584:	e009      	b.n	800759a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800758a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800758c:	e005      	b.n	800759a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800758e:	2300      	movs	r3, #0
 8007590:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007598:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800759a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800759c:	2b00      	cmp	r3, #0
 800759e:	f000 80e7 	beq.w	8007770 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a6:	4a19      	ldr	r2, [pc, #100]	; (800760c <UART_SetConfig+0x930>)
 80075a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075ac:	461a      	mov	r2, r3
 80075ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80075b4:	005a      	lsls	r2, r3, #1
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	085b      	lsrs	r3, r3, #1
 80075bc:	441a      	add	r2, r3
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80075c6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ca:	2b0f      	cmp	r3, #15
 80075cc:	d916      	bls.n	80075fc <UART_SetConfig+0x920>
 80075ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075d4:	d212      	bcs.n	80075fc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80075d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d8:	b29b      	uxth	r3, r3
 80075da:	f023 030f 	bic.w	r3, r3, #15
 80075de:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80075e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e2:	085b      	lsrs	r3, r3, #1
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	f003 0307 	and.w	r3, r3, #7
 80075ea:	b29a      	uxth	r2, r3
 80075ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80075ee:	4313      	orrs	r3, r2
 80075f0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80075f8:	60da      	str	r2, [r3, #12]
 80075fa:	e0b9      	b.n	8007770 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007602:	e0b5      	b.n	8007770 <UART_SetConfig+0xa94>
 8007604:	03d09000 	.word	0x03d09000
 8007608:	003d0900 	.word	0x003d0900
 800760c:	0800b95c 	.word	0x0800b95c
 8007610:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007614:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007618:	2b20      	cmp	r3, #32
 800761a:	dc49      	bgt.n	80076b0 <UART_SetConfig+0x9d4>
 800761c:	2b00      	cmp	r3, #0
 800761e:	db7c      	blt.n	800771a <UART_SetConfig+0xa3e>
 8007620:	2b20      	cmp	r3, #32
 8007622:	d87a      	bhi.n	800771a <UART_SetConfig+0xa3e>
 8007624:	a201      	add	r2, pc, #4	; (adr r2, 800762c <UART_SetConfig+0x950>)
 8007626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800762a:	bf00      	nop
 800762c:	080076b7 	.word	0x080076b7
 8007630:	080076bf 	.word	0x080076bf
 8007634:	0800771b 	.word	0x0800771b
 8007638:	0800771b 	.word	0x0800771b
 800763c:	080076c7 	.word	0x080076c7
 8007640:	0800771b 	.word	0x0800771b
 8007644:	0800771b 	.word	0x0800771b
 8007648:	0800771b 	.word	0x0800771b
 800764c:	080076d7 	.word	0x080076d7
 8007650:	0800771b 	.word	0x0800771b
 8007654:	0800771b 	.word	0x0800771b
 8007658:	0800771b 	.word	0x0800771b
 800765c:	0800771b 	.word	0x0800771b
 8007660:	0800771b 	.word	0x0800771b
 8007664:	0800771b 	.word	0x0800771b
 8007668:	0800771b 	.word	0x0800771b
 800766c:	080076e7 	.word	0x080076e7
 8007670:	0800771b 	.word	0x0800771b
 8007674:	0800771b 	.word	0x0800771b
 8007678:	0800771b 	.word	0x0800771b
 800767c:	0800771b 	.word	0x0800771b
 8007680:	0800771b 	.word	0x0800771b
 8007684:	0800771b 	.word	0x0800771b
 8007688:	0800771b 	.word	0x0800771b
 800768c:	0800771b 	.word	0x0800771b
 8007690:	0800771b 	.word	0x0800771b
 8007694:	0800771b 	.word	0x0800771b
 8007698:	0800771b 	.word	0x0800771b
 800769c:	0800771b 	.word	0x0800771b
 80076a0:	0800771b 	.word	0x0800771b
 80076a4:	0800771b 	.word	0x0800771b
 80076a8:	0800771b 	.word	0x0800771b
 80076ac:	0800770d 	.word	0x0800770d
 80076b0:	2b40      	cmp	r3, #64	; 0x40
 80076b2:	d02e      	beq.n	8007712 <UART_SetConfig+0xa36>
 80076b4:	e031      	b.n	800771a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076b6:	f7fb fe8b 	bl	80033d0 <HAL_RCC_GetPCLK1Freq>
 80076ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80076bc:	e033      	b.n	8007726 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076be:	f7fb fe9d 	bl	80033fc <HAL_RCC_GetPCLK2Freq>
 80076c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80076c4:	e02f      	b.n	8007726 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076ca:	4618      	mov	r0, r3
 80076cc:	f7fc fe4a 	bl	8004364 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80076d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076d4:	e027      	b.n	8007726 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076d6:	f107 0318 	add.w	r3, r7, #24
 80076da:	4618      	mov	r0, r3
 80076dc:	f7fc ff96 	bl	800460c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076e4:	e01f      	b.n	8007726 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076e6:	4b2d      	ldr	r3, [pc, #180]	; (800779c <UART_SetConfig+0xac0>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 0320 	and.w	r3, r3, #32
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d009      	beq.n	8007706 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80076f2:	4b2a      	ldr	r3, [pc, #168]	; (800779c <UART_SetConfig+0xac0>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	08db      	lsrs	r3, r3, #3
 80076f8:	f003 0303 	and.w	r3, r3, #3
 80076fc:	4a28      	ldr	r2, [pc, #160]	; (80077a0 <UART_SetConfig+0xac4>)
 80076fe:	fa22 f303 	lsr.w	r3, r2, r3
 8007702:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007704:	e00f      	b.n	8007726 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007706:	4b26      	ldr	r3, [pc, #152]	; (80077a0 <UART_SetConfig+0xac4>)
 8007708:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800770a:	e00c      	b.n	8007726 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800770c:	4b25      	ldr	r3, [pc, #148]	; (80077a4 <UART_SetConfig+0xac8>)
 800770e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007710:	e009      	b.n	8007726 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007712:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007716:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007718:	e005      	b.n	8007726 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800771a:	2300      	movs	r3, #0
 800771c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007724:	bf00      	nop
    }

    if (pclk != 0U)
 8007726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007728:	2b00      	cmp	r3, #0
 800772a:	d021      	beq.n	8007770 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007730:	4a1d      	ldr	r2, [pc, #116]	; (80077a8 <UART_SetConfig+0xacc>)
 8007732:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007736:	461a      	mov	r2, r3
 8007738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800773a:	fbb3 f2f2 	udiv	r2, r3, r2
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	085b      	lsrs	r3, r3, #1
 8007744:	441a      	add	r2, r3
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	fbb2 f3f3 	udiv	r3, r2, r3
 800774e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007752:	2b0f      	cmp	r3, #15
 8007754:	d909      	bls.n	800776a <UART_SetConfig+0xa8e>
 8007756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800775c:	d205      	bcs.n	800776a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800775e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007760:	b29a      	uxth	r2, r3
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	60da      	str	r2, [r3, #12]
 8007768:	e002      	b.n	8007770 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	2201      	movs	r2, #1
 8007774:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	2201      	movs	r2, #1
 800777c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	2200      	movs	r2, #0
 8007784:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	2200      	movs	r2, #0
 800778a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800778c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007790:	4618      	mov	r0, r3
 8007792:	3748      	adds	r7, #72	; 0x48
 8007794:	46bd      	mov	sp, r7
 8007796:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800779a:	bf00      	nop
 800779c:	58024400 	.word	0x58024400
 80077a0:	03d09000 	.word	0x03d09000
 80077a4:	003d0900 	.word	0x003d0900
 80077a8:	0800b95c 	.word	0x0800b95c

080077ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b8:	f003 0301 	and.w	r3, r3, #1
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d00a      	beq.n	80077d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	430a      	orrs	r2, r1
 80077d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077da:	f003 0302 	and.w	r3, r3, #2
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00a      	beq.n	80077f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	430a      	orrs	r2, r1
 80077f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077fc:	f003 0304 	and.w	r3, r3, #4
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00a      	beq.n	800781a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	430a      	orrs	r2, r1
 8007818:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800781e:	f003 0308 	and.w	r3, r3, #8
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00a      	beq.n	800783c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	430a      	orrs	r2, r1
 800783a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007840:	f003 0310 	and.w	r3, r3, #16
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00a      	beq.n	800785e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	430a      	orrs	r2, r1
 800785c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007862:	f003 0320 	and.w	r3, r3, #32
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00a      	beq.n	8007880 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	430a      	orrs	r2, r1
 800787e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007888:	2b00      	cmp	r3, #0
 800788a:	d01a      	beq.n	80078c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	430a      	orrs	r2, r1
 80078a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078aa:	d10a      	bne.n	80078c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	430a      	orrs	r2, r1
 80078c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d00a      	beq.n	80078e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	430a      	orrs	r2, r1
 80078e2:	605a      	str	r2, [r3, #4]
  }
}
 80078e4:	bf00      	nop
 80078e6:	370c      	adds	r7, #12
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b086      	sub	sp, #24
 80078f4:	af02      	add	r7, sp, #8
 80078f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007900:	f7f9 ff2a 	bl	8001758 <HAL_GetTick>
 8007904:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 0308 	and.w	r3, r3, #8
 8007910:	2b08      	cmp	r3, #8
 8007912:	d10e      	bne.n	8007932 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007914:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007918:	9300      	str	r3, [sp, #0]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2200      	movs	r2, #0
 800791e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 f82f 	bl	8007986 <UART_WaitOnFlagUntilTimeout>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d001      	beq.n	8007932 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800792e:	2303      	movs	r3, #3
 8007930:	e025      	b.n	800797e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f003 0304 	and.w	r3, r3, #4
 800793c:	2b04      	cmp	r3, #4
 800793e:	d10e      	bne.n	800795e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007940:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007944:	9300      	str	r3, [sp, #0]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2200      	movs	r2, #0
 800794a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 f819 	bl	8007986 <UART_WaitOnFlagUntilTimeout>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d001      	beq.n	800795e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800795a:	2303      	movs	r3, #3
 800795c:	e00f      	b.n	800797e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2220      	movs	r2, #32
 8007962:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2220      	movs	r2, #32
 800796a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3710      	adds	r7, #16
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b09c      	sub	sp, #112	; 0x70
 800798a:	af00      	add	r7, sp, #0
 800798c:	60f8      	str	r0, [r7, #12]
 800798e:	60b9      	str	r1, [r7, #8]
 8007990:	603b      	str	r3, [r7, #0]
 8007992:	4613      	mov	r3, r2
 8007994:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007996:	e0a9      	b.n	8007aec <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007998:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800799a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800799e:	f000 80a5 	beq.w	8007aec <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079a2:	f7f9 fed9 	bl	8001758 <HAL_GetTick>
 80079a6:	4602      	mov	r2, r0
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	1ad3      	subs	r3, r2, r3
 80079ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d302      	bcc.n	80079b8 <UART_WaitOnFlagUntilTimeout+0x32>
 80079b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d140      	bne.n	8007a3a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079c0:	e853 3f00 	ldrex	r3, [r3]
 80079c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80079c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80079cc:	667b      	str	r3, [r7, #100]	; 0x64
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	461a      	mov	r2, r3
 80079d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079d8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80079dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80079de:	e841 2300 	strex	r3, r2, [r1]
 80079e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80079e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1e6      	bne.n	80079b8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	3308      	adds	r3, #8
 80079f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079f4:	e853 3f00 	ldrex	r3, [r3]
 80079f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079fc:	f023 0301 	bic.w	r3, r3, #1
 8007a00:	663b      	str	r3, [r7, #96]	; 0x60
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	3308      	adds	r3, #8
 8007a08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007a0a:	64ba      	str	r2, [r7, #72]	; 0x48
 8007a0c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007a10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a12:	e841 2300 	strex	r3, r2, [r1]
 8007a16:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1e5      	bne.n	80079ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2220      	movs	r2, #32
 8007a22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2220      	movs	r2, #32
 8007a2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007a36:	2303      	movs	r3, #3
 8007a38:	e069      	b.n	8007b0e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f003 0304 	and.w	r3, r3, #4
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d051      	beq.n	8007aec <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	69db      	ldr	r3, [r3, #28]
 8007a4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a56:	d149      	bne.n	8007aec <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a60:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6a:	e853 3f00 	ldrex	r3, [r3]
 8007a6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a80:	637b      	str	r3, [r7, #52]	; 0x34
 8007a82:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a88:	e841 2300 	strex	r3, r2, [r1]
 8007a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d1e6      	bne.n	8007a62 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	3308      	adds	r3, #8
 8007a9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	e853 3f00 	ldrex	r3, [r3]
 8007aa2:	613b      	str	r3, [r7, #16]
   return(result);
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	f023 0301 	bic.w	r3, r3, #1
 8007aaa:	66bb      	str	r3, [r7, #104]	; 0x68
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	3308      	adds	r3, #8
 8007ab2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007ab4:	623a      	str	r2, [r7, #32]
 8007ab6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab8:	69f9      	ldr	r1, [r7, #28]
 8007aba:	6a3a      	ldr	r2, [r7, #32]
 8007abc:	e841 2300 	strex	r3, r2, [r1]
 8007ac0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ac2:	69bb      	ldr	r3, [r7, #24]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d1e5      	bne.n	8007a94 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2220      	movs	r2, #32
 8007acc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2220      	movs	r2, #32
 8007ad4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2220      	movs	r2, #32
 8007adc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007ae8:	2303      	movs	r3, #3
 8007aea:	e010      	b.n	8007b0e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	69da      	ldr	r2, [r3, #28]
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	4013      	ands	r3, r2
 8007af6:	68ba      	ldr	r2, [r7, #8]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	bf0c      	ite	eq
 8007afc:	2301      	moveq	r3, #1
 8007afe:	2300      	movne	r3, #0
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	461a      	mov	r2, r3
 8007b04:	79fb      	ldrb	r3, [r7, #7]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	f43f af46 	beq.w	8007998 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b0c:	2300      	movs	r3, #0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3770      	adds	r7, #112	; 0x70
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}

08007b16 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007b16:	b480      	push	{r7}
 8007b18:	b085      	sub	sp, #20
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d101      	bne.n	8007b2c <HAL_UARTEx_DisableFifoMode+0x16>
 8007b28:	2302      	movs	r3, #2
 8007b2a:	e027      	b.n	8007b7c <HAL_UARTEx_DisableFifoMode+0x66>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2224      	movs	r2, #36	; 0x24
 8007b38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f022 0201 	bic.w	r2, r2, #1
 8007b52:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007b5a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2220      	movs	r2, #32
 8007b6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3714      	adds	r7, #20
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d101      	bne.n	8007ba0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	e02d      	b.n	8007bfc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2224      	movs	r2, #36	; 0x24
 8007bac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f022 0201 	bic.w	r2, r2, #1
 8007bc6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	683a      	ldr	r2, [r7, #0]
 8007bd8:	430a      	orrs	r2, r1
 8007bda:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 f84f 	bl	8007c80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2220      	movs	r2, #32
 8007bee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3710      	adds	r7, #16
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d101      	bne.n	8007c1c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007c18:	2302      	movs	r3, #2
 8007c1a:	e02d      	b.n	8007c78 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2224      	movs	r2, #36	; 0x24
 8007c28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f022 0201 	bic.w	r2, r2, #1
 8007c42:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	683a      	ldr	r2, [r7, #0]
 8007c54:	430a      	orrs	r2, r1
 8007c56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 f811 	bl	8007c80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	68fa      	ldr	r2, [r7, #12]
 8007c64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2220      	movs	r2, #32
 8007c6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007c76:	2300      	movs	r3, #0
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b085      	sub	sp, #20
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d108      	bne.n	8007ca2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007ca0:	e031      	b.n	8007d06 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007ca2:	2310      	movs	r3, #16
 8007ca4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007ca6:	2310      	movs	r3, #16
 8007ca8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	0e5b      	lsrs	r3, r3, #25
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	f003 0307 	and.w	r3, r3, #7
 8007cb8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	0f5b      	lsrs	r3, r3, #29
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	f003 0307 	and.w	r3, r3, #7
 8007cc8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007cca:	7bbb      	ldrb	r3, [r7, #14]
 8007ccc:	7b3a      	ldrb	r2, [r7, #12]
 8007cce:	4911      	ldr	r1, [pc, #68]	; (8007d14 <UARTEx_SetNbDataToProcess+0x94>)
 8007cd0:	5c8a      	ldrb	r2, [r1, r2]
 8007cd2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007cd6:	7b3a      	ldrb	r2, [r7, #12]
 8007cd8:	490f      	ldr	r1, [pc, #60]	; (8007d18 <UARTEx_SetNbDataToProcess+0x98>)
 8007cda:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007cdc:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ce8:	7bfb      	ldrb	r3, [r7, #15]
 8007cea:	7b7a      	ldrb	r2, [r7, #13]
 8007cec:	4909      	ldr	r1, [pc, #36]	; (8007d14 <UARTEx_SetNbDataToProcess+0x94>)
 8007cee:	5c8a      	ldrb	r2, [r1, r2]
 8007cf0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007cf4:	7b7a      	ldrb	r2, [r7, #13]
 8007cf6:	4908      	ldr	r1, [pc, #32]	; (8007d18 <UARTEx_SetNbDataToProcess+0x98>)
 8007cf8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007cfa:	fb93 f3f2 	sdiv	r3, r3, r2
 8007cfe:	b29a      	uxth	r2, r3
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007d06:	bf00      	nop
 8007d08:	3714      	adds	r7, #20
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr
 8007d12:	bf00      	nop
 8007d14:	0800b974 	.word	0x0800b974
 8007d18:	0800b97c 	.word	0x0800b97c

08007d1c <__NVIC_SetPriority>:
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	4603      	mov	r3, r0
 8007d24:	6039      	str	r1, [r7, #0]
 8007d26:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007d28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	db0a      	blt.n	8007d46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	b2da      	uxtb	r2, r3
 8007d34:	490c      	ldr	r1, [pc, #48]	; (8007d68 <__NVIC_SetPriority+0x4c>)
 8007d36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007d3a:	0112      	lsls	r2, r2, #4
 8007d3c:	b2d2      	uxtb	r2, r2
 8007d3e:	440b      	add	r3, r1
 8007d40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007d44:	e00a      	b.n	8007d5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	b2da      	uxtb	r2, r3
 8007d4a:	4908      	ldr	r1, [pc, #32]	; (8007d6c <__NVIC_SetPriority+0x50>)
 8007d4c:	88fb      	ldrh	r3, [r7, #6]
 8007d4e:	f003 030f 	and.w	r3, r3, #15
 8007d52:	3b04      	subs	r3, #4
 8007d54:	0112      	lsls	r2, r2, #4
 8007d56:	b2d2      	uxtb	r2, r2
 8007d58:	440b      	add	r3, r1
 8007d5a:	761a      	strb	r2, [r3, #24]
}
 8007d5c:	bf00      	nop
 8007d5e:	370c      	adds	r7, #12
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr
 8007d68:	e000e100 	.word	0xe000e100
 8007d6c:	e000ed00 	.word	0xe000ed00

08007d70 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007d70:	b580      	push	{r7, lr}
 8007d72:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007d74:	4b05      	ldr	r3, [pc, #20]	; (8007d8c <SysTick_Handler+0x1c>)
 8007d76:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007d78:	f002 f90e 	bl	8009f98 <xTaskGetSchedulerState>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d001      	beq.n	8007d86 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007d82:	f000 fd79 	bl	8008878 <xPortSysTickHandler>
  }
}
 8007d86:	bf00      	nop
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	e000e010 	.word	0xe000e010

08007d90 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007d90:	b580      	push	{r7, lr}
 8007d92:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007d94:	2100      	movs	r1, #0
 8007d96:	f06f 0004 	mvn.w	r0, #4
 8007d9a:	f7ff ffbf 	bl	8007d1c <__NVIC_SetPriority>
#endif
}
 8007d9e:	bf00      	nop
 8007da0:	bd80      	pop	{r7, pc}
	...

08007da4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007daa:	f3ef 8305 	mrs	r3, IPSR
 8007dae:	603b      	str	r3, [r7, #0]
  return(result);
 8007db0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d003      	beq.n	8007dbe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007db6:	f06f 0305 	mvn.w	r3, #5
 8007dba:	607b      	str	r3, [r7, #4]
 8007dbc:	e00c      	b.n	8007dd8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007dbe:	4b0a      	ldr	r3, [pc, #40]	; (8007de8 <osKernelInitialize+0x44>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d105      	bne.n	8007dd2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007dc6:	4b08      	ldr	r3, [pc, #32]	; (8007de8 <osKernelInitialize+0x44>)
 8007dc8:	2201      	movs	r2, #1
 8007dca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	607b      	str	r3, [r7, #4]
 8007dd0:	e002      	b.n	8007dd8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8007dd6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007dd8:	687b      	ldr	r3, [r7, #4]
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	370c      	adds	r7, #12
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr
 8007de6:	bf00      	nop
 8007de8:	240002f0 	.word	0x240002f0

08007dec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007df2:	f3ef 8305 	mrs	r3, IPSR
 8007df6:	603b      	str	r3, [r7, #0]
  return(result);
 8007df8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d003      	beq.n	8007e06 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007dfe:	f06f 0305 	mvn.w	r3, #5
 8007e02:	607b      	str	r3, [r7, #4]
 8007e04:	e010      	b.n	8007e28 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007e06:	4b0b      	ldr	r3, [pc, #44]	; (8007e34 <osKernelStart+0x48>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d109      	bne.n	8007e22 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007e0e:	f7ff ffbf 	bl	8007d90 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007e12:	4b08      	ldr	r3, [pc, #32]	; (8007e34 <osKernelStart+0x48>)
 8007e14:	2202      	movs	r2, #2
 8007e16:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007e18:	f001 fc62 	bl	80096e0 <vTaskStartScheduler>
      stat = osOK;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	607b      	str	r3, [r7, #4]
 8007e20:	e002      	b.n	8007e28 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007e22:	f04f 33ff 	mov.w	r3, #4294967295
 8007e26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007e28:	687b      	ldr	r3, [r7, #4]
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3708      	adds	r7, #8
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	240002f0 	.word	0x240002f0

08007e38 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b08e      	sub	sp, #56	; 0x38
 8007e3c:	af04      	add	r7, sp, #16
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007e44:	2300      	movs	r3, #0
 8007e46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e48:	f3ef 8305 	mrs	r3, IPSR
 8007e4c:	617b      	str	r3, [r7, #20]
  return(result);
 8007e4e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d17e      	bne.n	8007f52 <osThreadNew+0x11a>
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d07b      	beq.n	8007f52 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007e5a:	2380      	movs	r3, #128	; 0x80
 8007e5c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007e5e:	2318      	movs	r3, #24
 8007e60:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007e62:	2300      	movs	r3, #0
 8007e64:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007e66:	f04f 33ff 	mov.w	r3, #4294967295
 8007e6a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d045      	beq.n	8007efe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d002      	beq.n	8007e80 <osThreadNew+0x48>
        name = attr->name;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	699b      	ldr	r3, [r3, #24]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d002      	beq.n	8007e8e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	699b      	ldr	r3, [r3, #24]
 8007e8c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007e8e:	69fb      	ldr	r3, [r7, #28]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d008      	beq.n	8007ea6 <osThreadNew+0x6e>
 8007e94:	69fb      	ldr	r3, [r7, #28]
 8007e96:	2b38      	cmp	r3, #56	; 0x38
 8007e98:	d805      	bhi.n	8007ea6 <osThreadNew+0x6e>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	f003 0301 	and.w	r3, r3, #1
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d001      	beq.n	8007eaa <osThreadNew+0x72>
        return (NULL);
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	e054      	b.n	8007f54 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	695b      	ldr	r3, [r3, #20]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d003      	beq.n	8007eba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	695b      	ldr	r3, [r3, #20]
 8007eb6:	089b      	lsrs	r3, r3, #2
 8007eb8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d00e      	beq.n	8007ee0 <osThreadNew+0xa8>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	68db      	ldr	r3, [r3, #12]
 8007ec6:	2bbb      	cmp	r3, #187	; 0xbb
 8007ec8:	d90a      	bls.n	8007ee0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d006      	beq.n	8007ee0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	695b      	ldr	r3, [r3, #20]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d002      	beq.n	8007ee0 <osThreadNew+0xa8>
        mem = 1;
 8007eda:	2301      	movs	r3, #1
 8007edc:	61bb      	str	r3, [r7, #24]
 8007ede:	e010      	b.n	8007f02 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d10c      	bne.n	8007f02 <osThreadNew+0xca>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	68db      	ldr	r3, [r3, #12]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d108      	bne.n	8007f02 <osThreadNew+0xca>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	691b      	ldr	r3, [r3, #16]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d104      	bne.n	8007f02 <osThreadNew+0xca>
          mem = 0;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	61bb      	str	r3, [r7, #24]
 8007efc:	e001      	b.n	8007f02 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007efe:	2300      	movs	r3, #0
 8007f00:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007f02:	69bb      	ldr	r3, [r7, #24]
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d110      	bne.n	8007f2a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007f10:	9202      	str	r2, [sp, #8]
 8007f12:	9301      	str	r3, [sp, #4]
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	9300      	str	r3, [sp, #0]
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	6a3a      	ldr	r2, [r7, #32]
 8007f1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	f001 fa26 	bl	8009370 <xTaskCreateStatic>
 8007f24:	4603      	mov	r3, r0
 8007f26:	613b      	str	r3, [r7, #16]
 8007f28:	e013      	b.n	8007f52 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d110      	bne.n	8007f52 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007f30:	6a3b      	ldr	r3, [r7, #32]
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	f107 0310 	add.w	r3, r7, #16
 8007f38:	9301      	str	r3, [sp, #4]
 8007f3a:	69fb      	ldr	r3, [r7, #28]
 8007f3c:	9300      	str	r3, [sp, #0]
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f42:	68f8      	ldr	r0, [r7, #12]
 8007f44:	f001 fa71 	bl	800942a <xTaskCreate>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d001      	beq.n	8007f52 <osThreadNew+0x11a>
            hTask = NULL;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007f52:	693b      	ldr	r3, [r7, #16]
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3728      	adds	r7, #40	; 0x28
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007f5c:	b480      	push	{r7}
 8007f5e:	b085      	sub	sp, #20
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	4a07      	ldr	r2, [pc, #28]	; (8007f88 <vApplicationGetIdleTaskMemory+0x2c>)
 8007f6c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	4a06      	ldr	r2, [pc, #24]	; (8007f8c <vApplicationGetIdleTaskMemory+0x30>)
 8007f72:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2280      	movs	r2, #128	; 0x80
 8007f78:	601a      	str	r2, [r3, #0]
}
 8007f7a:	bf00      	nop
 8007f7c:	3714      	adds	r7, #20
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr
 8007f86:	bf00      	nop
 8007f88:	240002f4 	.word	0x240002f4
 8007f8c:	240003b0 	.word	0x240003b0

08007f90 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007f90:	b480      	push	{r7}
 8007f92:	b085      	sub	sp, #20
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	4a07      	ldr	r2, [pc, #28]	; (8007fbc <vApplicationGetTimerTaskMemory+0x2c>)
 8007fa0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	4a06      	ldr	r2, [pc, #24]	; (8007fc0 <vApplicationGetTimerTaskMemory+0x30>)
 8007fa6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007fae:	601a      	str	r2, [r3, #0]
}
 8007fb0:	bf00      	nop
 8007fb2:	3714      	adds	r7, #20
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr
 8007fbc:	240005b0 	.word	0x240005b0
 8007fc0:	2400066c 	.word	0x2400066c

08007fc4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b08a      	sub	sp, #40	; 0x28
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007fd0:	f001 fbf6 	bl	80097c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007fd4:	4b5b      	ldr	r3, [pc, #364]	; (8008144 <pvPortMalloc+0x180>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d101      	bne.n	8007fe0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007fdc:	f000 f920 	bl	8008220 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007fe0:	4b59      	ldr	r3, [pc, #356]	; (8008148 <pvPortMalloc+0x184>)
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4013      	ands	r3, r2
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f040 8093 	bne.w	8008114 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d01d      	beq.n	8008030 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007ff4:	2208      	movs	r2, #8
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4413      	add	r3, r2
 8007ffa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f003 0307 	and.w	r3, r3, #7
 8008002:	2b00      	cmp	r3, #0
 8008004:	d014      	beq.n	8008030 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f023 0307 	bic.w	r3, r3, #7
 800800c:	3308      	adds	r3, #8
 800800e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f003 0307 	and.w	r3, r3, #7
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00a      	beq.n	8008030 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800801a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800801e:	f383 8811 	msr	BASEPRI, r3
 8008022:	f3bf 8f6f 	isb	sy
 8008026:	f3bf 8f4f 	dsb	sy
 800802a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800802c:	bf00      	nop
 800802e:	e7fe      	b.n	800802e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d06e      	beq.n	8008114 <pvPortMalloc+0x150>
 8008036:	4b45      	ldr	r3, [pc, #276]	; (800814c <pvPortMalloc+0x188>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	429a      	cmp	r2, r3
 800803e:	d869      	bhi.n	8008114 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008040:	4b43      	ldr	r3, [pc, #268]	; (8008150 <pvPortMalloc+0x18c>)
 8008042:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008044:	4b42      	ldr	r3, [pc, #264]	; (8008150 <pvPortMalloc+0x18c>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800804a:	e004      	b.n	8008056 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800804c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	429a      	cmp	r2, r3
 800805e:	d903      	bls.n	8008068 <pvPortMalloc+0xa4>
 8008060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d1f1      	bne.n	800804c <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008068:	4b36      	ldr	r3, [pc, #216]	; (8008144 <pvPortMalloc+0x180>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800806e:	429a      	cmp	r2, r3
 8008070:	d050      	beq.n	8008114 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008072:	6a3b      	ldr	r3, [r7, #32]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	2208      	movs	r2, #8
 8008078:	4413      	add	r3, r2
 800807a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800807c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	6a3b      	ldr	r3, [r7, #32]
 8008082:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008086:	685a      	ldr	r2, [r3, #4]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	1ad2      	subs	r2, r2, r3
 800808c:	2308      	movs	r3, #8
 800808e:	005b      	lsls	r3, r3, #1
 8008090:	429a      	cmp	r2, r3
 8008092:	d91f      	bls.n	80080d4 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	4413      	add	r3, r2
 800809a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	f003 0307 	and.w	r3, r3, #7
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00a      	beq.n	80080bc <pvPortMalloc+0xf8>
	__asm volatile
 80080a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080aa:	f383 8811 	msr	BASEPRI, r3
 80080ae:	f3bf 8f6f 	isb	sy
 80080b2:	f3bf 8f4f 	dsb	sy
 80080b6:	613b      	str	r3, [r7, #16]
}
 80080b8:	bf00      	nop
 80080ba:	e7fe      	b.n	80080ba <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80080bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080be:	685a      	ldr	r2, [r3, #4]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	1ad2      	subs	r2, r2, r3
 80080c4:	69bb      	ldr	r3, [r7, #24]
 80080c6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80080c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80080ce:	69b8      	ldr	r0, [r7, #24]
 80080d0:	f000 f908 	bl	80082e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80080d4:	4b1d      	ldr	r3, [pc, #116]	; (800814c <pvPortMalloc+0x188>)
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	1ad3      	subs	r3, r2, r3
 80080de:	4a1b      	ldr	r2, [pc, #108]	; (800814c <pvPortMalloc+0x188>)
 80080e0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80080e2:	4b1a      	ldr	r3, [pc, #104]	; (800814c <pvPortMalloc+0x188>)
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	4b1b      	ldr	r3, [pc, #108]	; (8008154 <pvPortMalloc+0x190>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d203      	bcs.n	80080f6 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80080ee:	4b17      	ldr	r3, [pc, #92]	; (800814c <pvPortMalloc+0x188>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a18      	ldr	r2, [pc, #96]	; (8008154 <pvPortMalloc+0x190>)
 80080f4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80080f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f8:	685a      	ldr	r2, [r3, #4]
 80080fa:	4b13      	ldr	r3, [pc, #76]	; (8008148 <pvPortMalloc+0x184>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	431a      	orrs	r2, r3
 8008100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008102:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008106:	2200      	movs	r2, #0
 8008108:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800810a:	4b13      	ldr	r3, [pc, #76]	; (8008158 <pvPortMalloc+0x194>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	3301      	adds	r3, #1
 8008110:	4a11      	ldr	r2, [pc, #68]	; (8008158 <pvPortMalloc+0x194>)
 8008112:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008114:	f001 fb62 	bl	80097dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	f003 0307 	and.w	r3, r3, #7
 800811e:	2b00      	cmp	r3, #0
 8008120:	d00a      	beq.n	8008138 <pvPortMalloc+0x174>
	__asm volatile
 8008122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008126:	f383 8811 	msr	BASEPRI, r3
 800812a:	f3bf 8f6f 	isb	sy
 800812e:	f3bf 8f4f 	dsb	sy
 8008132:	60fb      	str	r3, [r7, #12]
}
 8008134:	bf00      	nop
 8008136:	e7fe      	b.n	8008136 <pvPortMalloc+0x172>
	return pvReturn;
 8008138:	69fb      	ldr	r3, [r7, #28]
}
 800813a:	4618      	mov	r0, r3
 800813c:	3728      	adds	r7, #40	; 0x28
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
 8008142:	bf00      	nop
 8008144:	24004674 	.word	0x24004674
 8008148:	24004688 	.word	0x24004688
 800814c:	24004678 	.word	0x24004678
 8008150:	2400466c 	.word	0x2400466c
 8008154:	2400467c 	.word	0x2400467c
 8008158:	24004680 	.word	0x24004680

0800815c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b086      	sub	sp, #24
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d04d      	beq.n	800820a <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800816e:	2308      	movs	r3, #8
 8008170:	425b      	negs	r3, r3
 8008172:	697a      	ldr	r2, [r7, #20]
 8008174:	4413      	add	r3, r2
 8008176:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	685a      	ldr	r2, [r3, #4]
 8008180:	4b24      	ldr	r3, [pc, #144]	; (8008214 <vPortFree+0xb8>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4013      	ands	r3, r2
 8008186:	2b00      	cmp	r3, #0
 8008188:	d10a      	bne.n	80081a0 <vPortFree+0x44>
	__asm volatile
 800818a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818e:	f383 8811 	msr	BASEPRI, r3
 8008192:	f3bf 8f6f 	isb	sy
 8008196:	f3bf 8f4f 	dsb	sy
 800819a:	60fb      	str	r3, [r7, #12]
}
 800819c:	bf00      	nop
 800819e:	e7fe      	b.n	800819e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d00a      	beq.n	80081be <vPortFree+0x62>
	__asm volatile
 80081a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ac:	f383 8811 	msr	BASEPRI, r3
 80081b0:	f3bf 8f6f 	isb	sy
 80081b4:	f3bf 8f4f 	dsb	sy
 80081b8:	60bb      	str	r3, [r7, #8]
}
 80081ba:	bf00      	nop
 80081bc:	e7fe      	b.n	80081bc <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	685a      	ldr	r2, [r3, #4]
 80081c2:	4b14      	ldr	r3, [pc, #80]	; (8008214 <vPortFree+0xb8>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4013      	ands	r3, r2
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d01e      	beq.n	800820a <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d11a      	bne.n	800820a <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	685a      	ldr	r2, [r3, #4]
 80081d8:	4b0e      	ldr	r3, [pc, #56]	; (8008214 <vPortFree+0xb8>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	43db      	mvns	r3, r3
 80081de:	401a      	ands	r2, r3
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80081e4:	f001 faec 	bl	80097c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	685a      	ldr	r2, [r3, #4]
 80081ec:	4b0a      	ldr	r3, [pc, #40]	; (8008218 <vPortFree+0xbc>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4413      	add	r3, r2
 80081f2:	4a09      	ldr	r2, [pc, #36]	; (8008218 <vPortFree+0xbc>)
 80081f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80081f6:	6938      	ldr	r0, [r7, #16]
 80081f8:	f000 f874 	bl	80082e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80081fc:	4b07      	ldr	r3, [pc, #28]	; (800821c <vPortFree+0xc0>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	3301      	adds	r3, #1
 8008202:	4a06      	ldr	r2, [pc, #24]	; (800821c <vPortFree+0xc0>)
 8008204:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008206:	f001 fae9 	bl	80097dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800820a:	bf00      	nop
 800820c:	3718      	adds	r7, #24
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	24004688 	.word	0x24004688
 8008218:	24004678 	.word	0x24004678
 800821c:	24004684 	.word	0x24004684

08008220 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008220:	b480      	push	{r7}
 8008222:	b085      	sub	sp, #20
 8008224:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008226:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800822a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800822c:	4b27      	ldr	r3, [pc, #156]	; (80082cc <prvHeapInit+0xac>)
 800822e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f003 0307 	and.w	r3, r3, #7
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00c      	beq.n	8008254 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	3307      	adds	r3, #7
 800823e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f023 0307 	bic.w	r3, r3, #7
 8008246:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008248:	68ba      	ldr	r2, [r7, #8]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	1ad3      	subs	r3, r2, r3
 800824e:	4a1f      	ldr	r2, [pc, #124]	; (80082cc <prvHeapInit+0xac>)
 8008250:	4413      	add	r3, r2
 8008252:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008258:	4a1d      	ldr	r2, [pc, #116]	; (80082d0 <prvHeapInit+0xb0>)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800825e:	4b1c      	ldr	r3, [pc, #112]	; (80082d0 <prvHeapInit+0xb0>)
 8008260:	2200      	movs	r2, #0
 8008262:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	68ba      	ldr	r2, [r7, #8]
 8008268:	4413      	add	r3, r2
 800826a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800826c:	2208      	movs	r2, #8
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	1a9b      	subs	r3, r3, r2
 8008272:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f023 0307 	bic.w	r3, r3, #7
 800827a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	4a15      	ldr	r2, [pc, #84]	; (80082d4 <prvHeapInit+0xb4>)
 8008280:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008282:	4b14      	ldr	r3, [pc, #80]	; (80082d4 <prvHeapInit+0xb4>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	2200      	movs	r2, #0
 8008288:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800828a:	4b12      	ldr	r3, [pc, #72]	; (80082d4 <prvHeapInit+0xb4>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2200      	movs	r2, #0
 8008290:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	68fa      	ldr	r2, [r7, #12]
 800829a:	1ad2      	subs	r2, r2, r3
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80082a0:	4b0c      	ldr	r3, [pc, #48]	; (80082d4 <prvHeapInit+0xb4>)
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	4a0a      	ldr	r2, [pc, #40]	; (80082d8 <prvHeapInit+0xb8>)
 80082ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	4a09      	ldr	r2, [pc, #36]	; (80082dc <prvHeapInit+0xbc>)
 80082b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80082b8:	4b09      	ldr	r3, [pc, #36]	; (80082e0 <prvHeapInit+0xc0>)
 80082ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80082be:	601a      	str	r2, [r3, #0]
}
 80082c0:	bf00      	nop
 80082c2:	3714      	adds	r7, #20
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr
 80082cc:	24000a6c 	.word	0x24000a6c
 80082d0:	2400466c 	.word	0x2400466c
 80082d4:	24004674 	.word	0x24004674
 80082d8:	2400467c 	.word	0x2400467c
 80082dc:	24004678 	.word	0x24004678
 80082e0:	24004688 	.word	0x24004688

080082e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80082e4:	b480      	push	{r7}
 80082e6:	b085      	sub	sp, #20
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80082ec:	4b28      	ldr	r3, [pc, #160]	; (8008390 <prvInsertBlockIntoFreeList+0xac>)
 80082ee:	60fb      	str	r3, [r7, #12]
 80082f0:	e002      	b.n	80082f8 <prvInsertBlockIntoFreeList+0x14>
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	60fb      	str	r3, [r7, #12]
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	429a      	cmp	r2, r3
 8008300:	d8f7      	bhi.n	80082f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	68ba      	ldr	r2, [r7, #8]
 800830c:	4413      	add	r3, r2
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	429a      	cmp	r2, r3
 8008312:	d108      	bne.n	8008326 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	685a      	ldr	r2, [r3, #4]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	441a      	add	r2, r3
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	68ba      	ldr	r2, [r7, #8]
 8008330:	441a      	add	r2, r3
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	429a      	cmp	r2, r3
 8008338:	d118      	bne.n	800836c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	4b15      	ldr	r3, [pc, #84]	; (8008394 <prvInsertBlockIntoFreeList+0xb0>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	429a      	cmp	r2, r3
 8008344:	d00d      	beq.n	8008362 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	685a      	ldr	r2, [r3, #4]
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	441a      	add	r2, r3
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	601a      	str	r2, [r3, #0]
 8008360:	e008      	b.n	8008374 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008362:	4b0c      	ldr	r3, [pc, #48]	; (8008394 <prvInsertBlockIntoFreeList+0xb0>)
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	601a      	str	r2, [r3, #0]
 800836a:	e003      	b.n	8008374 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681a      	ldr	r2, [r3, #0]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008374:	68fa      	ldr	r2, [r7, #12]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	429a      	cmp	r2, r3
 800837a:	d002      	beq.n	8008382 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008382:	bf00      	nop
 8008384:	3714      	adds	r7, #20
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr
 800838e:	bf00      	nop
 8008390:	2400466c 	.word	0x2400466c
 8008394:	24004674 	.word	0x24004674

08008398 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f103 0208 	add.w	r2, r3, #8
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f04f 32ff 	mov.w	r2, #4294967295
 80083b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f103 0208 	add.w	r2, r3, #8
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f103 0208 	add.w	r2, r3, #8
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80083cc:	bf00      	nop
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80083d8:	b480      	push	{r7}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2200      	movs	r2, #0
 80083e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80083e6:	bf00      	nop
 80083e8:	370c      	adds	r7, #12
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr

080083f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80083f2:	b480      	push	{r7}
 80083f4:	b085      	sub	sp, #20
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
 80083fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	68fa      	ldr	r2, [r7, #12]
 8008406:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	689a      	ldr	r2, [r3, #8]
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	683a      	ldr	r2, [r7, #0]
 8008416:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	683a      	ldr	r2, [r7, #0]
 800841c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	1c5a      	adds	r2, r3, #1
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	601a      	str	r2, [r3, #0]
}
 800842e:	bf00      	nop
 8008430:	3714      	adds	r7, #20
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr

0800843a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800843a:	b480      	push	{r7}
 800843c:	b085      	sub	sp, #20
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
 8008442:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008450:	d103      	bne.n	800845a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	691b      	ldr	r3, [r3, #16]
 8008456:	60fb      	str	r3, [r7, #12]
 8008458:	e00c      	b.n	8008474 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	3308      	adds	r3, #8
 800845e:	60fb      	str	r3, [r7, #12]
 8008460:	e002      	b.n	8008468 <vListInsert+0x2e>
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	60fb      	str	r3, [r7, #12]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	68ba      	ldr	r2, [r7, #8]
 8008470:	429a      	cmp	r2, r3
 8008472:	d2f6      	bcs.n	8008462 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	685a      	ldr	r2, [r3, #4]
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	683a      	ldr	r2, [r7, #0]
 8008482:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	68fa      	ldr	r2, [r7, #12]
 8008488:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	683a      	ldr	r2, [r7, #0]
 800848e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	1c5a      	adds	r2, r3, #1
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	601a      	str	r2, [r3, #0]
}
 80084a0:	bf00      	nop
 80084a2:	3714      	adds	r7, #20
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr

080084ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80084ac:	b480      	push	{r7}
 80084ae:	b085      	sub	sp, #20
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	691b      	ldr	r3, [r3, #16]
 80084b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	6892      	ldr	r2, [r2, #8]
 80084c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	6852      	ldr	r2, [r2, #4]
 80084cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d103      	bne.n	80084e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	689a      	ldr	r2, [r3, #8]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	1e5a      	subs	r2, r3, #1
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3714      	adds	r7, #20
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr

08008500 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008500:	b480      	push	{r7}
 8008502:	b085      	sub	sp, #20
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	60b9      	str	r1, [r7, #8]
 800850a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	3b04      	subs	r3, #4
 8008510:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008518:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	3b04      	subs	r3, #4
 800851e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	f023 0201 	bic.w	r2, r3, #1
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	3b04      	subs	r3, #4
 800852e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008530:	4a0c      	ldr	r2, [pc, #48]	; (8008564 <pxPortInitialiseStack+0x64>)
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	3b14      	subs	r3, #20
 800853a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	3b04      	subs	r3, #4
 8008546:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f06f 0202 	mvn.w	r2, #2
 800854e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	3b20      	subs	r3, #32
 8008554:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008556:	68fb      	ldr	r3, [r7, #12]
}
 8008558:	4618      	mov	r0, r3
 800855a:	3714      	adds	r7, #20
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr
 8008564:	08008569 	.word	0x08008569

08008568 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008568:	b480      	push	{r7}
 800856a:	b085      	sub	sp, #20
 800856c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800856e:	2300      	movs	r3, #0
 8008570:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008572:	4b12      	ldr	r3, [pc, #72]	; (80085bc <prvTaskExitError+0x54>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800857a:	d00a      	beq.n	8008592 <prvTaskExitError+0x2a>
	__asm volatile
 800857c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008580:	f383 8811 	msr	BASEPRI, r3
 8008584:	f3bf 8f6f 	isb	sy
 8008588:	f3bf 8f4f 	dsb	sy
 800858c:	60fb      	str	r3, [r7, #12]
}
 800858e:	bf00      	nop
 8008590:	e7fe      	b.n	8008590 <prvTaskExitError+0x28>
	__asm volatile
 8008592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008596:	f383 8811 	msr	BASEPRI, r3
 800859a:	f3bf 8f6f 	isb	sy
 800859e:	f3bf 8f4f 	dsb	sy
 80085a2:	60bb      	str	r3, [r7, #8]
}
 80085a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80085a6:	bf00      	nop
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d0fc      	beq.n	80085a8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80085ae:	bf00      	nop
 80085b0:	bf00      	nop
 80085b2:	3714      	adds	r7, #20
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr
 80085bc:	24000010 	.word	0x24000010

080085c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80085c0:	4b07      	ldr	r3, [pc, #28]	; (80085e0 <pxCurrentTCBConst2>)
 80085c2:	6819      	ldr	r1, [r3, #0]
 80085c4:	6808      	ldr	r0, [r1, #0]
 80085c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ca:	f380 8809 	msr	PSP, r0
 80085ce:	f3bf 8f6f 	isb	sy
 80085d2:	f04f 0000 	mov.w	r0, #0
 80085d6:	f380 8811 	msr	BASEPRI, r0
 80085da:	4770      	bx	lr
 80085dc:	f3af 8000 	nop.w

080085e0 <pxCurrentTCBConst2>:
 80085e0:	240046d4 	.word	0x240046d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80085e4:	bf00      	nop
 80085e6:	bf00      	nop

080085e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80085e8:	4808      	ldr	r0, [pc, #32]	; (800860c <prvPortStartFirstTask+0x24>)
 80085ea:	6800      	ldr	r0, [r0, #0]
 80085ec:	6800      	ldr	r0, [r0, #0]
 80085ee:	f380 8808 	msr	MSP, r0
 80085f2:	f04f 0000 	mov.w	r0, #0
 80085f6:	f380 8814 	msr	CONTROL, r0
 80085fa:	b662      	cpsie	i
 80085fc:	b661      	cpsie	f
 80085fe:	f3bf 8f4f 	dsb	sy
 8008602:	f3bf 8f6f 	isb	sy
 8008606:	df00      	svc	0
 8008608:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800860a:	bf00      	nop
 800860c:	e000ed08 	.word	0xe000ed08

08008610 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b086      	sub	sp, #24
 8008614:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008616:	4b46      	ldr	r3, [pc, #280]	; (8008730 <xPortStartScheduler+0x120>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a46      	ldr	r2, [pc, #280]	; (8008734 <xPortStartScheduler+0x124>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d10a      	bne.n	8008636 <xPortStartScheduler+0x26>
	__asm volatile
 8008620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008624:	f383 8811 	msr	BASEPRI, r3
 8008628:	f3bf 8f6f 	isb	sy
 800862c:	f3bf 8f4f 	dsb	sy
 8008630:	613b      	str	r3, [r7, #16]
}
 8008632:	bf00      	nop
 8008634:	e7fe      	b.n	8008634 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008636:	4b3e      	ldr	r3, [pc, #248]	; (8008730 <xPortStartScheduler+0x120>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a3f      	ldr	r2, [pc, #252]	; (8008738 <xPortStartScheduler+0x128>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d10a      	bne.n	8008656 <xPortStartScheduler+0x46>
	__asm volatile
 8008640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008644:	f383 8811 	msr	BASEPRI, r3
 8008648:	f3bf 8f6f 	isb	sy
 800864c:	f3bf 8f4f 	dsb	sy
 8008650:	60fb      	str	r3, [r7, #12]
}
 8008652:	bf00      	nop
 8008654:	e7fe      	b.n	8008654 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008656:	4b39      	ldr	r3, [pc, #228]	; (800873c <xPortStartScheduler+0x12c>)
 8008658:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	b2db      	uxtb	r3, r3
 8008660:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	22ff      	movs	r2, #255	; 0xff
 8008666:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	b2db      	uxtb	r3, r3
 800866e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008670:	78fb      	ldrb	r3, [r7, #3]
 8008672:	b2db      	uxtb	r3, r3
 8008674:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008678:	b2da      	uxtb	r2, r3
 800867a:	4b31      	ldr	r3, [pc, #196]	; (8008740 <xPortStartScheduler+0x130>)
 800867c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800867e:	4b31      	ldr	r3, [pc, #196]	; (8008744 <xPortStartScheduler+0x134>)
 8008680:	2207      	movs	r2, #7
 8008682:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008684:	e009      	b.n	800869a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008686:	4b2f      	ldr	r3, [pc, #188]	; (8008744 <xPortStartScheduler+0x134>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	3b01      	subs	r3, #1
 800868c:	4a2d      	ldr	r2, [pc, #180]	; (8008744 <xPortStartScheduler+0x134>)
 800868e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008690:	78fb      	ldrb	r3, [r7, #3]
 8008692:	b2db      	uxtb	r3, r3
 8008694:	005b      	lsls	r3, r3, #1
 8008696:	b2db      	uxtb	r3, r3
 8008698:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800869a:	78fb      	ldrb	r3, [r7, #3]
 800869c:	b2db      	uxtb	r3, r3
 800869e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086a2:	2b80      	cmp	r3, #128	; 0x80
 80086a4:	d0ef      	beq.n	8008686 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80086a6:	4b27      	ldr	r3, [pc, #156]	; (8008744 <xPortStartScheduler+0x134>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f1c3 0307 	rsb	r3, r3, #7
 80086ae:	2b04      	cmp	r3, #4
 80086b0:	d00a      	beq.n	80086c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80086b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b6:	f383 8811 	msr	BASEPRI, r3
 80086ba:	f3bf 8f6f 	isb	sy
 80086be:	f3bf 8f4f 	dsb	sy
 80086c2:	60bb      	str	r3, [r7, #8]
}
 80086c4:	bf00      	nop
 80086c6:	e7fe      	b.n	80086c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80086c8:	4b1e      	ldr	r3, [pc, #120]	; (8008744 <xPortStartScheduler+0x134>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	021b      	lsls	r3, r3, #8
 80086ce:	4a1d      	ldr	r2, [pc, #116]	; (8008744 <xPortStartScheduler+0x134>)
 80086d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80086d2:	4b1c      	ldr	r3, [pc, #112]	; (8008744 <xPortStartScheduler+0x134>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80086da:	4a1a      	ldr	r2, [pc, #104]	; (8008744 <xPortStartScheduler+0x134>)
 80086dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	b2da      	uxtb	r2, r3
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80086e6:	4b18      	ldr	r3, [pc, #96]	; (8008748 <xPortStartScheduler+0x138>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a17      	ldr	r2, [pc, #92]	; (8008748 <xPortStartScheduler+0x138>)
 80086ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80086f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80086f2:	4b15      	ldr	r3, [pc, #84]	; (8008748 <xPortStartScheduler+0x138>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a14      	ldr	r2, [pc, #80]	; (8008748 <xPortStartScheduler+0x138>)
 80086f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80086fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80086fe:	f000 f8dd 	bl	80088bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008702:	4b12      	ldr	r3, [pc, #72]	; (800874c <xPortStartScheduler+0x13c>)
 8008704:	2200      	movs	r2, #0
 8008706:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008708:	f000 f8fc 	bl	8008904 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800870c:	4b10      	ldr	r3, [pc, #64]	; (8008750 <xPortStartScheduler+0x140>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a0f      	ldr	r2, [pc, #60]	; (8008750 <xPortStartScheduler+0x140>)
 8008712:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008716:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008718:	f7ff ff66 	bl	80085e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800871c:	f001 f9c6 	bl	8009aac <vTaskSwitchContext>
	prvTaskExitError();
 8008720:	f7ff ff22 	bl	8008568 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008724:	2300      	movs	r3, #0
}
 8008726:	4618      	mov	r0, r3
 8008728:	3718      	adds	r7, #24
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	e000ed00 	.word	0xe000ed00
 8008734:	410fc271 	.word	0x410fc271
 8008738:	410fc270 	.word	0x410fc270
 800873c:	e000e400 	.word	0xe000e400
 8008740:	2400468c 	.word	0x2400468c
 8008744:	24004690 	.word	0x24004690
 8008748:	e000ed20 	.word	0xe000ed20
 800874c:	24000010 	.word	0x24000010
 8008750:	e000ef34 	.word	0xe000ef34

08008754 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
	__asm volatile
 800875a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875e:	f383 8811 	msr	BASEPRI, r3
 8008762:	f3bf 8f6f 	isb	sy
 8008766:	f3bf 8f4f 	dsb	sy
 800876a:	607b      	str	r3, [r7, #4]
}
 800876c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800876e:	4b0f      	ldr	r3, [pc, #60]	; (80087ac <vPortEnterCritical+0x58>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	3301      	adds	r3, #1
 8008774:	4a0d      	ldr	r2, [pc, #52]	; (80087ac <vPortEnterCritical+0x58>)
 8008776:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008778:	4b0c      	ldr	r3, [pc, #48]	; (80087ac <vPortEnterCritical+0x58>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	2b01      	cmp	r3, #1
 800877e:	d10f      	bne.n	80087a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008780:	4b0b      	ldr	r3, [pc, #44]	; (80087b0 <vPortEnterCritical+0x5c>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	b2db      	uxtb	r3, r3
 8008786:	2b00      	cmp	r3, #0
 8008788:	d00a      	beq.n	80087a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800878a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800878e:	f383 8811 	msr	BASEPRI, r3
 8008792:	f3bf 8f6f 	isb	sy
 8008796:	f3bf 8f4f 	dsb	sy
 800879a:	603b      	str	r3, [r7, #0]
}
 800879c:	bf00      	nop
 800879e:	e7fe      	b.n	800879e <vPortEnterCritical+0x4a>
	}
}
 80087a0:	bf00      	nop
 80087a2:	370c      	adds	r7, #12
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr
 80087ac:	24000010 	.word	0x24000010
 80087b0:	e000ed04 	.word	0xe000ed04

080087b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80087ba:	4b12      	ldr	r3, [pc, #72]	; (8008804 <vPortExitCritical+0x50>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d10a      	bne.n	80087d8 <vPortExitCritical+0x24>
	__asm volatile
 80087c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c6:	f383 8811 	msr	BASEPRI, r3
 80087ca:	f3bf 8f6f 	isb	sy
 80087ce:	f3bf 8f4f 	dsb	sy
 80087d2:	607b      	str	r3, [r7, #4]
}
 80087d4:	bf00      	nop
 80087d6:	e7fe      	b.n	80087d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80087d8:	4b0a      	ldr	r3, [pc, #40]	; (8008804 <vPortExitCritical+0x50>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	3b01      	subs	r3, #1
 80087de:	4a09      	ldr	r2, [pc, #36]	; (8008804 <vPortExitCritical+0x50>)
 80087e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80087e2:	4b08      	ldr	r3, [pc, #32]	; (8008804 <vPortExitCritical+0x50>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d105      	bne.n	80087f6 <vPortExitCritical+0x42>
 80087ea:	2300      	movs	r3, #0
 80087ec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80087f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80087f6:	bf00      	nop
 80087f8:	370c      	adds	r7, #12
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop
 8008804:	24000010 	.word	0x24000010
	...

08008810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008810:	f3ef 8009 	mrs	r0, PSP
 8008814:	f3bf 8f6f 	isb	sy
 8008818:	4b15      	ldr	r3, [pc, #84]	; (8008870 <pxCurrentTCBConst>)
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	f01e 0f10 	tst.w	lr, #16
 8008820:	bf08      	it	eq
 8008822:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008826:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800882a:	6010      	str	r0, [r2, #0]
 800882c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008830:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008834:	f380 8811 	msr	BASEPRI, r0
 8008838:	f3bf 8f4f 	dsb	sy
 800883c:	f3bf 8f6f 	isb	sy
 8008840:	f001 f934 	bl	8009aac <vTaskSwitchContext>
 8008844:	f04f 0000 	mov.w	r0, #0
 8008848:	f380 8811 	msr	BASEPRI, r0
 800884c:	bc09      	pop	{r0, r3}
 800884e:	6819      	ldr	r1, [r3, #0]
 8008850:	6808      	ldr	r0, [r1, #0]
 8008852:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008856:	f01e 0f10 	tst.w	lr, #16
 800885a:	bf08      	it	eq
 800885c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008860:	f380 8809 	msr	PSP, r0
 8008864:	f3bf 8f6f 	isb	sy
 8008868:	4770      	bx	lr
 800886a:	bf00      	nop
 800886c:	f3af 8000 	nop.w

08008870 <pxCurrentTCBConst>:
 8008870:	240046d4 	.word	0x240046d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008874:	bf00      	nop
 8008876:	bf00      	nop

08008878 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
	__asm volatile
 800887e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008882:	f383 8811 	msr	BASEPRI, r3
 8008886:	f3bf 8f6f 	isb	sy
 800888a:	f3bf 8f4f 	dsb	sy
 800888e:	607b      	str	r3, [r7, #4]
}
 8008890:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008892:	f001 f851 	bl	8009938 <xTaskIncrementTick>
 8008896:	4603      	mov	r3, r0
 8008898:	2b00      	cmp	r3, #0
 800889a:	d003      	beq.n	80088a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800889c:	4b06      	ldr	r3, [pc, #24]	; (80088b8 <xPortSysTickHandler+0x40>)
 800889e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088a2:	601a      	str	r2, [r3, #0]
 80088a4:	2300      	movs	r3, #0
 80088a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	f383 8811 	msr	BASEPRI, r3
}
 80088ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80088b0:	bf00      	nop
 80088b2:	3708      	adds	r7, #8
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	e000ed04 	.word	0xe000ed04

080088bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80088bc:	b480      	push	{r7}
 80088be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80088c0:	4b0b      	ldr	r3, [pc, #44]	; (80088f0 <vPortSetupTimerInterrupt+0x34>)
 80088c2:	2200      	movs	r2, #0
 80088c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80088c6:	4b0b      	ldr	r3, [pc, #44]	; (80088f4 <vPortSetupTimerInterrupt+0x38>)
 80088c8:	2200      	movs	r2, #0
 80088ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80088cc:	4b0a      	ldr	r3, [pc, #40]	; (80088f8 <vPortSetupTimerInterrupt+0x3c>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a0a      	ldr	r2, [pc, #40]	; (80088fc <vPortSetupTimerInterrupt+0x40>)
 80088d2:	fba2 2303 	umull	r2, r3, r2, r3
 80088d6:	099b      	lsrs	r3, r3, #6
 80088d8:	4a09      	ldr	r2, [pc, #36]	; (8008900 <vPortSetupTimerInterrupt+0x44>)
 80088da:	3b01      	subs	r3, #1
 80088dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80088de:	4b04      	ldr	r3, [pc, #16]	; (80088f0 <vPortSetupTimerInterrupt+0x34>)
 80088e0:	2207      	movs	r2, #7
 80088e2:	601a      	str	r2, [r3, #0]
}
 80088e4:	bf00      	nop
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr
 80088ee:	bf00      	nop
 80088f0:	e000e010 	.word	0xe000e010
 80088f4:	e000e018 	.word	0xe000e018
 80088f8:	24000000 	.word	0x24000000
 80088fc:	10624dd3 	.word	0x10624dd3
 8008900:	e000e014 	.word	0xe000e014

08008904 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008904:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008914 <vPortEnableVFP+0x10>
 8008908:	6801      	ldr	r1, [r0, #0]
 800890a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800890e:	6001      	str	r1, [r0, #0]
 8008910:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008912:	bf00      	nop
 8008914:	e000ed88 	.word	0xe000ed88

08008918 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008918:	b480      	push	{r7}
 800891a:	b085      	sub	sp, #20
 800891c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800891e:	f3ef 8305 	mrs	r3, IPSR
 8008922:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2b0f      	cmp	r3, #15
 8008928:	d914      	bls.n	8008954 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800892a:	4a17      	ldr	r2, [pc, #92]	; (8008988 <vPortValidateInterruptPriority+0x70>)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	4413      	add	r3, r2
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008934:	4b15      	ldr	r3, [pc, #84]	; (800898c <vPortValidateInterruptPriority+0x74>)
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	7afa      	ldrb	r2, [r7, #11]
 800893a:	429a      	cmp	r2, r3
 800893c:	d20a      	bcs.n	8008954 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800893e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008942:	f383 8811 	msr	BASEPRI, r3
 8008946:	f3bf 8f6f 	isb	sy
 800894a:	f3bf 8f4f 	dsb	sy
 800894e:	607b      	str	r3, [r7, #4]
}
 8008950:	bf00      	nop
 8008952:	e7fe      	b.n	8008952 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008954:	4b0e      	ldr	r3, [pc, #56]	; (8008990 <vPortValidateInterruptPriority+0x78>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800895c:	4b0d      	ldr	r3, [pc, #52]	; (8008994 <vPortValidateInterruptPriority+0x7c>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	429a      	cmp	r2, r3
 8008962:	d90a      	bls.n	800897a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008968:	f383 8811 	msr	BASEPRI, r3
 800896c:	f3bf 8f6f 	isb	sy
 8008970:	f3bf 8f4f 	dsb	sy
 8008974:	603b      	str	r3, [r7, #0]
}
 8008976:	bf00      	nop
 8008978:	e7fe      	b.n	8008978 <vPortValidateInterruptPriority+0x60>
	}
 800897a:	bf00      	nop
 800897c:	3714      	adds	r7, #20
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr
 8008986:	bf00      	nop
 8008988:	e000e3f0 	.word	0xe000e3f0
 800898c:	2400468c 	.word	0x2400468c
 8008990:	e000ed0c 	.word	0xe000ed0c
 8008994:	24004690 	.word	0x24004690

08008998 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d10a      	bne.n	80089c2 <xQueueGenericReset+0x2a>
	__asm volatile
 80089ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b0:	f383 8811 	msr	BASEPRI, r3
 80089b4:	f3bf 8f6f 	isb	sy
 80089b8:	f3bf 8f4f 	dsb	sy
 80089bc:	60bb      	str	r3, [r7, #8]
}
 80089be:	bf00      	nop
 80089c0:	e7fe      	b.n	80089c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80089c2:	f7ff fec7 	bl	8008754 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681a      	ldr	r2, [r3, #0]
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089ce:	68f9      	ldr	r1, [r7, #12]
 80089d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80089d2:	fb01 f303 	mul.w	r3, r1, r3
 80089d6:	441a      	add	r2, r3
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2200      	movs	r2, #0
 80089e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089f2:	3b01      	subs	r3, #1
 80089f4:	68f9      	ldr	r1, [r7, #12]
 80089f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80089f8:	fb01 f303 	mul.w	r3, r1, r3
 80089fc:	441a      	add	r2, r3
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	22ff      	movs	r2, #255	; 0xff
 8008a06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	22ff      	movs	r2, #255	; 0xff
 8008a0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d114      	bne.n	8008a42 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	691b      	ldr	r3, [r3, #16]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d01a      	beq.n	8008a56 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	3310      	adds	r3, #16
 8008a24:	4618      	mov	r0, r3
 8008a26:	f001 f8f5 	bl	8009c14 <xTaskRemoveFromEventList>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d012      	beq.n	8008a56 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008a30:	4b0c      	ldr	r3, [pc, #48]	; (8008a64 <xQueueGenericReset+0xcc>)
 8008a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a36:	601a      	str	r2, [r3, #0]
 8008a38:	f3bf 8f4f 	dsb	sy
 8008a3c:	f3bf 8f6f 	isb	sy
 8008a40:	e009      	b.n	8008a56 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	3310      	adds	r3, #16
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7ff fca6 	bl	8008398 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	3324      	adds	r3, #36	; 0x24
 8008a50:	4618      	mov	r0, r3
 8008a52:	f7ff fca1 	bl	8008398 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008a56:	f7ff fead 	bl	80087b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008a5a:	2301      	movs	r3, #1
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3710      	adds	r7, #16
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	e000ed04 	.word	0xe000ed04

08008a68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b08e      	sub	sp, #56	; 0x38
 8008a6c:	af02      	add	r7, sp, #8
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	607a      	str	r2, [r7, #4]
 8008a74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d10a      	bne.n	8008a92 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a80:	f383 8811 	msr	BASEPRI, r3
 8008a84:	f3bf 8f6f 	isb	sy
 8008a88:	f3bf 8f4f 	dsb	sy
 8008a8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008a8e:	bf00      	nop
 8008a90:	e7fe      	b.n	8008a90 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d10a      	bne.n	8008aae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9c:	f383 8811 	msr	BASEPRI, r3
 8008aa0:	f3bf 8f6f 	isb	sy
 8008aa4:	f3bf 8f4f 	dsb	sy
 8008aa8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008aaa:	bf00      	nop
 8008aac:	e7fe      	b.n	8008aac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d002      	beq.n	8008aba <xQueueGenericCreateStatic+0x52>
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d001      	beq.n	8008abe <xQueueGenericCreateStatic+0x56>
 8008aba:	2301      	movs	r3, #1
 8008abc:	e000      	b.n	8008ac0 <xQueueGenericCreateStatic+0x58>
 8008abe:	2300      	movs	r3, #0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d10a      	bne.n	8008ada <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac8:	f383 8811 	msr	BASEPRI, r3
 8008acc:	f3bf 8f6f 	isb	sy
 8008ad0:	f3bf 8f4f 	dsb	sy
 8008ad4:	623b      	str	r3, [r7, #32]
}
 8008ad6:	bf00      	nop
 8008ad8:	e7fe      	b.n	8008ad8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d102      	bne.n	8008ae6 <xQueueGenericCreateStatic+0x7e>
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d101      	bne.n	8008aea <xQueueGenericCreateStatic+0x82>
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e000      	b.n	8008aec <xQueueGenericCreateStatic+0x84>
 8008aea:	2300      	movs	r3, #0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d10a      	bne.n	8008b06 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af4:	f383 8811 	msr	BASEPRI, r3
 8008af8:	f3bf 8f6f 	isb	sy
 8008afc:	f3bf 8f4f 	dsb	sy
 8008b00:	61fb      	str	r3, [r7, #28]
}
 8008b02:	bf00      	nop
 8008b04:	e7fe      	b.n	8008b04 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008b06:	2350      	movs	r3, #80	; 0x50
 8008b08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	2b50      	cmp	r3, #80	; 0x50
 8008b0e:	d00a      	beq.n	8008b26 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b14:	f383 8811 	msr	BASEPRI, r3
 8008b18:	f3bf 8f6f 	isb	sy
 8008b1c:	f3bf 8f4f 	dsb	sy
 8008b20:	61bb      	str	r3, [r7, #24]
}
 8008b22:	bf00      	nop
 8008b24:	e7fe      	b.n	8008b24 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008b26:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00d      	beq.n	8008b4e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b34:	2201      	movs	r2, #1
 8008b36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008b3a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b40:	9300      	str	r3, [sp, #0]
 8008b42:	4613      	mov	r3, r2
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	68b9      	ldr	r1, [r7, #8]
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	f000 f805 	bl	8008b58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3730      	adds	r7, #48	; 0x30
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	60b9      	str	r1, [r7, #8]
 8008b62:	607a      	str	r2, [r7, #4]
 8008b64:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d103      	bne.n	8008b74 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008b6c:	69bb      	ldr	r3, [r7, #24]
 8008b6e:	69ba      	ldr	r2, [r7, #24]
 8008b70:	601a      	str	r2, [r3, #0]
 8008b72:	e002      	b.n	8008b7a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008b74:	69bb      	ldr	r3, [r7, #24]
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008b7a:	69bb      	ldr	r3, [r7, #24]
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008b80:	69bb      	ldr	r3, [r7, #24]
 8008b82:	68ba      	ldr	r2, [r7, #8]
 8008b84:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008b86:	2101      	movs	r1, #1
 8008b88:	69b8      	ldr	r0, [r7, #24]
 8008b8a:	f7ff ff05 	bl	8008998 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008b8e:	69bb      	ldr	r3, [r7, #24]
 8008b90:	78fa      	ldrb	r2, [r7, #3]
 8008b92:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008b96:	bf00      	nop
 8008b98:	3710      	adds	r7, #16
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
	...

08008ba0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b08e      	sub	sp, #56	; 0x38
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	60f8      	str	r0, [r7, #12]
 8008ba8:	60b9      	str	r1, [r7, #8]
 8008baa:	607a      	str	r2, [r7, #4]
 8008bac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d10a      	bne.n	8008bd2 <xQueueGenericSend+0x32>
	__asm volatile
 8008bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc0:	f383 8811 	msr	BASEPRI, r3
 8008bc4:	f3bf 8f6f 	isb	sy
 8008bc8:	f3bf 8f4f 	dsb	sy
 8008bcc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008bce:	bf00      	nop
 8008bd0:	e7fe      	b.n	8008bd0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d103      	bne.n	8008be0 <xQueueGenericSend+0x40>
 8008bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d101      	bne.n	8008be4 <xQueueGenericSend+0x44>
 8008be0:	2301      	movs	r3, #1
 8008be2:	e000      	b.n	8008be6 <xQueueGenericSend+0x46>
 8008be4:	2300      	movs	r3, #0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d10a      	bne.n	8008c00 <xQueueGenericSend+0x60>
	__asm volatile
 8008bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bee:	f383 8811 	msr	BASEPRI, r3
 8008bf2:	f3bf 8f6f 	isb	sy
 8008bf6:	f3bf 8f4f 	dsb	sy
 8008bfa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008bfc:	bf00      	nop
 8008bfe:	e7fe      	b.n	8008bfe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	2b02      	cmp	r3, #2
 8008c04:	d103      	bne.n	8008c0e <xQueueGenericSend+0x6e>
 8008c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d101      	bne.n	8008c12 <xQueueGenericSend+0x72>
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e000      	b.n	8008c14 <xQueueGenericSend+0x74>
 8008c12:	2300      	movs	r3, #0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d10a      	bne.n	8008c2e <xQueueGenericSend+0x8e>
	__asm volatile
 8008c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1c:	f383 8811 	msr	BASEPRI, r3
 8008c20:	f3bf 8f6f 	isb	sy
 8008c24:	f3bf 8f4f 	dsb	sy
 8008c28:	623b      	str	r3, [r7, #32]
}
 8008c2a:	bf00      	nop
 8008c2c:	e7fe      	b.n	8008c2c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c2e:	f001 f9b3 	bl	8009f98 <xTaskGetSchedulerState>
 8008c32:	4603      	mov	r3, r0
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d102      	bne.n	8008c3e <xQueueGenericSend+0x9e>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d101      	bne.n	8008c42 <xQueueGenericSend+0xa2>
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e000      	b.n	8008c44 <xQueueGenericSend+0xa4>
 8008c42:	2300      	movs	r3, #0
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d10a      	bne.n	8008c5e <xQueueGenericSend+0xbe>
	__asm volatile
 8008c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c4c:	f383 8811 	msr	BASEPRI, r3
 8008c50:	f3bf 8f6f 	isb	sy
 8008c54:	f3bf 8f4f 	dsb	sy
 8008c58:	61fb      	str	r3, [r7, #28]
}
 8008c5a:	bf00      	nop
 8008c5c:	e7fe      	b.n	8008c5c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c5e:	f7ff fd79 	bl	8008754 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d302      	bcc.n	8008c74 <xQueueGenericSend+0xd4>
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	2b02      	cmp	r3, #2
 8008c72:	d129      	bne.n	8008cc8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c74:	683a      	ldr	r2, [r7, #0]
 8008c76:	68b9      	ldr	r1, [r7, #8]
 8008c78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c7a:	f000 fa0b 	bl	8009094 <prvCopyDataToQueue>
 8008c7e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d010      	beq.n	8008caa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c8a:	3324      	adds	r3, #36	; 0x24
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f000 ffc1 	bl	8009c14 <xTaskRemoveFromEventList>
 8008c92:	4603      	mov	r3, r0
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d013      	beq.n	8008cc0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008c98:	4b3f      	ldr	r3, [pc, #252]	; (8008d98 <xQueueGenericSend+0x1f8>)
 8008c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c9e:	601a      	str	r2, [r3, #0]
 8008ca0:	f3bf 8f4f 	dsb	sy
 8008ca4:	f3bf 8f6f 	isb	sy
 8008ca8:	e00a      	b.n	8008cc0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d007      	beq.n	8008cc0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008cb0:	4b39      	ldr	r3, [pc, #228]	; (8008d98 <xQueueGenericSend+0x1f8>)
 8008cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cb6:	601a      	str	r2, [r3, #0]
 8008cb8:	f3bf 8f4f 	dsb	sy
 8008cbc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008cc0:	f7ff fd78 	bl	80087b4 <vPortExitCritical>
				return pdPASS;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	e063      	b.n	8008d90 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d103      	bne.n	8008cd6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008cce:	f7ff fd71 	bl	80087b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	e05c      	b.n	8008d90 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d106      	bne.n	8008cea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008cdc:	f107 0314 	add.w	r3, r7, #20
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f000 fffb 	bl	8009cdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008cea:	f7ff fd63 	bl	80087b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008cee:	f000 fd67 	bl	80097c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008cf2:	f7ff fd2f 	bl	8008754 <vPortEnterCritical>
 8008cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008cfc:	b25b      	sxtb	r3, r3
 8008cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d02:	d103      	bne.n	8008d0c <xQueueGenericSend+0x16c>
 8008d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d06:	2200      	movs	r2, #0
 8008d08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d12:	b25b      	sxtb	r3, r3
 8008d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d18:	d103      	bne.n	8008d22 <xQueueGenericSend+0x182>
 8008d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d22:	f7ff fd47 	bl	80087b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d26:	1d3a      	adds	r2, r7, #4
 8008d28:	f107 0314 	add.w	r3, r7, #20
 8008d2c:	4611      	mov	r1, r2
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f000 ffea 	bl	8009d08 <xTaskCheckForTimeOut>
 8008d34:	4603      	mov	r3, r0
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d124      	bne.n	8008d84 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008d3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d3c:	f000 faa2 	bl	8009284 <prvIsQueueFull>
 8008d40:	4603      	mov	r3, r0
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d018      	beq.n	8008d78 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d48:	3310      	adds	r3, #16
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	4611      	mov	r1, r2
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f000 ff10 	bl	8009b74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008d54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d56:	f000 fa2d 	bl	80091b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008d5a:	f000 fd3f 	bl	80097dc <xTaskResumeAll>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	f47f af7c 	bne.w	8008c5e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008d66:	4b0c      	ldr	r3, [pc, #48]	; (8008d98 <xQueueGenericSend+0x1f8>)
 8008d68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d6c:	601a      	str	r2, [r3, #0]
 8008d6e:	f3bf 8f4f 	dsb	sy
 8008d72:	f3bf 8f6f 	isb	sy
 8008d76:	e772      	b.n	8008c5e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008d78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d7a:	f000 fa1b 	bl	80091b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d7e:	f000 fd2d 	bl	80097dc <xTaskResumeAll>
 8008d82:	e76c      	b.n	8008c5e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008d84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d86:	f000 fa15 	bl	80091b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d8a:	f000 fd27 	bl	80097dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008d8e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3738      	adds	r7, #56	; 0x38
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}
 8008d98:	e000ed04 	.word	0xe000ed04

08008d9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b090      	sub	sp, #64	; 0x40
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	60b9      	str	r1, [r7, #8]
 8008da6:	607a      	str	r2, [r7, #4]
 8008da8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d10a      	bne.n	8008dca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db8:	f383 8811 	msr	BASEPRI, r3
 8008dbc:	f3bf 8f6f 	isb	sy
 8008dc0:	f3bf 8f4f 	dsb	sy
 8008dc4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008dc6:	bf00      	nop
 8008dc8:	e7fe      	b.n	8008dc8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d103      	bne.n	8008dd8 <xQueueGenericSendFromISR+0x3c>
 8008dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d101      	bne.n	8008ddc <xQueueGenericSendFromISR+0x40>
 8008dd8:	2301      	movs	r3, #1
 8008dda:	e000      	b.n	8008dde <xQueueGenericSendFromISR+0x42>
 8008ddc:	2300      	movs	r3, #0
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d10a      	bne.n	8008df8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de6:	f383 8811 	msr	BASEPRI, r3
 8008dea:	f3bf 8f6f 	isb	sy
 8008dee:	f3bf 8f4f 	dsb	sy
 8008df2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008df4:	bf00      	nop
 8008df6:	e7fe      	b.n	8008df6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	2b02      	cmp	r3, #2
 8008dfc:	d103      	bne.n	8008e06 <xQueueGenericSendFromISR+0x6a>
 8008dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e02:	2b01      	cmp	r3, #1
 8008e04:	d101      	bne.n	8008e0a <xQueueGenericSendFromISR+0x6e>
 8008e06:	2301      	movs	r3, #1
 8008e08:	e000      	b.n	8008e0c <xQueueGenericSendFromISR+0x70>
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d10a      	bne.n	8008e26 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e14:	f383 8811 	msr	BASEPRI, r3
 8008e18:	f3bf 8f6f 	isb	sy
 8008e1c:	f3bf 8f4f 	dsb	sy
 8008e20:	623b      	str	r3, [r7, #32]
}
 8008e22:	bf00      	nop
 8008e24:	e7fe      	b.n	8008e24 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008e26:	f7ff fd77 	bl	8008918 <vPortValidateInterruptPriority>
	__asm volatile
 8008e2a:	f3ef 8211 	mrs	r2, BASEPRI
 8008e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e32:	f383 8811 	msr	BASEPRI, r3
 8008e36:	f3bf 8f6f 	isb	sy
 8008e3a:	f3bf 8f4f 	dsb	sy
 8008e3e:	61fa      	str	r2, [r7, #28]
 8008e40:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8008e42:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008e44:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d302      	bcc.n	8008e58 <xQueueGenericSendFromISR+0xbc>
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	2b02      	cmp	r3, #2
 8008e56:	d12f      	bne.n	8008eb8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e66:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e68:	683a      	ldr	r2, [r7, #0]
 8008e6a:	68b9      	ldr	r1, [r7, #8]
 8008e6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008e6e:	f000 f911 	bl	8009094 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008e72:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e7a:	d112      	bne.n	8008ea2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d016      	beq.n	8008eb2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e86:	3324      	adds	r3, #36	; 0x24
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f000 fec3 	bl	8009c14 <xTaskRemoveFromEventList>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d00e      	beq.n	8008eb2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d00b      	beq.n	8008eb2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	601a      	str	r2, [r3, #0]
 8008ea0:	e007      	b.n	8008eb2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008ea2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	b25a      	sxtb	r2, r3
 8008eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008eb6:	e001      	b.n	8008ebc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ebe:	617b      	str	r3, [r7, #20]
	__asm volatile
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	f383 8811 	msr	BASEPRI, r3
}
 8008ec6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3740      	adds	r7, #64	; 0x40
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
	...

08008ed4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b08c      	sub	sp, #48	; 0x30
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	60f8      	str	r0, [r7, #12]
 8008edc:	60b9      	str	r1, [r7, #8]
 8008ede:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d10a      	bne.n	8008f04 <xQueueReceive+0x30>
	__asm volatile
 8008eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef2:	f383 8811 	msr	BASEPRI, r3
 8008ef6:	f3bf 8f6f 	isb	sy
 8008efa:	f3bf 8f4f 	dsb	sy
 8008efe:	623b      	str	r3, [r7, #32]
}
 8008f00:	bf00      	nop
 8008f02:	e7fe      	b.n	8008f02 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d103      	bne.n	8008f12 <xQueueReceive+0x3e>
 8008f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d101      	bne.n	8008f16 <xQueueReceive+0x42>
 8008f12:	2301      	movs	r3, #1
 8008f14:	e000      	b.n	8008f18 <xQueueReceive+0x44>
 8008f16:	2300      	movs	r3, #0
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d10a      	bne.n	8008f32 <xQueueReceive+0x5e>
	__asm volatile
 8008f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f20:	f383 8811 	msr	BASEPRI, r3
 8008f24:	f3bf 8f6f 	isb	sy
 8008f28:	f3bf 8f4f 	dsb	sy
 8008f2c:	61fb      	str	r3, [r7, #28]
}
 8008f2e:	bf00      	nop
 8008f30:	e7fe      	b.n	8008f30 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f32:	f001 f831 	bl	8009f98 <xTaskGetSchedulerState>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d102      	bne.n	8008f42 <xQueueReceive+0x6e>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d101      	bne.n	8008f46 <xQueueReceive+0x72>
 8008f42:	2301      	movs	r3, #1
 8008f44:	e000      	b.n	8008f48 <xQueueReceive+0x74>
 8008f46:	2300      	movs	r3, #0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d10a      	bne.n	8008f62 <xQueueReceive+0x8e>
	__asm volatile
 8008f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f50:	f383 8811 	msr	BASEPRI, r3
 8008f54:	f3bf 8f6f 	isb	sy
 8008f58:	f3bf 8f4f 	dsb	sy
 8008f5c:	61bb      	str	r3, [r7, #24]
}
 8008f5e:	bf00      	nop
 8008f60:	e7fe      	b.n	8008f60 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f62:	f7ff fbf7 	bl	8008754 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f6a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d01f      	beq.n	8008fb2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008f72:	68b9      	ldr	r1, [r7, #8]
 8008f74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f76:	f000 f8f7 	bl	8009168 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7c:	1e5a      	subs	r2, r3, #1
 8008f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f80:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f84:	691b      	ldr	r3, [r3, #16]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d00f      	beq.n	8008faa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f8c:	3310      	adds	r3, #16
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f000 fe40 	bl	8009c14 <xTaskRemoveFromEventList>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d007      	beq.n	8008faa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008f9a:	4b3d      	ldr	r3, [pc, #244]	; (8009090 <xQueueReceive+0x1bc>)
 8008f9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fa0:	601a      	str	r2, [r3, #0]
 8008fa2:	f3bf 8f4f 	dsb	sy
 8008fa6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008faa:	f7ff fc03 	bl	80087b4 <vPortExitCritical>
				return pdPASS;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	e069      	b.n	8009086 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d103      	bne.n	8008fc0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008fb8:	f7ff fbfc 	bl	80087b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	e062      	b.n	8009086 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d106      	bne.n	8008fd4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008fc6:	f107 0310 	add.w	r3, r7, #16
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f000 fe86 	bl	8009cdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008fd4:	f7ff fbee 	bl	80087b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008fd8:	f000 fbf2 	bl	80097c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008fdc:	f7ff fbba 	bl	8008754 <vPortEnterCritical>
 8008fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008fe6:	b25b      	sxtb	r3, r3
 8008fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fec:	d103      	bne.n	8008ff6 <xQueueReceive+0x122>
 8008fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ffc:	b25b      	sxtb	r3, r3
 8008ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009002:	d103      	bne.n	800900c <xQueueReceive+0x138>
 8009004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009006:	2200      	movs	r2, #0
 8009008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800900c:	f7ff fbd2 	bl	80087b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009010:	1d3a      	adds	r2, r7, #4
 8009012:	f107 0310 	add.w	r3, r7, #16
 8009016:	4611      	mov	r1, r2
 8009018:	4618      	mov	r0, r3
 800901a:	f000 fe75 	bl	8009d08 <xTaskCheckForTimeOut>
 800901e:	4603      	mov	r3, r0
 8009020:	2b00      	cmp	r3, #0
 8009022:	d123      	bne.n	800906c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009024:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009026:	f000 f917 	bl	8009258 <prvIsQueueEmpty>
 800902a:	4603      	mov	r3, r0
 800902c:	2b00      	cmp	r3, #0
 800902e:	d017      	beq.n	8009060 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009032:	3324      	adds	r3, #36	; 0x24
 8009034:	687a      	ldr	r2, [r7, #4]
 8009036:	4611      	mov	r1, r2
 8009038:	4618      	mov	r0, r3
 800903a:	f000 fd9b 	bl	8009b74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800903e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009040:	f000 f8b8 	bl	80091b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009044:	f000 fbca 	bl	80097dc <xTaskResumeAll>
 8009048:	4603      	mov	r3, r0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d189      	bne.n	8008f62 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800904e:	4b10      	ldr	r3, [pc, #64]	; (8009090 <xQueueReceive+0x1bc>)
 8009050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009054:	601a      	str	r2, [r3, #0]
 8009056:	f3bf 8f4f 	dsb	sy
 800905a:	f3bf 8f6f 	isb	sy
 800905e:	e780      	b.n	8008f62 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009060:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009062:	f000 f8a7 	bl	80091b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009066:	f000 fbb9 	bl	80097dc <xTaskResumeAll>
 800906a:	e77a      	b.n	8008f62 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800906c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800906e:	f000 f8a1 	bl	80091b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009072:	f000 fbb3 	bl	80097dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009076:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009078:	f000 f8ee 	bl	8009258 <prvIsQueueEmpty>
 800907c:	4603      	mov	r3, r0
 800907e:	2b00      	cmp	r3, #0
 8009080:	f43f af6f 	beq.w	8008f62 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009084:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009086:	4618      	mov	r0, r3
 8009088:	3730      	adds	r7, #48	; 0x30
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
 800908e:	bf00      	nop
 8009090:	e000ed04 	.word	0xe000ed04

08009094 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b086      	sub	sp, #24
 8009098:	af00      	add	r7, sp, #0
 800909a:	60f8      	str	r0, [r7, #12]
 800909c:	60b9      	str	r1, [r7, #8]
 800909e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80090a0:	2300      	movs	r3, #0
 80090a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d10d      	bne.n	80090ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d14d      	bne.n	8009156 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	4618      	mov	r0, r3
 80090c0:	f000 ff88 	bl	8009fd4 <xTaskPriorityDisinherit>
 80090c4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2200      	movs	r2, #0
 80090ca:	609a      	str	r2, [r3, #8]
 80090cc:	e043      	b.n	8009156 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d119      	bne.n	8009108 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	6858      	ldr	r0, [r3, #4]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090dc:	461a      	mov	r2, r3
 80090de:	68b9      	ldr	r1, [r7, #8]
 80090e0:	f001 fcab 	bl	800aa3a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	685a      	ldr	r2, [r3, #4]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ec:	441a      	add	r2, r3
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	685a      	ldr	r2, [r3, #4]
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	689b      	ldr	r3, [r3, #8]
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d32b      	bcc.n	8009156 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	605a      	str	r2, [r3, #4]
 8009106:	e026      	b.n	8009156 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	68d8      	ldr	r0, [r3, #12]
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009110:	461a      	mov	r2, r3
 8009112:	68b9      	ldr	r1, [r7, #8]
 8009114:	f001 fc91 	bl	800aa3a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	68da      	ldr	r2, [r3, #12]
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009120:	425b      	negs	r3, r3
 8009122:	441a      	add	r2, r3
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	68da      	ldr	r2, [r3, #12]
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	429a      	cmp	r2, r3
 8009132:	d207      	bcs.n	8009144 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	689a      	ldr	r2, [r3, #8]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800913c:	425b      	negs	r3, r3
 800913e:	441a      	add	r2, r3
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2b02      	cmp	r3, #2
 8009148:	d105      	bne.n	8009156 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d002      	beq.n	8009156 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	3b01      	subs	r3, #1
 8009154:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	1c5a      	adds	r2, r3, #1
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800915e:	697b      	ldr	r3, [r7, #20]
}
 8009160:	4618      	mov	r0, r3
 8009162:	3718      	adds	r7, #24
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009176:	2b00      	cmp	r3, #0
 8009178:	d018      	beq.n	80091ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	68da      	ldr	r2, [r3, #12]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009182:	441a      	add	r2, r3
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	68da      	ldr	r2, [r3, #12]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	429a      	cmp	r2, r3
 8009192:	d303      	bcc.n	800919c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	68d9      	ldr	r1, [r3, #12]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091a4:	461a      	mov	r2, r3
 80091a6:	6838      	ldr	r0, [r7, #0]
 80091a8:	f001 fc47 	bl	800aa3a <memcpy>
	}
}
 80091ac:	bf00      	nop
 80091ae:	3708      	adds	r7, #8
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}

080091b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b084      	sub	sp, #16
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80091bc:	f7ff faca 	bl	8008754 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80091c8:	e011      	b.n	80091ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d012      	beq.n	80091f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	3324      	adds	r3, #36	; 0x24
 80091d6:	4618      	mov	r0, r3
 80091d8:	f000 fd1c 	bl	8009c14 <xTaskRemoveFromEventList>
 80091dc:	4603      	mov	r3, r0
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d001      	beq.n	80091e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80091e2:	f000 fdf3 	bl	8009dcc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80091e6:	7bfb      	ldrb	r3, [r7, #15]
 80091e8:	3b01      	subs	r3, #1
 80091ea:	b2db      	uxtb	r3, r3
 80091ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80091ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	dce9      	bgt.n	80091ca <prvUnlockQueue+0x16>
 80091f6:	e000      	b.n	80091fa <prvUnlockQueue+0x46>
					break;
 80091f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	22ff      	movs	r2, #255	; 0xff
 80091fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009202:	f7ff fad7 	bl	80087b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009206:	f7ff faa5 	bl	8008754 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009210:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009212:	e011      	b.n	8009238 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	691b      	ldr	r3, [r3, #16]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d012      	beq.n	8009242 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	3310      	adds	r3, #16
 8009220:	4618      	mov	r0, r3
 8009222:	f000 fcf7 	bl	8009c14 <xTaskRemoveFromEventList>
 8009226:	4603      	mov	r3, r0
 8009228:	2b00      	cmp	r3, #0
 800922a:	d001      	beq.n	8009230 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800922c:	f000 fdce 	bl	8009dcc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009230:	7bbb      	ldrb	r3, [r7, #14]
 8009232:	3b01      	subs	r3, #1
 8009234:	b2db      	uxtb	r3, r3
 8009236:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009238:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800923c:	2b00      	cmp	r3, #0
 800923e:	dce9      	bgt.n	8009214 <prvUnlockQueue+0x60>
 8009240:	e000      	b.n	8009244 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009242:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	22ff      	movs	r2, #255	; 0xff
 8009248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800924c:	f7ff fab2 	bl	80087b4 <vPortExitCritical>
}
 8009250:	bf00      	nop
 8009252:	3710      	adds	r7, #16
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b084      	sub	sp, #16
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009260:	f7ff fa78 	bl	8008754 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009268:	2b00      	cmp	r3, #0
 800926a:	d102      	bne.n	8009272 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800926c:	2301      	movs	r3, #1
 800926e:	60fb      	str	r3, [r7, #12]
 8009270:	e001      	b.n	8009276 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009272:	2300      	movs	r3, #0
 8009274:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009276:	f7ff fa9d 	bl	80087b4 <vPortExitCritical>

	return xReturn;
 800927a:	68fb      	ldr	r3, [r7, #12]
}
 800927c:	4618      	mov	r0, r3
 800927e:	3710      	adds	r7, #16
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b084      	sub	sp, #16
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800928c:	f7ff fa62 	bl	8008754 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009298:	429a      	cmp	r2, r3
 800929a:	d102      	bne.n	80092a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800929c:	2301      	movs	r3, #1
 800929e:	60fb      	str	r3, [r7, #12]
 80092a0:	e001      	b.n	80092a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80092a2:	2300      	movs	r3, #0
 80092a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80092a6:	f7ff fa85 	bl	80087b4 <vPortExitCritical>

	return xReturn;
 80092aa:	68fb      	ldr	r3, [r7, #12]
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3710      	adds	r7, #16
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80092b4:	b480      	push	{r7}
 80092b6:	b085      	sub	sp, #20
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
 80092bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80092be:	2300      	movs	r3, #0
 80092c0:	60fb      	str	r3, [r7, #12]
 80092c2:	e014      	b.n	80092ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80092c4:	4a0f      	ldr	r2, [pc, #60]	; (8009304 <vQueueAddToRegistry+0x50>)
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d10b      	bne.n	80092e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80092d0:	490c      	ldr	r1, [pc, #48]	; (8009304 <vQueueAddToRegistry+0x50>)
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	683a      	ldr	r2, [r7, #0]
 80092d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80092da:	4a0a      	ldr	r2, [pc, #40]	; (8009304 <vQueueAddToRegistry+0x50>)
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	00db      	lsls	r3, r3, #3
 80092e0:	4413      	add	r3, r2
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80092e6:	e006      	b.n	80092f6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	3301      	adds	r3, #1
 80092ec:	60fb      	str	r3, [r7, #12]
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2b07      	cmp	r3, #7
 80092f2:	d9e7      	bls.n	80092c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80092f4:	bf00      	nop
 80092f6:	bf00      	nop
 80092f8:	3714      	adds	r7, #20
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr
 8009302:	bf00      	nop
 8009304:	24004694 	.word	0x24004694

08009308 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009308:	b580      	push	{r7, lr}
 800930a:	b086      	sub	sp, #24
 800930c:	af00      	add	r7, sp, #0
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	60b9      	str	r1, [r7, #8]
 8009312:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009318:	f7ff fa1c 	bl	8008754 <vPortEnterCritical>
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009322:	b25b      	sxtb	r3, r3
 8009324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009328:	d103      	bne.n	8009332 <vQueueWaitForMessageRestricted+0x2a>
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	2200      	movs	r2, #0
 800932e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009338:	b25b      	sxtb	r3, r3
 800933a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800933e:	d103      	bne.n	8009348 <vQueueWaitForMessageRestricted+0x40>
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	2200      	movs	r2, #0
 8009344:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009348:	f7ff fa34 	bl	80087b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009350:	2b00      	cmp	r3, #0
 8009352:	d106      	bne.n	8009362 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	3324      	adds	r3, #36	; 0x24
 8009358:	687a      	ldr	r2, [r7, #4]
 800935a:	68b9      	ldr	r1, [r7, #8]
 800935c:	4618      	mov	r0, r3
 800935e:	f000 fc2d 	bl	8009bbc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009362:	6978      	ldr	r0, [r7, #20]
 8009364:	f7ff ff26 	bl	80091b4 <prvUnlockQueue>
	}
 8009368:	bf00      	nop
 800936a:	3718      	adds	r7, #24
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009370:	b580      	push	{r7, lr}
 8009372:	b08e      	sub	sp, #56	; 0x38
 8009374:	af04      	add	r7, sp, #16
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	60b9      	str	r1, [r7, #8]
 800937a:	607a      	str	r2, [r7, #4]
 800937c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800937e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009380:	2b00      	cmp	r3, #0
 8009382:	d10a      	bne.n	800939a <xTaskCreateStatic+0x2a>
	__asm volatile
 8009384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009388:	f383 8811 	msr	BASEPRI, r3
 800938c:	f3bf 8f6f 	isb	sy
 8009390:	f3bf 8f4f 	dsb	sy
 8009394:	623b      	str	r3, [r7, #32]
}
 8009396:	bf00      	nop
 8009398:	e7fe      	b.n	8009398 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800939a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800939c:	2b00      	cmp	r3, #0
 800939e:	d10a      	bne.n	80093b6 <xTaskCreateStatic+0x46>
	__asm volatile
 80093a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a4:	f383 8811 	msr	BASEPRI, r3
 80093a8:	f3bf 8f6f 	isb	sy
 80093ac:	f3bf 8f4f 	dsb	sy
 80093b0:	61fb      	str	r3, [r7, #28]
}
 80093b2:	bf00      	nop
 80093b4:	e7fe      	b.n	80093b4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80093b6:	23bc      	movs	r3, #188	; 0xbc
 80093b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	2bbc      	cmp	r3, #188	; 0xbc
 80093be:	d00a      	beq.n	80093d6 <xTaskCreateStatic+0x66>
	__asm volatile
 80093c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c4:	f383 8811 	msr	BASEPRI, r3
 80093c8:	f3bf 8f6f 	isb	sy
 80093cc:	f3bf 8f4f 	dsb	sy
 80093d0:	61bb      	str	r3, [r7, #24]
}
 80093d2:	bf00      	nop
 80093d4:	e7fe      	b.n	80093d4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80093d6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80093d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d01e      	beq.n	800941c <xTaskCreateStatic+0xac>
 80093de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d01b      	beq.n	800941c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80093e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80093e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093ec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80093ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f0:	2202      	movs	r2, #2
 80093f2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80093f6:	2300      	movs	r3, #0
 80093f8:	9303      	str	r3, [sp, #12]
 80093fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093fc:	9302      	str	r3, [sp, #8]
 80093fe:	f107 0314 	add.w	r3, r7, #20
 8009402:	9301      	str	r3, [sp, #4]
 8009404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009406:	9300      	str	r3, [sp, #0]
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	687a      	ldr	r2, [r7, #4]
 800940c:	68b9      	ldr	r1, [r7, #8]
 800940e:	68f8      	ldr	r0, [r7, #12]
 8009410:	f000 f850 	bl	80094b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009414:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009416:	f000 f8f3 	bl	8009600 <prvAddNewTaskToReadyList>
 800941a:	e001      	b.n	8009420 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800941c:	2300      	movs	r3, #0
 800941e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009420:	697b      	ldr	r3, [r7, #20]
	}
 8009422:	4618      	mov	r0, r3
 8009424:	3728      	adds	r7, #40	; 0x28
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}

0800942a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800942a:	b580      	push	{r7, lr}
 800942c:	b08c      	sub	sp, #48	; 0x30
 800942e:	af04      	add	r7, sp, #16
 8009430:	60f8      	str	r0, [r7, #12]
 8009432:	60b9      	str	r1, [r7, #8]
 8009434:	603b      	str	r3, [r7, #0]
 8009436:	4613      	mov	r3, r2
 8009438:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800943a:	88fb      	ldrh	r3, [r7, #6]
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	4618      	mov	r0, r3
 8009440:	f7fe fdc0 	bl	8007fc4 <pvPortMalloc>
 8009444:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d00e      	beq.n	800946a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800944c:	20bc      	movs	r0, #188	; 0xbc
 800944e:	f7fe fdb9 	bl	8007fc4 <pvPortMalloc>
 8009452:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009454:	69fb      	ldr	r3, [r7, #28]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d003      	beq.n	8009462 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800945a:	69fb      	ldr	r3, [r7, #28]
 800945c:	697a      	ldr	r2, [r7, #20]
 800945e:	631a      	str	r2, [r3, #48]	; 0x30
 8009460:	e005      	b.n	800946e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009462:	6978      	ldr	r0, [r7, #20]
 8009464:	f7fe fe7a 	bl	800815c <vPortFree>
 8009468:	e001      	b.n	800946e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800946a:	2300      	movs	r3, #0
 800946c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800946e:	69fb      	ldr	r3, [r7, #28]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d017      	beq.n	80094a4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009474:	69fb      	ldr	r3, [r7, #28]
 8009476:	2200      	movs	r2, #0
 8009478:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800947c:	88fa      	ldrh	r2, [r7, #6]
 800947e:	2300      	movs	r3, #0
 8009480:	9303      	str	r3, [sp, #12]
 8009482:	69fb      	ldr	r3, [r7, #28]
 8009484:	9302      	str	r3, [sp, #8]
 8009486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009488:	9301      	str	r3, [sp, #4]
 800948a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800948c:	9300      	str	r3, [sp, #0]
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	68b9      	ldr	r1, [r7, #8]
 8009492:	68f8      	ldr	r0, [r7, #12]
 8009494:	f000 f80e 	bl	80094b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009498:	69f8      	ldr	r0, [r7, #28]
 800949a:	f000 f8b1 	bl	8009600 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800949e:	2301      	movs	r3, #1
 80094a0:	61bb      	str	r3, [r7, #24]
 80094a2:	e002      	b.n	80094aa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80094a4:	f04f 33ff 	mov.w	r3, #4294967295
 80094a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80094aa:	69bb      	ldr	r3, [r7, #24]
	}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3720      	adds	r7, #32
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b088      	sub	sp, #32
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	60f8      	str	r0, [r7, #12]
 80094bc:	60b9      	str	r1, [r7, #8]
 80094be:	607a      	str	r2, [r7, #4]
 80094c0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80094c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	461a      	mov	r2, r3
 80094cc:	21a5      	movs	r1, #165	; 0xa5
 80094ce:	f001 fac2 	bl	800aa56 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80094d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80094d6:	6879      	ldr	r1, [r7, #4]
 80094d8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80094dc:	440b      	add	r3, r1
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	4413      	add	r3, r2
 80094e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80094e4:	69bb      	ldr	r3, [r7, #24]
 80094e6:	f023 0307 	bic.w	r3, r3, #7
 80094ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80094ec:	69bb      	ldr	r3, [r7, #24]
 80094ee:	f003 0307 	and.w	r3, r3, #7
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d00a      	beq.n	800950c <prvInitialiseNewTask+0x58>
	__asm volatile
 80094f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094fa:	f383 8811 	msr	BASEPRI, r3
 80094fe:	f3bf 8f6f 	isb	sy
 8009502:	f3bf 8f4f 	dsb	sy
 8009506:	617b      	str	r3, [r7, #20]
}
 8009508:	bf00      	nop
 800950a:	e7fe      	b.n	800950a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d01f      	beq.n	8009552 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009512:	2300      	movs	r3, #0
 8009514:	61fb      	str	r3, [r7, #28]
 8009516:	e012      	b.n	800953e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009518:	68ba      	ldr	r2, [r7, #8]
 800951a:	69fb      	ldr	r3, [r7, #28]
 800951c:	4413      	add	r3, r2
 800951e:	7819      	ldrb	r1, [r3, #0]
 8009520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009522:	69fb      	ldr	r3, [r7, #28]
 8009524:	4413      	add	r3, r2
 8009526:	3334      	adds	r3, #52	; 0x34
 8009528:	460a      	mov	r2, r1
 800952a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800952c:	68ba      	ldr	r2, [r7, #8]
 800952e:	69fb      	ldr	r3, [r7, #28]
 8009530:	4413      	add	r3, r2
 8009532:	781b      	ldrb	r3, [r3, #0]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d006      	beq.n	8009546 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009538:	69fb      	ldr	r3, [r7, #28]
 800953a:	3301      	adds	r3, #1
 800953c:	61fb      	str	r3, [r7, #28]
 800953e:	69fb      	ldr	r3, [r7, #28]
 8009540:	2b0f      	cmp	r3, #15
 8009542:	d9e9      	bls.n	8009518 <prvInitialiseNewTask+0x64>
 8009544:	e000      	b.n	8009548 <prvInitialiseNewTask+0x94>
			{
				break;
 8009546:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800954a:	2200      	movs	r2, #0
 800954c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009550:	e003      	b.n	800955a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009554:	2200      	movs	r2, #0
 8009556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800955a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800955c:	2b37      	cmp	r3, #55	; 0x37
 800955e:	d901      	bls.n	8009564 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009560:	2337      	movs	r3, #55	; 0x37
 8009562:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009566:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009568:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800956a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800956c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800956e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009572:	2200      	movs	r2, #0
 8009574:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009578:	3304      	adds	r3, #4
 800957a:	4618      	mov	r0, r3
 800957c:	f7fe ff2c 	bl	80083d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009582:	3318      	adds	r3, #24
 8009584:	4618      	mov	r0, r3
 8009586:	f7fe ff27 	bl	80083d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800958a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800958c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800958e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009592:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009598:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800959a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800959c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800959e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80095a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a2:	2200      	movs	r2, #0
 80095a4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80095a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095aa:	2200      	movs	r2, #0
 80095ac:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80095b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b2:	3354      	adds	r3, #84	; 0x54
 80095b4:	2260      	movs	r2, #96	; 0x60
 80095b6:	2100      	movs	r1, #0
 80095b8:	4618      	mov	r0, r3
 80095ba:	f001 fa4c 	bl	800aa56 <memset>
 80095be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c0:	4a0c      	ldr	r2, [pc, #48]	; (80095f4 <prvInitialiseNewTask+0x140>)
 80095c2:	659a      	str	r2, [r3, #88]	; 0x58
 80095c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c6:	4a0c      	ldr	r2, [pc, #48]	; (80095f8 <prvInitialiseNewTask+0x144>)
 80095c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80095ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095cc:	4a0b      	ldr	r2, [pc, #44]	; (80095fc <prvInitialiseNewTask+0x148>)
 80095ce:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80095d0:	683a      	ldr	r2, [r7, #0]
 80095d2:	68f9      	ldr	r1, [r7, #12]
 80095d4:	69b8      	ldr	r0, [r7, #24]
 80095d6:	f7fe ff93 	bl	8008500 <pxPortInitialiseStack>
 80095da:	4602      	mov	r2, r0
 80095dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095de:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80095e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d002      	beq.n	80095ec <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80095e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095ec:	bf00      	nop
 80095ee:	3720      	adds	r7, #32
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}
 80095f4:	0800b9a4 	.word	0x0800b9a4
 80095f8:	0800b9c4 	.word	0x0800b9c4
 80095fc:	0800b984 	.word	0x0800b984

08009600 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b082      	sub	sp, #8
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009608:	f7ff f8a4 	bl	8008754 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800960c:	4b2d      	ldr	r3, [pc, #180]	; (80096c4 <prvAddNewTaskToReadyList+0xc4>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	3301      	adds	r3, #1
 8009612:	4a2c      	ldr	r2, [pc, #176]	; (80096c4 <prvAddNewTaskToReadyList+0xc4>)
 8009614:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009616:	4b2c      	ldr	r3, [pc, #176]	; (80096c8 <prvAddNewTaskToReadyList+0xc8>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d109      	bne.n	8009632 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800961e:	4a2a      	ldr	r2, [pc, #168]	; (80096c8 <prvAddNewTaskToReadyList+0xc8>)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009624:	4b27      	ldr	r3, [pc, #156]	; (80096c4 <prvAddNewTaskToReadyList+0xc4>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	2b01      	cmp	r3, #1
 800962a:	d110      	bne.n	800964e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800962c:	f000 fbf2 	bl	8009e14 <prvInitialiseTaskLists>
 8009630:	e00d      	b.n	800964e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009632:	4b26      	ldr	r3, [pc, #152]	; (80096cc <prvAddNewTaskToReadyList+0xcc>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d109      	bne.n	800964e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800963a:	4b23      	ldr	r3, [pc, #140]	; (80096c8 <prvAddNewTaskToReadyList+0xc8>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009644:	429a      	cmp	r2, r3
 8009646:	d802      	bhi.n	800964e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009648:	4a1f      	ldr	r2, [pc, #124]	; (80096c8 <prvAddNewTaskToReadyList+0xc8>)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800964e:	4b20      	ldr	r3, [pc, #128]	; (80096d0 <prvAddNewTaskToReadyList+0xd0>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	3301      	adds	r3, #1
 8009654:	4a1e      	ldr	r2, [pc, #120]	; (80096d0 <prvAddNewTaskToReadyList+0xd0>)
 8009656:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009658:	4b1d      	ldr	r3, [pc, #116]	; (80096d0 <prvAddNewTaskToReadyList+0xd0>)
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009664:	4b1b      	ldr	r3, [pc, #108]	; (80096d4 <prvAddNewTaskToReadyList+0xd4>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	429a      	cmp	r2, r3
 800966a:	d903      	bls.n	8009674 <prvAddNewTaskToReadyList+0x74>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009670:	4a18      	ldr	r2, [pc, #96]	; (80096d4 <prvAddNewTaskToReadyList+0xd4>)
 8009672:	6013      	str	r3, [r2, #0]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009678:	4613      	mov	r3, r2
 800967a:	009b      	lsls	r3, r3, #2
 800967c:	4413      	add	r3, r2
 800967e:	009b      	lsls	r3, r3, #2
 8009680:	4a15      	ldr	r2, [pc, #84]	; (80096d8 <prvAddNewTaskToReadyList+0xd8>)
 8009682:	441a      	add	r2, r3
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	3304      	adds	r3, #4
 8009688:	4619      	mov	r1, r3
 800968a:	4610      	mov	r0, r2
 800968c:	f7fe feb1 	bl	80083f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009690:	f7ff f890 	bl	80087b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009694:	4b0d      	ldr	r3, [pc, #52]	; (80096cc <prvAddNewTaskToReadyList+0xcc>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d00e      	beq.n	80096ba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800969c:	4b0a      	ldr	r3, [pc, #40]	; (80096c8 <prvAddNewTaskToReadyList+0xc8>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d207      	bcs.n	80096ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80096aa:	4b0c      	ldr	r3, [pc, #48]	; (80096dc <prvAddNewTaskToReadyList+0xdc>)
 80096ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096b0:	601a      	str	r2, [r3, #0]
 80096b2:	f3bf 8f4f 	dsb	sy
 80096b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80096ba:	bf00      	nop
 80096bc:	3708      	adds	r7, #8
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
 80096c2:	bf00      	nop
 80096c4:	24004ba8 	.word	0x24004ba8
 80096c8:	240046d4 	.word	0x240046d4
 80096cc:	24004bb4 	.word	0x24004bb4
 80096d0:	24004bc4 	.word	0x24004bc4
 80096d4:	24004bb0 	.word	0x24004bb0
 80096d8:	240046d8 	.word	0x240046d8
 80096dc:	e000ed04 	.word	0xe000ed04

080096e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b08a      	sub	sp, #40	; 0x28
 80096e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80096e6:	2300      	movs	r3, #0
 80096e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80096ea:	2300      	movs	r3, #0
 80096ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80096ee:	463a      	mov	r2, r7
 80096f0:	1d39      	adds	r1, r7, #4
 80096f2:	f107 0308 	add.w	r3, r7, #8
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7fe fc30 	bl	8007f5c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80096fc:	6839      	ldr	r1, [r7, #0]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	68ba      	ldr	r2, [r7, #8]
 8009702:	9202      	str	r2, [sp, #8]
 8009704:	9301      	str	r3, [sp, #4]
 8009706:	2300      	movs	r3, #0
 8009708:	9300      	str	r3, [sp, #0]
 800970a:	2300      	movs	r3, #0
 800970c:	460a      	mov	r2, r1
 800970e:	4924      	ldr	r1, [pc, #144]	; (80097a0 <vTaskStartScheduler+0xc0>)
 8009710:	4824      	ldr	r0, [pc, #144]	; (80097a4 <vTaskStartScheduler+0xc4>)
 8009712:	f7ff fe2d 	bl	8009370 <xTaskCreateStatic>
 8009716:	4603      	mov	r3, r0
 8009718:	4a23      	ldr	r2, [pc, #140]	; (80097a8 <vTaskStartScheduler+0xc8>)
 800971a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800971c:	4b22      	ldr	r3, [pc, #136]	; (80097a8 <vTaskStartScheduler+0xc8>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d002      	beq.n	800972a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009724:	2301      	movs	r3, #1
 8009726:	617b      	str	r3, [r7, #20]
 8009728:	e001      	b.n	800972e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800972a:	2300      	movs	r3, #0
 800972c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	2b01      	cmp	r3, #1
 8009732:	d102      	bne.n	800973a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009734:	f000 fd10 	bl	800a158 <xTimerCreateTimerTask>
 8009738:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	2b01      	cmp	r3, #1
 800973e:	d11b      	bne.n	8009778 <vTaskStartScheduler+0x98>
	__asm volatile
 8009740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009744:	f383 8811 	msr	BASEPRI, r3
 8009748:	f3bf 8f6f 	isb	sy
 800974c:	f3bf 8f4f 	dsb	sy
 8009750:	613b      	str	r3, [r7, #16]
}
 8009752:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009754:	4b15      	ldr	r3, [pc, #84]	; (80097ac <vTaskStartScheduler+0xcc>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	3354      	adds	r3, #84	; 0x54
 800975a:	4a15      	ldr	r2, [pc, #84]	; (80097b0 <vTaskStartScheduler+0xd0>)
 800975c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800975e:	4b15      	ldr	r3, [pc, #84]	; (80097b4 <vTaskStartScheduler+0xd4>)
 8009760:	f04f 32ff 	mov.w	r2, #4294967295
 8009764:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009766:	4b14      	ldr	r3, [pc, #80]	; (80097b8 <vTaskStartScheduler+0xd8>)
 8009768:	2201      	movs	r2, #1
 800976a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800976c:	4b13      	ldr	r3, [pc, #76]	; (80097bc <vTaskStartScheduler+0xdc>)
 800976e:	2200      	movs	r2, #0
 8009770:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009772:	f7fe ff4d 	bl	8008610 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009776:	e00e      	b.n	8009796 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800977e:	d10a      	bne.n	8009796 <vTaskStartScheduler+0xb6>
	__asm volatile
 8009780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009784:	f383 8811 	msr	BASEPRI, r3
 8009788:	f3bf 8f6f 	isb	sy
 800978c:	f3bf 8f4f 	dsb	sy
 8009790:	60fb      	str	r3, [r7, #12]
}
 8009792:	bf00      	nop
 8009794:	e7fe      	b.n	8009794 <vTaskStartScheduler+0xb4>
}
 8009796:	bf00      	nop
 8009798:	3718      	adds	r7, #24
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	0800b910 	.word	0x0800b910
 80097a4:	08009de5 	.word	0x08009de5
 80097a8:	24004bcc 	.word	0x24004bcc
 80097ac:	240046d4 	.word	0x240046d4
 80097b0:	24000014 	.word	0x24000014
 80097b4:	24004bc8 	.word	0x24004bc8
 80097b8:	24004bb4 	.word	0x24004bb4
 80097bc:	24004bac 	.word	0x24004bac

080097c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80097c0:	b480      	push	{r7}
 80097c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80097c4:	4b04      	ldr	r3, [pc, #16]	; (80097d8 <vTaskSuspendAll+0x18>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	3301      	adds	r3, #1
 80097ca:	4a03      	ldr	r2, [pc, #12]	; (80097d8 <vTaskSuspendAll+0x18>)
 80097cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80097ce:	bf00      	nop
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr
 80097d8:	24004bd0 	.word	0x24004bd0

080097dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80097e2:	2300      	movs	r3, #0
 80097e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80097e6:	2300      	movs	r3, #0
 80097e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80097ea:	4b42      	ldr	r3, [pc, #264]	; (80098f4 <xTaskResumeAll+0x118>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d10a      	bne.n	8009808 <xTaskResumeAll+0x2c>
	__asm volatile
 80097f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f6:	f383 8811 	msr	BASEPRI, r3
 80097fa:	f3bf 8f6f 	isb	sy
 80097fe:	f3bf 8f4f 	dsb	sy
 8009802:	603b      	str	r3, [r7, #0]
}
 8009804:	bf00      	nop
 8009806:	e7fe      	b.n	8009806 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009808:	f7fe ffa4 	bl	8008754 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800980c:	4b39      	ldr	r3, [pc, #228]	; (80098f4 <xTaskResumeAll+0x118>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	3b01      	subs	r3, #1
 8009812:	4a38      	ldr	r2, [pc, #224]	; (80098f4 <xTaskResumeAll+0x118>)
 8009814:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009816:	4b37      	ldr	r3, [pc, #220]	; (80098f4 <xTaskResumeAll+0x118>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d162      	bne.n	80098e4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800981e:	4b36      	ldr	r3, [pc, #216]	; (80098f8 <xTaskResumeAll+0x11c>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d05e      	beq.n	80098e4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009826:	e02f      	b.n	8009888 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009828:	4b34      	ldr	r3, [pc, #208]	; (80098fc <xTaskResumeAll+0x120>)
 800982a:	68db      	ldr	r3, [r3, #12]
 800982c:	68db      	ldr	r3, [r3, #12]
 800982e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	3318      	adds	r3, #24
 8009834:	4618      	mov	r0, r3
 8009836:	f7fe fe39 	bl	80084ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	3304      	adds	r3, #4
 800983e:	4618      	mov	r0, r3
 8009840:	f7fe fe34 	bl	80084ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009848:	4b2d      	ldr	r3, [pc, #180]	; (8009900 <xTaskResumeAll+0x124>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	429a      	cmp	r2, r3
 800984e:	d903      	bls.n	8009858 <xTaskResumeAll+0x7c>
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009854:	4a2a      	ldr	r2, [pc, #168]	; (8009900 <xTaskResumeAll+0x124>)
 8009856:	6013      	str	r3, [r2, #0]
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800985c:	4613      	mov	r3, r2
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	4413      	add	r3, r2
 8009862:	009b      	lsls	r3, r3, #2
 8009864:	4a27      	ldr	r2, [pc, #156]	; (8009904 <xTaskResumeAll+0x128>)
 8009866:	441a      	add	r2, r3
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	3304      	adds	r3, #4
 800986c:	4619      	mov	r1, r3
 800986e:	4610      	mov	r0, r2
 8009870:	f7fe fdbf 	bl	80083f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009878:	4b23      	ldr	r3, [pc, #140]	; (8009908 <xTaskResumeAll+0x12c>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800987e:	429a      	cmp	r2, r3
 8009880:	d302      	bcc.n	8009888 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009882:	4b22      	ldr	r3, [pc, #136]	; (800990c <xTaskResumeAll+0x130>)
 8009884:	2201      	movs	r2, #1
 8009886:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009888:	4b1c      	ldr	r3, [pc, #112]	; (80098fc <xTaskResumeAll+0x120>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d1cb      	bne.n	8009828 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d001      	beq.n	800989a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009896:	f000 fb5f 	bl	8009f58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800989a:	4b1d      	ldr	r3, [pc, #116]	; (8009910 <xTaskResumeAll+0x134>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d010      	beq.n	80098c8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80098a6:	f000 f847 	bl	8009938 <xTaskIncrementTick>
 80098aa:	4603      	mov	r3, r0
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d002      	beq.n	80098b6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80098b0:	4b16      	ldr	r3, [pc, #88]	; (800990c <xTaskResumeAll+0x130>)
 80098b2:	2201      	movs	r2, #1
 80098b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	3b01      	subs	r3, #1
 80098ba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d1f1      	bne.n	80098a6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80098c2:	4b13      	ldr	r3, [pc, #76]	; (8009910 <xTaskResumeAll+0x134>)
 80098c4:	2200      	movs	r2, #0
 80098c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80098c8:	4b10      	ldr	r3, [pc, #64]	; (800990c <xTaskResumeAll+0x130>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d009      	beq.n	80098e4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80098d0:	2301      	movs	r3, #1
 80098d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80098d4:	4b0f      	ldr	r3, [pc, #60]	; (8009914 <xTaskResumeAll+0x138>)
 80098d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098da:	601a      	str	r2, [r3, #0]
 80098dc:	f3bf 8f4f 	dsb	sy
 80098e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80098e4:	f7fe ff66 	bl	80087b4 <vPortExitCritical>

	return xAlreadyYielded;
 80098e8:	68bb      	ldr	r3, [r7, #8]
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3710      	adds	r7, #16
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}
 80098f2:	bf00      	nop
 80098f4:	24004bd0 	.word	0x24004bd0
 80098f8:	24004ba8 	.word	0x24004ba8
 80098fc:	24004b68 	.word	0x24004b68
 8009900:	24004bb0 	.word	0x24004bb0
 8009904:	240046d8 	.word	0x240046d8
 8009908:	240046d4 	.word	0x240046d4
 800990c:	24004bbc 	.word	0x24004bbc
 8009910:	24004bb8 	.word	0x24004bb8
 8009914:	e000ed04 	.word	0xe000ed04

08009918 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009918:	b480      	push	{r7}
 800991a:	b083      	sub	sp, #12
 800991c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800991e:	4b05      	ldr	r3, [pc, #20]	; (8009934 <xTaskGetTickCount+0x1c>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009924:	687b      	ldr	r3, [r7, #4]
}
 8009926:	4618      	mov	r0, r3
 8009928:	370c      	adds	r7, #12
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr
 8009932:	bf00      	nop
 8009934:	24004bac 	.word	0x24004bac

08009938 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b086      	sub	sp, #24
 800993c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800993e:	2300      	movs	r3, #0
 8009940:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009942:	4b4f      	ldr	r3, [pc, #316]	; (8009a80 <xTaskIncrementTick+0x148>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	2b00      	cmp	r3, #0
 8009948:	f040 808f 	bne.w	8009a6a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800994c:	4b4d      	ldr	r3, [pc, #308]	; (8009a84 <xTaskIncrementTick+0x14c>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	3301      	adds	r3, #1
 8009952:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009954:	4a4b      	ldr	r2, [pc, #300]	; (8009a84 <xTaskIncrementTick+0x14c>)
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d120      	bne.n	80099a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009960:	4b49      	ldr	r3, [pc, #292]	; (8009a88 <xTaskIncrementTick+0x150>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d00a      	beq.n	8009980 <xTaskIncrementTick+0x48>
	__asm volatile
 800996a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800996e:	f383 8811 	msr	BASEPRI, r3
 8009972:	f3bf 8f6f 	isb	sy
 8009976:	f3bf 8f4f 	dsb	sy
 800997a:	603b      	str	r3, [r7, #0]
}
 800997c:	bf00      	nop
 800997e:	e7fe      	b.n	800997e <xTaskIncrementTick+0x46>
 8009980:	4b41      	ldr	r3, [pc, #260]	; (8009a88 <xTaskIncrementTick+0x150>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	60fb      	str	r3, [r7, #12]
 8009986:	4b41      	ldr	r3, [pc, #260]	; (8009a8c <xTaskIncrementTick+0x154>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4a3f      	ldr	r2, [pc, #252]	; (8009a88 <xTaskIncrementTick+0x150>)
 800998c:	6013      	str	r3, [r2, #0]
 800998e:	4a3f      	ldr	r2, [pc, #252]	; (8009a8c <xTaskIncrementTick+0x154>)
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	6013      	str	r3, [r2, #0]
 8009994:	4b3e      	ldr	r3, [pc, #248]	; (8009a90 <xTaskIncrementTick+0x158>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	3301      	adds	r3, #1
 800999a:	4a3d      	ldr	r2, [pc, #244]	; (8009a90 <xTaskIncrementTick+0x158>)
 800999c:	6013      	str	r3, [r2, #0]
 800999e:	f000 fadb 	bl	8009f58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80099a2:	4b3c      	ldr	r3, [pc, #240]	; (8009a94 <xTaskIncrementTick+0x15c>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	693a      	ldr	r2, [r7, #16]
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d349      	bcc.n	8009a40 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099ac:	4b36      	ldr	r3, [pc, #216]	; (8009a88 <xTaskIncrementTick+0x150>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d104      	bne.n	80099c0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099b6:	4b37      	ldr	r3, [pc, #220]	; (8009a94 <xTaskIncrementTick+0x15c>)
 80099b8:	f04f 32ff 	mov.w	r2, #4294967295
 80099bc:	601a      	str	r2, [r3, #0]
					break;
 80099be:	e03f      	b.n	8009a40 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099c0:	4b31      	ldr	r3, [pc, #196]	; (8009a88 <xTaskIncrementTick+0x150>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	68db      	ldr	r3, [r3, #12]
 80099c6:	68db      	ldr	r3, [r3, #12]
 80099c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80099d0:	693a      	ldr	r2, [r7, #16]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d203      	bcs.n	80099e0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80099d8:	4a2e      	ldr	r2, [pc, #184]	; (8009a94 <xTaskIncrementTick+0x15c>)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80099de:	e02f      	b.n	8009a40 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	3304      	adds	r3, #4
 80099e4:	4618      	mov	r0, r3
 80099e6:	f7fe fd61 	bl	80084ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d004      	beq.n	80099fc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	3318      	adds	r3, #24
 80099f6:	4618      	mov	r0, r3
 80099f8:	f7fe fd58 	bl	80084ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a00:	4b25      	ldr	r3, [pc, #148]	; (8009a98 <xTaskIncrementTick+0x160>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d903      	bls.n	8009a10 <xTaskIncrementTick+0xd8>
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a0c:	4a22      	ldr	r2, [pc, #136]	; (8009a98 <xTaskIncrementTick+0x160>)
 8009a0e:	6013      	str	r3, [r2, #0]
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a14:	4613      	mov	r3, r2
 8009a16:	009b      	lsls	r3, r3, #2
 8009a18:	4413      	add	r3, r2
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	4a1f      	ldr	r2, [pc, #124]	; (8009a9c <xTaskIncrementTick+0x164>)
 8009a1e:	441a      	add	r2, r3
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	3304      	adds	r3, #4
 8009a24:	4619      	mov	r1, r3
 8009a26:	4610      	mov	r0, r2
 8009a28:	f7fe fce3 	bl	80083f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a30:	4b1b      	ldr	r3, [pc, #108]	; (8009aa0 <xTaskIncrementTick+0x168>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d3b8      	bcc.n	80099ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a3e:	e7b5      	b.n	80099ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009a40:	4b17      	ldr	r3, [pc, #92]	; (8009aa0 <xTaskIncrementTick+0x168>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a46:	4915      	ldr	r1, [pc, #84]	; (8009a9c <xTaskIncrementTick+0x164>)
 8009a48:	4613      	mov	r3, r2
 8009a4a:	009b      	lsls	r3, r3, #2
 8009a4c:	4413      	add	r3, r2
 8009a4e:	009b      	lsls	r3, r3, #2
 8009a50:	440b      	add	r3, r1
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d901      	bls.n	8009a5c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009a58:	2301      	movs	r3, #1
 8009a5a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009a5c:	4b11      	ldr	r3, [pc, #68]	; (8009aa4 <xTaskIncrementTick+0x16c>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d007      	beq.n	8009a74 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009a64:	2301      	movs	r3, #1
 8009a66:	617b      	str	r3, [r7, #20]
 8009a68:	e004      	b.n	8009a74 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009a6a:	4b0f      	ldr	r3, [pc, #60]	; (8009aa8 <xTaskIncrementTick+0x170>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	3301      	adds	r3, #1
 8009a70:	4a0d      	ldr	r2, [pc, #52]	; (8009aa8 <xTaskIncrementTick+0x170>)
 8009a72:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009a74:	697b      	ldr	r3, [r7, #20]
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3718      	adds	r7, #24
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	24004bd0 	.word	0x24004bd0
 8009a84:	24004bac 	.word	0x24004bac
 8009a88:	24004b60 	.word	0x24004b60
 8009a8c:	24004b64 	.word	0x24004b64
 8009a90:	24004bc0 	.word	0x24004bc0
 8009a94:	24004bc8 	.word	0x24004bc8
 8009a98:	24004bb0 	.word	0x24004bb0
 8009a9c:	240046d8 	.word	0x240046d8
 8009aa0:	240046d4 	.word	0x240046d4
 8009aa4:	24004bbc 	.word	0x24004bbc
 8009aa8:	24004bb8 	.word	0x24004bb8

08009aac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009aac:	b480      	push	{r7}
 8009aae:	b085      	sub	sp, #20
 8009ab0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009ab2:	4b2a      	ldr	r3, [pc, #168]	; (8009b5c <vTaskSwitchContext+0xb0>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d003      	beq.n	8009ac2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009aba:	4b29      	ldr	r3, [pc, #164]	; (8009b60 <vTaskSwitchContext+0xb4>)
 8009abc:	2201      	movs	r2, #1
 8009abe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009ac0:	e046      	b.n	8009b50 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009ac2:	4b27      	ldr	r3, [pc, #156]	; (8009b60 <vTaskSwitchContext+0xb4>)
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ac8:	4b26      	ldr	r3, [pc, #152]	; (8009b64 <vTaskSwitchContext+0xb8>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	60fb      	str	r3, [r7, #12]
 8009ace:	e010      	b.n	8009af2 <vTaskSwitchContext+0x46>
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d10a      	bne.n	8009aec <vTaskSwitchContext+0x40>
	__asm volatile
 8009ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ada:	f383 8811 	msr	BASEPRI, r3
 8009ade:	f3bf 8f6f 	isb	sy
 8009ae2:	f3bf 8f4f 	dsb	sy
 8009ae6:	607b      	str	r3, [r7, #4]
}
 8009ae8:	bf00      	nop
 8009aea:	e7fe      	b.n	8009aea <vTaskSwitchContext+0x3e>
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	3b01      	subs	r3, #1
 8009af0:	60fb      	str	r3, [r7, #12]
 8009af2:	491d      	ldr	r1, [pc, #116]	; (8009b68 <vTaskSwitchContext+0xbc>)
 8009af4:	68fa      	ldr	r2, [r7, #12]
 8009af6:	4613      	mov	r3, r2
 8009af8:	009b      	lsls	r3, r3, #2
 8009afa:	4413      	add	r3, r2
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	440b      	add	r3, r1
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d0e4      	beq.n	8009ad0 <vTaskSwitchContext+0x24>
 8009b06:	68fa      	ldr	r2, [r7, #12]
 8009b08:	4613      	mov	r3, r2
 8009b0a:	009b      	lsls	r3, r3, #2
 8009b0c:	4413      	add	r3, r2
 8009b0e:	009b      	lsls	r3, r3, #2
 8009b10:	4a15      	ldr	r2, [pc, #84]	; (8009b68 <vTaskSwitchContext+0xbc>)
 8009b12:	4413      	add	r3, r2
 8009b14:	60bb      	str	r3, [r7, #8]
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	685b      	ldr	r3, [r3, #4]
 8009b1a:	685a      	ldr	r2, [r3, #4]
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	605a      	str	r2, [r3, #4]
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	685a      	ldr	r2, [r3, #4]
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	3308      	adds	r3, #8
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d104      	bne.n	8009b36 <vTaskSwitchContext+0x8a>
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	685a      	ldr	r2, [r3, #4]
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	605a      	str	r2, [r3, #4]
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	4a0b      	ldr	r2, [pc, #44]	; (8009b6c <vTaskSwitchContext+0xc0>)
 8009b3e:	6013      	str	r3, [r2, #0]
 8009b40:	4a08      	ldr	r2, [pc, #32]	; (8009b64 <vTaskSwitchContext+0xb8>)
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009b46:	4b09      	ldr	r3, [pc, #36]	; (8009b6c <vTaskSwitchContext+0xc0>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	3354      	adds	r3, #84	; 0x54
 8009b4c:	4a08      	ldr	r2, [pc, #32]	; (8009b70 <vTaskSwitchContext+0xc4>)
 8009b4e:	6013      	str	r3, [r2, #0]
}
 8009b50:	bf00      	nop
 8009b52:	3714      	adds	r7, #20
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr
 8009b5c:	24004bd0 	.word	0x24004bd0
 8009b60:	24004bbc 	.word	0x24004bbc
 8009b64:	24004bb0 	.word	0x24004bb0
 8009b68:	240046d8 	.word	0x240046d8
 8009b6c:	240046d4 	.word	0x240046d4
 8009b70:	24000014 	.word	0x24000014

08009b74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b084      	sub	sp, #16
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d10a      	bne.n	8009b9a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b88:	f383 8811 	msr	BASEPRI, r3
 8009b8c:	f3bf 8f6f 	isb	sy
 8009b90:	f3bf 8f4f 	dsb	sy
 8009b94:	60fb      	str	r3, [r7, #12]
}
 8009b96:	bf00      	nop
 8009b98:	e7fe      	b.n	8009b98 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b9a:	4b07      	ldr	r3, [pc, #28]	; (8009bb8 <vTaskPlaceOnEventList+0x44>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	3318      	adds	r3, #24
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f7fe fc49 	bl	800843a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009ba8:	2101      	movs	r1, #1
 8009baa:	6838      	ldr	r0, [r7, #0]
 8009bac:	f000 fa80 	bl	800a0b0 <prvAddCurrentTaskToDelayedList>
}
 8009bb0:	bf00      	nop
 8009bb2:	3710      	adds	r7, #16
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}
 8009bb8:	240046d4 	.word	0x240046d4

08009bbc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b086      	sub	sp, #24
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	60f8      	str	r0, [r7, #12]
 8009bc4:	60b9      	str	r1, [r7, #8]
 8009bc6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d10a      	bne.n	8009be4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd2:	f383 8811 	msr	BASEPRI, r3
 8009bd6:	f3bf 8f6f 	isb	sy
 8009bda:	f3bf 8f4f 	dsb	sy
 8009bde:	617b      	str	r3, [r7, #20]
}
 8009be0:	bf00      	nop
 8009be2:	e7fe      	b.n	8009be2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009be4:	4b0a      	ldr	r3, [pc, #40]	; (8009c10 <vTaskPlaceOnEventListRestricted+0x54>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	3318      	adds	r3, #24
 8009bea:	4619      	mov	r1, r3
 8009bec:	68f8      	ldr	r0, [r7, #12]
 8009bee:	f7fe fc00 	bl	80083f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d002      	beq.n	8009bfe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8009bfc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009bfe:	6879      	ldr	r1, [r7, #4]
 8009c00:	68b8      	ldr	r0, [r7, #8]
 8009c02:	f000 fa55 	bl	800a0b0 <prvAddCurrentTaskToDelayedList>
	}
 8009c06:	bf00      	nop
 8009c08:	3718      	adds	r7, #24
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
 8009c0e:	bf00      	nop
 8009c10:	240046d4 	.word	0x240046d4

08009c14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b086      	sub	sp, #24
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	68db      	ldr	r3, [r3, #12]
 8009c20:	68db      	ldr	r3, [r3, #12]
 8009c22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d10a      	bne.n	8009c40 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c2e:	f383 8811 	msr	BASEPRI, r3
 8009c32:	f3bf 8f6f 	isb	sy
 8009c36:	f3bf 8f4f 	dsb	sy
 8009c3a:	60fb      	str	r3, [r7, #12]
}
 8009c3c:	bf00      	nop
 8009c3e:	e7fe      	b.n	8009c3e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	3318      	adds	r3, #24
 8009c44:	4618      	mov	r0, r3
 8009c46:	f7fe fc31 	bl	80084ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c4a:	4b1e      	ldr	r3, [pc, #120]	; (8009cc4 <xTaskRemoveFromEventList+0xb0>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d11d      	bne.n	8009c8e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	3304      	adds	r3, #4
 8009c56:	4618      	mov	r0, r3
 8009c58:	f7fe fc28 	bl	80084ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c60:	4b19      	ldr	r3, [pc, #100]	; (8009cc8 <xTaskRemoveFromEventList+0xb4>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d903      	bls.n	8009c70 <xTaskRemoveFromEventList+0x5c>
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c6c:	4a16      	ldr	r2, [pc, #88]	; (8009cc8 <xTaskRemoveFromEventList+0xb4>)
 8009c6e:	6013      	str	r3, [r2, #0]
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c74:	4613      	mov	r3, r2
 8009c76:	009b      	lsls	r3, r3, #2
 8009c78:	4413      	add	r3, r2
 8009c7a:	009b      	lsls	r3, r3, #2
 8009c7c:	4a13      	ldr	r2, [pc, #76]	; (8009ccc <xTaskRemoveFromEventList+0xb8>)
 8009c7e:	441a      	add	r2, r3
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	3304      	adds	r3, #4
 8009c84:	4619      	mov	r1, r3
 8009c86:	4610      	mov	r0, r2
 8009c88:	f7fe fbb3 	bl	80083f2 <vListInsertEnd>
 8009c8c:	e005      	b.n	8009c9a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	3318      	adds	r3, #24
 8009c92:	4619      	mov	r1, r3
 8009c94:	480e      	ldr	r0, [pc, #56]	; (8009cd0 <xTaskRemoveFromEventList+0xbc>)
 8009c96:	f7fe fbac 	bl	80083f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c9e:	4b0d      	ldr	r3, [pc, #52]	; (8009cd4 <xTaskRemoveFromEventList+0xc0>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d905      	bls.n	8009cb4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009ca8:	2301      	movs	r3, #1
 8009caa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009cac:	4b0a      	ldr	r3, [pc, #40]	; (8009cd8 <xTaskRemoveFromEventList+0xc4>)
 8009cae:	2201      	movs	r2, #1
 8009cb0:	601a      	str	r2, [r3, #0]
 8009cb2:	e001      	b.n	8009cb8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009cb8:	697b      	ldr	r3, [r7, #20]
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3718      	adds	r7, #24
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	24004bd0 	.word	0x24004bd0
 8009cc8:	24004bb0 	.word	0x24004bb0
 8009ccc:	240046d8 	.word	0x240046d8
 8009cd0:	24004b68 	.word	0x24004b68
 8009cd4:	240046d4 	.word	0x240046d4
 8009cd8:	24004bbc 	.word	0x24004bbc

08009cdc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b083      	sub	sp, #12
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009ce4:	4b06      	ldr	r3, [pc, #24]	; (8009d00 <vTaskInternalSetTimeOutState+0x24>)
 8009ce6:	681a      	ldr	r2, [r3, #0]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009cec:	4b05      	ldr	r3, [pc, #20]	; (8009d04 <vTaskInternalSetTimeOutState+0x28>)
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	605a      	str	r2, [r3, #4]
}
 8009cf4:	bf00      	nop
 8009cf6:	370c      	adds	r7, #12
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr
 8009d00:	24004bc0 	.word	0x24004bc0
 8009d04:	24004bac 	.word	0x24004bac

08009d08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b088      	sub	sp, #32
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d10a      	bne.n	8009d2e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d1c:	f383 8811 	msr	BASEPRI, r3
 8009d20:	f3bf 8f6f 	isb	sy
 8009d24:	f3bf 8f4f 	dsb	sy
 8009d28:	613b      	str	r3, [r7, #16]
}
 8009d2a:	bf00      	nop
 8009d2c:	e7fe      	b.n	8009d2c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d10a      	bne.n	8009d4a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d38:	f383 8811 	msr	BASEPRI, r3
 8009d3c:	f3bf 8f6f 	isb	sy
 8009d40:	f3bf 8f4f 	dsb	sy
 8009d44:	60fb      	str	r3, [r7, #12]
}
 8009d46:	bf00      	nop
 8009d48:	e7fe      	b.n	8009d48 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009d4a:	f7fe fd03 	bl	8008754 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009d4e:	4b1d      	ldr	r3, [pc, #116]	; (8009dc4 <xTaskCheckForTimeOut+0xbc>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	69ba      	ldr	r2, [r7, #24]
 8009d5a:	1ad3      	subs	r3, r2, r3
 8009d5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d66:	d102      	bne.n	8009d6e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	61fb      	str	r3, [r7, #28]
 8009d6c:	e023      	b.n	8009db6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681a      	ldr	r2, [r3, #0]
 8009d72:	4b15      	ldr	r3, [pc, #84]	; (8009dc8 <xTaskCheckForTimeOut+0xc0>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	429a      	cmp	r2, r3
 8009d78:	d007      	beq.n	8009d8a <xTaskCheckForTimeOut+0x82>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	69ba      	ldr	r2, [r7, #24]
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d302      	bcc.n	8009d8a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009d84:	2301      	movs	r3, #1
 8009d86:	61fb      	str	r3, [r7, #28]
 8009d88:	e015      	b.n	8009db6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	697a      	ldr	r2, [r7, #20]
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d20b      	bcs.n	8009dac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	681a      	ldr	r2, [r3, #0]
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	1ad2      	subs	r2, r2, r3
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f7ff ff9b 	bl	8009cdc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009da6:	2300      	movs	r3, #0
 8009da8:	61fb      	str	r3, [r7, #28]
 8009daa:	e004      	b.n	8009db6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	2200      	movs	r2, #0
 8009db0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009db2:	2301      	movs	r3, #1
 8009db4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009db6:	f7fe fcfd 	bl	80087b4 <vPortExitCritical>

	return xReturn;
 8009dba:	69fb      	ldr	r3, [r7, #28]
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3720      	adds	r7, #32
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	24004bac 	.word	0x24004bac
 8009dc8:	24004bc0 	.word	0x24004bc0

08009dcc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009dcc:	b480      	push	{r7}
 8009dce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009dd0:	4b03      	ldr	r3, [pc, #12]	; (8009de0 <vTaskMissedYield+0x14>)
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	601a      	str	r2, [r3, #0]
}
 8009dd6:	bf00      	nop
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr
 8009de0:	24004bbc 	.word	0x24004bbc

08009de4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b082      	sub	sp, #8
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009dec:	f000 f852 	bl	8009e94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009df0:	4b06      	ldr	r3, [pc, #24]	; (8009e0c <prvIdleTask+0x28>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	d9f9      	bls.n	8009dec <prvIdleTask+0x8>
			{
				taskYIELD();
 8009df8:	4b05      	ldr	r3, [pc, #20]	; (8009e10 <prvIdleTask+0x2c>)
 8009dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dfe:	601a      	str	r2, [r3, #0]
 8009e00:	f3bf 8f4f 	dsb	sy
 8009e04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009e08:	e7f0      	b.n	8009dec <prvIdleTask+0x8>
 8009e0a:	bf00      	nop
 8009e0c:	240046d8 	.word	0x240046d8
 8009e10:	e000ed04 	.word	0xe000ed04

08009e14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b082      	sub	sp, #8
 8009e18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	607b      	str	r3, [r7, #4]
 8009e1e:	e00c      	b.n	8009e3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009e20:	687a      	ldr	r2, [r7, #4]
 8009e22:	4613      	mov	r3, r2
 8009e24:	009b      	lsls	r3, r3, #2
 8009e26:	4413      	add	r3, r2
 8009e28:	009b      	lsls	r3, r3, #2
 8009e2a:	4a12      	ldr	r2, [pc, #72]	; (8009e74 <prvInitialiseTaskLists+0x60>)
 8009e2c:	4413      	add	r3, r2
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f7fe fab2 	bl	8008398 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	3301      	adds	r3, #1
 8009e38:	607b      	str	r3, [r7, #4]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2b37      	cmp	r3, #55	; 0x37
 8009e3e:	d9ef      	bls.n	8009e20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009e40:	480d      	ldr	r0, [pc, #52]	; (8009e78 <prvInitialiseTaskLists+0x64>)
 8009e42:	f7fe faa9 	bl	8008398 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009e46:	480d      	ldr	r0, [pc, #52]	; (8009e7c <prvInitialiseTaskLists+0x68>)
 8009e48:	f7fe faa6 	bl	8008398 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009e4c:	480c      	ldr	r0, [pc, #48]	; (8009e80 <prvInitialiseTaskLists+0x6c>)
 8009e4e:	f7fe faa3 	bl	8008398 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009e52:	480c      	ldr	r0, [pc, #48]	; (8009e84 <prvInitialiseTaskLists+0x70>)
 8009e54:	f7fe faa0 	bl	8008398 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009e58:	480b      	ldr	r0, [pc, #44]	; (8009e88 <prvInitialiseTaskLists+0x74>)
 8009e5a:	f7fe fa9d 	bl	8008398 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009e5e:	4b0b      	ldr	r3, [pc, #44]	; (8009e8c <prvInitialiseTaskLists+0x78>)
 8009e60:	4a05      	ldr	r2, [pc, #20]	; (8009e78 <prvInitialiseTaskLists+0x64>)
 8009e62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009e64:	4b0a      	ldr	r3, [pc, #40]	; (8009e90 <prvInitialiseTaskLists+0x7c>)
 8009e66:	4a05      	ldr	r2, [pc, #20]	; (8009e7c <prvInitialiseTaskLists+0x68>)
 8009e68:	601a      	str	r2, [r3, #0]
}
 8009e6a:	bf00      	nop
 8009e6c:	3708      	adds	r7, #8
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop
 8009e74:	240046d8 	.word	0x240046d8
 8009e78:	24004b38 	.word	0x24004b38
 8009e7c:	24004b4c 	.word	0x24004b4c
 8009e80:	24004b68 	.word	0x24004b68
 8009e84:	24004b7c 	.word	0x24004b7c
 8009e88:	24004b94 	.word	0x24004b94
 8009e8c:	24004b60 	.word	0x24004b60
 8009e90:	24004b64 	.word	0x24004b64

08009e94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b082      	sub	sp, #8
 8009e98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e9a:	e019      	b.n	8009ed0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009e9c:	f7fe fc5a 	bl	8008754 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ea0:	4b10      	ldr	r3, [pc, #64]	; (8009ee4 <prvCheckTasksWaitingTermination+0x50>)
 8009ea2:	68db      	ldr	r3, [r3, #12]
 8009ea4:	68db      	ldr	r3, [r3, #12]
 8009ea6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	3304      	adds	r3, #4
 8009eac:	4618      	mov	r0, r3
 8009eae:	f7fe fafd 	bl	80084ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009eb2:	4b0d      	ldr	r3, [pc, #52]	; (8009ee8 <prvCheckTasksWaitingTermination+0x54>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	3b01      	subs	r3, #1
 8009eb8:	4a0b      	ldr	r2, [pc, #44]	; (8009ee8 <prvCheckTasksWaitingTermination+0x54>)
 8009eba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009ebc:	4b0b      	ldr	r3, [pc, #44]	; (8009eec <prvCheckTasksWaitingTermination+0x58>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	3b01      	subs	r3, #1
 8009ec2:	4a0a      	ldr	r2, [pc, #40]	; (8009eec <prvCheckTasksWaitingTermination+0x58>)
 8009ec4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009ec6:	f7fe fc75 	bl	80087b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 f810 	bl	8009ef0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ed0:	4b06      	ldr	r3, [pc, #24]	; (8009eec <prvCheckTasksWaitingTermination+0x58>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d1e1      	bne.n	8009e9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009ed8:	bf00      	nop
 8009eda:	bf00      	nop
 8009edc:	3708      	adds	r7, #8
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	24004b7c 	.word	0x24004b7c
 8009ee8:	24004ba8 	.word	0x24004ba8
 8009eec:	24004b90 	.word	0x24004b90

08009ef0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b084      	sub	sp, #16
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	3354      	adds	r3, #84	; 0x54
 8009efc:	4618      	mov	r0, r3
 8009efe:	f000 fe6d 	bl	800abdc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d108      	bne.n	8009f1e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f10:	4618      	mov	r0, r3
 8009f12:	f7fe f923 	bl	800815c <vPortFree>
				vPortFree( pxTCB );
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f7fe f920 	bl	800815c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009f1c:	e018      	b.n	8009f50 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	d103      	bne.n	8009f30 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f7fe f917 	bl	800815c <vPortFree>
	}
 8009f2e:	e00f      	b.n	8009f50 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009f36:	2b02      	cmp	r3, #2
 8009f38:	d00a      	beq.n	8009f50 <prvDeleteTCB+0x60>
	__asm volatile
 8009f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f3e:	f383 8811 	msr	BASEPRI, r3
 8009f42:	f3bf 8f6f 	isb	sy
 8009f46:	f3bf 8f4f 	dsb	sy
 8009f4a:	60fb      	str	r3, [r7, #12]
}
 8009f4c:	bf00      	nop
 8009f4e:	e7fe      	b.n	8009f4e <prvDeleteTCB+0x5e>
	}
 8009f50:	bf00      	nop
 8009f52:	3710      	adds	r7, #16
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b083      	sub	sp, #12
 8009f5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f5e:	4b0c      	ldr	r3, [pc, #48]	; (8009f90 <prvResetNextTaskUnblockTime+0x38>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d104      	bne.n	8009f72 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009f68:	4b0a      	ldr	r3, [pc, #40]	; (8009f94 <prvResetNextTaskUnblockTime+0x3c>)
 8009f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f6e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009f70:	e008      	b.n	8009f84 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f72:	4b07      	ldr	r3, [pc, #28]	; (8009f90 <prvResetNextTaskUnblockTime+0x38>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	68db      	ldr	r3, [r3, #12]
 8009f78:	68db      	ldr	r3, [r3, #12]
 8009f7a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	4a04      	ldr	r2, [pc, #16]	; (8009f94 <prvResetNextTaskUnblockTime+0x3c>)
 8009f82:	6013      	str	r3, [r2, #0]
}
 8009f84:	bf00      	nop
 8009f86:	370c      	adds	r7, #12
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr
 8009f90:	24004b60 	.word	0x24004b60
 8009f94:	24004bc8 	.word	0x24004bc8

08009f98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009f98:	b480      	push	{r7}
 8009f9a:	b083      	sub	sp, #12
 8009f9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009f9e:	4b0b      	ldr	r3, [pc, #44]	; (8009fcc <xTaskGetSchedulerState+0x34>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d102      	bne.n	8009fac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	607b      	str	r3, [r7, #4]
 8009faa:	e008      	b.n	8009fbe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009fac:	4b08      	ldr	r3, [pc, #32]	; (8009fd0 <xTaskGetSchedulerState+0x38>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d102      	bne.n	8009fba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009fb4:	2302      	movs	r3, #2
 8009fb6:	607b      	str	r3, [r7, #4]
 8009fb8:	e001      	b.n	8009fbe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009fbe:	687b      	ldr	r3, [r7, #4]
	}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	370c      	adds	r7, #12
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr
 8009fcc:	24004bb4 	.word	0x24004bb4
 8009fd0:	24004bd0 	.word	0x24004bd0

08009fd4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b086      	sub	sp, #24
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d056      	beq.n	800a098 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009fea:	4b2e      	ldr	r3, [pc, #184]	; (800a0a4 <xTaskPriorityDisinherit+0xd0>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	693a      	ldr	r2, [r7, #16]
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d00a      	beq.n	800a00a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff8:	f383 8811 	msr	BASEPRI, r3
 8009ffc:	f3bf 8f6f 	isb	sy
 800a000:	f3bf 8f4f 	dsb	sy
 800a004:	60fb      	str	r3, [r7, #12]
}
 800a006:	bf00      	nop
 800a008:	e7fe      	b.n	800a008 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d10a      	bne.n	800a028 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a016:	f383 8811 	msr	BASEPRI, r3
 800a01a:	f3bf 8f6f 	isb	sy
 800a01e:	f3bf 8f4f 	dsb	sy
 800a022:	60bb      	str	r3, [r7, #8]
}
 800a024:	bf00      	nop
 800a026:	e7fe      	b.n	800a026 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a02c:	1e5a      	subs	r2, r3, #1
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d02c      	beq.n	800a098 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a042:	2b00      	cmp	r3, #0
 800a044:	d128      	bne.n	800a098 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	3304      	adds	r3, #4
 800a04a:	4618      	mov	r0, r3
 800a04c:	f7fe fa2e 	bl	80084ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a05c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a068:	4b0f      	ldr	r3, [pc, #60]	; (800a0a8 <xTaskPriorityDisinherit+0xd4>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	429a      	cmp	r2, r3
 800a06e:	d903      	bls.n	800a078 <xTaskPriorityDisinherit+0xa4>
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a074:	4a0c      	ldr	r2, [pc, #48]	; (800a0a8 <xTaskPriorityDisinherit+0xd4>)
 800a076:	6013      	str	r3, [r2, #0]
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a07c:	4613      	mov	r3, r2
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	4413      	add	r3, r2
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	4a09      	ldr	r2, [pc, #36]	; (800a0ac <xTaskPriorityDisinherit+0xd8>)
 800a086:	441a      	add	r2, r3
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	3304      	adds	r3, #4
 800a08c:	4619      	mov	r1, r3
 800a08e:	4610      	mov	r0, r2
 800a090:	f7fe f9af 	bl	80083f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a094:	2301      	movs	r3, #1
 800a096:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a098:	697b      	ldr	r3, [r7, #20]
	}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3718      	adds	r7, #24
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}
 800a0a2:	bf00      	nop
 800a0a4:	240046d4 	.word	0x240046d4
 800a0a8:	24004bb0 	.word	0x24004bb0
 800a0ac:	240046d8 	.word	0x240046d8

0800a0b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b084      	sub	sp, #16
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a0ba:	4b21      	ldr	r3, [pc, #132]	; (800a140 <prvAddCurrentTaskToDelayedList+0x90>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0c0:	4b20      	ldr	r3, [pc, #128]	; (800a144 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	3304      	adds	r3, #4
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f7fe f9f0 	bl	80084ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0d2:	d10a      	bne.n	800a0ea <prvAddCurrentTaskToDelayedList+0x3a>
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d007      	beq.n	800a0ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0da:	4b1a      	ldr	r3, [pc, #104]	; (800a144 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	3304      	adds	r3, #4
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	4819      	ldr	r0, [pc, #100]	; (800a148 <prvAddCurrentTaskToDelayedList+0x98>)
 800a0e4:	f7fe f985 	bl	80083f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a0e8:	e026      	b.n	800a138 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a0ea:	68fa      	ldr	r2, [r7, #12]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	4413      	add	r3, r2
 800a0f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a0f2:	4b14      	ldr	r3, [pc, #80]	; (800a144 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	68ba      	ldr	r2, [r7, #8]
 800a0f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a0fa:	68ba      	ldr	r2, [r7, #8]
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d209      	bcs.n	800a116 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a102:	4b12      	ldr	r3, [pc, #72]	; (800a14c <prvAddCurrentTaskToDelayedList+0x9c>)
 800a104:	681a      	ldr	r2, [r3, #0]
 800a106:	4b0f      	ldr	r3, [pc, #60]	; (800a144 <prvAddCurrentTaskToDelayedList+0x94>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	3304      	adds	r3, #4
 800a10c:	4619      	mov	r1, r3
 800a10e:	4610      	mov	r0, r2
 800a110:	f7fe f993 	bl	800843a <vListInsert>
}
 800a114:	e010      	b.n	800a138 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a116:	4b0e      	ldr	r3, [pc, #56]	; (800a150 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	4b0a      	ldr	r3, [pc, #40]	; (800a144 <prvAddCurrentTaskToDelayedList+0x94>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	3304      	adds	r3, #4
 800a120:	4619      	mov	r1, r3
 800a122:	4610      	mov	r0, r2
 800a124:	f7fe f989 	bl	800843a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a128:	4b0a      	ldr	r3, [pc, #40]	; (800a154 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	68ba      	ldr	r2, [r7, #8]
 800a12e:	429a      	cmp	r2, r3
 800a130:	d202      	bcs.n	800a138 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a132:	4a08      	ldr	r2, [pc, #32]	; (800a154 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	6013      	str	r3, [r2, #0]
}
 800a138:	bf00      	nop
 800a13a:	3710      	adds	r7, #16
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}
 800a140:	24004bac 	.word	0x24004bac
 800a144:	240046d4 	.word	0x240046d4
 800a148:	24004b94 	.word	0x24004b94
 800a14c:	24004b64 	.word	0x24004b64
 800a150:	24004b60 	.word	0x24004b60
 800a154:	24004bc8 	.word	0x24004bc8

0800a158 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b08a      	sub	sp, #40	; 0x28
 800a15c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a15e:	2300      	movs	r3, #0
 800a160:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a162:	f000 fb07 	bl	800a774 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a166:	4b1c      	ldr	r3, [pc, #112]	; (800a1d8 <xTimerCreateTimerTask+0x80>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d021      	beq.n	800a1b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a16e:	2300      	movs	r3, #0
 800a170:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a172:	2300      	movs	r3, #0
 800a174:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a176:	1d3a      	adds	r2, r7, #4
 800a178:	f107 0108 	add.w	r1, r7, #8
 800a17c:	f107 030c 	add.w	r3, r7, #12
 800a180:	4618      	mov	r0, r3
 800a182:	f7fd ff05 	bl	8007f90 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a186:	6879      	ldr	r1, [r7, #4]
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	68fa      	ldr	r2, [r7, #12]
 800a18c:	9202      	str	r2, [sp, #8]
 800a18e:	9301      	str	r3, [sp, #4]
 800a190:	2302      	movs	r3, #2
 800a192:	9300      	str	r3, [sp, #0]
 800a194:	2300      	movs	r3, #0
 800a196:	460a      	mov	r2, r1
 800a198:	4910      	ldr	r1, [pc, #64]	; (800a1dc <xTimerCreateTimerTask+0x84>)
 800a19a:	4811      	ldr	r0, [pc, #68]	; (800a1e0 <xTimerCreateTimerTask+0x88>)
 800a19c:	f7ff f8e8 	bl	8009370 <xTaskCreateStatic>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	4a10      	ldr	r2, [pc, #64]	; (800a1e4 <xTimerCreateTimerTask+0x8c>)
 800a1a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a1a6:	4b0f      	ldr	r3, [pc, #60]	; (800a1e4 <xTimerCreateTimerTask+0x8c>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d001      	beq.n	800a1b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d10a      	bne.n	800a1ce <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1bc:	f383 8811 	msr	BASEPRI, r3
 800a1c0:	f3bf 8f6f 	isb	sy
 800a1c4:	f3bf 8f4f 	dsb	sy
 800a1c8:	613b      	str	r3, [r7, #16]
}
 800a1ca:	bf00      	nop
 800a1cc:	e7fe      	b.n	800a1cc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a1ce:	697b      	ldr	r3, [r7, #20]
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3718      	adds	r7, #24
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}
 800a1d8:	24004c04 	.word	0x24004c04
 800a1dc:	0800b918 	.word	0x0800b918
 800a1e0:	0800a31d 	.word	0x0800a31d
 800a1e4:	24004c08 	.word	0x24004c08

0800a1e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b08a      	sub	sp, #40	; 0x28
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	60f8      	str	r0, [r7, #12]
 800a1f0:	60b9      	str	r1, [r7, #8]
 800a1f2:	607a      	str	r2, [r7, #4]
 800a1f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d10a      	bne.n	800a216 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a204:	f383 8811 	msr	BASEPRI, r3
 800a208:	f3bf 8f6f 	isb	sy
 800a20c:	f3bf 8f4f 	dsb	sy
 800a210:	623b      	str	r3, [r7, #32]
}
 800a212:	bf00      	nop
 800a214:	e7fe      	b.n	800a214 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a216:	4b1a      	ldr	r3, [pc, #104]	; (800a280 <xTimerGenericCommand+0x98>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d02a      	beq.n	800a274 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	2b05      	cmp	r3, #5
 800a22e:	dc18      	bgt.n	800a262 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a230:	f7ff feb2 	bl	8009f98 <xTaskGetSchedulerState>
 800a234:	4603      	mov	r3, r0
 800a236:	2b02      	cmp	r3, #2
 800a238:	d109      	bne.n	800a24e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a23a:	4b11      	ldr	r3, [pc, #68]	; (800a280 <xTimerGenericCommand+0x98>)
 800a23c:	6818      	ldr	r0, [r3, #0]
 800a23e:	f107 0110 	add.w	r1, r7, #16
 800a242:	2300      	movs	r3, #0
 800a244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a246:	f7fe fcab 	bl	8008ba0 <xQueueGenericSend>
 800a24a:	6278      	str	r0, [r7, #36]	; 0x24
 800a24c:	e012      	b.n	800a274 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a24e:	4b0c      	ldr	r3, [pc, #48]	; (800a280 <xTimerGenericCommand+0x98>)
 800a250:	6818      	ldr	r0, [r3, #0]
 800a252:	f107 0110 	add.w	r1, r7, #16
 800a256:	2300      	movs	r3, #0
 800a258:	2200      	movs	r2, #0
 800a25a:	f7fe fca1 	bl	8008ba0 <xQueueGenericSend>
 800a25e:	6278      	str	r0, [r7, #36]	; 0x24
 800a260:	e008      	b.n	800a274 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a262:	4b07      	ldr	r3, [pc, #28]	; (800a280 <xTimerGenericCommand+0x98>)
 800a264:	6818      	ldr	r0, [r3, #0]
 800a266:	f107 0110 	add.w	r1, r7, #16
 800a26a:	2300      	movs	r3, #0
 800a26c:	683a      	ldr	r2, [r7, #0]
 800a26e:	f7fe fd95 	bl	8008d9c <xQueueGenericSendFromISR>
 800a272:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a276:	4618      	mov	r0, r3
 800a278:	3728      	adds	r7, #40	; 0x28
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
 800a27e:	bf00      	nop
 800a280:	24004c04 	.word	0x24004c04

0800a284 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b088      	sub	sp, #32
 800a288:	af02      	add	r7, sp, #8
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a28e:	4b22      	ldr	r3, [pc, #136]	; (800a318 <prvProcessExpiredTimer+0x94>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	68db      	ldr	r3, [r3, #12]
 800a294:	68db      	ldr	r3, [r3, #12]
 800a296:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	3304      	adds	r3, #4
 800a29c:	4618      	mov	r0, r3
 800a29e:	f7fe f905 	bl	80084ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2a8:	f003 0304 	and.w	r3, r3, #4
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d022      	beq.n	800a2f6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	699a      	ldr	r2, [r3, #24]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	18d1      	adds	r1, r2, r3
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	683a      	ldr	r2, [r7, #0]
 800a2bc:	6978      	ldr	r0, [r7, #20]
 800a2be:	f000 f8d1 	bl	800a464 <prvInsertTimerInActiveList>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d01f      	beq.n	800a308 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	9300      	str	r3, [sp, #0]
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	687a      	ldr	r2, [r7, #4]
 800a2d0:	2100      	movs	r1, #0
 800a2d2:	6978      	ldr	r0, [r7, #20]
 800a2d4:	f7ff ff88 	bl	800a1e8 <xTimerGenericCommand>
 800a2d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d113      	bne.n	800a308 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e4:	f383 8811 	msr	BASEPRI, r3
 800a2e8:	f3bf 8f6f 	isb	sy
 800a2ec:	f3bf 8f4f 	dsb	sy
 800a2f0:	60fb      	str	r3, [r7, #12]
}
 800a2f2:	bf00      	nop
 800a2f4:	e7fe      	b.n	800a2f4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2fc:	f023 0301 	bic.w	r3, r3, #1
 800a300:	b2da      	uxtb	r2, r3
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	6a1b      	ldr	r3, [r3, #32]
 800a30c:	6978      	ldr	r0, [r7, #20]
 800a30e:	4798      	blx	r3
}
 800a310:	bf00      	nop
 800a312:	3718      	adds	r7, #24
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}
 800a318:	24004bfc 	.word	0x24004bfc

0800a31c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b084      	sub	sp, #16
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a324:	f107 0308 	add.w	r3, r7, #8
 800a328:	4618      	mov	r0, r3
 800a32a:	f000 f857 	bl	800a3dc <prvGetNextExpireTime>
 800a32e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	4619      	mov	r1, r3
 800a334:	68f8      	ldr	r0, [r7, #12]
 800a336:	f000 f803 	bl	800a340 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a33a:	f000 f8d5 	bl	800a4e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a33e:	e7f1      	b.n	800a324 <prvTimerTask+0x8>

0800a340 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b084      	sub	sp, #16
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a34a:	f7ff fa39 	bl	80097c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a34e:	f107 0308 	add.w	r3, r7, #8
 800a352:	4618      	mov	r0, r3
 800a354:	f000 f866 	bl	800a424 <prvSampleTimeNow>
 800a358:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d130      	bne.n	800a3c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d10a      	bne.n	800a37c <prvProcessTimerOrBlockTask+0x3c>
 800a366:	687a      	ldr	r2, [r7, #4]
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	429a      	cmp	r2, r3
 800a36c:	d806      	bhi.n	800a37c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a36e:	f7ff fa35 	bl	80097dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a372:	68f9      	ldr	r1, [r7, #12]
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f7ff ff85 	bl	800a284 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a37a:	e024      	b.n	800a3c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d008      	beq.n	800a394 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a382:	4b13      	ldr	r3, [pc, #76]	; (800a3d0 <prvProcessTimerOrBlockTask+0x90>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d101      	bne.n	800a390 <prvProcessTimerOrBlockTask+0x50>
 800a38c:	2301      	movs	r3, #1
 800a38e:	e000      	b.n	800a392 <prvProcessTimerOrBlockTask+0x52>
 800a390:	2300      	movs	r3, #0
 800a392:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a394:	4b0f      	ldr	r3, [pc, #60]	; (800a3d4 <prvProcessTimerOrBlockTask+0x94>)
 800a396:	6818      	ldr	r0, [r3, #0]
 800a398:	687a      	ldr	r2, [r7, #4]
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	1ad3      	subs	r3, r2, r3
 800a39e:	683a      	ldr	r2, [r7, #0]
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	f7fe ffb1 	bl	8009308 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a3a6:	f7ff fa19 	bl	80097dc <xTaskResumeAll>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d10a      	bne.n	800a3c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a3b0:	4b09      	ldr	r3, [pc, #36]	; (800a3d8 <prvProcessTimerOrBlockTask+0x98>)
 800a3b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3b6:	601a      	str	r2, [r3, #0]
 800a3b8:	f3bf 8f4f 	dsb	sy
 800a3bc:	f3bf 8f6f 	isb	sy
}
 800a3c0:	e001      	b.n	800a3c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a3c2:	f7ff fa0b 	bl	80097dc <xTaskResumeAll>
}
 800a3c6:	bf00      	nop
 800a3c8:	3710      	adds	r7, #16
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}
 800a3ce:	bf00      	nop
 800a3d0:	24004c00 	.word	0x24004c00
 800a3d4:	24004c04 	.word	0x24004c04
 800a3d8:	e000ed04 	.word	0xe000ed04

0800a3dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b085      	sub	sp, #20
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a3e4:	4b0e      	ldr	r3, [pc, #56]	; (800a420 <prvGetNextExpireTime+0x44>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d101      	bne.n	800a3f2 <prvGetNextExpireTime+0x16>
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	e000      	b.n	800a3f4 <prvGetNextExpireTime+0x18>
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d105      	bne.n	800a40c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a400:	4b07      	ldr	r3, [pc, #28]	; (800a420 <prvGetNextExpireTime+0x44>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	68db      	ldr	r3, [r3, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	60fb      	str	r3, [r7, #12]
 800a40a:	e001      	b.n	800a410 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a40c:	2300      	movs	r3, #0
 800a40e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a410:	68fb      	ldr	r3, [r7, #12]
}
 800a412:	4618      	mov	r0, r3
 800a414:	3714      	adds	r7, #20
 800a416:	46bd      	mov	sp, r7
 800a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41c:	4770      	bx	lr
 800a41e:	bf00      	nop
 800a420:	24004bfc 	.word	0x24004bfc

0800a424 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b084      	sub	sp, #16
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a42c:	f7ff fa74 	bl	8009918 <xTaskGetTickCount>
 800a430:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a432:	4b0b      	ldr	r3, [pc, #44]	; (800a460 <prvSampleTimeNow+0x3c>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	68fa      	ldr	r2, [r7, #12]
 800a438:	429a      	cmp	r2, r3
 800a43a:	d205      	bcs.n	800a448 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a43c:	f000 f936 	bl	800a6ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2201      	movs	r2, #1
 800a444:	601a      	str	r2, [r3, #0]
 800a446:	e002      	b.n	800a44e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2200      	movs	r2, #0
 800a44c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a44e:	4a04      	ldr	r2, [pc, #16]	; (800a460 <prvSampleTimeNow+0x3c>)
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a454:	68fb      	ldr	r3, [r7, #12]
}
 800a456:	4618      	mov	r0, r3
 800a458:	3710      	adds	r7, #16
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}
 800a45e:	bf00      	nop
 800a460:	24004c0c 	.word	0x24004c0c

0800a464 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b086      	sub	sp, #24
 800a468:	af00      	add	r7, sp, #0
 800a46a:	60f8      	str	r0, [r7, #12]
 800a46c:	60b9      	str	r1, [r7, #8]
 800a46e:	607a      	str	r2, [r7, #4]
 800a470:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a472:	2300      	movs	r3, #0
 800a474:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	68ba      	ldr	r2, [r7, #8]
 800a47a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	68fa      	ldr	r2, [r7, #12]
 800a480:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a482:	68ba      	ldr	r2, [r7, #8]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	429a      	cmp	r2, r3
 800a488:	d812      	bhi.n	800a4b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a48a:	687a      	ldr	r2, [r7, #4]
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	1ad2      	subs	r2, r2, r3
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	699b      	ldr	r3, [r3, #24]
 800a494:	429a      	cmp	r2, r3
 800a496:	d302      	bcc.n	800a49e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a498:	2301      	movs	r3, #1
 800a49a:	617b      	str	r3, [r7, #20]
 800a49c:	e01b      	b.n	800a4d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a49e:	4b10      	ldr	r3, [pc, #64]	; (800a4e0 <prvInsertTimerInActiveList+0x7c>)
 800a4a0:	681a      	ldr	r2, [r3, #0]
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	3304      	adds	r3, #4
 800a4a6:	4619      	mov	r1, r3
 800a4a8:	4610      	mov	r0, r2
 800a4aa:	f7fd ffc6 	bl	800843a <vListInsert>
 800a4ae:	e012      	b.n	800a4d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a4b0:	687a      	ldr	r2, [r7, #4]
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	429a      	cmp	r2, r3
 800a4b6:	d206      	bcs.n	800a4c6 <prvInsertTimerInActiveList+0x62>
 800a4b8:	68ba      	ldr	r2, [r7, #8]
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d302      	bcc.n	800a4c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	617b      	str	r3, [r7, #20]
 800a4c4:	e007      	b.n	800a4d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a4c6:	4b07      	ldr	r3, [pc, #28]	; (800a4e4 <prvInsertTimerInActiveList+0x80>)
 800a4c8:	681a      	ldr	r2, [r3, #0]
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	3304      	adds	r3, #4
 800a4ce:	4619      	mov	r1, r3
 800a4d0:	4610      	mov	r0, r2
 800a4d2:	f7fd ffb2 	bl	800843a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a4d6:	697b      	ldr	r3, [r7, #20]
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3718      	adds	r7, #24
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}
 800a4e0:	24004c00 	.word	0x24004c00
 800a4e4:	24004bfc 	.word	0x24004bfc

0800a4e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b08e      	sub	sp, #56	; 0x38
 800a4ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a4ee:	e0ca      	b.n	800a686 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	da18      	bge.n	800a528 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a4f6:	1d3b      	adds	r3, r7, #4
 800a4f8:	3304      	adds	r3, #4
 800a4fa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d10a      	bne.n	800a518 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a506:	f383 8811 	msr	BASEPRI, r3
 800a50a:	f3bf 8f6f 	isb	sy
 800a50e:	f3bf 8f4f 	dsb	sy
 800a512:	61fb      	str	r3, [r7, #28]
}
 800a514:	bf00      	nop
 800a516:	e7fe      	b.n	800a516 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a51e:	6850      	ldr	r0, [r2, #4]
 800a520:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a522:	6892      	ldr	r2, [r2, #8]
 800a524:	4611      	mov	r1, r2
 800a526:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	f2c0 80aa 	blt.w	800a684 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a536:	695b      	ldr	r3, [r3, #20]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d004      	beq.n	800a546 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a53e:	3304      	adds	r3, #4
 800a540:	4618      	mov	r0, r3
 800a542:	f7fd ffb3 	bl	80084ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a546:	463b      	mov	r3, r7
 800a548:	4618      	mov	r0, r3
 800a54a:	f7ff ff6b 	bl	800a424 <prvSampleTimeNow>
 800a54e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2b09      	cmp	r3, #9
 800a554:	f200 8097 	bhi.w	800a686 <prvProcessReceivedCommands+0x19e>
 800a558:	a201      	add	r2, pc, #4	; (adr r2, 800a560 <prvProcessReceivedCommands+0x78>)
 800a55a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a55e:	bf00      	nop
 800a560:	0800a589 	.word	0x0800a589
 800a564:	0800a589 	.word	0x0800a589
 800a568:	0800a589 	.word	0x0800a589
 800a56c:	0800a5fd 	.word	0x0800a5fd
 800a570:	0800a611 	.word	0x0800a611
 800a574:	0800a65b 	.word	0x0800a65b
 800a578:	0800a589 	.word	0x0800a589
 800a57c:	0800a589 	.word	0x0800a589
 800a580:	0800a5fd 	.word	0x0800a5fd
 800a584:	0800a611 	.word	0x0800a611
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a58a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a58e:	f043 0301 	orr.w	r3, r3, #1
 800a592:	b2da      	uxtb	r2, r3
 800a594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a596:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a59a:	68ba      	ldr	r2, [r7, #8]
 800a59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a59e:	699b      	ldr	r3, [r3, #24]
 800a5a0:	18d1      	adds	r1, r2, r3
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5a8:	f7ff ff5c 	bl	800a464 <prvInsertTimerInActiveList>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d069      	beq.n	800a686 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b4:	6a1b      	ldr	r3, [r3, #32]
 800a5b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5b8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5c0:	f003 0304 	and.w	r3, r3, #4
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d05e      	beq.n	800a686 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a5c8:	68ba      	ldr	r2, [r7, #8]
 800a5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5cc:	699b      	ldr	r3, [r3, #24]
 800a5ce:	441a      	add	r2, r3
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	9300      	str	r3, [sp, #0]
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	2100      	movs	r1, #0
 800a5d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5da:	f7ff fe05 	bl	800a1e8 <xTimerGenericCommand>
 800a5de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a5e0:	6a3b      	ldr	r3, [r7, #32]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d14f      	bne.n	800a686 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a5e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ea:	f383 8811 	msr	BASEPRI, r3
 800a5ee:	f3bf 8f6f 	isb	sy
 800a5f2:	f3bf 8f4f 	dsb	sy
 800a5f6:	61bb      	str	r3, [r7, #24]
}
 800a5f8:	bf00      	nop
 800a5fa:	e7fe      	b.n	800a5fa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a5fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a602:	f023 0301 	bic.w	r3, r3, #1
 800a606:	b2da      	uxtb	r2, r3
 800a608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a60a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a60e:	e03a      	b.n	800a686 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a612:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a616:	f043 0301 	orr.w	r3, r3, #1
 800a61a:	b2da      	uxtb	r2, r3
 800a61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a61e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a622:	68ba      	ldr	r2, [r7, #8]
 800a624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a626:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a62a:	699b      	ldr	r3, [r3, #24]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d10a      	bne.n	800a646 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a634:	f383 8811 	msr	BASEPRI, r3
 800a638:	f3bf 8f6f 	isb	sy
 800a63c:	f3bf 8f4f 	dsb	sy
 800a640:	617b      	str	r3, [r7, #20]
}
 800a642:	bf00      	nop
 800a644:	e7fe      	b.n	800a644 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a648:	699a      	ldr	r2, [r3, #24]
 800a64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a64c:	18d1      	adds	r1, r2, r3
 800a64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a652:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a654:	f7ff ff06 	bl	800a464 <prvInsertTimerInActiveList>
					break;
 800a658:	e015      	b.n	800a686 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a65c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a660:	f003 0302 	and.w	r3, r3, #2
 800a664:	2b00      	cmp	r3, #0
 800a666:	d103      	bne.n	800a670 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a668:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a66a:	f7fd fd77 	bl	800815c <vPortFree>
 800a66e:	e00a      	b.n	800a686 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a672:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a676:	f023 0301 	bic.w	r3, r3, #1
 800a67a:	b2da      	uxtb	r2, r3
 800a67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a67e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a682:	e000      	b.n	800a686 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a684:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a686:	4b08      	ldr	r3, [pc, #32]	; (800a6a8 <prvProcessReceivedCommands+0x1c0>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	1d39      	adds	r1, r7, #4
 800a68c:	2200      	movs	r2, #0
 800a68e:	4618      	mov	r0, r3
 800a690:	f7fe fc20 	bl	8008ed4 <xQueueReceive>
 800a694:	4603      	mov	r3, r0
 800a696:	2b00      	cmp	r3, #0
 800a698:	f47f af2a 	bne.w	800a4f0 <prvProcessReceivedCommands+0x8>
	}
}
 800a69c:	bf00      	nop
 800a69e:	bf00      	nop
 800a6a0:	3730      	adds	r7, #48	; 0x30
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}
 800a6a6:	bf00      	nop
 800a6a8:	24004c04 	.word	0x24004c04

0800a6ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b088      	sub	sp, #32
 800a6b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a6b2:	e048      	b.n	800a746 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a6b4:	4b2d      	ldr	r3, [pc, #180]	; (800a76c <prvSwitchTimerLists+0xc0>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	68db      	ldr	r3, [r3, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6be:	4b2b      	ldr	r3, [pc, #172]	; (800a76c <prvSwitchTimerLists+0xc0>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	68db      	ldr	r3, [r3, #12]
 800a6c4:	68db      	ldr	r3, [r3, #12]
 800a6c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	3304      	adds	r3, #4
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f7fd feed 	bl	80084ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	6a1b      	ldr	r3, [r3, #32]
 800a6d6:	68f8      	ldr	r0, [r7, #12]
 800a6d8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6e0:	f003 0304 	and.w	r3, r3, #4
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d02e      	beq.n	800a746 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	699b      	ldr	r3, [r3, #24]
 800a6ec:	693a      	ldr	r2, [r7, #16]
 800a6ee:	4413      	add	r3, r2
 800a6f0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a6f2:	68ba      	ldr	r2, [r7, #8]
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d90e      	bls.n	800a718 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	68ba      	ldr	r2, [r7, #8]
 800a6fe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	68fa      	ldr	r2, [r7, #12]
 800a704:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a706:	4b19      	ldr	r3, [pc, #100]	; (800a76c <prvSwitchTimerLists+0xc0>)
 800a708:	681a      	ldr	r2, [r3, #0]
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	3304      	adds	r3, #4
 800a70e:	4619      	mov	r1, r3
 800a710:	4610      	mov	r0, r2
 800a712:	f7fd fe92 	bl	800843a <vListInsert>
 800a716:	e016      	b.n	800a746 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a718:	2300      	movs	r3, #0
 800a71a:	9300      	str	r3, [sp, #0]
 800a71c:	2300      	movs	r3, #0
 800a71e:	693a      	ldr	r2, [r7, #16]
 800a720:	2100      	movs	r1, #0
 800a722:	68f8      	ldr	r0, [r7, #12]
 800a724:	f7ff fd60 	bl	800a1e8 <xTimerGenericCommand>
 800a728:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d10a      	bne.n	800a746 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a734:	f383 8811 	msr	BASEPRI, r3
 800a738:	f3bf 8f6f 	isb	sy
 800a73c:	f3bf 8f4f 	dsb	sy
 800a740:	603b      	str	r3, [r7, #0]
}
 800a742:	bf00      	nop
 800a744:	e7fe      	b.n	800a744 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a746:	4b09      	ldr	r3, [pc, #36]	; (800a76c <prvSwitchTimerLists+0xc0>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d1b1      	bne.n	800a6b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a750:	4b06      	ldr	r3, [pc, #24]	; (800a76c <prvSwitchTimerLists+0xc0>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a756:	4b06      	ldr	r3, [pc, #24]	; (800a770 <prvSwitchTimerLists+0xc4>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	4a04      	ldr	r2, [pc, #16]	; (800a76c <prvSwitchTimerLists+0xc0>)
 800a75c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a75e:	4a04      	ldr	r2, [pc, #16]	; (800a770 <prvSwitchTimerLists+0xc4>)
 800a760:	697b      	ldr	r3, [r7, #20]
 800a762:	6013      	str	r3, [r2, #0]
}
 800a764:	bf00      	nop
 800a766:	3718      	adds	r7, #24
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}
 800a76c:	24004bfc 	.word	0x24004bfc
 800a770:	24004c00 	.word	0x24004c00

0800a774 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b082      	sub	sp, #8
 800a778:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a77a:	f7fd ffeb 	bl	8008754 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a77e:	4b15      	ldr	r3, [pc, #84]	; (800a7d4 <prvCheckForValidListAndQueue+0x60>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d120      	bne.n	800a7c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a786:	4814      	ldr	r0, [pc, #80]	; (800a7d8 <prvCheckForValidListAndQueue+0x64>)
 800a788:	f7fd fe06 	bl	8008398 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a78c:	4813      	ldr	r0, [pc, #76]	; (800a7dc <prvCheckForValidListAndQueue+0x68>)
 800a78e:	f7fd fe03 	bl	8008398 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a792:	4b13      	ldr	r3, [pc, #76]	; (800a7e0 <prvCheckForValidListAndQueue+0x6c>)
 800a794:	4a10      	ldr	r2, [pc, #64]	; (800a7d8 <prvCheckForValidListAndQueue+0x64>)
 800a796:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a798:	4b12      	ldr	r3, [pc, #72]	; (800a7e4 <prvCheckForValidListAndQueue+0x70>)
 800a79a:	4a10      	ldr	r2, [pc, #64]	; (800a7dc <prvCheckForValidListAndQueue+0x68>)
 800a79c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a79e:	2300      	movs	r3, #0
 800a7a0:	9300      	str	r3, [sp, #0]
 800a7a2:	4b11      	ldr	r3, [pc, #68]	; (800a7e8 <prvCheckForValidListAndQueue+0x74>)
 800a7a4:	4a11      	ldr	r2, [pc, #68]	; (800a7ec <prvCheckForValidListAndQueue+0x78>)
 800a7a6:	2110      	movs	r1, #16
 800a7a8:	200a      	movs	r0, #10
 800a7aa:	f7fe f95d 	bl	8008a68 <xQueueGenericCreateStatic>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	4a08      	ldr	r2, [pc, #32]	; (800a7d4 <prvCheckForValidListAndQueue+0x60>)
 800a7b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a7b4:	4b07      	ldr	r3, [pc, #28]	; (800a7d4 <prvCheckForValidListAndQueue+0x60>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d005      	beq.n	800a7c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a7bc:	4b05      	ldr	r3, [pc, #20]	; (800a7d4 <prvCheckForValidListAndQueue+0x60>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	490b      	ldr	r1, [pc, #44]	; (800a7f0 <prvCheckForValidListAndQueue+0x7c>)
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7fe fd76 	bl	80092b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a7c8:	f7fd fff4 	bl	80087b4 <vPortExitCritical>
}
 800a7cc:	bf00      	nop
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
 800a7d2:	bf00      	nop
 800a7d4:	24004c04 	.word	0x24004c04
 800a7d8:	24004bd4 	.word	0x24004bd4
 800a7dc:	24004be8 	.word	0x24004be8
 800a7e0:	24004bfc 	.word	0x24004bfc
 800a7e4:	24004c00 	.word	0x24004c00
 800a7e8:	24004cb0 	.word	0x24004cb0
 800a7ec:	24004c10 	.word	0x24004c10
 800a7f0:	0800b920 	.word	0x0800b920

0800a7f4 <__errno>:
 800a7f4:	4b01      	ldr	r3, [pc, #4]	; (800a7fc <__errno+0x8>)
 800a7f6:	6818      	ldr	r0, [r3, #0]
 800a7f8:	4770      	bx	lr
 800a7fa:	bf00      	nop
 800a7fc:	24000014 	.word	0x24000014

0800a800 <std>:
 800a800:	2300      	movs	r3, #0
 800a802:	b510      	push	{r4, lr}
 800a804:	4604      	mov	r4, r0
 800a806:	e9c0 3300 	strd	r3, r3, [r0]
 800a80a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a80e:	6083      	str	r3, [r0, #8]
 800a810:	8181      	strh	r1, [r0, #12]
 800a812:	6643      	str	r3, [r0, #100]	; 0x64
 800a814:	81c2      	strh	r2, [r0, #14]
 800a816:	6183      	str	r3, [r0, #24]
 800a818:	4619      	mov	r1, r3
 800a81a:	2208      	movs	r2, #8
 800a81c:	305c      	adds	r0, #92	; 0x5c
 800a81e:	f000 f91a 	bl	800aa56 <memset>
 800a822:	4b05      	ldr	r3, [pc, #20]	; (800a838 <std+0x38>)
 800a824:	6263      	str	r3, [r4, #36]	; 0x24
 800a826:	4b05      	ldr	r3, [pc, #20]	; (800a83c <std+0x3c>)
 800a828:	62a3      	str	r3, [r4, #40]	; 0x28
 800a82a:	4b05      	ldr	r3, [pc, #20]	; (800a840 <std+0x40>)
 800a82c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a82e:	4b05      	ldr	r3, [pc, #20]	; (800a844 <std+0x44>)
 800a830:	6224      	str	r4, [r4, #32]
 800a832:	6323      	str	r3, [r4, #48]	; 0x30
 800a834:	bd10      	pop	{r4, pc}
 800a836:	bf00      	nop
 800a838:	0800acb5 	.word	0x0800acb5
 800a83c:	0800acd7 	.word	0x0800acd7
 800a840:	0800ad0f 	.word	0x0800ad0f
 800a844:	0800ad33 	.word	0x0800ad33

0800a848 <_cleanup_r>:
 800a848:	4901      	ldr	r1, [pc, #4]	; (800a850 <_cleanup_r+0x8>)
 800a84a:	f000 b8af 	b.w	800a9ac <_fwalk_reent>
 800a84e:	bf00      	nop
 800a850:	0800ae8d 	.word	0x0800ae8d

0800a854 <__sfmoreglue>:
 800a854:	b570      	push	{r4, r5, r6, lr}
 800a856:	2268      	movs	r2, #104	; 0x68
 800a858:	1e4d      	subs	r5, r1, #1
 800a85a:	4355      	muls	r5, r2
 800a85c:	460e      	mov	r6, r1
 800a85e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a862:	f000 f921 	bl	800aaa8 <_malloc_r>
 800a866:	4604      	mov	r4, r0
 800a868:	b140      	cbz	r0, 800a87c <__sfmoreglue+0x28>
 800a86a:	2100      	movs	r1, #0
 800a86c:	e9c0 1600 	strd	r1, r6, [r0]
 800a870:	300c      	adds	r0, #12
 800a872:	60a0      	str	r0, [r4, #8]
 800a874:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a878:	f000 f8ed 	bl	800aa56 <memset>
 800a87c:	4620      	mov	r0, r4
 800a87e:	bd70      	pop	{r4, r5, r6, pc}

0800a880 <__sfp_lock_acquire>:
 800a880:	4801      	ldr	r0, [pc, #4]	; (800a888 <__sfp_lock_acquire+0x8>)
 800a882:	f000 b8d8 	b.w	800aa36 <__retarget_lock_acquire_recursive>
 800a886:	bf00      	nop
 800a888:	24004d01 	.word	0x24004d01

0800a88c <__sfp_lock_release>:
 800a88c:	4801      	ldr	r0, [pc, #4]	; (800a894 <__sfp_lock_release+0x8>)
 800a88e:	f000 b8d3 	b.w	800aa38 <__retarget_lock_release_recursive>
 800a892:	bf00      	nop
 800a894:	24004d01 	.word	0x24004d01

0800a898 <__sinit_lock_acquire>:
 800a898:	4801      	ldr	r0, [pc, #4]	; (800a8a0 <__sinit_lock_acquire+0x8>)
 800a89a:	f000 b8cc 	b.w	800aa36 <__retarget_lock_acquire_recursive>
 800a89e:	bf00      	nop
 800a8a0:	24004d02 	.word	0x24004d02

0800a8a4 <__sinit_lock_release>:
 800a8a4:	4801      	ldr	r0, [pc, #4]	; (800a8ac <__sinit_lock_release+0x8>)
 800a8a6:	f000 b8c7 	b.w	800aa38 <__retarget_lock_release_recursive>
 800a8aa:	bf00      	nop
 800a8ac:	24004d02 	.word	0x24004d02

0800a8b0 <__sinit>:
 800a8b0:	b510      	push	{r4, lr}
 800a8b2:	4604      	mov	r4, r0
 800a8b4:	f7ff fff0 	bl	800a898 <__sinit_lock_acquire>
 800a8b8:	69a3      	ldr	r3, [r4, #24]
 800a8ba:	b11b      	cbz	r3, 800a8c4 <__sinit+0x14>
 800a8bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8c0:	f7ff bff0 	b.w	800a8a4 <__sinit_lock_release>
 800a8c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a8c8:	6523      	str	r3, [r4, #80]	; 0x50
 800a8ca:	4b13      	ldr	r3, [pc, #76]	; (800a918 <__sinit+0x68>)
 800a8cc:	4a13      	ldr	r2, [pc, #76]	; (800a91c <__sinit+0x6c>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	62a2      	str	r2, [r4, #40]	; 0x28
 800a8d2:	42a3      	cmp	r3, r4
 800a8d4:	bf04      	itt	eq
 800a8d6:	2301      	moveq	r3, #1
 800a8d8:	61a3      	streq	r3, [r4, #24]
 800a8da:	4620      	mov	r0, r4
 800a8dc:	f000 f820 	bl	800a920 <__sfp>
 800a8e0:	6060      	str	r0, [r4, #4]
 800a8e2:	4620      	mov	r0, r4
 800a8e4:	f000 f81c 	bl	800a920 <__sfp>
 800a8e8:	60a0      	str	r0, [r4, #8]
 800a8ea:	4620      	mov	r0, r4
 800a8ec:	f000 f818 	bl	800a920 <__sfp>
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	60e0      	str	r0, [r4, #12]
 800a8f4:	2104      	movs	r1, #4
 800a8f6:	6860      	ldr	r0, [r4, #4]
 800a8f8:	f7ff ff82 	bl	800a800 <std>
 800a8fc:	68a0      	ldr	r0, [r4, #8]
 800a8fe:	2201      	movs	r2, #1
 800a900:	2109      	movs	r1, #9
 800a902:	f7ff ff7d 	bl	800a800 <std>
 800a906:	68e0      	ldr	r0, [r4, #12]
 800a908:	2202      	movs	r2, #2
 800a90a:	2112      	movs	r1, #18
 800a90c:	f7ff ff78 	bl	800a800 <std>
 800a910:	2301      	movs	r3, #1
 800a912:	61a3      	str	r3, [r4, #24]
 800a914:	e7d2      	b.n	800a8bc <__sinit+0xc>
 800a916:	bf00      	nop
 800a918:	0800b9e4 	.word	0x0800b9e4
 800a91c:	0800a849 	.word	0x0800a849

0800a920 <__sfp>:
 800a920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a922:	4607      	mov	r7, r0
 800a924:	f7ff ffac 	bl	800a880 <__sfp_lock_acquire>
 800a928:	4b1e      	ldr	r3, [pc, #120]	; (800a9a4 <__sfp+0x84>)
 800a92a:	681e      	ldr	r6, [r3, #0]
 800a92c:	69b3      	ldr	r3, [r6, #24]
 800a92e:	b913      	cbnz	r3, 800a936 <__sfp+0x16>
 800a930:	4630      	mov	r0, r6
 800a932:	f7ff ffbd 	bl	800a8b0 <__sinit>
 800a936:	3648      	adds	r6, #72	; 0x48
 800a938:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a93c:	3b01      	subs	r3, #1
 800a93e:	d503      	bpl.n	800a948 <__sfp+0x28>
 800a940:	6833      	ldr	r3, [r6, #0]
 800a942:	b30b      	cbz	r3, 800a988 <__sfp+0x68>
 800a944:	6836      	ldr	r6, [r6, #0]
 800a946:	e7f7      	b.n	800a938 <__sfp+0x18>
 800a948:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a94c:	b9d5      	cbnz	r5, 800a984 <__sfp+0x64>
 800a94e:	4b16      	ldr	r3, [pc, #88]	; (800a9a8 <__sfp+0x88>)
 800a950:	60e3      	str	r3, [r4, #12]
 800a952:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a956:	6665      	str	r5, [r4, #100]	; 0x64
 800a958:	f000 f86c 	bl	800aa34 <__retarget_lock_init_recursive>
 800a95c:	f7ff ff96 	bl	800a88c <__sfp_lock_release>
 800a960:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a964:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a968:	6025      	str	r5, [r4, #0]
 800a96a:	61a5      	str	r5, [r4, #24]
 800a96c:	2208      	movs	r2, #8
 800a96e:	4629      	mov	r1, r5
 800a970:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a974:	f000 f86f 	bl	800aa56 <memset>
 800a978:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a97c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a980:	4620      	mov	r0, r4
 800a982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a984:	3468      	adds	r4, #104	; 0x68
 800a986:	e7d9      	b.n	800a93c <__sfp+0x1c>
 800a988:	2104      	movs	r1, #4
 800a98a:	4638      	mov	r0, r7
 800a98c:	f7ff ff62 	bl	800a854 <__sfmoreglue>
 800a990:	4604      	mov	r4, r0
 800a992:	6030      	str	r0, [r6, #0]
 800a994:	2800      	cmp	r0, #0
 800a996:	d1d5      	bne.n	800a944 <__sfp+0x24>
 800a998:	f7ff ff78 	bl	800a88c <__sfp_lock_release>
 800a99c:	230c      	movs	r3, #12
 800a99e:	603b      	str	r3, [r7, #0]
 800a9a0:	e7ee      	b.n	800a980 <__sfp+0x60>
 800a9a2:	bf00      	nop
 800a9a4:	0800b9e4 	.word	0x0800b9e4
 800a9a8:	ffff0001 	.word	0xffff0001

0800a9ac <_fwalk_reent>:
 800a9ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9b0:	4606      	mov	r6, r0
 800a9b2:	4688      	mov	r8, r1
 800a9b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a9b8:	2700      	movs	r7, #0
 800a9ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a9be:	f1b9 0901 	subs.w	r9, r9, #1
 800a9c2:	d505      	bpl.n	800a9d0 <_fwalk_reent+0x24>
 800a9c4:	6824      	ldr	r4, [r4, #0]
 800a9c6:	2c00      	cmp	r4, #0
 800a9c8:	d1f7      	bne.n	800a9ba <_fwalk_reent+0xe>
 800a9ca:	4638      	mov	r0, r7
 800a9cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9d0:	89ab      	ldrh	r3, [r5, #12]
 800a9d2:	2b01      	cmp	r3, #1
 800a9d4:	d907      	bls.n	800a9e6 <_fwalk_reent+0x3a>
 800a9d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a9da:	3301      	adds	r3, #1
 800a9dc:	d003      	beq.n	800a9e6 <_fwalk_reent+0x3a>
 800a9de:	4629      	mov	r1, r5
 800a9e0:	4630      	mov	r0, r6
 800a9e2:	47c0      	blx	r8
 800a9e4:	4307      	orrs	r7, r0
 800a9e6:	3568      	adds	r5, #104	; 0x68
 800a9e8:	e7e9      	b.n	800a9be <_fwalk_reent+0x12>
	...

0800a9ec <__libc_init_array>:
 800a9ec:	b570      	push	{r4, r5, r6, lr}
 800a9ee:	4d0d      	ldr	r5, [pc, #52]	; (800aa24 <__libc_init_array+0x38>)
 800a9f0:	4c0d      	ldr	r4, [pc, #52]	; (800aa28 <__libc_init_array+0x3c>)
 800a9f2:	1b64      	subs	r4, r4, r5
 800a9f4:	10a4      	asrs	r4, r4, #2
 800a9f6:	2600      	movs	r6, #0
 800a9f8:	42a6      	cmp	r6, r4
 800a9fa:	d109      	bne.n	800aa10 <__libc_init_array+0x24>
 800a9fc:	4d0b      	ldr	r5, [pc, #44]	; (800aa2c <__libc_init_array+0x40>)
 800a9fe:	4c0c      	ldr	r4, [pc, #48]	; (800aa30 <__libc_init_array+0x44>)
 800aa00:	f000 ff32 	bl	800b868 <_init>
 800aa04:	1b64      	subs	r4, r4, r5
 800aa06:	10a4      	asrs	r4, r4, #2
 800aa08:	2600      	movs	r6, #0
 800aa0a:	42a6      	cmp	r6, r4
 800aa0c:	d105      	bne.n	800aa1a <__libc_init_array+0x2e>
 800aa0e:	bd70      	pop	{r4, r5, r6, pc}
 800aa10:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa14:	4798      	blx	r3
 800aa16:	3601      	adds	r6, #1
 800aa18:	e7ee      	b.n	800a9f8 <__libc_init_array+0xc>
 800aa1a:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa1e:	4798      	blx	r3
 800aa20:	3601      	adds	r6, #1
 800aa22:	e7f2      	b.n	800aa0a <__libc_init_array+0x1e>
 800aa24:	0800ba24 	.word	0x0800ba24
 800aa28:	0800ba24 	.word	0x0800ba24
 800aa2c:	0800ba24 	.word	0x0800ba24
 800aa30:	0800ba28 	.word	0x0800ba28

0800aa34 <__retarget_lock_init_recursive>:
 800aa34:	4770      	bx	lr

0800aa36 <__retarget_lock_acquire_recursive>:
 800aa36:	4770      	bx	lr

0800aa38 <__retarget_lock_release_recursive>:
 800aa38:	4770      	bx	lr

0800aa3a <memcpy>:
 800aa3a:	440a      	add	r2, r1
 800aa3c:	4291      	cmp	r1, r2
 800aa3e:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa42:	d100      	bne.n	800aa46 <memcpy+0xc>
 800aa44:	4770      	bx	lr
 800aa46:	b510      	push	{r4, lr}
 800aa48:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa50:	4291      	cmp	r1, r2
 800aa52:	d1f9      	bne.n	800aa48 <memcpy+0xe>
 800aa54:	bd10      	pop	{r4, pc}

0800aa56 <memset>:
 800aa56:	4402      	add	r2, r0
 800aa58:	4603      	mov	r3, r0
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d100      	bne.n	800aa60 <memset+0xa>
 800aa5e:	4770      	bx	lr
 800aa60:	f803 1b01 	strb.w	r1, [r3], #1
 800aa64:	e7f9      	b.n	800aa5a <memset+0x4>
	...

0800aa68 <sbrk_aligned>:
 800aa68:	b570      	push	{r4, r5, r6, lr}
 800aa6a:	4e0e      	ldr	r6, [pc, #56]	; (800aaa4 <sbrk_aligned+0x3c>)
 800aa6c:	460c      	mov	r4, r1
 800aa6e:	6831      	ldr	r1, [r6, #0]
 800aa70:	4605      	mov	r5, r0
 800aa72:	b911      	cbnz	r1, 800aa7a <sbrk_aligned+0x12>
 800aa74:	f000 f90e 	bl	800ac94 <_sbrk_r>
 800aa78:	6030      	str	r0, [r6, #0]
 800aa7a:	4621      	mov	r1, r4
 800aa7c:	4628      	mov	r0, r5
 800aa7e:	f000 f909 	bl	800ac94 <_sbrk_r>
 800aa82:	1c43      	adds	r3, r0, #1
 800aa84:	d00a      	beq.n	800aa9c <sbrk_aligned+0x34>
 800aa86:	1cc4      	adds	r4, r0, #3
 800aa88:	f024 0403 	bic.w	r4, r4, #3
 800aa8c:	42a0      	cmp	r0, r4
 800aa8e:	d007      	beq.n	800aaa0 <sbrk_aligned+0x38>
 800aa90:	1a21      	subs	r1, r4, r0
 800aa92:	4628      	mov	r0, r5
 800aa94:	f000 f8fe 	bl	800ac94 <_sbrk_r>
 800aa98:	3001      	adds	r0, #1
 800aa9a:	d101      	bne.n	800aaa0 <sbrk_aligned+0x38>
 800aa9c:	f04f 34ff 	mov.w	r4, #4294967295
 800aaa0:	4620      	mov	r0, r4
 800aaa2:	bd70      	pop	{r4, r5, r6, pc}
 800aaa4:	24004d08 	.word	0x24004d08

0800aaa8 <_malloc_r>:
 800aaa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaac:	1ccd      	adds	r5, r1, #3
 800aaae:	f025 0503 	bic.w	r5, r5, #3
 800aab2:	3508      	adds	r5, #8
 800aab4:	2d0c      	cmp	r5, #12
 800aab6:	bf38      	it	cc
 800aab8:	250c      	movcc	r5, #12
 800aaba:	2d00      	cmp	r5, #0
 800aabc:	4607      	mov	r7, r0
 800aabe:	db01      	blt.n	800aac4 <_malloc_r+0x1c>
 800aac0:	42a9      	cmp	r1, r5
 800aac2:	d905      	bls.n	800aad0 <_malloc_r+0x28>
 800aac4:	230c      	movs	r3, #12
 800aac6:	603b      	str	r3, [r7, #0]
 800aac8:	2600      	movs	r6, #0
 800aaca:	4630      	mov	r0, r6
 800aacc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aad0:	4e2e      	ldr	r6, [pc, #184]	; (800ab8c <_malloc_r+0xe4>)
 800aad2:	f000 fa29 	bl	800af28 <__malloc_lock>
 800aad6:	6833      	ldr	r3, [r6, #0]
 800aad8:	461c      	mov	r4, r3
 800aada:	bb34      	cbnz	r4, 800ab2a <_malloc_r+0x82>
 800aadc:	4629      	mov	r1, r5
 800aade:	4638      	mov	r0, r7
 800aae0:	f7ff ffc2 	bl	800aa68 <sbrk_aligned>
 800aae4:	1c43      	adds	r3, r0, #1
 800aae6:	4604      	mov	r4, r0
 800aae8:	d14d      	bne.n	800ab86 <_malloc_r+0xde>
 800aaea:	6834      	ldr	r4, [r6, #0]
 800aaec:	4626      	mov	r6, r4
 800aaee:	2e00      	cmp	r6, #0
 800aaf0:	d140      	bne.n	800ab74 <_malloc_r+0xcc>
 800aaf2:	6823      	ldr	r3, [r4, #0]
 800aaf4:	4631      	mov	r1, r6
 800aaf6:	4638      	mov	r0, r7
 800aaf8:	eb04 0803 	add.w	r8, r4, r3
 800aafc:	f000 f8ca 	bl	800ac94 <_sbrk_r>
 800ab00:	4580      	cmp	r8, r0
 800ab02:	d13a      	bne.n	800ab7a <_malloc_r+0xd2>
 800ab04:	6821      	ldr	r1, [r4, #0]
 800ab06:	3503      	adds	r5, #3
 800ab08:	1a6d      	subs	r5, r5, r1
 800ab0a:	f025 0503 	bic.w	r5, r5, #3
 800ab0e:	3508      	adds	r5, #8
 800ab10:	2d0c      	cmp	r5, #12
 800ab12:	bf38      	it	cc
 800ab14:	250c      	movcc	r5, #12
 800ab16:	4629      	mov	r1, r5
 800ab18:	4638      	mov	r0, r7
 800ab1a:	f7ff ffa5 	bl	800aa68 <sbrk_aligned>
 800ab1e:	3001      	adds	r0, #1
 800ab20:	d02b      	beq.n	800ab7a <_malloc_r+0xd2>
 800ab22:	6823      	ldr	r3, [r4, #0]
 800ab24:	442b      	add	r3, r5
 800ab26:	6023      	str	r3, [r4, #0]
 800ab28:	e00e      	b.n	800ab48 <_malloc_r+0xa0>
 800ab2a:	6822      	ldr	r2, [r4, #0]
 800ab2c:	1b52      	subs	r2, r2, r5
 800ab2e:	d41e      	bmi.n	800ab6e <_malloc_r+0xc6>
 800ab30:	2a0b      	cmp	r2, #11
 800ab32:	d916      	bls.n	800ab62 <_malloc_r+0xba>
 800ab34:	1961      	adds	r1, r4, r5
 800ab36:	42a3      	cmp	r3, r4
 800ab38:	6025      	str	r5, [r4, #0]
 800ab3a:	bf18      	it	ne
 800ab3c:	6059      	strne	r1, [r3, #4]
 800ab3e:	6863      	ldr	r3, [r4, #4]
 800ab40:	bf08      	it	eq
 800ab42:	6031      	streq	r1, [r6, #0]
 800ab44:	5162      	str	r2, [r4, r5]
 800ab46:	604b      	str	r3, [r1, #4]
 800ab48:	4638      	mov	r0, r7
 800ab4a:	f104 060b 	add.w	r6, r4, #11
 800ab4e:	f000 f9f1 	bl	800af34 <__malloc_unlock>
 800ab52:	f026 0607 	bic.w	r6, r6, #7
 800ab56:	1d23      	adds	r3, r4, #4
 800ab58:	1af2      	subs	r2, r6, r3
 800ab5a:	d0b6      	beq.n	800aaca <_malloc_r+0x22>
 800ab5c:	1b9b      	subs	r3, r3, r6
 800ab5e:	50a3      	str	r3, [r4, r2]
 800ab60:	e7b3      	b.n	800aaca <_malloc_r+0x22>
 800ab62:	6862      	ldr	r2, [r4, #4]
 800ab64:	42a3      	cmp	r3, r4
 800ab66:	bf0c      	ite	eq
 800ab68:	6032      	streq	r2, [r6, #0]
 800ab6a:	605a      	strne	r2, [r3, #4]
 800ab6c:	e7ec      	b.n	800ab48 <_malloc_r+0xa0>
 800ab6e:	4623      	mov	r3, r4
 800ab70:	6864      	ldr	r4, [r4, #4]
 800ab72:	e7b2      	b.n	800aada <_malloc_r+0x32>
 800ab74:	4634      	mov	r4, r6
 800ab76:	6876      	ldr	r6, [r6, #4]
 800ab78:	e7b9      	b.n	800aaee <_malloc_r+0x46>
 800ab7a:	230c      	movs	r3, #12
 800ab7c:	603b      	str	r3, [r7, #0]
 800ab7e:	4638      	mov	r0, r7
 800ab80:	f000 f9d8 	bl	800af34 <__malloc_unlock>
 800ab84:	e7a1      	b.n	800aaca <_malloc_r+0x22>
 800ab86:	6025      	str	r5, [r4, #0]
 800ab88:	e7de      	b.n	800ab48 <_malloc_r+0xa0>
 800ab8a:	bf00      	nop
 800ab8c:	24004d04 	.word	0x24004d04

0800ab90 <iprintf>:
 800ab90:	b40f      	push	{r0, r1, r2, r3}
 800ab92:	4b0a      	ldr	r3, [pc, #40]	; (800abbc <iprintf+0x2c>)
 800ab94:	b513      	push	{r0, r1, r4, lr}
 800ab96:	681c      	ldr	r4, [r3, #0]
 800ab98:	b124      	cbz	r4, 800aba4 <iprintf+0x14>
 800ab9a:	69a3      	ldr	r3, [r4, #24]
 800ab9c:	b913      	cbnz	r3, 800aba4 <iprintf+0x14>
 800ab9e:	4620      	mov	r0, r4
 800aba0:	f7ff fe86 	bl	800a8b0 <__sinit>
 800aba4:	ab05      	add	r3, sp, #20
 800aba6:	9a04      	ldr	r2, [sp, #16]
 800aba8:	68a1      	ldr	r1, [r4, #8]
 800abaa:	9301      	str	r3, [sp, #4]
 800abac:	4620      	mov	r0, r4
 800abae:	f000 fa3d 	bl	800b02c <_vfiprintf_r>
 800abb2:	b002      	add	sp, #8
 800abb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abb8:	b004      	add	sp, #16
 800abba:	4770      	bx	lr
 800abbc:	24000014 	.word	0x24000014

0800abc0 <cleanup_glue>:
 800abc0:	b538      	push	{r3, r4, r5, lr}
 800abc2:	460c      	mov	r4, r1
 800abc4:	6809      	ldr	r1, [r1, #0]
 800abc6:	4605      	mov	r5, r0
 800abc8:	b109      	cbz	r1, 800abce <cleanup_glue+0xe>
 800abca:	f7ff fff9 	bl	800abc0 <cleanup_glue>
 800abce:	4621      	mov	r1, r4
 800abd0:	4628      	mov	r0, r5
 800abd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abd6:	f000 b9b3 	b.w	800af40 <_free_r>
	...

0800abdc <_reclaim_reent>:
 800abdc:	4b2c      	ldr	r3, [pc, #176]	; (800ac90 <_reclaim_reent+0xb4>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4283      	cmp	r3, r0
 800abe2:	b570      	push	{r4, r5, r6, lr}
 800abe4:	4604      	mov	r4, r0
 800abe6:	d051      	beq.n	800ac8c <_reclaim_reent+0xb0>
 800abe8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800abea:	b143      	cbz	r3, 800abfe <_reclaim_reent+0x22>
 800abec:	68db      	ldr	r3, [r3, #12]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d14a      	bne.n	800ac88 <_reclaim_reent+0xac>
 800abf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abf4:	6819      	ldr	r1, [r3, #0]
 800abf6:	b111      	cbz	r1, 800abfe <_reclaim_reent+0x22>
 800abf8:	4620      	mov	r0, r4
 800abfa:	f000 f9a1 	bl	800af40 <_free_r>
 800abfe:	6961      	ldr	r1, [r4, #20]
 800ac00:	b111      	cbz	r1, 800ac08 <_reclaim_reent+0x2c>
 800ac02:	4620      	mov	r0, r4
 800ac04:	f000 f99c 	bl	800af40 <_free_r>
 800ac08:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ac0a:	b111      	cbz	r1, 800ac12 <_reclaim_reent+0x36>
 800ac0c:	4620      	mov	r0, r4
 800ac0e:	f000 f997 	bl	800af40 <_free_r>
 800ac12:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ac14:	b111      	cbz	r1, 800ac1c <_reclaim_reent+0x40>
 800ac16:	4620      	mov	r0, r4
 800ac18:	f000 f992 	bl	800af40 <_free_r>
 800ac1c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ac1e:	b111      	cbz	r1, 800ac26 <_reclaim_reent+0x4a>
 800ac20:	4620      	mov	r0, r4
 800ac22:	f000 f98d 	bl	800af40 <_free_r>
 800ac26:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ac28:	b111      	cbz	r1, 800ac30 <_reclaim_reent+0x54>
 800ac2a:	4620      	mov	r0, r4
 800ac2c:	f000 f988 	bl	800af40 <_free_r>
 800ac30:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ac32:	b111      	cbz	r1, 800ac3a <_reclaim_reent+0x5e>
 800ac34:	4620      	mov	r0, r4
 800ac36:	f000 f983 	bl	800af40 <_free_r>
 800ac3a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ac3c:	b111      	cbz	r1, 800ac44 <_reclaim_reent+0x68>
 800ac3e:	4620      	mov	r0, r4
 800ac40:	f000 f97e 	bl	800af40 <_free_r>
 800ac44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac46:	b111      	cbz	r1, 800ac4e <_reclaim_reent+0x72>
 800ac48:	4620      	mov	r0, r4
 800ac4a:	f000 f979 	bl	800af40 <_free_r>
 800ac4e:	69a3      	ldr	r3, [r4, #24]
 800ac50:	b1e3      	cbz	r3, 800ac8c <_reclaim_reent+0xb0>
 800ac52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ac54:	4620      	mov	r0, r4
 800ac56:	4798      	blx	r3
 800ac58:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ac5a:	b1b9      	cbz	r1, 800ac8c <_reclaim_reent+0xb0>
 800ac5c:	4620      	mov	r0, r4
 800ac5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ac62:	f7ff bfad 	b.w	800abc0 <cleanup_glue>
 800ac66:	5949      	ldr	r1, [r1, r5]
 800ac68:	b941      	cbnz	r1, 800ac7c <_reclaim_reent+0xa0>
 800ac6a:	3504      	adds	r5, #4
 800ac6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac6e:	2d80      	cmp	r5, #128	; 0x80
 800ac70:	68d9      	ldr	r1, [r3, #12]
 800ac72:	d1f8      	bne.n	800ac66 <_reclaim_reent+0x8a>
 800ac74:	4620      	mov	r0, r4
 800ac76:	f000 f963 	bl	800af40 <_free_r>
 800ac7a:	e7ba      	b.n	800abf2 <_reclaim_reent+0x16>
 800ac7c:	680e      	ldr	r6, [r1, #0]
 800ac7e:	4620      	mov	r0, r4
 800ac80:	f000 f95e 	bl	800af40 <_free_r>
 800ac84:	4631      	mov	r1, r6
 800ac86:	e7ef      	b.n	800ac68 <_reclaim_reent+0x8c>
 800ac88:	2500      	movs	r5, #0
 800ac8a:	e7ef      	b.n	800ac6c <_reclaim_reent+0x90>
 800ac8c:	bd70      	pop	{r4, r5, r6, pc}
 800ac8e:	bf00      	nop
 800ac90:	24000014 	.word	0x24000014

0800ac94 <_sbrk_r>:
 800ac94:	b538      	push	{r3, r4, r5, lr}
 800ac96:	4d06      	ldr	r5, [pc, #24]	; (800acb0 <_sbrk_r+0x1c>)
 800ac98:	2300      	movs	r3, #0
 800ac9a:	4604      	mov	r4, r0
 800ac9c:	4608      	mov	r0, r1
 800ac9e:	602b      	str	r3, [r5, #0]
 800aca0:	f7f6 fcaa 	bl	80015f8 <_sbrk>
 800aca4:	1c43      	adds	r3, r0, #1
 800aca6:	d102      	bne.n	800acae <_sbrk_r+0x1a>
 800aca8:	682b      	ldr	r3, [r5, #0]
 800acaa:	b103      	cbz	r3, 800acae <_sbrk_r+0x1a>
 800acac:	6023      	str	r3, [r4, #0]
 800acae:	bd38      	pop	{r3, r4, r5, pc}
 800acb0:	24004d0c 	.word	0x24004d0c

0800acb4 <__sread>:
 800acb4:	b510      	push	{r4, lr}
 800acb6:	460c      	mov	r4, r1
 800acb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acbc:	f000 fc7a 	bl	800b5b4 <_read_r>
 800acc0:	2800      	cmp	r0, #0
 800acc2:	bfab      	itete	ge
 800acc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800acc6:	89a3      	ldrhlt	r3, [r4, #12]
 800acc8:	181b      	addge	r3, r3, r0
 800acca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800acce:	bfac      	ite	ge
 800acd0:	6563      	strge	r3, [r4, #84]	; 0x54
 800acd2:	81a3      	strhlt	r3, [r4, #12]
 800acd4:	bd10      	pop	{r4, pc}

0800acd6 <__swrite>:
 800acd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acda:	461f      	mov	r7, r3
 800acdc:	898b      	ldrh	r3, [r1, #12]
 800acde:	05db      	lsls	r3, r3, #23
 800ace0:	4605      	mov	r5, r0
 800ace2:	460c      	mov	r4, r1
 800ace4:	4616      	mov	r6, r2
 800ace6:	d505      	bpl.n	800acf4 <__swrite+0x1e>
 800ace8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acec:	2302      	movs	r3, #2
 800acee:	2200      	movs	r2, #0
 800acf0:	f000 f908 	bl	800af04 <_lseek_r>
 800acf4:	89a3      	ldrh	r3, [r4, #12]
 800acf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800acfe:	81a3      	strh	r3, [r4, #12]
 800ad00:	4632      	mov	r2, r6
 800ad02:	463b      	mov	r3, r7
 800ad04:	4628      	mov	r0, r5
 800ad06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad0a:	f000 b817 	b.w	800ad3c <_write_r>

0800ad0e <__sseek>:
 800ad0e:	b510      	push	{r4, lr}
 800ad10:	460c      	mov	r4, r1
 800ad12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad16:	f000 f8f5 	bl	800af04 <_lseek_r>
 800ad1a:	1c43      	adds	r3, r0, #1
 800ad1c:	89a3      	ldrh	r3, [r4, #12]
 800ad1e:	bf15      	itete	ne
 800ad20:	6560      	strne	r0, [r4, #84]	; 0x54
 800ad22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ad26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ad2a:	81a3      	strheq	r3, [r4, #12]
 800ad2c:	bf18      	it	ne
 800ad2e:	81a3      	strhne	r3, [r4, #12]
 800ad30:	bd10      	pop	{r4, pc}

0800ad32 <__sclose>:
 800ad32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad36:	f000 b813 	b.w	800ad60 <_close_r>
	...

0800ad3c <_write_r>:
 800ad3c:	b538      	push	{r3, r4, r5, lr}
 800ad3e:	4d07      	ldr	r5, [pc, #28]	; (800ad5c <_write_r+0x20>)
 800ad40:	4604      	mov	r4, r0
 800ad42:	4608      	mov	r0, r1
 800ad44:	4611      	mov	r1, r2
 800ad46:	2200      	movs	r2, #0
 800ad48:	602a      	str	r2, [r5, #0]
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	f7f6 fc03 	bl	8001556 <_write>
 800ad50:	1c43      	adds	r3, r0, #1
 800ad52:	d102      	bne.n	800ad5a <_write_r+0x1e>
 800ad54:	682b      	ldr	r3, [r5, #0]
 800ad56:	b103      	cbz	r3, 800ad5a <_write_r+0x1e>
 800ad58:	6023      	str	r3, [r4, #0]
 800ad5a:	bd38      	pop	{r3, r4, r5, pc}
 800ad5c:	24004d0c 	.word	0x24004d0c

0800ad60 <_close_r>:
 800ad60:	b538      	push	{r3, r4, r5, lr}
 800ad62:	4d06      	ldr	r5, [pc, #24]	; (800ad7c <_close_r+0x1c>)
 800ad64:	2300      	movs	r3, #0
 800ad66:	4604      	mov	r4, r0
 800ad68:	4608      	mov	r0, r1
 800ad6a:	602b      	str	r3, [r5, #0]
 800ad6c:	f7f6 fc0f 	bl	800158e <_close>
 800ad70:	1c43      	adds	r3, r0, #1
 800ad72:	d102      	bne.n	800ad7a <_close_r+0x1a>
 800ad74:	682b      	ldr	r3, [r5, #0]
 800ad76:	b103      	cbz	r3, 800ad7a <_close_r+0x1a>
 800ad78:	6023      	str	r3, [r4, #0]
 800ad7a:	bd38      	pop	{r3, r4, r5, pc}
 800ad7c:	24004d0c 	.word	0x24004d0c

0800ad80 <__sflush_r>:
 800ad80:	898a      	ldrh	r2, [r1, #12]
 800ad82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad86:	4605      	mov	r5, r0
 800ad88:	0710      	lsls	r0, r2, #28
 800ad8a:	460c      	mov	r4, r1
 800ad8c:	d458      	bmi.n	800ae40 <__sflush_r+0xc0>
 800ad8e:	684b      	ldr	r3, [r1, #4]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	dc05      	bgt.n	800ada0 <__sflush_r+0x20>
 800ad94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	dc02      	bgt.n	800ada0 <__sflush_r+0x20>
 800ad9a:	2000      	movs	r0, #0
 800ad9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ada0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ada2:	2e00      	cmp	r6, #0
 800ada4:	d0f9      	beq.n	800ad9a <__sflush_r+0x1a>
 800ada6:	2300      	movs	r3, #0
 800ada8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800adac:	682f      	ldr	r7, [r5, #0]
 800adae:	602b      	str	r3, [r5, #0]
 800adb0:	d032      	beq.n	800ae18 <__sflush_r+0x98>
 800adb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800adb4:	89a3      	ldrh	r3, [r4, #12]
 800adb6:	075a      	lsls	r2, r3, #29
 800adb8:	d505      	bpl.n	800adc6 <__sflush_r+0x46>
 800adba:	6863      	ldr	r3, [r4, #4]
 800adbc:	1ac0      	subs	r0, r0, r3
 800adbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800adc0:	b10b      	cbz	r3, 800adc6 <__sflush_r+0x46>
 800adc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800adc4:	1ac0      	subs	r0, r0, r3
 800adc6:	2300      	movs	r3, #0
 800adc8:	4602      	mov	r2, r0
 800adca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800adcc:	6a21      	ldr	r1, [r4, #32]
 800adce:	4628      	mov	r0, r5
 800add0:	47b0      	blx	r6
 800add2:	1c43      	adds	r3, r0, #1
 800add4:	89a3      	ldrh	r3, [r4, #12]
 800add6:	d106      	bne.n	800ade6 <__sflush_r+0x66>
 800add8:	6829      	ldr	r1, [r5, #0]
 800adda:	291d      	cmp	r1, #29
 800addc:	d82c      	bhi.n	800ae38 <__sflush_r+0xb8>
 800adde:	4a2a      	ldr	r2, [pc, #168]	; (800ae88 <__sflush_r+0x108>)
 800ade0:	40ca      	lsrs	r2, r1
 800ade2:	07d6      	lsls	r6, r2, #31
 800ade4:	d528      	bpl.n	800ae38 <__sflush_r+0xb8>
 800ade6:	2200      	movs	r2, #0
 800ade8:	6062      	str	r2, [r4, #4]
 800adea:	04d9      	lsls	r1, r3, #19
 800adec:	6922      	ldr	r2, [r4, #16]
 800adee:	6022      	str	r2, [r4, #0]
 800adf0:	d504      	bpl.n	800adfc <__sflush_r+0x7c>
 800adf2:	1c42      	adds	r2, r0, #1
 800adf4:	d101      	bne.n	800adfa <__sflush_r+0x7a>
 800adf6:	682b      	ldr	r3, [r5, #0]
 800adf8:	b903      	cbnz	r3, 800adfc <__sflush_r+0x7c>
 800adfa:	6560      	str	r0, [r4, #84]	; 0x54
 800adfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800adfe:	602f      	str	r7, [r5, #0]
 800ae00:	2900      	cmp	r1, #0
 800ae02:	d0ca      	beq.n	800ad9a <__sflush_r+0x1a>
 800ae04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae08:	4299      	cmp	r1, r3
 800ae0a:	d002      	beq.n	800ae12 <__sflush_r+0x92>
 800ae0c:	4628      	mov	r0, r5
 800ae0e:	f000 f897 	bl	800af40 <_free_r>
 800ae12:	2000      	movs	r0, #0
 800ae14:	6360      	str	r0, [r4, #52]	; 0x34
 800ae16:	e7c1      	b.n	800ad9c <__sflush_r+0x1c>
 800ae18:	6a21      	ldr	r1, [r4, #32]
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	4628      	mov	r0, r5
 800ae1e:	47b0      	blx	r6
 800ae20:	1c41      	adds	r1, r0, #1
 800ae22:	d1c7      	bne.n	800adb4 <__sflush_r+0x34>
 800ae24:	682b      	ldr	r3, [r5, #0]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d0c4      	beq.n	800adb4 <__sflush_r+0x34>
 800ae2a:	2b1d      	cmp	r3, #29
 800ae2c:	d001      	beq.n	800ae32 <__sflush_r+0xb2>
 800ae2e:	2b16      	cmp	r3, #22
 800ae30:	d101      	bne.n	800ae36 <__sflush_r+0xb6>
 800ae32:	602f      	str	r7, [r5, #0]
 800ae34:	e7b1      	b.n	800ad9a <__sflush_r+0x1a>
 800ae36:	89a3      	ldrh	r3, [r4, #12]
 800ae38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae3c:	81a3      	strh	r3, [r4, #12]
 800ae3e:	e7ad      	b.n	800ad9c <__sflush_r+0x1c>
 800ae40:	690f      	ldr	r7, [r1, #16]
 800ae42:	2f00      	cmp	r7, #0
 800ae44:	d0a9      	beq.n	800ad9a <__sflush_r+0x1a>
 800ae46:	0793      	lsls	r3, r2, #30
 800ae48:	680e      	ldr	r6, [r1, #0]
 800ae4a:	bf08      	it	eq
 800ae4c:	694b      	ldreq	r3, [r1, #20]
 800ae4e:	600f      	str	r7, [r1, #0]
 800ae50:	bf18      	it	ne
 800ae52:	2300      	movne	r3, #0
 800ae54:	eba6 0807 	sub.w	r8, r6, r7
 800ae58:	608b      	str	r3, [r1, #8]
 800ae5a:	f1b8 0f00 	cmp.w	r8, #0
 800ae5e:	dd9c      	ble.n	800ad9a <__sflush_r+0x1a>
 800ae60:	6a21      	ldr	r1, [r4, #32]
 800ae62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae64:	4643      	mov	r3, r8
 800ae66:	463a      	mov	r2, r7
 800ae68:	4628      	mov	r0, r5
 800ae6a:	47b0      	blx	r6
 800ae6c:	2800      	cmp	r0, #0
 800ae6e:	dc06      	bgt.n	800ae7e <__sflush_r+0xfe>
 800ae70:	89a3      	ldrh	r3, [r4, #12]
 800ae72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae76:	81a3      	strh	r3, [r4, #12]
 800ae78:	f04f 30ff 	mov.w	r0, #4294967295
 800ae7c:	e78e      	b.n	800ad9c <__sflush_r+0x1c>
 800ae7e:	4407      	add	r7, r0
 800ae80:	eba8 0800 	sub.w	r8, r8, r0
 800ae84:	e7e9      	b.n	800ae5a <__sflush_r+0xda>
 800ae86:	bf00      	nop
 800ae88:	20400001 	.word	0x20400001

0800ae8c <_fflush_r>:
 800ae8c:	b538      	push	{r3, r4, r5, lr}
 800ae8e:	690b      	ldr	r3, [r1, #16]
 800ae90:	4605      	mov	r5, r0
 800ae92:	460c      	mov	r4, r1
 800ae94:	b913      	cbnz	r3, 800ae9c <_fflush_r+0x10>
 800ae96:	2500      	movs	r5, #0
 800ae98:	4628      	mov	r0, r5
 800ae9a:	bd38      	pop	{r3, r4, r5, pc}
 800ae9c:	b118      	cbz	r0, 800aea6 <_fflush_r+0x1a>
 800ae9e:	6983      	ldr	r3, [r0, #24]
 800aea0:	b90b      	cbnz	r3, 800aea6 <_fflush_r+0x1a>
 800aea2:	f7ff fd05 	bl	800a8b0 <__sinit>
 800aea6:	4b14      	ldr	r3, [pc, #80]	; (800aef8 <_fflush_r+0x6c>)
 800aea8:	429c      	cmp	r4, r3
 800aeaa:	d11b      	bne.n	800aee4 <_fflush_r+0x58>
 800aeac:	686c      	ldr	r4, [r5, #4]
 800aeae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d0ef      	beq.n	800ae96 <_fflush_r+0xa>
 800aeb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aeb8:	07d0      	lsls	r0, r2, #31
 800aeba:	d404      	bmi.n	800aec6 <_fflush_r+0x3a>
 800aebc:	0599      	lsls	r1, r3, #22
 800aebe:	d402      	bmi.n	800aec6 <_fflush_r+0x3a>
 800aec0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aec2:	f7ff fdb8 	bl	800aa36 <__retarget_lock_acquire_recursive>
 800aec6:	4628      	mov	r0, r5
 800aec8:	4621      	mov	r1, r4
 800aeca:	f7ff ff59 	bl	800ad80 <__sflush_r>
 800aece:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aed0:	07da      	lsls	r2, r3, #31
 800aed2:	4605      	mov	r5, r0
 800aed4:	d4e0      	bmi.n	800ae98 <_fflush_r+0xc>
 800aed6:	89a3      	ldrh	r3, [r4, #12]
 800aed8:	059b      	lsls	r3, r3, #22
 800aeda:	d4dd      	bmi.n	800ae98 <_fflush_r+0xc>
 800aedc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aede:	f7ff fdab 	bl	800aa38 <__retarget_lock_release_recursive>
 800aee2:	e7d9      	b.n	800ae98 <_fflush_r+0xc>
 800aee4:	4b05      	ldr	r3, [pc, #20]	; (800aefc <_fflush_r+0x70>)
 800aee6:	429c      	cmp	r4, r3
 800aee8:	d101      	bne.n	800aeee <_fflush_r+0x62>
 800aeea:	68ac      	ldr	r4, [r5, #8]
 800aeec:	e7df      	b.n	800aeae <_fflush_r+0x22>
 800aeee:	4b04      	ldr	r3, [pc, #16]	; (800af00 <_fflush_r+0x74>)
 800aef0:	429c      	cmp	r4, r3
 800aef2:	bf08      	it	eq
 800aef4:	68ec      	ldreq	r4, [r5, #12]
 800aef6:	e7da      	b.n	800aeae <_fflush_r+0x22>
 800aef8:	0800b9a4 	.word	0x0800b9a4
 800aefc:	0800b9c4 	.word	0x0800b9c4
 800af00:	0800b984 	.word	0x0800b984

0800af04 <_lseek_r>:
 800af04:	b538      	push	{r3, r4, r5, lr}
 800af06:	4d07      	ldr	r5, [pc, #28]	; (800af24 <_lseek_r+0x20>)
 800af08:	4604      	mov	r4, r0
 800af0a:	4608      	mov	r0, r1
 800af0c:	4611      	mov	r1, r2
 800af0e:	2200      	movs	r2, #0
 800af10:	602a      	str	r2, [r5, #0]
 800af12:	461a      	mov	r2, r3
 800af14:	f7f6 fb62 	bl	80015dc <_lseek>
 800af18:	1c43      	adds	r3, r0, #1
 800af1a:	d102      	bne.n	800af22 <_lseek_r+0x1e>
 800af1c:	682b      	ldr	r3, [r5, #0]
 800af1e:	b103      	cbz	r3, 800af22 <_lseek_r+0x1e>
 800af20:	6023      	str	r3, [r4, #0]
 800af22:	bd38      	pop	{r3, r4, r5, pc}
 800af24:	24004d0c 	.word	0x24004d0c

0800af28 <__malloc_lock>:
 800af28:	4801      	ldr	r0, [pc, #4]	; (800af30 <__malloc_lock+0x8>)
 800af2a:	f7ff bd84 	b.w	800aa36 <__retarget_lock_acquire_recursive>
 800af2e:	bf00      	nop
 800af30:	24004d00 	.word	0x24004d00

0800af34 <__malloc_unlock>:
 800af34:	4801      	ldr	r0, [pc, #4]	; (800af3c <__malloc_unlock+0x8>)
 800af36:	f7ff bd7f 	b.w	800aa38 <__retarget_lock_release_recursive>
 800af3a:	bf00      	nop
 800af3c:	24004d00 	.word	0x24004d00

0800af40 <_free_r>:
 800af40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af42:	2900      	cmp	r1, #0
 800af44:	d044      	beq.n	800afd0 <_free_r+0x90>
 800af46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af4a:	9001      	str	r0, [sp, #4]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	f1a1 0404 	sub.w	r4, r1, #4
 800af52:	bfb8      	it	lt
 800af54:	18e4      	addlt	r4, r4, r3
 800af56:	f7ff ffe7 	bl	800af28 <__malloc_lock>
 800af5a:	4a1e      	ldr	r2, [pc, #120]	; (800afd4 <_free_r+0x94>)
 800af5c:	9801      	ldr	r0, [sp, #4]
 800af5e:	6813      	ldr	r3, [r2, #0]
 800af60:	b933      	cbnz	r3, 800af70 <_free_r+0x30>
 800af62:	6063      	str	r3, [r4, #4]
 800af64:	6014      	str	r4, [r2, #0]
 800af66:	b003      	add	sp, #12
 800af68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af6c:	f7ff bfe2 	b.w	800af34 <__malloc_unlock>
 800af70:	42a3      	cmp	r3, r4
 800af72:	d908      	bls.n	800af86 <_free_r+0x46>
 800af74:	6825      	ldr	r5, [r4, #0]
 800af76:	1961      	adds	r1, r4, r5
 800af78:	428b      	cmp	r3, r1
 800af7a:	bf01      	itttt	eq
 800af7c:	6819      	ldreq	r1, [r3, #0]
 800af7e:	685b      	ldreq	r3, [r3, #4]
 800af80:	1949      	addeq	r1, r1, r5
 800af82:	6021      	streq	r1, [r4, #0]
 800af84:	e7ed      	b.n	800af62 <_free_r+0x22>
 800af86:	461a      	mov	r2, r3
 800af88:	685b      	ldr	r3, [r3, #4]
 800af8a:	b10b      	cbz	r3, 800af90 <_free_r+0x50>
 800af8c:	42a3      	cmp	r3, r4
 800af8e:	d9fa      	bls.n	800af86 <_free_r+0x46>
 800af90:	6811      	ldr	r1, [r2, #0]
 800af92:	1855      	adds	r5, r2, r1
 800af94:	42a5      	cmp	r5, r4
 800af96:	d10b      	bne.n	800afb0 <_free_r+0x70>
 800af98:	6824      	ldr	r4, [r4, #0]
 800af9a:	4421      	add	r1, r4
 800af9c:	1854      	adds	r4, r2, r1
 800af9e:	42a3      	cmp	r3, r4
 800afa0:	6011      	str	r1, [r2, #0]
 800afa2:	d1e0      	bne.n	800af66 <_free_r+0x26>
 800afa4:	681c      	ldr	r4, [r3, #0]
 800afa6:	685b      	ldr	r3, [r3, #4]
 800afa8:	6053      	str	r3, [r2, #4]
 800afaa:	4421      	add	r1, r4
 800afac:	6011      	str	r1, [r2, #0]
 800afae:	e7da      	b.n	800af66 <_free_r+0x26>
 800afb0:	d902      	bls.n	800afb8 <_free_r+0x78>
 800afb2:	230c      	movs	r3, #12
 800afb4:	6003      	str	r3, [r0, #0]
 800afb6:	e7d6      	b.n	800af66 <_free_r+0x26>
 800afb8:	6825      	ldr	r5, [r4, #0]
 800afba:	1961      	adds	r1, r4, r5
 800afbc:	428b      	cmp	r3, r1
 800afbe:	bf04      	itt	eq
 800afc0:	6819      	ldreq	r1, [r3, #0]
 800afc2:	685b      	ldreq	r3, [r3, #4]
 800afc4:	6063      	str	r3, [r4, #4]
 800afc6:	bf04      	itt	eq
 800afc8:	1949      	addeq	r1, r1, r5
 800afca:	6021      	streq	r1, [r4, #0]
 800afcc:	6054      	str	r4, [r2, #4]
 800afce:	e7ca      	b.n	800af66 <_free_r+0x26>
 800afd0:	b003      	add	sp, #12
 800afd2:	bd30      	pop	{r4, r5, pc}
 800afd4:	24004d04 	.word	0x24004d04

0800afd8 <__sfputc_r>:
 800afd8:	6893      	ldr	r3, [r2, #8]
 800afda:	3b01      	subs	r3, #1
 800afdc:	2b00      	cmp	r3, #0
 800afde:	b410      	push	{r4}
 800afe0:	6093      	str	r3, [r2, #8]
 800afe2:	da08      	bge.n	800aff6 <__sfputc_r+0x1e>
 800afe4:	6994      	ldr	r4, [r2, #24]
 800afe6:	42a3      	cmp	r3, r4
 800afe8:	db01      	blt.n	800afee <__sfputc_r+0x16>
 800afea:	290a      	cmp	r1, #10
 800afec:	d103      	bne.n	800aff6 <__sfputc_r+0x1e>
 800afee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aff2:	f000 baf1 	b.w	800b5d8 <__swbuf_r>
 800aff6:	6813      	ldr	r3, [r2, #0]
 800aff8:	1c58      	adds	r0, r3, #1
 800affa:	6010      	str	r0, [r2, #0]
 800affc:	7019      	strb	r1, [r3, #0]
 800affe:	4608      	mov	r0, r1
 800b000:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b004:	4770      	bx	lr

0800b006 <__sfputs_r>:
 800b006:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b008:	4606      	mov	r6, r0
 800b00a:	460f      	mov	r7, r1
 800b00c:	4614      	mov	r4, r2
 800b00e:	18d5      	adds	r5, r2, r3
 800b010:	42ac      	cmp	r4, r5
 800b012:	d101      	bne.n	800b018 <__sfputs_r+0x12>
 800b014:	2000      	movs	r0, #0
 800b016:	e007      	b.n	800b028 <__sfputs_r+0x22>
 800b018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b01c:	463a      	mov	r2, r7
 800b01e:	4630      	mov	r0, r6
 800b020:	f7ff ffda 	bl	800afd8 <__sfputc_r>
 800b024:	1c43      	adds	r3, r0, #1
 800b026:	d1f3      	bne.n	800b010 <__sfputs_r+0xa>
 800b028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b02c <_vfiprintf_r>:
 800b02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b030:	460d      	mov	r5, r1
 800b032:	b09d      	sub	sp, #116	; 0x74
 800b034:	4614      	mov	r4, r2
 800b036:	4698      	mov	r8, r3
 800b038:	4606      	mov	r6, r0
 800b03a:	b118      	cbz	r0, 800b044 <_vfiprintf_r+0x18>
 800b03c:	6983      	ldr	r3, [r0, #24]
 800b03e:	b90b      	cbnz	r3, 800b044 <_vfiprintf_r+0x18>
 800b040:	f7ff fc36 	bl	800a8b0 <__sinit>
 800b044:	4b89      	ldr	r3, [pc, #548]	; (800b26c <_vfiprintf_r+0x240>)
 800b046:	429d      	cmp	r5, r3
 800b048:	d11b      	bne.n	800b082 <_vfiprintf_r+0x56>
 800b04a:	6875      	ldr	r5, [r6, #4]
 800b04c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b04e:	07d9      	lsls	r1, r3, #31
 800b050:	d405      	bmi.n	800b05e <_vfiprintf_r+0x32>
 800b052:	89ab      	ldrh	r3, [r5, #12]
 800b054:	059a      	lsls	r2, r3, #22
 800b056:	d402      	bmi.n	800b05e <_vfiprintf_r+0x32>
 800b058:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b05a:	f7ff fcec 	bl	800aa36 <__retarget_lock_acquire_recursive>
 800b05e:	89ab      	ldrh	r3, [r5, #12]
 800b060:	071b      	lsls	r3, r3, #28
 800b062:	d501      	bpl.n	800b068 <_vfiprintf_r+0x3c>
 800b064:	692b      	ldr	r3, [r5, #16]
 800b066:	b9eb      	cbnz	r3, 800b0a4 <_vfiprintf_r+0x78>
 800b068:	4629      	mov	r1, r5
 800b06a:	4630      	mov	r0, r6
 800b06c:	f000 fb06 	bl	800b67c <__swsetup_r>
 800b070:	b1c0      	cbz	r0, 800b0a4 <_vfiprintf_r+0x78>
 800b072:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b074:	07dc      	lsls	r4, r3, #31
 800b076:	d50e      	bpl.n	800b096 <_vfiprintf_r+0x6a>
 800b078:	f04f 30ff 	mov.w	r0, #4294967295
 800b07c:	b01d      	add	sp, #116	; 0x74
 800b07e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b082:	4b7b      	ldr	r3, [pc, #492]	; (800b270 <_vfiprintf_r+0x244>)
 800b084:	429d      	cmp	r5, r3
 800b086:	d101      	bne.n	800b08c <_vfiprintf_r+0x60>
 800b088:	68b5      	ldr	r5, [r6, #8]
 800b08a:	e7df      	b.n	800b04c <_vfiprintf_r+0x20>
 800b08c:	4b79      	ldr	r3, [pc, #484]	; (800b274 <_vfiprintf_r+0x248>)
 800b08e:	429d      	cmp	r5, r3
 800b090:	bf08      	it	eq
 800b092:	68f5      	ldreq	r5, [r6, #12]
 800b094:	e7da      	b.n	800b04c <_vfiprintf_r+0x20>
 800b096:	89ab      	ldrh	r3, [r5, #12]
 800b098:	0598      	lsls	r0, r3, #22
 800b09a:	d4ed      	bmi.n	800b078 <_vfiprintf_r+0x4c>
 800b09c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b09e:	f7ff fccb 	bl	800aa38 <__retarget_lock_release_recursive>
 800b0a2:	e7e9      	b.n	800b078 <_vfiprintf_r+0x4c>
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	9309      	str	r3, [sp, #36]	; 0x24
 800b0a8:	2320      	movs	r3, #32
 800b0aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b0ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0b2:	2330      	movs	r3, #48	; 0x30
 800b0b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b278 <_vfiprintf_r+0x24c>
 800b0b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b0bc:	f04f 0901 	mov.w	r9, #1
 800b0c0:	4623      	mov	r3, r4
 800b0c2:	469a      	mov	sl, r3
 800b0c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0c8:	b10a      	cbz	r2, 800b0ce <_vfiprintf_r+0xa2>
 800b0ca:	2a25      	cmp	r2, #37	; 0x25
 800b0cc:	d1f9      	bne.n	800b0c2 <_vfiprintf_r+0x96>
 800b0ce:	ebba 0b04 	subs.w	fp, sl, r4
 800b0d2:	d00b      	beq.n	800b0ec <_vfiprintf_r+0xc0>
 800b0d4:	465b      	mov	r3, fp
 800b0d6:	4622      	mov	r2, r4
 800b0d8:	4629      	mov	r1, r5
 800b0da:	4630      	mov	r0, r6
 800b0dc:	f7ff ff93 	bl	800b006 <__sfputs_r>
 800b0e0:	3001      	adds	r0, #1
 800b0e2:	f000 80aa 	beq.w	800b23a <_vfiprintf_r+0x20e>
 800b0e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0e8:	445a      	add	r2, fp
 800b0ea:	9209      	str	r2, [sp, #36]	; 0x24
 800b0ec:	f89a 3000 	ldrb.w	r3, [sl]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	f000 80a2 	beq.w	800b23a <_vfiprintf_r+0x20e>
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	f04f 32ff 	mov.w	r2, #4294967295
 800b0fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b100:	f10a 0a01 	add.w	sl, sl, #1
 800b104:	9304      	str	r3, [sp, #16]
 800b106:	9307      	str	r3, [sp, #28]
 800b108:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b10c:	931a      	str	r3, [sp, #104]	; 0x68
 800b10e:	4654      	mov	r4, sl
 800b110:	2205      	movs	r2, #5
 800b112:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b116:	4858      	ldr	r0, [pc, #352]	; (800b278 <_vfiprintf_r+0x24c>)
 800b118:	f7f5 f8e2 	bl	80002e0 <memchr>
 800b11c:	9a04      	ldr	r2, [sp, #16]
 800b11e:	b9d8      	cbnz	r0, 800b158 <_vfiprintf_r+0x12c>
 800b120:	06d1      	lsls	r1, r2, #27
 800b122:	bf44      	itt	mi
 800b124:	2320      	movmi	r3, #32
 800b126:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b12a:	0713      	lsls	r3, r2, #28
 800b12c:	bf44      	itt	mi
 800b12e:	232b      	movmi	r3, #43	; 0x2b
 800b130:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b134:	f89a 3000 	ldrb.w	r3, [sl]
 800b138:	2b2a      	cmp	r3, #42	; 0x2a
 800b13a:	d015      	beq.n	800b168 <_vfiprintf_r+0x13c>
 800b13c:	9a07      	ldr	r2, [sp, #28]
 800b13e:	4654      	mov	r4, sl
 800b140:	2000      	movs	r0, #0
 800b142:	f04f 0c0a 	mov.w	ip, #10
 800b146:	4621      	mov	r1, r4
 800b148:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b14c:	3b30      	subs	r3, #48	; 0x30
 800b14e:	2b09      	cmp	r3, #9
 800b150:	d94e      	bls.n	800b1f0 <_vfiprintf_r+0x1c4>
 800b152:	b1b0      	cbz	r0, 800b182 <_vfiprintf_r+0x156>
 800b154:	9207      	str	r2, [sp, #28]
 800b156:	e014      	b.n	800b182 <_vfiprintf_r+0x156>
 800b158:	eba0 0308 	sub.w	r3, r0, r8
 800b15c:	fa09 f303 	lsl.w	r3, r9, r3
 800b160:	4313      	orrs	r3, r2
 800b162:	9304      	str	r3, [sp, #16]
 800b164:	46a2      	mov	sl, r4
 800b166:	e7d2      	b.n	800b10e <_vfiprintf_r+0xe2>
 800b168:	9b03      	ldr	r3, [sp, #12]
 800b16a:	1d19      	adds	r1, r3, #4
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	9103      	str	r1, [sp, #12]
 800b170:	2b00      	cmp	r3, #0
 800b172:	bfbb      	ittet	lt
 800b174:	425b      	neglt	r3, r3
 800b176:	f042 0202 	orrlt.w	r2, r2, #2
 800b17a:	9307      	strge	r3, [sp, #28]
 800b17c:	9307      	strlt	r3, [sp, #28]
 800b17e:	bfb8      	it	lt
 800b180:	9204      	strlt	r2, [sp, #16]
 800b182:	7823      	ldrb	r3, [r4, #0]
 800b184:	2b2e      	cmp	r3, #46	; 0x2e
 800b186:	d10c      	bne.n	800b1a2 <_vfiprintf_r+0x176>
 800b188:	7863      	ldrb	r3, [r4, #1]
 800b18a:	2b2a      	cmp	r3, #42	; 0x2a
 800b18c:	d135      	bne.n	800b1fa <_vfiprintf_r+0x1ce>
 800b18e:	9b03      	ldr	r3, [sp, #12]
 800b190:	1d1a      	adds	r2, r3, #4
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	9203      	str	r2, [sp, #12]
 800b196:	2b00      	cmp	r3, #0
 800b198:	bfb8      	it	lt
 800b19a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b19e:	3402      	adds	r4, #2
 800b1a0:	9305      	str	r3, [sp, #20]
 800b1a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b288 <_vfiprintf_r+0x25c>
 800b1a6:	7821      	ldrb	r1, [r4, #0]
 800b1a8:	2203      	movs	r2, #3
 800b1aa:	4650      	mov	r0, sl
 800b1ac:	f7f5 f898 	bl	80002e0 <memchr>
 800b1b0:	b140      	cbz	r0, 800b1c4 <_vfiprintf_r+0x198>
 800b1b2:	2340      	movs	r3, #64	; 0x40
 800b1b4:	eba0 000a 	sub.w	r0, r0, sl
 800b1b8:	fa03 f000 	lsl.w	r0, r3, r0
 800b1bc:	9b04      	ldr	r3, [sp, #16]
 800b1be:	4303      	orrs	r3, r0
 800b1c0:	3401      	adds	r4, #1
 800b1c2:	9304      	str	r3, [sp, #16]
 800b1c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1c8:	482c      	ldr	r0, [pc, #176]	; (800b27c <_vfiprintf_r+0x250>)
 800b1ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b1ce:	2206      	movs	r2, #6
 800b1d0:	f7f5 f886 	bl	80002e0 <memchr>
 800b1d4:	2800      	cmp	r0, #0
 800b1d6:	d03f      	beq.n	800b258 <_vfiprintf_r+0x22c>
 800b1d8:	4b29      	ldr	r3, [pc, #164]	; (800b280 <_vfiprintf_r+0x254>)
 800b1da:	bb1b      	cbnz	r3, 800b224 <_vfiprintf_r+0x1f8>
 800b1dc:	9b03      	ldr	r3, [sp, #12]
 800b1de:	3307      	adds	r3, #7
 800b1e0:	f023 0307 	bic.w	r3, r3, #7
 800b1e4:	3308      	adds	r3, #8
 800b1e6:	9303      	str	r3, [sp, #12]
 800b1e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1ea:	443b      	add	r3, r7
 800b1ec:	9309      	str	r3, [sp, #36]	; 0x24
 800b1ee:	e767      	b.n	800b0c0 <_vfiprintf_r+0x94>
 800b1f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b1f4:	460c      	mov	r4, r1
 800b1f6:	2001      	movs	r0, #1
 800b1f8:	e7a5      	b.n	800b146 <_vfiprintf_r+0x11a>
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	3401      	adds	r4, #1
 800b1fe:	9305      	str	r3, [sp, #20]
 800b200:	4619      	mov	r1, r3
 800b202:	f04f 0c0a 	mov.w	ip, #10
 800b206:	4620      	mov	r0, r4
 800b208:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b20c:	3a30      	subs	r2, #48	; 0x30
 800b20e:	2a09      	cmp	r2, #9
 800b210:	d903      	bls.n	800b21a <_vfiprintf_r+0x1ee>
 800b212:	2b00      	cmp	r3, #0
 800b214:	d0c5      	beq.n	800b1a2 <_vfiprintf_r+0x176>
 800b216:	9105      	str	r1, [sp, #20]
 800b218:	e7c3      	b.n	800b1a2 <_vfiprintf_r+0x176>
 800b21a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b21e:	4604      	mov	r4, r0
 800b220:	2301      	movs	r3, #1
 800b222:	e7f0      	b.n	800b206 <_vfiprintf_r+0x1da>
 800b224:	ab03      	add	r3, sp, #12
 800b226:	9300      	str	r3, [sp, #0]
 800b228:	462a      	mov	r2, r5
 800b22a:	4b16      	ldr	r3, [pc, #88]	; (800b284 <_vfiprintf_r+0x258>)
 800b22c:	a904      	add	r1, sp, #16
 800b22e:	4630      	mov	r0, r6
 800b230:	f3af 8000 	nop.w
 800b234:	4607      	mov	r7, r0
 800b236:	1c78      	adds	r0, r7, #1
 800b238:	d1d6      	bne.n	800b1e8 <_vfiprintf_r+0x1bc>
 800b23a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b23c:	07d9      	lsls	r1, r3, #31
 800b23e:	d405      	bmi.n	800b24c <_vfiprintf_r+0x220>
 800b240:	89ab      	ldrh	r3, [r5, #12]
 800b242:	059a      	lsls	r2, r3, #22
 800b244:	d402      	bmi.n	800b24c <_vfiprintf_r+0x220>
 800b246:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b248:	f7ff fbf6 	bl	800aa38 <__retarget_lock_release_recursive>
 800b24c:	89ab      	ldrh	r3, [r5, #12]
 800b24e:	065b      	lsls	r3, r3, #25
 800b250:	f53f af12 	bmi.w	800b078 <_vfiprintf_r+0x4c>
 800b254:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b256:	e711      	b.n	800b07c <_vfiprintf_r+0x50>
 800b258:	ab03      	add	r3, sp, #12
 800b25a:	9300      	str	r3, [sp, #0]
 800b25c:	462a      	mov	r2, r5
 800b25e:	4b09      	ldr	r3, [pc, #36]	; (800b284 <_vfiprintf_r+0x258>)
 800b260:	a904      	add	r1, sp, #16
 800b262:	4630      	mov	r0, r6
 800b264:	f000 f880 	bl	800b368 <_printf_i>
 800b268:	e7e4      	b.n	800b234 <_vfiprintf_r+0x208>
 800b26a:	bf00      	nop
 800b26c:	0800b9a4 	.word	0x0800b9a4
 800b270:	0800b9c4 	.word	0x0800b9c4
 800b274:	0800b984 	.word	0x0800b984
 800b278:	0800b9e8 	.word	0x0800b9e8
 800b27c:	0800b9f2 	.word	0x0800b9f2
 800b280:	00000000 	.word	0x00000000
 800b284:	0800b007 	.word	0x0800b007
 800b288:	0800b9ee 	.word	0x0800b9ee

0800b28c <_printf_common>:
 800b28c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b290:	4616      	mov	r6, r2
 800b292:	4699      	mov	r9, r3
 800b294:	688a      	ldr	r2, [r1, #8]
 800b296:	690b      	ldr	r3, [r1, #16]
 800b298:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b29c:	4293      	cmp	r3, r2
 800b29e:	bfb8      	it	lt
 800b2a0:	4613      	movlt	r3, r2
 800b2a2:	6033      	str	r3, [r6, #0]
 800b2a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b2a8:	4607      	mov	r7, r0
 800b2aa:	460c      	mov	r4, r1
 800b2ac:	b10a      	cbz	r2, 800b2b2 <_printf_common+0x26>
 800b2ae:	3301      	adds	r3, #1
 800b2b0:	6033      	str	r3, [r6, #0]
 800b2b2:	6823      	ldr	r3, [r4, #0]
 800b2b4:	0699      	lsls	r1, r3, #26
 800b2b6:	bf42      	ittt	mi
 800b2b8:	6833      	ldrmi	r3, [r6, #0]
 800b2ba:	3302      	addmi	r3, #2
 800b2bc:	6033      	strmi	r3, [r6, #0]
 800b2be:	6825      	ldr	r5, [r4, #0]
 800b2c0:	f015 0506 	ands.w	r5, r5, #6
 800b2c4:	d106      	bne.n	800b2d4 <_printf_common+0x48>
 800b2c6:	f104 0a19 	add.w	sl, r4, #25
 800b2ca:	68e3      	ldr	r3, [r4, #12]
 800b2cc:	6832      	ldr	r2, [r6, #0]
 800b2ce:	1a9b      	subs	r3, r3, r2
 800b2d0:	42ab      	cmp	r3, r5
 800b2d2:	dc26      	bgt.n	800b322 <_printf_common+0x96>
 800b2d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b2d8:	1e13      	subs	r3, r2, #0
 800b2da:	6822      	ldr	r2, [r4, #0]
 800b2dc:	bf18      	it	ne
 800b2de:	2301      	movne	r3, #1
 800b2e0:	0692      	lsls	r2, r2, #26
 800b2e2:	d42b      	bmi.n	800b33c <_printf_common+0xb0>
 800b2e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b2e8:	4649      	mov	r1, r9
 800b2ea:	4638      	mov	r0, r7
 800b2ec:	47c0      	blx	r8
 800b2ee:	3001      	adds	r0, #1
 800b2f0:	d01e      	beq.n	800b330 <_printf_common+0xa4>
 800b2f2:	6823      	ldr	r3, [r4, #0]
 800b2f4:	68e5      	ldr	r5, [r4, #12]
 800b2f6:	6832      	ldr	r2, [r6, #0]
 800b2f8:	f003 0306 	and.w	r3, r3, #6
 800b2fc:	2b04      	cmp	r3, #4
 800b2fe:	bf08      	it	eq
 800b300:	1aad      	subeq	r5, r5, r2
 800b302:	68a3      	ldr	r3, [r4, #8]
 800b304:	6922      	ldr	r2, [r4, #16]
 800b306:	bf0c      	ite	eq
 800b308:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b30c:	2500      	movne	r5, #0
 800b30e:	4293      	cmp	r3, r2
 800b310:	bfc4      	itt	gt
 800b312:	1a9b      	subgt	r3, r3, r2
 800b314:	18ed      	addgt	r5, r5, r3
 800b316:	2600      	movs	r6, #0
 800b318:	341a      	adds	r4, #26
 800b31a:	42b5      	cmp	r5, r6
 800b31c:	d11a      	bne.n	800b354 <_printf_common+0xc8>
 800b31e:	2000      	movs	r0, #0
 800b320:	e008      	b.n	800b334 <_printf_common+0xa8>
 800b322:	2301      	movs	r3, #1
 800b324:	4652      	mov	r2, sl
 800b326:	4649      	mov	r1, r9
 800b328:	4638      	mov	r0, r7
 800b32a:	47c0      	blx	r8
 800b32c:	3001      	adds	r0, #1
 800b32e:	d103      	bne.n	800b338 <_printf_common+0xac>
 800b330:	f04f 30ff 	mov.w	r0, #4294967295
 800b334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b338:	3501      	adds	r5, #1
 800b33a:	e7c6      	b.n	800b2ca <_printf_common+0x3e>
 800b33c:	18e1      	adds	r1, r4, r3
 800b33e:	1c5a      	adds	r2, r3, #1
 800b340:	2030      	movs	r0, #48	; 0x30
 800b342:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b346:	4422      	add	r2, r4
 800b348:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b34c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b350:	3302      	adds	r3, #2
 800b352:	e7c7      	b.n	800b2e4 <_printf_common+0x58>
 800b354:	2301      	movs	r3, #1
 800b356:	4622      	mov	r2, r4
 800b358:	4649      	mov	r1, r9
 800b35a:	4638      	mov	r0, r7
 800b35c:	47c0      	blx	r8
 800b35e:	3001      	adds	r0, #1
 800b360:	d0e6      	beq.n	800b330 <_printf_common+0xa4>
 800b362:	3601      	adds	r6, #1
 800b364:	e7d9      	b.n	800b31a <_printf_common+0x8e>
	...

0800b368 <_printf_i>:
 800b368:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b36c:	7e0f      	ldrb	r7, [r1, #24]
 800b36e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b370:	2f78      	cmp	r7, #120	; 0x78
 800b372:	4691      	mov	r9, r2
 800b374:	4680      	mov	r8, r0
 800b376:	460c      	mov	r4, r1
 800b378:	469a      	mov	sl, r3
 800b37a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b37e:	d807      	bhi.n	800b390 <_printf_i+0x28>
 800b380:	2f62      	cmp	r7, #98	; 0x62
 800b382:	d80a      	bhi.n	800b39a <_printf_i+0x32>
 800b384:	2f00      	cmp	r7, #0
 800b386:	f000 80d8 	beq.w	800b53a <_printf_i+0x1d2>
 800b38a:	2f58      	cmp	r7, #88	; 0x58
 800b38c:	f000 80a3 	beq.w	800b4d6 <_printf_i+0x16e>
 800b390:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b394:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b398:	e03a      	b.n	800b410 <_printf_i+0xa8>
 800b39a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b39e:	2b15      	cmp	r3, #21
 800b3a0:	d8f6      	bhi.n	800b390 <_printf_i+0x28>
 800b3a2:	a101      	add	r1, pc, #4	; (adr r1, 800b3a8 <_printf_i+0x40>)
 800b3a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b3a8:	0800b401 	.word	0x0800b401
 800b3ac:	0800b415 	.word	0x0800b415
 800b3b0:	0800b391 	.word	0x0800b391
 800b3b4:	0800b391 	.word	0x0800b391
 800b3b8:	0800b391 	.word	0x0800b391
 800b3bc:	0800b391 	.word	0x0800b391
 800b3c0:	0800b415 	.word	0x0800b415
 800b3c4:	0800b391 	.word	0x0800b391
 800b3c8:	0800b391 	.word	0x0800b391
 800b3cc:	0800b391 	.word	0x0800b391
 800b3d0:	0800b391 	.word	0x0800b391
 800b3d4:	0800b521 	.word	0x0800b521
 800b3d8:	0800b445 	.word	0x0800b445
 800b3dc:	0800b503 	.word	0x0800b503
 800b3e0:	0800b391 	.word	0x0800b391
 800b3e4:	0800b391 	.word	0x0800b391
 800b3e8:	0800b543 	.word	0x0800b543
 800b3ec:	0800b391 	.word	0x0800b391
 800b3f0:	0800b445 	.word	0x0800b445
 800b3f4:	0800b391 	.word	0x0800b391
 800b3f8:	0800b391 	.word	0x0800b391
 800b3fc:	0800b50b 	.word	0x0800b50b
 800b400:	682b      	ldr	r3, [r5, #0]
 800b402:	1d1a      	adds	r2, r3, #4
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	602a      	str	r2, [r5, #0]
 800b408:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b40c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b410:	2301      	movs	r3, #1
 800b412:	e0a3      	b.n	800b55c <_printf_i+0x1f4>
 800b414:	6820      	ldr	r0, [r4, #0]
 800b416:	6829      	ldr	r1, [r5, #0]
 800b418:	0606      	lsls	r6, r0, #24
 800b41a:	f101 0304 	add.w	r3, r1, #4
 800b41e:	d50a      	bpl.n	800b436 <_printf_i+0xce>
 800b420:	680e      	ldr	r6, [r1, #0]
 800b422:	602b      	str	r3, [r5, #0]
 800b424:	2e00      	cmp	r6, #0
 800b426:	da03      	bge.n	800b430 <_printf_i+0xc8>
 800b428:	232d      	movs	r3, #45	; 0x2d
 800b42a:	4276      	negs	r6, r6
 800b42c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b430:	485e      	ldr	r0, [pc, #376]	; (800b5ac <_printf_i+0x244>)
 800b432:	230a      	movs	r3, #10
 800b434:	e019      	b.n	800b46a <_printf_i+0x102>
 800b436:	680e      	ldr	r6, [r1, #0]
 800b438:	602b      	str	r3, [r5, #0]
 800b43a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b43e:	bf18      	it	ne
 800b440:	b236      	sxthne	r6, r6
 800b442:	e7ef      	b.n	800b424 <_printf_i+0xbc>
 800b444:	682b      	ldr	r3, [r5, #0]
 800b446:	6820      	ldr	r0, [r4, #0]
 800b448:	1d19      	adds	r1, r3, #4
 800b44a:	6029      	str	r1, [r5, #0]
 800b44c:	0601      	lsls	r1, r0, #24
 800b44e:	d501      	bpl.n	800b454 <_printf_i+0xec>
 800b450:	681e      	ldr	r6, [r3, #0]
 800b452:	e002      	b.n	800b45a <_printf_i+0xf2>
 800b454:	0646      	lsls	r6, r0, #25
 800b456:	d5fb      	bpl.n	800b450 <_printf_i+0xe8>
 800b458:	881e      	ldrh	r6, [r3, #0]
 800b45a:	4854      	ldr	r0, [pc, #336]	; (800b5ac <_printf_i+0x244>)
 800b45c:	2f6f      	cmp	r7, #111	; 0x6f
 800b45e:	bf0c      	ite	eq
 800b460:	2308      	moveq	r3, #8
 800b462:	230a      	movne	r3, #10
 800b464:	2100      	movs	r1, #0
 800b466:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b46a:	6865      	ldr	r5, [r4, #4]
 800b46c:	60a5      	str	r5, [r4, #8]
 800b46e:	2d00      	cmp	r5, #0
 800b470:	bfa2      	ittt	ge
 800b472:	6821      	ldrge	r1, [r4, #0]
 800b474:	f021 0104 	bicge.w	r1, r1, #4
 800b478:	6021      	strge	r1, [r4, #0]
 800b47a:	b90e      	cbnz	r6, 800b480 <_printf_i+0x118>
 800b47c:	2d00      	cmp	r5, #0
 800b47e:	d04d      	beq.n	800b51c <_printf_i+0x1b4>
 800b480:	4615      	mov	r5, r2
 800b482:	fbb6 f1f3 	udiv	r1, r6, r3
 800b486:	fb03 6711 	mls	r7, r3, r1, r6
 800b48a:	5dc7      	ldrb	r7, [r0, r7]
 800b48c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b490:	4637      	mov	r7, r6
 800b492:	42bb      	cmp	r3, r7
 800b494:	460e      	mov	r6, r1
 800b496:	d9f4      	bls.n	800b482 <_printf_i+0x11a>
 800b498:	2b08      	cmp	r3, #8
 800b49a:	d10b      	bne.n	800b4b4 <_printf_i+0x14c>
 800b49c:	6823      	ldr	r3, [r4, #0]
 800b49e:	07de      	lsls	r6, r3, #31
 800b4a0:	d508      	bpl.n	800b4b4 <_printf_i+0x14c>
 800b4a2:	6923      	ldr	r3, [r4, #16]
 800b4a4:	6861      	ldr	r1, [r4, #4]
 800b4a6:	4299      	cmp	r1, r3
 800b4a8:	bfde      	ittt	le
 800b4aa:	2330      	movle	r3, #48	; 0x30
 800b4ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b4b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b4b4:	1b52      	subs	r2, r2, r5
 800b4b6:	6122      	str	r2, [r4, #16]
 800b4b8:	f8cd a000 	str.w	sl, [sp]
 800b4bc:	464b      	mov	r3, r9
 800b4be:	aa03      	add	r2, sp, #12
 800b4c0:	4621      	mov	r1, r4
 800b4c2:	4640      	mov	r0, r8
 800b4c4:	f7ff fee2 	bl	800b28c <_printf_common>
 800b4c8:	3001      	adds	r0, #1
 800b4ca:	d14c      	bne.n	800b566 <_printf_i+0x1fe>
 800b4cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b4d0:	b004      	add	sp, #16
 800b4d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4d6:	4835      	ldr	r0, [pc, #212]	; (800b5ac <_printf_i+0x244>)
 800b4d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b4dc:	6829      	ldr	r1, [r5, #0]
 800b4de:	6823      	ldr	r3, [r4, #0]
 800b4e0:	f851 6b04 	ldr.w	r6, [r1], #4
 800b4e4:	6029      	str	r1, [r5, #0]
 800b4e6:	061d      	lsls	r5, r3, #24
 800b4e8:	d514      	bpl.n	800b514 <_printf_i+0x1ac>
 800b4ea:	07df      	lsls	r7, r3, #31
 800b4ec:	bf44      	itt	mi
 800b4ee:	f043 0320 	orrmi.w	r3, r3, #32
 800b4f2:	6023      	strmi	r3, [r4, #0]
 800b4f4:	b91e      	cbnz	r6, 800b4fe <_printf_i+0x196>
 800b4f6:	6823      	ldr	r3, [r4, #0]
 800b4f8:	f023 0320 	bic.w	r3, r3, #32
 800b4fc:	6023      	str	r3, [r4, #0]
 800b4fe:	2310      	movs	r3, #16
 800b500:	e7b0      	b.n	800b464 <_printf_i+0xfc>
 800b502:	6823      	ldr	r3, [r4, #0]
 800b504:	f043 0320 	orr.w	r3, r3, #32
 800b508:	6023      	str	r3, [r4, #0]
 800b50a:	2378      	movs	r3, #120	; 0x78
 800b50c:	4828      	ldr	r0, [pc, #160]	; (800b5b0 <_printf_i+0x248>)
 800b50e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b512:	e7e3      	b.n	800b4dc <_printf_i+0x174>
 800b514:	0659      	lsls	r1, r3, #25
 800b516:	bf48      	it	mi
 800b518:	b2b6      	uxthmi	r6, r6
 800b51a:	e7e6      	b.n	800b4ea <_printf_i+0x182>
 800b51c:	4615      	mov	r5, r2
 800b51e:	e7bb      	b.n	800b498 <_printf_i+0x130>
 800b520:	682b      	ldr	r3, [r5, #0]
 800b522:	6826      	ldr	r6, [r4, #0]
 800b524:	6961      	ldr	r1, [r4, #20]
 800b526:	1d18      	adds	r0, r3, #4
 800b528:	6028      	str	r0, [r5, #0]
 800b52a:	0635      	lsls	r5, r6, #24
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	d501      	bpl.n	800b534 <_printf_i+0x1cc>
 800b530:	6019      	str	r1, [r3, #0]
 800b532:	e002      	b.n	800b53a <_printf_i+0x1d2>
 800b534:	0670      	lsls	r0, r6, #25
 800b536:	d5fb      	bpl.n	800b530 <_printf_i+0x1c8>
 800b538:	8019      	strh	r1, [r3, #0]
 800b53a:	2300      	movs	r3, #0
 800b53c:	6123      	str	r3, [r4, #16]
 800b53e:	4615      	mov	r5, r2
 800b540:	e7ba      	b.n	800b4b8 <_printf_i+0x150>
 800b542:	682b      	ldr	r3, [r5, #0]
 800b544:	1d1a      	adds	r2, r3, #4
 800b546:	602a      	str	r2, [r5, #0]
 800b548:	681d      	ldr	r5, [r3, #0]
 800b54a:	6862      	ldr	r2, [r4, #4]
 800b54c:	2100      	movs	r1, #0
 800b54e:	4628      	mov	r0, r5
 800b550:	f7f4 fec6 	bl	80002e0 <memchr>
 800b554:	b108      	cbz	r0, 800b55a <_printf_i+0x1f2>
 800b556:	1b40      	subs	r0, r0, r5
 800b558:	6060      	str	r0, [r4, #4]
 800b55a:	6863      	ldr	r3, [r4, #4]
 800b55c:	6123      	str	r3, [r4, #16]
 800b55e:	2300      	movs	r3, #0
 800b560:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b564:	e7a8      	b.n	800b4b8 <_printf_i+0x150>
 800b566:	6923      	ldr	r3, [r4, #16]
 800b568:	462a      	mov	r2, r5
 800b56a:	4649      	mov	r1, r9
 800b56c:	4640      	mov	r0, r8
 800b56e:	47d0      	blx	sl
 800b570:	3001      	adds	r0, #1
 800b572:	d0ab      	beq.n	800b4cc <_printf_i+0x164>
 800b574:	6823      	ldr	r3, [r4, #0]
 800b576:	079b      	lsls	r3, r3, #30
 800b578:	d413      	bmi.n	800b5a2 <_printf_i+0x23a>
 800b57a:	68e0      	ldr	r0, [r4, #12]
 800b57c:	9b03      	ldr	r3, [sp, #12]
 800b57e:	4298      	cmp	r0, r3
 800b580:	bfb8      	it	lt
 800b582:	4618      	movlt	r0, r3
 800b584:	e7a4      	b.n	800b4d0 <_printf_i+0x168>
 800b586:	2301      	movs	r3, #1
 800b588:	4632      	mov	r2, r6
 800b58a:	4649      	mov	r1, r9
 800b58c:	4640      	mov	r0, r8
 800b58e:	47d0      	blx	sl
 800b590:	3001      	adds	r0, #1
 800b592:	d09b      	beq.n	800b4cc <_printf_i+0x164>
 800b594:	3501      	adds	r5, #1
 800b596:	68e3      	ldr	r3, [r4, #12]
 800b598:	9903      	ldr	r1, [sp, #12]
 800b59a:	1a5b      	subs	r3, r3, r1
 800b59c:	42ab      	cmp	r3, r5
 800b59e:	dcf2      	bgt.n	800b586 <_printf_i+0x21e>
 800b5a0:	e7eb      	b.n	800b57a <_printf_i+0x212>
 800b5a2:	2500      	movs	r5, #0
 800b5a4:	f104 0619 	add.w	r6, r4, #25
 800b5a8:	e7f5      	b.n	800b596 <_printf_i+0x22e>
 800b5aa:	bf00      	nop
 800b5ac:	0800b9f9 	.word	0x0800b9f9
 800b5b0:	0800ba0a 	.word	0x0800ba0a

0800b5b4 <_read_r>:
 800b5b4:	b538      	push	{r3, r4, r5, lr}
 800b5b6:	4d07      	ldr	r5, [pc, #28]	; (800b5d4 <_read_r+0x20>)
 800b5b8:	4604      	mov	r4, r0
 800b5ba:	4608      	mov	r0, r1
 800b5bc:	4611      	mov	r1, r2
 800b5be:	2200      	movs	r2, #0
 800b5c0:	602a      	str	r2, [r5, #0]
 800b5c2:	461a      	mov	r2, r3
 800b5c4:	f7f5 ffaa 	bl	800151c <_read>
 800b5c8:	1c43      	adds	r3, r0, #1
 800b5ca:	d102      	bne.n	800b5d2 <_read_r+0x1e>
 800b5cc:	682b      	ldr	r3, [r5, #0]
 800b5ce:	b103      	cbz	r3, 800b5d2 <_read_r+0x1e>
 800b5d0:	6023      	str	r3, [r4, #0]
 800b5d2:	bd38      	pop	{r3, r4, r5, pc}
 800b5d4:	24004d0c 	.word	0x24004d0c

0800b5d8 <__swbuf_r>:
 800b5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5da:	460e      	mov	r6, r1
 800b5dc:	4614      	mov	r4, r2
 800b5de:	4605      	mov	r5, r0
 800b5e0:	b118      	cbz	r0, 800b5ea <__swbuf_r+0x12>
 800b5e2:	6983      	ldr	r3, [r0, #24]
 800b5e4:	b90b      	cbnz	r3, 800b5ea <__swbuf_r+0x12>
 800b5e6:	f7ff f963 	bl	800a8b0 <__sinit>
 800b5ea:	4b21      	ldr	r3, [pc, #132]	; (800b670 <__swbuf_r+0x98>)
 800b5ec:	429c      	cmp	r4, r3
 800b5ee:	d12b      	bne.n	800b648 <__swbuf_r+0x70>
 800b5f0:	686c      	ldr	r4, [r5, #4]
 800b5f2:	69a3      	ldr	r3, [r4, #24]
 800b5f4:	60a3      	str	r3, [r4, #8]
 800b5f6:	89a3      	ldrh	r3, [r4, #12]
 800b5f8:	071a      	lsls	r2, r3, #28
 800b5fa:	d52f      	bpl.n	800b65c <__swbuf_r+0x84>
 800b5fc:	6923      	ldr	r3, [r4, #16]
 800b5fe:	b36b      	cbz	r3, 800b65c <__swbuf_r+0x84>
 800b600:	6923      	ldr	r3, [r4, #16]
 800b602:	6820      	ldr	r0, [r4, #0]
 800b604:	1ac0      	subs	r0, r0, r3
 800b606:	6963      	ldr	r3, [r4, #20]
 800b608:	b2f6      	uxtb	r6, r6
 800b60a:	4283      	cmp	r3, r0
 800b60c:	4637      	mov	r7, r6
 800b60e:	dc04      	bgt.n	800b61a <__swbuf_r+0x42>
 800b610:	4621      	mov	r1, r4
 800b612:	4628      	mov	r0, r5
 800b614:	f7ff fc3a 	bl	800ae8c <_fflush_r>
 800b618:	bb30      	cbnz	r0, 800b668 <__swbuf_r+0x90>
 800b61a:	68a3      	ldr	r3, [r4, #8]
 800b61c:	3b01      	subs	r3, #1
 800b61e:	60a3      	str	r3, [r4, #8]
 800b620:	6823      	ldr	r3, [r4, #0]
 800b622:	1c5a      	adds	r2, r3, #1
 800b624:	6022      	str	r2, [r4, #0]
 800b626:	701e      	strb	r6, [r3, #0]
 800b628:	6963      	ldr	r3, [r4, #20]
 800b62a:	3001      	adds	r0, #1
 800b62c:	4283      	cmp	r3, r0
 800b62e:	d004      	beq.n	800b63a <__swbuf_r+0x62>
 800b630:	89a3      	ldrh	r3, [r4, #12]
 800b632:	07db      	lsls	r3, r3, #31
 800b634:	d506      	bpl.n	800b644 <__swbuf_r+0x6c>
 800b636:	2e0a      	cmp	r6, #10
 800b638:	d104      	bne.n	800b644 <__swbuf_r+0x6c>
 800b63a:	4621      	mov	r1, r4
 800b63c:	4628      	mov	r0, r5
 800b63e:	f7ff fc25 	bl	800ae8c <_fflush_r>
 800b642:	b988      	cbnz	r0, 800b668 <__swbuf_r+0x90>
 800b644:	4638      	mov	r0, r7
 800b646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b648:	4b0a      	ldr	r3, [pc, #40]	; (800b674 <__swbuf_r+0x9c>)
 800b64a:	429c      	cmp	r4, r3
 800b64c:	d101      	bne.n	800b652 <__swbuf_r+0x7a>
 800b64e:	68ac      	ldr	r4, [r5, #8]
 800b650:	e7cf      	b.n	800b5f2 <__swbuf_r+0x1a>
 800b652:	4b09      	ldr	r3, [pc, #36]	; (800b678 <__swbuf_r+0xa0>)
 800b654:	429c      	cmp	r4, r3
 800b656:	bf08      	it	eq
 800b658:	68ec      	ldreq	r4, [r5, #12]
 800b65a:	e7ca      	b.n	800b5f2 <__swbuf_r+0x1a>
 800b65c:	4621      	mov	r1, r4
 800b65e:	4628      	mov	r0, r5
 800b660:	f000 f80c 	bl	800b67c <__swsetup_r>
 800b664:	2800      	cmp	r0, #0
 800b666:	d0cb      	beq.n	800b600 <__swbuf_r+0x28>
 800b668:	f04f 37ff 	mov.w	r7, #4294967295
 800b66c:	e7ea      	b.n	800b644 <__swbuf_r+0x6c>
 800b66e:	bf00      	nop
 800b670:	0800b9a4 	.word	0x0800b9a4
 800b674:	0800b9c4 	.word	0x0800b9c4
 800b678:	0800b984 	.word	0x0800b984

0800b67c <__swsetup_r>:
 800b67c:	4b32      	ldr	r3, [pc, #200]	; (800b748 <__swsetup_r+0xcc>)
 800b67e:	b570      	push	{r4, r5, r6, lr}
 800b680:	681d      	ldr	r5, [r3, #0]
 800b682:	4606      	mov	r6, r0
 800b684:	460c      	mov	r4, r1
 800b686:	b125      	cbz	r5, 800b692 <__swsetup_r+0x16>
 800b688:	69ab      	ldr	r3, [r5, #24]
 800b68a:	b913      	cbnz	r3, 800b692 <__swsetup_r+0x16>
 800b68c:	4628      	mov	r0, r5
 800b68e:	f7ff f90f 	bl	800a8b0 <__sinit>
 800b692:	4b2e      	ldr	r3, [pc, #184]	; (800b74c <__swsetup_r+0xd0>)
 800b694:	429c      	cmp	r4, r3
 800b696:	d10f      	bne.n	800b6b8 <__swsetup_r+0x3c>
 800b698:	686c      	ldr	r4, [r5, #4]
 800b69a:	89a3      	ldrh	r3, [r4, #12]
 800b69c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b6a0:	0719      	lsls	r1, r3, #28
 800b6a2:	d42c      	bmi.n	800b6fe <__swsetup_r+0x82>
 800b6a4:	06dd      	lsls	r5, r3, #27
 800b6a6:	d411      	bmi.n	800b6cc <__swsetup_r+0x50>
 800b6a8:	2309      	movs	r3, #9
 800b6aa:	6033      	str	r3, [r6, #0]
 800b6ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b6b0:	81a3      	strh	r3, [r4, #12]
 800b6b2:	f04f 30ff 	mov.w	r0, #4294967295
 800b6b6:	e03e      	b.n	800b736 <__swsetup_r+0xba>
 800b6b8:	4b25      	ldr	r3, [pc, #148]	; (800b750 <__swsetup_r+0xd4>)
 800b6ba:	429c      	cmp	r4, r3
 800b6bc:	d101      	bne.n	800b6c2 <__swsetup_r+0x46>
 800b6be:	68ac      	ldr	r4, [r5, #8]
 800b6c0:	e7eb      	b.n	800b69a <__swsetup_r+0x1e>
 800b6c2:	4b24      	ldr	r3, [pc, #144]	; (800b754 <__swsetup_r+0xd8>)
 800b6c4:	429c      	cmp	r4, r3
 800b6c6:	bf08      	it	eq
 800b6c8:	68ec      	ldreq	r4, [r5, #12]
 800b6ca:	e7e6      	b.n	800b69a <__swsetup_r+0x1e>
 800b6cc:	0758      	lsls	r0, r3, #29
 800b6ce:	d512      	bpl.n	800b6f6 <__swsetup_r+0x7a>
 800b6d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6d2:	b141      	cbz	r1, 800b6e6 <__swsetup_r+0x6a>
 800b6d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6d8:	4299      	cmp	r1, r3
 800b6da:	d002      	beq.n	800b6e2 <__swsetup_r+0x66>
 800b6dc:	4630      	mov	r0, r6
 800b6de:	f7ff fc2f 	bl	800af40 <_free_r>
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	6363      	str	r3, [r4, #52]	; 0x34
 800b6e6:	89a3      	ldrh	r3, [r4, #12]
 800b6e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b6ec:	81a3      	strh	r3, [r4, #12]
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	6063      	str	r3, [r4, #4]
 800b6f2:	6923      	ldr	r3, [r4, #16]
 800b6f4:	6023      	str	r3, [r4, #0]
 800b6f6:	89a3      	ldrh	r3, [r4, #12]
 800b6f8:	f043 0308 	orr.w	r3, r3, #8
 800b6fc:	81a3      	strh	r3, [r4, #12]
 800b6fe:	6923      	ldr	r3, [r4, #16]
 800b700:	b94b      	cbnz	r3, 800b716 <__swsetup_r+0x9a>
 800b702:	89a3      	ldrh	r3, [r4, #12]
 800b704:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b70c:	d003      	beq.n	800b716 <__swsetup_r+0x9a>
 800b70e:	4621      	mov	r1, r4
 800b710:	4630      	mov	r0, r6
 800b712:	f000 f847 	bl	800b7a4 <__smakebuf_r>
 800b716:	89a0      	ldrh	r0, [r4, #12]
 800b718:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b71c:	f010 0301 	ands.w	r3, r0, #1
 800b720:	d00a      	beq.n	800b738 <__swsetup_r+0xbc>
 800b722:	2300      	movs	r3, #0
 800b724:	60a3      	str	r3, [r4, #8]
 800b726:	6963      	ldr	r3, [r4, #20]
 800b728:	425b      	negs	r3, r3
 800b72a:	61a3      	str	r3, [r4, #24]
 800b72c:	6923      	ldr	r3, [r4, #16]
 800b72e:	b943      	cbnz	r3, 800b742 <__swsetup_r+0xc6>
 800b730:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b734:	d1ba      	bne.n	800b6ac <__swsetup_r+0x30>
 800b736:	bd70      	pop	{r4, r5, r6, pc}
 800b738:	0781      	lsls	r1, r0, #30
 800b73a:	bf58      	it	pl
 800b73c:	6963      	ldrpl	r3, [r4, #20]
 800b73e:	60a3      	str	r3, [r4, #8]
 800b740:	e7f4      	b.n	800b72c <__swsetup_r+0xb0>
 800b742:	2000      	movs	r0, #0
 800b744:	e7f7      	b.n	800b736 <__swsetup_r+0xba>
 800b746:	bf00      	nop
 800b748:	24000014 	.word	0x24000014
 800b74c:	0800b9a4 	.word	0x0800b9a4
 800b750:	0800b9c4 	.word	0x0800b9c4
 800b754:	0800b984 	.word	0x0800b984

0800b758 <__swhatbuf_r>:
 800b758:	b570      	push	{r4, r5, r6, lr}
 800b75a:	460e      	mov	r6, r1
 800b75c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b760:	2900      	cmp	r1, #0
 800b762:	b096      	sub	sp, #88	; 0x58
 800b764:	4614      	mov	r4, r2
 800b766:	461d      	mov	r5, r3
 800b768:	da08      	bge.n	800b77c <__swhatbuf_r+0x24>
 800b76a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b76e:	2200      	movs	r2, #0
 800b770:	602a      	str	r2, [r5, #0]
 800b772:	061a      	lsls	r2, r3, #24
 800b774:	d410      	bmi.n	800b798 <__swhatbuf_r+0x40>
 800b776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b77a:	e00e      	b.n	800b79a <__swhatbuf_r+0x42>
 800b77c:	466a      	mov	r2, sp
 800b77e:	f000 f851 	bl	800b824 <_fstat_r>
 800b782:	2800      	cmp	r0, #0
 800b784:	dbf1      	blt.n	800b76a <__swhatbuf_r+0x12>
 800b786:	9a01      	ldr	r2, [sp, #4]
 800b788:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b78c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b790:	425a      	negs	r2, r3
 800b792:	415a      	adcs	r2, r3
 800b794:	602a      	str	r2, [r5, #0]
 800b796:	e7ee      	b.n	800b776 <__swhatbuf_r+0x1e>
 800b798:	2340      	movs	r3, #64	; 0x40
 800b79a:	2000      	movs	r0, #0
 800b79c:	6023      	str	r3, [r4, #0]
 800b79e:	b016      	add	sp, #88	; 0x58
 800b7a0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b7a4 <__smakebuf_r>:
 800b7a4:	898b      	ldrh	r3, [r1, #12]
 800b7a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b7a8:	079d      	lsls	r5, r3, #30
 800b7aa:	4606      	mov	r6, r0
 800b7ac:	460c      	mov	r4, r1
 800b7ae:	d507      	bpl.n	800b7c0 <__smakebuf_r+0x1c>
 800b7b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b7b4:	6023      	str	r3, [r4, #0]
 800b7b6:	6123      	str	r3, [r4, #16]
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	6163      	str	r3, [r4, #20]
 800b7bc:	b002      	add	sp, #8
 800b7be:	bd70      	pop	{r4, r5, r6, pc}
 800b7c0:	ab01      	add	r3, sp, #4
 800b7c2:	466a      	mov	r2, sp
 800b7c4:	f7ff ffc8 	bl	800b758 <__swhatbuf_r>
 800b7c8:	9900      	ldr	r1, [sp, #0]
 800b7ca:	4605      	mov	r5, r0
 800b7cc:	4630      	mov	r0, r6
 800b7ce:	f7ff f96b 	bl	800aaa8 <_malloc_r>
 800b7d2:	b948      	cbnz	r0, 800b7e8 <__smakebuf_r+0x44>
 800b7d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7d8:	059a      	lsls	r2, r3, #22
 800b7da:	d4ef      	bmi.n	800b7bc <__smakebuf_r+0x18>
 800b7dc:	f023 0303 	bic.w	r3, r3, #3
 800b7e0:	f043 0302 	orr.w	r3, r3, #2
 800b7e4:	81a3      	strh	r3, [r4, #12]
 800b7e6:	e7e3      	b.n	800b7b0 <__smakebuf_r+0xc>
 800b7e8:	4b0d      	ldr	r3, [pc, #52]	; (800b820 <__smakebuf_r+0x7c>)
 800b7ea:	62b3      	str	r3, [r6, #40]	; 0x28
 800b7ec:	89a3      	ldrh	r3, [r4, #12]
 800b7ee:	6020      	str	r0, [r4, #0]
 800b7f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7f4:	81a3      	strh	r3, [r4, #12]
 800b7f6:	9b00      	ldr	r3, [sp, #0]
 800b7f8:	6163      	str	r3, [r4, #20]
 800b7fa:	9b01      	ldr	r3, [sp, #4]
 800b7fc:	6120      	str	r0, [r4, #16]
 800b7fe:	b15b      	cbz	r3, 800b818 <__smakebuf_r+0x74>
 800b800:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b804:	4630      	mov	r0, r6
 800b806:	f000 f81f 	bl	800b848 <_isatty_r>
 800b80a:	b128      	cbz	r0, 800b818 <__smakebuf_r+0x74>
 800b80c:	89a3      	ldrh	r3, [r4, #12]
 800b80e:	f023 0303 	bic.w	r3, r3, #3
 800b812:	f043 0301 	orr.w	r3, r3, #1
 800b816:	81a3      	strh	r3, [r4, #12]
 800b818:	89a0      	ldrh	r0, [r4, #12]
 800b81a:	4305      	orrs	r5, r0
 800b81c:	81a5      	strh	r5, [r4, #12]
 800b81e:	e7cd      	b.n	800b7bc <__smakebuf_r+0x18>
 800b820:	0800a849 	.word	0x0800a849

0800b824 <_fstat_r>:
 800b824:	b538      	push	{r3, r4, r5, lr}
 800b826:	4d07      	ldr	r5, [pc, #28]	; (800b844 <_fstat_r+0x20>)
 800b828:	2300      	movs	r3, #0
 800b82a:	4604      	mov	r4, r0
 800b82c:	4608      	mov	r0, r1
 800b82e:	4611      	mov	r1, r2
 800b830:	602b      	str	r3, [r5, #0]
 800b832:	f7f5 feb8 	bl	80015a6 <_fstat>
 800b836:	1c43      	adds	r3, r0, #1
 800b838:	d102      	bne.n	800b840 <_fstat_r+0x1c>
 800b83a:	682b      	ldr	r3, [r5, #0]
 800b83c:	b103      	cbz	r3, 800b840 <_fstat_r+0x1c>
 800b83e:	6023      	str	r3, [r4, #0]
 800b840:	bd38      	pop	{r3, r4, r5, pc}
 800b842:	bf00      	nop
 800b844:	24004d0c 	.word	0x24004d0c

0800b848 <_isatty_r>:
 800b848:	b538      	push	{r3, r4, r5, lr}
 800b84a:	4d06      	ldr	r5, [pc, #24]	; (800b864 <_isatty_r+0x1c>)
 800b84c:	2300      	movs	r3, #0
 800b84e:	4604      	mov	r4, r0
 800b850:	4608      	mov	r0, r1
 800b852:	602b      	str	r3, [r5, #0]
 800b854:	f7f5 feb7 	bl	80015c6 <_isatty>
 800b858:	1c43      	adds	r3, r0, #1
 800b85a:	d102      	bne.n	800b862 <_isatty_r+0x1a>
 800b85c:	682b      	ldr	r3, [r5, #0]
 800b85e:	b103      	cbz	r3, 800b862 <_isatty_r+0x1a>
 800b860:	6023      	str	r3, [r4, #0]
 800b862:	bd38      	pop	{r3, r4, r5, pc}
 800b864:	24004d0c 	.word	0x24004d0c

0800b868 <_init>:
 800b868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b86a:	bf00      	nop
 800b86c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b86e:	bc08      	pop	{r3}
 800b870:	469e      	mov	lr, r3
 800b872:	4770      	bx	lr

0800b874 <_fini>:
 800b874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b876:	bf00      	nop
 800b878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b87a:	bc08      	pop	{r3}
 800b87c:	469e      	mov	lr, r3
 800b87e:	4770      	bx	lr
