
tractorDeere_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c85c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b8  0800cafc  0800cafc  0001cafc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d1b4  0800d1b4  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800d1b4  0800d1b4  0001d1b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d1bc  0800d1bc  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d1bc  0800d1bc  0001d1bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d1c0  0800d1c0  0001d1c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  24000000  0800d1c4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e78  24000080  0800d244  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24004ef8  0800d244  00024ef8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b0b3  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004810  00000000  00000000  0004b161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002080  00000000  00000000  0004f978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ed8  00000000  00000000  000519f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ee33  00000000  00000000  000538d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024d3b  00000000  00000000  00092703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019f7ad  00000000  00000000  000b743e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00256beb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009508  00000000  00000000  00256c3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000080 	.word	0x24000080
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800cae4 	.word	0x0800cae4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000084 	.word	0x24000084
 80002dc:	0800cae4 	.word	0x0800cae4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <NRF24_DelayMicroSeconds+0x3c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a0b      	ldr	r2, [pc, #44]	; (8000800 <NRF24_DelayMicroSeconds+0x40>)
 80007d2:	fba2 2303 	umull	r2, r3, r2, r3
 80007d6:	0c9a      	lsrs	r2, r3, #18
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	fb02 f303 	mul.w	r3, r2, r3
 80007de:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80007e0:	bf00      	nop
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	1e5a      	subs	r2, r3, #1
 80007e6:	60fa      	str	r2, [r7, #12]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1fa      	bne.n	80007e2 <NRF24_DelayMicroSeconds+0x22>
}
 80007ec:	bf00      	nop
 80007ee:	bf00      	nop
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	24000000 	.word	0x24000000
 8000800:	165e9f81 	.word	0x165e9f81

08000804 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d008      	beq.n	8000824 <NRF24_csn+0x20>
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <NRF24_csn+0x38>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <NRF24_csn+0x3c>)
 8000818:	8811      	ldrh	r1, [r2, #0]
 800081a:	2201      	movs	r2, #1
 800081c:	4618      	mov	r0, r3
 800081e:	f002 fe1f 	bl	8003460 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000822:	e007      	b.n	8000834 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <NRF24_csn+0x38>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a05      	ldr	r2, [pc, #20]	; (8000840 <NRF24_csn+0x3c>)
 800082a:	8811      	ldrh	r1, [r2, #0]
 800082c:	2200      	movs	r2, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f002 fe16 	bl	8003460 <HAL_GPIO_WritePin>
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	240000ac 	.word	0x240000ac
 8000840:	240000b0 	.word	0x240000b0

08000844 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d008      	beq.n	8000864 <NRF24_ce+0x20>
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <NRF24_ce+0x38>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <NRF24_ce+0x3c>)
 8000858:	8811      	ldrh	r1, [r2, #0]
 800085a:	2201      	movs	r2, #1
 800085c:	4618      	mov	r0, r3
 800085e:	f002 fdff 	bl	8003460 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000862:	e007      	b.n	8000874 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <NRF24_ce+0x38>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a05      	ldr	r2, [pc, #20]	; (8000880 <NRF24_ce+0x3c>)
 800086a:	8811      	ldrh	r1, [r2, #0]
 800086c:	2200      	movs	r2, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f002 fdf6 	bl	8003460 <HAL_GPIO_WritePin>
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	240000ac 	.word	0x240000ac
 8000880:	240000b2 	.word	0x240000b2

08000884 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff ffb8 	bl	8000804 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	f003 031f 	and.w	r3, r3, #31
 800089a:	b2db      	uxtb	r3, r3
 800089c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800089e:	f107 010c 	add.w	r1, r7, #12
 80008a2:	2364      	movs	r3, #100	; 0x64
 80008a4:	2201      	movs	r2, #1
 80008a6:	480a      	ldr	r0, [pc, #40]	; (80008d0 <NRF24_read_register+0x4c>)
 80008a8:	f005 fae6 	bl	8005e78 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	1c59      	adds	r1, r3, #1
 80008b2:	2364      	movs	r3, #100	; 0x64
 80008b4:	2201      	movs	r2, #1
 80008b6:	4806      	ldr	r0, [pc, #24]	; (80008d0 <NRF24_read_register+0x4c>)
 80008b8:	f005 fcd0 	bl	800625c <HAL_SPI_Receive>
	retData = spiBuf[1];
 80008bc:	7b7b      	ldrb	r3, [r7, #13]
 80008be:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 80008c0:	2001      	movs	r0, #1
 80008c2:	f7ff ff9f 	bl	8000804 <NRF24_csn>
	return retData;
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	240000b4 	.word	0x240000b4

080008d4 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	6039      	str	r1, [r7, #0]
 80008de:	71fb      	strb	r3, [r7, #7]
 80008e0:	4613      	mov	r3, r2
 80008e2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80008e4:	2000      	movs	r0, #0
 80008e6:	f7ff ff8d 	bl	8000804 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	f003 031f 	and.w	r3, r3, #31
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80008f4:	f107 010c 	add.w	r1, r7, #12
 80008f8:	2364      	movs	r3, #100	; 0x64
 80008fa:	2201      	movs	r2, #1
 80008fc:	4808      	ldr	r0, [pc, #32]	; (8000920 <NRF24_read_registerN+0x4c>)
 80008fe:	f005 fabb 	bl	8005e78 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000902:	79bb      	ldrb	r3, [r7, #6]
 8000904:	b29a      	uxth	r2, r3
 8000906:	2364      	movs	r3, #100	; 0x64
 8000908:	6839      	ldr	r1, [r7, #0]
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <NRF24_read_registerN+0x4c>)
 800090c:	f005 fca6 	bl	800625c <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000910:	2001      	movs	r0, #1
 8000912:	f7ff ff77 	bl	8000804 <NRF24_csn>
}
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	240000b4 	.word	0x240000b4

08000924 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	460a      	mov	r2, r1
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	4613      	mov	r3, r2
 8000932:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000934:	2000      	movs	r0, #0
 8000936:	f7ff ff65 	bl	8000804 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	f043 0320 	orr.w	r3, r3, #32
 8000940:	b2db      	uxtb	r3, r3
 8000942:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000944:	79bb      	ldrb	r3, [r7, #6]
 8000946:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000948:	f107 010c 	add.w	r1, r7, #12
 800094c:	2364      	movs	r3, #100	; 0x64
 800094e:	2202      	movs	r2, #2
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <NRF24_write_register+0x40>)
 8000952:	f005 fa91 	bl	8005e78 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000956:	2001      	movs	r0, #1
 8000958:	f7ff ff54 	bl	8000804 <NRF24_csn>
}
 800095c:	bf00      	nop
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	240000b4 	.word	0x240000b4

08000968 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	6039      	str	r1, [r7, #0]
 8000972:	71fb      	strb	r3, [r7, #7]
 8000974:	4613      	mov	r3, r2
 8000976:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000978:	2000      	movs	r0, #0
 800097a:	f7ff ff43 	bl	8000804 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	f043 0320 	orr.w	r3, r3, #32
 8000984:	b2db      	uxtb	r3, r3
 8000986:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000988:	f107 010c 	add.w	r1, r7, #12
 800098c:	2364      	movs	r3, #100	; 0x64
 800098e:	2201      	movs	r2, #1
 8000990:	4808      	ldr	r0, [pc, #32]	; (80009b4 <NRF24_write_registerN+0x4c>)
 8000992:	f005 fa71 	bl	8005e78 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000996:	79bb      	ldrb	r3, [r7, #6]
 8000998:	b29a      	uxth	r2, r3
 800099a:	2364      	movs	r3, #100	; 0x64
 800099c:	6839      	ldr	r1, [r7, #0]
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <NRF24_write_registerN+0x4c>)
 80009a0:	f005 fa6a 	bl	8005e78 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80009a4:	2001      	movs	r0, #1
 80009a6:	f7ff ff2d 	bl	8000804 <NRF24_csn>
}
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	240000b4 	.word	0x240000b4

080009b8 <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	460b      	mov	r3, r1
 80009c2:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 80009c4:	f000 fa0a 	bl	8000ddc <NRF24_getPayloadSize>
 80009c8:	4603      	mov	r3, r0
 80009ca:	461a      	mov	r2, r3
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d303      	bcc.n	80009da <NRF24_read_payload+0x22>
 80009d2:	f000 fa03 	bl	8000ddc <NRF24_getPayloadSize>
 80009d6:	4603      	mov	r3, r0
 80009d8:	e000      	b.n	80009dc <NRF24_read_payload+0x24>
 80009da:	78fb      	ldrb	r3, [r7, #3]
 80009dc:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80009de:	2000      	movs	r0, #0
 80009e0:	f7ff ff10 	bl	8000804 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 80009e4:	2361      	movs	r3, #97	; 0x61
 80009e6:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 80009e8:	f107 010e 	add.w	r1, r7, #14
 80009ec:	2364      	movs	r3, #100	; 0x64
 80009ee:	2201      	movs	r2, #1
 80009f0:	4808      	ldr	r0, [pc, #32]	; (8000a14 <NRF24_read_payload+0x5c>)
 80009f2:	f005 fa41 	bl	8005e78 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	2364      	movs	r3, #100	; 0x64
 80009fc:	6879      	ldr	r1, [r7, #4]
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <NRF24_read_payload+0x5c>)
 8000a00:	f005 fc2c 	bl	800625c <HAL_SPI_Receive>
	NRF24_csn(1);
 8000a04:	2001      	movs	r0, #1
 8000a06:	f7ff fefd 	bl	8000804 <NRF24_csn>
}
 8000a0a:	bf00      	nop
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	240000b4 	.word	0x240000b4

08000a18 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000a1c:	21ff      	movs	r1, #255	; 0xff
 8000a1e:	20e1      	movs	r0, #225	; 0xe1
 8000a20:	f7ff ff80 	bl	8000924 <NRF24_write_register>
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000a2c:	21ff      	movs	r1, #255	; 0xff
 8000a2e:	20e2      	movs	r0, #226	; 0xe2
 8000a30:	f7ff ff78 	bl	8000924 <NRF24_write_register>
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8000a3e:	2007      	movs	r0, #7
 8000a40:	f7ff ff20 	bl	8000884 <NRF24_read_register>
 8000a44:	4603      	mov	r3, r0
 8000a46:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000a48:	79fb      	ldrb	r3, [r7, #7]
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000a54:	b082      	sub	sp, #8
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b084      	sub	sp, #16
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	61fb      	str	r3, [r7, #28]
 8000a60:	460b      	mov	r3, r1
 8000a62:	807b      	strh	r3, [r7, #2]
 8000a64:	4613      	mov	r3, r2
 8000a66:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000a68:	4b66      	ldr	r3, [pc, #408]	; (8000c04 <NRF24_begin+0x1b0>)
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	2288      	movs	r2, #136	; 0x88
 8000a72:	4619      	mov	r1, r3
 8000a74:	f00a ff51 	bl	800b91a <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000a78:	4a63      	ldr	r2, [pc, #396]	; (8000c08 <NRF24_begin+0x1b4>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000a7e:	4a63      	ldr	r2, [pc, #396]	; (8000c0c <NRF24_begin+0x1b8>)
 8000a80:	887b      	ldrh	r3, [r7, #2]
 8000a82:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000a84:	4a62      	ldr	r2, [pc, #392]	; (8000c10 <NRF24_begin+0x1bc>)
 8000a86:	883b      	ldrh	r3, [r7, #0]
 8000a88:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	f7ff feba 	bl	8000804 <NRF24_csn>
	NRF24_ce(0);
 8000a90:	2000      	movs	r0, #0
 8000a92:	f7ff fed7 	bl	8000844 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000a96:	2005      	movs	r0, #5
 8000a98:	f001 febe 	bl	8002818 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000a9c:	2108      	movs	r1, #8
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f7ff ff40 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000aa4:	213f      	movs	r1, #63	; 0x3f
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f7ff ff3c 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000aac:	2103      	movs	r1, #3
 8000aae:	2002      	movs	r0, #2
 8000ab0:	f7ff ff38 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000ab4:	2103      	movs	r1, #3
 8000ab6:	2003      	movs	r0, #3
 8000ab8:	f7ff ff34 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000abc:	2103      	movs	r1, #3
 8000abe:	2004      	movs	r0, #4
 8000ac0:	f7ff ff30 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000ac4:	2102      	movs	r1, #2
 8000ac6:	2005      	movs	r0, #5
 8000ac8:	f7ff ff2c 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000acc:	210f      	movs	r1, #15
 8000ace:	2006      	movs	r0, #6
 8000ad0:	f7ff ff28 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000ad4:	210e      	movs	r1, #14
 8000ad6:	2007      	movs	r0, #7
 8000ad8:	f7ff ff24 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000adc:	2100      	movs	r1, #0
 8000ade:	2008      	movs	r0, #8
 8000ae0:	f7ff ff20 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2009      	movs	r0, #9
 8000ae8:	f7ff ff1c 	bl	8000924 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000aec:	23e7      	movs	r3, #231	; 0xe7
 8000aee:	733b      	strb	r3, [r7, #12]
 8000af0:	23e7      	movs	r3, #231	; 0xe7
 8000af2:	72fb      	strb	r3, [r7, #11]
 8000af4:	23e7      	movs	r3, #231	; 0xe7
 8000af6:	72bb      	strb	r3, [r7, #10]
 8000af8:	23e7      	movs	r3, #231	; 0xe7
 8000afa:	727b      	strb	r3, [r7, #9]
 8000afc:	23e7      	movs	r3, #231	; 0xe7
 8000afe:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	2205      	movs	r2, #5
 8000b06:	4619      	mov	r1, r3
 8000b08:	200a      	movs	r0, #10
 8000b0a:	f7ff ff2d 	bl	8000968 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 8000b0e:	23c2      	movs	r3, #194	; 0xc2
 8000b10:	733b      	strb	r3, [r7, #12]
 8000b12:	23c2      	movs	r3, #194	; 0xc2
 8000b14:	72fb      	strb	r3, [r7, #11]
 8000b16:	23c2      	movs	r3, #194	; 0xc2
 8000b18:	72bb      	strb	r3, [r7, #10]
 8000b1a:	23c2      	movs	r3, #194	; 0xc2
 8000b1c:	727b      	strb	r3, [r7, #9]
 8000b1e:	23c2      	movs	r3, #194	; 0xc2
 8000b20:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000b22:	f107 0308 	add.w	r3, r7, #8
 8000b26:	2205      	movs	r2, #5
 8000b28:	4619      	mov	r1, r3
 8000b2a:	200b      	movs	r0, #11
 8000b2c:	f7ff ff1c 	bl	8000968 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000b30:	21c3      	movs	r1, #195	; 0xc3
 8000b32:	200c      	movs	r0, #12
 8000b34:	f7ff fef6 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000b38:	21c4      	movs	r1, #196	; 0xc4
 8000b3a:	200d      	movs	r0, #13
 8000b3c:	f7ff fef2 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000b40:	21c5      	movs	r1, #197	; 0xc5
 8000b42:	200e      	movs	r0, #14
 8000b44:	f7ff feee 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000b48:	21c6      	movs	r1, #198	; 0xc6
 8000b4a:	200f      	movs	r0, #15
 8000b4c:	f7ff feea 	bl	8000924 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000b50:	23e7      	movs	r3, #231	; 0xe7
 8000b52:	733b      	strb	r3, [r7, #12]
 8000b54:	23e7      	movs	r3, #231	; 0xe7
 8000b56:	72fb      	strb	r3, [r7, #11]
 8000b58:	23e7      	movs	r3, #231	; 0xe7
 8000b5a:	72bb      	strb	r3, [r7, #10]
 8000b5c:	23e7      	movs	r3, #231	; 0xe7
 8000b5e:	727b      	strb	r3, [r7, #9]
 8000b60:	23e7      	movs	r3, #231	; 0xe7
 8000b62:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000b64:	f107 0308 	add.w	r3, r7, #8
 8000b68:	2205      	movs	r2, #5
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	2010      	movs	r0, #16
 8000b6e:	f7ff fefb 	bl	8000968 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000b72:	2100      	movs	r1, #0
 8000b74:	2011      	movs	r0, #17
 8000b76:	f7ff fed5 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2012      	movs	r0, #18
 8000b7e:	f7ff fed1 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000b82:	2100      	movs	r1, #0
 8000b84:	2013      	movs	r0, #19
 8000b86:	f7ff fecd 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2014      	movs	r0, #20
 8000b8e:	f7ff fec9 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000b92:	2100      	movs	r1, #0
 8000b94:	2015      	movs	r0, #21
 8000b96:	f7ff fec5 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	2016      	movs	r0, #22
 8000b9e:	f7ff fec1 	bl	8000924 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8000ba2:	f000 fa7d 	bl	80010a0 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	201c      	movs	r0, #28
 8000baa:	f7ff febb 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000bae:	2100      	movs	r1, #0
 8000bb0:	201d      	movs	r0, #29
 8000bb2:	f7ff feb7 	bl	8000924 <NRF24_write_register>
	printRadioSettings();
 8000bb6:	f000 fa8d 	bl	80010d4 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000bba:	210f      	movs	r1, #15
 8000bbc:	200f      	movs	r0, #15
 8000bbe:	f000 f8c5 	bl	8000d4c <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000bc2:	2003      	movs	r0, #3
 8000bc4:	f000 f97d 	bl	8000ec2 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f000 f9b3 	bl	8000f34 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000bce:	2002      	movs	r0, #2
 8000bd0:	f000 f9f6 	bl	8000fc0 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000bd4:	f000 f948 	bl	8000e68 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000bd8:	2020      	movs	r0, #32
 8000bda:	f000 f8e7 	bl	8000dac <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 8000bde:	f000 fa56 	bl	800108e <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000be2:	204c      	movs	r0, #76	; 0x4c
 8000be4:	f000 f8cd 	bl	8000d82 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000be8:	f7ff ff16 	bl	8000a18 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000bec:	f7ff ff1c 	bl	8000a28 <NRF24_flush_rx>

	NRF24_powerDown();
 8000bf0:	f000 fa0e 	bl	8001010 <NRF24_powerDown>

}
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bfe:	b002      	add	sp, #8
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	240000b4 	.word	0x240000b4
 8000c08:	240000ac 	.word	0x240000ac
 8000c0c:	240000b0 	.word	0x240000b0
 8000c10:	240000b2 	.word	0x240000b2

08000c14 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f7ff fe33 	bl	8000884 <NRF24_read_register>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	f043 0303 	orr.w	r3, r3, #3
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	4619      	mov	r1, r3
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f7ff fe7b 	bl	8000924 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <NRF24_startListening+0x48>)
 8000c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	d004      	beq.n	8000c42 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8000c38:	2205      	movs	r2, #5
 8000c3a:	4908      	ldr	r1, [pc, #32]	; (8000c5c <NRF24_startListening+0x48>)
 8000c3c:	200a      	movs	r0, #10
 8000c3e:	f7ff fe93 	bl	8000968 <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 8000c42:	f7ff fee9 	bl	8000a18 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000c46:	f7ff feef 	bl	8000a28 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f7ff fdfa 	bl	8000844 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8000c50:	2096      	movs	r0, #150	; 0x96
 8000c52:	f7ff fdb5 	bl	80007c0 <NRF24_DelayMicroSeconds>
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	240000a0 	.word	0x240000a0

08000c60 <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000c64:	2000      	movs	r0, #0
 8000c66:	f000 f9e2 	bl	800102e <NRF24_availablePipe>
 8000c6a:	4603      	mov	r3, r0
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8000c7c:	78fb      	ldrb	r3, [r7, #3]
 8000c7e:	4619      	mov	r1, r3
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff fe99 	bl	80009b8 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8000c86:	2017      	movs	r0, #23
 8000c88:	f7ff fdfc 	bl	8000884 <NRF24_read_register>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8000c94:	f7ff fec8 	bl	8000a28 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8000c98:	f000 f8ac 	bl	8000df4 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	bf14      	ite	ne
 8000ca2:	2301      	movne	r3, #1
 8000ca4:	2300      	moveq	r3, #0
 8000ca6:	b2db      	uxtb	r3, r3
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4601      	mov	r1, r0
 8000cb8:	e9c7 2300 	strd	r2, r3, [r7]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d104      	bne.n	8000cd0 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8000cc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000cca:	491c      	ldr	r1, [pc, #112]	; (8000d3c <NRF24_openReadingPipe+0x8c>)
 8000ccc:	e9c1 2300 	strd	r2, r3, [r1]

	if(number <= 6)
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d82d      	bhi.n	8000d32 <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d808      	bhi.n	8000cee <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	4a18      	ldr	r2, [pc, #96]	; (8000d40 <NRF24_openReadingPipe+0x90>)
 8000ce0:	5cd3      	ldrb	r3, [r2, r3]
 8000ce2:	4639      	mov	r1, r7
 8000ce4:	2205      	movs	r2, #5
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fe3e 	bl	8000968 <NRF24_write_registerN>
 8000cec:	e007      	b.n	8000cfe <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
 8000cf0:	4a13      	ldr	r2, [pc, #76]	; (8000d40 <NRF24_openReadingPipe+0x90>)
 8000cf2:	5cd3      	ldrb	r3, [r2, r3]
 8000cf4:	4639      	mov	r1, r7
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fe35 	bl	8000968 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	4a10      	ldr	r2, [pc, #64]	; (8000d44 <NRF24_openReadingPipe+0x94>)
 8000d02:	5cd3      	ldrb	r3, [r2, r3]
 8000d04:	4a10      	ldr	r2, [pc, #64]	; (8000d48 <NRF24_openReadingPipe+0x98>)
 8000d06:	7812      	ldrb	r2, [r2, #0]
 8000d08:	4611      	mov	r1, r2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fe0a 	bl	8000924 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8000d10:	2002      	movs	r0, #2
 8000d12:	f7ff fdb7 	bl	8000884 <NRF24_read_register>
 8000d16:	4603      	mov	r3, r0
 8000d18:	b25a      	sxtb	r2, r3
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	b25b      	sxtb	r3, r3
 8000d24:	4313      	orrs	r3, r2
 8000d26:	b25b      	sxtb	r3, r3
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	2002      	movs	r0, #2
 8000d2e:	f7ff fdf9 	bl	8000924 <NRF24_write_register>
	}

}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	240000a0 	.word	0x240000a0
 8000d40:	0800d0c0 	.word	0x0800d0c0
 8000d44:	0800d0c8 	.word	0x0800d0c8
 8000d48:	240000a8 	.word	0x240000a8

08000d4c <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	460a      	mov	r2, r1
 8000d56:	71fb      	strb	r3, [r7, #7]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	011b      	lsls	r3, r3, #4
 8000d60:	b25a      	sxtb	r2, r3
 8000d62:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	b25b      	sxtb	r3, r3
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	4619      	mov	r1, r3
 8000d74:	2004      	movs	r0, #4
 8000d76:	f7ff fdd5 	bl	8000924 <NRF24_write_register>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b084      	sub	sp, #16
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000d8c:	237f      	movs	r3, #127	; 0x7f
 8000d8e:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000d90:	7bfa      	ldrb	r2, [r7, #15]
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	4293      	cmp	r3, r2
 8000d96:	bf28      	it	cs
 8000d98:	4613      	movcs	r3, r2
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	2005      	movs	r0, #5
 8000da0:	f7ff fdc0 	bl	8000924 <NRF24_write_register>
}
 8000da4:	bf00      	nop
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000db6:	2320      	movs	r3, #32
 8000db8:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000dba:	7bfa      	ldrb	r2, [r7, #15]
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	bf28      	it	cs
 8000dc2:	4613      	movcs	r3, r2
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <NRF24_setPayloadSize+0x2c>)
 8000dc8:	701a      	strb	r2, [r3, #0]
}
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	240000a8 	.word	0x240000a8

08000ddc <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
	return payload_size;
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <NRF24_getPayloadSize+0x14>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	240000a8 	.word	0x240000a8

08000df4 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000df8:	2060      	movs	r0, #96	; 0x60
 8000dfa:	f7ff fd43 	bl	8000884 <NRF24_read_register>
 8000dfe:	4603      	mov	r3, r0
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <NRF24_enableDynamicPayloads>:
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
}
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000e08:	201d      	movs	r0, #29
 8000e0a:	f7ff fd3b 	bl	8000884 <NRF24_read_register>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	f043 0304 	orr.w	r3, r3, #4
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	4619      	mov	r1, r3
 8000e18:	201d      	movs	r0, #29
 8000e1a:	f7ff fd83 	bl	8000924 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8000e1e:	201d      	movs	r0, #29
 8000e20:	f7ff fd30 	bl	8000884 <NRF24_read_register>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d10c      	bne.n	8000e44 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8000e2a:	f000 f939 	bl	80010a0 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000e2e:	201d      	movs	r0, #29
 8000e30:	f7ff fd28 	bl	8000884 <NRF24_read_register>
 8000e34:	4603      	mov	r3, r0
 8000e36:	f043 0304 	orr.w	r3, r3, #4
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	201d      	movs	r0, #29
 8000e40:	f7ff fd70 	bl	8000924 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8000e44:	201c      	movs	r0, #28
 8000e46:	f7ff fd1d 	bl	8000884 <NRF24_read_register>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	4619      	mov	r1, r3
 8000e54:	201c      	movs	r0, #28
 8000e56:	f7ff fd65 	bl	8000924 <NRF24_write_register>
  dynamic_payloads_enabled = true;
 8000e5a:	4b02      	ldr	r3, [pc, #8]	; (8000e64 <NRF24_enableDynamicPayloads+0x60>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	701a      	strb	r2, [r3, #0]

}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	240000a9 	.word	0x240000a9

08000e68 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000e6c:	201d      	movs	r0, #29
 8000e6e:	f7ff fd09 	bl	8000884 <NRF24_read_register>
 8000e72:	4603      	mov	r3, r0
 8000e74:	f023 0304 	bic.w	r3, r3, #4
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	201d      	movs	r0, #29
 8000e7e:	f7ff fd51 	bl	8000924 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8000e82:	2100      	movs	r1, #0
 8000e84:	201c      	movs	r0, #28
 8000e86:	f7ff fd4d 	bl	8000924 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000e8a:	4b02      	ldr	r3, [pc, #8]	; (8000e94 <NRF24_disableDynamicPayloads+0x2c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	701a      	strb	r2, [r3, #0]
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	240000a9 	.word	0x240000a9

08000e98 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d004      	beq.n	8000eb2 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000ea8:	213f      	movs	r1, #63	; 0x3f
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f7ff fd3a 	bl	8000924 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000eb0:	e003      	b.n	8000eba <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	f7ff fd35 	bl	8000924 <NRF24_write_register>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b084      	sub	sp, #16
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	4603      	mov	r3, r0
 8000eca:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000ecc:	2006      	movs	r0, #6
 8000ece:	f7ff fcd9 	bl	8000884 <NRF24_read_register>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000ed6:	7bfb      	ldrb	r3, [r7, #15]
 8000ed8:	f023 0306 	bic.w	r3, r3, #6
 8000edc:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	2b03      	cmp	r3, #3
 8000ee2:	d104      	bne.n	8000eee <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
 8000ee6:	f043 0306 	orr.w	r3, r3, #6
 8000eea:	73fb      	strb	r3, [r7, #15]
 8000eec:	e019      	b.n	8000f22 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d104      	bne.n	8000efe <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
 8000ef6:	f043 0304 	orr.w	r3, r3, #4
 8000efa:	73fb      	strb	r3, [r7, #15]
 8000efc:	e011      	b.n	8000f22 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d104      	bne.n	8000f0e <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	f043 0302 	orr.w	r3, r3, #2
 8000f0a:	73fb      	strb	r3, [r7, #15]
 8000f0c:	e009      	b.n	8000f22 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d006      	beq.n	8000f22 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	2b04      	cmp	r3, #4
 8000f18:	d103      	bne.n	8000f22 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	f043 0306 	orr.w	r3, r3, #6
 8000f20:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	4619      	mov	r1, r3
 8000f26:	2006      	movs	r0, #6
 8000f28:	f7ff fcfc 	bl	8000924 <NRF24_write_register>
}
 8000f2c:	bf00      	nop
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000f42:	2006      	movs	r0, #6
 8000f44:	f7ff fc9e 	bl	8000884 <NRF24_read_register>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <NRF24_setDataRate+0x88>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000f52:	7bbb      	ldrb	r3, [r7, #14]
 8000f54:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000f58:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d107      	bne.n	8000f70 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000f60:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <NRF24_setDataRate+0x88>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000f66:	7bbb      	ldrb	r3, [r7, #14]
 8000f68:	f043 0320 	orr.w	r3, r3, #32
 8000f6c:	73bb      	strb	r3, [r7, #14]
 8000f6e:	e00d      	b.n	8000f8c <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d107      	bne.n	8000f86 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <NRF24_setDataRate+0x88>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000f7c:	7bbb      	ldrb	r3, [r7, #14]
 8000f7e:	f043 0308 	orr.w	r3, r3, #8
 8000f82:	73bb      	strb	r3, [r7, #14]
 8000f84:	e002      	b.n	8000f8c <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000f86:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <NRF24_setDataRate+0x88>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000f8c:	7bbb      	ldrb	r3, [r7, #14]
 8000f8e:	4619      	mov	r1, r3
 8000f90:	2006      	movs	r0, #6
 8000f92:	f7ff fcc7 	bl	8000924 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000f96:	2006      	movs	r0, #6
 8000f98:	f7ff fc74 	bl	8000884 <NRF24_read_register>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	7bbb      	ldrb	r3, [r7, #14]
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d102      	bne.n	8000fac <NRF24_setDataRate+0x78>
  {
    result = true;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	73fb      	strb	r3, [r7, #15]
 8000faa:	e002      	b.n	8000fb2 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000fac:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <NRF24_setDataRate+0x88>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	240000aa 	.word	0x240000aa

08000fc0 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f7ff fc5a 	bl	8000884 <NRF24_read_register>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	f023 030c 	bic.w	r3, r3, #12
 8000fd6:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d00f      	beq.n	8000ffe <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d104      	bne.n	8000fee <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	f043 0308 	orr.w	r3, r3, #8
 8000fea:	73fb      	strb	r3, [r7, #15]
 8000fec:	e007      	b.n	8000ffe <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	f043 0308 	orr.w	r3, r3, #8
 8000ff4:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	f043 0304 	orr.w	r3, r3, #4
 8000ffc:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	4619      	mov	r1, r3
 8001002:	2000      	movs	r0, #0
 8001004:	f7ff fc8e 	bl	8000924 <NRF24_write_register>
}
 8001008:	bf00      	nop
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8001014:	2000      	movs	r0, #0
 8001016:	f7ff fc35 	bl	8000884 <NRF24_read_register>
 800101a:	4603      	mov	r3, r0
 800101c:	f023 0302 	bic.w	r3, r3, #2
 8001020:	b2db      	uxtb	r3, r3
 8001022:	4619      	mov	r1, r3
 8001024:	2000      	movs	r0, #0
 8001026:	f7ff fc7d 	bl	8000924 <NRF24_write_register>
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}

0800102e <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b084      	sub	sp, #16
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001036:	f7ff fcff 	bl	8000a38 <NRF24_get_status>
 800103a:	4603      	mov	r3, r0
 800103c:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001044:	2b00      	cmp	r3, #0
 8001046:	bf14      	ite	ne
 8001048:	2301      	movne	r3, #1
 800104a:	2300      	moveq	r3, #0
 800104c:	73bb      	strb	r3, [r7, #14]

  if (result)
 800104e:	7bbb      	ldrb	r3, [r7, #14]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d017      	beq.n	8001084 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d007      	beq.n	800106a <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	085b      	lsrs	r3, r3, #1
 800105e:	b2db      	uxtb	r3, r3
 8001060:	f003 0307 	and.w	r3, r3, #7
 8001064:	b2da      	uxtb	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 800106a:	2140      	movs	r1, #64	; 0x40
 800106c:	2007      	movs	r0, #7
 800106e:	f7ff fc59 	bl	8000924 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	f003 0320 	and.w	r3, r3, #32
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 800107c:	2120      	movs	r1, #32
 800107e:	2007      	movs	r0, #7
 8001080:	f7ff fc50 	bl	8000924 <NRF24_write_register>
    }
  }
  return result;
 8001084:	7bbb      	ldrb	r3, [r7, #14]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001092:	2170      	movs	r1, #112	; 0x70
 8001094:	2007      	movs	r0, #7
 8001096:	f7ff fc45 	bl	8000924 <NRF24_write_register>
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80010a6:	2000      	movs	r0, #0
 80010a8:	f7ff fbac 	bl	8000804 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 80010ac:	2350      	movs	r3, #80	; 0x50
 80010ae:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 80010b0:	2373      	movs	r3, #115	; 0x73
 80010b2:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 80010b4:	1d39      	adds	r1, r7, #4
 80010b6:	2364      	movs	r3, #100	; 0x64
 80010b8:	2202      	movs	r2, #2
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <NRF24_ACTIVATE_cmd+0x30>)
 80010bc:	f004 fedc 	bl	8005e78 <HAL_SPI_Transmit>
	NRF24_csn(1);
 80010c0:	2001      	movs	r0, #1
 80010c2:	f7ff fb9f 	bl	8000804 <NRF24_csn>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	240000b4 	.word	0x240000b4

080010d4 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 80010d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010d6:	b0a1      	sub	sp, #132	; 0x84
 80010d8:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80010da:	f107 0308 	add.w	r3, r7, #8
 80010de:	49c3      	ldr	r1, [pc, #780]	; (80013ec <printRadioSettings+0x318>)
 80010e0:	4618      	mov	r0, r3
 80010e2:	f00a fd57 	bl	800bb94 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010e6:	f107 0308 	add.w	r3, r7, #8
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff f8f8 	bl	80002e0 <strlen>
 80010f0:	4603      	mov	r3, r0
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	f107 0108 	add.w	r1, r7, #8
 80010f8:	230a      	movs	r3, #10
 80010fa:	48bd      	ldr	r0, [pc, #756]	; (80013f0 <printRadioSettings+0x31c>)
 80010fc:	f006 fcc4 	bl	8007a88 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8001100:	2000      	movs	r0, #0
 8001102:	f7ff fbbf 	bl	8000884 <NRF24_read_register>
 8001106:	4603      	mov	r3, r0
 8001108:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 800110c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001110:	f003 0308 	and.w	r3, r3, #8
 8001114:	2b00      	cmp	r3, #0
 8001116:	d013      	beq.n	8001140 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8001118:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800111c:	f003 0304 	and.w	r3, r3, #4
 8001120:	2b00      	cmp	r3, #0
 8001122:	d006      	beq.n	8001132 <printRadioSettings+0x5e>
 8001124:	f107 0308 	add.w	r3, r7, #8
 8001128:	49b2      	ldr	r1, [pc, #712]	; (80013f4 <printRadioSettings+0x320>)
 800112a:	4618      	mov	r0, r3
 800112c:	f00a fd32 	bl	800bb94 <siprintf>
 8001130:	e00c      	b.n	800114c <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	49b0      	ldr	r1, [pc, #704]	; (80013f8 <printRadioSettings+0x324>)
 8001138:	4618      	mov	r0, r3
 800113a:	f00a fd2b 	bl	800bb94 <siprintf>
 800113e:	e005      	b.n	800114c <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8001140:	f107 0308 	add.w	r3, r7, #8
 8001144:	49ad      	ldr	r1, [pc, #692]	; (80013fc <printRadioSettings+0x328>)
 8001146:	4618      	mov	r0, r3
 8001148:	f00a fd24 	bl	800bb94 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800114c:	f107 0308 	add.w	r3, r7, #8
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff f8c5 	bl	80002e0 <strlen>
 8001156:	4603      	mov	r3, r0
 8001158:	b29a      	uxth	r2, r3
 800115a:	f107 0108 	add.w	r1, r7, #8
 800115e:	230a      	movs	r3, #10
 8001160:	48a3      	ldr	r0, [pc, #652]	; (80013f0 <printRadioSettings+0x31c>)
 8001162:	f006 fc91 	bl	8007a88 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8001166:	2001      	movs	r0, #1
 8001168:	f7ff fb8c 	bl	8000884 <NRF24_read_register>
 800116c:	4603      	mov	r3, r0
 800116e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001172:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001176:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800117a:	2b00      	cmp	r3, #0
 800117c:	bfcc      	ite	gt
 800117e:	2301      	movgt	r3, #1
 8001180:	2300      	movle	r3, #0
 8001182:	b2db      	uxtb	r3, r3
 8001184:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001186:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800118a:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800118e:	2b00      	cmp	r3, #0
 8001190:	bfcc      	ite	gt
 8001192:	2301      	movgt	r3, #1
 8001194:	2300      	movle	r3, #0
 8001196:	b2db      	uxtb	r3, r3
 8001198:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800119a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800119e:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	bfcc      	ite	gt
 80011a6:	2301      	movgt	r3, #1
 80011a8:	2300      	movle	r3, #0
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011ae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011b2:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	bfcc      	ite	gt
 80011ba:	2301      	movgt	r3, #1
 80011bc:	2300      	movle	r3, #0
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011c2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011c6:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	bfcc      	ite	gt
 80011ce:	2301      	movgt	r3, #1
 80011d0:	2300      	movle	r3, #0
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011da:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011de:	2b00      	cmp	r3, #0
 80011e0:	bfcc      	ite	gt
 80011e2:	2301      	movgt	r3, #1
 80011e4:	2300      	movle	r3, #0
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	f107 0008 	add.w	r0, r7, #8
 80011ec:	9303      	str	r3, [sp, #12]
 80011ee:	9402      	str	r4, [sp, #8]
 80011f0:	9101      	str	r1, [sp, #4]
 80011f2:	9200      	str	r2, [sp, #0]
 80011f4:	4633      	mov	r3, r6
 80011f6:	462a      	mov	r2, r5
 80011f8:	4981      	ldr	r1, [pc, #516]	; (8001400 <printRadioSettings+0x32c>)
 80011fa:	f00a fccb 	bl	800bb94 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011fe:	f107 0308 	add.w	r3, r7, #8
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff f86c 	bl	80002e0 <strlen>
 8001208:	4603      	mov	r3, r0
 800120a:	b29a      	uxth	r2, r3
 800120c:	f107 0108 	add.w	r1, r7, #8
 8001210:	230a      	movs	r3, #10
 8001212:	4877      	ldr	r0, [pc, #476]	; (80013f0 <printRadioSettings+0x31c>)
 8001214:	f006 fc38 	bl	8007a88 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8001218:	2002      	movs	r0, #2
 800121a:	f7ff fb33 	bl	8000884 <NRF24_read_register>
 800121e:	4603      	mov	r3, r0
 8001220:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001224:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001228:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800122c:	2b00      	cmp	r3, #0
 800122e:	bfcc      	ite	gt
 8001230:	2301      	movgt	r3, #1
 8001232:	2300      	movle	r3, #0
 8001234:	b2db      	uxtb	r3, r3
 8001236:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001238:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800123c:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001240:	2b00      	cmp	r3, #0
 8001242:	bfcc      	ite	gt
 8001244:	2301      	movgt	r3, #1
 8001246:	2300      	movle	r3, #0
 8001248:	b2db      	uxtb	r3, r3
 800124a:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800124c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001250:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001254:	2b00      	cmp	r3, #0
 8001256:	bfcc      	ite	gt
 8001258:	2301      	movgt	r3, #1
 800125a:	2300      	movle	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001260:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001264:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001268:	2b00      	cmp	r3, #0
 800126a:	bfcc      	ite	gt
 800126c:	2301      	movgt	r3, #1
 800126e:	2300      	movle	r3, #0
 8001270:	b2db      	uxtb	r3, r3
 8001272:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001274:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001278:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800127c:	2b00      	cmp	r3, #0
 800127e:	bfcc      	ite	gt
 8001280:	2301      	movgt	r3, #1
 8001282:	2300      	movle	r3, #0
 8001284:	b2db      	uxtb	r3, r3
 8001286:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001288:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800128c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001290:	2b00      	cmp	r3, #0
 8001292:	bfcc      	ite	gt
 8001294:	2301      	movgt	r3, #1
 8001296:	2300      	movle	r3, #0
 8001298:	b2db      	uxtb	r3, r3
 800129a:	f107 0008 	add.w	r0, r7, #8
 800129e:	9303      	str	r3, [sp, #12]
 80012a0:	9402      	str	r4, [sp, #8]
 80012a2:	9101      	str	r1, [sp, #4]
 80012a4:	9200      	str	r2, [sp, #0]
 80012a6:	4633      	mov	r3, r6
 80012a8:	462a      	mov	r2, r5
 80012aa:	4956      	ldr	r1, [pc, #344]	; (8001404 <printRadioSettings+0x330>)
 80012ac:	f00a fc72 	bl	800bb94 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012b0:	f107 0308 	add.w	r3, r7, #8
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff f813 	bl	80002e0 <strlen>
 80012ba:	4603      	mov	r3, r0
 80012bc:	b29a      	uxth	r2, r3
 80012be:	f107 0108 	add.w	r1, r7, #8
 80012c2:	230a      	movs	r3, #10
 80012c4:	484a      	ldr	r0, [pc, #296]	; (80013f0 <printRadioSettings+0x31c>)
 80012c6:	f006 fbdf 	bl	8007a88 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 80012ca:	2003      	movs	r0, #3
 80012cc:	f7ff fada 	bl	8000884 <NRF24_read_register>
 80012d0:	4603      	mov	r3, r0
 80012d2:	f003 0303 	and.w	r3, r3, #3
 80012d6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 80012da:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012de:	3302      	adds	r3, #2
 80012e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 80012e4:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80012e8:	f107 0308 	add.w	r3, r7, #8
 80012ec:	4946      	ldr	r1, [pc, #280]	; (8001408 <printRadioSettings+0x334>)
 80012ee:	4618      	mov	r0, r3
 80012f0:	f00a fc50 	bl	800bb94 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012f4:	f107 0308 	add.w	r3, r7, #8
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7fe fff1 	bl	80002e0 <strlen>
 80012fe:	4603      	mov	r3, r0
 8001300:	b29a      	uxth	r2, r3
 8001302:	f107 0108 	add.w	r1, r7, #8
 8001306:	230a      	movs	r3, #10
 8001308:	4839      	ldr	r0, [pc, #228]	; (80013f0 <printRadioSettings+0x31c>)
 800130a:	f006 fbbd 	bl	8007a88 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 800130e:	2005      	movs	r0, #5
 8001310:	f7ff fab8 	bl	8000884 <NRF24_read_register>
 8001314:	4603      	mov	r3, r0
 8001316:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 800131a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800131e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001322:	f107 0308 	add.w	r3, r7, #8
 8001326:	4939      	ldr	r1, [pc, #228]	; (800140c <printRadioSettings+0x338>)
 8001328:	4618      	mov	r0, r3
 800132a:	f00a fc33 	bl	800bb94 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800132e:	f107 0308 	add.w	r3, r7, #8
 8001332:	4618      	mov	r0, r3
 8001334:	f7fe ffd4 	bl	80002e0 <strlen>
 8001338:	4603      	mov	r3, r0
 800133a:	b29a      	uxth	r2, r3
 800133c:	f107 0108 	add.w	r1, r7, #8
 8001340:	230a      	movs	r3, #10
 8001342:	482b      	ldr	r0, [pc, #172]	; (80013f0 <printRadioSettings+0x31c>)
 8001344:	f006 fba0 	bl	8007a88 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001348:	2006      	movs	r0, #6
 800134a:	f7ff fa9b 	bl	8000884 <NRF24_read_register>
 800134e:	4603      	mov	r3, r0
 8001350:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8001354:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001358:	f003 0308 	and.w	r3, r3, #8
 800135c:	2b00      	cmp	r3, #0
 800135e:	d006      	beq.n	800136e <printRadioSettings+0x29a>
 8001360:	f107 0308 	add.w	r3, r7, #8
 8001364:	492a      	ldr	r1, [pc, #168]	; (8001410 <printRadioSettings+0x33c>)
 8001366:	4618      	mov	r0, r3
 8001368:	f00a fc14 	bl	800bb94 <siprintf>
 800136c:	e005      	b.n	800137a <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 800136e:	f107 0308 	add.w	r3, r7, #8
 8001372:	4928      	ldr	r1, [pc, #160]	; (8001414 <printRadioSettings+0x340>)
 8001374:	4618      	mov	r0, r3
 8001376:	f00a fc0d 	bl	800bb94 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800137a:	f107 0308 	add.w	r3, r7, #8
 800137e:	4618      	mov	r0, r3
 8001380:	f7fe ffae 	bl	80002e0 <strlen>
 8001384:	4603      	mov	r3, r0
 8001386:	b29a      	uxth	r2, r3
 8001388:	f107 0108 	add.w	r1, r7, #8
 800138c:	230a      	movs	r3, #10
 800138e:	4818      	ldr	r0, [pc, #96]	; (80013f0 <printRadioSettings+0x31c>)
 8001390:	f006 fb7a 	bl	8007a88 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8001394:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001398:	f003 0306 	and.w	r3, r3, #6
 800139c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 80013a0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013a4:	085b      	lsrs	r3, r3, #1
 80013a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 80013aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d106      	bne.n	80013c0 <printRadioSettings+0x2ec>
 80013b2:	f107 0308 	add.w	r3, r7, #8
 80013b6:	4918      	ldr	r1, [pc, #96]	; (8001418 <printRadioSettings+0x344>)
 80013b8:	4618      	mov	r0, r3
 80013ba:	f00a fbeb 	bl	800bb94 <siprintf>
 80013be:	e03b      	b.n	8001438 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 80013c0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d106      	bne.n	80013d6 <printRadioSettings+0x302>
 80013c8:	f107 0308 	add.w	r3, r7, #8
 80013cc:	4913      	ldr	r1, [pc, #76]	; (800141c <printRadioSettings+0x348>)
 80013ce:	4618      	mov	r0, r3
 80013d0:	f00a fbe0 	bl	800bb94 <siprintf>
 80013d4:	e030      	b.n	8001438 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 80013d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d122      	bne.n	8001424 <printRadioSettings+0x350>
 80013de:	f107 0308 	add.w	r3, r7, #8
 80013e2:	490f      	ldr	r1, [pc, #60]	; (8001420 <printRadioSettings+0x34c>)
 80013e4:	4618      	mov	r0, r3
 80013e6:	f00a fbd5 	bl	800bb94 <siprintf>
 80013ea:	e025      	b.n	8001438 <printRadioSettings+0x364>
 80013ec:	0800cafc 	.word	0x0800cafc
 80013f0:	2400013c 	.word	0x2400013c
 80013f4:	0800cb30 	.word	0x0800cb30
 80013f8:	0800cb4c 	.word	0x0800cb4c
 80013fc:	0800cb68 	.word	0x0800cb68
 8001400:	0800cb7c 	.word	0x0800cb7c
 8001404:	0800cbc0 	.word	0x0800cbc0
 8001408:	0800cc0c 	.word	0x0800cc0c
 800140c:	0800cc28 	.word	0x0800cc28
 8001410:	0800cc3c 	.word	0x0800cc3c
 8001414:	0800cc54 	.word	0x0800cc54
 8001418:	0800cc6c 	.word	0x0800cc6c
 800141c:	0800cc80 	.word	0x0800cc80
 8001420:	0800cc94 	.word	0x0800cc94
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001424:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001428:	2b03      	cmp	r3, #3
 800142a:	d105      	bne.n	8001438 <printRadioSettings+0x364>
 800142c:	f107 0308 	add.w	r3, r7, #8
 8001430:	49d7      	ldr	r1, [pc, #860]	; (8001790 <printRadioSettings+0x6bc>)
 8001432:	4618      	mov	r0, r3
 8001434:	f00a fbae 	bl	800bb94 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001438:	f107 0308 	add.w	r3, r7, #8
 800143c:	4618      	mov	r0, r3
 800143e:	f7fe ff4f 	bl	80002e0 <strlen>
 8001442:	4603      	mov	r3, r0
 8001444:	b29a      	uxth	r2, r3
 8001446:	f107 0108 	add.w	r1, r7, #8
 800144a:	230a      	movs	r3, #10
 800144c:	48d1      	ldr	r0, [pc, #836]	; (8001794 <printRadioSettings+0x6c0>)
 800144e:	f006 fb1b 	bl	8007a88 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001452:	463b      	mov	r3, r7
 8001454:	2205      	movs	r2, #5
 8001456:	4619      	mov	r1, r3
 8001458:	200a      	movs	r0, #10
 800145a:	f7ff fa3b 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800145e:	793b      	ldrb	r3, [r7, #4]
 8001460:	461c      	mov	r4, r3
 8001462:	78fb      	ldrb	r3, [r7, #3]
 8001464:	461d      	mov	r5, r3
 8001466:	78bb      	ldrb	r3, [r7, #2]
 8001468:	787a      	ldrb	r2, [r7, #1]
 800146a:	7839      	ldrb	r1, [r7, #0]
 800146c:	f107 0008 	add.w	r0, r7, #8
 8001470:	9102      	str	r1, [sp, #8]
 8001472:	9201      	str	r2, [sp, #4]
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	462b      	mov	r3, r5
 8001478:	4622      	mov	r2, r4
 800147a:	49c7      	ldr	r1, [pc, #796]	; (8001798 <printRadioSettings+0x6c4>)
 800147c:	f00a fb8a 	bl	800bb94 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001480:	f107 0308 	add.w	r3, r7, #8
 8001484:	4618      	mov	r0, r3
 8001486:	f7fe ff2b 	bl	80002e0 <strlen>
 800148a:	4603      	mov	r3, r0
 800148c:	b29a      	uxth	r2, r3
 800148e:	f107 0108 	add.w	r1, r7, #8
 8001492:	230a      	movs	r3, #10
 8001494:	48bf      	ldr	r0, [pc, #764]	; (8001794 <printRadioSettings+0x6c0>)
 8001496:	f006 faf7 	bl	8007a88 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 800149a:	463b      	mov	r3, r7
 800149c:	2205      	movs	r2, #5
 800149e:	4619      	mov	r1, r3
 80014a0:	200b      	movs	r0, #11
 80014a2:	f7ff fa17 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80014a6:	793b      	ldrb	r3, [r7, #4]
 80014a8:	461c      	mov	r4, r3
 80014aa:	78fb      	ldrb	r3, [r7, #3]
 80014ac:	461d      	mov	r5, r3
 80014ae:	78bb      	ldrb	r3, [r7, #2]
 80014b0:	787a      	ldrb	r2, [r7, #1]
 80014b2:	7839      	ldrb	r1, [r7, #0]
 80014b4:	f107 0008 	add.w	r0, r7, #8
 80014b8:	9102      	str	r1, [sp, #8]
 80014ba:	9201      	str	r2, [sp, #4]
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	462b      	mov	r3, r5
 80014c0:	4622      	mov	r2, r4
 80014c2:	49b6      	ldr	r1, [pc, #728]	; (800179c <printRadioSettings+0x6c8>)
 80014c4:	f00a fb66 	bl	800bb94 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014c8:	f107 0308 	add.w	r3, r7, #8
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7fe ff07 	bl	80002e0 <strlen>
 80014d2:	4603      	mov	r3, r0
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	f107 0108 	add.w	r1, r7, #8
 80014da:	230a      	movs	r3, #10
 80014dc:	48ad      	ldr	r0, [pc, #692]	; (8001794 <printRadioSettings+0x6c0>)
 80014de:	f006 fad3 	bl	8007a88 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 80014e2:	463b      	mov	r3, r7
 80014e4:	2201      	movs	r2, #1
 80014e6:	4619      	mov	r1, r3
 80014e8:	200c      	movs	r0, #12
 80014ea:	f7ff f9f3 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80014ee:	783b      	ldrb	r3, [r7, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	f107 0308 	add.w	r3, r7, #8
 80014f6:	49aa      	ldr	r1, [pc, #680]	; (80017a0 <printRadioSettings+0x6cc>)
 80014f8:	4618      	mov	r0, r3
 80014fa:	f00a fb4b 	bl	800bb94 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014fe:	f107 0308 	add.w	r3, r7, #8
 8001502:	4618      	mov	r0, r3
 8001504:	f7fe feec 	bl	80002e0 <strlen>
 8001508:	4603      	mov	r3, r0
 800150a:	b29a      	uxth	r2, r3
 800150c:	f107 0108 	add.w	r1, r7, #8
 8001510:	230a      	movs	r3, #10
 8001512:	48a0      	ldr	r0, [pc, #640]	; (8001794 <printRadioSettings+0x6c0>)
 8001514:	f006 fab8 	bl	8007a88 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8001518:	463b      	mov	r3, r7
 800151a:	2201      	movs	r2, #1
 800151c:	4619      	mov	r1, r3
 800151e:	200d      	movs	r0, #13
 8001520:	f7ff f9d8 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001524:	783b      	ldrb	r3, [r7, #0]
 8001526:	461a      	mov	r2, r3
 8001528:	f107 0308 	add.w	r3, r7, #8
 800152c:	499d      	ldr	r1, [pc, #628]	; (80017a4 <printRadioSettings+0x6d0>)
 800152e:	4618      	mov	r0, r3
 8001530:	f00a fb30 	bl	800bb94 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001534:	f107 0308 	add.w	r3, r7, #8
 8001538:	4618      	mov	r0, r3
 800153a:	f7fe fed1 	bl	80002e0 <strlen>
 800153e:	4603      	mov	r3, r0
 8001540:	b29a      	uxth	r2, r3
 8001542:	f107 0108 	add.w	r1, r7, #8
 8001546:	230a      	movs	r3, #10
 8001548:	4892      	ldr	r0, [pc, #584]	; (8001794 <printRadioSettings+0x6c0>)
 800154a:	f006 fa9d 	bl	8007a88 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 800154e:	463b      	mov	r3, r7
 8001550:	2201      	movs	r2, #1
 8001552:	4619      	mov	r1, r3
 8001554:	200e      	movs	r0, #14
 8001556:	f7ff f9bd 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800155a:	783b      	ldrb	r3, [r7, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	f107 0308 	add.w	r3, r7, #8
 8001562:	4991      	ldr	r1, [pc, #580]	; (80017a8 <printRadioSettings+0x6d4>)
 8001564:	4618      	mov	r0, r3
 8001566:	f00a fb15 	bl	800bb94 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800156a:	f107 0308 	add.w	r3, r7, #8
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe feb6 	bl	80002e0 <strlen>
 8001574:	4603      	mov	r3, r0
 8001576:	b29a      	uxth	r2, r3
 8001578:	f107 0108 	add.w	r1, r7, #8
 800157c:	230a      	movs	r3, #10
 800157e:	4885      	ldr	r0, [pc, #532]	; (8001794 <printRadioSettings+0x6c0>)
 8001580:	f006 fa82 	bl	8007a88 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001584:	463b      	mov	r3, r7
 8001586:	2201      	movs	r2, #1
 8001588:	4619      	mov	r1, r3
 800158a:	200f      	movs	r0, #15
 800158c:	f7ff f9a2 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001590:	783b      	ldrb	r3, [r7, #0]
 8001592:	461a      	mov	r2, r3
 8001594:	f107 0308 	add.w	r3, r7, #8
 8001598:	4984      	ldr	r1, [pc, #528]	; (80017ac <printRadioSettings+0x6d8>)
 800159a:	4618      	mov	r0, r3
 800159c:	f00a fafa 	bl	800bb94 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015a0:	f107 0308 	add.w	r3, r7, #8
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7fe fe9b 	bl	80002e0 <strlen>
 80015aa:	4603      	mov	r3, r0
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	f107 0108 	add.w	r1, r7, #8
 80015b2:	230a      	movs	r3, #10
 80015b4:	4877      	ldr	r0, [pc, #476]	; (8001794 <printRadioSettings+0x6c0>)
 80015b6:	f006 fa67 	bl	8007a88 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 80015ba:	463b      	mov	r3, r7
 80015bc:	2205      	movs	r2, #5
 80015be:	4619      	mov	r1, r3
 80015c0:	2010      	movs	r0, #16
 80015c2:	f7ff f987 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80015c6:	793b      	ldrb	r3, [r7, #4]
 80015c8:	461c      	mov	r4, r3
 80015ca:	78fb      	ldrb	r3, [r7, #3]
 80015cc:	461d      	mov	r5, r3
 80015ce:	78bb      	ldrb	r3, [r7, #2]
 80015d0:	787a      	ldrb	r2, [r7, #1]
 80015d2:	7839      	ldrb	r1, [r7, #0]
 80015d4:	f107 0008 	add.w	r0, r7, #8
 80015d8:	9102      	str	r1, [sp, #8]
 80015da:	9201      	str	r2, [sp, #4]
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	462b      	mov	r3, r5
 80015e0:	4622      	mov	r2, r4
 80015e2:	4973      	ldr	r1, [pc, #460]	; (80017b0 <printRadioSettings+0x6dc>)
 80015e4:	f00a fad6 	bl	800bb94 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015e8:	f107 0308 	add.w	r3, r7, #8
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe fe77 	bl	80002e0 <strlen>
 80015f2:	4603      	mov	r3, r0
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	f107 0108 	add.w	r1, r7, #8
 80015fa:	230a      	movs	r3, #10
 80015fc:	4865      	ldr	r0, [pc, #404]	; (8001794 <printRadioSettings+0x6c0>)
 80015fe:	f006 fa43 	bl	8007a88 <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8001602:	2011      	movs	r0, #17
 8001604:	f7ff f93e 	bl	8000884 <NRF24_read_register>
 8001608:	4603      	mov	r3, r0
 800160a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800160e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001612:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001616:	f107 0308 	add.w	r3, r7, #8
 800161a:	4966      	ldr	r1, [pc, #408]	; (80017b4 <printRadioSettings+0x6e0>)
 800161c:	4618      	mov	r0, r3
 800161e:	f00a fab9 	bl	800bb94 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001622:	f107 0308 	add.w	r3, r7, #8
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe fe5a 	bl	80002e0 <strlen>
 800162c:	4603      	mov	r3, r0
 800162e:	b29a      	uxth	r2, r3
 8001630:	f107 0108 	add.w	r1, r7, #8
 8001634:	230a      	movs	r3, #10
 8001636:	4857      	ldr	r0, [pc, #348]	; (8001794 <printRadioSettings+0x6c0>)
 8001638:	f006 fa26 	bl	8007a88 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 800163c:	2012      	movs	r0, #18
 800163e:	f7ff f921 	bl	8000884 <NRF24_read_register>
 8001642:	4603      	mov	r3, r0
 8001644:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001648:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800164c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001650:	f107 0308 	add.w	r3, r7, #8
 8001654:	4958      	ldr	r1, [pc, #352]	; (80017b8 <printRadioSettings+0x6e4>)
 8001656:	4618      	mov	r0, r3
 8001658:	f00a fa9c 	bl	800bb94 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800165c:	f107 0308 	add.w	r3, r7, #8
 8001660:	4618      	mov	r0, r3
 8001662:	f7fe fe3d 	bl	80002e0 <strlen>
 8001666:	4603      	mov	r3, r0
 8001668:	b29a      	uxth	r2, r3
 800166a:	f107 0108 	add.w	r1, r7, #8
 800166e:	230a      	movs	r3, #10
 8001670:	4848      	ldr	r0, [pc, #288]	; (8001794 <printRadioSettings+0x6c0>)
 8001672:	f006 fa09 	bl	8007a88 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 8001676:	2013      	movs	r0, #19
 8001678:	f7ff f904 	bl	8000884 <NRF24_read_register>
 800167c:	4603      	mov	r3, r0
 800167e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001682:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001686:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800168a:	f107 0308 	add.w	r3, r7, #8
 800168e:	494b      	ldr	r1, [pc, #300]	; (80017bc <printRadioSettings+0x6e8>)
 8001690:	4618      	mov	r0, r3
 8001692:	f00a fa7f 	bl	800bb94 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001696:	f107 0308 	add.w	r3, r7, #8
 800169a:	4618      	mov	r0, r3
 800169c:	f7fe fe20 	bl	80002e0 <strlen>
 80016a0:	4603      	mov	r3, r0
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	f107 0108 	add.w	r1, r7, #8
 80016a8:	230a      	movs	r3, #10
 80016aa:	483a      	ldr	r0, [pc, #232]	; (8001794 <printRadioSettings+0x6c0>)
 80016ac:	f006 f9ec 	bl	8007a88 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 80016b0:	2014      	movs	r0, #20
 80016b2:	f7ff f8e7 	bl	8000884 <NRF24_read_register>
 80016b6:	4603      	mov	r3, r0
 80016b8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80016bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016c4:	f107 0308 	add.w	r3, r7, #8
 80016c8:	493d      	ldr	r1, [pc, #244]	; (80017c0 <printRadioSettings+0x6ec>)
 80016ca:	4618      	mov	r0, r3
 80016cc:	f00a fa62 	bl	800bb94 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016d0:	f107 0308 	add.w	r3, r7, #8
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe fe03 	bl	80002e0 <strlen>
 80016da:	4603      	mov	r3, r0
 80016dc:	b29a      	uxth	r2, r3
 80016de:	f107 0108 	add.w	r1, r7, #8
 80016e2:	230a      	movs	r3, #10
 80016e4:	482b      	ldr	r0, [pc, #172]	; (8001794 <printRadioSettings+0x6c0>)
 80016e6:	f006 f9cf 	bl	8007a88 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 80016ea:	2015      	movs	r0, #21
 80016ec:	f7ff f8ca 	bl	8000884 <NRF24_read_register>
 80016f0:	4603      	mov	r3, r0
 80016f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80016f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016fe:	f107 0308 	add.w	r3, r7, #8
 8001702:	4930      	ldr	r1, [pc, #192]	; (80017c4 <printRadioSettings+0x6f0>)
 8001704:	4618      	mov	r0, r3
 8001706:	f00a fa45 	bl	800bb94 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800170a:	f107 0308 	add.w	r3, r7, #8
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe fde6 	bl	80002e0 <strlen>
 8001714:	4603      	mov	r3, r0
 8001716:	b29a      	uxth	r2, r3
 8001718:	f107 0108 	add.w	r1, r7, #8
 800171c:	230a      	movs	r3, #10
 800171e:	481d      	ldr	r0, [pc, #116]	; (8001794 <printRadioSettings+0x6c0>)
 8001720:	f006 f9b2 	bl	8007a88 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 8001724:	2016      	movs	r0, #22
 8001726:	f7ff f8ad 	bl	8000884 <NRF24_read_register>
 800172a:	4603      	mov	r3, r0
 800172c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001730:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001734:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001738:	f107 0308 	add.w	r3, r7, #8
 800173c:	4922      	ldr	r1, [pc, #136]	; (80017c8 <printRadioSettings+0x6f4>)
 800173e:	4618      	mov	r0, r3
 8001740:	f00a fa28 	bl	800bb94 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001744:	f107 0308 	add.w	r3, r7, #8
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe fdc9 	bl	80002e0 <strlen>
 800174e:	4603      	mov	r3, r0
 8001750:	b29a      	uxth	r2, r3
 8001752:	f107 0108 	add.w	r1, r7, #8
 8001756:	230a      	movs	r3, #10
 8001758:	480e      	ldr	r0, [pc, #56]	; (8001794 <printRadioSettings+0x6c0>)
 800175a:	f006 f995 	bl	8007a88 <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 800175e:	201c      	movs	r0, #28
 8001760:	f7ff f890 	bl	8000884 <NRF24_read_register>
 8001764:	4603      	mov	r3, r0
 8001766:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800176a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800176e:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001772:	2b00      	cmp	r3, #0
 8001774:	bfcc      	ite	gt
 8001776:	2301      	movgt	r3, #1
 8001778:	2300      	movle	r3, #0
 800177a:	b2db      	uxtb	r3, r3
 800177c:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800177e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001782:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001786:	2b00      	cmp	r3, #0
 8001788:	bfcc      	ite	gt
 800178a:	2301      	movgt	r3, #1
 800178c:	2300      	movle	r3, #0
 800178e:	e01d      	b.n	80017cc <printRadioSettings+0x6f8>
 8001790:	0800cca8 	.word	0x0800cca8
 8001794:	2400013c 	.word	0x2400013c
 8001798:	0800ccbc 	.word	0x0800ccbc
 800179c:	0800ccec 	.word	0x0800ccec
 80017a0:	0800cd1c 	.word	0x0800cd1c
 80017a4:	0800cd44 	.word	0x0800cd44
 80017a8:	0800cd6c 	.word	0x0800cd6c
 80017ac:	0800cd94 	.word	0x0800cd94
 80017b0:	0800cdbc 	.word	0x0800cdbc
 80017b4:	0800cde8 	.word	0x0800cde8
 80017b8:	0800ce04 	.word	0x0800ce04
 80017bc:	0800ce20 	.word	0x0800ce20
 80017c0:	0800ce3c 	.word	0x0800ce3c
 80017c4:	0800ce58 	.word	0x0800ce58
 80017c8:	0800ce74 	.word	0x0800ce74
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017d0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017d4:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017d8:	2b00      	cmp	r3, #0
 80017da:	bfcc      	ite	gt
 80017dc:	2301      	movgt	r3, #1
 80017de:	2300      	movle	r3, #0
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017e4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017e8:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	bfcc      	ite	gt
 80017f0:	2301      	movgt	r3, #1
 80017f2:	2300      	movle	r3, #0
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017fc:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001800:	2b00      	cmp	r3, #0
 8001802:	bfcc      	ite	gt
 8001804:	2301      	movgt	r3, #1
 8001806:	2300      	movle	r3, #0
 8001808:	b2db      	uxtb	r3, r3
 800180a:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800180c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001810:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001814:	2b00      	cmp	r3, #0
 8001816:	bfcc      	ite	gt
 8001818:	2301      	movgt	r3, #1
 800181a:	2300      	movle	r3, #0
 800181c:	b2db      	uxtb	r3, r3
 800181e:	f107 0008 	add.w	r0, r7, #8
 8001822:	9303      	str	r3, [sp, #12]
 8001824:	9402      	str	r4, [sp, #8]
 8001826:	9101      	str	r1, [sp, #4]
 8001828:	9200      	str	r2, [sp, #0]
 800182a:	4633      	mov	r3, r6
 800182c:	462a      	mov	r2, r5
 800182e:	4936      	ldr	r1, [pc, #216]	; (8001908 <printRadioSettings+0x834>)
 8001830:	f00a f9b0 	bl	800bb94 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001834:	f107 0308 	add.w	r3, r7, #8
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fd51 	bl	80002e0 <strlen>
 800183e:	4603      	mov	r3, r0
 8001840:	b29a      	uxth	r2, r3
 8001842:	f107 0108 	add.w	r1, r7, #8
 8001846:	230a      	movs	r3, #10
 8001848:	4830      	ldr	r0, [pc, #192]	; (800190c <printRadioSettings+0x838>)
 800184a:	f006 f91d 	bl	8007a88 <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 800184e:	201d      	movs	r0, #29
 8001850:	f7ff f818 	bl	8000884 <NRF24_read_register>
 8001854:	4603      	mov	r3, r0
 8001856:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 800185a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800185e:	f003 0304 	and.w	r3, r3, #4
 8001862:	2b00      	cmp	r3, #0
 8001864:	d006      	beq.n	8001874 <printRadioSettings+0x7a0>
 8001866:	f107 0308 	add.w	r3, r7, #8
 800186a:	4929      	ldr	r1, [pc, #164]	; (8001910 <printRadioSettings+0x83c>)
 800186c:	4618      	mov	r0, r3
 800186e:	f00a f991 	bl	800bb94 <siprintf>
 8001872:	e005      	b.n	8001880 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001874:	f107 0308 	add.w	r3, r7, #8
 8001878:	4926      	ldr	r1, [pc, #152]	; (8001914 <printRadioSettings+0x840>)
 800187a:	4618      	mov	r0, r3
 800187c:	f00a f98a 	bl	800bb94 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001880:	f107 0308 	add.w	r3, r7, #8
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fd2b 	bl	80002e0 <strlen>
 800188a:	4603      	mov	r3, r0
 800188c:	b29a      	uxth	r2, r3
 800188e:	f107 0108 	add.w	r1, r7, #8
 8001892:	230a      	movs	r3, #10
 8001894:	481d      	ldr	r0, [pc, #116]	; (800190c <printRadioSettings+0x838>)
 8001896:	f006 f8f7 	bl	8007a88 <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 800189a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d006      	beq.n	80018b4 <printRadioSettings+0x7e0>
 80018a6:	f107 0308 	add.w	r3, r7, #8
 80018aa:	491b      	ldr	r1, [pc, #108]	; (8001918 <printRadioSettings+0x844>)
 80018ac:	4618      	mov	r0, r3
 80018ae:	f00a f971 	bl	800bb94 <siprintf>
 80018b2:	e005      	b.n	80018c0 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 80018b4:	f107 0308 	add.w	r3, r7, #8
 80018b8:	4918      	ldr	r1, [pc, #96]	; (800191c <printRadioSettings+0x848>)
 80018ba:	4618      	mov	r0, r3
 80018bc:	f00a f96a 	bl	800bb94 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018c0:	f107 0308 	add.w	r3, r7, #8
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7fe fd0b 	bl	80002e0 <strlen>
 80018ca:	4603      	mov	r3, r0
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	f107 0108 	add.w	r1, r7, #8
 80018d2:	230a      	movs	r3, #10
 80018d4:	480d      	ldr	r0, [pc, #52]	; (800190c <printRadioSettings+0x838>)
 80018d6:	f006 f8d7 	bl	8007a88 <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80018da:	f107 0308 	add.w	r3, r7, #8
 80018de:	4910      	ldr	r1, [pc, #64]	; (8001920 <printRadioSettings+0x84c>)
 80018e0:	4618      	mov	r0, r3
 80018e2:	f00a f957 	bl	800bb94 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018e6:	f107 0308 	add.w	r3, r7, #8
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fcf8 	bl	80002e0 <strlen>
 80018f0:	4603      	mov	r3, r0
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	f107 0108 	add.w	r1, r7, #8
 80018f8:	230a      	movs	r3, #10
 80018fa:	4804      	ldr	r0, [pc, #16]	; (800190c <printRadioSettings+0x838>)
 80018fc:	f006 f8c4 	bl	8007a88 <HAL_UART_Transmit>
}
 8001900:	bf00      	nop
 8001902:	3774      	adds	r7, #116	; 0x74
 8001904:	46bd      	mov	sp, r7
 8001906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001908:	0800ce90 	.word	0x0800ce90
 800190c:	2400013c 	.word	0x2400013c
 8001910:	0800cedc 	.word	0x0800cedc
 8001914:	0800cef4 	.word	0x0800cef4
 8001918:	0800cf0c 	.word	0x0800cf0c
 800191c:	0800cf28 	.word	0x0800cf28
 8001920:	0800cafc 	.word	0x0800cafc

08001924 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8001924:	b084      	sub	sp, #16
 8001926:	b580      	push	{r7, lr}
 8001928:	af00      	add	r7, sp, #0
 800192a:	f107 0c08 	add.w	ip, r7, #8
 800192e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8001932:	4b07      	ldr	r3, [pc, #28]	; (8001950 <nrf24_DebugUART_Init+0x2c>)
 8001934:	4618      	mov	r0, r3
 8001936:	f107 0308 	add.w	r3, r7, #8
 800193a:	2290      	movs	r2, #144	; 0x90
 800193c:	4619      	mov	r1, r3
 800193e:	f009 ffec 	bl	800b91a <memcpy>
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800194a:	b004      	add	sp, #16
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	2400013c 	.word	0x2400013c

08001954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001954:	b590      	push	{r4, r7, lr}
 8001956:	b0a5      	sub	sp, #148	; 0x94
 8001958:	af22      	add	r7, sp, #136	; 0x88
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800195a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800195e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001960:	bf00      	nop
 8001962:	4b44      	ldr	r3, [pc, #272]	; (8001a74 <main+0x120>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d004      	beq.n	8001978 <main+0x24>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	1e5a      	subs	r2, r3, #1
 8001972:	607a      	str	r2, [r7, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	dcf4      	bgt.n	8001962 <main+0xe>
  if ( timeout < 0 )
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	da01      	bge.n	8001982 <main+0x2e>
  {
  Error_Handler();
 800197e:	f000 fb91 	bl	80020a4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001982:	f000 feed 	bl	8002760 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001986:	f000 f885 	bl	8001a94 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800198a:	4b3a      	ldr	r3, [pc, #232]	; (8001a74 <main+0x120>)
 800198c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001990:	4a38      	ldr	r2, [pc, #224]	; (8001a74 <main+0x120>)
 8001992:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001996:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800199a:	4b36      	ldr	r3, [pc, #216]	; (8001a74 <main+0x120>)
 800199c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a4:	603b      	str	r3, [r7, #0]
 80019a6:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80019a8:	2000      	movs	r0, #0
 80019aa:	f001 fd73 	bl	8003494 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80019ae:	2100      	movs	r1, #0
 80019b0:	2000      	movs	r0, #0
 80019b2:	f001 fd89 	bl	80034c8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80019b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019ba:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80019bc:	bf00      	nop
 80019be:	4b2d      	ldr	r3, [pc, #180]	; (8001a74 <main+0x120>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d104      	bne.n	80019d4 <main+0x80>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	1e5a      	subs	r2, r3, #1
 80019ce:	607a      	str	r2, [r7, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	dcf4      	bgt.n	80019be <main+0x6a>
if ( timeout < 0 )
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	da01      	bge.n	80019de <main+0x8a>
{
Error_Handler();
 80019da:	f000 fb63 	bl	80020a4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019de:	f000 fa7b 	bl	8001ed8 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80019e2:	f000 f8d5 	bl	8001b90 <MX_FDCAN1_Init>
  MX_USART3_UART_Init();
 80019e6:	f000 fa2b 	bl	8001e40 <MX_USART3_UART_Init>
  MX_SPI4_Init();
 80019ea:	f000 f935 	bl	8001c58 <MX_SPI4_Init>
  MX_TIM13_Init();
 80019ee:	f000 f98b 	bl	8001d08 <MX_TIM13_Init>
  MX_TIM14_Init();
 80019f2:	f000 f9d7 	bl	8001da4 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

	// NRF24 inicialization
	NRF24_begin(GPIOE, CS_W_Pin, CE_W_Pin, hspi4);
 80019f6:	4c20      	ldr	r4, [pc, #128]	; (8001a78 <main+0x124>)
 80019f8:	4668      	mov	r0, sp
 80019fa:	1d23      	adds	r3, r4, #4
 80019fc:	2284      	movs	r2, #132	; 0x84
 80019fe:	4619      	mov	r1, r3
 8001a00:	f009 ff8b 	bl	800b91a <memcpy>
 8001a04:	6823      	ldr	r3, [r4, #0]
 8001a06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a0a:	2108      	movs	r1, #8
 8001a0c:	481b      	ldr	r0, [pc, #108]	; (8001a7c <main+0x128>)
 8001a0e:	f7ff f821 	bl	8000a54 <NRF24_begin>
	nrf24_DebugUART_Init(huart3);
 8001a12:	4c1b      	ldr	r4, [pc, #108]	; (8001a80 <main+0x12c>)
 8001a14:	4668      	mov	r0, sp
 8001a16:	f104 0310 	add.w	r3, r4, #16
 8001a1a:	2280      	movs	r2, #128	; 0x80
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f009 ff7c 	bl	800b91a <memcpy>
 8001a22:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a26:	f7ff ff7d 	bl	8001924 <nrf24_DebugUART_Init>

	// NRF24 setup to read
	NRF24_setAutoAck(false);
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	f7ff fa34 	bl	8000e98 <NRF24_setAutoAck>
	NRF24_setChannel(52);
 8001a30:	2034      	movs	r0, #52	; 0x34
 8001a32:	f7ff f9a6 	bl	8000d82 <NRF24_setChannel>
	NRF24_setPayloadSize(32);
 8001a36:	2020      	movs	r0, #32
 8001a38:	f7ff f9b8 	bl	8000dac <NRF24_setPayloadSize>
	NRF24_setDataRate(RF24_2MBPS);
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	f7ff fa79 	bl	8000f34 <NRF24_setDataRate>
	NRF24_openReadingPipe(0, RxpipeAddrs);
 8001a42:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <main+0x130>)
 8001a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a48:	2000      	movs	r0, #0
 8001a4a:	f7ff f931 	bl	8000cb0 <NRF24_openReadingPipe>
	NRF24_enableDynamicPayloads();
 8001a4e:	f7ff f9d9 	bl	8000e04 <NRF24_enableDynamicPayloads>
	printRadioSettings();
 8001a52:	f7ff fb3f 	bl	80010d4 <printRadioSettings>
	NRF24_startListening();
 8001a56:	f7ff f8dd 	bl	8000c14 <NRF24_startListening>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001a5a:	f007 f90f 	bl	8008c7c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001a5e:	4a0a      	ldr	r2, [pc, #40]	; (8001a88 <main+0x134>)
 8001a60:	2100      	movs	r1, #0
 8001a62:	480a      	ldr	r0, [pc, #40]	; (8001a8c <main+0x138>)
 8001a64:	f007 f954 	bl	8008d10 <osThreadNew>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	4a09      	ldr	r2, [pc, #36]	; (8001a90 <main+0x13c>)
 8001a6c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001a6e:	f007 f929 	bl	8008cc4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a72:	e7fe      	b.n	8001a72 <main+0x11e>
 8001a74:	58024400 	.word	0x58024400
 8001a78:	2400026c 	.word	0x2400026c
 8001a7c:	58021000 	.word	0x58021000
 8001a80:	2400038c 	.word	0x2400038c
 8001a84:	24000008 	.word	0x24000008
 8001a88:	0800d0d0 	.word	0x0800d0d0
 8001a8c:	08002029 	.word	0x08002029
 8001a90:	2400041c 	.word	0x2400041c

08001a94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b09c      	sub	sp, #112	; 0x70
 8001a98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a9e:	224c      	movs	r2, #76	; 0x4c
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f009 ff47 	bl	800b936 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aa8:	1d3b      	adds	r3, r7, #4
 8001aaa:	2220      	movs	r2, #32
 8001aac:	2100      	movs	r1, #0
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f009 ff41 	bl	800b936 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001ab4:	2004      	movs	r0, #4
 8001ab6:	f001 fd1b 	bl	80034f0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001aba:	2300      	movs	r3, #0
 8001abc:	603b      	str	r3, [r7, #0]
 8001abe:	4b32      	ldr	r3, [pc, #200]	; (8001b88 <SystemClock_Config+0xf4>)
 8001ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac2:	4a31      	ldr	r2, [pc, #196]	; (8001b88 <SystemClock_Config+0xf4>)
 8001ac4:	f023 0301 	bic.w	r3, r3, #1
 8001ac8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001aca:	4b2f      	ldr	r3, [pc, #188]	; (8001b88 <SystemClock_Config+0xf4>)
 8001acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	603b      	str	r3, [r7, #0]
 8001ad4:	4b2d      	ldr	r3, [pc, #180]	; (8001b8c <SystemClock_Config+0xf8>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001adc:	4a2b      	ldr	r2, [pc, #172]	; (8001b8c <SystemClock_Config+0xf8>)
 8001ade:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae2:	6193      	str	r3, [r2, #24]
 8001ae4:	4b29      	ldr	r3, [pc, #164]	; (8001b8c <SystemClock_Config+0xf8>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001aec:	603b      	str	r3, [r7, #0]
 8001aee:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001af0:	bf00      	nop
 8001af2:	4b26      	ldr	r3, [pc, #152]	; (8001b8c <SystemClock_Config+0xf8>)
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001afe:	d1f8      	bne.n	8001af2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b00:	2302      	movs	r3, #2
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001b04:	2301      	movs	r3, #1
 8001b06:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b08:	2340      	movs	r3, #64	; 0x40
 8001b0a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b10:	2300      	movs	r3, #0
 8001b12:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b14:	2304      	movs	r3, #4
 8001b16:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 8001b18:	2309      	movs	r3, #9
 8001b1a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001b20:	2303      	movs	r3, #3
 8001b22:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b24:	2302      	movs	r3, #2
 8001b26:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001b28:	230c      	movs	r3, #12
 8001b2a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8001b30:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b34:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f001 fd32 	bl	80035a4 <HAL_RCC_OscConfig>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001b46:	f000 faad 	bl	80020a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b4a:	233f      	movs	r3, #63	; 0x3f
 8001b4c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001b56:	2300      	movs	r3, #0
 8001b58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001b5e:	2340      	movs	r3, #64	; 0x40
 8001b60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001b62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b66:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b6c:	1d3b      	adds	r3, r7, #4
 8001b6e:	2101      	movs	r1, #1
 8001b70:	4618      	mov	r0, r3
 8001b72:	f002 f945 	bl	8003e00 <HAL_RCC_ClockConfig>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8001b7c:	f000 fa92 	bl	80020a4 <Error_Handler>
  }
}
 8001b80:	bf00      	nop
 8001b82:	3770      	adds	r7, #112	; 0x70
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	58000400 	.word	0x58000400
 8001b8c:	58024800 	.word	0x58024800

08001b90 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001b94:	4b2e      	ldr	r3, [pc, #184]	; (8001c50 <MX_FDCAN1_Init+0xc0>)
 8001b96:	4a2f      	ldr	r2, [pc, #188]	; (8001c54 <MX_FDCAN1_Init+0xc4>)
 8001b98:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001b9a:	4b2d      	ldr	r3, [pc, #180]	; (8001c50 <MX_FDCAN1_Init+0xc0>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001ba0:	4b2b      	ldr	r3, [pc, #172]	; (8001c50 <MX_FDCAN1_Init+0xc0>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001ba6:	4b2a      	ldr	r3, [pc, #168]	; (8001c50 <MX_FDCAN1_Init+0xc0>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001bac:	4b28      	ldr	r3, [pc, #160]	; (8001c50 <MX_FDCAN1_Init+0xc0>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001bb2:	4b27      	ldr	r3, [pc, #156]	; (8001c50 <MX_FDCAN1_Init+0xc0>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8001bb8:	4b25      	ldr	r3, [pc, #148]	; (8001c50 <MX_FDCAN1_Init+0xc0>)
 8001bba:	2210      	movs	r2, #16
 8001bbc:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001bbe:	4b24      	ldr	r3, [pc, #144]	; (8001c50 <MX_FDCAN1_Init+0xc0>)
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001bc4:	4b22      	ldr	r3, [pc, #136]	; (8001c50 <MX_FDCAN1_Init+0xc0>)
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001bca:	4b21      	ldr	r3, [pc, #132]	; (8001c50 <MX_FDCAN1_Init+0xc0>)
 8001bcc:	2202      	movs	r2, #2
 8001bce:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001bd0:	4b1f      	ldr	r3, [pc, #124]	; (8001c50 <MX_FDCAN1_Init+0xc0>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001bd6:	4b1e      	ldr	r3, [pc, #120]	; (8001c50 <MX_FDCAN1_Init+0xc0>)
 8001bd8:	2201      	movs	r2, #1
 8001bda:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001bdc:	4b1c      	ldr	r3, [pc, #112]	; (8001c50 <MX_FDCAN1_Init+0xc0>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001be2:	4b1b      	ldr	r3, [pc, #108]	; (8001c50 <MX_FDCAN1_Init+0xc0>)
 8001be4:	2201      	movs	r2, #1
 8001be6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001be8:	4b19      	ldr	r3, [pc, #100]	; (8001c50 <MX_FDCAN1_Init+0xc0>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8001bee:	4b18      	ldr	r3, [pc, #96]	; (8001c50 <MX_FDCAN1_Init+0xc0>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001bf4:	4b16      	ldr	r3, [pc, #88]	; (8001c50 <MX_FDCAN1_Init+0xc0>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8001bfa:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <MX_FDCAN1_Init+0xc0>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001c00:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <MX_FDCAN1_Init+0xc0>)
 8001c02:	2204      	movs	r2, #4
 8001c04:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001c06:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <MX_FDCAN1_Init+0xc0>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001c0c:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <MX_FDCAN1_Init+0xc0>)
 8001c0e:	2204      	movs	r2, #4
 8001c10:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001c12:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <MX_FDCAN1_Init+0xc0>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001c18:	4b0d      	ldr	r3, [pc, #52]	; (8001c50 <MX_FDCAN1_Init+0xc0>)
 8001c1a:	2204      	movs	r2, #4
 8001c1c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001c1e:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <MX_FDCAN1_Init+0xc0>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001c24:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <MX_FDCAN1_Init+0xc0>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8001c2a:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <MX_FDCAN1_Init+0xc0>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001c30:	4b07      	ldr	r3, [pc, #28]	; (8001c50 <MX_FDCAN1_Init+0xc0>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001c36:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <MX_FDCAN1_Init+0xc0>)
 8001c38:	2204      	movs	r2, #4
 8001c3a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001c3c:	4804      	ldr	r0, [pc, #16]	; (8001c50 <MX_FDCAN1_Init+0xc0>)
 8001c3e:	f000 fefb 	bl	8002a38 <HAL_FDCAN_Init>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8001c48:	f000 fa2c 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001c4c:	bf00      	nop
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	240001cc 	.word	0x240001cc
 8001c54:	4000a000 	.word	0x4000a000

08001c58 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001c5c:	4b28      	ldr	r3, [pc, #160]	; (8001d00 <MX_SPI4_Init+0xa8>)
 8001c5e:	4a29      	ldr	r2, [pc, #164]	; (8001d04 <MX_SPI4_Init+0xac>)
 8001c60:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001c62:	4b27      	ldr	r3, [pc, #156]	; (8001d00 <MX_SPI4_Init+0xa8>)
 8001c64:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001c68:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001c6a:	4b25      	ldr	r3, [pc, #148]	; (8001d00 <MX_SPI4_Init+0xa8>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c70:	4b23      	ldr	r3, [pc, #140]	; (8001d00 <MX_SPI4_Init+0xa8>)
 8001c72:	2207      	movs	r2, #7
 8001c74:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001c76:	4b22      	ldr	r3, [pc, #136]	; (8001d00 <MX_SPI4_Init+0xa8>)
 8001c78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c7c:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001c7e:	4b20      	ldr	r3, [pc, #128]	; (8001d00 <MX_SPI4_Init+0xa8>)
 8001c80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c84:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001c86:	4b1e      	ldr	r3, [pc, #120]	; (8001d00 <MX_SPI4_Init+0xa8>)
 8001c88:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c8c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c8e:	4b1c      	ldr	r3, [pc, #112]	; (8001d00 <MX_SPI4_Init+0xa8>)
 8001c90:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001c94:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c96:	4b1a      	ldr	r3, [pc, #104]	; (8001d00 <MX_SPI4_Init+0xa8>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c9c:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <MX_SPI4_Init+0xa8>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ca2:	4b17      	ldr	r3, [pc, #92]	; (8001d00 <MX_SPI4_Init+0xa8>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001ca8:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <MX_SPI4_Init+0xa8>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001cae:	4b14      	ldr	r3, [pc, #80]	; (8001d00 <MX_SPI4_Init+0xa8>)
 8001cb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cb4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001cb6:	4b12      	ldr	r3, [pc, #72]	; (8001d00 <MX_SPI4_Init+0xa8>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001cbc:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <MX_SPI4_Init+0xa8>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001cc2:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <MX_SPI4_Init+0xa8>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001cc8:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <MX_SPI4_Init+0xa8>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001cce:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <MX_SPI4_Init+0xa8>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001cd4:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <MX_SPI4_Init+0xa8>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001cda:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <MX_SPI4_Init+0xa8>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001ce0:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <MX_SPI4_Init+0xa8>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001ce6:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <MX_SPI4_Init+0xa8>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001cec:	4804      	ldr	r0, [pc, #16]	; (8001d00 <MX_SPI4_Init+0xa8>)
 8001cee:	f003 ffbd 	bl	8005c6c <HAL_SPI_Init>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_SPI4_Init+0xa4>
  {
    Error_Handler();
 8001cf8:	f000 f9d4 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001cfc:	bf00      	nop
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	2400026c 	.word	0x2400026c
 8001d04:	40013400 	.word	0x40013400

08001d08 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d0e:	1d3b      	adds	r3, r7, #4
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
 8001d1c:	615a      	str	r2, [r3, #20]
 8001d1e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001d20:	4b1e      	ldr	r3, [pc, #120]	; (8001d9c <MX_TIM13_Init+0x94>)
 8001d22:	4a1f      	ldr	r2, [pc, #124]	; (8001da0 <MX_TIM13_Init+0x98>)
 8001d24:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8001d26:	4b1d      	ldr	r3, [pc, #116]	; (8001d9c <MX_TIM13_Init+0x94>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d2c:	4b1b      	ldr	r3, [pc, #108]	; (8001d9c <MX_TIM13_Init+0x94>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8001d32:	4b1a      	ldr	r3, [pc, #104]	; (8001d9c <MX_TIM13_Init+0x94>)
 8001d34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d38:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d3a:	4b18      	ldr	r3, [pc, #96]	; (8001d9c <MX_TIM13_Init+0x94>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d40:	4b16      	ldr	r3, [pc, #88]	; (8001d9c <MX_TIM13_Init+0x94>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001d46:	4815      	ldr	r0, [pc, #84]	; (8001d9c <MX_TIM13_Init+0x94>)
 8001d48:	f004 ff35 	bl	8006bb6 <HAL_TIM_Base_Init>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001d52:	f000 f9a7 	bl	80020a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001d56:	4811      	ldr	r0, [pc, #68]	; (8001d9c <MX_TIM13_Init+0x94>)
 8001d58:	f004 fffc 	bl	8006d54 <HAL_TIM_PWM_Init>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001d62:	f000 f99f 	bl	80020a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d66:	2360      	movs	r3, #96	; 0x60
 8001d68:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d72:	2300      	movs	r3, #0
 8001d74:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d76:	1d3b      	adds	r3, r7, #4
 8001d78:	2200      	movs	r2, #0
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4807      	ldr	r0, [pc, #28]	; (8001d9c <MX_TIM13_Init+0x94>)
 8001d7e:	f005 f969 	bl	8007054 <HAL_TIM_PWM_ConfigChannel>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001d88:	f000 f98c 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001d8c:	4803      	ldr	r0, [pc, #12]	; (8001d9c <MX_TIM13_Init+0x94>)
 8001d8e:	f000 fac3 	bl	8002318 <HAL_TIM_MspPostInit>

}
 8001d92:	bf00      	nop
 8001d94:	3720      	adds	r7, #32
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	240002f4 	.word	0x240002f4
 8001da0:	40001c00 	.word	0x40001c00

08001da4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b088      	sub	sp, #32
 8001da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001daa:	1d3b      	adds	r3, r7, #4
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	611a      	str	r2, [r3, #16]
 8001db8:	615a      	str	r2, [r3, #20]
 8001dba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001dbc:	4b1e      	ldr	r3, [pc, #120]	; (8001e38 <MX_TIM14_Init+0x94>)
 8001dbe:	4a1f      	ldr	r2, [pc, #124]	; (8001e3c <MX_TIM14_Init+0x98>)
 8001dc0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8001dc2:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <MX_TIM14_Init+0x94>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc8:	4b1b      	ldr	r3, [pc, #108]	; (8001e38 <MX_TIM14_Init+0x94>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001dce:	4b1a      	ldr	r3, [pc, #104]	; (8001e38 <MX_TIM14_Init+0x94>)
 8001dd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dd4:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dd6:	4b18      	ldr	r3, [pc, #96]	; (8001e38 <MX_TIM14_Init+0x94>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ddc:	4b16      	ldr	r3, [pc, #88]	; (8001e38 <MX_TIM14_Init+0x94>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001de2:	4815      	ldr	r0, [pc, #84]	; (8001e38 <MX_TIM14_Init+0x94>)
 8001de4:	f004 fee7 	bl	8006bb6 <HAL_TIM_Base_Init>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8001dee:	f000 f959 	bl	80020a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001df2:	4811      	ldr	r0, [pc, #68]	; (8001e38 <MX_TIM14_Init+0x94>)
 8001df4:	f004 ffae 	bl	8006d54 <HAL_TIM_PWM_Init>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8001dfe:	f000 f951 	bl	80020a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e02:	2360      	movs	r3, #96	; 0x60
 8001e04:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e12:	1d3b      	adds	r3, r7, #4
 8001e14:	2200      	movs	r2, #0
 8001e16:	4619      	mov	r1, r3
 8001e18:	4807      	ldr	r0, [pc, #28]	; (8001e38 <MX_TIM14_Init+0x94>)
 8001e1a:	f005 f91b 	bl	8007054 <HAL_TIM_PWM_ConfigChannel>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001e24:	f000 f93e 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001e28:	4803      	ldr	r0, [pc, #12]	; (8001e38 <MX_TIM14_Init+0x94>)
 8001e2a:	f000 fa75 	bl	8002318 <HAL_TIM_MspPostInit>

}
 8001e2e:	bf00      	nop
 8001e30:	3720      	adds	r7, #32
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	24000340 	.word	0x24000340
 8001e3c:	40002000 	.word	0x40002000

08001e40 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e44:	4b22      	ldr	r3, [pc, #136]	; (8001ed0 <MX_USART3_UART_Init+0x90>)
 8001e46:	4a23      	ldr	r2, [pc, #140]	; (8001ed4 <MX_USART3_UART_Init+0x94>)
 8001e48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e4a:	4b21      	ldr	r3, [pc, #132]	; (8001ed0 <MX_USART3_UART_Init+0x90>)
 8001e4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e52:	4b1f      	ldr	r3, [pc, #124]	; (8001ed0 <MX_USART3_UART_Init+0x90>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e58:	4b1d      	ldr	r3, [pc, #116]	; (8001ed0 <MX_USART3_UART_Init+0x90>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e5e:	4b1c      	ldr	r3, [pc, #112]	; (8001ed0 <MX_USART3_UART_Init+0x90>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e64:	4b1a      	ldr	r3, [pc, #104]	; (8001ed0 <MX_USART3_UART_Init+0x90>)
 8001e66:	220c      	movs	r2, #12
 8001e68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e6a:	4b19      	ldr	r3, [pc, #100]	; (8001ed0 <MX_USART3_UART_Init+0x90>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e70:	4b17      	ldr	r3, [pc, #92]	; (8001ed0 <MX_USART3_UART_Init+0x90>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e76:	4b16      	ldr	r3, [pc, #88]	; (8001ed0 <MX_USART3_UART_Init+0x90>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e7c:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <MX_USART3_UART_Init+0x90>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e82:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <MX_USART3_UART_Init+0x90>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e88:	4811      	ldr	r0, [pc, #68]	; (8001ed0 <MX_USART3_UART_Init+0x90>)
 8001e8a:	f005 fdad 	bl	80079e8 <HAL_UART_Init>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001e94:	f000 f906 	bl	80020a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e98:	2100      	movs	r1, #0
 8001e9a:	480d      	ldr	r0, [pc, #52]	; (8001ed0 <MX_USART3_UART_Init+0x90>)
 8001e9c:	f006 fde0 	bl	8008a60 <HAL_UARTEx_SetTxFifoThreshold>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001ea6:	f000 f8fd 	bl	80020a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eaa:	2100      	movs	r1, #0
 8001eac:	4808      	ldr	r0, [pc, #32]	; (8001ed0 <MX_USART3_UART_Init+0x90>)
 8001eae:	f006 fe15 	bl	8008adc <HAL_UARTEx_SetRxFifoThreshold>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001eb8:	f000 f8f4 	bl	80020a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001ebc:	4804      	ldr	r0, [pc, #16]	; (8001ed0 <MX_USART3_UART_Init+0x90>)
 8001ebe:	f006 fd96 	bl	80089ee <HAL_UARTEx_DisableFifoMode>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001ec8:	f000 f8ec 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ecc:	bf00      	nop
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	2400038c 	.word	0x2400038c
 8001ed4:	40004800 	.word	0x40004800

08001ed8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08c      	sub	sp, #48	; 0x30
 8001edc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ede:	f107 031c 	add.w	r3, r7, #28
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	605a      	str	r2, [r3, #4]
 8001ee8:	609a      	str	r2, [r3, #8]
 8001eea:	60da      	str	r2, [r3, #12]
 8001eec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001eee:	4b4a      	ldr	r3, [pc, #296]	; (8002018 <MX_GPIO_Init+0x140>)
 8001ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ef4:	4a48      	ldr	r2, [pc, #288]	; (8002018 <MX_GPIO_Init+0x140>)
 8001ef6:	f043 0310 	orr.w	r3, r3, #16
 8001efa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001efe:	4b46      	ldr	r3, [pc, #280]	; (8002018 <MX_GPIO_Init+0x140>)
 8001f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f04:	f003 0310 	and.w	r3, r3, #16
 8001f08:	61bb      	str	r3, [r7, #24]
 8001f0a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f0c:	4b42      	ldr	r3, [pc, #264]	; (8002018 <MX_GPIO_Init+0x140>)
 8001f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f12:	4a41      	ldr	r2, [pc, #260]	; (8002018 <MX_GPIO_Init+0x140>)
 8001f14:	f043 0304 	orr.w	r3, r3, #4
 8001f18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f1c:	4b3e      	ldr	r3, [pc, #248]	; (8002018 <MX_GPIO_Init+0x140>)
 8001f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f22:	f003 0304 	and.w	r3, r3, #4
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f2a:	4b3b      	ldr	r3, [pc, #236]	; (8002018 <MX_GPIO_Init+0x140>)
 8001f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f30:	4a39      	ldr	r2, [pc, #228]	; (8002018 <MX_GPIO_Init+0x140>)
 8001f32:	f043 0320 	orr.w	r3, r3, #32
 8001f36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f3a:	4b37      	ldr	r3, [pc, #220]	; (8002018 <MX_GPIO_Init+0x140>)
 8001f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f40:	f003 0320 	and.w	r3, r3, #32
 8001f44:	613b      	str	r3, [r7, #16]
 8001f46:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f48:	4b33      	ldr	r3, [pc, #204]	; (8002018 <MX_GPIO_Init+0x140>)
 8001f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f4e:	4a32      	ldr	r2, [pc, #200]	; (8002018 <MX_GPIO_Init+0x140>)
 8001f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f58:	4b2f      	ldr	r3, [pc, #188]	; (8002018 <MX_GPIO_Init+0x140>)
 8001f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f66:	4b2c      	ldr	r3, [pc, #176]	; (8002018 <MX_GPIO_Init+0x140>)
 8001f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f6c:	4a2a      	ldr	r2, [pc, #168]	; (8002018 <MX_GPIO_Init+0x140>)
 8001f6e:	f043 0302 	orr.w	r3, r3, #2
 8001f72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f76:	4b28      	ldr	r3, [pc, #160]	; (8002018 <MX_GPIO_Init+0x140>)
 8001f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f84:	4b24      	ldr	r3, [pc, #144]	; (8002018 <MX_GPIO_Init+0x140>)
 8001f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f8a:	4a23      	ldr	r2, [pc, #140]	; (8002018 <MX_GPIO_Init+0x140>)
 8001f8c:	f043 0308 	orr.w	r3, r3, #8
 8001f90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f94:	4b20      	ldr	r3, [pc, #128]	; (8002018 <MX_GPIO_Init+0x140>)
 8001f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	607b      	str	r3, [r7, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_W_Pin|CS_I_Pin|CE_W_Pin, GPIO_PIN_RESET);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8001fa8:	481c      	ldr	r0, [pc, #112]	; (800201c <MX_GPIO_Init+0x144>)
 8001faa:	f001 fa59 	bl	8003460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f244 0101 	movw	r1, #16385	; 0x4001
 8001fb4:	481a      	ldr	r0, [pc, #104]	; (8002020 <MX_GPIO_Init+0x148>)
 8001fb6:	f001 fa53 	bl	8003460 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_W_Pin CS_I_Pin CE_W_Pin */
  GPIO_InitStruct.Pin = CS_W_Pin|CS_I_Pin|CE_W_Pin;
 8001fba:	f44f 6383 	mov.w	r3, #1048	; 0x418
 8001fbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fcc:	f107 031c 	add.w	r3, r7, #28
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4812      	ldr	r0, [pc, #72]	; (800201c <MX_GPIO_Init+0x144>)
 8001fd4:	f001 f894 	bl	8003100 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001fd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001fe6:	f107 031c 	add.w	r3, r7, #28
 8001fea:	4619      	mov	r1, r3
 8001fec:	480d      	ldr	r0, [pc, #52]	; (8002024 <MX_GPIO_Init+0x14c>)
 8001fee:	f001 f887 	bl	8003100 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001ff2:	f244 0301 	movw	r3, #16385	; 0x4001
 8001ff6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002000:	2300      	movs	r3, #0
 8002002:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002004:	f107 031c 	add.w	r3, r7, #28
 8002008:	4619      	mov	r1, r3
 800200a:	4805      	ldr	r0, [pc, #20]	; (8002020 <MX_GPIO_Init+0x148>)
 800200c:	f001 f878 	bl	8003100 <HAL_GPIO_Init>

}
 8002010:	bf00      	nop
 8002012:	3730      	adds	r7, #48	; 0x30
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	58024400 	.word	0x58024400
 800201c:	58021000 	.word	0x58021000
 8002020:	58020400 	.word	0x58020400
 8002024:	58020800 	.word	0x58020800

08002028 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800202a:	b087      	sub	sp, #28
 800202c:	af04      	add	r7, sp, #16
 800202e:	6078      	str	r0, [r7, #4]
	printf("Gyroscope data: X %d / Y %d / Z %d\n\r",gyroX_data,gyroY_data,gyroZ_data);
    //osDelay(1000);
    //printf("After\n\r");
    */

    if(NRF24_available()){
 8002030:	f7fe fe16 	bl	8000c60 <NRF24_available>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0fa      	beq.n	8002030 <StartDefaultTask+0x8>
		NRF24_read(myRxData, 32);
 800203a:	2120      	movs	r1, #32
 800203c:	480f      	ldr	r0, [pc, #60]	; (800207c <StartDefaultTask+0x54>)
 800203e:	f7fe fe17 	bl	8000c70 <NRF24_read>
		printf(myRxData[0],myRxData[1],myRxData[2],myRxData[3],myRxData[4],myRxData[5],myRxData[6]);
 8002042:	4b0e      	ldr	r3, [pc, #56]	; (800207c <StartDefaultTask+0x54>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	4b0c      	ldr	r3, [pc, #48]	; (800207c <StartDefaultTask+0x54>)
 800204a:	785b      	ldrb	r3, [r3, #1]
 800204c:	461c      	mov	r4, r3
 800204e:	4b0b      	ldr	r3, [pc, #44]	; (800207c <StartDefaultTask+0x54>)
 8002050:	789b      	ldrb	r3, [r3, #2]
 8002052:	461d      	mov	r5, r3
 8002054:	4b09      	ldr	r3, [pc, #36]	; (800207c <StartDefaultTask+0x54>)
 8002056:	78db      	ldrb	r3, [r3, #3]
 8002058:	461e      	mov	r6, r3
 800205a:	4b08      	ldr	r3, [pc, #32]	; (800207c <StartDefaultTask+0x54>)
 800205c:	791b      	ldrb	r3, [r3, #4]
 800205e:	461a      	mov	r2, r3
 8002060:	4b06      	ldr	r3, [pc, #24]	; (800207c <StartDefaultTask+0x54>)
 8002062:	795b      	ldrb	r3, [r3, #5]
 8002064:	4619      	mov	r1, r3
 8002066:	4b05      	ldr	r3, [pc, #20]	; (800207c <StartDefaultTask+0x54>)
 8002068:	799b      	ldrb	r3, [r3, #6]
 800206a:	9302      	str	r3, [sp, #8]
 800206c:	9101      	str	r1, [sp, #4]
 800206e:	9200      	str	r2, [sp, #0]
 8002070:	4633      	mov	r3, r6
 8002072:	462a      	mov	r2, r5
 8002074:	4621      	mov	r1, r4
 8002076:	f009 fcfb 	bl	800ba70 <iprintf>
    if(NRF24_available()){
 800207a:	e7d9      	b.n	8002030 <StartDefaultTask+0x8>
 800207c:	24000420 	.word	0x24000420

08002080 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a04      	ldr	r2, [pc, #16]	; (80020a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d101      	bne.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002092:	f000 fba1 	bl	80027d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40001400 	.word	0x40001400

080020a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020a8:	b672      	cpsid	i
}
 80020aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020ac:	e7fe      	b.n	80020ac <Error_Handler+0x8>
	...

080020b0 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80020b8:	1d39      	adds	r1, r7, #4
 80020ba:	f04f 33ff 	mov.w	r3, #4294967295
 80020be:	2201      	movs	r2, #1
 80020c0:	4803      	ldr	r0, [pc, #12]	; (80020d0 <__io_putchar+0x20>)
 80020c2:	f005 fce1 	bl	8007a88 <HAL_UART_Transmit>
  return ch;
 80020c6:	687b      	ldr	r3, [r7, #4]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	2400038c 	.word	0x2400038c

080020d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020da:	4b0c      	ldr	r3, [pc, #48]	; (800210c <HAL_MspInit+0x38>)
 80020dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80020e0:	4a0a      	ldr	r2, [pc, #40]	; (800210c <HAL_MspInit+0x38>)
 80020e2:	f043 0302 	orr.w	r3, r3, #2
 80020e6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80020ea:	4b08      	ldr	r3, [pc, #32]	; (800210c <HAL_MspInit+0x38>)
 80020ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	607b      	str	r3, [r7, #4]
 80020f6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020f8:	2200      	movs	r2, #0
 80020fa:	210f      	movs	r1, #15
 80020fc:	f06f 0001 	mvn.w	r0, #1
 8002100:	f000 fc72 	bl	80029e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002104:	bf00      	nop
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	58024400 	.word	0x58024400

08002110 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b0b8      	sub	sp, #224	; 0xe0
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002118:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	60da      	str	r2, [r3, #12]
 8002126:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002128:	f107 0310 	add.w	r3, r7, #16
 800212c:	22bc      	movs	r2, #188	; 0xbc
 800212e:	2100      	movs	r1, #0
 8002130:	4618      	mov	r0, r3
 8002132:	f009 fc00 	bl	800b936 <memset>
  if(hfdcan->Instance==FDCAN1)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a25      	ldr	r2, [pc, #148]	; (80021d0 <HAL_FDCAN_MspInit+0xc0>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d142      	bne.n	80021c6 <HAL_FDCAN_MspInit+0xb6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002140:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002144:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002146:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800214a:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800214c:	f107 0310 	add.w	r3, r7, #16
 8002150:	4618      	mov	r0, r3
 8002152:	f002 fa23 	bl	800459c <HAL_RCCEx_PeriphCLKConfig>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800215c:	f7ff ffa2 	bl	80020a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002160:	4b1c      	ldr	r3, [pc, #112]	; (80021d4 <HAL_FDCAN_MspInit+0xc4>)
 8002162:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002166:	4a1b      	ldr	r2, [pc, #108]	; (80021d4 <HAL_FDCAN_MspInit+0xc4>)
 8002168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800216c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002170:	4b18      	ldr	r3, [pc, #96]	; (80021d4 <HAL_FDCAN_MspInit+0xc4>)
 8002172:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800217e:	4b15      	ldr	r3, [pc, #84]	; (80021d4 <HAL_FDCAN_MspInit+0xc4>)
 8002180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002184:	4a13      	ldr	r2, [pc, #76]	; (80021d4 <HAL_FDCAN_MspInit+0xc4>)
 8002186:	f043 0308 	orr.w	r3, r3, #8
 800218a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800218e:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <HAL_FDCAN_MspInit+0xc4>)
 8002190:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002194:	f003 0308 	and.w	r3, r3, #8
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800219c:	2303      	movs	r3, #3
 800219e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a2:	2302      	movs	r3, #2
 80021a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ae:	2300      	movs	r3, #0
 80021b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80021b4:	2309      	movs	r3, #9
 80021b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021ba:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80021be:	4619      	mov	r1, r3
 80021c0:	4805      	ldr	r0, [pc, #20]	; (80021d8 <HAL_FDCAN_MspInit+0xc8>)
 80021c2:	f000 ff9d 	bl	8003100 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80021c6:	bf00      	nop
 80021c8:	37e0      	adds	r7, #224	; 0xe0
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	4000a000 	.word	0x4000a000
 80021d4:	58024400 	.word	0x58024400
 80021d8:	58020c00 	.word	0x58020c00

080021dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b0b8      	sub	sp, #224	; 0xe0
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	60da      	str	r2, [r3, #12]
 80021f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021f4:	f107 0310 	add.w	r3, r7, #16
 80021f8:	22bc      	movs	r2, #188	; 0xbc
 80021fa:	2100      	movs	r1, #0
 80021fc:	4618      	mov	r0, r3
 80021fe:	f009 fb9a 	bl	800b936 <memset>
  if(hspi->Instance==SPI4)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a24      	ldr	r2, [pc, #144]	; (8002298 <HAL_SPI_MspInit+0xbc>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d141      	bne.n	8002290 <HAL_SPI_MspInit+0xb4>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 800220c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002210:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8002212:	2300      	movs	r3, #0
 8002214:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002216:	f107 0310 	add.w	r3, r7, #16
 800221a:	4618      	mov	r0, r3
 800221c:	f002 f9be 	bl	800459c <HAL_RCCEx_PeriphCLKConfig>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8002226:	f7ff ff3d 	bl	80020a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800222a:	4b1c      	ldr	r3, [pc, #112]	; (800229c <HAL_SPI_MspInit+0xc0>)
 800222c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002230:	4a1a      	ldr	r2, [pc, #104]	; (800229c <HAL_SPI_MspInit+0xc0>)
 8002232:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002236:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800223a:	4b18      	ldr	r3, [pc, #96]	; (800229c <HAL_SPI_MspInit+0xc0>)
 800223c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002240:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002248:	4b14      	ldr	r3, [pc, #80]	; (800229c <HAL_SPI_MspInit+0xc0>)
 800224a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800224e:	4a13      	ldr	r2, [pc, #76]	; (800229c <HAL_SPI_MspInit+0xc0>)
 8002250:	f043 0310 	orr.w	r3, r3, #16
 8002254:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002258:	4b10      	ldr	r3, [pc, #64]	; (800229c <HAL_SPI_MspInit+0xc0>)
 800225a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800225e:	f003 0310 	and.w	r3, r3, #16
 8002262:	60bb      	str	r3, [r7, #8]
 8002264:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002266:	2364      	movs	r3, #100	; 0x64
 8002268:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226c:	2302      	movs	r3, #2
 800226e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002272:	2300      	movs	r3, #0
 8002274:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002278:	2300      	movs	r3, #0
 800227a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800227e:	2305      	movs	r3, #5
 8002280:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002284:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002288:	4619      	mov	r1, r3
 800228a:	4805      	ldr	r0, [pc, #20]	; (80022a0 <HAL_SPI_MspInit+0xc4>)
 800228c:	f000 ff38 	bl	8003100 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8002290:	bf00      	nop
 8002292:	37e0      	adds	r7, #224	; 0xe0
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40013400 	.word	0x40013400
 800229c:	58024400 	.word	0x58024400
 80022a0:	58021000 	.word	0x58021000

080022a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a16      	ldr	r2, [pc, #88]	; (800230c <HAL_TIM_Base_MspInit+0x68>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d10f      	bne.n	80022d6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80022b6:	4b16      	ldr	r3, [pc, #88]	; (8002310 <HAL_TIM_Base_MspInit+0x6c>)
 80022b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022bc:	4a14      	ldr	r2, [pc, #80]	; (8002310 <HAL_TIM_Base_MspInit+0x6c>)
 80022be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022c6:	4b12      	ldr	r3, [pc, #72]	; (8002310 <HAL_TIM_Base_MspInit+0x6c>)
 80022c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80022d4:	e013      	b.n	80022fe <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM14)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a0e      	ldr	r2, [pc, #56]	; (8002314 <HAL_TIM_Base_MspInit+0x70>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d10e      	bne.n	80022fe <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80022e0:	4b0b      	ldr	r3, [pc, #44]	; (8002310 <HAL_TIM_Base_MspInit+0x6c>)
 80022e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022e6:	4a0a      	ldr	r2, [pc, #40]	; (8002310 <HAL_TIM_Base_MspInit+0x6c>)
 80022e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022f0:	4b07      	ldr	r3, [pc, #28]	; (8002310 <HAL_TIM_Base_MspInit+0x6c>)
 80022f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fa:	60bb      	str	r3, [r7, #8]
 80022fc:	68bb      	ldr	r3, [r7, #8]
}
 80022fe:	bf00      	nop
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	40001c00 	.word	0x40001c00
 8002310:	58024400 	.word	0x58024400
 8002314:	40002000 	.word	0x40002000

08002318 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08a      	sub	sp, #40	; 0x28
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002320:	f107 0314 	add.w	r3, r7, #20
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a26      	ldr	r2, [pc, #152]	; (80023d0 <HAL_TIM_MspPostInit+0xb8>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d120      	bne.n	800237c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800233a:	4b26      	ldr	r3, [pc, #152]	; (80023d4 <HAL_TIM_MspPostInit+0xbc>)
 800233c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002340:	4a24      	ldr	r2, [pc, #144]	; (80023d4 <HAL_TIM_MspPostInit+0xbc>)
 8002342:	f043 0320 	orr.w	r3, r3, #32
 8002346:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800234a:	4b22      	ldr	r3, [pc, #136]	; (80023d4 <HAL_TIM_MspPostInit+0xbc>)
 800234c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002350:	f003 0320 	and.w	r3, r3, #32
 8002354:	613b      	str	r3, [r7, #16]
 8002356:	693b      	ldr	r3, [r7, #16]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002358:	f44f 7380 	mov.w	r3, #256	; 0x100
 800235c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235e:	2302      	movs	r3, #2
 8002360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002366:	2300      	movs	r3, #0
 8002368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800236a:	2309      	movs	r3, #9
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800236e:	f107 0314 	add.w	r3, r7, #20
 8002372:	4619      	mov	r1, r3
 8002374:	4818      	ldr	r0, [pc, #96]	; (80023d8 <HAL_TIM_MspPostInit+0xc0>)
 8002376:	f000 fec3 	bl	8003100 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 800237a:	e024      	b.n	80023c6 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM14)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a16      	ldr	r2, [pc, #88]	; (80023dc <HAL_TIM_MspPostInit+0xc4>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d11f      	bne.n	80023c6 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002386:	4b13      	ldr	r3, [pc, #76]	; (80023d4 <HAL_TIM_MspPostInit+0xbc>)
 8002388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800238c:	4a11      	ldr	r2, [pc, #68]	; (80023d4 <HAL_TIM_MspPostInit+0xbc>)
 800238e:	f043 0320 	orr.w	r3, r3, #32
 8002392:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002396:	4b0f      	ldr	r3, [pc, #60]	; (80023d4 <HAL_TIM_MspPostInit+0xbc>)
 8002398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800239c:	f003 0320 	and.w	r3, r3, #32
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80023a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023aa:	2302      	movs	r3, #2
 80023ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b2:	2300      	movs	r3, #0
 80023b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80023b6:	2309      	movs	r3, #9
 80023b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80023ba:	f107 0314 	add.w	r3, r7, #20
 80023be:	4619      	mov	r1, r3
 80023c0:	4805      	ldr	r0, [pc, #20]	; (80023d8 <HAL_TIM_MspPostInit+0xc0>)
 80023c2:	f000 fe9d 	bl	8003100 <HAL_GPIO_Init>
}
 80023c6:	bf00      	nop
 80023c8:	3728      	adds	r7, #40	; 0x28
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40001c00 	.word	0x40001c00
 80023d4:	58024400 	.word	0x58024400
 80023d8:	58021400 	.word	0x58021400
 80023dc:	40002000 	.word	0x40002000

080023e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b0b8      	sub	sp, #224	; 0xe0
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	605a      	str	r2, [r3, #4]
 80023f2:	609a      	str	r2, [r3, #8]
 80023f4:	60da      	str	r2, [r3, #12]
 80023f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023f8:	f107 0310 	add.w	r3, r7, #16
 80023fc:	22bc      	movs	r2, #188	; 0xbc
 80023fe:	2100      	movs	r1, #0
 8002400:	4618      	mov	r0, r3
 8002402:	f009 fa98 	bl	800b936 <memset>
  if(huart->Instance==USART3)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a25      	ldr	r2, [pc, #148]	; (80024a0 <HAL_UART_MspInit+0xc0>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d142      	bne.n	8002496 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002410:	2302      	movs	r3, #2
 8002412:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002414:	2300      	movs	r3, #0
 8002416:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800241a:	f107 0310 	add.w	r3, r7, #16
 800241e:	4618      	mov	r0, r3
 8002420:	f002 f8bc 	bl	800459c <HAL_RCCEx_PeriphCLKConfig>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800242a:	f7ff fe3b 	bl	80020a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800242e:	4b1d      	ldr	r3, [pc, #116]	; (80024a4 <HAL_UART_MspInit+0xc4>)
 8002430:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002434:	4a1b      	ldr	r2, [pc, #108]	; (80024a4 <HAL_UART_MspInit+0xc4>)
 8002436:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800243a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800243e:	4b19      	ldr	r3, [pc, #100]	; (80024a4 <HAL_UART_MspInit+0xc4>)
 8002440:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002444:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800244c:	4b15      	ldr	r3, [pc, #84]	; (80024a4 <HAL_UART_MspInit+0xc4>)
 800244e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002452:	4a14      	ldr	r2, [pc, #80]	; (80024a4 <HAL_UART_MspInit+0xc4>)
 8002454:	f043 0308 	orr.w	r3, r3, #8
 8002458:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800245c:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <HAL_UART_MspInit+0xc4>)
 800245e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	60bb      	str	r3, [r7, #8]
 8002468:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800246a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800246e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002472:	2302      	movs	r3, #2
 8002474:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002478:	2300      	movs	r3, #0
 800247a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247e:	2300      	movs	r3, #0
 8002480:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002484:	2307      	movs	r3, #7
 8002486:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800248a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800248e:	4619      	mov	r1, r3
 8002490:	4805      	ldr	r0, [pc, #20]	; (80024a8 <HAL_UART_MspInit+0xc8>)
 8002492:	f000 fe35 	bl	8003100 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002496:	bf00      	nop
 8002498:	37e0      	adds	r7, #224	; 0xe0
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40004800 	.word	0x40004800
 80024a4:	58024400 	.word	0x58024400
 80024a8:	58020c00 	.word	0x58020c00

080024ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b090      	sub	sp, #64	; 0x40
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b0f      	cmp	r3, #15
 80024b8:	d827      	bhi.n	800250a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 80024ba:	2200      	movs	r2, #0
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	2037      	movs	r0, #55	; 0x37
 80024c0:	f000 fa92 	bl	80029e8 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80024c4:	2037      	movs	r0, #55	; 0x37
 80024c6:	f000 faa9 	bl	8002a1c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80024ca:	4a29      	ldr	r2, [pc, #164]	; (8002570 <HAL_InitTick+0xc4>)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80024d0:	4b28      	ldr	r3, [pc, #160]	; (8002574 <HAL_InitTick+0xc8>)
 80024d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024d6:	4a27      	ldr	r2, [pc, #156]	; (8002574 <HAL_InitTick+0xc8>)
 80024d8:	f043 0320 	orr.w	r3, r3, #32
 80024dc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80024e0:	4b24      	ldr	r3, [pc, #144]	; (8002574 <HAL_InitTick+0xc8>)
 80024e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024e6:	f003 0320 	and.w	r3, r3, #32
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80024ee:	f107 0210 	add.w	r2, r7, #16
 80024f2:	f107 0314 	add.w	r3, r7, #20
 80024f6:	4611      	mov	r1, r2
 80024f8:	4618      	mov	r0, r3
 80024fa:	f002 f80d 	bl	8004518 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80024fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002500:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002504:	2b00      	cmp	r3, #0
 8002506:	d106      	bne.n	8002516 <HAL_InitTick+0x6a>
 8002508:	e001      	b.n	800250e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e02b      	b.n	8002566 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800250e:	f001 ffd7 	bl	80044c0 <HAL_RCC_GetPCLK1Freq>
 8002512:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002514:	e004      	b.n	8002520 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002516:	f001 ffd3 	bl	80044c0 <HAL_RCC_GetPCLK1Freq>
 800251a:	4603      	mov	r3, r0
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002522:	4a15      	ldr	r2, [pc, #84]	; (8002578 <HAL_InitTick+0xcc>)
 8002524:	fba2 2303 	umull	r2, r3, r2, r3
 8002528:	0c9b      	lsrs	r3, r3, #18
 800252a:	3b01      	subs	r3, #1
 800252c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800252e:	4b13      	ldr	r3, [pc, #76]	; (800257c <HAL_InitTick+0xd0>)
 8002530:	4a13      	ldr	r2, [pc, #76]	; (8002580 <HAL_InitTick+0xd4>)
 8002532:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8002534:	4b11      	ldr	r3, [pc, #68]	; (800257c <HAL_InitTick+0xd0>)
 8002536:	f240 32e7 	movw	r2, #999	; 0x3e7
 800253a:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800253c:	4a0f      	ldr	r2, [pc, #60]	; (800257c <HAL_InitTick+0xd0>)
 800253e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002540:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002542:	4b0e      	ldr	r3, [pc, #56]	; (800257c <HAL_InitTick+0xd0>)
 8002544:	2200      	movs	r2, #0
 8002546:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002548:	4b0c      	ldr	r3, [pc, #48]	; (800257c <HAL_InitTick+0xd0>)
 800254a:	2200      	movs	r2, #0
 800254c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 800254e:	480b      	ldr	r0, [pc, #44]	; (800257c <HAL_InitTick+0xd0>)
 8002550:	f004 fb31 	bl	8006bb6 <HAL_TIM_Base_Init>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d104      	bne.n	8002564 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 800255a:	4808      	ldr	r0, [pc, #32]	; (800257c <HAL_InitTick+0xd0>)
 800255c:	f004 fb82 	bl	8006c64 <HAL_TIM_Base_Start_IT>
 8002560:	4603      	mov	r3, r0
 8002562:	e000      	b.n	8002566 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
}
 8002566:	4618      	mov	r0, r3
 8002568:	3740      	adds	r7, #64	; 0x40
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	24000010 	.word	0x24000010
 8002574:	58024400 	.word	0x58024400
 8002578:	431bde83 	.word	0x431bde83
 800257c:	24000484 	.word	0x24000484
 8002580:	40001400 	.word	0x40001400

08002584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002588:	e7fe      	b.n	8002588 <NMI_Handler+0x4>

0800258a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800258a:	b480      	push	{r7}
 800258c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800258e:	e7fe      	b.n	800258e <HardFault_Handler+0x4>

08002590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002594:	e7fe      	b.n	8002594 <MemManage_Handler+0x4>

08002596 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002596:	b480      	push	{r7}
 8002598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800259a:	e7fe      	b.n	800259a <BusFault_Handler+0x4>

0800259c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025a0:	e7fe      	b.n	80025a0 <UsageFault_Handler+0x4>

080025a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025a2:	b480      	push	{r7}
 80025a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025a6:	bf00      	nop
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80025b4:	4802      	ldr	r0, [pc, #8]	; (80025c0 <TIM7_IRQHandler+0x10>)
 80025b6:	f004 fc2e 	bl	8006e16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	24000484 	.word	0x24000484

080025c4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025d0:	2300      	movs	r3, #0
 80025d2:	617b      	str	r3, [r7, #20]
 80025d4:	e00a      	b.n	80025ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025d6:	f3af 8000 	nop.w
 80025da:	4601      	mov	r1, r0
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	1c5a      	adds	r2, r3, #1
 80025e0:	60ba      	str	r2, [r7, #8]
 80025e2:	b2ca      	uxtb	r2, r1
 80025e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	3301      	adds	r3, #1
 80025ea:	617b      	str	r3, [r7, #20]
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	dbf0      	blt.n	80025d6 <_read+0x12>
	}

return len;
 80025f4:	687b      	ldr	r3, [r7, #4]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b086      	sub	sp, #24
 8002602:	af00      	add	r7, sp, #0
 8002604:	60f8      	str	r0, [r7, #12]
 8002606:	60b9      	str	r1, [r7, #8]
 8002608:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800260a:	2300      	movs	r3, #0
 800260c:	617b      	str	r3, [r7, #20]
 800260e:	e009      	b.n	8002624 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	1c5a      	adds	r2, r3, #1
 8002614:	60ba      	str	r2, [r7, #8]
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff fd49 	bl	80020b0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	3301      	adds	r3, #1
 8002622:	617b      	str	r3, [r7, #20]
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	429a      	cmp	r2, r3
 800262a:	dbf1      	blt.n	8002610 <_write+0x12>
	}
	return len;
 800262c:	687b      	ldr	r3, [r7, #4]
}
 800262e:	4618      	mov	r0, r3
 8002630:	3718      	adds	r7, #24
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <_close>:

int _close(int file)
{
 8002636:	b480      	push	{r7}
 8002638:	b083      	sub	sp, #12
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
	return -1;
 800263e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002642:	4618      	mov	r0, r3
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
 8002656:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800265e:	605a      	str	r2, [r3, #4]
	return 0;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <_isatty>:

int _isatty(int file)
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
	return 1;
 8002676:	2301      	movs	r3, #1
}
 8002678:	4618      	mov	r0, r3
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
	return 0;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3714      	adds	r7, #20
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
	...

080026a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026a8:	4a14      	ldr	r2, [pc, #80]	; (80026fc <_sbrk+0x5c>)
 80026aa:	4b15      	ldr	r3, [pc, #84]	; (8002700 <_sbrk+0x60>)
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026b4:	4b13      	ldr	r3, [pc, #76]	; (8002704 <_sbrk+0x64>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d102      	bne.n	80026c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026bc:	4b11      	ldr	r3, [pc, #68]	; (8002704 <_sbrk+0x64>)
 80026be:	4a12      	ldr	r2, [pc, #72]	; (8002708 <_sbrk+0x68>)
 80026c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026c2:	4b10      	ldr	r3, [pc, #64]	; (8002704 <_sbrk+0x64>)
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4413      	add	r3, r2
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d207      	bcs.n	80026e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026d0:	f009 f800 	bl	800b6d4 <__errno>
 80026d4:	4603      	mov	r3, r0
 80026d6:	220c      	movs	r2, #12
 80026d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026da:	f04f 33ff 	mov.w	r3, #4294967295
 80026de:	e009      	b.n	80026f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026e0:	4b08      	ldr	r3, [pc, #32]	; (8002704 <_sbrk+0x64>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026e6:	4b07      	ldr	r3, [pc, #28]	; (8002704 <_sbrk+0x64>)
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4413      	add	r3, r2
 80026ee:	4a05      	ldr	r2, [pc, #20]	; (8002704 <_sbrk+0x64>)
 80026f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026f2:	68fb      	ldr	r3, [r7, #12]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	24080000 	.word	0x24080000
 8002700:	00000400 	.word	0x00000400
 8002704:	240004d0 	.word	0x240004d0
 8002708:	24004ef8 	.word	0x24004ef8

0800270c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800270c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002744 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002710:	f7fd ffc0 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002714:	480c      	ldr	r0, [pc, #48]	; (8002748 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002716:	490d      	ldr	r1, [pc, #52]	; (800274c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002718:	4a0d      	ldr	r2, [pc, #52]	; (8002750 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800271a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800271c:	e002      	b.n	8002724 <LoopCopyDataInit>

0800271e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800271e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002722:	3304      	adds	r3, #4

08002724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002728:	d3f9      	bcc.n	800271e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800272a:	4a0a      	ldr	r2, [pc, #40]	; (8002754 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800272c:	4c0a      	ldr	r4, [pc, #40]	; (8002758 <LoopFillZerobss+0x22>)
  movs r3, #0
 800272e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002730:	e001      	b.n	8002736 <LoopFillZerobss>

08002732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002734:	3204      	adds	r2, #4

08002736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002738:	d3fb      	bcc.n	8002732 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800273a:	f009 f8c7 	bl	800b8cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800273e:	f7ff f909 	bl	8001954 <main>
  bx  lr
 8002742:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002744:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002748:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800274c:	24000080 	.word	0x24000080
  ldr r2, =_sidata
 8002750:	0800d1c4 	.word	0x0800d1c4
  ldr r2, =_sbss
 8002754:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 8002758:	24004ef8 	.word	0x24004ef8

0800275c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800275c:	e7fe      	b.n	800275c <ADC3_IRQHandler>
	...

08002760 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002766:	2003      	movs	r0, #3
 8002768:	f000 f933 	bl	80029d2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800276c:	f001 fcfe 	bl	800416c <HAL_RCC_GetSysClockFreq>
 8002770:	4602      	mov	r2, r0
 8002772:	4b15      	ldr	r3, [pc, #84]	; (80027c8 <HAL_Init+0x68>)
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	0a1b      	lsrs	r3, r3, #8
 8002778:	f003 030f 	and.w	r3, r3, #15
 800277c:	4913      	ldr	r1, [pc, #76]	; (80027cc <HAL_Init+0x6c>)
 800277e:	5ccb      	ldrb	r3, [r1, r3]
 8002780:	f003 031f 	and.w	r3, r3, #31
 8002784:	fa22 f303 	lsr.w	r3, r2, r3
 8002788:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800278a:	4b0f      	ldr	r3, [pc, #60]	; (80027c8 <HAL_Init+0x68>)
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	4a0e      	ldr	r2, [pc, #56]	; (80027cc <HAL_Init+0x6c>)
 8002794:	5cd3      	ldrb	r3, [r2, r3]
 8002796:	f003 031f 	and.w	r3, r3, #31
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	fa22 f303 	lsr.w	r3, r2, r3
 80027a0:	4a0b      	ldr	r2, [pc, #44]	; (80027d0 <HAL_Init+0x70>)
 80027a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027a4:	4a0b      	ldr	r2, [pc, #44]	; (80027d4 <HAL_Init+0x74>)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027aa:	200f      	movs	r0, #15
 80027ac:	f7ff fe7e 	bl	80024ac <HAL_InitTick>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e002      	b.n	80027c0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80027ba:	f7ff fc8b 	bl	80020d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	58024400 	.word	0x58024400
 80027cc:	0800d0b0 	.word	0x0800d0b0
 80027d0:	24000004 	.word	0x24000004
 80027d4:	24000000 	.word	0x24000000

080027d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027dc:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <HAL_IncTick+0x20>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	461a      	mov	r2, r3
 80027e2:	4b06      	ldr	r3, [pc, #24]	; (80027fc <HAL_IncTick+0x24>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4413      	add	r3, r2
 80027e8:	4a04      	ldr	r2, [pc, #16]	; (80027fc <HAL_IncTick+0x24>)
 80027ea:	6013      	str	r3, [r2, #0]
}
 80027ec:	bf00      	nop
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	24000014 	.word	0x24000014
 80027fc:	240004d4 	.word	0x240004d4

08002800 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  return uwTick;
 8002804:	4b03      	ldr	r3, [pc, #12]	; (8002814 <HAL_GetTick+0x14>)
 8002806:	681b      	ldr	r3, [r3, #0]
}
 8002808:	4618      	mov	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	240004d4 	.word	0x240004d4

08002818 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002820:	f7ff ffee 	bl	8002800 <HAL_GetTick>
 8002824:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002830:	d005      	beq.n	800283e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002832:	4b0a      	ldr	r3, [pc, #40]	; (800285c <HAL_Delay+0x44>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	461a      	mov	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4413      	add	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800283e:	bf00      	nop
 8002840:	f7ff ffde 	bl	8002800 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	429a      	cmp	r2, r3
 800284e:	d8f7      	bhi.n	8002840 <HAL_Delay+0x28>
  {
  }
}
 8002850:	bf00      	nop
 8002852:	bf00      	nop
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	24000014 	.word	0x24000014

08002860 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002864:	4b03      	ldr	r3, [pc, #12]	; (8002874 <HAL_GetREVID+0x14>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	0c1b      	lsrs	r3, r3, #16
}
 800286a:	4618      	mov	r0, r3
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	5c001000 	.word	0x5c001000

08002878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002888:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <__NVIC_SetPriorityGrouping+0x40>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002894:	4013      	ands	r3, r2
 8002896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80028a0:	4b06      	ldr	r3, [pc, #24]	; (80028bc <__NVIC_SetPriorityGrouping+0x44>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028a6:	4a04      	ldr	r2, [pc, #16]	; (80028b8 <__NVIC_SetPriorityGrouping+0x40>)
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	60d3      	str	r3, [r2, #12]
}
 80028ac:	bf00      	nop
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	e000ed00 	.word	0xe000ed00
 80028bc:	05fa0000 	.word	0x05fa0000

080028c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028c4:	4b04      	ldr	r3, [pc, #16]	; (80028d8 <__NVIC_GetPriorityGrouping+0x18>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	0a1b      	lsrs	r3, r3, #8
 80028ca:	f003 0307 	and.w	r3, r3, #7
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	e000ed00 	.word	0xe000ed00

080028dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80028e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	db0b      	blt.n	8002906 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ee:	88fb      	ldrh	r3, [r7, #6]
 80028f0:	f003 021f 	and.w	r2, r3, #31
 80028f4:	4907      	ldr	r1, [pc, #28]	; (8002914 <__NVIC_EnableIRQ+0x38>)
 80028f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028fa:	095b      	lsrs	r3, r3, #5
 80028fc:	2001      	movs	r0, #1
 80028fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	e000e100 	.word	0xe000e100

08002918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	6039      	str	r1, [r7, #0]
 8002922:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002924:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002928:	2b00      	cmp	r3, #0
 800292a:	db0a      	blt.n	8002942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	b2da      	uxtb	r2, r3
 8002930:	490c      	ldr	r1, [pc, #48]	; (8002964 <__NVIC_SetPriority+0x4c>)
 8002932:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002936:	0112      	lsls	r2, r2, #4
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	440b      	add	r3, r1
 800293c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002940:	e00a      	b.n	8002958 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	b2da      	uxtb	r2, r3
 8002946:	4908      	ldr	r1, [pc, #32]	; (8002968 <__NVIC_SetPriority+0x50>)
 8002948:	88fb      	ldrh	r3, [r7, #6]
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	3b04      	subs	r3, #4
 8002950:	0112      	lsls	r2, r2, #4
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	440b      	add	r3, r1
 8002956:	761a      	strb	r2, [r3, #24]
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	e000e100 	.word	0xe000e100
 8002968:	e000ed00 	.word	0xe000ed00

0800296c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800296c:	b480      	push	{r7}
 800296e:	b089      	sub	sp, #36	; 0x24
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f1c3 0307 	rsb	r3, r3, #7
 8002986:	2b04      	cmp	r3, #4
 8002988:	bf28      	it	cs
 800298a:	2304      	movcs	r3, #4
 800298c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	3304      	adds	r3, #4
 8002992:	2b06      	cmp	r3, #6
 8002994:	d902      	bls.n	800299c <NVIC_EncodePriority+0x30>
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	3b03      	subs	r3, #3
 800299a:	e000      	b.n	800299e <NVIC_EncodePriority+0x32>
 800299c:	2300      	movs	r3, #0
 800299e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a0:	f04f 32ff 	mov.w	r2, #4294967295
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	43da      	mvns	r2, r3
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	401a      	ands	r2, r3
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029b4:	f04f 31ff 	mov.w	r1, #4294967295
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	fa01 f303 	lsl.w	r3, r1, r3
 80029be:	43d9      	mvns	r1, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c4:	4313      	orrs	r3, r2
         );
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3724      	adds	r7, #36	; 0x24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b082      	sub	sp, #8
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7ff ff4c 	bl	8002878 <__NVIC_SetPriorityGrouping>
}
 80029e0:	bf00      	nop
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	4603      	mov	r3, r0
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
 80029f4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029f6:	f7ff ff63 	bl	80028c0 <__NVIC_GetPriorityGrouping>
 80029fa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	68b9      	ldr	r1, [r7, #8]
 8002a00:	6978      	ldr	r0, [r7, #20]
 8002a02:	f7ff ffb3 	bl	800296c <NVIC_EncodePriority>
 8002a06:	4602      	mov	r2, r0
 8002a08:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a0c:	4611      	mov	r1, r2
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff ff82 	bl	8002918 <__NVIC_SetPriority>
}
 8002a14:	bf00      	nop
 8002a16:	3718      	adds	r7, #24
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	4603      	mov	r3, r0
 8002a24:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff ff56 	bl	80028dc <__NVIC_EnableIRQ>
}
 8002a30:	bf00      	nop
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b098      	sub	sp, #96	; 0x60
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8002a40:	4a84      	ldr	r2, [pc, #528]	; (8002c54 <HAL_FDCAN_Init+0x21c>)
 8002a42:	f107 030c 	add.w	r3, r7, #12
 8002a46:	4611      	mov	r1, r2
 8002a48:	224c      	movs	r2, #76	; 0x4c
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f008 ff65 	bl	800b91a <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e1c6      	b.n	8002de8 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a7e      	ldr	r2, [pc, #504]	; (8002c58 <HAL_FDCAN_Init+0x220>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d106      	bne.n	8002a72 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d106      	bne.n	8002a8c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f7ff fb42 	bl	8002110 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	699a      	ldr	r2, [r3, #24]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f022 0210 	bic.w	r2, r2, #16
 8002a9a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a9c:	f7ff feb0 	bl	8002800 <HAL_GetTick>
 8002aa0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002aa2:	e014      	b.n	8002ace <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002aa4:	f7ff feac 	bl	8002800 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b0a      	cmp	r3, #10
 8002ab0:	d90d      	bls.n	8002ace <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ab8:	f043 0201 	orr.w	r2, r3, #1
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2203      	movs	r2, #3
 8002ac6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e18c      	b.n	8002de8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	f003 0308 	and.w	r3, r3, #8
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d0e3      	beq.n	8002aa4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	699a      	ldr	r2, [r3, #24]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0201 	orr.w	r2, r2, #1
 8002aea:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002aec:	f7ff fe88 	bl	8002800 <HAL_GetTick>
 8002af0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002af2:	e014      	b.n	8002b1e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002af4:	f7ff fe84 	bl	8002800 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b0a      	cmp	r3, #10
 8002b00:	d90d      	bls.n	8002b1e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b08:	f043 0201 	orr.w	r2, r3, #1
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2203      	movs	r2, #3
 8002b16:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e164      	b.n	8002de8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0e3      	beq.n	8002af4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	699a      	ldr	r2, [r3, #24]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f042 0202 	orr.w	r2, r2, #2
 8002b3a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	7c1b      	ldrb	r3, [r3, #16]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d108      	bne.n	8002b56 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	699a      	ldr	r2, [r3, #24]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b52:	619a      	str	r2, [r3, #24]
 8002b54:	e007      	b.n	8002b66 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	699a      	ldr	r2, [r3, #24]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b64:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	7c5b      	ldrb	r3, [r3, #17]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d108      	bne.n	8002b80 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	699a      	ldr	r2, [r3, #24]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b7c:	619a      	str	r2, [r3, #24]
 8002b7e:	e007      	b.n	8002b90 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	699a      	ldr	r2, [r3, #24]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b8e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	7c9b      	ldrb	r3, [r3, #18]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d108      	bne.n	8002baa <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	699a      	ldr	r2, [r3, #24]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ba6:	619a      	str	r2, [r3, #24]
 8002ba8:	e007      	b.n	8002bba <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	699a      	ldr	r2, [r3, #24]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002bb8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699a      	ldr	r2, [r3, #24]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002bde:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	691a      	ldr	r2, [r3, #16]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 0210 	bic.w	r2, r2, #16
 8002bee:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d108      	bne.n	8002c0a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	699a      	ldr	r2, [r3, #24]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 0204 	orr.w	r2, r2, #4
 8002c06:	619a      	str	r2, [r3, #24]
 8002c08:	e030      	b.n	8002c6c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d02c      	beq.n	8002c6c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d020      	beq.n	8002c5c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	699a      	ldr	r2, [r3, #24]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c28:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	691a      	ldr	r2, [r3, #16]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f042 0210 	orr.w	r2, r2, #16
 8002c38:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	2b03      	cmp	r3, #3
 8002c40:	d114      	bne.n	8002c6c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	699a      	ldr	r2, [r3, #24]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f042 0220 	orr.w	r2, r2, #32
 8002c50:	619a      	str	r2, [r3, #24]
 8002c52:	e00b      	b.n	8002c6c <HAL_FDCAN_Init+0x234>
 8002c54:	0800d04c 	.word	0x0800d04c
 8002c58:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	699a      	ldr	r2, [r3, #24]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 0220 	orr.w	r2, r2, #32
 8002c6a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	3b01      	subs	r3, #1
 8002c72:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c7c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002c84:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	695b      	ldr	r3, [r3, #20]
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002c94:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c96:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ca0:	d115      	bne.n	8002cce <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cac:	3b01      	subs	r3, #1
 8002cae:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002cb0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8002cba:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8002cca:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002ccc:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00a      	beq.n	8002cec <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cf4:	4413      	add	r3, r2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d011      	beq.n	8002d1e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002d02:	f023 0107 	bic.w	r1, r3, #7
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	3360      	adds	r3, #96	; 0x60
 8002d0e:	443b      	add	r3, r7
 8002d10:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d011      	beq.n	8002d4a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002d2e:	f023 0107 	bic.w	r1, r3, #7
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	3360      	adds	r3, #96	; 0x60
 8002d3a:	443b      	add	r3, r7
 8002d3c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	430a      	orrs	r2, r1
 8002d46:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d012      	beq.n	8002d78 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002d5a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	3360      	adds	r3, #96	; 0x60
 8002d66:	443b      	add	r3, r7
 8002d68:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002d6c:	011a      	lsls	r2, r3, #4
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d012      	beq.n	8002da6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002d88:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	3360      	adds	r3, #96	; 0x60
 8002d94:	443b      	add	r3, r7
 8002d96:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002d9a:	021a      	lsls	r2, r3, #8
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a11      	ldr	r2, [pc, #68]	; (8002df0 <HAL_FDCAN_Init+0x3b8>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d107      	bne.n	8002dc0 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	689a      	ldr	r2, [r3, #8]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f022 0203 	bic.w	r2, r2, #3
 8002dbe:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 f80b 	bl	8002df4 <FDCAN_CalcultateRamBlockAddresses>
 8002dde:	4603      	mov	r3, r0
 8002de0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8002de4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3760      	adds	r7, #96	; 0x60
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	4000a000 	.word	0x4000a000

08002df4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e00:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002e0a:	4ba7      	ldr	r3, [pc, #668]	; (80030a8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	0091      	lsls	r1, r2, #2
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	6812      	ldr	r2, [r2, #0]
 8002e16:	430b      	orrs	r3, r1
 8002e18:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e24:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2c:	041a      	lsls	r2, r3, #16
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3c:	68ba      	ldr	r2, [r7, #8]
 8002e3e:	4413      	add	r3, r2
 8002e40:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002e4a:	4b97      	ldr	r3, [pc, #604]	; (80030a8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	0091      	lsls	r1, r2, #2
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6812      	ldr	r2, [r2, #0]
 8002e56:	430b      	orrs	r3, r1
 8002e58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e64:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e6c:	041a      	lsls	r2, r3, #16
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	4413      	add	r3, r2
 8002e82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002e8c:	4b86      	ldr	r3, [pc, #536]	; (80030a8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002e8e:	4013      	ands	r3, r2
 8002e90:	68ba      	ldr	r2, [r7, #8]
 8002e92:	0091      	lsls	r1, r2, #2
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	6812      	ldr	r2, [r2, #0]
 8002e98:	430b      	orrs	r3, r1
 8002e9a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002ea6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	041a      	lsls	r2, r3, #16
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002ec2:	fb02 f303 	mul.w	r3, r2, r3
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	4413      	add	r3, r2
 8002eca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002ed4:	4b74      	ldr	r3, [pc, #464]	; (80030a8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	68ba      	ldr	r2, [r7, #8]
 8002eda:	0091      	lsls	r1, r2, #2
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6812      	ldr	r2, [r2, #0]
 8002ee0:	430b      	orrs	r3, r1
 8002ee2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002eee:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ef6:	041a      	lsls	r2, r3, #16
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002f0a:	fb02 f303 	mul.w	r3, r2, r3
 8002f0e:	68ba      	ldr	r2, [r7, #8]
 8002f10:	4413      	add	r3, r2
 8002f12:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8002f1c:	4b62      	ldr	r3, [pc, #392]	; (80030a8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002f1e:	4013      	ands	r3, r2
 8002f20:	68ba      	ldr	r2, [r7, #8]
 8002f22:	0091      	lsls	r1, r2, #2
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6812      	ldr	r2, [r2, #0]
 8002f28:	430b      	orrs	r3, r1
 8002f2a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002f36:	fb02 f303 	mul.w	r3, r2, r3
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002f48:	4b57      	ldr	r3, [pc, #348]	; (80030a8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	68ba      	ldr	r2, [r7, #8]
 8002f4e:	0091      	lsls	r1, r2, #2
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	6812      	ldr	r2, [r2, #0]
 8002f54:	430b      	orrs	r3, r1
 8002f56:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f62:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f6a:	041a      	lsls	r2, r3, #16
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	4413      	add	r3, r2
 8002f80:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002f8a:	4b47      	ldr	r3, [pc, #284]	; (80030a8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	68ba      	ldr	r2, [r7, #8]
 8002f90:	0091      	lsls	r1, r2, #2
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6812      	ldr	r2, [r2, #0]
 8002f96:	430b      	orrs	r3, r1
 8002f98:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002fa4:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fac:	041a      	lsls	r2, r3, #16
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002fc0:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fc8:	061a      	lsls	r2, r3, #24
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fd8:	4b34      	ldr	r3, [pc, #208]	; (80030ac <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8002fda:	4413      	add	r3, r2
 8002fdc:	009a      	lsls	r2, r3, #2
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	441a      	add	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	441a      	add	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800300e:	fb01 f303 	mul.w	r3, r1, r3
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	441a      	add	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8003026:	fb01 f303 	mul.w	r3, r1, r3
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	441a      	add	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800303e:	fb01 f303 	mul.w	r3, r1, r3
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	441a      	add	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	441a      	add	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800306a:	6879      	ldr	r1, [r7, #4]
 800306c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800306e:	fb01 f303 	mul.w	r3, r1, r3
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	441a      	add	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800308a:	fb01 f303 	mul.w	r3, r1, r3
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	441a      	add	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309e:	4a04      	ldr	r2, [pc, #16]	; (80030b0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d915      	bls.n	80030d0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80030a4:	e006      	b.n	80030b4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80030a6:	bf00      	nop
 80030a8:	ffff0003 	.word	0xffff0003
 80030ac:	10002b00 	.word	0x10002b00
 80030b0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030ba:	f043 0220 	orr.w	r2, r3, #32
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2203      	movs	r2, #3
 80030c8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e010      	b.n	80030f2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030d4:	60fb      	str	r3, [r7, #12]
 80030d6:	e005      	b.n	80030e4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	3304      	adds	r3, #4
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d3f3      	bcc.n	80030d8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3714      	adds	r7, #20
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop

08003100 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003100:	b480      	push	{r7}
 8003102:	b089      	sub	sp, #36	; 0x24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800310a:	2300      	movs	r3, #0
 800310c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800310e:	4b89      	ldr	r3, [pc, #548]	; (8003334 <HAL_GPIO_Init+0x234>)
 8003110:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003112:	e194      	b.n	800343e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	2101      	movs	r1, #1
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	fa01 f303 	lsl.w	r3, r1, r3
 8003120:	4013      	ands	r3, r2
 8003122:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 8186 	beq.w	8003438 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f003 0303 	and.w	r3, r3, #3
 8003134:	2b01      	cmp	r3, #1
 8003136:	d005      	beq.n	8003144 <HAL_GPIO_Init+0x44>
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f003 0303 	and.w	r3, r3, #3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d130      	bne.n	80031a6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	2203      	movs	r2, #3
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	43db      	mvns	r3, r3
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	4013      	ands	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	68da      	ldr	r2, [r3, #12]
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4313      	orrs	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800317a:	2201      	movs	r2, #1
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	43db      	mvns	r3, r3
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	4013      	ands	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	091b      	lsrs	r3, r3, #4
 8003190:	f003 0201 	and.w	r2, r3, #1
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	4313      	orrs	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f003 0303 	and.w	r3, r3, #3
 80031ae:	2b03      	cmp	r3, #3
 80031b0:	d017      	beq.n	80031e2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	2203      	movs	r2, #3
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	43db      	mvns	r3, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4013      	ands	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	689a      	ldr	r2, [r3, #8]
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	4313      	orrs	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f003 0303 	and.w	r3, r3, #3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d123      	bne.n	8003236 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	08da      	lsrs	r2, r3, #3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	3208      	adds	r2, #8
 80031f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	220f      	movs	r2, #15
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	43db      	mvns	r3, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4013      	ands	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	691a      	ldr	r2, [r3, #16]
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	4313      	orrs	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	08da      	lsrs	r2, r3, #3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3208      	adds	r2, #8
 8003230:	69b9      	ldr	r1, [r7, #24]
 8003232:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	2203      	movs	r2, #3
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	43db      	mvns	r3, r3
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4013      	ands	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f003 0203 	and.w	r2, r3, #3
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	4313      	orrs	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 80e0 	beq.w	8003438 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003278:	4b2f      	ldr	r3, [pc, #188]	; (8003338 <HAL_GPIO_Init+0x238>)
 800327a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800327e:	4a2e      	ldr	r2, [pc, #184]	; (8003338 <HAL_GPIO_Init+0x238>)
 8003280:	f043 0302 	orr.w	r3, r3, #2
 8003284:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003288:	4b2b      	ldr	r3, [pc, #172]	; (8003338 <HAL_GPIO_Init+0x238>)
 800328a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003296:	4a29      	ldr	r2, [pc, #164]	; (800333c <HAL_GPIO_Init+0x23c>)
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	089b      	lsrs	r3, r3, #2
 800329c:	3302      	adds	r3, #2
 800329e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	f003 0303 	and.w	r3, r3, #3
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	220f      	movs	r2, #15
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	43db      	mvns	r3, r3
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	4013      	ands	r3, r2
 80032b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a20      	ldr	r2, [pc, #128]	; (8003340 <HAL_GPIO_Init+0x240>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d052      	beq.n	8003368 <HAL_GPIO_Init+0x268>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a1f      	ldr	r2, [pc, #124]	; (8003344 <HAL_GPIO_Init+0x244>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d031      	beq.n	800332e <HAL_GPIO_Init+0x22e>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a1e      	ldr	r2, [pc, #120]	; (8003348 <HAL_GPIO_Init+0x248>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d02b      	beq.n	800332a <HAL_GPIO_Init+0x22a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a1d      	ldr	r2, [pc, #116]	; (800334c <HAL_GPIO_Init+0x24c>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d025      	beq.n	8003326 <HAL_GPIO_Init+0x226>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a1c      	ldr	r2, [pc, #112]	; (8003350 <HAL_GPIO_Init+0x250>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d01f      	beq.n	8003322 <HAL_GPIO_Init+0x222>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a1b      	ldr	r2, [pc, #108]	; (8003354 <HAL_GPIO_Init+0x254>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d019      	beq.n	800331e <HAL_GPIO_Init+0x21e>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a1a      	ldr	r2, [pc, #104]	; (8003358 <HAL_GPIO_Init+0x258>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d013      	beq.n	800331a <HAL_GPIO_Init+0x21a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a19      	ldr	r2, [pc, #100]	; (800335c <HAL_GPIO_Init+0x25c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d00d      	beq.n	8003316 <HAL_GPIO_Init+0x216>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a18      	ldr	r2, [pc, #96]	; (8003360 <HAL_GPIO_Init+0x260>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d007      	beq.n	8003312 <HAL_GPIO_Init+0x212>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a17      	ldr	r2, [pc, #92]	; (8003364 <HAL_GPIO_Init+0x264>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d101      	bne.n	800330e <HAL_GPIO_Init+0x20e>
 800330a:	2309      	movs	r3, #9
 800330c:	e02d      	b.n	800336a <HAL_GPIO_Init+0x26a>
 800330e:	230a      	movs	r3, #10
 8003310:	e02b      	b.n	800336a <HAL_GPIO_Init+0x26a>
 8003312:	2308      	movs	r3, #8
 8003314:	e029      	b.n	800336a <HAL_GPIO_Init+0x26a>
 8003316:	2307      	movs	r3, #7
 8003318:	e027      	b.n	800336a <HAL_GPIO_Init+0x26a>
 800331a:	2306      	movs	r3, #6
 800331c:	e025      	b.n	800336a <HAL_GPIO_Init+0x26a>
 800331e:	2305      	movs	r3, #5
 8003320:	e023      	b.n	800336a <HAL_GPIO_Init+0x26a>
 8003322:	2304      	movs	r3, #4
 8003324:	e021      	b.n	800336a <HAL_GPIO_Init+0x26a>
 8003326:	2303      	movs	r3, #3
 8003328:	e01f      	b.n	800336a <HAL_GPIO_Init+0x26a>
 800332a:	2302      	movs	r3, #2
 800332c:	e01d      	b.n	800336a <HAL_GPIO_Init+0x26a>
 800332e:	2301      	movs	r3, #1
 8003330:	e01b      	b.n	800336a <HAL_GPIO_Init+0x26a>
 8003332:	bf00      	nop
 8003334:	58000080 	.word	0x58000080
 8003338:	58024400 	.word	0x58024400
 800333c:	58000400 	.word	0x58000400
 8003340:	58020000 	.word	0x58020000
 8003344:	58020400 	.word	0x58020400
 8003348:	58020800 	.word	0x58020800
 800334c:	58020c00 	.word	0x58020c00
 8003350:	58021000 	.word	0x58021000
 8003354:	58021400 	.word	0x58021400
 8003358:	58021800 	.word	0x58021800
 800335c:	58021c00 	.word	0x58021c00
 8003360:	58022000 	.word	0x58022000
 8003364:	58022400 	.word	0x58022400
 8003368:	2300      	movs	r3, #0
 800336a:	69fa      	ldr	r2, [r7, #28]
 800336c:	f002 0203 	and.w	r2, r2, #3
 8003370:	0092      	lsls	r2, r2, #2
 8003372:	4093      	lsls	r3, r2
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	4313      	orrs	r3, r2
 8003378:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800337a:	4938      	ldr	r1, [pc, #224]	; (800345c <HAL_GPIO_Init+0x35c>)
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	089b      	lsrs	r3, r3, #2
 8003380:	3302      	adds	r3, #2
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	43db      	mvns	r3, r3
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	4013      	ands	r3, r2
 8003398:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80033ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80033b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	43db      	mvns	r3, r3
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	4013      	ands	r3, r2
 80033c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d003      	beq.n	80033dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	4313      	orrs	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80033dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	43db      	mvns	r3, r3
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	4013      	ands	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d003      	beq.n	8003408 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	4313      	orrs	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	43db      	mvns	r3, r3
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	4013      	ands	r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	4313      	orrs	r3, r2
 8003430:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	3301      	adds	r3, #1
 800343c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	fa22 f303 	lsr.w	r3, r2, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	f47f ae63 	bne.w	8003114 <HAL_GPIO_Init+0x14>
  }
}
 800344e:	bf00      	nop
 8003450:	bf00      	nop
 8003452:	3724      	adds	r7, #36	; 0x24
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	58000400 	.word	0x58000400

08003460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	460b      	mov	r3, r1
 800346a:	807b      	strh	r3, [r7, #2]
 800346c:	4613      	mov	r3, r2
 800346e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003470:	787b      	ldrb	r3, [r7, #1]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003476:	887a      	ldrh	r2, [r7, #2]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800347c:	e003      	b.n	8003486 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800347e:	887b      	ldrh	r3, [r7, #2]
 8003480:	041a      	lsls	r2, r3, #16
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	619a      	str	r2, [r3, #24]
}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
	...

08003494 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800349c:	4a08      	ldr	r2, [pc, #32]	; (80034c0 <HAL_HSEM_FastTake+0x2c>)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	3320      	adds	r3, #32
 80034a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034a6:	4a07      	ldr	r2, [pc, #28]	; (80034c4 <HAL_HSEM_FastTake+0x30>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d101      	bne.n	80034b0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80034ac:	2300      	movs	r3, #0
 80034ae:	e000      	b.n	80034b2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	58026400 	.word	0x58026400
 80034c4:	80000300 	.word	0x80000300

080034c8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80034d2:	4906      	ldr	r1, [pc, #24]	; (80034ec <HAL_HSEM_Release+0x24>)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	58026400 	.word	0x58026400

080034f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80034f8:	4b29      	ldr	r3, [pc, #164]	; (80035a0 <HAL_PWREx_ConfigSupply+0xb0>)
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	2b06      	cmp	r3, #6
 8003502:	d00a      	beq.n	800351a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003504:	4b26      	ldr	r3, [pc, #152]	; (80035a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	429a      	cmp	r2, r3
 8003510:	d001      	beq.n	8003516 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e040      	b.n	8003598 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003516:	2300      	movs	r3, #0
 8003518:	e03e      	b.n	8003598 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800351a:	4b21      	ldr	r3, [pc, #132]	; (80035a0 <HAL_PWREx_ConfigSupply+0xb0>)
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003522:	491f      	ldr	r1, [pc, #124]	; (80035a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4313      	orrs	r3, r2
 8003528:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800352a:	f7ff f969 	bl	8002800 <HAL_GetTick>
 800352e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003530:	e009      	b.n	8003546 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003532:	f7ff f965 	bl	8002800 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003540:	d901      	bls.n	8003546 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e028      	b.n	8003598 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003546:	4b16      	ldr	r3, [pc, #88]	; (80035a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800354e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003552:	d1ee      	bne.n	8003532 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b1e      	cmp	r3, #30
 8003558:	d008      	beq.n	800356c <HAL_PWREx_ConfigSupply+0x7c>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2b2e      	cmp	r3, #46	; 0x2e
 800355e:	d005      	beq.n	800356c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b1d      	cmp	r3, #29
 8003564:	d002      	beq.n	800356c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b2d      	cmp	r3, #45	; 0x2d
 800356a:	d114      	bne.n	8003596 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800356c:	f7ff f948 	bl	8002800 <HAL_GetTick>
 8003570:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003572:	e009      	b.n	8003588 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003574:	f7ff f944 	bl	8002800 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003582:	d901      	bls.n	8003588 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e007      	b.n	8003598 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003588:	4b05      	ldr	r3, [pc, #20]	; (80035a0 <HAL_PWREx_ConfigSupply+0xb0>)
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003594:	d1ee      	bne.n	8003574 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	58024800 	.word	0x58024800

080035a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b08c      	sub	sp, #48	; 0x30
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d102      	bne.n	80035b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	f000 bc1d 	b.w	8003df2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 8087 	beq.w	80036d4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035c6:	4b99      	ldr	r3, [pc, #612]	; (800382c <HAL_RCC_OscConfig+0x288>)
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80035d0:	4b96      	ldr	r3, [pc, #600]	; (800382c <HAL_RCC_OscConfig+0x288>)
 80035d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80035d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d8:	2b10      	cmp	r3, #16
 80035da:	d007      	beq.n	80035ec <HAL_RCC_OscConfig+0x48>
 80035dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035de:	2b18      	cmp	r3, #24
 80035e0:	d110      	bne.n	8003604 <HAL_RCC_OscConfig+0x60>
 80035e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e4:	f003 0303 	and.w	r3, r3, #3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d10b      	bne.n	8003604 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ec:	4b8f      	ldr	r3, [pc, #572]	; (800382c <HAL_RCC_OscConfig+0x288>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d06c      	beq.n	80036d2 <HAL_RCC_OscConfig+0x12e>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d168      	bne.n	80036d2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e3f6      	b.n	8003df2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800360c:	d106      	bne.n	800361c <HAL_RCC_OscConfig+0x78>
 800360e:	4b87      	ldr	r3, [pc, #540]	; (800382c <HAL_RCC_OscConfig+0x288>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a86      	ldr	r2, [pc, #536]	; (800382c <HAL_RCC_OscConfig+0x288>)
 8003614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	e02e      	b.n	800367a <HAL_RCC_OscConfig+0xd6>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10c      	bne.n	800363e <HAL_RCC_OscConfig+0x9a>
 8003624:	4b81      	ldr	r3, [pc, #516]	; (800382c <HAL_RCC_OscConfig+0x288>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a80      	ldr	r2, [pc, #512]	; (800382c <HAL_RCC_OscConfig+0x288>)
 800362a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800362e:	6013      	str	r3, [r2, #0]
 8003630:	4b7e      	ldr	r3, [pc, #504]	; (800382c <HAL_RCC_OscConfig+0x288>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a7d      	ldr	r2, [pc, #500]	; (800382c <HAL_RCC_OscConfig+0x288>)
 8003636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800363a:	6013      	str	r3, [r2, #0]
 800363c:	e01d      	b.n	800367a <HAL_RCC_OscConfig+0xd6>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003646:	d10c      	bne.n	8003662 <HAL_RCC_OscConfig+0xbe>
 8003648:	4b78      	ldr	r3, [pc, #480]	; (800382c <HAL_RCC_OscConfig+0x288>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a77      	ldr	r2, [pc, #476]	; (800382c <HAL_RCC_OscConfig+0x288>)
 800364e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003652:	6013      	str	r3, [r2, #0]
 8003654:	4b75      	ldr	r3, [pc, #468]	; (800382c <HAL_RCC_OscConfig+0x288>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a74      	ldr	r2, [pc, #464]	; (800382c <HAL_RCC_OscConfig+0x288>)
 800365a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800365e:	6013      	str	r3, [r2, #0]
 8003660:	e00b      	b.n	800367a <HAL_RCC_OscConfig+0xd6>
 8003662:	4b72      	ldr	r3, [pc, #456]	; (800382c <HAL_RCC_OscConfig+0x288>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a71      	ldr	r2, [pc, #452]	; (800382c <HAL_RCC_OscConfig+0x288>)
 8003668:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800366c:	6013      	str	r3, [r2, #0]
 800366e:	4b6f      	ldr	r3, [pc, #444]	; (800382c <HAL_RCC_OscConfig+0x288>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a6e      	ldr	r2, [pc, #440]	; (800382c <HAL_RCC_OscConfig+0x288>)
 8003674:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003678:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d013      	beq.n	80036aa <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003682:	f7ff f8bd 	bl	8002800 <HAL_GetTick>
 8003686:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003688:	e008      	b.n	800369c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800368a:	f7ff f8b9 	bl	8002800 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b64      	cmp	r3, #100	; 0x64
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e3aa      	b.n	8003df2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800369c:	4b63      	ldr	r3, [pc, #396]	; (800382c <HAL_RCC_OscConfig+0x288>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0f0      	beq.n	800368a <HAL_RCC_OscConfig+0xe6>
 80036a8:	e014      	b.n	80036d4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036aa:	f7ff f8a9 	bl	8002800 <HAL_GetTick>
 80036ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036b2:	f7ff f8a5 	bl	8002800 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b64      	cmp	r3, #100	; 0x64
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e396      	b.n	8003df2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80036c4:	4b59      	ldr	r3, [pc, #356]	; (800382c <HAL_RCC_OscConfig+0x288>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1f0      	bne.n	80036b2 <HAL_RCC_OscConfig+0x10e>
 80036d0:	e000      	b.n	80036d4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 80cb 	beq.w	8003878 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036e2:	4b52      	ldr	r3, [pc, #328]	; (800382c <HAL_RCC_OscConfig+0x288>)
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036ea:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80036ec:	4b4f      	ldr	r3, [pc, #316]	; (800382c <HAL_RCC_OscConfig+0x288>)
 80036ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80036f2:	6a3b      	ldr	r3, [r7, #32]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d007      	beq.n	8003708 <HAL_RCC_OscConfig+0x164>
 80036f8:	6a3b      	ldr	r3, [r7, #32]
 80036fa:	2b18      	cmp	r3, #24
 80036fc:	d156      	bne.n	80037ac <HAL_RCC_OscConfig+0x208>
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	f003 0303 	and.w	r3, r3, #3
 8003704:	2b00      	cmp	r3, #0
 8003706:	d151      	bne.n	80037ac <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003708:	4b48      	ldr	r3, [pc, #288]	; (800382c <HAL_RCC_OscConfig+0x288>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0304 	and.w	r3, r3, #4
 8003710:	2b00      	cmp	r3, #0
 8003712:	d005      	beq.n	8003720 <HAL_RCC_OscConfig+0x17c>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d101      	bne.n	8003720 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e368      	b.n	8003df2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003720:	4b42      	ldr	r3, [pc, #264]	; (800382c <HAL_RCC_OscConfig+0x288>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f023 0219 	bic.w	r2, r3, #25
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	493f      	ldr	r1, [pc, #252]	; (800382c <HAL_RCC_OscConfig+0x288>)
 800372e:	4313      	orrs	r3, r2
 8003730:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003732:	f7ff f865 	bl	8002800 <HAL_GetTick>
 8003736:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003738:	e008      	b.n	800374c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800373a:	f7ff f861 	bl	8002800 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e352      	b.n	8003df2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800374c:	4b37      	ldr	r3, [pc, #220]	; (800382c <HAL_RCC_OscConfig+0x288>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0f0      	beq.n	800373a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003758:	f7ff f882 	bl	8002860 <HAL_GetREVID>
 800375c:	4603      	mov	r3, r0
 800375e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003762:	4293      	cmp	r3, r2
 8003764:	d817      	bhi.n	8003796 <HAL_RCC_OscConfig+0x1f2>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	2b40      	cmp	r3, #64	; 0x40
 800376c:	d108      	bne.n	8003780 <HAL_RCC_OscConfig+0x1dc>
 800376e:	4b2f      	ldr	r3, [pc, #188]	; (800382c <HAL_RCC_OscConfig+0x288>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003776:	4a2d      	ldr	r2, [pc, #180]	; (800382c <HAL_RCC_OscConfig+0x288>)
 8003778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800377c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800377e:	e07b      	b.n	8003878 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003780:	4b2a      	ldr	r3, [pc, #168]	; (800382c <HAL_RCC_OscConfig+0x288>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	031b      	lsls	r3, r3, #12
 800378e:	4927      	ldr	r1, [pc, #156]	; (800382c <HAL_RCC_OscConfig+0x288>)
 8003790:	4313      	orrs	r3, r2
 8003792:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003794:	e070      	b.n	8003878 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003796:	4b25      	ldr	r3, [pc, #148]	; (800382c <HAL_RCC_OscConfig+0x288>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	061b      	lsls	r3, r3, #24
 80037a4:	4921      	ldr	r1, [pc, #132]	; (800382c <HAL_RCC_OscConfig+0x288>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037aa:	e065      	b.n	8003878 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d048      	beq.n	8003846 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80037b4:	4b1d      	ldr	r3, [pc, #116]	; (800382c <HAL_RCC_OscConfig+0x288>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f023 0219 	bic.w	r2, r3, #25
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	491a      	ldr	r1, [pc, #104]	; (800382c <HAL_RCC_OscConfig+0x288>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c6:	f7ff f81b 	bl	8002800 <HAL_GetTick>
 80037ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037ce:	f7ff f817 	bl	8002800 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e308      	b.n	8003df2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037e0:	4b12      	ldr	r3, [pc, #72]	; (800382c <HAL_RCC_OscConfig+0x288>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0f0      	beq.n	80037ce <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ec:	f7ff f838 	bl	8002860 <HAL_GetREVID>
 80037f0:	4603      	mov	r3, r0
 80037f2:	f241 0203 	movw	r2, #4099	; 0x1003
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d81a      	bhi.n	8003830 <HAL_RCC_OscConfig+0x28c>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	2b40      	cmp	r3, #64	; 0x40
 8003800:	d108      	bne.n	8003814 <HAL_RCC_OscConfig+0x270>
 8003802:	4b0a      	ldr	r3, [pc, #40]	; (800382c <HAL_RCC_OscConfig+0x288>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800380a:	4a08      	ldr	r2, [pc, #32]	; (800382c <HAL_RCC_OscConfig+0x288>)
 800380c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003810:	6053      	str	r3, [r2, #4]
 8003812:	e031      	b.n	8003878 <HAL_RCC_OscConfig+0x2d4>
 8003814:	4b05      	ldr	r3, [pc, #20]	; (800382c <HAL_RCC_OscConfig+0x288>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	031b      	lsls	r3, r3, #12
 8003822:	4902      	ldr	r1, [pc, #8]	; (800382c <HAL_RCC_OscConfig+0x288>)
 8003824:	4313      	orrs	r3, r2
 8003826:	604b      	str	r3, [r1, #4]
 8003828:	e026      	b.n	8003878 <HAL_RCC_OscConfig+0x2d4>
 800382a:	bf00      	nop
 800382c:	58024400 	.word	0x58024400
 8003830:	4b9a      	ldr	r3, [pc, #616]	; (8003a9c <HAL_RCC_OscConfig+0x4f8>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	061b      	lsls	r3, r3, #24
 800383e:	4997      	ldr	r1, [pc, #604]	; (8003a9c <HAL_RCC_OscConfig+0x4f8>)
 8003840:	4313      	orrs	r3, r2
 8003842:	604b      	str	r3, [r1, #4]
 8003844:	e018      	b.n	8003878 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003846:	4b95      	ldr	r3, [pc, #596]	; (8003a9c <HAL_RCC_OscConfig+0x4f8>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a94      	ldr	r2, [pc, #592]	; (8003a9c <HAL_RCC_OscConfig+0x4f8>)
 800384c:	f023 0301 	bic.w	r3, r3, #1
 8003850:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003852:	f7fe ffd5 	bl	8002800 <HAL_GetTick>
 8003856:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003858:	e008      	b.n	800386c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800385a:	f7fe ffd1 	bl	8002800 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e2c2      	b.n	8003df2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800386c:	4b8b      	ldr	r3, [pc, #556]	; (8003a9c <HAL_RCC_OscConfig+0x4f8>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1f0      	bne.n	800385a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0310 	and.w	r3, r3, #16
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 80a9 	beq.w	80039d8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003886:	4b85      	ldr	r3, [pc, #532]	; (8003a9c <HAL_RCC_OscConfig+0x4f8>)
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800388e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003890:	4b82      	ldr	r3, [pc, #520]	; (8003a9c <HAL_RCC_OscConfig+0x4f8>)
 8003892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003894:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	2b08      	cmp	r3, #8
 800389a:	d007      	beq.n	80038ac <HAL_RCC_OscConfig+0x308>
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	2b18      	cmp	r3, #24
 80038a0:	d13a      	bne.n	8003918 <HAL_RCC_OscConfig+0x374>
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f003 0303 	and.w	r3, r3, #3
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d135      	bne.n	8003918 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038ac:	4b7b      	ldr	r3, [pc, #492]	; (8003a9c <HAL_RCC_OscConfig+0x4f8>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d005      	beq.n	80038c4 <HAL_RCC_OscConfig+0x320>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	2b80      	cmp	r3, #128	; 0x80
 80038be:	d001      	beq.n	80038c4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e296      	b.n	8003df2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038c4:	f7fe ffcc 	bl	8002860 <HAL_GetREVID>
 80038c8:	4603      	mov	r3, r0
 80038ca:	f241 0203 	movw	r2, #4099	; 0x1003
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d817      	bhi.n	8003902 <HAL_RCC_OscConfig+0x35e>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	2b20      	cmp	r3, #32
 80038d8:	d108      	bne.n	80038ec <HAL_RCC_OscConfig+0x348>
 80038da:	4b70      	ldr	r3, [pc, #448]	; (8003a9c <HAL_RCC_OscConfig+0x4f8>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80038e2:	4a6e      	ldr	r2, [pc, #440]	; (8003a9c <HAL_RCC_OscConfig+0x4f8>)
 80038e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80038e8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038ea:	e075      	b.n	80039d8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038ec:	4b6b      	ldr	r3, [pc, #428]	; (8003a9c <HAL_RCC_OscConfig+0x4f8>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	069b      	lsls	r3, r3, #26
 80038fa:	4968      	ldr	r1, [pc, #416]	; (8003a9c <HAL_RCC_OscConfig+0x4f8>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003900:	e06a      	b.n	80039d8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003902:	4b66      	ldr	r3, [pc, #408]	; (8003a9c <HAL_RCC_OscConfig+0x4f8>)
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	061b      	lsls	r3, r3, #24
 8003910:	4962      	ldr	r1, [pc, #392]	; (8003a9c <HAL_RCC_OscConfig+0x4f8>)
 8003912:	4313      	orrs	r3, r2
 8003914:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003916:	e05f      	b.n	80039d8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d042      	beq.n	80039a6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003920:	4b5e      	ldr	r3, [pc, #376]	; (8003a9c <HAL_RCC_OscConfig+0x4f8>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a5d      	ldr	r2, [pc, #372]	; (8003a9c <HAL_RCC_OscConfig+0x4f8>)
 8003926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800392a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392c:	f7fe ff68 	bl	8002800 <HAL_GetTick>
 8003930:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003934:	f7fe ff64 	bl	8002800 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e255      	b.n	8003df2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003946:	4b55      	ldr	r3, [pc, #340]	; (8003a9c <HAL_RCC_OscConfig+0x4f8>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394e:	2b00      	cmp	r3, #0
 8003950:	d0f0      	beq.n	8003934 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003952:	f7fe ff85 	bl	8002860 <HAL_GetREVID>
 8003956:	4603      	mov	r3, r0
 8003958:	f241 0203 	movw	r2, #4099	; 0x1003
 800395c:	4293      	cmp	r3, r2
 800395e:	d817      	bhi.n	8003990 <HAL_RCC_OscConfig+0x3ec>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	2b20      	cmp	r3, #32
 8003966:	d108      	bne.n	800397a <HAL_RCC_OscConfig+0x3d6>
 8003968:	4b4c      	ldr	r3, [pc, #304]	; (8003a9c <HAL_RCC_OscConfig+0x4f8>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003970:	4a4a      	ldr	r2, [pc, #296]	; (8003a9c <HAL_RCC_OscConfig+0x4f8>)
 8003972:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003976:	6053      	str	r3, [r2, #4]
 8003978:	e02e      	b.n	80039d8 <HAL_RCC_OscConfig+0x434>
 800397a:	4b48      	ldr	r3, [pc, #288]	; (8003a9c <HAL_RCC_OscConfig+0x4f8>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	069b      	lsls	r3, r3, #26
 8003988:	4944      	ldr	r1, [pc, #272]	; (8003a9c <HAL_RCC_OscConfig+0x4f8>)
 800398a:	4313      	orrs	r3, r2
 800398c:	604b      	str	r3, [r1, #4]
 800398e:	e023      	b.n	80039d8 <HAL_RCC_OscConfig+0x434>
 8003990:	4b42      	ldr	r3, [pc, #264]	; (8003a9c <HAL_RCC_OscConfig+0x4f8>)
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	061b      	lsls	r3, r3, #24
 800399e:	493f      	ldr	r1, [pc, #252]	; (8003a9c <HAL_RCC_OscConfig+0x4f8>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	60cb      	str	r3, [r1, #12]
 80039a4:	e018      	b.n	80039d8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80039a6:	4b3d      	ldr	r3, [pc, #244]	; (8003a9c <HAL_RCC_OscConfig+0x4f8>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a3c      	ldr	r2, [pc, #240]	; (8003a9c <HAL_RCC_OscConfig+0x4f8>)
 80039ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b2:	f7fe ff25 	bl	8002800 <HAL_GetTick>
 80039b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80039b8:	e008      	b.n	80039cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80039ba:	f7fe ff21 	bl	8002800 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e212      	b.n	8003df2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80039cc:	4b33      	ldr	r3, [pc, #204]	; (8003a9c <HAL_RCC_OscConfig+0x4f8>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1f0      	bne.n	80039ba <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0308 	and.w	r3, r3, #8
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d036      	beq.n	8003a52 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d019      	beq.n	8003a20 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039ec:	4b2b      	ldr	r3, [pc, #172]	; (8003a9c <HAL_RCC_OscConfig+0x4f8>)
 80039ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039f0:	4a2a      	ldr	r2, [pc, #168]	; (8003a9c <HAL_RCC_OscConfig+0x4f8>)
 80039f2:	f043 0301 	orr.w	r3, r3, #1
 80039f6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f8:	f7fe ff02 	bl	8002800 <HAL_GetTick>
 80039fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a00:	f7fe fefe 	bl	8002800 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e1ef      	b.n	8003df2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a12:	4b22      	ldr	r3, [pc, #136]	; (8003a9c <HAL_RCC_OscConfig+0x4f8>)
 8003a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d0f0      	beq.n	8003a00 <HAL_RCC_OscConfig+0x45c>
 8003a1e:	e018      	b.n	8003a52 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a20:	4b1e      	ldr	r3, [pc, #120]	; (8003a9c <HAL_RCC_OscConfig+0x4f8>)
 8003a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a24:	4a1d      	ldr	r2, [pc, #116]	; (8003a9c <HAL_RCC_OscConfig+0x4f8>)
 8003a26:	f023 0301 	bic.w	r3, r3, #1
 8003a2a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2c:	f7fe fee8 	bl	8002800 <HAL_GetTick>
 8003a30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a34:	f7fe fee4 	bl	8002800 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e1d5      	b.n	8003df2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a46:	4b15      	ldr	r3, [pc, #84]	; (8003a9c <HAL_RCC_OscConfig+0x4f8>)
 8003a48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1f0      	bne.n	8003a34 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0320 	and.w	r3, r3, #32
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d039      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d01c      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a66:	4b0d      	ldr	r3, [pc, #52]	; (8003a9c <HAL_RCC_OscConfig+0x4f8>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a0c      	ldr	r2, [pc, #48]	; (8003a9c <HAL_RCC_OscConfig+0x4f8>)
 8003a6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a70:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a72:	f7fe fec5 	bl	8002800 <HAL_GetTick>
 8003a76:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a78:	e008      	b.n	8003a8c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003a7a:	f7fe fec1 	bl	8002800 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d901      	bls.n	8003a8c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e1b2      	b.n	8003df2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a8c:	4b03      	ldr	r3, [pc, #12]	; (8003a9c <HAL_RCC_OscConfig+0x4f8>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d0f0      	beq.n	8003a7a <HAL_RCC_OscConfig+0x4d6>
 8003a98:	e01b      	b.n	8003ad2 <HAL_RCC_OscConfig+0x52e>
 8003a9a:	bf00      	nop
 8003a9c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003aa0:	4b9b      	ldr	r3, [pc, #620]	; (8003d10 <HAL_RCC_OscConfig+0x76c>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a9a      	ldr	r2, [pc, #616]	; (8003d10 <HAL_RCC_OscConfig+0x76c>)
 8003aa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003aaa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003aac:	f7fe fea8 	bl	8002800 <HAL_GetTick>
 8003ab0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003ab4:	f7fe fea4 	bl	8002800 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e195      	b.n	8003df2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ac6:	4b92      	ldr	r3, [pc, #584]	; (8003d10 <HAL_RCC_OscConfig+0x76c>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1f0      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0304 	and.w	r3, r3, #4
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f000 8081 	beq.w	8003be2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ae0:	4b8c      	ldr	r3, [pc, #560]	; (8003d14 <HAL_RCC_OscConfig+0x770>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a8b      	ldr	r2, [pc, #556]	; (8003d14 <HAL_RCC_OscConfig+0x770>)
 8003ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003aec:	f7fe fe88 	bl	8002800 <HAL_GetTick>
 8003af0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003af4:	f7fe fe84 	bl	8002800 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b64      	cmp	r3, #100	; 0x64
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e175      	b.n	8003df2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b06:	4b83      	ldr	r3, [pc, #524]	; (8003d14 <HAL_RCC_OscConfig+0x770>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0f0      	beq.n	8003af4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d106      	bne.n	8003b28 <HAL_RCC_OscConfig+0x584>
 8003b1a:	4b7d      	ldr	r3, [pc, #500]	; (8003d10 <HAL_RCC_OscConfig+0x76c>)
 8003b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1e:	4a7c      	ldr	r2, [pc, #496]	; (8003d10 <HAL_RCC_OscConfig+0x76c>)
 8003b20:	f043 0301 	orr.w	r3, r3, #1
 8003b24:	6713      	str	r3, [r2, #112]	; 0x70
 8003b26:	e02d      	b.n	8003b84 <HAL_RCC_OscConfig+0x5e0>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10c      	bne.n	8003b4a <HAL_RCC_OscConfig+0x5a6>
 8003b30:	4b77      	ldr	r3, [pc, #476]	; (8003d10 <HAL_RCC_OscConfig+0x76c>)
 8003b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b34:	4a76      	ldr	r2, [pc, #472]	; (8003d10 <HAL_RCC_OscConfig+0x76c>)
 8003b36:	f023 0301 	bic.w	r3, r3, #1
 8003b3a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b3c:	4b74      	ldr	r3, [pc, #464]	; (8003d10 <HAL_RCC_OscConfig+0x76c>)
 8003b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b40:	4a73      	ldr	r2, [pc, #460]	; (8003d10 <HAL_RCC_OscConfig+0x76c>)
 8003b42:	f023 0304 	bic.w	r3, r3, #4
 8003b46:	6713      	str	r3, [r2, #112]	; 0x70
 8003b48:	e01c      	b.n	8003b84 <HAL_RCC_OscConfig+0x5e0>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	2b05      	cmp	r3, #5
 8003b50:	d10c      	bne.n	8003b6c <HAL_RCC_OscConfig+0x5c8>
 8003b52:	4b6f      	ldr	r3, [pc, #444]	; (8003d10 <HAL_RCC_OscConfig+0x76c>)
 8003b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b56:	4a6e      	ldr	r2, [pc, #440]	; (8003d10 <HAL_RCC_OscConfig+0x76c>)
 8003b58:	f043 0304 	orr.w	r3, r3, #4
 8003b5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b5e:	4b6c      	ldr	r3, [pc, #432]	; (8003d10 <HAL_RCC_OscConfig+0x76c>)
 8003b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b62:	4a6b      	ldr	r2, [pc, #428]	; (8003d10 <HAL_RCC_OscConfig+0x76c>)
 8003b64:	f043 0301 	orr.w	r3, r3, #1
 8003b68:	6713      	str	r3, [r2, #112]	; 0x70
 8003b6a:	e00b      	b.n	8003b84 <HAL_RCC_OscConfig+0x5e0>
 8003b6c:	4b68      	ldr	r3, [pc, #416]	; (8003d10 <HAL_RCC_OscConfig+0x76c>)
 8003b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b70:	4a67      	ldr	r2, [pc, #412]	; (8003d10 <HAL_RCC_OscConfig+0x76c>)
 8003b72:	f023 0301 	bic.w	r3, r3, #1
 8003b76:	6713      	str	r3, [r2, #112]	; 0x70
 8003b78:	4b65      	ldr	r3, [pc, #404]	; (8003d10 <HAL_RCC_OscConfig+0x76c>)
 8003b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7c:	4a64      	ldr	r2, [pc, #400]	; (8003d10 <HAL_RCC_OscConfig+0x76c>)
 8003b7e:	f023 0304 	bic.w	r3, r3, #4
 8003b82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d015      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b8c:	f7fe fe38 	bl	8002800 <HAL_GetTick>
 8003b90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b92:	e00a      	b.n	8003baa <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b94:	f7fe fe34 	bl	8002800 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e123      	b.n	8003df2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003baa:	4b59      	ldr	r3, [pc, #356]	; (8003d10 <HAL_RCC_OscConfig+0x76c>)
 8003bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d0ee      	beq.n	8003b94 <HAL_RCC_OscConfig+0x5f0>
 8003bb6:	e014      	b.n	8003be2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb8:	f7fe fe22 	bl	8002800 <HAL_GetTick>
 8003bbc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003bbe:	e00a      	b.n	8003bd6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bc0:	f7fe fe1e 	bl	8002800 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e10d      	b.n	8003df2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003bd6:	4b4e      	ldr	r3, [pc, #312]	; (8003d10 <HAL_RCC_OscConfig+0x76c>)
 8003bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1ee      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 8102 	beq.w	8003df0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003bec:	4b48      	ldr	r3, [pc, #288]	; (8003d10 <HAL_RCC_OscConfig+0x76c>)
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bf4:	2b18      	cmp	r3, #24
 8003bf6:	f000 80bd 	beq.w	8003d74 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	f040 809e 	bne.w	8003d40 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c04:	4b42      	ldr	r3, [pc, #264]	; (8003d10 <HAL_RCC_OscConfig+0x76c>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a41      	ldr	r2, [pc, #260]	; (8003d10 <HAL_RCC_OscConfig+0x76c>)
 8003c0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c10:	f7fe fdf6 	bl	8002800 <HAL_GetTick>
 8003c14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c18:	f7fe fdf2 	bl	8002800 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e0e3      	b.n	8003df2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c2a:	4b39      	ldr	r3, [pc, #228]	; (8003d10 <HAL_RCC_OscConfig+0x76c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1f0      	bne.n	8003c18 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c36:	4b36      	ldr	r3, [pc, #216]	; (8003d10 <HAL_RCC_OscConfig+0x76c>)
 8003c38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c3a:	4b37      	ldr	r3, [pc, #220]	; (8003d18 <HAL_RCC_OscConfig+0x774>)
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c46:	0112      	lsls	r2, r2, #4
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	4931      	ldr	r1, [pc, #196]	; (8003d10 <HAL_RCC_OscConfig+0x76c>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	628b      	str	r3, [r1, #40]	; 0x28
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c54:	3b01      	subs	r3, #1
 8003c56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	025b      	lsls	r3, r3, #9
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	431a      	orrs	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	041b      	lsls	r3, r3, #16
 8003c6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003c72:	431a      	orrs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	061b      	lsls	r3, r3, #24
 8003c7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003c80:	4923      	ldr	r1, [pc, #140]	; (8003d10 <HAL_RCC_OscConfig+0x76c>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003c86:	4b22      	ldr	r3, [pc, #136]	; (8003d10 <HAL_RCC_OscConfig+0x76c>)
 8003c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8a:	4a21      	ldr	r2, [pc, #132]	; (8003d10 <HAL_RCC_OscConfig+0x76c>)
 8003c8c:	f023 0301 	bic.w	r3, r3, #1
 8003c90:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003c92:	4b1f      	ldr	r3, [pc, #124]	; (8003d10 <HAL_RCC_OscConfig+0x76c>)
 8003c94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c96:	4b21      	ldr	r3, [pc, #132]	; (8003d1c <HAL_RCC_OscConfig+0x778>)
 8003c98:	4013      	ands	r3, r2
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003c9e:	00d2      	lsls	r2, r2, #3
 8003ca0:	491b      	ldr	r1, [pc, #108]	; (8003d10 <HAL_RCC_OscConfig+0x76c>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003ca6:	4b1a      	ldr	r3, [pc, #104]	; (8003d10 <HAL_RCC_OscConfig+0x76c>)
 8003ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003caa:	f023 020c 	bic.w	r2, r3, #12
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	4917      	ldr	r1, [pc, #92]	; (8003d10 <HAL_RCC_OscConfig+0x76c>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003cb8:	4b15      	ldr	r3, [pc, #84]	; (8003d10 <HAL_RCC_OscConfig+0x76c>)
 8003cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbc:	f023 0202 	bic.w	r2, r3, #2
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc4:	4912      	ldr	r1, [pc, #72]	; (8003d10 <HAL_RCC_OscConfig+0x76c>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003cca:	4b11      	ldr	r3, [pc, #68]	; (8003d10 <HAL_RCC_OscConfig+0x76c>)
 8003ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cce:	4a10      	ldr	r2, [pc, #64]	; (8003d10 <HAL_RCC_OscConfig+0x76c>)
 8003cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cd4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cd6:	4b0e      	ldr	r3, [pc, #56]	; (8003d10 <HAL_RCC_OscConfig+0x76c>)
 8003cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cda:	4a0d      	ldr	r2, [pc, #52]	; (8003d10 <HAL_RCC_OscConfig+0x76c>)
 8003cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ce0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003ce2:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <HAL_RCC_OscConfig+0x76c>)
 8003ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce6:	4a0a      	ldr	r2, [pc, #40]	; (8003d10 <HAL_RCC_OscConfig+0x76c>)
 8003ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003cee:	4b08      	ldr	r3, [pc, #32]	; (8003d10 <HAL_RCC_OscConfig+0x76c>)
 8003cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf2:	4a07      	ldr	r2, [pc, #28]	; (8003d10 <HAL_RCC_OscConfig+0x76c>)
 8003cf4:	f043 0301 	orr.w	r3, r3, #1
 8003cf8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cfa:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <HAL_RCC_OscConfig+0x76c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a04      	ldr	r2, [pc, #16]	; (8003d10 <HAL_RCC_OscConfig+0x76c>)
 8003d00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d06:	f7fe fd7b 	bl	8002800 <HAL_GetTick>
 8003d0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d0c:	e011      	b.n	8003d32 <HAL_RCC_OscConfig+0x78e>
 8003d0e:	bf00      	nop
 8003d10:	58024400 	.word	0x58024400
 8003d14:	58024800 	.word	0x58024800
 8003d18:	fffffc0c 	.word	0xfffffc0c
 8003d1c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d20:	f7fe fd6e 	bl	8002800 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e05f      	b.n	8003df2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d32:	4b32      	ldr	r3, [pc, #200]	; (8003dfc <HAL_RCC_OscConfig+0x858>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d0f0      	beq.n	8003d20 <HAL_RCC_OscConfig+0x77c>
 8003d3e:	e057      	b.n	8003df0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d40:	4b2e      	ldr	r3, [pc, #184]	; (8003dfc <HAL_RCC_OscConfig+0x858>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a2d      	ldr	r2, [pc, #180]	; (8003dfc <HAL_RCC_OscConfig+0x858>)
 8003d46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4c:	f7fe fd58 	bl	8002800 <HAL_GetTick>
 8003d50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d54:	f7fe fd54 	bl	8002800 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e045      	b.n	8003df2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d66:	4b25      	ldr	r3, [pc, #148]	; (8003dfc <HAL_RCC_OscConfig+0x858>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1f0      	bne.n	8003d54 <HAL_RCC_OscConfig+0x7b0>
 8003d72:	e03d      	b.n	8003df0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003d74:	4b21      	ldr	r3, [pc, #132]	; (8003dfc <HAL_RCC_OscConfig+0x858>)
 8003d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d78:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003d7a:	4b20      	ldr	r3, [pc, #128]	; (8003dfc <HAL_RCC_OscConfig+0x858>)
 8003d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d031      	beq.n	8003dec <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	f003 0203 	and.w	r2, r3, #3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d12a      	bne.n	8003dec <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	091b      	lsrs	r3, r3, #4
 8003d9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d122      	bne.n	8003dec <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d11a      	bne.n	8003dec <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	0a5b      	lsrs	r3, r3, #9
 8003dba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d111      	bne.n	8003dec <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	0c1b      	lsrs	r3, r3, #16
 8003dcc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d108      	bne.n	8003dec <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	0e1b      	lsrs	r3, r3, #24
 8003dde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d001      	beq.n	8003df0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e000      	b.n	8003df2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3730      	adds	r7, #48	; 0x30
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	58024400 	.word	0x58024400

08003e00 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e19c      	b.n	800414e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e14:	4b8a      	ldr	r3, [pc, #552]	; (8004040 <HAL_RCC_ClockConfig+0x240>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 030f 	and.w	r3, r3, #15
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d910      	bls.n	8003e44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e22:	4b87      	ldr	r3, [pc, #540]	; (8004040 <HAL_RCC_ClockConfig+0x240>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f023 020f 	bic.w	r2, r3, #15
 8003e2a:	4985      	ldr	r1, [pc, #532]	; (8004040 <HAL_RCC_ClockConfig+0x240>)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e32:	4b83      	ldr	r3, [pc, #524]	; (8004040 <HAL_RCC_ClockConfig+0x240>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 030f 	and.w	r3, r3, #15
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d001      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e184      	b.n	800414e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d010      	beq.n	8003e72 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	691a      	ldr	r2, [r3, #16]
 8003e54:	4b7b      	ldr	r3, [pc, #492]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d908      	bls.n	8003e72 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003e60:	4b78      	ldr	r3, [pc, #480]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	4975      	ldr	r1, [pc, #468]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0308 	and.w	r3, r3, #8
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d010      	beq.n	8003ea0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	695a      	ldr	r2, [r3, #20]
 8003e82:	4b70      	ldr	r3, [pc, #448]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d908      	bls.n	8003ea0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003e8e:	4b6d      	ldr	r3, [pc, #436]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003e90:	69db      	ldr	r3, [r3, #28]
 8003e92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	496a      	ldr	r1, [pc, #424]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0310 	and.w	r3, r3, #16
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d010      	beq.n	8003ece <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	699a      	ldr	r2, [r3, #24]
 8003eb0:	4b64      	ldr	r3, [pc, #400]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003eb2:	69db      	ldr	r3, [r3, #28]
 8003eb4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d908      	bls.n	8003ece <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ebc:	4b61      	ldr	r3, [pc, #388]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003ebe:	69db      	ldr	r3, [r3, #28]
 8003ec0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	495e      	ldr	r1, [pc, #376]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0320 	and.w	r3, r3, #32
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d010      	beq.n	8003efc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	69da      	ldr	r2, [r3, #28]
 8003ede:	4b59      	ldr	r3, [pc, #356]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d908      	bls.n	8003efc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003eea:	4b56      	ldr	r3, [pc, #344]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	4953      	ldr	r1, [pc, #332]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d010      	beq.n	8003f2a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	68da      	ldr	r2, [r3, #12]
 8003f0c:	4b4d      	ldr	r3, [pc, #308]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	f003 030f 	and.w	r3, r3, #15
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d908      	bls.n	8003f2a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f18:	4b4a      	ldr	r3, [pc, #296]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	f023 020f 	bic.w	r2, r3, #15
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	4947      	ldr	r1, [pc, #284]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d055      	beq.n	8003fe2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003f36:	4b43      	ldr	r3, [pc, #268]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	4940      	ldr	r1, [pc, #256]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d107      	bne.n	8003f60 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f50:	4b3c      	ldr	r3, [pc, #240]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d121      	bne.n	8003fa0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e0f6      	b.n	800414e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	2b03      	cmp	r3, #3
 8003f66:	d107      	bne.n	8003f78 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f68:	4b36      	ldr	r3, [pc, #216]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d115      	bne.n	8003fa0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e0ea      	b.n	800414e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d107      	bne.n	8003f90 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f80:	4b30      	ldr	r3, [pc, #192]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d109      	bne.n	8003fa0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e0de      	b.n	800414e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f90:	4b2c      	ldr	r3, [pc, #176]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e0d6      	b.n	800414e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fa0:	4b28      	ldr	r3, [pc, #160]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	f023 0207 	bic.w	r2, r3, #7
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	4925      	ldr	r1, [pc, #148]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb2:	f7fe fc25 	bl	8002800 <HAL_GetTick>
 8003fb6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb8:	e00a      	b.n	8003fd0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fba:	f7fe fc21 	bl	8002800 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d901      	bls.n	8003fd0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e0be      	b.n	800414e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fd0:	4b1c      	ldr	r3, [pc, #112]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	00db      	lsls	r3, r3, #3
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d1eb      	bne.n	8003fba <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d010      	beq.n	8004010 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68da      	ldr	r2, [r3, #12]
 8003ff2:	4b14      	ldr	r3, [pc, #80]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	f003 030f 	and.w	r3, r3, #15
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d208      	bcs.n	8004010 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ffe:	4b11      	ldr	r3, [pc, #68]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	f023 020f 	bic.w	r2, r3, #15
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	490e      	ldr	r1, [pc, #56]	; (8004044 <HAL_RCC_ClockConfig+0x244>)
 800400c:	4313      	orrs	r3, r2
 800400e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004010:	4b0b      	ldr	r3, [pc, #44]	; (8004040 <HAL_RCC_ClockConfig+0x240>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 030f 	and.w	r3, r3, #15
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	429a      	cmp	r2, r3
 800401c:	d214      	bcs.n	8004048 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800401e:	4b08      	ldr	r3, [pc, #32]	; (8004040 <HAL_RCC_ClockConfig+0x240>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f023 020f 	bic.w	r2, r3, #15
 8004026:	4906      	ldr	r1, [pc, #24]	; (8004040 <HAL_RCC_ClockConfig+0x240>)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	4313      	orrs	r3, r2
 800402c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800402e:	4b04      	ldr	r3, [pc, #16]	; (8004040 <HAL_RCC_ClockConfig+0x240>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 030f 	and.w	r3, r3, #15
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	429a      	cmp	r2, r3
 800403a:	d005      	beq.n	8004048 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e086      	b.n	800414e <HAL_RCC_ClockConfig+0x34e>
 8004040:	52002000 	.word	0x52002000
 8004044:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b00      	cmp	r3, #0
 8004052:	d010      	beq.n	8004076 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	691a      	ldr	r2, [r3, #16]
 8004058:	4b3f      	ldr	r3, [pc, #252]	; (8004158 <HAL_RCC_ClockConfig+0x358>)
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004060:	429a      	cmp	r2, r3
 8004062:	d208      	bcs.n	8004076 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004064:	4b3c      	ldr	r3, [pc, #240]	; (8004158 <HAL_RCC_ClockConfig+0x358>)
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	4939      	ldr	r1, [pc, #228]	; (8004158 <HAL_RCC_ClockConfig+0x358>)
 8004072:	4313      	orrs	r3, r2
 8004074:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0308 	and.w	r3, r3, #8
 800407e:	2b00      	cmp	r3, #0
 8004080:	d010      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	695a      	ldr	r2, [r3, #20]
 8004086:	4b34      	ldr	r3, [pc, #208]	; (8004158 <HAL_RCC_ClockConfig+0x358>)
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800408e:	429a      	cmp	r2, r3
 8004090:	d208      	bcs.n	80040a4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004092:	4b31      	ldr	r3, [pc, #196]	; (8004158 <HAL_RCC_ClockConfig+0x358>)
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	492e      	ldr	r1, [pc, #184]	; (8004158 <HAL_RCC_ClockConfig+0x358>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0310 	and.w	r3, r3, #16
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d010      	beq.n	80040d2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	699a      	ldr	r2, [r3, #24]
 80040b4:	4b28      	ldr	r3, [pc, #160]	; (8004158 <HAL_RCC_ClockConfig+0x358>)
 80040b6:	69db      	ldr	r3, [r3, #28]
 80040b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80040bc:	429a      	cmp	r2, r3
 80040be:	d208      	bcs.n	80040d2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80040c0:	4b25      	ldr	r3, [pc, #148]	; (8004158 <HAL_RCC_ClockConfig+0x358>)
 80040c2:	69db      	ldr	r3, [r3, #28]
 80040c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	4922      	ldr	r1, [pc, #136]	; (8004158 <HAL_RCC_ClockConfig+0x358>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0320 	and.w	r3, r3, #32
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d010      	beq.n	8004100 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	69da      	ldr	r2, [r3, #28]
 80040e2:	4b1d      	ldr	r3, [pc, #116]	; (8004158 <HAL_RCC_ClockConfig+0x358>)
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d208      	bcs.n	8004100 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80040ee:	4b1a      	ldr	r3, [pc, #104]	; (8004158 <HAL_RCC_ClockConfig+0x358>)
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	4917      	ldr	r1, [pc, #92]	; (8004158 <HAL_RCC_ClockConfig+0x358>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004100:	f000 f834 	bl	800416c <HAL_RCC_GetSysClockFreq>
 8004104:	4602      	mov	r2, r0
 8004106:	4b14      	ldr	r3, [pc, #80]	; (8004158 <HAL_RCC_ClockConfig+0x358>)
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	0a1b      	lsrs	r3, r3, #8
 800410c:	f003 030f 	and.w	r3, r3, #15
 8004110:	4912      	ldr	r1, [pc, #72]	; (800415c <HAL_RCC_ClockConfig+0x35c>)
 8004112:	5ccb      	ldrb	r3, [r1, r3]
 8004114:	f003 031f 	and.w	r3, r3, #31
 8004118:	fa22 f303 	lsr.w	r3, r2, r3
 800411c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800411e:	4b0e      	ldr	r3, [pc, #56]	; (8004158 <HAL_RCC_ClockConfig+0x358>)
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	f003 030f 	and.w	r3, r3, #15
 8004126:	4a0d      	ldr	r2, [pc, #52]	; (800415c <HAL_RCC_ClockConfig+0x35c>)
 8004128:	5cd3      	ldrb	r3, [r2, r3]
 800412a:	f003 031f 	and.w	r3, r3, #31
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	fa22 f303 	lsr.w	r3, r2, r3
 8004134:	4a0a      	ldr	r2, [pc, #40]	; (8004160 <HAL_RCC_ClockConfig+0x360>)
 8004136:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004138:	4a0a      	ldr	r2, [pc, #40]	; (8004164 <HAL_RCC_ClockConfig+0x364>)
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800413e:	4b0a      	ldr	r3, [pc, #40]	; (8004168 <HAL_RCC_ClockConfig+0x368>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f7fe f9b2 	bl	80024ac <HAL_InitTick>
 8004148:	4603      	mov	r3, r0
 800414a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800414c:	7bfb      	ldrb	r3, [r7, #15]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3718      	adds	r7, #24
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	58024400 	.word	0x58024400
 800415c:	0800d0b0 	.word	0x0800d0b0
 8004160:	24000004 	.word	0x24000004
 8004164:	24000000 	.word	0x24000000
 8004168:	24000010 	.word	0x24000010

0800416c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800416c:	b480      	push	{r7}
 800416e:	b089      	sub	sp, #36	; 0x24
 8004170:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004172:	4bb3      	ldr	r3, [pc, #716]	; (8004440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800417a:	2b18      	cmp	r3, #24
 800417c:	f200 8155 	bhi.w	800442a <HAL_RCC_GetSysClockFreq+0x2be>
 8004180:	a201      	add	r2, pc, #4	; (adr r2, 8004188 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004186:	bf00      	nop
 8004188:	080041ed 	.word	0x080041ed
 800418c:	0800442b 	.word	0x0800442b
 8004190:	0800442b 	.word	0x0800442b
 8004194:	0800442b 	.word	0x0800442b
 8004198:	0800442b 	.word	0x0800442b
 800419c:	0800442b 	.word	0x0800442b
 80041a0:	0800442b 	.word	0x0800442b
 80041a4:	0800442b 	.word	0x0800442b
 80041a8:	08004213 	.word	0x08004213
 80041ac:	0800442b 	.word	0x0800442b
 80041b0:	0800442b 	.word	0x0800442b
 80041b4:	0800442b 	.word	0x0800442b
 80041b8:	0800442b 	.word	0x0800442b
 80041bc:	0800442b 	.word	0x0800442b
 80041c0:	0800442b 	.word	0x0800442b
 80041c4:	0800442b 	.word	0x0800442b
 80041c8:	08004219 	.word	0x08004219
 80041cc:	0800442b 	.word	0x0800442b
 80041d0:	0800442b 	.word	0x0800442b
 80041d4:	0800442b 	.word	0x0800442b
 80041d8:	0800442b 	.word	0x0800442b
 80041dc:	0800442b 	.word	0x0800442b
 80041e0:	0800442b 	.word	0x0800442b
 80041e4:	0800442b 	.word	0x0800442b
 80041e8:	0800421f 	.word	0x0800421f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041ec:	4b94      	ldr	r3, [pc, #592]	; (8004440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0320 	and.w	r3, r3, #32
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d009      	beq.n	800420c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80041f8:	4b91      	ldr	r3, [pc, #580]	; (8004440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	08db      	lsrs	r3, r3, #3
 80041fe:	f003 0303 	and.w	r3, r3, #3
 8004202:	4a90      	ldr	r2, [pc, #576]	; (8004444 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004204:	fa22 f303 	lsr.w	r3, r2, r3
 8004208:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800420a:	e111      	b.n	8004430 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800420c:	4b8d      	ldr	r3, [pc, #564]	; (8004444 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800420e:	61bb      	str	r3, [r7, #24]
    break;
 8004210:	e10e      	b.n	8004430 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004212:	4b8d      	ldr	r3, [pc, #564]	; (8004448 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004214:	61bb      	str	r3, [r7, #24]
    break;
 8004216:	e10b      	b.n	8004430 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004218:	4b8c      	ldr	r3, [pc, #560]	; (800444c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800421a:	61bb      	str	r3, [r7, #24]
    break;
 800421c:	e108      	b.n	8004430 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800421e:	4b88      	ldr	r3, [pc, #544]	; (8004440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004222:	f003 0303 	and.w	r3, r3, #3
 8004226:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004228:	4b85      	ldr	r3, [pc, #532]	; (8004440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800422a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422c:	091b      	lsrs	r3, r3, #4
 800422e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004232:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004234:	4b82      	ldr	r3, [pc, #520]	; (8004440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800423e:	4b80      	ldr	r3, [pc, #512]	; (8004440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004242:	08db      	lsrs	r3, r3, #3
 8004244:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	fb02 f303 	mul.w	r3, r2, r3
 800424e:	ee07 3a90 	vmov	s15, r3
 8004252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004256:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 80e1 	beq.w	8004424 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2b02      	cmp	r3, #2
 8004266:	f000 8083 	beq.w	8004370 <HAL_RCC_GetSysClockFreq+0x204>
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	2b02      	cmp	r3, #2
 800426e:	f200 80a1 	bhi.w	80043b4 <HAL_RCC_GetSysClockFreq+0x248>
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d003      	beq.n	8004280 <HAL_RCC_GetSysClockFreq+0x114>
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d056      	beq.n	800432c <HAL_RCC_GetSysClockFreq+0x1c0>
 800427e:	e099      	b.n	80043b4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004280:	4b6f      	ldr	r3, [pc, #444]	; (8004440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0320 	and.w	r3, r3, #32
 8004288:	2b00      	cmp	r3, #0
 800428a:	d02d      	beq.n	80042e8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800428c:	4b6c      	ldr	r3, [pc, #432]	; (8004440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	08db      	lsrs	r3, r3, #3
 8004292:	f003 0303 	and.w	r3, r3, #3
 8004296:	4a6b      	ldr	r2, [pc, #428]	; (8004444 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004298:	fa22 f303 	lsr.w	r3, r2, r3
 800429c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	ee07 3a90 	vmov	s15, r3
 80042a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	ee07 3a90 	vmov	s15, r3
 80042ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042b6:	4b62      	ldr	r3, [pc, #392]	; (8004440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042be:	ee07 3a90 	vmov	s15, r3
 80042c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80042ca:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004450 <HAL_RCC_GetSysClockFreq+0x2e4>
 80042ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80042e6:	e087      	b.n	80043f8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	ee07 3a90 	vmov	s15, r3
 80042ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042f2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004454 <HAL_RCC_GetSysClockFreq+0x2e8>
 80042f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042fa:	4b51      	ldr	r3, [pc, #324]	; (8004440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004302:	ee07 3a90 	vmov	s15, r3
 8004306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800430a:	ed97 6a02 	vldr	s12, [r7, #8]
 800430e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004450 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800431a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800431e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004326:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800432a:	e065      	b.n	80043f8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	ee07 3a90 	vmov	s15, r3
 8004332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004336:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004458 <HAL_RCC_GetSysClockFreq+0x2ec>
 800433a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800433e:	4b40      	ldr	r3, [pc, #256]	; (8004440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004346:	ee07 3a90 	vmov	s15, r3
 800434a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800434e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004352:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004450 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800435a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800435e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800436a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800436e:	e043      	b.n	80043f8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	ee07 3a90 	vmov	s15, r3
 8004376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800437a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800445c <HAL_RCC_GetSysClockFreq+0x2f0>
 800437e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004382:	4b2f      	ldr	r3, [pc, #188]	; (8004440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800438a:	ee07 3a90 	vmov	s15, r3
 800438e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004392:	ed97 6a02 	vldr	s12, [r7, #8]
 8004396:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004450 <HAL_RCC_GetSysClockFreq+0x2e4>
 800439a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800439e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043b2:	e021      	b.n	80043f8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	ee07 3a90 	vmov	s15, r3
 80043ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043be:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004458 <HAL_RCC_GetSysClockFreq+0x2ec>
 80043c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043c6:	4b1e      	ldr	r3, [pc, #120]	; (8004440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ce:	ee07 3a90 	vmov	s15, r3
 80043d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80043da:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004450 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043f6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80043f8:	4b11      	ldr	r3, [pc, #68]	; (8004440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fc:	0a5b      	lsrs	r3, r3, #9
 80043fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004402:	3301      	adds	r3, #1
 8004404:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	ee07 3a90 	vmov	s15, r3
 800440c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004410:	edd7 6a07 	vldr	s13, [r7, #28]
 8004414:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004418:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800441c:	ee17 3a90 	vmov	r3, s15
 8004420:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004422:	e005      	b.n	8004430 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004424:	2300      	movs	r3, #0
 8004426:	61bb      	str	r3, [r7, #24]
    break;
 8004428:	e002      	b.n	8004430 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800442a:	4b07      	ldr	r3, [pc, #28]	; (8004448 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800442c:	61bb      	str	r3, [r7, #24]
    break;
 800442e:	bf00      	nop
  }

  return sysclockfreq;
 8004430:	69bb      	ldr	r3, [r7, #24]
}
 8004432:	4618      	mov	r0, r3
 8004434:	3724      	adds	r7, #36	; 0x24
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	58024400 	.word	0x58024400
 8004444:	03d09000 	.word	0x03d09000
 8004448:	003d0900 	.word	0x003d0900
 800444c:	017d7840 	.word	0x017d7840
 8004450:	46000000 	.word	0x46000000
 8004454:	4c742400 	.word	0x4c742400
 8004458:	4a742400 	.word	0x4a742400
 800445c:	4bbebc20 	.word	0x4bbebc20

08004460 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004466:	f7ff fe81 	bl	800416c <HAL_RCC_GetSysClockFreq>
 800446a:	4602      	mov	r2, r0
 800446c:	4b10      	ldr	r3, [pc, #64]	; (80044b0 <HAL_RCC_GetHCLKFreq+0x50>)
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	0a1b      	lsrs	r3, r3, #8
 8004472:	f003 030f 	and.w	r3, r3, #15
 8004476:	490f      	ldr	r1, [pc, #60]	; (80044b4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004478:	5ccb      	ldrb	r3, [r1, r3]
 800447a:	f003 031f 	and.w	r3, r3, #31
 800447e:	fa22 f303 	lsr.w	r3, r2, r3
 8004482:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004484:	4b0a      	ldr	r3, [pc, #40]	; (80044b0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	f003 030f 	and.w	r3, r3, #15
 800448c:	4a09      	ldr	r2, [pc, #36]	; (80044b4 <HAL_RCC_GetHCLKFreq+0x54>)
 800448e:	5cd3      	ldrb	r3, [r2, r3]
 8004490:	f003 031f 	and.w	r3, r3, #31
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	fa22 f303 	lsr.w	r3, r2, r3
 800449a:	4a07      	ldr	r2, [pc, #28]	; (80044b8 <HAL_RCC_GetHCLKFreq+0x58>)
 800449c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800449e:	4a07      	ldr	r2, [pc, #28]	; (80044bc <HAL_RCC_GetHCLKFreq+0x5c>)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80044a4:	4b04      	ldr	r3, [pc, #16]	; (80044b8 <HAL_RCC_GetHCLKFreq+0x58>)
 80044a6:	681b      	ldr	r3, [r3, #0]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3708      	adds	r7, #8
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	58024400 	.word	0x58024400
 80044b4:	0800d0b0 	.word	0x0800d0b0
 80044b8:	24000004 	.word	0x24000004
 80044bc:	24000000 	.word	0x24000000

080044c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80044c4:	f7ff ffcc 	bl	8004460 <HAL_RCC_GetHCLKFreq>
 80044c8:	4602      	mov	r2, r0
 80044ca:	4b06      	ldr	r3, [pc, #24]	; (80044e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	091b      	lsrs	r3, r3, #4
 80044d0:	f003 0307 	and.w	r3, r3, #7
 80044d4:	4904      	ldr	r1, [pc, #16]	; (80044e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80044d6:	5ccb      	ldrb	r3, [r1, r3]
 80044d8:	f003 031f 	and.w	r3, r3, #31
 80044dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	58024400 	.word	0x58024400
 80044e8:	0800d0b0 	.word	0x0800d0b0

080044ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80044f0:	f7ff ffb6 	bl	8004460 <HAL_RCC_GetHCLKFreq>
 80044f4:	4602      	mov	r2, r0
 80044f6:	4b06      	ldr	r3, [pc, #24]	; (8004510 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044f8:	69db      	ldr	r3, [r3, #28]
 80044fa:	0a1b      	lsrs	r3, r3, #8
 80044fc:	f003 0307 	and.w	r3, r3, #7
 8004500:	4904      	ldr	r1, [pc, #16]	; (8004514 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004502:	5ccb      	ldrb	r3, [r1, r3]
 8004504:	f003 031f 	and.w	r3, r3, #31
 8004508:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800450c:	4618      	mov	r0, r3
 800450e:	bd80      	pop	{r7, pc}
 8004510:	58024400 	.word	0x58024400
 8004514:	0800d0b0 	.word	0x0800d0b0

08004518 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	223f      	movs	r2, #63	; 0x3f
 8004526:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004528:	4b1a      	ldr	r3, [pc, #104]	; (8004594 <HAL_RCC_GetClockConfig+0x7c>)
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	f003 0207 	and.w	r2, r3, #7
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004534:	4b17      	ldr	r3, [pc, #92]	; (8004594 <HAL_RCC_GetClockConfig+0x7c>)
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004540:	4b14      	ldr	r3, [pc, #80]	; (8004594 <HAL_RCC_GetClockConfig+0x7c>)
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	f003 020f 	and.w	r2, r3, #15
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800454c:	4b11      	ldr	r3, [pc, #68]	; (8004594 <HAL_RCC_GetClockConfig+0x7c>)
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004558:	4b0e      	ldr	r3, [pc, #56]	; (8004594 <HAL_RCC_GetClockConfig+0x7c>)
 800455a:	69db      	ldr	r3, [r3, #28]
 800455c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004564:	4b0b      	ldr	r3, [pc, #44]	; (8004594 <HAL_RCC_GetClockConfig+0x7c>)
 8004566:	69db      	ldr	r3, [r3, #28]
 8004568:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004570:	4b08      	ldr	r3, [pc, #32]	; (8004594 <HAL_RCC_GetClockConfig+0x7c>)
 8004572:	6a1b      	ldr	r3, [r3, #32]
 8004574:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800457c:	4b06      	ldr	r3, [pc, #24]	; (8004598 <HAL_RCC_GetClockConfig+0x80>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 020f 	and.w	r2, r3, #15
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	601a      	str	r2, [r3, #0]
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	58024400 	.word	0x58024400
 8004598:	52002000 	.word	0x52002000

0800459c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80045a4:	2300      	movs	r3, #0
 80045a6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045a8:	2300      	movs	r3, #0
 80045aa:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d03f      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80045c0:	d02a      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80045c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80045c6:	d824      	bhi.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80045c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045cc:	d018      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80045ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045d2:	d81e      	bhi.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d003      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80045d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045dc:	d007      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x52>
 80045de:	e018      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045e0:	4ba3      	ldr	r3, [pc, #652]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80045e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e4:	4aa2      	ldr	r2, [pc, #648]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80045e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80045ec:	e015      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	3304      	adds	r3, #4
 80045f2:	2102      	movs	r1, #2
 80045f4:	4618      	mov	r0, r3
 80045f6:	f001 f9d5 	bl	80059a4 <RCCEx_PLL2_Config>
 80045fa:	4603      	mov	r3, r0
 80045fc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80045fe:	e00c      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	3324      	adds	r3, #36	; 0x24
 8004604:	2102      	movs	r1, #2
 8004606:	4618      	mov	r0, r3
 8004608:	f001 fa7e 	bl	8005b08 <RCCEx_PLL3_Config>
 800460c:	4603      	mov	r3, r0
 800460e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004610:	e003      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	75fb      	strb	r3, [r7, #23]
      break;
 8004616:	e000      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004618:	bf00      	nop
    }

    if(ret == HAL_OK)
 800461a:	7dfb      	ldrb	r3, [r7, #23]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d109      	bne.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004620:	4b93      	ldr	r3, [pc, #588]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004624:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800462c:	4990      	ldr	r1, [pc, #576]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800462e:	4313      	orrs	r3, r2
 8004630:	650b      	str	r3, [r1, #80]	; 0x50
 8004632:	e001      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004634:	7dfb      	ldrb	r3, [r7, #23]
 8004636:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004640:	2b00      	cmp	r3, #0
 8004642:	d03d      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004648:	2b04      	cmp	r3, #4
 800464a:	d826      	bhi.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800464c:	a201      	add	r2, pc, #4	; (adr r2, 8004654 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800464e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004652:	bf00      	nop
 8004654:	08004669 	.word	0x08004669
 8004658:	08004677 	.word	0x08004677
 800465c:	08004689 	.word	0x08004689
 8004660:	080046a1 	.word	0x080046a1
 8004664:	080046a1 	.word	0x080046a1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004668:	4b81      	ldr	r3, [pc, #516]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800466a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466c:	4a80      	ldr	r2, [pc, #512]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800466e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004672:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004674:	e015      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	3304      	adds	r3, #4
 800467a:	2100      	movs	r1, #0
 800467c:	4618      	mov	r0, r3
 800467e:	f001 f991 	bl	80059a4 <RCCEx_PLL2_Config>
 8004682:	4603      	mov	r3, r0
 8004684:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004686:	e00c      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	3324      	adds	r3, #36	; 0x24
 800468c:	2100      	movs	r1, #0
 800468e:	4618      	mov	r0, r3
 8004690:	f001 fa3a 	bl	8005b08 <RCCEx_PLL3_Config>
 8004694:	4603      	mov	r3, r0
 8004696:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004698:	e003      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	75fb      	strb	r3, [r7, #23]
      break;
 800469e:	e000      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80046a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046a2:	7dfb      	ldrb	r3, [r7, #23]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d109      	bne.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046a8:	4b71      	ldr	r3, [pc, #452]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80046aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ac:	f023 0207 	bic.w	r2, r3, #7
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b4:	496e      	ldr	r1, [pc, #440]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	650b      	str	r3, [r1, #80]	; 0x50
 80046ba:	e001      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046bc:	7dfb      	ldrb	r3, [r7, #23]
 80046be:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d042      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046d4:	d02b      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x192>
 80046d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046da:	d825      	bhi.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80046dc:	2bc0      	cmp	r3, #192	; 0xc0
 80046de:	d028      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80046e0:	2bc0      	cmp	r3, #192	; 0xc0
 80046e2:	d821      	bhi.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80046e4:	2b80      	cmp	r3, #128	; 0x80
 80046e6:	d016      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80046e8:	2b80      	cmp	r3, #128	; 0x80
 80046ea:	d81d      	bhi.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d002      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80046f0:	2b40      	cmp	r3, #64	; 0x40
 80046f2:	d007      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80046f4:	e018      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046f6:	4b5e      	ldr	r3, [pc, #376]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80046f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fa:	4a5d      	ldr	r2, [pc, #372]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80046fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004700:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004702:	e017      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	3304      	adds	r3, #4
 8004708:	2100      	movs	r1, #0
 800470a:	4618      	mov	r0, r3
 800470c:	f001 f94a 	bl	80059a4 <RCCEx_PLL2_Config>
 8004710:	4603      	mov	r3, r0
 8004712:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004714:	e00e      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	3324      	adds	r3, #36	; 0x24
 800471a:	2100      	movs	r1, #0
 800471c:	4618      	mov	r0, r3
 800471e:	f001 f9f3 	bl	8005b08 <RCCEx_PLL3_Config>
 8004722:	4603      	mov	r3, r0
 8004724:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004726:	e005      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	75fb      	strb	r3, [r7, #23]
      break;
 800472c:	e002      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800472e:	bf00      	nop
 8004730:	e000      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004732:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004734:	7dfb      	ldrb	r3, [r7, #23]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d109      	bne.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800473a:	4b4d      	ldr	r3, [pc, #308]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800473c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800473e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004746:	494a      	ldr	r1, [pc, #296]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004748:	4313      	orrs	r3, r2
 800474a:	650b      	str	r3, [r1, #80]	; 0x50
 800474c:	e001      	b.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800474e:	7dfb      	ldrb	r3, [r7, #23]
 8004750:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800475a:	2b00      	cmp	r3, #0
 800475c:	d049      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004764:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004768:	d030      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x230>
 800476a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800476e:	d82a      	bhi.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004770:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004774:	d02c      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004776:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800477a:	d824      	bhi.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800477c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004780:	d018      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004782:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004786:	d81e      	bhi.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004788:	2b00      	cmp	r3, #0
 800478a:	d003      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800478c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004790:	d007      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004792:	e018      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004794:	4b36      	ldr	r3, [pc, #216]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004798:	4a35      	ldr	r2, [pc, #212]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800479a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800479e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80047a0:	e017      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	3304      	adds	r3, #4
 80047a6:	2100      	movs	r1, #0
 80047a8:	4618      	mov	r0, r3
 80047aa:	f001 f8fb 	bl	80059a4 <RCCEx_PLL2_Config>
 80047ae:	4603      	mov	r3, r0
 80047b0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80047b2:	e00e      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	3324      	adds	r3, #36	; 0x24
 80047b8:	2100      	movs	r1, #0
 80047ba:	4618      	mov	r0, r3
 80047bc:	f001 f9a4 	bl	8005b08 <RCCEx_PLL3_Config>
 80047c0:	4603      	mov	r3, r0
 80047c2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80047c4:	e005      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	75fb      	strb	r3, [r7, #23]
      break;
 80047ca:	e002      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80047cc:	bf00      	nop
 80047ce:	e000      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80047d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047d2:	7dfb      	ldrb	r3, [r7, #23]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10a      	bne.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80047d8:	4b25      	ldr	r3, [pc, #148]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80047da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047dc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80047e6:	4922      	ldr	r1, [pc, #136]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	658b      	str	r3, [r1, #88]	; 0x58
 80047ec:	e001      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ee:	7dfb      	ldrb	r3, [r7, #23]
 80047f0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d04b      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004804:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004808:	d030      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800480a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800480e:	d82a      	bhi.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004810:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004814:	d02e      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8004816:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800481a:	d824      	bhi.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800481c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004820:	d018      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004822:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004826:	d81e      	bhi.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004828:	2b00      	cmp	r3, #0
 800482a:	d003      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800482c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004830:	d007      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004832:	e018      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004834:	4b0e      	ldr	r3, [pc, #56]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004838:	4a0d      	ldr	r2, [pc, #52]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800483a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800483e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004840:	e019      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	3304      	adds	r3, #4
 8004846:	2100      	movs	r1, #0
 8004848:	4618      	mov	r0, r3
 800484a:	f001 f8ab 	bl	80059a4 <RCCEx_PLL2_Config>
 800484e:	4603      	mov	r3, r0
 8004850:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004852:	e010      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	3324      	adds	r3, #36	; 0x24
 8004858:	2100      	movs	r1, #0
 800485a:	4618      	mov	r0, r3
 800485c:	f001 f954 	bl	8005b08 <RCCEx_PLL3_Config>
 8004860:	4603      	mov	r3, r0
 8004862:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004864:	e007      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	75fb      	strb	r3, [r7, #23]
      break;
 800486a:	e004      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800486c:	bf00      	nop
 800486e:	e002      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004870:	58024400 	.word	0x58024400
      break;
 8004874:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004876:	7dfb      	ldrb	r3, [r7, #23]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10a      	bne.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800487c:	4b99      	ldr	r3, [pc, #612]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800487e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004880:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800488a:	4996      	ldr	r1, [pc, #600]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800488c:	4313      	orrs	r3, r2
 800488e:	658b      	str	r3, [r1, #88]	; 0x58
 8004890:	e001      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004892:	7dfb      	ldrb	r3, [r7, #23]
 8004894:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d032      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048a6:	2b30      	cmp	r3, #48	; 0x30
 80048a8:	d01c      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80048aa:	2b30      	cmp	r3, #48	; 0x30
 80048ac:	d817      	bhi.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x342>
 80048ae:	2b20      	cmp	r3, #32
 80048b0:	d00c      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x330>
 80048b2:	2b20      	cmp	r3, #32
 80048b4:	d813      	bhi.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x342>
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d016      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80048ba:	2b10      	cmp	r3, #16
 80048bc:	d10f      	bne.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048be:	4b89      	ldr	r3, [pc, #548]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80048c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c2:	4a88      	ldr	r2, [pc, #544]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80048c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80048ca:	e00e      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	3304      	adds	r3, #4
 80048d0:	2102      	movs	r1, #2
 80048d2:	4618      	mov	r0, r3
 80048d4:	f001 f866 	bl	80059a4 <RCCEx_PLL2_Config>
 80048d8:	4603      	mov	r3, r0
 80048da:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80048dc:	e005      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	75fb      	strb	r3, [r7, #23]
      break;
 80048e2:	e002      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80048e4:	bf00      	nop
 80048e6:	e000      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80048e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048ea:	7dfb      	ldrb	r3, [r7, #23]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d109      	bne.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80048f0:	4b7c      	ldr	r3, [pc, #496]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80048f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048fc:	4979      	ldr	r1, [pc, #484]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004902:	e001      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004904:	7dfb      	ldrb	r3, [r7, #23]
 8004906:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d047      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004918:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800491c:	d030      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800491e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004922:	d82a      	bhi.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004924:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004928:	d02c      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800492a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800492e:	d824      	bhi.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004930:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004934:	d018      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004936:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800493a:	d81e      	bhi.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800493c:	2b00      	cmp	r3, #0
 800493e:	d003      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8004940:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004944:	d007      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8004946:	e018      	b.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004948:	4b66      	ldr	r3, [pc, #408]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800494a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494c:	4a65      	ldr	r2, [pc, #404]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800494e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004952:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004954:	e017      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	3304      	adds	r3, #4
 800495a:	2100      	movs	r1, #0
 800495c:	4618      	mov	r0, r3
 800495e:	f001 f821 	bl	80059a4 <RCCEx_PLL2_Config>
 8004962:	4603      	mov	r3, r0
 8004964:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004966:	e00e      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	3324      	adds	r3, #36	; 0x24
 800496c:	2100      	movs	r1, #0
 800496e:	4618      	mov	r0, r3
 8004970:	f001 f8ca 	bl	8005b08 <RCCEx_PLL3_Config>
 8004974:	4603      	mov	r3, r0
 8004976:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004978:	e005      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	75fb      	strb	r3, [r7, #23]
      break;
 800497e:	e002      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004980:	bf00      	nop
 8004982:	e000      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004984:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004986:	7dfb      	ldrb	r3, [r7, #23]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d109      	bne.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800498c:	4b55      	ldr	r3, [pc, #340]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800498e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004990:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004998:	4952      	ldr	r1, [pc, #328]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800499a:	4313      	orrs	r3, r2
 800499c:	650b      	str	r3, [r1, #80]	; 0x50
 800499e:	e001      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a0:	7dfb      	ldrb	r3, [r7, #23]
 80049a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d049      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049b8:	d02e      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80049ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049be:	d828      	bhi.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80049c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049c4:	d02a      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x480>
 80049c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049ca:	d822      	bhi.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80049cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80049d0:	d026      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80049d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80049d6:	d81c      	bhi.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80049d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049dc:	d010      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80049de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049e2:	d816      	bhi.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d01d      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80049e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049ec:	d111      	bne.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	3304      	adds	r3, #4
 80049f2:	2101      	movs	r1, #1
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 ffd5 	bl	80059a4 <RCCEx_PLL2_Config>
 80049fa:	4603      	mov	r3, r0
 80049fc:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80049fe:	e012      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	3324      	adds	r3, #36	; 0x24
 8004a04:	2101      	movs	r1, #1
 8004a06:	4618      	mov	r0, r3
 8004a08:	f001 f87e 	bl	8005b08 <RCCEx_PLL3_Config>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004a10:	e009      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	75fb      	strb	r3, [r7, #23]
      break;
 8004a16:	e006      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004a18:	bf00      	nop
 8004a1a:	e004      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004a1c:	bf00      	nop
 8004a1e:	e002      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004a20:	bf00      	nop
 8004a22:	e000      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004a24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a26:	7dfb      	ldrb	r3, [r7, #23]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d109      	bne.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004a2c:	4b2d      	ldr	r3, [pc, #180]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a30:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a38:	492a      	ldr	r1, [pc, #168]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	650b      	str	r3, [r1, #80]	; 0x50
 8004a3e:	e001      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a40:	7dfb      	ldrb	r3, [r7, #23]
 8004a42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d04d      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004a56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a5a:	d02e      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004a5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a60:	d828      	bhi.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a66:	d02a      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a6c:	d822      	bhi.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004a6e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a72:	d026      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8004a74:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a78:	d81c      	bhi.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004a7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a7e:	d010      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004a80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a84:	d816      	bhi.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d01d      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004a8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a8e:	d111      	bne.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	3304      	adds	r3, #4
 8004a94:	2101      	movs	r1, #1
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 ff84 	bl	80059a4 <RCCEx_PLL2_Config>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004aa0:	e012      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	3324      	adds	r3, #36	; 0x24
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f001 f82d 	bl	8005b08 <RCCEx_PLL3_Config>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004ab2:	e009      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ab8:	e006      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004aba:	bf00      	nop
 8004abc:	e004      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004abe:	bf00      	nop
 8004ac0:	e002      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004ac2:	bf00      	nop
 8004ac4:	e000      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004ac6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ac8:	7dfb      	ldrb	r3, [r7, #23]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10c      	bne.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004ace:	4b05      	ldr	r3, [pc, #20]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004adc:	4901      	ldr	r1, [pc, #4]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	658b      	str	r3, [r1, #88]	; 0x58
 8004ae2:	e003      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004ae4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ae8:	7dfb      	ldrb	r3, [r7, #23]
 8004aea:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d02f      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004afc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b00:	d00e      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8004b02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b06:	d814      	bhi.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d015      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8004b0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b10:	d10f      	bne.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b12:	4baf      	ldr	r3, [pc, #700]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b16:	4aae      	ldr	r2, [pc, #696]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004b1e:	e00c      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	3304      	adds	r3, #4
 8004b24:	2101      	movs	r1, #1
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 ff3c 	bl	80059a4 <RCCEx_PLL2_Config>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004b30:	e003      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	75fb      	strb	r3, [r7, #23]
      break;
 8004b36:	e000      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8004b38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b3a:	7dfb      	ldrb	r3, [r7, #23]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d109      	bne.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004b40:	4ba3      	ldr	r3, [pc, #652]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b44:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b4c:	49a0      	ldr	r1, [pc, #640]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	650b      	str	r3, [r1, #80]	; 0x50
 8004b52:	e001      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b54:	7dfb      	ldrb	r3, [r7, #23]
 8004b56:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d032      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b68:	2b03      	cmp	r3, #3
 8004b6a:	d81b      	bhi.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004b6c:	a201      	add	r2, pc, #4	; (adr r2, 8004b74 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8004b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b72:	bf00      	nop
 8004b74:	08004bab 	.word	0x08004bab
 8004b78:	08004b85 	.word	0x08004b85
 8004b7c:	08004b93 	.word	0x08004b93
 8004b80:	08004bab 	.word	0x08004bab
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b84:	4b92      	ldr	r3, [pc, #584]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b88:	4a91      	ldr	r2, [pc, #580]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004b90:	e00c      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	3304      	adds	r3, #4
 8004b96:	2102      	movs	r1, #2
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f000 ff03 	bl	80059a4 <RCCEx_PLL2_Config>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004ba2:	e003      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ba8:	e000      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004baa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bac:	7dfb      	ldrb	r3, [r7, #23]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d109      	bne.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004bb2:	4b87      	ldr	r3, [pc, #540]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bb6:	f023 0203 	bic.w	r2, r3, #3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bbe:	4984      	ldr	r1, [pc, #528]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004bc4:	e001      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bc6:	7dfb      	ldrb	r3, [r7, #23]
 8004bc8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f000 8086 	beq.w	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bd8:	4b7e      	ldr	r3, [pc, #504]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a7d      	ldr	r2, [pc, #500]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004be2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004be4:	f7fd fe0c 	bl	8002800 <HAL_GetTick>
 8004be8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bea:	e009      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bec:	f7fd fe08 	bl	8002800 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b64      	cmp	r3, #100	; 0x64
 8004bf8:	d902      	bls.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	75fb      	strb	r3, [r7, #23]
        break;
 8004bfe:	e005      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c00:	4b74      	ldr	r3, [pc, #464]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d0ef      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004c0c:	7dfb      	ldrb	r3, [r7, #23]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d166      	bne.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004c12:	4b6f      	ldr	r3, [pc, #444]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c1c:	4053      	eors	r3, r2
 8004c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d013      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c26:	4b6a      	ldr	r3, [pc, #424]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c2e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c30:	4b67      	ldr	r3, [pc, #412]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c34:	4a66      	ldr	r2, [pc, #408]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c3a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c3c:	4b64      	ldr	r3, [pc, #400]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c40:	4a63      	ldr	r2, [pc, #396]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c46:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004c48:	4a61      	ldr	r2, [pc, #388]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c58:	d115      	bne.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c5a:	f7fd fdd1 	bl	8002800 <HAL_GetTick>
 8004c5e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c60:	e00b      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c62:	f7fd fdcd 	bl	8002800 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d902      	bls.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	75fb      	strb	r3, [r7, #23]
            break;
 8004c78:	e005      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c7a:	4b55      	ldr	r3, [pc, #340]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d0ed      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004c86:	7dfb      	ldrb	r3, [r7, #23]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d126      	bne.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c9a:	d10d      	bne.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004c9c:	4b4c      	ldr	r3, [pc, #304]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004caa:	0919      	lsrs	r1, r3, #4
 8004cac:	4b4a      	ldr	r3, [pc, #296]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8004cae:	400b      	ands	r3, r1
 8004cb0:	4947      	ldr	r1, [pc, #284]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	610b      	str	r3, [r1, #16]
 8004cb6:	e005      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004cb8:	4b45      	ldr	r3, [pc, #276]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	4a44      	ldr	r2, [pc, #272]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004cbe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004cc2:	6113      	str	r3, [r2, #16]
 8004cc4:	4b42      	ldr	r3, [pc, #264]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004cc6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004cce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cd2:	493f      	ldr	r1, [pc, #252]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	670b      	str	r3, [r1, #112]	; 0x70
 8004cd8:	e004      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cda:	7dfb      	ldrb	r3, [r7, #23]
 8004cdc:	75bb      	strb	r3, [r7, #22]
 8004cde:	e001      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ce0:	7dfb      	ldrb	r3, [r7, #23]
 8004ce2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 8085 	beq.w	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cf6:	2b28      	cmp	r3, #40	; 0x28
 8004cf8:	d866      	bhi.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004cfa:	a201      	add	r2, pc, #4	; (adr r2, 8004d00 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d00:	08004ddd 	.word	0x08004ddd
 8004d04:	08004dc9 	.word	0x08004dc9
 8004d08:	08004dc9 	.word	0x08004dc9
 8004d0c:	08004dc9 	.word	0x08004dc9
 8004d10:	08004dc9 	.word	0x08004dc9
 8004d14:	08004dc9 	.word	0x08004dc9
 8004d18:	08004dc9 	.word	0x08004dc9
 8004d1c:	08004dc9 	.word	0x08004dc9
 8004d20:	08004da5 	.word	0x08004da5
 8004d24:	08004dc9 	.word	0x08004dc9
 8004d28:	08004dc9 	.word	0x08004dc9
 8004d2c:	08004dc9 	.word	0x08004dc9
 8004d30:	08004dc9 	.word	0x08004dc9
 8004d34:	08004dc9 	.word	0x08004dc9
 8004d38:	08004dc9 	.word	0x08004dc9
 8004d3c:	08004dc9 	.word	0x08004dc9
 8004d40:	08004db7 	.word	0x08004db7
 8004d44:	08004dc9 	.word	0x08004dc9
 8004d48:	08004dc9 	.word	0x08004dc9
 8004d4c:	08004dc9 	.word	0x08004dc9
 8004d50:	08004dc9 	.word	0x08004dc9
 8004d54:	08004dc9 	.word	0x08004dc9
 8004d58:	08004dc9 	.word	0x08004dc9
 8004d5c:	08004dc9 	.word	0x08004dc9
 8004d60:	08004ddd 	.word	0x08004ddd
 8004d64:	08004dc9 	.word	0x08004dc9
 8004d68:	08004dc9 	.word	0x08004dc9
 8004d6c:	08004dc9 	.word	0x08004dc9
 8004d70:	08004dc9 	.word	0x08004dc9
 8004d74:	08004dc9 	.word	0x08004dc9
 8004d78:	08004dc9 	.word	0x08004dc9
 8004d7c:	08004dc9 	.word	0x08004dc9
 8004d80:	08004ddd 	.word	0x08004ddd
 8004d84:	08004dc9 	.word	0x08004dc9
 8004d88:	08004dc9 	.word	0x08004dc9
 8004d8c:	08004dc9 	.word	0x08004dc9
 8004d90:	08004dc9 	.word	0x08004dc9
 8004d94:	08004dc9 	.word	0x08004dc9
 8004d98:	08004dc9 	.word	0x08004dc9
 8004d9c:	08004dc9 	.word	0x08004dc9
 8004da0:	08004ddd 	.word	0x08004ddd
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	3304      	adds	r3, #4
 8004da8:	2101      	movs	r1, #1
 8004daa:	4618      	mov	r0, r3
 8004dac:	f000 fdfa 	bl	80059a4 <RCCEx_PLL2_Config>
 8004db0:	4603      	mov	r3, r0
 8004db2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004db4:	e013      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	3324      	adds	r3, #36	; 0x24
 8004dba:	2101      	movs	r1, #1
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f000 fea3 	bl	8005b08 <RCCEx_PLL3_Config>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004dc6:	e00a      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	75fb      	strb	r3, [r7, #23]
      break;
 8004dcc:	e007      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004dce:	bf00      	nop
 8004dd0:	58024400 	.word	0x58024400
 8004dd4:	58024800 	.word	0x58024800
 8004dd8:	00ffffcf 	.word	0x00ffffcf
      break;
 8004ddc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dde:	7dfb      	ldrb	r3, [r7, #23]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d109      	bne.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004de4:	4b96      	ldr	r3, [pc, #600]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004df0:	4993      	ldr	r1, [pc, #588]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	654b      	str	r3, [r1, #84]	; 0x54
 8004df6:	e001      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004df8:	7dfb      	ldrb	r3, [r7, #23]
 8004dfa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d038      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e0c:	2b05      	cmp	r3, #5
 8004e0e:	d821      	bhi.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004e10:	a201      	add	r2, pc, #4	; (adr r2, 8004e18 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8004e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e16:	bf00      	nop
 8004e18:	08004e5b 	.word	0x08004e5b
 8004e1c:	08004e31 	.word	0x08004e31
 8004e20:	08004e43 	.word	0x08004e43
 8004e24:	08004e5b 	.word	0x08004e5b
 8004e28:	08004e5b 	.word	0x08004e5b
 8004e2c:	08004e5b 	.word	0x08004e5b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	3304      	adds	r3, #4
 8004e34:	2101      	movs	r1, #1
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 fdb4 	bl	80059a4 <RCCEx_PLL2_Config>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004e40:	e00c      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	3324      	adds	r3, #36	; 0x24
 8004e46:	2101      	movs	r1, #1
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f000 fe5d 	bl	8005b08 <RCCEx_PLL3_Config>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004e52:	e003      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	75fb      	strb	r3, [r7, #23]
      break;
 8004e58:	e000      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8004e5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e5c:	7dfb      	ldrb	r3, [r7, #23]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d109      	bne.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004e62:	4b77      	ldr	r3, [pc, #476]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e66:	f023 0207 	bic.w	r2, r3, #7
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e6e:	4974      	ldr	r1, [pc, #464]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	654b      	str	r3, [r1, #84]	; 0x54
 8004e74:	e001      	b.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e76:	7dfb      	ldrb	r3, [r7, #23]
 8004e78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0304 	and.w	r3, r3, #4
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d03a      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e8c:	2b05      	cmp	r3, #5
 8004e8e:	d821      	bhi.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004e90:	a201      	add	r2, pc, #4	; (adr r2, 8004e98 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8004e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e96:	bf00      	nop
 8004e98:	08004edb 	.word	0x08004edb
 8004e9c:	08004eb1 	.word	0x08004eb1
 8004ea0:	08004ec3 	.word	0x08004ec3
 8004ea4:	08004edb 	.word	0x08004edb
 8004ea8:	08004edb 	.word	0x08004edb
 8004eac:	08004edb 	.word	0x08004edb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	3304      	adds	r3, #4
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 fd74 	bl	80059a4 <RCCEx_PLL2_Config>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004ec0:	e00c      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	3324      	adds	r3, #36	; 0x24
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f000 fe1d 	bl	8005b08 <RCCEx_PLL3_Config>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004ed2:	e003      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ed8:	e000      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8004eda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004edc:	7dfb      	ldrb	r3, [r7, #23]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10a      	bne.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ee2:	4b57      	ldr	r3, [pc, #348]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee6:	f023 0207 	bic.w	r2, r3, #7
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef0:	4953      	ldr	r1, [pc, #332]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	658b      	str	r3, [r1, #88]	; 0x58
 8004ef6:	e001      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ef8:	7dfb      	ldrb	r3, [r7, #23]
 8004efa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0320 	and.w	r3, r3, #32
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d04b      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f12:	d02e      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004f14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f18:	d828      	bhi.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f1e:	d02a      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f24:	d822      	bhi.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004f26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f2a:	d026      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004f2c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f30:	d81c      	bhi.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004f32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f36:	d010      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8004f38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f3c:	d816      	bhi.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d01d      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8004f42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f46:	d111      	bne.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	3304      	adds	r3, #4
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f000 fd28 	bl	80059a4 <RCCEx_PLL2_Config>
 8004f54:	4603      	mov	r3, r0
 8004f56:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004f58:	e012      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	3324      	adds	r3, #36	; 0x24
 8004f5e:	2102      	movs	r1, #2
 8004f60:	4618      	mov	r0, r3
 8004f62:	f000 fdd1 	bl	8005b08 <RCCEx_PLL3_Config>
 8004f66:	4603      	mov	r3, r0
 8004f68:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004f6a:	e009      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	75fb      	strb	r3, [r7, #23]
      break;
 8004f70:	e006      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004f72:	bf00      	nop
 8004f74:	e004      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004f76:	bf00      	nop
 8004f78:	e002      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004f7a:	bf00      	nop
 8004f7c:	e000      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004f7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f80:	7dfb      	ldrb	r3, [r7, #23]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10a      	bne.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f86:	4b2e      	ldr	r3, [pc, #184]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f8a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f94:	492a      	ldr	r1, [pc, #168]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	654b      	str	r3, [r1, #84]	; 0x54
 8004f9a:	e001      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f9c:	7dfb      	ldrb	r3, [r7, #23]
 8004f9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d04d      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fb2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004fb6:	d02e      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004fb8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004fbc:	d828      	bhi.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fc2:	d02a      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004fc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fc8:	d822      	bhi.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004fca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fce:	d026      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004fd0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fd4:	d81c      	bhi.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004fd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fda:	d010      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004fdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fe0:	d816      	bhi.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d01d      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8004fe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fea:	d111      	bne.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	3304      	adds	r3, #4
 8004ff0:	2100      	movs	r1, #0
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f000 fcd6 	bl	80059a4 <RCCEx_PLL2_Config>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004ffc:	e012      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	3324      	adds	r3, #36	; 0x24
 8005002:	2102      	movs	r1, #2
 8005004:	4618      	mov	r0, r3
 8005006:	f000 fd7f 	bl	8005b08 <RCCEx_PLL3_Config>
 800500a:	4603      	mov	r3, r0
 800500c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800500e:	e009      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	75fb      	strb	r3, [r7, #23]
      break;
 8005014:	e006      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005016:	bf00      	nop
 8005018:	e004      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800501a:	bf00      	nop
 800501c:	e002      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800501e:	bf00      	nop
 8005020:	e000      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005022:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005024:	7dfb      	ldrb	r3, [r7, #23]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10c      	bne.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800502a:	4b05      	ldr	r3, [pc, #20]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800502c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800502e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005038:	4901      	ldr	r1, [pc, #4]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800503a:	4313      	orrs	r3, r2
 800503c:	658b      	str	r3, [r1, #88]	; 0x58
 800503e:	e003      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005040:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005044:	7dfb      	ldrb	r3, [r7, #23]
 8005046:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005050:	2b00      	cmp	r3, #0
 8005052:	d04b      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800505a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800505e:	d02e      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005060:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005064:	d828      	bhi.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005066:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800506a:	d02a      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800506c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005070:	d822      	bhi.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005072:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005076:	d026      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8005078:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800507c:	d81c      	bhi.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800507e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005082:	d010      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8005084:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005088:	d816      	bhi.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800508a:	2b00      	cmp	r3, #0
 800508c:	d01d      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800508e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005092:	d111      	bne.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	3304      	adds	r3, #4
 8005098:	2100      	movs	r1, #0
 800509a:	4618      	mov	r0, r3
 800509c:	f000 fc82 	bl	80059a4 <RCCEx_PLL2_Config>
 80050a0:	4603      	mov	r3, r0
 80050a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80050a4:	e012      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	3324      	adds	r3, #36	; 0x24
 80050aa:	2102      	movs	r1, #2
 80050ac:	4618      	mov	r0, r3
 80050ae:	f000 fd2b 	bl	8005b08 <RCCEx_PLL3_Config>
 80050b2:	4603      	mov	r3, r0
 80050b4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80050b6:	e009      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	75fb      	strb	r3, [r7, #23]
      break;
 80050bc:	e006      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80050be:	bf00      	nop
 80050c0:	e004      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80050c2:	bf00      	nop
 80050c4:	e002      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80050c6:	bf00      	nop
 80050c8:	e000      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80050ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050cc:	7dfb      	ldrb	r3, [r7, #23]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10a      	bne.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80050d2:	4b9d      	ldr	r3, [pc, #628]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80050d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050e0:	4999      	ldr	r1, [pc, #612]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	658b      	str	r3, [r1, #88]	; 0x58
 80050e6:	e001      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050e8:	7dfb      	ldrb	r3, [r7, #23]
 80050ea:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0308 	and.w	r3, r3, #8
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d01a      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005102:	d10a      	bne.n	800511a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	3324      	adds	r3, #36	; 0x24
 8005108:	2102      	movs	r1, #2
 800510a:	4618      	mov	r0, r3
 800510c:	f000 fcfc 	bl	8005b08 <RCCEx_PLL3_Config>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d001      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800511a:	4b8b      	ldr	r3, [pc, #556]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800511c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800511e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005128:	4987      	ldr	r1, [pc, #540]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800512a:	4313      	orrs	r3, r2
 800512c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0310 	and.w	r3, r3, #16
 8005136:	2b00      	cmp	r3, #0
 8005138:	d01a      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005140:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005144:	d10a      	bne.n	800515c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	3324      	adds	r3, #36	; 0x24
 800514a:	2102      	movs	r1, #2
 800514c:	4618      	mov	r0, r3
 800514e:	f000 fcdb 	bl	8005b08 <RCCEx_PLL3_Config>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d001      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800515c:	4b7a      	ldr	r3, [pc, #488]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800515e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005160:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800516a:	4977      	ldr	r1, [pc, #476]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800516c:	4313      	orrs	r3, r2
 800516e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d034      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005182:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005186:	d01d      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005188:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800518c:	d817      	bhi.n	80051be <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800518e:	2b00      	cmp	r3, #0
 8005190:	d003      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005196:	d009      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005198:	e011      	b.n	80051be <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	3304      	adds	r3, #4
 800519e:	2100      	movs	r1, #0
 80051a0:	4618      	mov	r0, r3
 80051a2:	f000 fbff 	bl	80059a4 <RCCEx_PLL2_Config>
 80051a6:	4603      	mov	r3, r0
 80051a8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80051aa:	e00c      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	3324      	adds	r3, #36	; 0x24
 80051b0:	2102      	movs	r1, #2
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 fca8 	bl	8005b08 <RCCEx_PLL3_Config>
 80051b8:	4603      	mov	r3, r0
 80051ba:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80051bc:	e003      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	75fb      	strb	r3, [r7, #23]
      break;
 80051c2:	e000      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80051c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051c6:	7dfb      	ldrb	r3, [r7, #23]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10a      	bne.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80051cc:	4b5e      	ldr	r3, [pc, #376]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80051ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80051da:	495b      	ldr	r1, [pc, #364]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	658b      	str	r3, [r1, #88]	; 0x58
 80051e0:	e001      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051e2:	7dfb      	ldrb	r3, [r7, #23]
 80051e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d033      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80051fc:	d01c      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80051fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005202:	d816      	bhi.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005204:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005208:	d003      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800520a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800520e:	d007      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8005210:	e00f      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005212:	4b4d      	ldr	r3, [pc, #308]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005216:	4a4c      	ldr	r2, [pc, #304]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800521c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800521e:	e00c      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	3324      	adds	r3, #36	; 0x24
 8005224:	2101      	movs	r1, #1
 8005226:	4618      	mov	r0, r3
 8005228:	f000 fc6e 	bl	8005b08 <RCCEx_PLL3_Config>
 800522c:	4603      	mov	r3, r0
 800522e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005230:	e003      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	75fb      	strb	r3, [r7, #23]
      break;
 8005236:	e000      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8005238:	bf00      	nop
    }

    if(ret == HAL_OK)
 800523a:	7dfb      	ldrb	r3, [r7, #23]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d10a      	bne.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005240:	4b41      	ldr	r3, [pc, #260]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005244:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800524e:	493e      	ldr	r1, [pc, #248]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005250:	4313      	orrs	r3, r2
 8005252:	654b      	str	r3, [r1, #84]	; 0x54
 8005254:	e001      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005256:	7dfb      	ldrb	r3, [r7, #23]
 8005258:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d029      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800526e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005272:	d007      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8005274:	e00f      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005276:	4b34      	ldr	r3, [pc, #208]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527a:	4a33      	ldr	r2, [pc, #204]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800527c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005280:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005282:	e00b      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	3304      	adds	r3, #4
 8005288:	2102      	movs	r1, #2
 800528a:	4618      	mov	r0, r3
 800528c:	f000 fb8a 	bl	80059a4 <RCCEx_PLL2_Config>
 8005290:	4603      	mov	r3, r0
 8005292:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005294:	e002      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	75fb      	strb	r3, [r7, #23]
      break;
 800529a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800529c:	7dfb      	ldrb	r3, [r7, #23]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d109      	bne.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80052a2:	4b29      	ldr	r3, [pc, #164]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80052a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ae:	4926      	ldr	r1, [pc, #152]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80052b4:	e001      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b6:	7dfb      	ldrb	r3, [r7, #23]
 80052b8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00a      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	3324      	adds	r3, #36	; 0x24
 80052ca:	2102      	movs	r1, #2
 80052cc:	4618      	mov	r0, r3
 80052ce:	f000 fc1b 	bl	8005b08 <RCCEx_PLL3_Config>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d001      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d033      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052f0:	d017      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80052f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052f6:	d811      	bhi.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80052f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052fc:	d013      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80052fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005302:	d80b      	bhi.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005304:	2b00      	cmp	r3, #0
 8005306:	d010      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8005308:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800530c:	d106      	bne.n	800531c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800530e:	4b0e      	ldr	r3, [pc, #56]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005312:	4a0d      	ldr	r2, [pc, #52]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005318:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800531a:	e007      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	75fb      	strb	r3, [r7, #23]
      break;
 8005320:	e004      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005322:	bf00      	nop
 8005324:	e002      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005326:	bf00      	nop
 8005328:	e000      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800532a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800532c:	7dfb      	ldrb	r3, [r7, #23]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d10c      	bne.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005332:	4b05      	ldr	r3, [pc, #20]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005336:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800533e:	4902      	ldr	r1, [pc, #8]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005340:	4313      	orrs	r3, r2
 8005342:	654b      	str	r3, [r1, #84]	; 0x54
 8005344:	e004      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8005346:	bf00      	nop
 8005348:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800534c:	7dfb      	ldrb	r3, [r7, #23]
 800534e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d008      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800535c:	4b31      	ldr	r3, [pc, #196]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800535e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005360:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005368:	492e      	ldr	r1, [pc, #184]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800536a:	4313      	orrs	r3, r2
 800536c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d009      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800537a:	4b2a      	ldr	r3, [pc, #168]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005388:	4926      	ldr	r1, [pc, #152]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800538a:	4313      	orrs	r3, r2
 800538c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d008      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800539a:	4b22      	ldr	r3, [pc, #136]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800539c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800539e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053a6:	491f      	ldr	r1, [pc, #124]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00d      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80053b8:	4b1a      	ldr	r3, [pc, #104]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	4a19      	ldr	r2, [pc, #100]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80053be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053c2:	6113      	str	r3, [r2, #16]
 80053c4:	4b17      	ldr	r3, [pc, #92]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80053c6:	691a      	ldr	r2, [r3, #16]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80053ce:	4915      	ldr	r1, [pc, #84]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	da08      	bge.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80053dc:	4b11      	ldr	r3, [pc, #68]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80053de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053e0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e8:	490e      	ldr	r1, [pc, #56]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d009      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80053fa:	4b0a      	ldr	r3, [pc, #40]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80053fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005408:	4906      	ldr	r1, [pc, #24]	; (8005424 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800540a:	4313      	orrs	r3, r2
 800540c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800540e:	7dbb      	ldrb	r3, [r7, #22]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d101      	bne.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8005414:	2300      	movs	r3, #0
 8005416:	e000      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
}
 800541a:	4618      	mov	r0, r3
 800541c:	3718      	adds	r7, #24
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	58024400 	.word	0x58024400

08005428 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800542c:	f7ff f818 	bl	8004460 <HAL_RCC_GetHCLKFreq>
 8005430:	4602      	mov	r2, r0
 8005432:	4b06      	ldr	r3, [pc, #24]	; (800544c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	091b      	lsrs	r3, r3, #4
 8005438:	f003 0307 	and.w	r3, r3, #7
 800543c:	4904      	ldr	r1, [pc, #16]	; (8005450 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800543e:	5ccb      	ldrb	r3, [r1, r3]
 8005440:	f003 031f 	and.w	r3, r3, #31
 8005444:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005448:	4618      	mov	r0, r3
 800544a:	bd80      	pop	{r7, pc}
 800544c:	58024400 	.word	0x58024400
 8005450:	0800d0b0 	.word	0x0800d0b0

08005454 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005454:	b480      	push	{r7}
 8005456:	b089      	sub	sp, #36	; 0x24
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800545c:	4ba1      	ldr	r3, [pc, #644]	; (80056e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800545e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005460:	f003 0303 	and.w	r3, r3, #3
 8005464:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005466:	4b9f      	ldr	r3, [pc, #636]	; (80056e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546a:	0b1b      	lsrs	r3, r3, #12
 800546c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005470:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005472:	4b9c      	ldr	r3, [pc, #624]	; (80056e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005476:	091b      	lsrs	r3, r3, #4
 8005478:	f003 0301 	and.w	r3, r3, #1
 800547c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800547e:	4b99      	ldr	r3, [pc, #612]	; (80056e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005482:	08db      	lsrs	r3, r3, #3
 8005484:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	fb02 f303 	mul.w	r3, r2, r3
 800548e:	ee07 3a90 	vmov	s15, r3
 8005492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005496:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	2b00      	cmp	r3, #0
 800549e:	f000 8111 	beq.w	80056c4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	f000 8083 	beq.w	80055b0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	f200 80a1 	bhi.w	80055f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d003      	beq.n	80054c0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d056      	beq.n	800556c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80054be:	e099      	b.n	80055f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054c0:	4b88      	ldr	r3, [pc, #544]	; (80056e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0320 	and.w	r3, r3, #32
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d02d      	beq.n	8005528 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80054cc:	4b85      	ldr	r3, [pc, #532]	; (80056e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	08db      	lsrs	r3, r3, #3
 80054d2:	f003 0303 	and.w	r3, r3, #3
 80054d6:	4a84      	ldr	r2, [pc, #528]	; (80056e8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80054d8:	fa22 f303 	lsr.w	r3, r2, r3
 80054dc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	ee07 3a90 	vmov	s15, r3
 80054e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	ee07 3a90 	vmov	s15, r3
 80054ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054f6:	4b7b      	ldr	r3, [pc, #492]	; (80056e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054fe:	ee07 3a90 	vmov	s15, r3
 8005502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005506:	ed97 6a03 	vldr	s12, [r7, #12]
 800550a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80056ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800550e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005516:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800551a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800551e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005522:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005526:	e087      	b.n	8005638 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	ee07 3a90 	vmov	s15, r3
 800552e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005532:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80056f0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800553a:	4b6a      	ldr	r3, [pc, #424]	; (80056e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800553c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005542:	ee07 3a90 	vmov	s15, r3
 8005546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800554a:	ed97 6a03 	vldr	s12, [r7, #12]
 800554e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80056ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800555a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800555e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005566:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800556a:	e065      	b.n	8005638 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	ee07 3a90 	vmov	s15, r3
 8005572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005576:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80056f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800557a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800557e:	4b59      	ldr	r3, [pc, #356]	; (80056e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005586:	ee07 3a90 	vmov	s15, r3
 800558a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800558e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005592:	eddf 5a56 	vldr	s11, [pc, #344]	; 80056ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800559a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800559e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80055ae:	e043      	b.n	8005638 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	ee07 3a90 	vmov	s15, r3
 80055b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80056f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80055be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055c2:	4b48      	ldr	r3, [pc, #288]	; (80056e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ca:	ee07 3a90 	vmov	s15, r3
 80055ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80055d6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80056ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80055f2:	e021      	b.n	8005638 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	ee07 3a90 	vmov	s15, r3
 80055fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055fe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80056f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005602:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005606:	4b37      	ldr	r3, [pc, #220]	; (80056e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800560e:	ee07 3a90 	vmov	s15, r3
 8005612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005616:	ed97 6a03 	vldr	s12, [r7, #12]
 800561a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80056ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800561e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005622:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005626:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800562a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800562e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005632:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005636:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005638:	4b2a      	ldr	r3, [pc, #168]	; (80056e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800563a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563c:	0a5b      	lsrs	r3, r3, #9
 800563e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005642:	ee07 3a90 	vmov	s15, r3
 8005646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800564a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800564e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005652:	edd7 6a07 	vldr	s13, [r7, #28]
 8005656:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800565a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800565e:	ee17 2a90 	vmov	r2, s15
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005666:	4b1f      	ldr	r3, [pc, #124]	; (80056e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566a:	0c1b      	lsrs	r3, r3, #16
 800566c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005670:	ee07 3a90 	vmov	s15, r3
 8005674:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005678:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800567c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005680:	edd7 6a07 	vldr	s13, [r7, #28]
 8005684:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005688:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800568c:	ee17 2a90 	vmov	r2, s15
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005694:	4b13      	ldr	r3, [pc, #76]	; (80056e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005698:	0e1b      	lsrs	r3, r3, #24
 800569a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800569e:	ee07 3a90 	vmov	s15, r3
 80056a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80056b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056ba:	ee17 2a90 	vmov	r2, s15
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80056c2:	e008      	b.n	80056d6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	609a      	str	r2, [r3, #8]
}
 80056d6:	bf00      	nop
 80056d8:	3724      	adds	r7, #36	; 0x24
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	58024400 	.word	0x58024400
 80056e8:	03d09000 	.word	0x03d09000
 80056ec:	46000000 	.word	0x46000000
 80056f0:	4c742400 	.word	0x4c742400
 80056f4:	4a742400 	.word	0x4a742400
 80056f8:	4bbebc20 	.word	0x4bbebc20

080056fc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b089      	sub	sp, #36	; 0x24
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005704:	4ba1      	ldr	r3, [pc, #644]	; (800598c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005708:	f003 0303 	and.w	r3, r3, #3
 800570c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800570e:	4b9f      	ldr	r3, [pc, #636]	; (800598c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005712:	0d1b      	lsrs	r3, r3, #20
 8005714:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005718:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800571a:	4b9c      	ldr	r3, [pc, #624]	; (800598c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800571c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571e:	0a1b      	lsrs	r3, r3, #8
 8005720:	f003 0301 	and.w	r3, r3, #1
 8005724:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005726:	4b99      	ldr	r3, [pc, #612]	; (800598c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800572a:	08db      	lsrs	r3, r3, #3
 800572c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	fb02 f303 	mul.w	r3, r2, r3
 8005736:	ee07 3a90 	vmov	s15, r3
 800573a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800573e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	2b00      	cmp	r3, #0
 8005746:	f000 8111 	beq.w	800596c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	2b02      	cmp	r3, #2
 800574e:	f000 8083 	beq.w	8005858 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	2b02      	cmp	r3, #2
 8005756:	f200 80a1 	bhi.w	800589c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d003      	beq.n	8005768 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	2b01      	cmp	r3, #1
 8005764:	d056      	beq.n	8005814 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005766:	e099      	b.n	800589c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005768:	4b88      	ldr	r3, [pc, #544]	; (800598c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0320 	and.w	r3, r3, #32
 8005770:	2b00      	cmp	r3, #0
 8005772:	d02d      	beq.n	80057d0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005774:	4b85      	ldr	r3, [pc, #532]	; (800598c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	08db      	lsrs	r3, r3, #3
 800577a:	f003 0303 	and.w	r3, r3, #3
 800577e:	4a84      	ldr	r2, [pc, #528]	; (8005990 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005780:	fa22 f303 	lsr.w	r3, r2, r3
 8005784:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	ee07 3a90 	vmov	s15, r3
 800578c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	ee07 3a90 	vmov	s15, r3
 8005796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800579a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800579e:	4b7b      	ldr	r3, [pc, #492]	; (800598c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057a6:	ee07 3a90 	vmov	s15, r3
 80057aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80057b2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005994 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80057b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ca:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80057ce:	e087      	b.n	80058e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	ee07 3a90 	vmov	s15, r3
 80057d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057da:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005998 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80057de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057e2:	4b6a      	ldr	r3, [pc, #424]	; (800598c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057ea:	ee07 3a90 	vmov	s15, r3
 80057ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80057f6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005994 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80057fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005802:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800580a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800580e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005812:	e065      	b.n	80058e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	ee07 3a90 	vmov	s15, r3
 800581a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800581e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800599c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005826:	4b59      	ldr	r3, [pc, #356]	; (800598c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800582e:	ee07 3a90 	vmov	s15, r3
 8005832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005836:	ed97 6a03 	vldr	s12, [r7, #12]
 800583a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005994 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800583e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005846:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800584a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800584e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005852:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005856:	e043      	b.n	80058e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	ee07 3a90 	vmov	s15, r3
 800585e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005862:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80059a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800586a:	4b48      	ldr	r3, [pc, #288]	; (800598c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800586c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005872:	ee07 3a90 	vmov	s15, r3
 8005876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800587a:	ed97 6a03 	vldr	s12, [r7, #12]
 800587e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005994 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800588a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800588e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005896:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800589a:	e021      	b.n	80058e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	ee07 3a90 	vmov	s15, r3
 80058a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058a6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800599c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80058aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ae:	4b37      	ldr	r3, [pc, #220]	; (800598c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058b6:	ee07 3a90 	vmov	s15, r3
 80058ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058be:	ed97 6a03 	vldr	s12, [r7, #12]
 80058c2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005994 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80058c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058de:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80058e0:	4b2a      	ldr	r3, [pc, #168]	; (800598c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e4:	0a5b      	lsrs	r3, r3, #9
 80058e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058ea:	ee07 3a90 	vmov	s15, r3
 80058ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80058fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005902:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005906:	ee17 2a90 	vmov	r2, s15
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800590e:	4b1f      	ldr	r3, [pc, #124]	; (800598c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005912:	0c1b      	lsrs	r3, r3, #16
 8005914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005918:	ee07 3a90 	vmov	s15, r3
 800591c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005920:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005924:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005928:	edd7 6a07 	vldr	s13, [r7, #28]
 800592c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005930:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005934:	ee17 2a90 	vmov	r2, s15
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800593c:	4b13      	ldr	r3, [pc, #76]	; (800598c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800593e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005940:	0e1b      	lsrs	r3, r3, #24
 8005942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005946:	ee07 3a90 	vmov	s15, r3
 800594a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800594e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005952:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005956:	edd7 6a07 	vldr	s13, [r7, #28]
 800595a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800595e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005962:	ee17 2a90 	vmov	r2, s15
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800596a:	e008      	b.n	800597e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	609a      	str	r2, [r3, #8]
}
 800597e:	bf00      	nop
 8005980:	3724      	adds	r7, #36	; 0x24
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	58024400 	.word	0x58024400
 8005990:	03d09000 	.word	0x03d09000
 8005994:	46000000 	.word	0x46000000
 8005998:	4c742400 	.word	0x4c742400
 800599c:	4a742400 	.word	0x4a742400
 80059a0:	4bbebc20 	.word	0x4bbebc20

080059a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059ae:	2300      	movs	r3, #0
 80059b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80059b2:	4b53      	ldr	r3, [pc, #332]	; (8005b00 <RCCEx_PLL2_Config+0x15c>)
 80059b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b6:	f003 0303 	and.w	r3, r3, #3
 80059ba:	2b03      	cmp	r3, #3
 80059bc:	d101      	bne.n	80059c2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e099      	b.n	8005af6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80059c2:	4b4f      	ldr	r3, [pc, #316]	; (8005b00 <RCCEx_PLL2_Config+0x15c>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a4e      	ldr	r2, [pc, #312]	; (8005b00 <RCCEx_PLL2_Config+0x15c>)
 80059c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80059cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059ce:	f7fc ff17 	bl	8002800 <HAL_GetTick>
 80059d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80059d4:	e008      	b.n	80059e8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80059d6:	f7fc ff13 	bl	8002800 <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d901      	bls.n	80059e8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e086      	b.n	8005af6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80059e8:	4b45      	ldr	r3, [pc, #276]	; (8005b00 <RCCEx_PLL2_Config+0x15c>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1f0      	bne.n	80059d6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80059f4:	4b42      	ldr	r3, [pc, #264]	; (8005b00 <RCCEx_PLL2_Config+0x15c>)
 80059f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	031b      	lsls	r3, r3, #12
 8005a02:	493f      	ldr	r1, [pc, #252]	; (8005b00 <RCCEx_PLL2_Config+0x15c>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	628b      	str	r3, [r1, #40]	; 0x28
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	3b01      	subs	r3, #1
 8005a18:	025b      	lsls	r3, r3, #9
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	431a      	orrs	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	3b01      	subs	r3, #1
 8005a24:	041b      	lsls	r3, r3, #16
 8005a26:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a2a:	431a      	orrs	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	3b01      	subs	r3, #1
 8005a32:	061b      	lsls	r3, r3, #24
 8005a34:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a38:	4931      	ldr	r1, [pc, #196]	; (8005b00 <RCCEx_PLL2_Config+0x15c>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005a3e:	4b30      	ldr	r3, [pc, #192]	; (8005b00 <RCCEx_PLL2_Config+0x15c>)
 8005a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a42:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	492d      	ldr	r1, [pc, #180]	; (8005b00 <RCCEx_PLL2_Config+0x15c>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005a50:	4b2b      	ldr	r3, [pc, #172]	; (8005b00 <RCCEx_PLL2_Config+0x15c>)
 8005a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a54:	f023 0220 	bic.w	r2, r3, #32
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	4928      	ldr	r1, [pc, #160]	; (8005b00 <RCCEx_PLL2_Config+0x15c>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005a62:	4b27      	ldr	r3, [pc, #156]	; (8005b00 <RCCEx_PLL2_Config+0x15c>)
 8005a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a66:	4a26      	ldr	r2, [pc, #152]	; (8005b00 <RCCEx_PLL2_Config+0x15c>)
 8005a68:	f023 0310 	bic.w	r3, r3, #16
 8005a6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005a6e:	4b24      	ldr	r3, [pc, #144]	; (8005b00 <RCCEx_PLL2_Config+0x15c>)
 8005a70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a72:	4b24      	ldr	r3, [pc, #144]	; (8005b04 <RCCEx_PLL2_Config+0x160>)
 8005a74:	4013      	ands	r3, r2
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	69d2      	ldr	r2, [r2, #28]
 8005a7a:	00d2      	lsls	r2, r2, #3
 8005a7c:	4920      	ldr	r1, [pc, #128]	; (8005b00 <RCCEx_PLL2_Config+0x15c>)
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005a82:	4b1f      	ldr	r3, [pc, #124]	; (8005b00 <RCCEx_PLL2_Config+0x15c>)
 8005a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a86:	4a1e      	ldr	r2, [pc, #120]	; (8005b00 <RCCEx_PLL2_Config+0x15c>)
 8005a88:	f043 0310 	orr.w	r3, r3, #16
 8005a8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d106      	bne.n	8005aa2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005a94:	4b1a      	ldr	r3, [pc, #104]	; (8005b00 <RCCEx_PLL2_Config+0x15c>)
 8005a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a98:	4a19      	ldr	r2, [pc, #100]	; (8005b00 <RCCEx_PLL2_Config+0x15c>)
 8005a9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005aa0:	e00f      	b.n	8005ac2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d106      	bne.n	8005ab6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005aa8:	4b15      	ldr	r3, [pc, #84]	; (8005b00 <RCCEx_PLL2_Config+0x15c>)
 8005aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aac:	4a14      	ldr	r2, [pc, #80]	; (8005b00 <RCCEx_PLL2_Config+0x15c>)
 8005aae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ab2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ab4:	e005      	b.n	8005ac2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005ab6:	4b12      	ldr	r3, [pc, #72]	; (8005b00 <RCCEx_PLL2_Config+0x15c>)
 8005ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aba:	4a11      	ldr	r2, [pc, #68]	; (8005b00 <RCCEx_PLL2_Config+0x15c>)
 8005abc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ac0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005ac2:	4b0f      	ldr	r3, [pc, #60]	; (8005b00 <RCCEx_PLL2_Config+0x15c>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a0e      	ldr	r2, [pc, #56]	; (8005b00 <RCCEx_PLL2_Config+0x15c>)
 8005ac8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005acc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ace:	f7fc fe97 	bl	8002800 <HAL_GetTick>
 8005ad2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005ad4:	e008      	b.n	8005ae8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005ad6:	f7fc fe93 	bl	8002800 <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d901      	bls.n	8005ae8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e006      	b.n	8005af6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005ae8:	4b05      	ldr	r3, [pc, #20]	; (8005b00 <RCCEx_PLL2_Config+0x15c>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d0f0      	beq.n	8005ad6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	58024400 	.word	0x58024400
 8005b04:	ffff0007 	.word	0xffff0007

08005b08 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b12:	2300      	movs	r3, #0
 8005b14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005b16:	4b53      	ldr	r3, [pc, #332]	; (8005c64 <RCCEx_PLL3_Config+0x15c>)
 8005b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b1a:	f003 0303 	and.w	r3, r3, #3
 8005b1e:	2b03      	cmp	r3, #3
 8005b20:	d101      	bne.n	8005b26 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e099      	b.n	8005c5a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005b26:	4b4f      	ldr	r3, [pc, #316]	; (8005c64 <RCCEx_PLL3_Config+0x15c>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a4e      	ldr	r2, [pc, #312]	; (8005c64 <RCCEx_PLL3_Config+0x15c>)
 8005b2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b32:	f7fc fe65 	bl	8002800 <HAL_GetTick>
 8005b36:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005b38:	e008      	b.n	8005b4c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005b3a:	f7fc fe61 	bl	8002800 <HAL_GetTick>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	d901      	bls.n	8005b4c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e086      	b.n	8005c5a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005b4c:	4b45      	ldr	r3, [pc, #276]	; (8005c64 <RCCEx_PLL3_Config+0x15c>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1f0      	bne.n	8005b3a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005b58:	4b42      	ldr	r3, [pc, #264]	; (8005c64 <RCCEx_PLL3_Config+0x15c>)
 8005b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	051b      	lsls	r3, r3, #20
 8005b66:	493f      	ldr	r1, [pc, #252]	; (8005c64 <RCCEx_PLL3_Config+0x15c>)
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	628b      	str	r3, [r1, #40]	; 0x28
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	3b01      	subs	r3, #1
 8005b72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	025b      	lsls	r3, r3, #9
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	431a      	orrs	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	3b01      	subs	r3, #1
 8005b88:	041b      	lsls	r3, r3, #16
 8005b8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005b8e:	431a      	orrs	r2, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	3b01      	subs	r3, #1
 8005b96:	061b      	lsls	r3, r3, #24
 8005b98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005b9c:	4931      	ldr	r1, [pc, #196]	; (8005c64 <RCCEx_PLL3_Config+0x15c>)
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005ba2:	4b30      	ldr	r3, [pc, #192]	; (8005c64 <RCCEx_PLL3_Config+0x15c>)
 8005ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	492d      	ldr	r1, [pc, #180]	; (8005c64 <RCCEx_PLL3_Config+0x15c>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005bb4:	4b2b      	ldr	r3, [pc, #172]	; (8005c64 <RCCEx_PLL3_Config+0x15c>)
 8005bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	4928      	ldr	r1, [pc, #160]	; (8005c64 <RCCEx_PLL3_Config+0x15c>)
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005bc6:	4b27      	ldr	r3, [pc, #156]	; (8005c64 <RCCEx_PLL3_Config+0x15c>)
 8005bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bca:	4a26      	ldr	r2, [pc, #152]	; (8005c64 <RCCEx_PLL3_Config+0x15c>)
 8005bcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005bd2:	4b24      	ldr	r3, [pc, #144]	; (8005c64 <RCCEx_PLL3_Config+0x15c>)
 8005bd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bd6:	4b24      	ldr	r3, [pc, #144]	; (8005c68 <RCCEx_PLL3_Config+0x160>)
 8005bd8:	4013      	ands	r3, r2
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	69d2      	ldr	r2, [r2, #28]
 8005bde:	00d2      	lsls	r2, r2, #3
 8005be0:	4920      	ldr	r1, [pc, #128]	; (8005c64 <RCCEx_PLL3_Config+0x15c>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005be6:	4b1f      	ldr	r3, [pc, #124]	; (8005c64 <RCCEx_PLL3_Config+0x15c>)
 8005be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bea:	4a1e      	ldr	r2, [pc, #120]	; (8005c64 <RCCEx_PLL3_Config+0x15c>)
 8005bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bf0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d106      	bne.n	8005c06 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005bf8:	4b1a      	ldr	r3, [pc, #104]	; (8005c64 <RCCEx_PLL3_Config+0x15c>)
 8005bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfc:	4a19      	ldr	r2, [pc, #100]	; (8005c64 <RCCEx_PLL3_Config+0x15c>)
 8005bfe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005c02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005c04:	e00f      	b.n	8005c26 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d106      	bne.n	8005c1a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005c0c:	4b15      	ldr	r3, [pc, #84]	; (8005c64 <RCCEx_PLL3_Config+0x15c>)
 8005c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c10:	4a14      	ldr	r2, [pc, #80]	; (8005c64 <RCCEx_PLL3_Config+0x15c>)
 8005c12:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005c16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005c18:	e005      	b.n	8005c26 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005c1a:	4b12      	ldr	r3, [pc, #72]	; (8005c64 <RCCEx_PLL3_Config+0x15c>)
 8005c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1e:	4a11      	ldr	r2, [pc, #68]	; (8005c64 <RCCEx_PLL3_Config+0x15c>)
 8005c20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c24:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005c26:	4b0f      	ldr	r3, [pc, #60]	; (8005c64 <RCCEx_PLL3_Config+0x15c>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a0e      	ldr	r2, [pc, #56]	; (8005c64 <RCCEx_PLL3_Config+0x15c>)
 8005c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c32:	f7fc fde5 	bl	8002800 <HAL_GetTick>
 8005c36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005c38:	e008      	b.n	8005c4c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005c3a:	f7fc fde1 	bl	8002800 <HAL_GetTick>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d901      	bls.n	8005c4c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e006      	b.n	8005c5a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005c4c:	4b05      	ldr	r3, [pc, #20]	; (8005c64 <RCCEx_PLL3_Config+0x15c>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d0f0      	beq.n	8005c3a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	58024400 	.word	0x58024400
 8005c68:	ffff0007 	.word	0xffff0007

08005c6c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e0f1      	b.n	8005e62 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a78      	ldr	r2, [pc, #480]	; (8005e6c <HAL_SPI_Init+0x200>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d00f      	beq.n	8005cae <HAL_SPI_Init+0x42>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a77      	ldr	r2, [pc, #476]	; (8005e70 <HAL_SPI_Init+0x204>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d00a      	beq.n	8005cae <HAL_SPI_Init+0x42>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a75      	ldr	r2, [pc, #468]	; (8005e74 <HAL_SPI_Init+0x208>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d005      	beq.n	8005cae <HAL_SPI_Init+0x42>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	2b0f      	cmp	r3, #15
 8005ca8:	d901      	bls.n	8005cae <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e0d9      	b.n	8005e62 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 ff66 	bl	8006b80 <SPI_GetPacketSize>
 8005cb4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a6c      	ldr	r2, [pc, #432]	; (8005e6c <HAL_SPI_Init+0x200>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d00c      	beq.n	8005cda <HAL_SPI_Init+0x6e>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a6a      	ldr	r2, [pc, #424]	; (8005e70 <HAL_SPI_Init+0x204>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d007      	beq.n	8005cda <HAL_SPI_Init+0x6e>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a69      	ldr	r2, [pc, #420]	; (8005e74 <HAL_SPI_Init+0x208>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d002      	beq.n	8005cda <HAL_SPI_Init+0x6e>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2b08      	cmp	r3, #8
 8005cd8:	d811      	bhi.n	8005cfe <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005cde:	4a63      	ldr	r2, [pc, #396]	; (8005e6c <HAL_SPI_Init+0x200>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d009      	beq.n	8005cf8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a61      	ldr	r2, [pc, #388]	; (8005e70 <HAL_SPI_Init+0x204>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d004      	beq.n	8005cf8 <HAL_SPI_Init+0x8c>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a60      	ldr	r2, [pc, #384]	; (8005e74 <HAL_SPI_Init+0x208>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d104      	bne.n	8005d02 <HAL_SPI_Init+0x96>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2b10      	cmp	r3, #16
 8005cfc:	d901      	bls.n	8005d02 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e0af      	b.n	8005e62 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d106      	bne.n	8005d1c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7fc fa60 	bl	80021dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2202      	movs	r2, #2
 8005d20:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f022 0201 	bic.w	r2, r2, #1
 8005d32:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8005d3e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d48:	d119      	bne.n	8005d7e <HAL_SPI_Init+0x112>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d52:	d103      	bne.n	8005d5c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d008      	beq.n	8005d6e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10c      	bne.n	8005d7e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005d68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d6c:	d107      	bne.n	8005d7e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d7c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	69da      	ldr	r2, [r3, #28]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d86:	431a      	orrs	r2, r3
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	431a      	orrs	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d90:	ea42 0103 	orr.w	r1, r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	68da      	ldr	r2, [r3, #12]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	430a      	orrs	r2, r1
 8005d9e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da8:	431a      	orrs	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dae:	431a      	orrs	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	699b      	ldr	r3, [r3, #24]
 8005db4:	431a      	orrs	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	431a      	orrs	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	695b      	ldr	r3, [r3, #20]
 8005dc0:	431a      	orrs	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	431a      	orrs	r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	431a      	orrs	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	431a      	orrs	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dde:	ea42 0103 	orr.w	r1, r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	430a      	orrs	r2, r1
 8005dec:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d113      	bne.n	8005e1e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e08:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e1c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f022 0201 	bic.w	r2, r2, #1
 8005e2c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00a      	beq.n	8005e50 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	40013000 	.word	0x40013000
 8005e70:	40003800 	.word	0x40003800
 8005e74:	40003c00 	.word	0x40003c00

08005e78 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b08a      	sub	sp, #40	; 0x28
 8005e7c:	af02      	add	r7, sp, #8
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	603b      	str	r3, [r7, #0]
 8005e84:	4613      	mov	r3, r2
 8005e86:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	3320      	adds	r3, #32
 8005e8e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e90:	2300      	movs	r3, #0
 8005e92:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d101      	bne.n	8005ea2 <HAL_SPI_Transmit+0x2a>
 8005e9e:	2302      	movs	r3, #2
 8005ea0:	e1d7      	b.n	8006252 <HAL_SPI_Transmit+0x3da>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005eaa:	f7fc fca9 	bl	8002800 <HAL_GetTick>
 8005eae:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d007      	beq.n	8005ecc <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005ec8:	7efb      	ldrb	r3, [r7, #27]
 8005eca:	e1c2      	b.n	8006252 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d002      	beq.n	8005ed8 <HAL_SPI_Transmit+0x60>
 8005ed2:	88fb      	ldrh	r3, [r7, #6]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d107      	bne.n	8005ee8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005ee4:	7efb      	ldrb	r3, [r7, #27]
 8005ee6:	e1b4      	b.n	8006252 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2203      	movs	r2, #3
 8005eec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	88fa      	ldrh	r2, [r7, #6]
 8005f02:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	88fa      	ldrh	r2, [r7, #6]
 8005f0a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005f38:	d107      	bne.n	8005f4a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f48:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	685a      	ldr	r2, [r3, #4]
 8005f50:	4b96      	ldr	r3, [pc, #600]	; (80061ac <HAL_SPI_Transmit+0x334>)
 8005f52:	4013      	ands	r3, r2
 8005f54:	88f9      	ldrh	r1, [r7, #6]
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	6812      	ldr	r2, [r2, #0]
 8005f5a:	430b      	orrs	r3, r1
 8005f5c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f042 0201 	orr.w	r2, r2, #1
 8005f6c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f76:	d107      	bne.n	8005f88 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	2b0f      	cmp	r3, #15
 8005f8e:	d947      	bls.n	8006020 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005f90:	e03f      	b.n	8006012 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	695b      	ldr	r3, [r3, #20]
 8005f98:	f003 0302 	and.w	r3, r3, #2
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	d114      	bne.n	8005fca <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	6812      	ldr	r2, [r2, #0]
 8005faa:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fb0:	1d1a      	adds	r2, r3, #4
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005fc8:	e023      	b.n	8006012 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fca:	f7fc fc19 	bl	8002800 <HAL_GetTick>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	683a      	ldr	r2, [r7, #0]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d803      	bhi.n	8005fe2 <HAL_SPI_Transmit+0x16a>
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe0:	d102      	bne.n	8005fe8 <HAL_SPI_Transmit+0x170>
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d114      	bne.n	8006012 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f000 fcfb 	bl	80069e4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ffc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2201      	movs	r2, #1
 800600a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e11f      	b.n	8006252 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006018:	b29b      	uxth	r3, r3
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1b9      	bne.n	8005f92 <HAL_SPI_Transmit+0x11a>
 800601e:	e0f2      	b.n	8006206 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	2b07      	cmp	r3, #7
 8006026:	f240 80e7 	bls.w	80061f8 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800602a:	e05d      	b.n	80060e8 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	695b      	ldr	r3, [r3, #20]
 8006032:	f003 0302 	and.w	r3, r3, #2
 8006036:	2b02      	cmp	r3, #2
 8006038:	d132      	bne.n	80060a0 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006040:	b29b      	uxth	r3, r3
 8006042:	2b01      	cmp	r3, #1
 8006044:	d918      	bls.n	8006078 <HAL_SPI_Transmit+0x200>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800604a:	2b00      	cmp	r3, #0
 800604c:	d014      	beq.n	8006078 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	6812      	ldr	r2, [r2, #0]
 8006058:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800605e:	1d1a      	adds	r2, r3, #4
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800606a:	b29b      	uxth	r3, r3
 800606c:	3b02      	subs	r3, #2
 800606e:	b29a      	uxth	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006076:	e037      	b.n	80060e8 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800607c:	881a      	ldrh	r2, [r3, #0]
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006086:	1c9a      	adds	r2, r3, #2
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006092:	b29b      	uxth	r3, r3
 8006094:	3b01      	subs	r3, #1
 8006096:	b29a      	uxth	r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800609e:	e023      	b.n	80060e8 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060a0:	f7fc fbae 	bl	8002800 <HAL_GetTick>
 80060a4:	4602      	mov	r2, r0
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	683a      	ldr	r2, [r7, #0]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d803      	bhi.n	80060b8 <HAL_SPI_Transmit+0x240>
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b6:	d102      	bne.n	80060be <HAL_SPI_Transmit+0x246>
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d114      	bne.n	80060e8 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	f000 fc90 	bl	80069e4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80060e4:	2303      	movs	r3, #3
 80060e6:	e0b4      	b.n	8006252 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d19b      	bne.n	800602c <HAL_SPI_Transmit+0x1b4>
 80060f4:	e087      	b.n	8006206 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	695b      	ldr	r3, [r3, #20]
 80060fc:	f003 0302 	and.w	r3, r3, #2
 8006100:	2b02      	cmp	r3, #2
 8006102:	d155      	bne.n	80061b0 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800610a:	b29b      	uxth	r3, r3
 800610c:	2b03      	cmp	r3, #3
 800610e:	d918      	bls.n	8006142 <HAL_SPI_Transmit+0x2ca>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006114:	2b40      	cmp	r3, #64	; 0x40
 8006116:	d914      	bls.n	8006142 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	6812      	ldr	r2, [r2, #0]
 8006122:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006128:	1d1a      	adds	r2, r3, #4
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006134:	b29b      	uxth	r3, r3
 8006136:	3b04      	subs	r3, #4
 8006138:	b29a      	uxth	r2, r3
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006140:	e05a      	b.n	80061f8 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006148:	b29b      	uxth	r3, r3
 800614a:	2b01      	cmp	r3, #1
 800614c:	d917      	bls.n	800617e <HAL_SPI_Transmit+0x306>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006152:	2b00      	cmp	r3, #0
 8006154:	d013      	beq.n	800617e <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800615a:	881a      	ldrh	r2, [r3, #0]
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006164:	1c9a      	adds	r2, r3, #2
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006170:	b29b      	uxth	r3, r3
 8006172:	3b02      	subs	r3, #2
 8006174:	b29a      	uxth	r2, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800617c:	e03c      	b.n	80061f8 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	3320      	adds	r3, #32
 8006188:	7812      	ldrb	r2, [r2, #0]
 800618a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006190:	1c5a      	adds	r2, r3, #1
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800619c:	b29b      	uxth	r3, r3
 800619e:	3b01      	subs	r3, #1
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80061a8:	e026      	b.n	80061f8 <HAL_SPI_Transmit+0x380>
 80061aa:	bf00      	nop
 80061ac:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061b0:	f7fc fb26 	bl	8002800 <HAL_GetTick>
 80061b4:	4602      	mov	r2, r0
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	683a      	ldr	r2, [r7, #0]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d803      	bhi.n	80061c8 <HAL_SPI_Transmit+0x350>
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c6:	d102      	bne.n	80061ce <HAL_SPI_Transmit+0x356>
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d114      	bne.n	80061f8 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f000 fc08 	bl	80069e4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80061f4:	2303      	movs	r3, #3
 80061f6:	e02c      	b.n	8006252 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80061fe:	b29b      	uxth	r3, r3
 8006200:	2b00      	cmp	r3, #0
 8006202:	f47f af78 	bne.w	80060f6 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	9300      	str	r3, [sp, #0]
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	2200      	movs	r2, #0
 800620e:	2108      	movs	r1, #8
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f000 fc87 	bl	8006b24 <SPI_WaitOnFlagUntilTimeout>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d007      	beq.n	800622c <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006222:	f043 0220 	orr.w	r2, r3, #32
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f000 fbd9 	bl	80069e4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006248:	2b00      	cmp	r3, #0
 800624a:	d001      	beq.n	8006250 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e000      	b.n	8006252 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8006250:	7efb      	ldrb	r3, [r7, #27]
}
 8006252:	4618      	mov	r0, r3
 8006254:	3720      	adds	r7, #32
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop

0800625c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b08a      	sub	sp, #40	; 0x28
 8006260:	af02      	add	r7, sp, #8
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	603b      	str	r3, [r7, #0]
 8006268:	4613      	mov	r3, r2
 800626a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800626c:	2300      	movs	r3, #0
 800626e:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	3330      	adds	r3, #48	; 0x30
 8006276:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006280:	d112      	bne.n	80062a8 <HAL_SPI_Receive+0x4c>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d10e      	bne.n	80062a8 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2204      	movs	r2, #4
 800628e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006292:	88fa      	ldrh	r2, [r7, #6]
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	9300      	str	r3, [sp, #0]
 8006298:	4613      	mov	r3, r2
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	68b9      	ldr	r1, [r7, #8]
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f000 f978 	bl	8006594 <HAL_SPI_TransmitReceive>
 80062a4:	4603      	mov	r3, r0
 80062a6:	e16f      	b.n	8006588 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d101      	bne.n	80062b6 <HAL_SPI_Receive+0x5a>
 80062b2:	2302      	movs	r3, #2
 80062b4:	e168      	b.n	8006588 <HAL_SPI_Receive+0x32c>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062be:	f7fc fa9f 	bl	8002800 <HAL_GetTick>
 80062c2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d007      	beq.n	80062e0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 80062d0:	2302      	movs	r3, #2
 80062d2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80062dc:	7ffb      	ldrb	r3, [r7, #31]
 80062de:	e153      	b.n	8006588 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d002      	beq.n	80062ec <HAL_SPI_Receive+0x90>
 80062e6:	88fb      	ldrh	r3, [r7, #6]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d107      	bne.n	80062fc <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80062f8:	7ffb      	ldrb	r3, [r7, #31]
 80062fa:	e145      	b.n	8006588 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2204      	movs	r2, #4
 8006300:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2200      	movs	r2, #0
 8006308:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	68ba      	ldr	r2, [r7, #8]
 8006310:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	88fa      	ldrh	r2, [r7, #6]
 8006316:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	88fa      	ldrh	r2, [r7, #6]
 800631e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800634c:	d107      	bne.n	800635e <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800635c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	685a      	ldr	r2, [r3, #4]
 8006364:	4b8a      	ldr	r3, [pc, #552]	; (8006590 <HAL_SPI_Receive+0x334>)
 8006366:	4013      	ands	r3, r2
 8006368:	88f9      	ldrh	r1, [r7, #6]
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	6812      	ldr	r2, [r2, #0]
 800636e:	430b      	orrs	r3, r1
 8006370:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f042 0201 	orr.w	r2, r2, #1
 8006380:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800638a:	d107      	bne.n	800639c <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800639a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	2b0f      	cmp	r3, #15
 80063a2:	d948      	bls.n	8006436 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80063a4:	e040      	b.n	8006428 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	695a      	ldr	r2, [r3, #20]
 80063ac:	f248 0308 	movw	r3, #32776	; 0x8008
 80063b0:	4013      	ands	r3, r2
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d014      	beq.n	80063e0 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063be:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80063c0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063c6:	1d1a      	adds	r2, r3, #4
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	3b01      	subs	r3, #1
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80063de:	e023      	b.n	8006428 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063e0:	f7fc fa0e 	bl	8002800 <HAL_GetTick>
 80063e4:	4602      	mov	r2, r0
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	683a      	ldr	r2, [r7, #0]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d803      	bhi.n	80063f8 <HAL_SPI_Receive+0x19c>
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f6:	d102      	bne.n	80063fe <HAL_SPI_Receive+0x1a2>
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d114      	bne.n	8006428 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80063fe:	68f8      	ldr	r0, [r7, #12]
 8006400:	f000 faf0 	bl	80069e4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006412:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006424:	2303      	movs	r3, #3
 8006426:	e0af      	b.n	8006588 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800642e:	b29b      	uxth	r3, r3
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1b8      	bne.n	80063a6 <HAL_SPI_Receive+0x14a>
 8006434:	e095      	b.n	8006562 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	2b07      	cmp	r3, #7
 800643c:	f240 808b 	bls.w	8006556 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006440:	e03f      	b.n	80064c2 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	695b      	ldr	r3, [r3, #20]
 8006448:	f003 0301 	and.w	r3, r3, #1
 800644c:	2b01      	cmp	r3, #1
 800644e:	d114      	bne.n	800647a <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006454:	69ba      	ldr	r2, [r7, #24]
 8006456:	8812      	ldrh	r2, [r2, #0]
 8006458:	b292      	uxth	r2, r2
 800645a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006460:	1c9a      	adds	r2, r3, #2
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800646c:	b29b      	uxth	r3, r3
 800646e:	3b01      	subs	r3, #1
 8006470:	b29a      	uxth	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006478:	e023      	b.n	80064c2 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800647a:	f7fc f9c1 	bl	8002800 <HAL_GetTick>
 800647e:	4602      	mov	r2, r0
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	683a      	ldr	r2, [r7, #0]
 8006486:	429a      	cmp	r2, r3
 8006488:	d803      	bhi.n	8006492 <HAL_SPI_Receive+0x236>
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006490:	d102      	bne.n	8006498 <HAL_SPI_Receive+0x23c>
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d114      	bne.n	80064c2 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	f000 faa3 	bl	80069e4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2201      	movs	r2, #1
 80064ba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80064be:	2303      	movs	r3, #3
 80064c0:	e062      	b.n	8006588 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d1b9      	bne.n	8006442 <HAL_SPI_Receive+0x1e6>
 80064ce:	e048      	b.n	8006562 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	f003 0301 	and.w	r3, r3, #1
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d117      	bne.n	800650e <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064ea:	7812      	ldrb	r2, [r2, #0]
 80064ec:	b2d2      	uxtb	r2, r2
 80064ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064f4:	1c5a      	adds	r2, r3, #1
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006500:	b29b      	uxth	r3, r3
 8006502:	3b01      	subs	r3, #1
 8006504:	b29a      	uxth	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800650c:	e023      	b.n	8006556 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800650e:	f7fc f977 	bl	8002800 <HAL_GetTick>
 8006512:	4602      	mov	r2, r0
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	683a      	ldr	r2, [r7, #0]
 800651a:	429a      	cmp	r2, r3
 800651c:	d803      	bhi.n	8006526 <HAL_SPI_Receive+0x2ca>
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006524:	d102      	bne.n	800652c <HAL_SPI_Receive+0x2d0>
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d114      	bne.n	8006556 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	f000 fa59 	bl	80069e4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006540:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2201      	movs	r2, #1
 800654e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	e018      	b.n	8006588 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800655c:	b29b      	uxth	r3, r3
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1b6      	bne.n	80064d0 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006562:	68f8      	ldr	r0, [r7, #12]
 8006564:	f000 fa3e 	bl	80069e4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800657e:	2b00      	cmp	r3, #0
 8006580:	d001      	beq.n	8006586 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e000      	b.n	8006588 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 8006586:	7ffb      	ldrb	r3, [r7, #31]
}
 8006588:	4618      	mov	r0, r3
 800658a:	3720      	adds	r7, #32
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}
 8006590:	ffff0000 	.word	0xffff0000

08006594 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b08e      	sub	sp, #56	; 0x38
 8006598:	af02      	add	r7, sp, #8
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	607a      	str	r2, [r7, #4]
 80065a0:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80065a2:	2300      	movs	r3, #0
 80065a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	3320      	adds	r3, #32
 80065ae:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	3330      	adds	r3, #48	; 0x30
 80065b6:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d101      	bne.n	80065c6 <HAL_SPI_TransmitReceive+0x32>
 80065c2:	2302      	movs	r3, #2
 80065c4:	e209      	b.n	80069da <HAL_SPI_TransmitReceive+0x446>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065ce:	f7fc f917 	bl	8002800 <HAL_GetTick>
 80065d2:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 80065d4:	887b      	ldrh	r3, [r7, #2]
 80065d6:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 80065d8:	887b      	ldrh	r3, [r7, #2]
 80065da:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80065e2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80065ea:	7efb      	ldrb	r3, [r7, #27]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d014      	beq.n	800661a <HAL_SPI_TransmitReceive+0x86>
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065f6:	d106      	bne.n	8006606 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d102      	bne.n	8006606 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8006600:	7efb      	ldrb	r3, [r7, #27]
 8006602:	2b04      	cmp	r3, #4
 8006604:	d009      	beq.n	800661a <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8006606:	2302      	movs	r3, #2
 8006608:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006614:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006618:	e1df      	b.n	80069da <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d005      	beq.n	800662c <HAL_SPI_TransmitReceive+0x98>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d002      	beq.n	800662c <HAL_SPI_TransmitReceive+0x98>
 8006626:	887b      	ldrh	r3, [r7, #2]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d109      	bne.n	8006640 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800663a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800663e:	e1cc      	b.n	80069da <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006646:	b2db      	uxtb	r3, r3
 8006648:	2b04      	cmp	r3, #4
 800664a:	d003      	beq.n	8006654 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2205      	movs	r2, #5
 8006650:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	887a      	ldrh	r2, [r7, #2]
 8006666:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	887a      	ldrh	r2, [r7, #2]
 800666e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	68ba      	ldr	r2, [r7, #8]
 8006676:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	887a      	ldrh	r2, [r7, #2]
 800667c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	887a      	ldrh	r2, [r7, #2]
 8006684:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	685a      	ldr	r2, [r3, #4]
 800669a:	4b82      	ldr	r3, [pc, #520]	; (80068a4 <HAL_SPI_TransmitReceive+0x310>)
 800669c:	4013      	ands	r3, r2
 800669e:	8879      	ldrh	r1, [r7, #2]
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	6812      	ldr	r2, [r2, #0]
 80066a4:	430b      	orrs	r3, r1
 80066a6:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f042 0201 	orr.w	r2, r2, #1
 80066b6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066c0:	d107      	bne.n	80066d2 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	2b0f      	cmp	r3, #15
 80066d8:	d970      	bls.n	80067bc <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80066da:	e068      	b.n	80067ae <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	695b      	ldr	r3, [r3, #20]
 80066e2:	f003 0302 	and.w	r3, r3, #2
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d11a      	bne.n	8006720 <HAL_SPI_TransmitReceive+0x18c>
 80066ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d017      	beq.n	8006720 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	6812      	ldr	r2, [r2, #0]
 80066fa:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006700:	1d1a      	adds	r2, r3, #4
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800670c:	b29b      	uxth	r3, r3
 800670e:	3b01      	subs	r3, #1
 8006710:	b29a      	uxth	r2, r3
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800671e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	695a      	ldr	r2, [r3, #20]
 8006726:	f248 0308 	movw	r3, #32776	; 0x8008
 800672a:	4013      	ands	r3, r2
 800672c:	2b00      	cmp	r3, #0
 800672e:	d01a      	beq.n	8006766 <HAL_SPI_TransmitReceive+0x1d2>
 8006730:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006732:	2b00      	cmp	r3, #0
 8006734:	d017      	beq.n	8006766 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800673e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006740:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006746:	1d1a      	adds	r2, r3, #4
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006752:	b29b      	uxth	r3, r3
 8006754:	3b01      	subs	r3, #1
 8006756:	b29a      	uxth	r2, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006764:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006766:	f7fc f84b 	bl	8002800 <HAL_GetTick>
 800676a:	4602      	mov	r2, r0
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006772:	429a      	cmp	r2, r3
 8006774:	d803      	bhi.n	800677e <HAL_SPI_TransmitReceive+0x1ea>
 8006776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800677c:	d102      	bne.n	8006784 <HAL_SPI_TransmitReceive+0x1f0>
 800677e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006780:	2b00      	cmp	r3, #0
 8006782:	d114      	bne.n	80067ae <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f000 f92d 	bl	80069e4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006798:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	e115      	b.n	80069da <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80067ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d193      	bne.n	80066dc <HAL_SPI_TransmitReceive+0x148>
 80067b4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d190      	bne.n	80066dc <HAL_SPI_TransmitReceive+0x148>
 80067ba:	e0e7      	b.n	800698c <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	2b07      	cmp	r3, #7
 80067c2:	f240 80dd 	bls.w	8006980 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80067c6:	e066      	b.n	8006896 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	f003 0302 	and.w	r3, r3, #2
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d119      	bne.n	800680a <HAL_SPI_TransmitReceive+0x276>
 80067d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d016      	beq.n	800680a <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067e0:	881a      	ldrh	r2, [r3, #0]
 80067e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e4:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067ea:	1c9a      	adds	r2, r3, #2
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	3b01      	subs	r3, #1
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006808:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	695b      	ldr	r3, [r3, #20]
 8006810:	f003 0301 	and.w	r3, r3, #1
 8006814:	2b01      	cmp	r3, #1
 8006816:	d11a      	bne.n	800684e <HAL_SPI_TransmitReceive+0x2ba>
 8006818:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800681a:	2b00      	cmp	r3, #0
 800681c:	d017      	beq.n	800684e <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006822:	6a3a      	ldr	r2, [r7, #32]
 8006824:	8812      	ldrh	r2, [r2, #0]
 8006826:	b292      	uxth	r2, r2
 8006828:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800682e:	1c9a      	adds	r2, r3, #2
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800683a:	b29b      	uxth	r3, r3
 800683c:	3b01      	subs	r3, #1
 800683e:	b29a      	uxth	r2, r3
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800684c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800684e:	f7fb ffd7 	bl	8002800 <HAL_GetTick>
 8006852:	4602      	mov	r2, r0
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800685a:	429a      	cmp	r2, r3
 800685c:	d803      	bhi.n	8006866 <HAL_SPI_TransmitReceive+0x2d2>
 800685e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006864:	d102      	bne.n	800686c <HAL_SPI_TransmitReceive+0x2d8>
 8006866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006868:	2b00      	cmp	r3, #0
 800686a:	d114      	bne.n	8006896 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f000 f8b9 	bl	80069e4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006880:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e0a1      	b.n	80069da <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006896:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006898:	2b00      	cmp	r3, #0
 800689a:	d195      	bne.n	80067c8 <HAL_SPI_TransmitReceive+0x234>
 800689c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d192      	bne.n	80067c8 <HAL_SPI_TransmitReceive+0x234>
 80068a2:	e073      	b.n	800698c <HAL_SPI_TransmitReceive+0x3f8>
 80068a4:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	f003 0302 	and.w	r3, r3, #2
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d11b      	bne.n	80068ee <HAL_SPI_TransmitReceive+0x35a>
 80068b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d018      	beq.n	80068ee <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	3320      	adds	r3, #32
 80068c6:	7812      	ldrb	r2, [r2, #0]
 80068c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ce:	1c5a      	adds	r2, r3, #1
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80068da:	b29b      	uxth	r3, r3
 80068dc:	3b01      	subs	r3, #1
 80068de:	b29a      	uxth	r2, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80068ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	695b      	ldr	r3, [r3, #20]
 80068f4:	f003 0301 	and.w	r3, r3, #1
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d11d      	bne.n	8006938 <HAL_SPI_TransmitReceive+0x3a4>
 80068fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d01a      	beq.n	8006938 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800690e:	7812      	ldrb	r2, [r2, #0]
 8006910:	b2d2      	uxtb	r2, r2
 8006912:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006918:	1c5a      	adds	r2, r3, #1
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006924:	b29b      	uxth	r3, r3
 8006926:	3b01      	subs	r3, #1
 8006928:	b29a      	uxth	r2, r3
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006936:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006938:	f7fb ff62 	bl	8002800 <HAL_GetTick>
 800693c:	4602      	mov	r2, r0
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006944:	429a      	cmp	r2, r3
 8006946:	d803      	bhi.n	8006950 <HAL_SPI_TransmitReceive+0x3bc>
 8006948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800694e:	d102      	bne.n	8006956 <HAL_SPI_TransmitReceive+0x3c2>
 8006950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006952:	2b00      	cmp	r3, #0
 8006954:	d114      	bne.n	8006980 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	f000 f844 	bl	80069e4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2200      	movs	r2, #0
 8006960:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800696a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800697c:	2303      	movs	r3, #3
 800697e:	e02c      	b.n	80069da <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006980:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006982:	2b00      	cmp	r3, #0
 8006984:	d190      	bne.n	80068a8 <HAL_SPI_TransmitReceive+0x314>
 8006986:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006988:	2b00      	cmp	r3, #0
 800698a:	d18d      	bne.n	80068a8 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800698c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698e:	9300      	str	r3, [sp, #0]
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	2200      	movs	r2, #0
 8006994:	2108      	movs	r1, #8
 8006996:	68f8      	ldr	r0, [r7, #12]
 8006998:	f000 f8c4 	bl	8006b24 <SPI_WaitOnFlagUntilTimeout>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d007      	beq.n	80069b2 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069a8:	f043 0220 	orr.w	r2, r3, #32
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f000 f816 	bl	80069e4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d001      	beq.n	80069d6 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e001      	b.n	80069da <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 80069d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3730      	adds	r7, #48	; 0x30
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop

080069e4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	699a      	ldr	r2, [r3, #24]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f042 0208 	orr.w	r2, r2, #8
 8006a02:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	699a      	ldr	r2, [r3, #24]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f042 0210 	orr.w	r2, r2, #16
 8006a12:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f022 0201 	bic.w	r2, r2, #1
 8006a22:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	6919      	ldr	r1, [r3, #16]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	4b3c      	ldr	r3, [pc, #240]	; (8006b20 <SPI_CloseTransfer+0x13c>)
 8006a30:	400b      	ands	r3, r1
 8006a32:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	689a      	ldr	r2, [r3, #8]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006a42:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	2b04      	cmp	r3, #4
 8006a4e:	d014      	beq.n	8006a7a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f003 0320 	and.w	r3, r3, #32
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00f      	beq.n	8006a7a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a60:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	699a      	ldr	r2, [r3, #24]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f042 0220 	orr.w	r2, r2, #32
 8006a78:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	2b03      	cmp	r3, #3
 8006a84:	d014      	beq.n	8006ab0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00f      	beq.n	8006ab0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a96:	f043 0204 	orr.w	r2, r3, #4
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	699a      	ldr	r2, [r3, #24]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006aae:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00f      	beq.n	8006ada <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ac0:	f043 0201 	orr.w	r2, r3, #1
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	699a      	ldr	r2, [r3, #24]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ad8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d00f      	beq.n	8006b04 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006aea:	f043 0208 	orr.w	r2, r3, #8
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	699a      	ldr	r2, [r3, #24]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b02:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8006b14:	bf00      	nop
 8006b16:	3714      	adds	r7, #20
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr
 8006b20:	fffffc90 	.word	0xfffffc90

08006b24 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	603b      	str	r3, [r7, #0]
 8006b30:	4613      	mov	r3, r2
 8006b32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006b34:	e010      	b.n	8006b58 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b36:	f7fb fe63 	bl	8002800 <HAL_GetTick>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	1ad3      	subs	r3, r2, r3
 8006b40:	69ba      	ldr	r2, [r7, #24]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d803      	bhi.n	8006b4e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b4c:	d102      	bne.n	8006b54 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d101      	bne.n	8006b58 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006b54:	2303      	movs	r3, #3
 8006b56:	e00f      	b.n	8006b78 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	695a      	ldr	r2, [r3, #20]
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	4013      	ands	r3, r2
 8006b62:	68ba      	ldr	r2, [r7, #8]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	bf0c      	ite	eq
 8006b68:	2301      	moveq	r3, #1
 8006b6a:	2300      	movne	r3, #0
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	461a      	mov	r2, r3
 8006b70:	79fb      	ldrb	r3, [r7, #7]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d0df      	beq.n	8006b36 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3710      	adds	r7, #16
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b085      	sub	sp, #20
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b8c:	095b      	lsrs	r3, r3, #5
 8006b8e:	3301      	adds	r3, #1
 8006b90:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	3301      	adds	r3, #1
 8006b98:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	3307      	adds	r3, #7
 8006b9e:	08db      	lsrs	r3, r3, #3
 8006ba0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	fb02 f303 	mul.w	r3, r2, r3
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3714      	adds	r7, #20
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr

08006bb6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b082      	sub	sp, #8
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d101      	bne.n	8006bc8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e049      	b.n	8006c5c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d106      	bne.n	8006be2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f7fb fb61 	bl	80022a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2202      	movs	r2, #2
 8006be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	3304      	adds	r3, #4
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	4610      	mov	r0, r2
 8006bf6:	f000 fb69 	bl	80072cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2201      	movs	r2, #1
 8006c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2201      	movs	r2, #1
 8006c36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2201      	movs	r2, #1
 8006c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3708      	adds	r7, #8
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d001      	beq.n	8006c7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e054      	b.n	8006d26 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2202      	movs	r2, #2
 8006c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68da      	ldr	r2, [r3, #12]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f042 0201 	orr.w	r2, r2, #1
 8006c92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a26      	ldr	r2, [pc, #152]	; (8006d34 <HAL_TIM_Base_Start_IT+0xd0>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d022      	beq.n	8006ce4 <HAL_TIM_Base_Start_IT+0x80>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ca6:	d01d      	beq.n	8006ce4 <HAL_TIM_Base_Start_IT+0x80>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a22      	ldr	r2, [pc, #136]	; (8006d38 <HAL_TIM_Base_Start_IT+0xd4>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d018      	beq.n	8006ce4 <HAL_TIM_Base_Start_IT+0x80>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a21      	ldr	r2, [pc, #132]	; (8006d3c <HAL_TIM_Base_Start_IT+0xd8>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d013      	beq.n	8006ce4 <HAL_TIM_Base_Start_IT+0x80>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a1f      	ldr	r2, [pc, #124]	; (8006d40 <HAL_TIM_Base_Start_IT+0xdc>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d00e      	beq.n	8006ce4 <HAL_TIM_Base_Start_IT+0x80>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a1e      	ldr	r2, [pc, #120]	; (8006d44 <HAL_TIM_Base_Start_IT+0xe0>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d009      	beq.n	8006ce4 <HAL_TIM_Base_Start_IT+0x80>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a1c      	ldr	r2, [pc, #112]	; (8006d48 <HAL_TIM_Base_Start_IT+0xe4>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d004      	beq.n	8006ce4 <HAL_TIM_Base_Start_IT+0x80>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a1b      	ldr	r2, [pc, #108]	; (8006d4c <HAL_TIM_Base_Start_IT+0xe8>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d115      	bne.n	8006d10 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	689a      	ldr	r2, [r3, #8]
 8006cea:	4b19      	ldr	r3, [pc, #100]	; (8006d50 <HAL_TIM_Base_Start_IT+0xec>)
 8006cec:	4013      	ands	r3, r2
 8006cee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2b06      	cmp	r3, #6
 8006cf4:	d015      	beq.n	8006d22 <HAL_TIM_Base_Start_IT+0xbe>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cfc:	d011      	beq.n	8006d22 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f042 0201 	orr.w	r2, r2, #1
 8006d0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d0e:	e008      	b.n	8006d22 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f042 0201 	orr.w	r2, r2, #1
 8006d1e:	601a      	str	r2, [r3, #0]
 8006d20:	e000      	b.n	8006d24 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3714      	adds	r7, #20
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop
 8006d34:	40010000 	.word	0x40010000
 8006d38:	40000400 	.word	0x40000400
 8006d3c:	40000800 	.word	0x40000800
 8006d40:	40000c00 	.word	0x40000c00
 8006d44:	40010400 	.word	0x40010400
 8006d48:	40001800 	.word	0x40001800
 8006d4c:	40014000 	.word	0x40014000
 8006d50:	00010007 	.word	0x00010007

08006d54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d101      	bne.n	8006d66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e049      	b.n	8006dfa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d106      	bne.n	8006d80 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 f841 	bl	8006e02 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2202      	movs	r2, #2
 8006d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	3304      	adds	r3, #4
 8006d90:	4619      	mov	r1, r3
 8006d92:	4610      	mov	r0, r2
 8006d94:	f000 fa9a 	bl	80072cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3708      	adds	r7, #8
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006e02:	b480      	push	{r7}
 8006e04:	b083      	sub	sp, #12
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006e0a:	bf00      	nop
 8006e0c:	370c      	adds	r7, #12
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr

08006e16 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b082      	sub	sp, #8
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	f003 0302 	and.w	r3, r3, #2
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	d122      	bne.n	8006e72 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	f003 0302 	and.w	r3, r3, #2
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	d11b      	bne.n	8006e72 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f06f 0202 	mvn.w	r2, #2
 8006e42:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	699b      	ldr	r3, [r3, #24]
 8006e50:	f003 0303 	and.w	r3, r3, #3
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d003      	beq.n	8006e60 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 fa19 	bl	8007290 <HAL_TIM_IC_CaptureCallback>
 8006e5e:	e005      	b.n	8006e6c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 fa0b 	bl	800727c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 fa1c 	bl	80072a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	f003 0304 	and.w	r3, r3, #4
 8006e7c:	2b04      	cmp	r3, #4
 8006e7e:	d122      	bne.n	8006ec6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	f003 0304 	and.w	r3, r3, #4
 8006e8a:	2b04      	cmp	r3, #4
 8006e8c:	d11b      	bne.n	8006ec6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f06f 0204 	mvn.w	r2, #4
 8006e96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	699b      	ldr	r3, [r3, #24]
 8006ea4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d003      	beq.n	8006eb4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 f9ef 	bl	8007290 <HAL_TIM_IC_CaptureCallback>
 8006eb2:	e005      	b.n	8006ec0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 f9e1 	bl	800727c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 f9f2 	bl	80072a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	691b      	ldr	r3, [r3, #16]
 8006ecc:	f003 0308 	and.w	r3, r3, #8
 8006ed0:	2b08      	cmp	r3, #8
 8006ed2:	d122      	bne.n	8006f1a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	f003 0308 	and.w	r3, r3, #8
 8006ede:	2b08      	cmp	r3, #8
 8006ee0:	d11b      	bne.n	8006f1a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f06f 0208 	mvn.w	r2, #8
 8006eea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2204      	movs	r2, #4
 8006ef0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	69db      	ldr	r3, [r3, #28]
 8006ef8:	f003 0303 	and.w	r3, r3, #3
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d003      	beq.n	8006f08 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 f9c5 	bl	8007290 <HAL_TIM_IC_CaptureCallback>
 8006f06:	e005      	b.n	8006f14 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 f9b7 	bl	800727c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 f9c8 	bl	80072a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	f003 0310 	and.w	r3, r3, #16
 8006f24:	2b10      	cmp	r3, #16
 8006f26:	d122      	bne.n	8006f6e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	f003 0310 	and.w	r3, r3, #16
 8006f32:	2b10      	cmp	r3, #16
 8006f34:	d11b      	bne.n	8006f6e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f06f 0210 	mvn.w	r2, #16
 8006f3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2208      	movs	r2, #8
 8006f44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	69db      	ldr	r3, [r3, #28]
 8006f4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d003      	beq.n	8006f5c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 f99b 	bl	8007290 <HAL_TIM_IC_CaptureCallback>
 8006f5a:	e005      	b.n	8006f68 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 f98d 	bl	800727c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 f99e 	bl	80072a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	f003 0301 	and.w	r3, r3, #1
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d10e      	bne.n	8006f9a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	f003 0301 	and.w	r3, r3, #1
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d107      	bne.n	8006f9a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f06f 0201 	mvn.w	r2, #1
 8006f92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f7fb f873 	bl	8002080 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fa4:	2b80      	cmp	r3, #128	; 0x80
 8006fa6:	d10e      	bne.n	8006fc6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fb2:	2b80      	cmp	r3, #128	; 0x80
 8006fb4:	d107      	bne.n	8006fc6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006fbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 fcfd 	bl	80079c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fd4:	d10e      	bne.n	8006ff4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fe0:	2b80      	cmp	r3, #128	; 0x80
 8006fe2:	d107      	bne.n	8006ff4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 fcf0 	bl	80079d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ffe:	2b40      	cmp	r3, #64	; 0x40
 8007000:	d10e      	bne.n	8007020 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800700c:	2b40      	cmp	r3, #64	; 0x40
 800700e:	d107      	bne.n	8007020 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 f94c 	bl	80072b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	f003 0320 	and.w	r3, r3, #32
 800702a:	2b20      	cmp	r3, #32
 800702c:	d10e      	bne.n	800704c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	f003 0320 	and.w	r3, r3, #32
 8007038:	2b20      	cmp	r3, #32
 800703a:	d107      	bne.n	800704c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f06f 0220 	mvn.w	r2, #32
 8007044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fcb0 	bl	80079ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800704c:	bf00      	nop
 800704e:	3708      	adds	r7, #8
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b086      	sub	sp, #24
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007060:	2300      	movs	r3, #0
 8007062:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800706a:	2b01      	cmp	r3, #1
 800706c:	d101      	bne.n	8007072 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800706e:	2302      	movs	r3, #2
 8007070:	e0ff      	b.n	8007272 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2201      	movs	r2, #1
 8007076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2b14      	cmp	r3, #20
 800707e:	f200 80f0 	bhi.w	8007262 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007082:	a201      	add	r2, pc, #4	; (adr r2, 8007088 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007088:	080070dd 	.word	0x080070dd
 800708c:	08007263 	.word	0x08007263
 8007090:	08007263 	.word	0x08007263
 8007094:	08007263 	.word	0x08007263
 8007098:	0800711d 	.word	0x0800711d
 800709c:	08007263 	.word	0x08007263
 80070a0:	08007263 	.word	0x08007263
 80070a4:	08007263 	.word	0x08007263
 80070a8:	0800715f 	.word	0x0800715f
 80070ac:	08007263 	.word	0x08007263
 80070b0:	08007263 	.word	0x08007263
 80070b4:	08007263 	.word	0x08007263
 80070b8:	0800719f 	.word	0x0800719f
 80070bc:	08007263 	.word	0x08007263
 80070c0:	08007263 	.word	0x08007263
 80070c4:	08007263 	.word	0x08007263
 80070c8:	080071e1 	.word	0x080071e1
 80070cc:	08007263 	.word	0x08007263
 80070d0:	08007263 	.word	0x08007263
 80070d4:	08007263 	.word	0x08007263
 80070d8:	08007221 	.word	0x08007221
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68b9      	ldr	r1, [r7, #8]
 80070e2:	4618      	mov	r0, r3
 80070e4:	f000 f98c 	bl	8007400 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	699a      	ldr	r2, [r3, #24]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f042 0208 	orr.w	r2, r2, #8
 80070f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	699a      	ldr	r2, [r3, #24]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f022 0204 	bic.w	r2, r2, #4
 8007106:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	6999      	ldr	r1, [r3, #24]
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	691a      	ldr	r2, [r3, #16]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	430a      	orrs	r2, r1
 8007118:	619a      	str	r2, [r3, #24]
      break;
 800711a:	e0a5      	b.n	8007268 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	68b9      	ldr	r1, [r7, #8]
 8007122:	4618      	mov	r0, r3
 8007124:	f000 f9fc 	bl	8007520 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	699a      	ldr	r2, [r3, #24]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007136:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	699a      	ldr	r2, [r3, #24]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007146:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	6999      	ldr	r1, [r3, #24]
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	021a      	lsls	r2, r3, #8
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	430a      	orrs	r2, r1
 800715a:	619a      	str	r2, [r3, #24]
      break;
 800715c:	e084      	b.n	8007268 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	68b9      	ldr	r1, [r7, #8]
 8007164:	4618      	mov	r0, r3
 8007166:	f000 fa65 	bl	8007634 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	69da      	ldr	r2, [r3, #28]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f042 0208 	orr.w	r2, r2, #8
 8007178:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	69da      	ldr	r2, [r3, #28]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f022 0204 	bic.w	r2, r2, #4
 8007188:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	69d9      	ldr	r1, [r3, #28]
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	691a      	ldr	r2, [r3, #16]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	430a      	orrs	r2, r1
 800719a:	61da      	str	r2, [r3, #28]
      break;
 800719c:	e064      	b.n	8007268 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68b9      	ldr	r1, [r7, #8]
 80071a4:	4618      	mov	r0, r3
 80071a6:	f000 facd 	bl	8007744 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	69da      	ldr	r2, [r3, #28]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	69da      	ldr	r2, [r3, #28]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	69d9      	ldr	r1, [r3, #28]
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	021a      	lsls	r2, r3, #8
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	430a      	orrs	r2, r1
 80071dc:	61da      	str	r2, [r3, #28]
      break;
 80071de:	e043      	b.n	8007268 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68b9      	ldr	r1, [r7, #8]
 80071e6:	4618      	mov	r0, r3
 80071e8:	f000 fb16 	bl	8007818 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f042 0208 	orr.w	r2, r2, #8
 80071fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f022 0204 	bic.w	r2, r2, #4
 800720a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	691a      	ldr	r2, [r3, #16]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	430a      	orrs	r2, r1
 800721c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800721e:	e023      	b.n	8007268 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	68b9      	ldr	r1, [r7, #8]
 8007226:	4618      	mov	r0, r3
 8007228:	f000 fb5a 	bl	80078e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800723a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800724a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	021a      	lsls	r2, r3, #8
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	430a      	orrs	r2, r1
 800725e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007260:	e002      	b.n	8007268 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	75fb      	strb	r3, [r7, #23]
      break;
 8007266:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2200      	movs	r2, #0
 800726c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007270:	7dfb      	ldrb	r3, [r7, #23]
}
 8007272:	4618      	mov	r0, r3
 8007274:	3718      	adds	r7, #24
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop

0800727c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007284:	bf00      	nop
 8007286:	370c      	adds	r7, #12
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007298:	bf00      	nop
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80072ac:	bf00      	nop
 80072ae:	370c      	adds	r7, #12
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80072c0:	bf00      	nop
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b085      	sub	sp, #20
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4a40      	ldr	r2, [pc, #256]	; (80073e0 <TIM_Base_SetConfig+0x114>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d013      	beq.n	800730c <TIM_Base_SetConfig+0x40>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072ea:	d00f      	beq.n	800730c <TIM_Base_SetConfig+0x40>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4a3d      	ldr	r2, [pc, #244]	; (80073e4 <TIM_Base_SetConfig+0x118>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d00b      	beq.n	800730c <TIM_Base_SetConfig+0x40>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	4a3c      	ldr	r2, [pc, #240]	; (80073e8 <TIM_Base_SetConfig+0x11c>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d007      	beq.n	800730c <TIM_Base_SetConfig+0x40>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4a3b      	ldr	r2, [pc, #236]	; (80073ec <TIM_Base_SetConfig+0x120>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d003      	beq.n	800730c <TIM_Base_SetConfig+0x40>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a3a      	ldr	r2, [pc, #232]	; (80073f0 <TIM_Base_SetConfig+0x124>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d108      	bne.n	800731e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007312:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	68fa      	ldr	r2, [r7, #12]
 800731a:	4313      	orrs	r3, r2
 800731c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4a2f      	ldr	r2, [pc, #188]	; (80073e0 <TIM_Base_SetConfig+0x114>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d01f      	beq.n	8007366 <TIM_Base_SetConfig+0x9a>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800732c:	d01b      	beq.n	8007366 <TIM_Base_SetConfig+0x9a>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a2c      	ldr	r2, [pc, #176]	; (80073e4 <TIM_Base_SetConfig+0x118>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d017      	beq.n	8007366 <TIM_Base_SetConfig+0x9a>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4a2b      	ldr	r2, [pc, #172]	; (80073e8 <TIM_Base_SetConfig+0x11c>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d013      	beq.n	8007366 <TIM_Base_SetConfig+0x9a>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4a2a      	ldr	r2, [pc, #168]	; (80073ec <TIM_Base_SetConfig+0x120>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d00f      	beq.n	8007366 <TIM_Base_SetConfig+0x9a>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4a29      	ldr	r2, [pc, #164]	; (80073f0 <TIM_Base_SetConfig+0x124>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d00b      	beq.n	8007366 <TIM_Base_SetConfig+0x9a>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	4a28      	ldr	r2, [pc, #160]	; (80073f4 <TIM_Base_SetConfig+0x128>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d007      	beq.n	8007366 <TIM_Base_SetConfig+0x9a>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	4a27      	ldr	r2, [pc, #156]	; (80073f8 <TIM_Base_SetConfig+0x12c>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d003      	beq.n	8007366 <TIM_Base_SetConfig+0x9a>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4a26      	ldr	r2, [pc, #152]	; (80073fc <TIM_Base_SetConfig+0x130>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d108      	bne.n	8007378 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800736c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	68fa      	ldr	r2, [r7, #12]
 8007374:	4313      	orrs	r3, r2
 8007376:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	695b      	ldr	r3, [r3, #20]
 8007382:	4313      	orrs	r3, r2
 8007384:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	68fa      	ldr	r2, [r7, #12]
 800738a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	689a      	ldr	r2, [r3, #8]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a10      	ldr	r2, [pc, #64]	; (80073e0 <TIM_Base_SetConfig+0x114>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d00f      	beq.n	80073c4 <TIM_Base_SetConfig+0xf8>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4a12      	ldr	r2, [pc, #72]	; (80073f0 <TIM_Base_SetConfig+0x124>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d00b      	beq.n	80073c4 <TIM_Base_SetConfig+0xf8>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4a11      	ldr	r2, [pc, #68]	; (80073f4 <TIM_Base_SetConfig+0x128>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d007      	beq.n	80073c4 <TIM_Base_SetConfig+0xf8>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	4a10      	ldr	r2, [pc, #64]	; (80073f8 <TIM_Base_SetConfig+0x12c>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d003      	beq.n	80073c4 <TIM_Base_SetConfig+0xf8>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4a0f      	ldr	r2, [pc, #60]	; (80073fc <TIM_Base_SetConfig+0x130>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d103      	bne.n	80073cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	691a      	ldr	r2, [r3, #16]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	615a      	str	r2, [r3, #20]
}
 80073d2:	bf00      	nop
 80073d4:	3714      	adds	r7, #20
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop
 80073e0:	40010000 	.word	0x40010000
 80073e4:	40000400 	.word	0x40000400
 80073e8:	40000800 	.word	0x40000800
 80073ec:	40000c00 	.word	0x40000c00
 80073f0:	40010400 	.word	0x40010400
 80073f4:	40014000 	.word	0x40014000
 80073f8:	40014400 	.word	0x40014400
 80073fc:	40014800 	.word	0x40014800

08007400 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007400:	b480      	push	{r7}
 8007402:	b087      	sub	sp, #28
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6a1b      	ldr	r3, [r3, #32]
 800740e:	f023 0201 	bic.w	r2, r3, #1
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a1b      	ldr	r3, [r3, #32]
 800741a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	699b      	ldr	r3, [r3, #24]
 8007426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	4b37      	ldr	r3, [pc, #220]	; (8007508 <TIM_OC1_SetConfig+0x108>)
 800742c:	4013      	ands	r3, r2
 800742e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f023 0303 	bic.w	r3, r3, #3
 8007436:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	4313      	orrs	r3, r2
 8007440:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	f023 0302 	bic.w	r3, r3, #2
 8007448:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	697a      	ldr	r2, [r7, #20]
 8007450:	4313      	orrs	r3, r2
 8007452:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4a2d      	ldr	r2, [pc, #180]	; (800750c <TIM_OC1_SetConfig+0x10c>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d00f      	beq.n	800747c <TIM_OC1_SetConfig+0x7c>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a2c      	ldr	r2, [pc, #176]	; (8007510 <TIM_OC1_SetConfig+0x110>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d00b      	beq.n	800747c <TIM_OC1_SetConfig+0x7c>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4a2b      	ldr	r2, [pc, #172]	; (8007514 <TIM_OC1_SetConfig+0x114>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d007      	beq.n	800747c <TIM_OC1_SetConfig+0x7c>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4a2a      	ldr	r2, [pc, #168]	; (8007518 <TIM_OC1_SetConfig+0x118>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d003      	beq.n	800747c <TIM_OC1_SetConfig+0x7c>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	4a29      	ldr	r2, [pc, #164]	; (800751c <TIM_OC1_SetConfig+0x11c>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d10c      	bne.n	8007496 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	f023 0308 	bic.w	r3, r3, #8
 8007482:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	697a      	ldr	r2, [r7, #20]
 800748a:	4313      	orrs	r3, r2
 800748c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	f023 0304 	bic.w	r3, r3, #4
 8007494:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4a1c      	ldr	r2, [pc, #112]	; (800750c <TIM_OC1_SetConfig+0x10c>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d00f      	beq.n	80074be <TIM_OC1_SetConfig+0xbe>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4a1b      	ldr	r2, [pc, #108]	; (8007510 <TIM_OC1_SetConfig+0x110>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d00b      	beq.n	80074be <TIM_OC1_SetConfig+0xbe>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4a1a      	ldr	r2, [pc, #104]	; (8007514 <TIM_OC1_SetConfig+0x114>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d007      	beq.n	80074be <TIM_OC1_SetConfig+0xbe>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a19      	ldr	r2, [pc, #100]	; (8007518 <TIM_OC1_SetConfig+0x118>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d003      	beq.n	80074be <TIM_OC1_SetConfig+0xbe>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a18      	ldr	r2, [pc, #96]	; (800751c <TIM_OC1_SetConfig+0x11c>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d111      	bne.n	80074e2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	695b      	ldr	r3, [r3, #20]
 80074d2:	693a      	ldr	r2, [r7, #16]
 80074d4:	4313      	orrs	r3, r2
 80074d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	699b      	ldr	r3, [r3, #24]
 80074dc:	693a      	ldr	r2, [r7, #16]
 80074de:	4313      	orrs	r3, r2
 80074e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	693a      	ldr	r2, [r7, #16]
 80074e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	68fa      	ldr	r2, [r7, #12]
 80074ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	685a      	ldr	r2, [r3, #4]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	697a      	ldr	r2, [r7, #20]
 80074fa:	621a      	str	r2, [r3, #32]
}
 80074fc:	bf00      	nop
 80074fe:	371c      	adds	r7, #28
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr
 8007508:	fffeff8f 	.word	0xfffeff8f
 800750c:	40010000 	.word	0x40010000
 8007510:	40010400 	.word	0x40010400
 8007514:	40014000 	.word	0x40014000
 8007518:	40014400 	.word	0x40014400
 800751c:	40014800 	.word	0x40014800

08007520 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007520:	b480      	push	{r7}
 8007522:	b087      	sub	sp, #28
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a1b      	ldr	r3, [r3, #32]
 800752e:	f023 0210 	bic.w	r2, r3, #16
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a1b      	ldr	r3, [r3, #32]
 800753a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	699b      	ldr	r3, [r3, #24]
 8007546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	4b34      	ldr	r3, [pc, #208]	; (800761c <TIM_OC2_SetConfig+0xfc>)
 800754c:	4013      	ands	r3, r2
 800754e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007556:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	021b      	lsls	r3, r3, #8
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	4313      	orrs	r3, r2
 8007562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	f023 0320 	bic.w	r3, r3, #32
 800756a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	011b      	lsls	r3, r3, #4
 8007572:	697a      	ldr	r2, [r7, #20]
 8007574:	4313      	orrs	r3, r2
 8007576:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a29      	ldr	r2, [pc, #164]	; (8007620 <TIM_OC2_SetConfig+0x100>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d003      	beq.n	8007588 <TIM_OC2_SetConfig+0x68>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a28      	ldr	r2, [pc, #160]	; (8007624 <TIM_OC2_SetConfig+0x104>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d10d      	bne.n	80075a4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800758e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	011b      	lsls	r3, r3, #4
 8007596:	697a      	ldr	r2, [r7, #20]
 8007598:	4313      	orrs	r3, r2
 800759a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4a1e      	ldr	r2, [pc, #120]	; (8007620 <TIM_OC2_SetConfig+0x100>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d00f      	beq.n	80075cc <TIM_OC2_SetConfig+0xac>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	4a1d      	ldr	r2, [pc, #116]	; (8007624 <TIM_OC2_SetConfig+0x104>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d00b      	beq.n	80075cc <TIM_OC2_SetConfig+0xac>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	4a1c      	ldr	r2, [pc, #112]	; (8007628 <TIM_OC2_SetConfig+0x108>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d007      	beq.n	80075cc <TIM_OC2_SetConfig+0xac>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	4a1b      	ldr	r2, [pc, #108]	; (800762c <TIM_OC2_SetConfig+0x10c>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d003      	beq.n	80075cc <TIM_OC2_SetConfig+0xac>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	4a1a      	ldr	r2, [pc, #104]	; (8007630 <TIM_OC2_SetConfig+0x110>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d113      	bne.n	80075f4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80075d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80075da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	695b      	ldr	r3, [r3, #20]
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	693a      	ldr	r2, [r7, #16]
 80075e4:	4313      	orrs	r3, r2
 80075e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	699b      	ldr	r3, [r3, #24]
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	693a      	ldr	r2, [r7, #16]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	693a      	ldr	r2, [r7, #16]
 80075f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	68fa      	ldr	r2, [r7, #12]
 80075fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	685a      	ldr	r2, [r3, #4]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	697a      	ldr	r2, [r7, #20]
 800760c:	621a      	str	r2, [r3, #32]
}
 800760e:	bf00      	nop
 8007610:	371c      	adds	r7, #28
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr
 800761a:	bf00      	nop
 800761c:	feff8fff 	.word	0xfeff8fff
 8007620:	40010000 	.word	0x40010000
 8007624:	40010400 	.word	0x40010400
 8007628:	40014000 	.word	0x40014000
 800762c:	40014400 	.word	0x40014400
 8007630:	40014800 	.word	0x40014800

08007634 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007634:	b480      	push	{r7}
 8007636:	b087      	sub	sp, #28
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a1b      	ldr	r3, [r3, #32]
 8007642:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6a1b      	ldr	r3, [r3, #32]
 800764e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	69db      	ldr	r3, [r3, #28]
 800765a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	4b33      	ldr	r3, [pc, #204]	; (800772c <TIM_OC3_SetConfig+0xf8>)
 8007660:	4013      	ands	r3, r2
 8007662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f023 0303 	bic.w	r3, r3, #3
 800766a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	4313      	orrs	r3, r2
 8007674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800767c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	021b      	lsls	r3, r3, #8
 8007684:	697a      	ldr	r2, [r7, #20]
 8007686:	4313      	orrs	r3, r2
 8007688:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a28      	ldr	r2, [pc, #160]	; (8007730 <TIM_OC3_SetConfig+0xfc>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d003      	beq.n	800769a <TIM_OC3_SetConfig+0x66>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a27      	ldr	r2, [pc, #156]	; (8007734 <TIM_OC3_SetConfig+0x100>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d10d      	bne.n	80076b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	021b      	lsls	r3, r3, #8
 80076a8:	697a      	ldr	r2, [r7, #20]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a1d      	ldr	r2, [pc, #116]	; (8007730 <TIM_OC3_SetConfig+0xfc>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d00f      	beq.n	80076de <TIM_OC3_SetConfig+0xaa>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a1c      	ldr	r2, [pc, #112]	; (8007734 <TIM_OC3_SetConfig+0x100>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d00b      	beq.n	80076de <TIM_OC3_SetConfig+0xaa>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a1b      	ldr	r2, [pc, #108]	; (8007738 <TIM_OC3_SetConfig+0x104>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d007      	beq.n	80076de <TIM_OC3_SetConfig+0xaa>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4a1a      	ldr	r2, [pc, #104]	; (800773c <TIM_OC3_SetConfig+0x108>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d003      	beq.n	80076de <TIM_OC3_SetConfig+0xaa>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a19      	ldr	r2, [pc, #100]	; (8007740 <TIM_OC3_SetConfig+0x10c>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d113      	bne.n	8007706 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80076ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	695b      	ldr	r3, [r3, #20]
 80076f2:	011b      	lsls	r3, r3, #4
 80076f4:	693a      	ldr	r2, [r7, #16]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	699b      	ldr	r3, [r3, #24]
 80076fe:	011b      	lsls	r3, r3, #4
 8007700:	693a      	ldr	r2, [r7, #16]
 8007702:	4313      	orrs	r3, r2
 8007704:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	693a      	ldr	r2, [r7, #16]
 800770a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	68fa      	ldr	r2, [r7, #12]
 8007710:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	685a      	ldr	r2, [r3, #4]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	697a      	ldr	r2, [r7, #20]
 800771e:	621a      	str	r2, [r3, #32]
}
 8007720:	bf00      	nop
 8007722:	371c      	adds	r7, #28
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr
 800772c:	fffeff8f 	.word	0xfffeff8f
 8007730:	40010000 	.word	0x40010000
 8007734:	40010400 	.word	0x40010400
 8007738:	40014000 	.word	0x40014000
 800773c:	40014400 	.word	0x40014400
 8007740:	40014800 	.word	0x40014800

08007744 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007744:	b480      	push	{r7}
 8007746:	b087      	sub	sp, #28
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a1b      	ldr	r3, [r3, #32]
 8007752:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a1b      	ldr	r3, [r3, #32]
 800775e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	69db      	ldr	r3, [r3, #28]
 800776a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800776c:	68fa      	ldr	r2, [r7, #12]
 800776e:	4b24      	ldr	r3, [pc, #144]	; (8007800 <TIM_OC4_SetConfig+0xbc>)
 8007770:	4013      	ands	r3, r2
 8007772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800777a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	021b      	lsls	r3, r3, #8
 8007782:	68fa      	ldr	r2, [r7, #12]
 8007784:	4313      	orrs	r3, r2
 8007786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800778e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	031b      	lsls	r3, r3, #12
 8007796:	693a      	ldr	r2, [r7, #16]
 8007798:	4313      	orrs	r3, r2
 800779a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4a19      	ldr	r2, [pc, #100]	; (8007804 <TIM_OC4_SetConfig+0xc0>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d00f      	beq.n	80077c4 <TIM_OC4_SetConfig+0x80>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4a18      	ldr	r2, [pc, #96]	; (8007808 <TIM_OC4_SetConfig+0xc4>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d00b      	beq.n	80077c4 <TIM_OC4_SetConfig+0x80>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4a17      	ldr	r2, [pc, #92]	; (800780c <TIM_OC4_SetConfig+0xc8>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d007      	beq.n	80077c4 <TIM_OC4_SetConfig+0x80>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4a16      	ldr	r2, [pc, #88]	; (8007810 <TIM_OC4_SetConfig+0xcc>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d003      	beq.n	80077c4 <TIM_OC4_SetConfig+0x80>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a15      	ldr	r2, [pc, #84]	; (8007814 <TIM_OC4_SetConfig+0xd0>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d109      	bne.n	80077d8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	695b      	ldr	r3, [r3, #20]
 80077d0:	019b      	lsls	r3, r3, #6
 80077d2:	697a      	ldr	r2, [r7, #20]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	697a      	ldr	r2, [r7, #20]
 80077dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	68fa      	ldr	r2, [r7, #12]
 80077e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	685a      	ldr	r2, [r3, #4]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	693a      	ldr	r2, [r7, #16]
 80077f0:	621a      	str	r2, [r3, #32]
}
 80077f2:	bf00      	nop
 80077f4:	371c      	adds	r7, #28
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr
 80077fe:	bf00      	nop
 8007800:	feff8fff 	.word	0xfeff8fff
 8007804:	40010000 	.word	0x40010000
 8007808:	40010400 	.word	0x40010400
 800780c:	40014000 	.word	0x40014000
 8007810:	40014400 	.word	0x40014400
 8007814:	40014800 	.word	0x40014800

08007818 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007818:	b480      	push	{r7}
 800781a:	b087      	sub	sp, #28
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6a1b      	ldr	r3, [r3, #32]
 8007826:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a1b      	ldr	r3, [r3, #32]
 8007832:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800783e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	4b21      	ldr	r3, [pc, #132]	; (80078c8 <TIM_OC5_SetConfig+0xb0>)
 8007844:	4013      	ands	r3, r2
 8007846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	4313      	orrs	r3, r2
 8007850:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007858:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	041b      	lsls	r3, r3, #16
 8007860:	693a      	ldr	r2, [r7, #16]
 8007862:	4313      	orrs	r3, r2
 8007864:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4a18      	ldr	r2, [pc, #96]	; (80078cc <TIM_OC5_SetConfig+0xb4>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d00f      	beq.n	800788e <TIM_OC5_SetConfig+0x76>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4a17      	ldr	r2, [pc, #92]	; (80078d0 <TIM_OC5_SetConfig+0xb8>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d00b      	beq.n	800788e <TIM_OC5_SetConfig+0x76>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4a16      	ldr	r2, [pc, #88]	; (80078d4 <TIM_OC5_SetConfig+0xbc>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d007      	beq.n	800788e <TIM_OC5_SetConfig+0x76>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4a15      	ldr	r2, [pc, #84]	; (80078d8 <TIM_OC5_SetConfig+0xc0>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d003      	beq.n	800788e <TIM_OC5_SetConfig+0x76>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4a14      	ldr	r2, [pc, #80]	; (80078dc <TIM_OC5_SetConfig+0xc4>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d109      	bne.n	80078a2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007894:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	695b      	ldr	r3, [r3, #20]
 800789a:	021b      	lsls	r3, r3, #8
 800789c:	697a      	ldr	r2, [r7, #20]
 800789e:	4313      	orrs	r3, r2
 80078a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	697a      	ldr	r2, [r7, #20]
 80078a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	685a      	ldr	r2, [r3, #4]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	693a      	ldr	r2, [r7, #16]
 80078ba:	621a      	str	r2, [r3, #32]
}
 80078bc:	bf00      	nop
 80078be:	371c      	adds	r7, #28
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr
 80078c8:	fffeff8f 	.word	0xfffeff8f
 80078cc:	40010000 	.word	0x40010000
 80078d0:	40010400 	.word	0x40010400
 80078d4:	40014000 	.word	0x40014000
 80078d8:	40014400 	.word	0x40014400
 80078dc:	40014800 	.word	0x40014800

080078e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b087      	sub	sp, #28
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a1b      	ldr	r3, [r3, #32]
 80078ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6a1b      	ldr	r3, [r3, #32]
 80078fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	4b22      	ldr	r3, [pc, #136]	; (8007994 <TIM_OC6_SetConfig+0xb4>)
 800790c:	4013      	ands	r3, r2
 800790e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	021b      	lsls	r3, r3, #8
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	4313      	orrs	r3, r2
 800791a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007922:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	051b      	lsls	r3, r3, #20
 800792a:	693a      	ldr	r2, [r7, #16]
 800792c:	4313      	orrs	r3, r2
 800792e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	4a19      	ldr	r2, [pc, #100]	; (8007998 <TIM_OC6_SetConfig+0xb8>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d00f      	beq.n	8007958 <TIM_OC6_SetConfig+0x78>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4a18      	ldr	r2, [pc, #96]	; (800799c <TIM_OC6_SetConfig+0xbc>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d00b      	beq.n	8007958 <TIM_OC6_SetConfig+0x78>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4a17      	ldr	r2, [pc, #92]	; (80079a0 <TIM_OC6_SetConfig+0xc0>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d007      	beq.n	8007958 <TIM_OC6_SetConfig+0x78>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a16      	ldr	r2, [pc, #88]	; (80079a4 <TIM_OC6_SetConfig+0xc4>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d003      	beq.n	8007958 <TIM_OC6_SetConfig+0x78>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a15      	ldr	r2, [pc, #84]	; (80079a8 <TIM_OC6_SetConfig+0xc8>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d109      	bne.n	800796c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800795e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	695b      	ldr	r3, [r3, #20]
 8007964:	029b      	lsls	r3, r3, #10
 8007966:	697a      	ldr	r2, [r7, #20]
 8007968:	4313      	orrs	r3, r2
 800796a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	697a      	ldr	r2, [r7, #20]
 8007970:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	685a      	ldr	r2, [r3, #4]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	693a      	ldr	r2, [r7, #16]
 8007984:	621a      	str	r2, [r3, #32]
}
 8007986:	bf00      	nop
 8007988:	371c      	adds	r7, #28
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	feff8fff 	.word	0xfeff8fff
 8007998:	40010000 	.word	0x40010000
 800799c:	40010400 	.word	0x40010400
 80079a0:	40014000 	.word	0x40014000
 80079a4:	40014400 	.word	0x40014400
 80079a8:	40014800 	.word	0x40014800

080079ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80079b4:	bf00      	nop
 80079b6:	370c      	adds	r7, #12
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr

080079c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80079c8:	bf00      	nop
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80079dc:	bf00      	nop
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d101      	bne.n	80079fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e042      	b.n	8007a80 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d106      	bne.n	8007a12 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f7fa fce7 	bl	80023e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2224      	movs	r2, #36	; 0x24
 8007a16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f022 0201 	bic.w	r2, r2, #1
 8007a28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 f8c2 	bl	8007bb4 <UART_SetConfig>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d101      	bne.n	8007a3a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e022      	b.n	8007a80 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d002      	beq.n	8007a48 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 fe1e 	bl	8008684 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	685a      	ldr	r2, [r3, #4]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	689a      	ldr	r2, [r3, #8]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f042 0201 	orr.w	r2, r2, #1
 8007a76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 fea5 	bl	80087c8 <UART_CheckIdleState>
 8007a7e:	4603      	mov	r3, r0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3708      	adds	r7, #8
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b08a      	sub	sp, #40	; 0x28
 8007a8c:	af02      	add	r7, sp, #8
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	603b      	str	r3, [r7, #0]
 8007a94:	4613      	mov	r3, r2
 8007a96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a9e:	2b20      	cmp	r3, #32
 8007aa0:	f040 8083 	bne.w	8007baa <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d002      	beq.n	8007ab0 <HAL_UART_Transmit+0x28>
 8007aaa:	88fb      	ldrh	r3, [r7, #6]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d101      	bne.n	8007ab4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e07b      	b.n	8007bac <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d101      	bne.n	8007ac2 <HAL_UART_Transmit+0x3a>
 8007abe:	2302      	movs	r3, #2
 8007ac0:	e074      	b.n	8007bac <HAL_UART_Transmit+0x124>
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2200      	movs	r2, #0
 8007ace:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2221      	movs	r2, #33	; 0x21
 8007ad6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ada:	f7fa fe91 	bl	8002800 <HAL_GetTick>
 8007ade:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	88fa      	ldrh	r2, [r7, #6]
 8007ae4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	88fa      	ldrh	r2, [r7, #6]
 8007aec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007af8:	d108      	bne.n	8007b0c <HAL_UART_Transmit+0x84>
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d104      	bne.n	8007b0c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007b02:	2300      	movs	r3, #0
 8007b04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	61bb      	str	r3, [r7, #24]
 8007b0a:	e003      	b.n	8007b14 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b10:	2300      	movs	r3, #0
 8007b12:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007b1c:	e02c      	b.n	8007b78 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	9300      	str	r3, [sp, #0]
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	2200      	movs	r2, #0
 8007b26:	2180      	movs	r1, #128	; 0x80
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f000 fe98 	bl	800885e <UART_WaitOnFlagUntilTimeout>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d001      	beq.n	8007b38 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007b34:	2303      	movs	r3, #3
 8007b36:	e039      	b.n	8007bac <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d10b      	bne.n	8007b56 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b3e:	69bb      	ldr	r3, [r7, #24]
 8007b40:	881b      	ldrh	r3, [r3, #0]
 8007b42:	461a      	mov	r2, r3
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b4c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	3302      	adds	r3, #2
 8007b52:	61bb      	str	r3, [r7, #24]
 8007b54:	e007      	b.n	8007b66 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	781a      	ldrb	r2, [r3, #0]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	3301      	adds	r3, #1
 8007b64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	b29a      	uxth	r2, r3
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d1cc      	bne.n	8007b1e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	9300      	str	r3, [sp, #0]
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	2140      	movs	r1, #64	; 0x40
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f000 fe65 	bl	800885e <UART_WaitOnFlagUntilTimeout>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d001      	beq.n	8007b9e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007b9a:	2303      	movs	r3, #3
 8007b9c:	e006      	b.n	8007bac <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2220      	movs	r2, #32
 8007ba2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	e000      	b.n	8007bac <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007baa:	2302      	movs	r3, #2
  }
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3720      	adds	r7, #32
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007bb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007bb8:	b092      	sub	sp, #72	; 0x48
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	689a      	ldr	r2, [r3, #8]
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	691b      	ldr	r3, [r3, #16]
 8007bcc:	431a      	orrs	r2, r3
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	695b      	ldr	r3, [r3, #20]
 8007bd2:	431a      	orrs	r2, r3
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	69db      	ldr	r3, [r3, #28]
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	4bbe      	ldr	r3, [pc, #760]	; (8007edc <UART_SetConfig+0x328>)
 8007be4:	4013      	ands	r3, r2
 8007be6:	697a      	ldr	r2, [r7, #20]
 8007be8:	6812      	ldr	r2, [r2, #0]
 8007bea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007bec:	430b      	orrs	r3, r1
 8007bee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	68da      	ldr	r2, [r3, #12]
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	430a      	orrs	r2, r1
 8007c04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	699b      	ldr	r3, [r3, #24]
 8007c0a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4ab3      	ldr	r2, [pc, #716]	; (8007ee0 <UART_SetConfig+0x32c>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d004      	beq.n	8007c20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	6a1b      	ldr	r3, [r3, #32]
 8007c1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	689a      	ldr	r2, [r3, #8]
 8007c26:	4baf      	ldr	r3, [pc, #700]	; (8007ee4 <UART_SetConfig+0x330>)
 8007c28:	4013      	ands	r3, r2
 8007c2a:	697a      	ldr	r2, [r7, #20]
 8007c2c:	6812      	ldr	r2, [r2, #0]
 8007c2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007c30:	430b      	orrs	r3, r1
 8007c32:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c3a:	f023 010f 	bic.w	r1, r3, #15
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	430a      	orrs	r2, r1
 8007c48:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4aa6      	ldr	r2, [pc, #664]	; (8007ee8 <UART_SetConfig+0x334>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d177      	bne.n	8007d44 <UART_SetConfig+0x190>
 8007c54:	4ba5      	ldr	r3, [pc, #660]	; (8007eec <UART_SetConfig+0x338>)
 8007c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c5c:	2b28      	cmp	r3, #40	; 0x28
 8007c5e:	d86d      	bhi.n	8007d3c <UART_SetConfig+0x188>
 8007c60:	a201      	add	r2, pc, #4	; (adr r2, 8007c68 <UART_SetConfig+0xb4>)
 8007c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c66:	bf00      	nop
 8007c68:	08007d0d 	.word	0x08007d0d
 8007c6c:	08007d3d 	.word	0x08007d3d
 8007c70:	08007d3d 	.word	0x08007d3d
 8007c74:	08007d3d 	.word	0x08007d3d
 8007c78:	08007d3d 	.word	0x08007d3d
 8007c7c:	08007d3d 	.word	0x08007d3d
 8007c80:	08007d3d 	.word	0x08007d3d
 8007c84:	08007d3d 	.word	0x08007d3d
 8007c88:	08007d15 	.word	0x08007d15
 8007c8c:	08007d3d 	.word	0x08007d3d
 8007c90:	08007d3d 	.word	0x08007d3d
 8007c94:	08007d3d 	.word	0x08007d3d
 8007c98:	08007d3d 	.word	0x08007d3d
 8007c9c:	08007d3d 	.word	0x08007d3d
 8007ca0:	08007d3d 	.word	0x08007d3d
 8007ca4:	08007d3d 	.word	0x08007d3d
 8007ca8:	08007d1d 	.word	0x08007d1d
 8007cac:	08007d3d 	.word	0x08007d3d
 8007cb0:	08007d3d 	.word	0x08007d3d
 8007cb4:	08007d3d 	.word	0x08007d3d
 8007cb8:	08007d3d 	.word	0x08007d3d
 8007cbc:	08007d3d 	.word	0x08007d3d
 8007cc0:	08007d3d 	.word	0x08007d3d
 8007cc4:	08007d3d 	.word	0x08007d3d
 8007cc8:	08007d25 	.word	0x08007d25
 8007ccc:	08007d3d 	.word	0x08007d3d
 8007cd0:	08007d3d 	.word	0x08007d3d
 8007cd4:	08007d3d 	.word	0x08007d3d
 8007cd8:	08007d3d 	.word	0x08007d3d
 8007cdc:	08007d3d 	.word	0x08007d3d
 8007ce0:	08007d3d 	.word	0x08007d3d
 8007ce4:	08007d3d 	.word	0x08007d3d
 8007ce8:	08007d2d 	.word	0x08007d2d
 8007cec:	08007d3d 	.word	0x08007d3d
 8007cf0:	08007d3d 	.word	0x08007d3d
 8007cf4:	08007d3d 	.word	0x08007d3d
 8007cf8:	08007d3d 	.word	0x08007d3d
 8007cfc:	08007d3d 	.word	0x08007d3d
 8007d00:	08007d3d 	.word	0x08007d3d
 8007d04:	08007d3d 	.word	0x08007d3d
 8007d08:	08007d35 	.word	0x08007d35
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d12:	e222      	b.n	800815a <UART_SetConfig+0x5a6>
 8007d14:	2304      	movs	r3, #4
 8007d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d1a:	e21e      	b.n	800815a <UART_SetConfig+0x5a6>
 8007d1c:	2308      	movs	r3, #8
 8007d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d22:	e21a      	b.n	800815a <UART_SetConfig+0x5a6>
 8007d24:	2310      	movs	r3, #16
 8007d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d2a:	e216      	b.n	800815a <UART_SetConfig+0x5a6>
 8007d2c:	2320      	movs	r3, #32
 8007d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d32:	e212      	b.n	800815a <UART_SetConfig+0x5a6>
 8007d34:	2340      	movs	r3, #64	; 0x40
 8007d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d3a:	e20e      	b.n	800815a <UART_SetConfig+0x5a6>
 8007d3c:	2380      	movs	r3, #128	; 0x80
 8007d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d42:	e20a      	b.n	800815a <UART_SetConfig+0x5a6>
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a69      	ldr	r2, [pc, #420]	; (8007ef0 <UART_SetConfig+0x33c>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d130      	bne.n	8007db0 <UART_SetConfig+0x1fc>
 8007d4e:	4b67      	ldr	r3, [pc, #412]	; (8007eec <UART_SetConfig+0x338>)
 8007d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d52:	f003 0307 	and.w	r3, r3, #7
 8007d56:	2b05      	cmp	r3, #5
 8007d58:	d826      	bhi.n	8007da8 <UART_SetConfig+0x1f4>
 8007d5a:	a201      	add	r2, pc, #4	; (adr r2, 8007d60 <UART_SetConfig+0x1ac>)
 8007d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d60:	08007d79 	.word	0x08007d79
 8007d64:	08007d81 	.word	0x08007d81
 8007d68:	08007d89 	.word	0x08007d89
 8007d6c:	08007d91 	.word	0x08007d91
 8007d70:	08007d99 	.word	0x08007d99
 8007d74:	08007da1 	.word	0x08007da1
 8007d78:	2300      	movs	r3, #0
 8007d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d7e:	e1ec      	b.n	800815a <UART_SetConfig+0x5a6>
 8007d80:	2304      	movs	r3, #4
 8007d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d86:	e1e8      	b.n	800815a <UART_SetConfig+0x5a6>
 8007d88:	2308      	movs	r3, #8
 8007d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d8e:	e1e4      	b.n	800815a <UART_SetConfig+0x5a6>
 8007d90:	2310      	movs	r3, #16
 8007d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d96:	e1e0      	b.n	800815a <UART_SetConfig+0x5a6>
 8007d98:	2320      	movs	r3, #32
 8007d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d9e:	e1dc      	b.n	800815a <UART_SetConfig+0x5a6>
 8007da0:	2340      	movs	r3, #64	; 0x40
 8007da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007da6:	e1d8      	b.n	800815a <UART_SetConfig+0x5a6>
 8007da8:	2380      	movs	r3, #128	; 0x80
 8007daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dae:	e1d4      	b.n	800815a <UART_SetConfig+0x5a6>
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a4f      	ldr	r2, [pc, #316]	; (8007ef4 <UART_SetConfig+0x340>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d130      	bne.n	8007e1c <UART_SetConfig+0x268>
 8007dba:	4b4c      	ldr	r3, [pc, #304]	; (8007eec <UART_SetConfig+0x338>)
 8007dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dbe:	f003 0307 	and.w	r3, r3, #7
 8007dc2:	2b05      	cmp	r3, #5
 8007dc4:	d826      	bhi.n	8007e14 <UART_SetConfig+0x260>
 8007dc6:	a201      	add	r2, pc, #4	; (adr r2, 8007dcc <UART_SetConfig+0x218>)
 8007dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dcc:	08007de5 	.word	0x08007de5
 8007dd0:	08007ded 	.word	0x08007ded
 8007dd4:	08007df5 	.word	0x08007df5
 8007dd8:	08007dfd 	.word	0x08007dfd
 8007ddc:	08007e05 	.word	0x08007e05
 8007de0:	08007e0d 	.word	0x08007e0d
 8007de4:	2300      	movs	r3, #0
 8007de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dea:	e1b6      	b.n	800815a <UART_SetConfig+0x5a6>
 8007dec:	2304      	movs	r3, #4
 8007dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007df2:	e1b2      	b.n	800815a <UART_SetConfig+0x5a6>
 8007df4:	2308      	movs	r3, #8
 8007df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dfa:	e1ae      	b.n	800815a <UART_SetConfig+0x5a6>
 8007dfc:	2310      	movs	r3, #16
 8007dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e02:	e1aa      	b.n	800815a <UART_SetConfig+0x5a6>
 8007e04:	2320      	movs	r3, #32
 8007e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e0a:	e1a6      	b.n	800815a <UART_SetConfig+0x5a6>
 8007e0c:	2340      	movs	r3, #64	; 0x40
 8007e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e12:	e1a2      	b.n	800815a <UART_SetConfig+0x5a6>
 8007e14:	2380      	movs	r3, #128	; 0x80
 8007e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e1a:	e19e      	b.n	800815a <UART_SetConfig+0x5a6>
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a35      	ldr	r2, [pc, #212]	; (8007ef8 <UART_SetConfig+0x344>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d130      	bne.n	8007e88 <UART_SetConfig+0x2d4>
 8007e26:	4b31      	ldr	r3, [pc, #196]	; (8007eec <UART_SetConfig+0x338>)
 8007e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e2a:	f003 0307 	and.w	r3, r3, #7
 8007e2e:	2b05      	cmp	r3, #5
 8007e30:	d826      	bhi.n	8007e80 <UART_SetConfig+0x2cc>
 8007e32:	a201      	add	r2, pc, #4	; (adr r2, 8007e38 <UART_SetConfig+0x284>)
 8007e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e38:	08007e51 	.word	0x08007e51
 8007e3c:	08007e59 	.word	0x08007e59
 8007e40:	08007e61 	.word	0x08007e61
 8007e44:	08007e69 	.word	0x08007e69
 8007e48:	08007e71 	.word	0x08007e71
 8007e4c:	08007e79 	.word	0x08007e79
 8007e50:	2300      	movs	r3, #0
 8007e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e56:	e180      	b.n	800815a <UART_SetConfig+0x5a6>
 8007e58:	2304      	movs	r3, #4
 8007e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e5e:	e17c      	b.n	800815a <UART_SetConfig+0x5a6>
 8007e60:	2308      	movs	r3, #8
 8007e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e66:	e178      	b.n	800815a <UART_SetConfig+0x5a6>
 8007e68:	2310      	movs	r3, #16
 8007e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e6e:	e174      	b.n	800815a <UART_SetConfig+0x5a6>
 8007e70:	2320      	movs	r3, #32
 8007e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e76:	e170      	b.n	800815a <UART_SetConfig+0x5a6>
 8007e78:	2340      	movs	r3, #64	; 0x40
 8007e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e7e:	e16c      	b.n	800815a <UART_SetConfig+0x5a6>
 8007e80:	2380      	movs	r3, #128	; 0x80
 8007e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e86:	e168      	b.n	800815a <UART_SetConfig+0x5a6>
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a1b      	ldr	r2, [pc, #108]	; (8007efc <UART_SetConfig+0x348>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d142      	bne.n	8007f18 <UART_SetConfig+0x364>
 8007e92:	4b16      	ldr	r3, [pc, #88]	; (8007eec <UART_SetConfig+0x338>)
 8007e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e96:	f003 0307 	and.w	r3, r3, #7
 8007e9a:	2b05      	cmp	r3, #5
 8007e9c:	d838      	bhi.n	8007f10 <UART_SetConfig+0x35c>
 8007e9e:	a201      	add	r2, pc, #4	; (adr r2, 8007ea4 <UART_SetConfig+0x2f0>)
 8007ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea4:	08007ebd 	.word	0x08007ebd
 8007ea8:	08007ec5 	.word	0x08007ec5
 8007eac:	08007ecd 	.word	0x08007ecd
 8007eb0:	08007ed5 	.word	0x08007ed5
 8007eb4:	08007f01 	.word	0x08007f01
 8007eb8:	08007f09 	.word	0x08007f09
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ec2:	e14a      	b.n	800815a <UART_SetConfig+0x5a6>
 8007ec4:	2304      	movs	r3, #4
 8007ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007eca:	e146      	b.n	800815a <UART_SetConfig+0x5a6>
 8007ecc:	2308      	movs	r3, #8
 8007ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ed2:	e142      	b.n	800815a <UART_SetConfig+0x5a6>
 8007ed4:	2310      	movs	r3, #16
 8007ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007eda:	e13e      	b.n	800815a <UART_SetConfig+0x5a6>
 8007edc:	cfff69f3 	.word	0xcfff69f3
 8007ee0:	58000c00 	.word	0x58000c00
 8007ee4:	11fff4ff 	.word	0x11fff4ff
 8007ee8:	40011000 	.word	0x40011000
 8007eec:	58024400 	.word	0x58024400
 8007ef0:	40004400 	.word	0x40004400
 8007ef4:	40004800 	.word	0x40004800
 8007ef8:	40004c00 	.word	0x40004c00
 8007efc:	40005000 	.word	0x40005000
 8007f00:	2320      	movs	r3, #32
 8007f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f06:	e128      	b.n	800815a <UART_SetConfig+0x5a6>
 8007f08:	2340      	movs	r3, #64	; 0x40
 8007f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f0e:	e124      	b.n	800815a <UART_SetConfig+0x5a6>
 8007f10:	2380      	movs	r3, #128	; 0x80
 8007f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f16:	e120      	b.n	800815a <UART_SetConfig+0x5a6>
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4acb      	ldr	r2, [pc, #812]	; (800824c <UART_SetConfig+0x698>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d176      	bne.n	8008010 <UART_SetConfig+0x45c>
 8007f22:	4bcb      	ldr	r3, [pc, #812]	; (8008250 <UART_SetConfig+0x69c>)
 8007f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f2a:	2b28      	cmp	r3, #40	; 0x28
 8007f2c:	d86c      	bhi.n	8008008 <UART_SetConfig+0x454>
 8007f2e:	a201      	add	r2, pc, #4	; (adr r2, 8007f34 <UART_SetConfig+0x380>)
 8007f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f34:	08007fd9 	.word	0x08007fd9
 8007f38:	08008009 	.word	0x08008009
 8007f3c:	08008009 	.word	0x08008009
 8007f40:	08008009 	.word	0x08008009
 8007f44:	08008009 	.word	0x08008009
 8007f48:	08008009 	.word	0x08008009
 8007f4c:	08008009 	.word	0x08008009
 8007f50:	08008009 	.word	0x08008009
 8007f54:	08007fe1 	.word	0x08007fe1
 8007f58:	08008009 	.word	0x08008009
 8007f5c:	08008009 	.word	0x08008009
 8007f60:	08008009 	.word	0x08008009
 8007f64:	08008009 	.word	0x08008009
 8007f68:	08008009 	.word	0x08008009
 8007f6c:	08008009 	.word	0x08008009
 8007f70:	08008009 	.word	0x08008009
 8007f74:	08007fe9 	.word	0x08007fe9
 8007f78:	08008009 	.word	0x08008009
 8007f7c:	08008009 	.word	0x08008009
 8007f80:	08008009 	.word	0x08008009
 8007f84:	08008009 	.word	0x08008009
 8007f88:	08008009 	.word	0x08008009
 8007f8c:	08008009 	.word	0x08008009
 8007f90:	08008009 	.word	0x08008009
 8007f94:	08007ff1 	.word	0x08007ff1
 8007f98:	08008009 	.word	0x08008009
 8007f9c:	08008009 	.word	0x08008009
 8007fa0:	08008009 	.word	0x08008009
 8007fa4:	08008009 	.word	0x08008009
 8007fa8:	08008009 	.word	0x08008009
 8007fac:	08008009 	.word	0x08008009
 8007fb0:	08008009 	.word	0x08008009
 8007fb4:	08007ff9 	.word	0x08007ff9
 8007fb8:	08008009 	.word	0x08008009
 8007fbc:	08008009 	.word	0x08008009
 8007fc0:	08008009 	.word	0x08008009
 8007fc4:	08008009 	.word	0x08008009
 8007fc8:	08008009 	.word	0x08008009
 8007fcc:	08008009 	.word	0x08008009
 8007fd0:	08008009 	.word	0x08008009
 8007fd4:	08008001 	.word	0x08008001
 8007fd8:	2301      	movs	r3, #1
 8007fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fde:	e0bc      	b.n	800815a <UART_SetConfig+0x5a6>
 8007fe0:	2304      	movs	r3, #4
 8007fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fe6:	e0b8      	b.n	800815a <UART_SetConfig+0x5a6>
 8007fe8:	2308      	movs	r3, #8
 8007fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fee:	e0b4      	b.n	800815a <UART_SetConfig+0x5a6>
 8007ff0:	2310      	movs	r3, #16
 8007ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ff6:	e0b0      	b.n	800815a <UART_SetConfig+0x5a6>
 8007ff8:	2320      	movs	r3, #32
 8007ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ffe:	e0ac      	b.n	800815a <UART_SetConfig+0x5a6>
 8008000:	2340      	movs	r3, #64	; 0x40
 8008002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008006:	e0a8      	b.n	800815a <UART_SetConfig+0x5a6>
 8008008:	2380      	movs	r3, #128	; 0x80
 800800a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800800e:	e0a4      	b.n	800815a <UART_SetConfig+0x5a6>
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a8f      	ldr	r2, [pc, #572]	; (8008254 <UART_SetConfig+0x6a0>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d130      	bne.n	800807c <UART_SetConfig+0x4c8>
 800801a:	4b8d      	ldr	r3, [pc, #564]	; (8008250 <UART_SetConfig+0x69c>)
 800801c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800801e:	f003 0307 	and.w	r3, r3, #7
 8008022:	2b05      	cmp	r3, #5
 8008024:	d826      	bhi.n	8008074 <UART_SetConfig+0x4c0>
 8008026:	a201      	add	r2, pc, #4	; (adr r2, 800802c <UART_SetConfig+0x478>)
 8008028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800802c:	08008045 	.word	0x08008045
 8008030:	0800804d 	.word	0x0800804d
 8008034:	08008055 	.word	0x08008055
 8008038:	0800805d 	.word	0x0800805d
 800803c:	08008065 	.word	0x08008065
 8008040:	0800806d 	.word	0x0800806d
 8008044:	2300      	movs	r3, #0
 8008046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800804a:	e086      	b.n	800815a <UART_SetConfig+0x5a6>
 800804c:	2304      	movs	r3, #4
 800804e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008052:	e082      	b.n	800815a <UART_SetConfig+0x5a6>
 8008054:	2308      	movs	r3, #8
 8008056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800805a:	e07e      	b.n	800815a <UART_SetConfig+0x5a6>
 800805c:	2310      	movs	r3, #16
 800805e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008062:	e07a      	b.n	800815a <UART_SetConfig+0x5a6>
 8008064:	2320      	movs	r3, #32
 8008066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800806a:	e076      	b.n	800815a <UART_SetConfig+0x5a6>
 800806c:	2340      	movs	r3, #64	; 0x40
 800806e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008072:	e072      	b.n	800815a <UART_SetConfig+0x5a6>
 8008074:	2380      	movs	r3, #128	; 0x80
 8008076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800807a:	e06e      	b.n	800815a <UART_SetConfig+0x5a6>
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a75      	ldr	r2, [pc, #468]	; (8008258 <UART_SetConfig+0x6a4>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d130      	bne.n	80080e8 <UART_SetConfig+0x534>
 8008086:	4b72      	ldr	r3, [pc, #456]	; (8008250 <UART_SetConfig+0x69c>)
 8008088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800808a:	f003 0307 	and.w	r3, r3, #7
 800808e:	2b05      	cmp	r3, #5
 8008090:	d826      	bhi.n	80080e0 <UART_SetConfig+0x52c>
 8008092:	a201      	add	r2, pc, #4	; (adr r2, 8008098 <UART_SetConfig+0x4e4>)
 8008094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008098:	080080b1 	.word	0x080080b1
 800809c:	080080b9 	.word	0x080080b9
 80080a0:	080080c1 	.word	0x080080c1
 80080a4:	080080c9 	.word	0x080080c9
 80080a8:	080080d1 	.word	0x080080d1
 80080ac:	080080d9 	.word	0x080080d9
 80080b0:	2300      	movs	r3, #0
 80080b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080b6:	e050      	b.n	800815a <UART_SetConfig+0x5a6>
 80080b8:	2304      	movs	r3, #4
 80080ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080be:	e04c      	b.n	800815a <UART_SetConfig+0x5a6>
 80080c0:	2308      	movs	r3, #8
 80080c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080c6:	e048      	b.n	800815a <UART_SetConfig+0x5a6>
 80080c8:	2310      	movs	r3, #16
 80080ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ce:	e044      	b.n	800815a <UART_SetConfig+0x5a6>
 80080d0:	2320      	movs	r3, #32
 80080d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080d6:	e040      	b.n	800815a <UART_SetConfig+0x5a6>
 80080d8:	2340      	movs	r3, #64	; 0x40
 80080da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080de:	e03c      	b.n	800815a <UART_SetConfig+0x5a6>
 80080e0:	2380      	movs	r3, #128	; 0x80
 80080e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080e6:	e038      	b.n	800815a <UART_SetConfig+0x5a6>
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a5b      	ldr	r2, [pc, #364]	; (800825c <UART_SetConfig+0x6a8>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d130      	bne.n	8008154 <UART_SetConfig+0x5a0>
 80080f2:	4b57      	ldr	r3, [pc, #348]	; (8008250 <UART_SetConfig+0x69c>)
 80080f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080f6:	f003 0307 	and.w	r3, r3, #7
 80080fa:	2b05      	cmp	r3, #5
 80080fc:	d826      	bhi.n	800814c <UART_SetConfig+0x598>
 80080fe:	a201      	add	r2, pc, #4	; (adr r2, 8008104 <UART_SetConfig+0x550>)
 8008100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008104:	0800811d 	.word	0x0800811d
 8008108:	08008125 	.word	0x08008125
 800810c:	0800812d 	.word	0x0800812d
 8008110:	08008135 	.word	0x08008135
 8008114:	0800813d 	.word	0x0800813d
 8008118:	08008145 	.word	0x08008145
 800811c:	2302      	movs	r3, #2
 800811e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008122:	e01a      	b.n	800815a <UART_SetConfig+0x5a6>
 8008124:	2304      	movs	r3, #4
 8008126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800812a:	e016      	b.n	800815a <UART_SetConfig+0x5a6>
 800812c:	2308      	movs	r3, #8
 800812e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008132:	e012      	b.n	800815a <UART_SetConfig+0x5a6>
 8008134:	2310      	movs	r3, #16
 8008136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800813a:	e00e      	b.n	800815a <UART_SetConfig+0x5a6>
 800813c:	2320      	movs	r3, #32
 800813e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008142:	e00a      	b.n	800815a <UART_SetConfig+0x5a6>
 8008144:	2340      	movs	r3, #64	; 0x40
 8008146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800814a:	e006      	b.n	800815a <UART_SetConfig+0x5a6>
 800814c:	2380      	movs	r3, #128	; 0x80
 800814e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008152:	e002      	b.n	800815a <UART_SetConfig+0x5a6>
 8008154:	2380      	movs	r3, #128	; 0x80
 8008156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a3f      	ldr	r2, [pc, #252]	; (800825c <UART_SetConfig+0x6a8>)
 8008160:	4293      	cmp	r3, r2
 8008162:	f040 80f8 	bne.w	8008356 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008166:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800816a:	2b20      	cmp	r3, #32
 800816c:	dc46      	bgt.n	80081fc <UART_SetConfig+0x648>
 800816e:	2b02      	cmp	r3, #2
 8008170:	f2c0 8082 	blt.w	8008278 <UART_SetConfig+0x6c4>
 8008174:	3b02      	subs	r3, #2
 8008176:	2b1e      	cmp	r3, #30
 8008178:	d87e      	bhi.n	8008278 <UART_SetConfig+0x6c4>
 800817a:	a201      	add	r2, pc, #4	; (adr r2, 8008180 <UART_SetConfig+0x5cc>)
 800817c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008180:	08008203 	.word	0x08008203
 8008184:	08008279 	.word	0x08008279
 8008188:	0800820b 	.word	0x0800820b
 800818c:	08008279 	.word	0x08008279
 8008190:	08008279 	.word	0x08008279
 8008194:	08008279 	.word	0x08008279
 8008198:	0800821b 	.word	0x0800821b
 800819c:	08008279 	.word	0x08008279
 80081a0:	08008279 	.word	0x08008279
 80081a4:	08008279 	.word	0x08008279
 80081a8:	08008279 	.word	0x08008279
 80081ac:	08008279 	.word	0x08008279
 80081b0:	08008279 	.word	0x08008279
 80081b4:	08008279 	.word	0x08008279
 80081b8:	0800822b 	.word	0x0800822b
 80081bc:	08008279 	.word	0x08008279
 80081c0:	08008279 	.word	0x08008279
 80081c4:	08008279 	.word	0x08008279
 80081c8:	08008279 	.word	0x08008279
 80081cc:	08008279 	.word	0x08008279
 80081d0:	08008279 	.word	0x08008279
 80081d4:	08008279 	.word	0x08008279
 80081d8:	08008279 	.word	0x08008279
 80081dc:	08008279 	.word	0x08008279
 80081e0:	08008279 	.word	0x08008279
 80081e4:	08008279 	.word	0x08008279
 80081e8:	08008279 	.word	0x08008279
 80081ec:	08008279 	.word	0x08008279
 80081f0:	08008279 	.word	0x08008279
 80081f4:	08008279 	.word	0x08008279
 80081f8:	0800826b 	.word	0x0800826b
 80081fc:	2b40      	cmp	r3, #64	; 0x40
 80081fe:	d037      	beq.n	8008270 <UART_SetConfig+0x6bc>
 8008200:	e03a      	b.n	8008278 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008202:	f7fd f911 	bl	8005428 <HAL_RCCEx_GetD3PCLK1Freq>
 8008206:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008208:	e03c      	b.n	8008284 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800820a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800820e:	4618      	mov	r0, r3
 8008210:	f7fd f920 	bl	8005454 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008216:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008218:	e034      	b.n	8008284 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800821a:	f107 0318 	add.w	r3, r7, #24
 800821e:	4618      	mov	r0, r3
 8008220:	f7fd fa6c 	bl	80056fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008228:	e02c      	b.n	8008284 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800822a:	4b09      	ldr	r3, [pc, #36]	; (8008250 <UART_SetConfig+0x69c>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f003 0320 	and.w	r3, r3, #32
 8008232:	2b00      	cmp	r3, #0
 8008234:	d016      	beq.n	8008264 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008236:	4b06      	ldr	r3, [pc, #24]	; (8008250 <UART_SetConfig+0x69c>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	08db      	lsrs	r3, r3, #3
 800823c:	f003 0303 	and.w	r3, r3, #3
 8008240:	4a07      	ldr	r2, [pc, #28]	; (8008260 <UART_SetConfig+0x6ac>)
 8008242:	fa22 f303 	lsr.w	r3, r2, r3
 8008246:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008248:	e01c      	b.n	8008284 <UART_SetConfig+0x6d0>
 800824a:	bf00      	nop
 800824c:	40011400 	.word	0x40011400
 8008250:	58024400 	.word	0x58024400
 8008254:	40007800 	.word	0x40007800
 8008258:	40007c00 	.word	0x40007c00
 800825c:	58000c00 	.word	0x58000c00
 8008260:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008264:	4b9d      	ldr	r3, [pc, #628]	; (80084dc <UART_SetConfig+0x928>)
 8008266:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008268:	e00c      	b.n	8008284 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800826a:	4b9d      	ldr	r3, [pc, #628]	; (80084e0 <UART_SetConfig+0x92c>)
 800826c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800826e:	e009      	b.n	8008284 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008270:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008274:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008276:	e005      	b.n	8008284 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008278:	2300      	movs	r3, #0
 800827a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800827c:	2301      	movs	r3, #1
 800827e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008282:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008286:	2b00      	cmp	r3, #0
 8008288:	f000 81de 	beq.w	8008648 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008290:	4a94      	ldr	r2, [pc, #592]	; (80084e4 <UART_SetConfig+0x930>)
 8008292:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008296:	461a      	mov	r2, r3
 8008298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800829a:	fbb3 f3f2 	udiv	r3, r3, r2
 800829e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	685a      	ldr	r2, [r3, #4]
 80082a4:	4613      	mov	r3, r2
 80082a6:	005b      	lsls	r3, r3, #1
 80082a8:	4413      	add	r3, r2
 80082aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d305      	bcc.n	80082bc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80082b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d903      	bls.n	80082c4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80082c2:	e1c1      	b.n	8008648 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082c6:	2200      	movs	r2, #0
 80082c8:	60bb      	str	r3, [r7, #8]
 80082ca:	60fa      	str	r2, [r7, #12]
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d0:	4a84      	ldr	r2, [pc, #528]	; (80084e4 <UART_SetConfig+0x930>)
 80082d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	2200      	movs	r2, #0
 80082da:	603b      	str	r3, [r7, #0]
 80082dc:	607a      	str	r2, [r7, #4]
 80082de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80082e6:	f7f8 f853 	bl	8000390 <__aeabi_uldivmod>
 80082ea:	4602      	mov	r2, r0
 80082ec:	460b      	mov	r3, r1
 80082ee:	4610      	mov	r0, r2
 80082f0:	4619      	mov	r1, r3
 80082f2:	f04f 0200 	mov.w	r2, #0
 80082f6:	f04f 0300 	mov.w	r3, #0
 80082fa:	020b      	lsls	r3, r1, #8
 80082fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008300:	0202      	lsls	r2, r0, #8
 8008302:	6979      	ldr	r1, [r7, #20]
 8008304:	6849      	ldr	r1, [r1, #4]
 8008306:	0849      	lsrs	r1, r1, #1
 8008308:	2000      	movs	r0, #0
 800830a:	460c      	mov	r4, r1
 800830c:	4605      	mov	r5, r0
 800830e:	eb12 0804 	adds.w	r8, r2, r4
 8008312:	eb43 0905 	adc.w	r9, r3, r5
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	469a      	mov	sl, r3
 800831e:	4693      	mov	fp, r2
 8008320:	4652      	mov	r2, sl
 8008322:	465b      	mov	r3, fp
 8008324:	4640      	mov	r0, r8
 8008326:	4649      	mov	r1, r9
 8008328:	f7f8 f832 	bl	8000390 <__aeabi_uldivmod>
 800832c:	4602      	mov	r2, r0
 800832e:	460b      	mov	r3, r1
 8008330:	4613      	mov	r3, r2
 8008332:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008336:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800833a:	d308      	bcc.n	800834e <UART_SetConfig+0x79a>
 800833c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800833e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008342:	d204      	bcs.n	800834e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800834a:	60da      	str	r2, [r3, #12]
 800834c:	e17c      	b.n	8008648 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008354:	e178      	b.n	8008648 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	69db      	ldr	r3, [r3, #28]
 800835a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800835e:	f040 80c5 	bne.w	80084ec <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008362:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008366:	2b20      	cmp	r3, #32
 8008368:	dc48      	bgt.n	80083fc <UART_SetConfig+0x848>
 800836a:	2b00      	cmp	r3, #0
 800836c:	db7b      	blt.n	8008466 <UART_SetConfig+0x8b2>
 800836e:	2b20      	cmp	r3, #32
 8008370:	d879      	bhi.n	8008466 <UART_SetConfig+0x8b2>
 8008372:	a201      	add	r2, pc, #4	; (adr r2, 8008378 <UART_SetConfig+0x7c4>)
 8008374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008378:	08008403 	.word	0x08008403
 800837c:	0800840b 	.word	0x0800840b
 8008380:	08008467 	.word	0x08008467
 8008384:	08008467 	.word	0x08008467
 8008388:	08008413 	.word	0x08008413
 800838c:	08008467 	.word	0x08008467
 8008390:	08008467 	.word	0x08008467
 8008394:	08008467 	.word	0x08008467
 8008398:	08008423 	.word	0x08008423
 800839c:	08008467 	.word	0x08008467
 80083a0:	08008467 	.word	0x08008467
 80083a4:	08008467 	.word	0x08008467
 80083a8:	08008467 	.word	0x08008467
 80083ac:	08008467 	.word	0x08008467
 80083b0:	08008467 	.word	0x08008467
 80083b4:	08008467 	.word	0x08008467
 80083b8:	08008433 	.word	0x08008433
 80083bc:	08008467 	.word	0x08008467
 80083c0:	08008467 	.word	0x08008467
 80083c4:	08008467 	.word	0x08008467
 80083c8:	08008467 	.word	0x08008467
 80083cc:	08008467 	.word	0x08008467
 80083d0:	08008467 	.word	0x08008467
 80083d4:	08008467 	.word	0x08008467
 80083d8:	08008467 	.word	0x08008467
 80083dc:	08008467 	.word	0x08008467
 80083e0:	08008467 	.word	0x08008467
 80083e4:	08008467 	.word	0x08008467
 80083e8:	08008467 	.word	0x08008467
 80083ec:	08008467 	.word	0x08008467
 80083f0:	08008467 	.word	0x08008467
 80083f4:	08008467 	.word	0x08008467
 80083f8:	08008459 	.word	0x08008459
 80083fc:	2b40      	cmp	r3, #64	; 0x40
 80083fe:	d02e      	beq.n	800845e <UART_SetConfig+0x8aa>
 8008400:	e031      	b.n	8008466 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008402:	f7fc f85d 	bl	80044c0 <HAL_RCC_GetPCLK1Freq>
 8008406:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008408:	e033      	b.n	8008472 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800840a:	f7fc f86f 	bl	80044ec <HAL_RCC_GetPCLK2Freq>
 800840e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008410:	e02f      	b.n	8008472 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008416:	4618      	mov	r0, r3
 8008418:	f7fd f81c 	bl	8005454 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800841c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800841e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008420:	e027      	b.n	8008472 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008422:	f107 0318 	add.w	r3, r7, #24
 8008426:	4618      	mov	r0, r3
 8008428:	f7fd f968 	bl	80056fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008430:	e01f      	b.n	8008472 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008432:	4b2d      	ldr	r3, [pc, #180]	; (80084e8 <UART_SetConfig+0x934>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f003 0320 	and.w	r3, r3, #32
 800843a:	2b00      	cmp	r3, #0
 800843c:	d009      	beq.n	8008452 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800843e:	4b2a      	ldr	r3, [pc, #168]	; (80084e8 <UART_SetConfig+0x934>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	08db      	lsrs	r3, r3, #3
 8008444:	f003 0303 	and.w	r3, r3, #3
 8008448:	4a24      	ldr	r2, [pc, #144]	; (80084dc <UART_SetConfig+0x928>)
 800844a:	fa22 f303 	lsr.w	r3, r2, r3
 800844e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008450:	e00f      	b.n	8008472 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008452:	4b22      	ldr	r3, [pc, #136]	; (80084dc <UART_SetConfig+0x928>)
 8008454:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008456:	e00c      	b.n	8008472 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008458:	4b21      	ldr	r3, [pc, #132]	; (80084e0 <UART_SetConfig+0x92c>)
 800845a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800845c:	e009      	b.n	8008472 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800845e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008462:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008464:	e005      	b.n	8008472 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008466:	2300      	movs	r3, #0
 8008468:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008470:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008474:	2b00      	cmp	r3, #0
 8008476:	f000 80e7 	beq.w	8008648 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847e:	4a19      	ldr	r2, [pc, #100]	; (80084e4 <UART_SetConfig+0x930>)
 8008480:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008484:	461a      	mov	r2, r3
 8008486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008488:	fbb3 f3f2 	udiv	r3, r3, r2
 800848c:	005a      	lsls	r2, r3, #1
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	085b      	lsrs	r3, r3, #1
 8008494:	441a      	add	r2, r3
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	fbb2 f3f3 	udiv	r3, r2, r3
 800849e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a2:	2b0f      	cmp	r3, #15
 80084a4:	d916      	bls.n	80084d4 <UART_SetConfig+0x920>
 80084a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084ac:	d212      	bcs.n	80084d4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80084ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	f023 030f 	bic.w	r3, r3, #15
 80084b6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80084b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ba:	085b      	lsrs	r3, r3, #1
 80084bc:	b29b      	uxth	r3, r3
 80084be:	f003 0307 	and.w	r3, r3, #7
 80084c2:	b29a      	uxth	r2, r3
 80084c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80084c6:	4313      	orrs	r3, r2
 80084c8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80084d0:	60da      	str	r2, [r3, #12]
 80084d2:	e0b9      	b.n	8008648 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80084d4:	2301      	movs	r3, #1
 80084d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80084da:	e0b5      	b.n	8008648 <UART_SetConfig+0xa94>
 80084dc:	03d09000 	.word	0x03d09000
 80084e0:	003d0900 	.word	0x003d0900
 80084e4:	0800d0f4 	.word	0x0800d0f4
 80084e8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80084ec:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80084f0:	2b20      	cmp	r3, #32
 80084f2:	dc49      	bgt.n	8008588 <UART_SetConfig+0x9d4>
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	db7c      	blt.n	80085f2 <UART_SetConfig+0xa3e>
 80084f8:	2b20      	cmp	r3, #32
 80084fa:	d87a      	bhi.n	80085f2 <UART_SetConfig+0xa3e>
 80084fc:	a201      	add	r2, pc, #4	; (adr r2, 8008504 <UART_SetConfig+0x950>)
 80084fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008502:	bf00      	nop
 8008504:	0800858f 	.word	0x0800858f
 8008508:	08008597 	.word	0x08008597
 800850c:	080085f3 	.word	0x080085f3
 8008510:	080085f3 	.word	0x080085f3
 8008514:	0800859f 	.word	0x0800859f
 8008518:	080085f3 	.word	0x080085f3
 800851c:	080085f3 	.word	0x080085f3
 8008520:	080085f3 	.word	0x080085f3
 8008524:	080085af 	.word	0x080085af
 8008528:	080085f3 	.word	0x080085f3
 800852c:	080085f3 	.word	0x080085f3
 8008530:	080085f3 	.word	0x080085f3
 8008534:	080085f3 	.word	0x080085f3
 8008538:	080085f3 	.word	0x080085f3
 800853c:	080085f3 	.word	0x080085f3
 8008540:	080085f3 	.word	0x080085f3
 8008544:	080085bf 	.word	0x080085bf
 8008548:	080085f3 	.word	0x080085f3
 800854c:	080085f3 	.word	0x080085f3
 8008550:	080085f3 	.word	0x080085f3
 8008554:	080085f3 	.word	0x080085f3
 8008558:	080085f3 	.word	0x080085f3
 800855c:	080085f3 	.word	0x080085f3
 8008560:	080085f3 	.word	0x080085f3
 8008564:	080085f3 	.word	0x080085f3
 8008568:	080085f3 	.word	0x080085f3
 800856c:	080085f3 	.word	0x080085f3
 8008570:	080085f3 	.word	0x080085f3
 8008574:	080085f3 	.word	0x080085f3
 8008578:	080085f3 	.word	0x080085f3
 800857c:	080085f3 	.word	0x080085f3
 8008580:	080085f3 	.word	0x080085f3
 8008584:	080085e5 	.word	0x080085e5
 8008588:	2b40      	cmp	r3, #64	; 0x40
 800858a:	d02e      	beq.n	80085ea <UART_SetConfig+0xa36>
 800858c:	e031      	b.n	80085f2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800858e:	f7fb ff97 	bl	80044c0 <HAL_RCC_GetPCLK1Freq>
 8008592:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008594:	e033      	b.n	80085fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008596:	f7fb ffa9 	bl	80044ec <HAL_RCC_GetPCLK2Freq>
 800859a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800859c:	e02f      	b.n	80085fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800859e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7fc ff56 	bl	8005454 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80085a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085ac:	e027      	b.n	80085fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085ae:	f107 0318 	add.w	r3, r7, #24
 80085b2:	4618      	mov	r0, r3
 80085b4:	f7fd f8a2 	bl	80056fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80085b8:	69fb      	ldr	r3, [r7, #28]
 80085ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085bc:	e01f      	b.n	80085fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085be:	4b2d      	ldr	r3, [pc, #180]	; (8008674 <UART_SetConfig+0xac0>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f003 0320 	and.w	r3, r3, #32
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d009      	beq.n	80085de <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80085ca:	4b2a      	ldr	r3, [pc, #168]	; (8008674 <UART_SetConfig+0xac0>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	08db      	lsrs	r3, r3, #3
 80085d0:	f003 0303 	and.w	r3, r3, #3
 80085d4:	4a28      	ldr	r2, [pc, #160]	; (8008678 <UART_SetConfig+0xac4>)
 80085d6:	fa22 f303 	lsr.w	r3, r2, r3
 80085da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80085dc:	e00f      	b.n	80085fe <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80085de:	4b26      	ldr	r3, [pc, #152]	; (8008678 <UART_SetConfig+0xac4>)
 80085e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085e2:	e00c      	b.n	80085fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80085e4:	4b25      	ldr	r3, [pc, #148]	; (800867c <UART_SetConfig+0xac8>)
 80085e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085e8:	e009      	b.n	80085fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085f0:	e005      	b.n	80085fe <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80085f2:	2300      	movs	r3, #0
 80085f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80085f6:	2301      	movs	r3, #1
 80085f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80085fc:	bf00      	nop
    }

    if (pclk != 0U)
 80085fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008600:	2b00      	cmp	r3, #0
 8008602:	d021      	beq.n	8008648 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008608:	4a1d      	ldr	r2, [pc, #116]	; (8008680 <UART_SetConfig+0xacc>)
 800860a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800860e:	461a      	mov	r2, r3
 8008610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008612:	fbb3 f2f2 	udiv	r2, r3, r2
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	085b      	lsrs	r3, r3, #1
 800861c:	441a      	add	r2, r3
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	fbb2 f3f3 	udiv	r3, r2, r3
 8008626:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800862a:	2b0f      	cmp	r3, #15
 800862c:	d909      	bls.n	8008642 <UART_SetConfig+0xa8e>
 800862e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008634:	d205      	bcs.n	8008642 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008638:	b29a      	uxth	r2, r3
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	60da      	str	r2, [r3, #12]
 8008640:	e002      	b.n	8008648 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	2201      	movs	r2, #1
 800864c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	2201      	movs	r2, #1
 8008654:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	2200      	movs	r2, #0
 800865c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	2200      	movs	r2, #0
 8008662:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008664:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008668:	4618      	mov	r0, r3
 800866a:	3748      	adds	r7, #72	; 0x48
 800866c:	46bd      	mov	sp, r7
 800866e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008672:	bf00      	nop
 8008674:	58024400 	.word	0x58024400
 8008678:	03d09000 	.word	0x03d09000
 800867c:	003d0900 	.word	0x003d0900
 8008680:	0800d0f4 	.word	0x0800d0f4

08008684 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008684:	b480      	push	{r7}
 8008686:	b083      	sub	sp, #12
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008690:	f003 0301 	and.w	r3, r3, #1
 8008694:	2b00      	cmp	r3, #0
 8008696:	d00a      	beq.n	80086ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	430a      	orrs	r2, r1
 80086ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b2:	f003 0302 	and.w	r3, r3, #2
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d00a      	beq.n	80086d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	430a      	orrs	r2, r1
 80086ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d4:	f003 0304 	and.w	r3, r3, #4
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d00a      	beq.n	80086f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	430a      	orrs	r2, r1
 80086f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f6:	f003 0308 	and.w	r3, r3, #8
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d00a      	beq.n	8008714 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	430a      	orrs	r2, r1
 8008712:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008718:	f003 0310 	and.w	r3, r3, #16
 800871c:	2b00      	cmp	r3, #0
 800871e:	d00a      	beq.n	8008736 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	689b      	ldr	r3, [r3, #8]
 8008726:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	430a      	orrs	r2, r1
 8008734:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800873a:	f003 0320 	and.w	r3, r3, #32
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00a      	beq.n	8008758 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	430a      	orrs	r2, r1
 8008756:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800875c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008760:	2b00      	cmp	r3, #0
 8008762:	d01a      	beq.n	800879a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	430a      	orrs	r2, r1
 8008778:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800877e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008782:	d10a      	bne.n	800879a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	430a      	orrs	r2, r1
 8008798:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800879e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d00a      	beq.n	80087bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	430a      	orrs	r2, r1
 80087ba:	605a      	str	r2, [r3, #4]
  }
}
 80087bc:	bf00      	nop
 80087be:	370c      	adds	r7, #12
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b086      	sub	sp, #24
 80087cc:	af02      	add	r7, sp, #8
 80087ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80087d8:	f7fa f812 	bl	8002800 <HAL_GetTick>
 80087dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f003 0308 	and.w	r3, r3, #8
 80087e8:	2b08      	cmp	r3, #8
 80087ea:	d10e      	bne.n	800880a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80087f0:	9300      	str	r3, [sp, #0]
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 f82f 	bl	800885e <UART_WaitOnFlagUntilTimeout>
 8008800:	4603      	mov	r3, r0
 8008802:	2b00      	cmp	r3, #0
 8008804:	d001      	beq.n	800880a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008806:	2303      	movs	r3, #3
 8008808:	e025      	b.n	8008856 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f003 0304 	and.w	r3, r3, #4
 8008814:	2b04      	cmp	r3, #4
 8008816:	d10e      	bne.n	8008836 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008818:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800881c:	9300      	str	r3, [sp, #0]
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2200      	movs	r2, #0
 8008822:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 f819 	bl	800885e <UART_WaitOnFlagUntilTimeout>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d001      	beq.n	8008836 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008832:	2303      	movs	r3, #3
 8008834:	e00f      	b.n	8008856 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2220      	movs	r2, #32
 800883a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2220      	movs	r2, #32
 8008842:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2200      	movs	r2, #0
 8008850:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008854:	2300      	movs	r3, #0
}
 8008856:	4618      	mov	r0, r3
 8008858:	3710      	adds	r7, #16
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}

0800885e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800885e:	b580      	push	{r7, lr}
 8008860:	b09c      	sub	sp, #112	; 0x70
 8008862:	af00      	add	r7, sp, #0
 8008864:	60f8      	str	r0, [r7, #12]
 8008866:	60b9      	str	r1, [r7, #8]
 8008868:	603b      	str	r3, [r7, #0]
 800886a:	4613      	mov	r3, r2
 800886c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800886e:	e0a9      	b.n	80089c4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008870:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008876:	f000 80a5 	beq.w	80089c4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800887a:	f7f9 ffc1 	bl	8002800 <HAL_GetTick>
 800887e:	4602      	mov	r2, r0
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	1ad3      	subs	r3, r2, r3
 8008884:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008886:	429a      	cmp	r2, r3
 8008888:	d302      	bcc.n	8008890 <UART_WaitOnFlagUntilTimeout+0x32>
 800888a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800888c:	2b00      	cmp	r3, #0
 800888e:	d140      	bne.n	8008912 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008898:	e853 3f00 	ldrex	r3, [r3]
 800889c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800889e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80088a4:	667b      	str	r3, [r7, #100]	; 0x64
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	461a      	mov	r2, r3
 80088ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80088ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088b0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80088b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80088b6:	e841 2300 	strex	r3, r2, [r1]
 80088ba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80088bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d1e6      	bne.n	8008890 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	3308      	adds	r3, #8
 80088c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088cc:	e853 3f00 	ldrex	r3, [r3]
 80088d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d4:	f023 0301 	bic.w	r3, r3, #1
 80088d8:	663b      	str	r3, [r7, #96]	; 0x60
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	3308      	adds	r3, #8
 80088e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80088e2:	64ba      	str	r2, [r7, #72]	; 0x48
 80088e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80088e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088ea:	e841 2300 	strex	r3, r2, [r1]
 80088ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80088f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d1e5      	bne.n	80088c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2220      	movs	r2, #32
 80088fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2220      	movs	r2, #32
 8008902:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2200      	movs	r2, #0
 800890a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800890e:	2303      	movs	r3, #3
 8008910:	e069      	b.n	80089e6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f003 0304 	and.w	r3, r3, #4
 800891c:	2b00      	cmp	r3, #0
 800891e:	d051      	beq.n	80089c4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	69db      	ldr	r3, [r3, #28]
 8008926:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800892a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800892e:	d149      	bne.n	80089c4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008938:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008942:	e853 3f00 	ldrex	r3, [r3]
 8008946:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800894e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	461a      	mov	r2, r3
 8008956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008958:	637b      	str	r3, [r7, #52]	; 0x34
 800895a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800895e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008960:	e841 2300 	strex	r3, r2, [r1]
 8008964:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008968:	2b00      	cmp	r3, #0
 800896a:	d1e6      	bne.n	800893a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	3308      	adds	r3, #8
 8008972:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	e853 3f00 	ldrex	r3, [r3]
 800897a:	613b      	str	r3, [r7, #16]
   return(result);
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	f023 0301 	bic.w	r3, r3, #1
 8008982:	66bb      	str	r3, [r7, #104]	; 0x68
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	3308      	adds	r3, #8
 800898a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800898c:	623a      	str	r2, [r7, #32]
 800898e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008990:	69f9      	ldr	r1, [r7, #28]
 8008992:	6a3a      	ldr	r2, [r7, #32]
 8008994:	e841 2300 	strex	r3, r2, [r1]
 8008998:	61bb      	str	r3, [r7, #24]
   return(result);
 800899a:	69bb      	ldr	r3, [r7, #24]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d1e5      	bne.n	800896c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2220      	movs	r2, #32
 80089a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2220      	movs	r2, #32
 80089ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2220      	movs	r2, #32
 80089b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2200      	movs	r2, #0
 80089bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80089c0:	2303      	movs	r3, #3
 80089c2:	e010      	b.n	80089e6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	69da      	ldr	r2, [r3, #28]
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	4013      	ands	r3, r2
 80089ce:	68ba      	ldr	r2, [r7, #8]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	bf0c      	ite	eq
 80089d4:	2301      	moveq	r3, #1
 80089d6:	2300      	movne	r3, #0
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	461a      	mov	r2, r3
 80089dc:	79fb      	ldrb	r3, [r7, #7]
 80089de:	429a      	cmp	r2, r3
 80089e0:	f43f af46 	beq.w	8008870 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80089e4:	2300      	movs	r3, #0
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3770      	adds	r7, #112	; 0x70
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80089ee:	b480      	push	{r7}
 80089f0:	b085      	sub	sp, #20
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d101      	bne.n	8008a04 <HAL_UARTEx_DisableFifoMode+0x16>
 8008a00:	2302      	movs	r3, #2
 8008a02:	e027      	b.n	8008a54 <HAL_UARTEx_DisableFifoMode+0x66>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2224      	movs	r2, #36	; 0x24
 8008a10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f022 0201 	bic.w	r2, r2, #1
 8008a2a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008a32:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	68fa      	ldr	r2, [r7, #12]
 8008a40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2220      	movs	r2, #32
 8008a46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008a52:	2300      	movs	r3, #0
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3714      	adds	r7, #20
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr

08008a60 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d101      	bne.n	8008a78 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008a74:	2302      	movs	r3, #2
 8008a76:	e02d      	b.n	8008ad4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2224      	movs	r2, #36	; 0x24
 8008a84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f022 0201 	bic.w	r2, r2, #1
 8008a9e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	683a      	ldr	r2, [r7, #0]
 8008ab0:	430a      	orrs	r2, r1
 8008ab2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 f84f 	bl	8008b58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	68fa      	ldr	r2, [r7, #12]
 8008ac0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2220      	movs	r2, #32
 8008ac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2200      	movs	r2, #0
 8008ace:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3710      	adds	r7, #16
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d101      	bne.n	8008af4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008af0:	2302      	movs	r3, #2
 8008af2:	e02d      	b.n	8008b50 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2201      	movs	r2, #1
 8008af8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2224      	movs	r2, #36	; 0x24
 8008b00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f022 0201 	bic.w	r2, r2, #1
 8008b1a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	683a      	ldr	r2, [r7, #0]
 8008b2c:	430a      	orrs	r2, r1
 8008b2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 f811 	bl	8008b58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	68fa      	ldr	r2, [r7, #12]
 8008b3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2220      	movs	r2, #32
 8008b42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008b4e:	2300      	movs	r3, #0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3710      	adds	r7, #16
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b085      	sub	sp, #20
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d108      	bne.n	8008b7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2201      	movs	r2, #1
 8008b74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008b78:	e031      	b.n	8008bde <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008b7a:	2310      	movs	r3, #16
 8008b7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008b7e:	2310      	movs	r3, #16
 8008b80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	0e5b      	lsrs	r3, r3, #25
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	f003 0307 	and.w	r3, r3, #7
 8008b90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	0f5b      	lsrs	r3, r3, #29
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	f003 0307 	and.w	r3, r3, #7
 8008ba0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ba2:	7bbb      	ldrb	r3, [r7, #14]
 8008ba4:	7b3a      	ldrb	r2, [r7, #12]
 8008ba6:	4911      	ldr	r1, [pc, #68]	; (8008bec <UARTEx_SetNbDataToProcess+0x94>)
 8008ba8:	5c8a      	ldrb	r2, [r1, r2]
 8008baa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008bae:	7b3a      	ldrb	r2, [r7, #12]
 8008bb0:	490f      	ldr	r1, [pc, #60]	; (8008bf0 <UARTEx_SetNbDataToProcess+0x98>)
 8008bb2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008bb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8008bb8:	b29a      	uxth	r2, r3
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008bc0:	7bfb      	ldrb	r3, [r7, #15]
 8008bc2:	7b7a      	ldrb	r2, [r7, #13]
 8008bc4:	4909      	ldr	r1, [pc, #36]	; (8008bec <UARTEx_SetNbDataToProcess+0x94>)
 8008bc6:	5c8a      	ldrb	r2, [r1, r2]
 8008bc8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008bcc:	7b7a      	ldrb	r2, [r7, #13]
 8008bce:	4908      	ldr	r1, [pc, #32]	; (8008bf0 <UARTEx_SetNbDataToProcess+0x98>)
 8008bd0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008bd2:	fb93 f3f2 	sdiv	r3, r3, r2
 8008bd6:	b29a      	uxth	r2, r3
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008bde:	bf00      	nop
 8008be0:	3714      	adds	r7, #20
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr
 8008bea:	bf00      	nop
 8008bec:	0800d10c 	.word	0x0800d10c
 8008bf0:	0800d114 	.word	0x0800d114

08008bf4 <__NVIC_SetPriority>:
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b083      	sub	sp, #12
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	6039      	str	r1, [r7, #0]
 8008bfe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008c00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	db0a      	blt.n	8008c1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	b2da      	uxtb	r2, r3
 8008c0c:	490c      	ldr	r1, [pc, #48]	; (8008c40 <__NVIC_SetPriority+0x4c>)
 8008c0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c12:	0112      	lsls	r2, r2, #4
 8008c14:	b2d2      	uxtb	r2, r2
 8008c16:	440b      	add	r3, r1
 8008c18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008c1c:	e00a      	b.n	8008c34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	b2da      	uxtb	r2, r3
 8008c22:	4908      	ldr	r1, [pc, #32]	; (8008c44 <__NVIC_SetPriority+0x50>)
 8008c24:	88fb      	ldrh	r3, [r7, #6]
 8008c26:	f003 030f 	and.w	r3, r3, #15
 8008c2a:	3b04      	subs	r3, #4
 8008c2c:	0112      	lsls	r2, r2, #4
 8008c2e:	b2d2      	uxtb	r2, r2
 8008c30:	440b      	add	r3, r1
 8008c32:	761a      	strb	r2, [r3, #24]
}
 8008c34:	bf00      	nop
 8008c36:	370c      	adds	r7, #12
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr
 8008c40:	e000e100 	.word	0xe000e100
 8008c44:	e000ed00 	.word	0xe000ed00

08008c48 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008c4c:	4b05      	ldr	r3, [pc, #20]	; (8008c64 <SysTick_Handler+0x1c>)
 8008c4e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008c50:	f002 f912 	bl	800ae78 <xTaskGetSchedulerState>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d001      	beq.n	8008c5e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008c5a:	f000 fd7d 	bl	8009758 <xPortSysTickHandler>
  }
}
 8008c5e:	bf00      	nop
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	e000e010 	.word	0xe000e010

08008c68 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008c6c:	2100      	movs	r1, #0
 8008c6e:	f06f 0004 	mvn.w	r0, #4
 8008c72:	f7ff ffbf 	bl	8008bf4 <__NVIC_SetPriority>
#endif
}
 8008c76:	bf00      	nop
 8008c78:	bd80      	pop	{r7, pc}
	...

08008c7c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008c7c:	b480      	push	{r7}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c82:	f3ef 8305 	mrs	r3, IPSR
 8008c86:	603b      	str	r3, [r7, #0]
  return(result);
 8008c88:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d003      	beq.n	8008c96 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008c8e:	f06f 0305 	mvn.w	r3, #5
 8008c92:	607b      	str	r3, [r7, #4]
 8008c94:	e00c      	b.n	8008cb0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008c96:	4b0a      	ldr	r3, [pc, #40]	; (8008cc0 <osKernelInitialize+0x44>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d105      	bne.n	8008caa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008c9e:	4b08      	ldr	r3, [pc, #32]	; (8008cc0 <osKernelInitialize+0x44>)
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	607b      	str	r3, [r7, #4]
 8008ca8:	e002      	b.n	8008cb0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008caa:	f04f 33ff 	mov.w	r3, #4294967295
 8008cae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008cb0:	687b      	ldr	r3, [r7, #4]
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	370c      	adds	r7, #12
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbc:	4770      	bx	lr
 8008cbe:	bf00      	nop
 8008cc0:	240004d8 	.word	0x240004d8

08008cc4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b082      	sub	sp, #8
 8008cc8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cca:	f3ef 8305 	mrs	r3, IPSR
 8008cce:	603b      	str	r3, [r7, #0]
  return(result);
 8008cd0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d003      	beq.n	8008cde <osKernelStart+0x1a>
    stat = osErrorISR;
 8008cd6:	f06f 0305 	mvn.w	r3, #5
 8008cda:	607b      	str	r3, [r7, #4]
 8008cdc:	e010      	b.n	8008d00 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008cde:	4b0b      	ldr	r3, [pc, #44]	; (8008d0c <osKernelStart+0x48>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d109      	bne.n	8008cfa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008ce6:	f7ff ffbf 	bl	8008c68 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008cea:	4b08      	ldr	r3, [pc, #32]	; (8008d0c <osKernelStart+0x48>)
 8008cec:	2202      	movs	r2, #2
 8008cee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008cf0:	f001 fc66 	bl	800a5c0 <vTaskStartScheduler>
      stat = osOK;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	607b      	str	r3, [r7, #4]
 8008cf8:	e002      	b.n	8008d00 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8008cfe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008d00:	687b      	ldr	r3, [r7, #4]
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3708      	adds	r7, #8
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	240004d8 	.word	0x240004d8

08008d10 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b08e      	sub	sp, #56	; 0x38
 8008d14:	af04      	add	r7, sp, #16
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	60b9      	str	r1, [r7, #8]
 8008d1a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d20:	f3ef 8305 	mrs	r3, IPSR
 8008d24:	617b      	str	r3, [r7, #20]
  return(result);
 8008d26:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d17e      	bne.n	8008e2a <osThreadNew+0x11a>
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d07b      	beq.n	8008e2a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008d32:	2380      	movs	r3, #128	; 0x80
 8008d34:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008d36:	2318      	movs	r3, #24
 8008d38:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8008d42:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d045      	beq.n	8008dd6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d002      	beq.n	8008d58 <osThreadNew+0x48>
        name = attr->name;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	699b      	ldr	r3, [r3, #24]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d002      	beq.n	8008d66 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	699b      	ldr	r3, [r3, #24]
 8008d64:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008d66:	69fb      	ldr	r3, [r7, #28]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d008      	beq.n	8008d7e <osThreadNew+0x6e>
 8008d6c:	69fb      	ldr	r3, [r7, #28]
 8008d6e:	2b38      	cmp	r3, #56	; 0x38
 8008d70:	d805      	bhi.n	8008d7e <osThreadNew+0x6e>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	f003 0301 	and.w	r3, r3, #1
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d001      	beq.n	8008d82 <osThreadNew+0x72>
        return (NULL);
 8008d7e:	2300      	movs	r3, #0
 8008d80:	e054      	b.n	8008e2c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	695b      	ldr	r3, [r3, #20]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d003      	beq.n	8008d92 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	695b      	ldr	r3, [r3, #20]
 8008d8e:	089b      	lsrs	r3, r3, #2
 8008d90:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	689b      	ldr	r3, [r3, #8]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d00e      	beq.n	8008db8 <osThreadNew+0xa8>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	68db      	ldr	r3, [r3, #12]
 8008d9e:	2bbb      	cmp	r3, #187	; 0xbb
 8008da0:	d90a      	bls.n	8008db8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d006      	beq.n	8008db8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	695b      	ldr	r3, [r3, #20]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d002      	beq.n	8008db8 <osThreadNew+0xa8>
        mem = 1;
 8008db2:	2301      	movs	r3, #1
 8008db4:	61bb      	str	r3, [r7, #24]
 8008db6:	e010      	b.n	8008dda <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d10c      	bne.n	8008dda <osThreadNew+0xca>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d108      	bne.n	8008dda <osThreadNew+0xca>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	691b      	ldr	r3, [r3, #16]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d104      	bne.n	8008dda <osThreadNew+0xca>
          mem = 0;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	61bb      	str	r3, [r7, #24]
 8008dd4:	e001      	b.n	8008dda <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008dda:	69bb      	ldr	r3, [r7, #24]
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d110      	bne.n	8008e02 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008de8:	9202      	str	r2, [sp, #8]
 8008dea:	9301      	str	r3, [sp, #4]
 8008dec:	69fb      	ldr	r3, [r7, #28]
 8008dee:	9300      	str	r3, [sp, #0]
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	6a3a      	ldr	r2, [r7, #32]
 8008df4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008df6:	68f8      	ldr	r0, [r7, #12]
 8008df8:	f001 fa2a 	bl	800a250 <xTaskCreateStatic>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	613b      	str	r3, [r7, #16]
 8008e00:	e013      	b.n	8008e2a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d110      	bne.n	8008e2a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008e08:	6a3b      	ldr	r3, [r7, #32]
 8008e0a:	b29a      	uxth	r2, r3
 8008e0c:	f107 0310 	add.w	r3, r7, #16
 8008e10:	9301      	str	r3, [sp, #4]
 8008e12:	69fb      	ldr	r3, [r7, #28]
 8008e14:	9300      	str	r3, [sp, #0]
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e1a:	68f8      	ldr	r0, [r7, #12]
 8008e1c:	f001 fa75 	bl	800a30a <xTaskCreate>
 8008e20:	4603      	mov	r3, r0
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d001      	beq.n	8008e2a <osThreadNew+0x11a>
            hTask = NULL;
 8008e26:	2300      	movs	r3, #0
 8008e28:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008e2a:	693b      	ldr	r3, [r7, #16]
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3728      	adds	r7, #40	; 0x28
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008e34:	b480      	push	{r7}
 8008e36:	b085      	sub	sp, #20
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	60b9      	str	r1, [r7, #8]
 8008e3e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	4a07      	ldr	r2, [pc, #28]	; (8008e60 <vApplicationGetIdleTaskMemory+0x2c>)
 8008e44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	4a06      	ldr	r2, [pc, #24]	; (8008e64 <vApplicationGetIdleTaskMemory+0x30>)
 8008e4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2280      	movs	r2, #128	; 0x80
 8008e50:	601a      	str	r2, [r3, #0]
}
 8008e52:	bf00      	nop
 8008e54:	3714      	adds	r7, #20
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr
 8008e5e:	bf00      	nop
 8008e60:	240004dc 	.word	0x240004dc
 8008e64:	24000598 	.word	0x24000598

08008e68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008e68:	b480      	push	{r7}
 8008e6a:	b085      	sub	sp, #20
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	60b9      	str	r1, [r7, #8]
 8008e72:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	4a07      	ldr	r2, [pc, #28]	; (8008e94 <vApplicationGetTimerTaskMemory+0x2c>)
 8008e78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	4a06      	ldr	r2, [pc, #24]	; (8008e98 <vApplicationGetTimerTaskMemory+0x30>)
 8008e7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e86:	601a      	str	r2, [r3, #0]
}
 8008e88:	bf00      	nop
 8008e8a:	3714      	adds	r7, #20
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr
 8008e94:	24000798 	.word	0x24000798
 8008e98:	24000854 	.word	0x24000854

08008e9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b08a      	sub	sp, #40	; 0x28
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008ea8:	f001 fbfa 	bl	800a6a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008eac:	4b5b      	ldr	r3, [pc, #364]	; (800901c <pvPortMalloc+0x180>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d101      	bne.n	8008eb8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008eb4:	f000 f920 	bl	80090f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008eb8:	4b59      	ldr	r3, [pc, #356]	; (8009020 <pvPortMalloc+0x184>)
 8008eba:	681a      	ldr	r2, [r3, #0]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	4013      	ands	r3, r2
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	f040 8093 	bne.w	8008fec <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d01d      	beq.n	8008f08 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008ecc:	2208      	movs	r2, #8
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	4413      	add	r3, r2
 8008ed2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f003 0307 	and.w	r3, r3, #7
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d014      	beq.n	8008f08 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f023 0307 	bic.w	r3, r3, #7
 8008ee4:	3308      	adds	r3, #8
 8008ee6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f003 0307 	and.w	r3, r3, #7
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d00a      	beq.n	8008f08 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef6:	f383 8811 	msr	BASEPRI, r3
 8008efa:	f3bf 8f6f 	isb	sy
 8008efe:	f3bf 8f4f 	dsb	sy
 8008f02:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008f04:	bf00      	nop
 8008f06:	e7fe      	b.n	8008f06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d06e      	beq.n	8008fec <pvPortMalloc+0x150>
 8008f0e:	4b45      	ldr	r3, [pc, #276]	; (8009024 <pvPortMalloc+0x188>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d869      	bhi.n	8008fec <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008f18:	4b43      	ldr	r3, [pc, #268]	; (8009028 <pvPortMalloc+0x18c>)
 8008f1a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008f1c:	4b42      	ldr	r3, [pc, #264]	; (8009028 <pvPortMalloc+0x18c>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f22:	e004      	b.n	8008f2e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f26:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d903      	bls.n	8008f40 <pvPortMalloc+0xa4>
 8008f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d1f1      	bne.n	8008f24 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008f40:	4b36      	ldr	r3, [pc, #216]	; (800901c <pvPortMalloc+0x180>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d050      	beq.n	8008fec <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008f4a:	6a3b      	ldr	r3, [r7, #32]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	2208      	movs	r2, #8
 8008f50:	4413      	add	r3, r2
 8008f52:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	6a3b      	ldr	r3, [r7, #32]
 8008f5a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5e:	685a      	ldr	r2, [r3, #4]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	1ad2      	subs	r2, r2, r3
 8008f64:	2308      	movs	r3, #8
 8008f66:	005b      	lsls	r3, r3, #1
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d91f      	bls.n	8008fac <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	4413      	add	r3, r2
 8008f72:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f74:	69bb      	ldr	r3, [r7, #24]
 8008f76:	f003 0307 	and.w	r3, r3, #7
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d00a      	beq.n	8008f94 <pvPortMalloc+0xf8>
	__asm volatile
 8008f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f82:	f383 8811 	msr	BASEPRI, r3
 8008f86:	f3bf 8f6f 	isb	sy
 8008f8a:	f3bf 8f4f 	dsb	sy
 8008f8e:	613b      	str	r3, [r7, #16]
}
 8008f90:	bf00      	nop
 8008f92:	e7fe      	b.n	8008f92 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f96:	685a      	ldr	r2, [r3, #4]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	1ad2      	subs	r2, r2, r3
 8008f9c:	69bb      	ldr	r3, [r7, #24]
 8008f9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008fa6:	69b8      	ldr	r0, [r7, #24]
 8008fa8:	f000 f908 	bl	80091bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008fac:	4b1d      	ldr	r3, [pc, #116]	; (8009024 <pvPortMalloc+0x188>)
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	1ad3      	subs	r3, r2, r3
 8008fb6:	4a1b      	ldr	r2, [pc, #108]	; (8009024 <pvPortMalloc+0x188>)
 8008fb8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008fba:	4b1a      	ldr	r3, [pc, #104]	; (8009024 <pvPortMalloc+0x188>)
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	4b1b      	ldr	r3, [pc, #108]	; (800902c <pvPortMalloc+0x190>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d203      	bcs.n	8008fce <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008fc6:	4b17      	ldr	r3, [pc, #92]	; (8009024 <pvPortMalloc+0x188>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a18      	ldr	r2, [pc, #96]	; (800902c <pvPortMalloc+0x190>)
 8008fcc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd0:	685a      	ldr	r2, [r3, #4]
 8008fd2:	4b13      	ldr	r3, [pc, #76]	; (8009020 <pvPortMalloc+0x184>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	431a      	orrs	r2, r3
 8008fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fde:	2200      	movs	r2, #0
 8008fe0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008fe2:	4b13      	ldr	r3, [pc, #76]	; (8009030 <pvPortMalloc+0x194>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	4a11      	ldr	r2, [pc, #68]	; (8009030 <pvPortMalloc+0x194>)
 8008fea:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008fec:	f001 fb66 	bl	800a6bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ff0:	69fb      	ldr	r3, [r7, #28]
 8008ff2:	f003 0307 	and.w	r3, r3, #7
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d00a      	beq.n	8009010 <pvPortMalloc+0x174>
	__asm volatile
 8008ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ffe:	f383 8811 	msr	BASEPRI, r3
 8009002:	f3bf 8f6f 	isb	sy
 8009006:	f3bf 8f4f 	dsb	sy
 800900a:	60fb      	str	r3, [r7, #12]
}
 800900c:	bf00      	nop
 800900e:	e7fe      	b.n	800900e <pvPortMalloc+0x172>
	return pvReturn;
 8009010:	69fb      	ldr	r3, [r7, #28]
}
 8009012:	4618      	mov	r0, r3
 8009014:	3728      	adds	r7, #40	; 0x28
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	2400485c 	.word	0x2400485c
 8009020:	24004870 	.word	0x24004870
 8009024:	24004860 	.word	0x24004860
 8009028:	24004854 	.word	0x24004854
 800902c:	24004864 	.word	0x24004864
 8009030:	24004868 	.word	0x24004868

08009034 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b086      	sub	sp, #24
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d04d      	beq.n	80090e2 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009046:	2308      	movs	r3, #8
 8009048:	425b      	negs	r3, r3
 800904a:	697a      	ldr	r2, [r7, #20]
 800904c:	4413      	add	r3, r2
 800904e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	685a      	ldr	r2, [r3, #4]
 8009058:	4b24      	ldr	r3, [pc, #144]	; (80090ec <vPortFree+0xb8>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4013      	ands	r3, r2
 800905e:	2b00      	cmp	r3, #0
 8009060:	d10a      	bne.n	8009078 <vPortFree+0x44>
	__asm volatile
 8009062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009066:	f383 8811 	msr	BASEPRI, r3
 800906a:	f3bf 8f6f 	isb	sy
 800906e:	f3bf 8f4f 	dsb	sy
 8009072:	60fb      	str	r3, [r7, #12]
}
 8009074:	bf00      	nop
 8009076:	e7fe      	b.n	8009076 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d00a      	beq.n	8009096 <vPortFree+0x62>
	__asm volatile
 8009080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009084:	f383 8811 	msr	BASEPRI, r3
 8009088:	f3bf 8f6f 	isb	sy
 800908c:	f3bf 8f4f 	dsb	sy
 8009090:	60bb      	str	r3, [r7, #8]
}
 8009092:	bf00      	nop
 8009094:	e7fe      	b.n	8009094 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	685a      	ldr	r2, [r3, #4]
 800909a:	4b14      	ldr	r3, [pc, #80]	; (80090ec <vPortFree+0xb8>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4013      	ands	r3, r2
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d01e      	beq.n	80090e2 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d11a      	bne.n	80090e2 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	685a      	ldr	r2, [r3, #4]
 80090b0:	4b0e      	ldr	r3, [pc, #56]	; (80090ec <vPortFree+0xb8>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	43db      	mvns	r3, r3
 80090b6:	401a      	ands	r2, r3
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80090bc:	f001 faf0 	bl	800a6a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	685a      	ldr	r2, [r3, #4]
 80090c4:	4b0a      	ldr	r3, [pc, #40]	; (80090f0 <vPortFree+0xbc>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4413      	add	r3, r2
 80090ca:	4a09      	ldr	r2, [pc, #36]	; (80090f0 <vPortFree+0xbc>)
 80090cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80090ce:	6938      	ldr	r0, [r7, #16]
 80090d0:	f000 f874 	bl	80091bc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80090d4:	4b07      	ldr	r3, [pc, #28]	; (80090f4 <vPortFree+0xc0>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	3301      	adds	r3, #1
 80090da:	4a06      	ldr	r2, [pc, #24]	; (80090f4 <vPortFree+0xc0>)
 80090dc:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80090de:	f001 faed 	bl	800a6bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80090e2:	bf00      	nop
 80090e4:	3718      	adds	r7, #24
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	24004870 	.word	0x24004870
 80090f0:	24004860 	.word	0x24004860
 80090f4:	2400486c 	.word	0x2400486c

080090f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80090f8:	b480      	push	{r7}
 80090fa:	b085      	sub	sp, #20
 80090fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80090fe:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009102:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009104:	4b27      	ldr	r3, [pc, #156]	; (80091a4 <prvHeapInit+0xac>)
 8009106:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f003 0307 	and.w	r3, r3, #7
 800910e:	2b00      	cmp	r3, #0
 8009110:	d00c      	beq.n	800912c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	3307      	adds	r3, #7
 8009116:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f023 0307 	bic.w	r3, r3, #7
 800911e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009120:	68ba      	ldr	r2, [r7, #8]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	1ad3      	subs	r3, r2, r3
 8009126:	4a1f      	ldr	r2, [pc, #124]	; (80091a4 <prvHeapInit+0xac>)
 8009128:	4413      	add	r3, r2
 800912a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009130:	4a1d      	ldr	r2, [pc, #116]	; (80091a8 <prvHeapInit+0xb0>)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009136:	4b1c      	ldr	r3, [pc, #112]	; (80091a8 <prvHeapInit+0xb0>)
 8009138:	2200      	movs	r2, #0
 800913a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	68ba      	ldr	r2, [r7, #8]
 8009140:	4413      	add	r3, r2
 8009142:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009144:	2208      	movs	r2, #8
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	1a9b      	subs	r3, r3, r2
 800914a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f023 0307 	bic.w	r3, r3, #7
 8009152:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	4a15      	ldr	r2, [pc, #84]	; (80091ac <prvHeapInit+0xb4>)
 8009158:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800915a:	4b14      	ldr	r3, [pc, #80]	; (80091ac <prvHeapInit+0xb4>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2200      	movs	r2, #0
 8009160:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009162:	4b12      	ldr	r3, [pc, #72]	; (80091ac <prvHeapInit+0xb4>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	2200      	movs	r2, #0
 8009168:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	68fa      	ldr	r2, [r7, #12]
 8009172:	1ad2      	subs	r2, r2, r3
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009178:	4b0c      	ldr	r3, [pc, #48]	; (80091ac <prvHeapInit+0xb4>)
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	4a0a      	ldr	r2, [pc, #40]	; (80091b0 <prvHeapInit+0xb8>)
 8009186:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	4a09      	ldr	r2, [pc, #36]	; (80091b4 <prvHeapInit+0xbc>)
 800918e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009190:	4b09      	ldr	r3, [pc, #36]	; (80091b8 <prvHeapInit+0xc0>)
 8009192:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009196:	601a      	str	r2, [r3, #0]
}
 8009198:	bf00      	nop
 800919a:	3714      	adds	r7, #20
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr
 80091a4:	24000c54 	.word	0x24000c54
 80091a8:	24004854 	.word	0x24004854
 80091ac:	2400485c 	.word	0x2400485c
 80091b0:	24004864 	.word	0x24004864
 80091b4:	24004860 	.word	0x24004860
 80091b8:	24004870 	.word	0x24004870

080091bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80091bc:	b480      	push	{r7}
 80091be:	b085      	sub	sp, #20
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80091c4:	4b28      	ldr	r3, [pc, #160]	; (8009268 <prvInsertBlockIntoFreeList+0xac>)
 80091c6:	60fb      	str	r3, [r7, #12]
 80091c8:	e002      	b.n	80091d0 <prvInsertBlockIntoFreeList+0x14>
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	60fb      	str	r3, [r7, #12]
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d8f7      	bhi.n	80091ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	68ba      	ldr	r2, [r7, #8]
 80091e4:	4413      	add	r3, r2
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d108      	bne.n	80091fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	685a      	ldr	r2, [r3, #4]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	441a      	add	r2, r3
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	68ba      	ldr	r2, [r7, #8]
 8009208:	441a      	add	r2, r3
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	429a      	cmp	r2, r3
 8009210:	d118      	bne.n	8009244 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681a      	ldr	r2, [r3, #0]
 8009216:	4b15      	ldr	r3, [pc, #84]	; (800926c <prvInsertBlockIntoFreeList+0xb0>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	429a      	cmp	r2, r3
 800921c:	d00d      	beq.n	800923a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	685a      	ldr	r2, [r3, #4]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	441a      	add	r2, r3
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	601a      	str	r2, [r3, #0]
 8009238:	e008      	b.n	800924c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800923a:	4b0c      	ldr	r3, [pc, #48]	; (800926c <prvInsertBlockIntoFreeList+0xb0>)
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	601a      	str	r2, [r3, #0]
 8009242:	e003      	b.n	800924c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800924c:	68fa      	ldr	r2, [r7, #12]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	429a      	cmp	r2, r3
 8009252:	d002      	beq.n	800925a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800925a:	bf00      	nop
 800925c:	3714      	adds	r7, #20
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr
 8009266:	bf00      	nop
 8009268:	24004854 	.word	0x24004854
 800926c:	2400485c 	.word	0x2400485c

08009270 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009270:	b480      	push	{r7}
 8009272:	b083      	sub	sp, #12
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f103 0208 	add.w	r2, r3, #8
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f04f 32ff 	mov.w	r2, #4294967295
 8009288:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f103 0208 	add.w	r2, r3, #8
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f103 0208 	add.w	r2, r3, #8
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2200      	movs	r2, #0
 80092a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80092a4:	bf00      	nop
 80092a6:	370c      	adds	r7, #12
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr

080092b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80092b0:	b480      	push	{r7}
 80092b2:	b083      	sub	sp, #12
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80092be:	bf00      	nop
 80092c0:	370c      	adds	r7, #12
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr

080092ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80092ca:	b480      	push	{r7}
 80092cc:	b085      	sub	sp, #20
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
 80092d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	68fa      	ldr	r2, [r7, #12]
 80092de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	689a      	ldr	r2, [r3, #8]
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	683a      	ldr	r2, [r7, #0]
 80092ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	683a      	ldr	r2, [r7, #0]
 80092f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	687a      	ldr	r2, [r7, #4]
 80092fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	1c5a      	adds	r2, r3, #1
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	601a      	str	r2, [r3, #0]
}
 8009306:	bf00      	nop
 8009308:	3714      	adds	r7, #20
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr

08009312 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009312:	b480      	push	{r7}
 8009314:	b085      	sub	sp, #20
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
 800931a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009328:	d103      	bne.n	8009332 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	691b      	ldr	r3, [r3, #16]
 800932e:	60fb      	str	r3, [r7, #12]
 8009330:	e00c      	b.n	800934c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	3308      	adds	r3, #8
 8009336:	60fb      	str	r3, [r7, #12]
 8009338:	e002      	b.n	8009340 <vListInsert+0x2e>
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	60fb      	str	r3, [r7, #12]
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	68ba      	ldr	r2, [r7, #8]
 8009348:	429a      	cmp	r2, r3
 800934a:	d2f6      	bcs.n	800933a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	685a      	ldr	r2, [r3, #4]
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	683a      	ldr	r2, [r7, #0]
 800935a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	68fa      	ldr	r2, [r7, #12]
 8009360:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	683a      	ldr	r2, [r7, #0]
 8009366:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	687a      	ldr	r2, [r7, #4]
 800936c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	1c5a      	adds	r2, r3, #1
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	601a      	str	r2, [r3, #0]
}
 8009378:	bf00      	nop
 800937a:	3714      	adds	r7, #20
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr

08009384 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009384:	b480      	push	{r7}
 8009386:	b085      	sub	sp, #20
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	691b      	ldr	r3, [r3, #16]
 8009390:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	6892      	ldr	r2, [r2, #8]
 800939a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	6852      	ldr	r2, [r2, #4]
 80093a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	687a      	ldr	r2, [r7, #4]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d103      	bne.n	80093b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	689a      	ldr	r2, [r3, #8]
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	1e5a      	subs	r2, r3, #1
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3714      	adds	r7, #20
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr

080093d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80093d8:	b480      	push	{r7}
 80093da:	b085      	sub	sp, #20
 80093dc:	af00      	add	r7, sp, #0
 80093de:	60f8      	str	r0, [r7, #12]
 80093e0:	60b9      	str	r1, [r7, #8]
 80093e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	3b04      	subs	r3, #4
 80093e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80093f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	3b04      	subs	r3, #4
 80093f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	f023 0201 	bic.w	r2, r3, #1
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	3b04      	subs	r3, #4
 8009406:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009408:	4a0c      	ldr	r2, [pc, #48]	; (800943c <pxPortInitialiseStack+0x64>)
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	3b14      	subs	r3, #20
 8009412:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	3b04      	subs	r3, #4
 800941e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f06f 0202 	mvn.w	r2, #2
 8009426:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	3b20      	subs	r3, #32
 800942c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800942e:	68fb      	ldr	r3, [r7, #12]
}
 8009430:	4618      	mov	r0, r3
 8009432:	3714      	adds	r7, #20
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr
 800943c:	08009441 	.word	0x08009441

08009440 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009440:	b480      	push	{r7}
 8009442:	b085      	sub	sp, #20
 8009444:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009446:	2300      	movs	r3, #0
 8009448:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800944a:	4b12      	ldr	r3, [pc, #72]	; (8009494 <prvTaskExitError+0x54>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009452:	d00a      	beq.n	800946a <prvTaskExitError+0x2a>
	__asm volatile
 8009454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009458:	f383 8811 	msr	BASEPRI, r3
 800945c:	f3bf 8f6f 	isb	sy
 8009460:	f3bf 8f4f 	dsb	sy
 8009464:	60fb      	str	r3, [r7, #12]
}
 8009466:	bf00      	nop
 8009468:	e7fe      	b.n	8009468 <prvTaskExitError+0x28>
	__asm volatile
 800946a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800946e:	f383 8811 	msr	BASEPRI, r3
 8009472:	f3bf 8f6f 	isb	sy
 8009476:	f3bf 8f4f 	dsb	sy
 800947a:	60bb      	str	r3, [r7, #8]
}
 800947c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800947e:	bf00      	nop
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d0fc      	beq.n	8009480 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009486:	bf00      	nop
 8009488:	bf00      	nop
 800948a:	3714      	adds	r7, #20
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr
 8009494:	24000018 	.word	0x24000018
	...

080094a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80094a0:	4b07      	ldr	r3, [pc, #28]	; (80094c0 <pxCurrentTCBConst2>)
 80094a2:	6819      	ldr	r1, [r3, #0]
 80094a4:	6808      	ldr	r0, [r1, #0]
 80094a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094aa:	f380 8809 	msr	PSP, r0
 80094ae:	f3bf 8f6f 	isb	sy
 80094b2:	f04f 0000 	mov.w	r0, #0
 80094b6:	f380 8811 	msr	BASEPRI, r0
 80094ba:	4770      	bx	lr
 80094bc:	f3af 8000 	nop.w

080094c0 <pxCurrentTCBConst2>:
 80094c0:	240048bc 	.word	0x240048bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80094c4:	bf00      	nop
 80094c6:	bf00      	nop

080094c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80094c8:	4808      	ldr	r0, [pc, #32]	; (80094ec <prvPortStartFirstTask+0x24>)
 80094ca:	6800      	ldr	r0, [r0, #0]
 80094cc:	6800      	ldr	r0, [r0, #0]
 80094ce:	f380 8808 	msr	MSP, r0
 80094d2:	f04f 0000 	mov.w	r0, #0
 80094d6:	f380 8814 	msr	CONTROL, r0
 80094da:	b662      	cpsie	i
 80094dc:	b661      	cpsie	f
 80094de:	f3bf 8f4f 	dsb	sy
 80094e2:	f3bf 8f6f 	isb	sy
 80094e6:	df00      	svc	0
 80094e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80094ea:	bf00      	nop
 80094ec:	e000ed08 	.word	0xe000ed08

080094f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b086      	sub	sp, #24
 80094f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80094f6:	4b46      	ldr	r3, [pc, #280]	; (8009610 <xPortStartScheduler+0x120>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a46      	ldr	r2, [pc, #280]	; (8009614 <xPortStartScheduler+0x124>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d10a      	bne.n	8009516 <xPortStartScheduler+0x26>
	__asm volatile
 8009500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009504:	f383 8811 	msr	BASEPRI, r3
 8009508:	f3bf 8f6f 	isb	sy
 800950c:	f3bf 8f4f 	dsb	sy
 8009510:	613b      	str	r3, [r7, #16]
}
 8009512:	bf00      	nop
 8009514:	e7fe      	b.n	8009514 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009516:	4b3e      	ldr	r3, [pc, #248]	; (8009610 <xPortStartScheduler+0x120>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a3f      	ldr	r2, [pc, #252]	; (8009618 <xPortStartScheduler+0x128>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d10a      	bne.n	8009536 <xPortStartScheduler+0x46>
	__asm volatile
 8009520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009524:	f383 8811 	msr	BASEPRI, r3
 8009528:	f3bf 8f6f 	isb	sy
 800952c:	f3bf 8f4f 	dsb	sy
 8009530:	60fb      	str	r3, [r7, #12]
}
 8009532:	bf00      	nop
 8009534:	e7fe      	b.n	8009534 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009536:	4b39      	ldr	r3, [pc, #228]	; (800961c <xPortStartScheduler+0x12c>)
 8009538:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	781b      	ldrb	r3, [r3, #0]
 800953e:	b2db      	uxtb	r3, r3
 8009540:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	22ff      	movs	r2, #255	; 0xff
 8009546:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	b2db      	uxtb	r3, r3
 800954e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009550:	78fb      	ldrb	r3, [r7, #3]
 8009552:	b2db      	uxtb	r3, r3
 8009554:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009558:	b2da      	uxtb	r2, r3
 800955a:	4b31      	ldr	r3, [pc, #196]	; (8009620 <xPortStartScheduler+0x130>)
 800955c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800955e:	4b31      	ldr	r3, [pc, #196]	; (8009624 <xPortStartScheduler+0x134>)
 8009560:	2207      	movs	r2, #7
 8009562:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009564:	e009      	b.n	800957a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009566:	4b2f      	ldr	r3, [pc, #188]	; (8009624 <xPortStartScheduler+0x134>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	3b01      	subs	r3, #1
 800956c:	4a2d      	ldr	r2, [pc, #180]	; (8009624 <xPortStartScheduler+0x134>)
 800956e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009570:	78fb      	ldrb	r3, [r7, #3]
 8009572:	b2db      	uxtb	r3, r3
 8009574:	005b      	lsls	r3, r3, #1
 8009576:	b2db      	uxtb	r3, r3
 8009578:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800957a:	78fb      	ldrb	r3, [r7, #3]
 800957c:	b2db      	uxtb	r3, r3
 800957e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009582:	2b80      	cmp	r3, #128	; 0x80
 8009584:	d0ef      	beq.n	8009566 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009586:	4b27      	ldr	r3, [pc, #156]	; (8009624 <xPortStartScheduler+0x134>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f1c3 0307 	rsb	r3, r3, #7
 800958e:	2b04      	cmp	r3, #4
 8009590:	d00a      	beq.n	80095a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009596:	f383 8811 	msr	BASEPRI, r3
 800959a:	f3bf 8f6f 	isb	sy
 800959e:	f3bf 8f4f 	dsb	sy
 80095a2:	60bb      	str	r3, [r7, #8]
}
 80095a4:	bf00      	nop
 80095a6:	e7fe      	b.n	80095a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80095a8:	4b1e      	ldr	r3, [pc, #120]	; (8009624 <xPortStartScheduler+0x134>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	021b      	lsls	r3, r3, #8
 80095ae:	4a1d      	ldr	r2, [pc, #116]	; (8009624 <xPortStartScheduler+0x134>)
 80095b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80095b2:	4b1c      	ldr	r3, [pc, #112]	; (8009624 <xPortStartScheduler+0x134>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80095ba:	4a1a      	ldr	r2, [pc, #104]	; (8009624 <xPortStartScheduler+0x134>)
 80095bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	b2da      	uxtb	r2, r3
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80095c6:	4b18      	ldr	r3, [pc, #96]	; (8009628 <xPortStartScheduler+0x138>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a17      	ldr	r2, [pc, #92]	; (8009628 <xPortStartScheduler+0x138>)
 80095cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80095d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80095d2:	4b15      	ldr	r3, [pc, #84]	; (8009628 <xPortStartScheduler+0x138>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4a14      	ldr	r2, [pc, #80]	; (8009628 <xPortStartScheduler+0x138>)
 80095d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80095dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80095de:	f000 f8dd 	bl	800979c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80095e2:	4b12      	ldr	r3, [pc, #72]	; (800962c <xPortStartScheduler+0x13c>)
 80095e4:	2200      	movs	r2, #0
 80095e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80095e8:	f000 f8fc 	bl	80097e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80095ec:	4b10      	ldr	r3, [pc, #64]	; (8009630 <xPortStartScheduler+0x140>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a0f      	ldr	r2, [pc, #60]	; (8009630 <xPortStartScheduler+0x140>)
 80095f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80095f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80095f8:	f7ff ff66 	bl	80094c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80095fc:	f001 f9c6 	bl	800a98c <vTaskSwitchContext>
	prvTaskExitError();
 8009600:	f7ff ff1e 	bl	8009440 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009604:	2300      	movs	r3, #0
}
 8009606:	4618      	mov	r0, r3
 8009608:	3718      	adds	r7, #24
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
 800960e:	bf00      	nop
 8009610:	e000ed00 	.word	0xe000ed00
 8009614:	410fc271 	.word	0x410fc271
 8009618:	410fc270 	.word	0x410fc270
 800961c:	e000e400 	.word	0xe000e400
 8009620:	24004874 	.word	0x24004874
 8009624:	24004878 	.word	0x24004878
 8009628:	e000ed20 	.word	0xe000ed20
 800962c:	24000018 	.word	0x24000018
 8009630:	e000ef34 	.word	0xe000ef34

08009634 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009634:	b480      	push	{r7}
 8009636:	b083      	sub	sp, #12
 8009638:	af00      	add	r7, sp, #0
	__asm volatile
 800963a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800963e:	f383 8811 	msr	BASEPRI, r3
 8009642:	f3bf 8f6f 	isb	sy
 8009646:	f3bf 8f4f 	dsb	sy
 800964a:	607b      	str	r3, [r7, #4]
}
 800964c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800964e:	4b0f      	ldr	r3, [pc, #60]	; (800968c <vPortEnterCritical+0x58>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	3301      	adds	r3, #1
 8009654:	4a0d      	ldr	r2, [pc, #52]	; (800968c <vPortEnterCritical+0x58>)
 8009656:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009658:	4b0c      	ldr	r3, [pc, #48]	; (800968c <vPortEnterCritical+0x58>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	2b01      	cmp	r3, #1
 800965e:	d10f      	bne.n	8009680 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009660:	4b0b      	ldr	r3, [pc, #44]	; (8009690 <vPortEnterCritical+0x5c>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	b2db      	uxtb	r3, r3
 8009666:	2b00      	cmp	r3, #0
 8009668:	d00a      	beq.n	8009680 <vPortEnterCritical+0x4c>
	__asm volatile
 800966a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800966e:	f383 8811 	msr	BASEPRI, r3
 8009672:	f3bf 8f6f 	isb	sy
 8009676:	f3bf 8f4f 	dsb	sy
 800967a:	603b      	str	r3, [r7, #0]
}
 800967c:	bf00      	nop
 800967e:	e7fe      	b.n	800967e <vPortEnterCritical+0x4a>
	}
}
 8009680:	bf00      	nop
 8009682:	370c      	adds	r7, #12
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr
 800968c:	24000018 	.word	0x24000018
 8009690:	e000ed04 	.word	0xe000ed04

08009694 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800969a:	4b12      	ldr	r3, [pc, #72]	; (80096e4 <vPortExitCritical+0x50>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d10a      	bne.n	80096b8 <vPortExitCritical+0x24>
	__asm volatile
 80096a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a6:	f383 8811 	msr	BASEPRI, r3
 80096aa:	f3bf 8f6f 	isb	sy
 80096ae:	f3bf 8f4f 	dsb	sy
 80096b2:	607b      	str	r3, [r7, #4]
}
 80096b4:	bf00      	nop
 80096b6:	e7fe      	b.n	80096b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80096b8:	4b0a      	ldr	r3, [pc, #40]	; (80096e4 <vPortExitCritical+0x50>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	3b01      	subs	r3, #1
 80096be:	4a09      	ldr	r2, [pc, #36]	; (80096e4 <vPortExitCritical+0x50>)
 80096c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80096c2:	4b08      	ldr	r3, [pc, #32]	; (80096e4 <vPortExitCritical+0x50>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d105      	bne.n	80096d6 <vPortExitCritical+0x42>
 80096ca:	2300      	movs	r3, #0
 80096cc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80096d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80096d6:	bf00      	nop
 80096d8:	370c      	adds	r7, #12
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr
 80096e2:	bf00      	nop
 80096e4:	24000018 	.word	0x24000018
	...

080096f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80096f0:	f3ef 8009 	mrs	r0, PSP
 80096f4:	f3bf 8f6f 	isb	sy
 80096f8:	4b15      	ldr	r3, [pc, #84]	; (8009750 <pxCurrentTCBConst>)
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	f01e 0f10 	tst.w	lr, #16
 8009700:	bf08      	it	eq
 8009702:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009706:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800970a:	6010      	str	r0, [r2, #0]
 800970c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009710:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009714:	f380 8811 	msr	BASEPRI, r0
 8009718:	f3bf 8f4f 	dsb	sy
 800971c:	f3bf 8f6f 	isb	sy
 8009720:	f001 f934 	bl	800a98c <vTaskSwitchContext>
 8009724:	f04f 0000 	mov.w	r0, #0
 8009728:	f380 8811 	msr	BASEPRI, r0
 800972c:	bc09      	pop	{r0, r3}
 800972e:	6819      	ldr	r1, [r3, #0]
 8009730:	6808      	ldr	r0, [r1, #0]
 8009732:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009736:	f01e 0f10 	tst.w	lr, #16
 800973a:	bf08      	it	eq
 800973c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009740:	f380 8809 	msr	PSP, r0
 8009744:	f3bf 8f6f 	isb	sy
 8009748:	4770      	bx	lr
 800974a:	bf00      	nop
 800974c:	f3af 8000 	nop.w

08009750 <pxCurrentTCBConst>:
 8009750:	240048bc 	.word	0x240048bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009754:	bf00      	nop
 8009756:	bf00      	nop

08009758 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
	__asm volatile
 800975e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009762:	f383 8811 	msr	BASEPRI, r3
 8009766:	f3bf 8f6f 	isb	sy
 800976a:	f3bf 8f4f 	dsb	sy
 800976e:	607b      	str	r3, [r7, #4]
}
 8009770:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009772:	f001 f851 	bl	800a818 <xTaskIncrementTick>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d003      	beq.n	8009784 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800977c:	4b06      	ldr	r3, [pc, #24]	; (8009798 <xPortSysTickHandler+0x40>)
 800977e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009782:	601a      	str	r2, [r3, #0]
 8009784:	2300      	movs	r3, #0
 8009786:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	f383 8811 	msr	BASEPRI, r3
}
 800978e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009790:	bf00      	nop
 8009792:	3708      	adds	r7, #8
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}
 8009798:	e000ed04 	.word	0xe000ed04

0800979c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800979c:	b480      	push	{r7}
 800979e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80097a0:	4b0b      	ldr	r3, [pc, #44]	; (80097d0 <vPortSetupTimerInterrupt+0x34>)
 80097a2:	2200      	movs	r2, #0
 80097a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80097a6:	4b0b      	ldr	r3, [pc, #44]	; (80097d4 <vPortSetupTimerInterrupt+0x38>)
 80097a8:	2200      	movs	r2, #0
 80097aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80097ac:	4b0a      	ldr	r3, [pc, #40]	; (80097d8 <vPortSetupTimerInterrupt+0x3c>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a0a      	ldr	r2, [pc, #40]	; (80097dc <vPortSetupTimerInterrupt+0x40>)
 80097b2:	fba2 2303 	umull	r2, r3, r2, r3
 80097b6:	099b      	lsrs	r3, r3, #6
 80097b8:	4a09      	ldr	r2, [pc, #36]	; (80097e0 <vPortSetupTimerInterrupt+0x44>)
 80097ba:	3b01      	subs	r3, #1
 80097bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80097be:	4b04      	ldr	r3, [pc, #16]	; (80097d0 <vPortSetupTimerInterrupt+0x34>)
 80097c0:	2207      	movs	r2, #7
 80097c2:	601a      	str	r2, [r3, #0]
}
 80097c4:	bf00      	nop
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr
 80097ce:	bf00      	nop
 80097d0:	e000e010 	.word	0xe000e010
 80097d4:	e000e018 	.word	0xe000e018
 80097d8:	24000000 	.word	0x24000000
 80097dc:	10624dd3 	.word	0x10624dd3
 80097e0:	e000e014 	.word	0xe000e014

080097e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80097e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80097f4 <vPortEnableVFP+0x10>
 80097e8:	6801      	ldr	r1, [r0, #0]
 80097ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80097ee:	6001      	str	r1, [r0, #0]
 80097f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80097f2:	bf00      	nop
 80097f4:	e000ed88 	.word	0xe000ed88

080097f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80097f8:	b480      	push	{r7}
 80097fa:	b085      	sub	sp, #20
 80097fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80097fe:	f3ef 8305 	mrs	r3, IPSR
 8009802:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2b0f      	cmp	r3, #15
 8009808:	d914      	bls.n	8009834 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800980a:	4a17      	ldr	r2, [pc, #92]	; (8009868 <vPortValidateInterruptPriority+0x70>)
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	4413      	add	r3, r2
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009814:	4b15      	ldr	r3, [pc, #84]	; (800986c <vPortValidateInterruptPriority+0x74>)
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	7afa      	ldrb	r2, [r7, #11]
 800981a:	429a      	cmp	r2, r3
 800981c:	d20a      	bcs.n	8009834 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800981e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009822:	f383 8811 	msr	BASEPRI, r3
 8009826:	f3bf 8f6f 	isb	sy
 800982a:	f3bf 8f4f 	dsb	sy
 800982e:	607b      	str	r3, [r7, #4]
}
 8009830:	bf00      	nop
 8009832:	e7fe      	b.n	8009832 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009834:	4b0e      	ldr	r3, [pc, #56]	; (8009870 <vPortValidateInterruptPriority+0x78>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800983c:	4b0d      	ldr	r3, [pc, #52]	; (8009874 <vPortValidateInterruptPriority+0x7c>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	429a      	cmp	r2, r3
 8009842:	d90a      	bls.n	800985a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009848:	f383 8811 	msr	BASEPRI, r3
 800984c:	f3bf 8f6f 	isb	sy
 8009850:	f3bf 8f4f 	dsb	sy
 8009854:	603b      	str	r3, [r7, #0]
}
 8009856:	bf00      	nop
 8009858:	e7fe      	b.n	8009858 <vPortValidateInterruptPriority+0x60>
	}
 800985a:	bf00      	nop
 800985c:	3714      	adds	r7, #20
 800985e:	46bd      	mov	sp, r7
 8009860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009864:	4770      	bx	lr
 8009866:	bf00      	nop
 8009868:	e000e3f0 	.word	0xe000e3f0
 800986c:	24004874 	.word	0x24004874
 8009870:	e000ed0c 	.word	0xe000ed0c
 8009874:	24004878 	.word	0x24004878

08009878 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d10a      	bne.n	80098a2 <xQueueGenericReset+0x2a>
	__asm volatile
 800988c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009890:	f383 8811 	msr	BASEPRI, r3
 8009894:	f3bf 8f6f 	isb	sy
 8009898:	f3bf 8f4f 	dsb	sy
 800989c:	60bb      	str	r3, [r7, #8]
}
 800989e:	bf00      	nop
 80098a0:	e7fe      	b.n	80098a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80098a2:	f7ff fec7 	bl	8009634 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098ae:	68f9      	ldr	r1, [r7, #12]
 80098b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80098b2:	fb01 f303 	mul.w	r3, r1, r3
 80098b6:	441a      	add	r2, r3
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2200      	movs	r2, #0
 80098c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098d2:	3b01      	subs	r3, #1
 80098d4:	68f9      	ldr	r1, [r7, #12]
 80098d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80098d8:	fb01 f303 	mul.w	r3, r1, r3
 80098dc:	441a      	add	r2, r3
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	22ff      	movs	r2, #255	; 0xff
 80098e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	22ff      	movs	r2, #255	; 0xff
 80098ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d114      	bne.n	8009922 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	691b      	ldr	r3, [r3, #16]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d01a      	beq.n	8009936 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	3310      	adds	r3, #16
 8009904:	4618      	mov	r0, r3
 8009906:	f001 f8f5 	bl	800aaf4 <xTaskRemoveFromEventList>
 800990a:	4603      	mov	r3, r0
 800990c:	2b00      	cmp	r3, #0
 800990e:	d012      	beq.n	8009936 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009910:	4b0c      	ldr	r3, [pc, #48]	; (8009944 <xQueueGenericReset+0xcc>)
 8009912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009916:	601a      	str	r2, [r3, #0]
 8009918:	f3bf 8f4f 	dsb	sy
 800991c:	f3bf 8f6f 	isb	sy
 8009920:	e009      	b.n	8009936 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	3310      	adds	r3, #16
 8009926:	4618      	mov	r0, r3
 8009928:	f7ff fca2 	bl	8009270 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	3324      	adds	r3, #36	; 0x24
 8009930:	4618      	mov	r0, r3
 8009932:	f7ff fc9d 	bl	8009270 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009936:	f7ff fead 	bl	8009694 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800993a:	2301      	movs	r3, #1
}
 800993c:	4618      	mov	r0, r3
 800993e:	3710      	adds	r7, #16
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}
 8009944:	e000ed04 	.word	0xe000ed04

08009948 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009948:	b580      	push	{r7, lr}
 800994a:	b08e      	sub	sp, #56	; 0x38
 800994c:	af02      	add	r7, sp, #8
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	607a      	str	r2, [r7, #4]
 8009954:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d10a      	bne.n	8009972 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800995c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009960:	f383 8811 	msr	BASEPRI, r3
 8009964:	f3bf 8f6f 	isb	sy
 8009968:	f3bf 8f4f 	dsb	sy
 800996c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800996e:	bf00      	nop
 8009970:	e7fe      	b.n	8009970 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d10a      	bne.n	800998e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997c:	f383 8811 	msr	BASEPRI, r3
 8009980:	f3bf 8f6f 	isb	sy
 8009984:	f3bf 8f4f 	dsb	sy
 8009988:	627b      	str	r3, [r7, #36]	; 0x24
}
 800998a:	bf00      	nop
 800998c:	e7fe      	b.n	800998c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d002      	beq.n	800999a <xQueueGenericCreateStatic+0x52>
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d001      	beq.n	800999e <xQueueGenericCreateStatic+0x56>
 800999a:	2301      	movs	r3, #1
 800999c:	e000      	b.n	80099a0 <xQueueGenericCreateStatic+0x58>
 800999e:	2300      	movs	r3, #0
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d10a      	bne.n	80099ba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80099a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a8:	f383 8811 	msr	BASEPRI, r3
 80099ac:	f3bf 8f6f 	isb	sy
 80099b0:	f3bf 8f4f 	dsb	sy
 80099b4:	623b      	str	r3, [r7, #32]
}
 80099b6:	bf00      	nop
 80099b8:	e7fe      	b.n	80099b8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d102      	bne.n	80099c6 <xQueueGenericCreateStatic+0x7e>
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d101      	bne.n	80099ca <xQueueGenericCreateStatic+0x82>
 80099c6:	2301      	movs	r3, #1
 80099c8:	e000      	b.n	80099cc <xQueueGenericCreateStatic+0x84>
 80099ca:	2300      	movs	r3, #0
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d10a      	bne.n	80099e6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80099d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d4:	f383 8811 	msr	BASEPRI, r3
 80099d8:	f3bf 8f6f 	isb	sy
 80099dc:	f3bf 8f4f 	dsb	sy
 80099e0:	61fb      	str	r3, [r7, #28]
}
 80099e2:	bf00      	nop
 80099e4:	e7fe      	b.n	80099e4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80099e6:	2350      	movs	r3, #80	; 0x50
 80099e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	2b50      	cmp	r3, #80	; 0x50
 80099ee:	d00a      	beq.n	8009a06 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80099f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f4:	f383 8811 	msr	BASEPRI, r3
 80099f8:	f3bf 8f6f 	isb	sy
 80099fc:	f3bf 8f4f 	dsb	sy
 8009a00:	61bb      	str	r3, [r7, #24]
}
 8009a02:	bf00      	nop
 8009a04:	e7fe      	b.n	8009a04 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009a06:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d00d      	beq.n	8009a2e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a14:	2201      	movs	r2, #1
 8009a16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009a1a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a20:	9300      	str	r3, [sp, #0]
 8009a22:	4613      	mov	r3, r2
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	68b9      	ldr	r1, [r7, #8]
 8009a28:	68f8      	ldr	r0, [r7, #12]
 8009a2a:	f000 f805 	bl	8009a38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3730      	adds	r7, #48	; 0x30
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b084      	sub	sp, #16
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	60b9      	str	r1, [r7, #8]
 8009a42:	607a      	str	r2, [r7, #4]
 8009a44:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d103      	bne.n	8009a54 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009a4c:	69bb      	ldr	r3, [r7, #24]
 8009a4e:	69ba      	ldr	r2, [r7, #24]
 8009a50:	601a      	str	r2, [r3, #0]
 8009a52:	e002      	b.n	8009a5a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009a54:	69bb      	ldr	r3, [r7, #24]
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009a5a:	69bb      	ldr	r3, [r7, #24]
 8009a5c:	68fa      	ldr	r2, [r7, #12]
 8009a5e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009a60:	69bb      	ldr	r3, [r7, #24]
 8009a62:	68ba      	ldr	r2, [r7, #8]
 8009a64:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009a66:	2101      	movs	r1, #1
 8009a68:	69b8      	ldr	r0, [r7, #24]
 8009a6a:	f7ff ff05 	bl	8009878 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	78fa      	ldrb	r2, [r7, #3]
 8009a72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009a76:	bf00      	nop
 8009a78:	3710      	adds	r7, #16
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
	...

08009a80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b08e      	sub	sp, #56	; 0x38
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	60f8      	str	r0, [r7, #12]
 8009a88:	60b9      	str	r1, [r7, #8]
 8009a8a:	607a      	str	r2, [r7, #4]
 8009a8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d10a      	bne.n	8009ab2 <xQueueGenericSend+0x32>
	__asm volatile
 8009a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa0:	f383 8811 	msr	BASEPRI, r3
 8009aa4:	f3bf 8f6f 	isb	sy
 8009aa8:	f3bf 8f4f 	dsb	sy
 8009aac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009aae:	bf00      	nop
 8009ab0:	e7fe      	b.n	8009ab0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d103      	bne.n	8009ac0 <xQueueGenericSend+0x40>
 8009ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d101      	bne.n	8009ac4 <xQueueGenericSend+0x44>
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	e000      	b.n	8009ac6 <xQueueGenericSend+0x46>
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d10a      	bne.n	8009ae0 <xQueueGenericSend+0x60>
	__asm volatile
 8009aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ace:	f383 8811 	msr	BASEPRI, r3
 8009ad2:	f3bf 8f6f 	isb	sy
 8009ad6:	f3bf 8f4f 	dsb	sy
 8009ada:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009adc:	bf00      	nop
 8009ade:	e7fe      	b.n	8009ade <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	2b02      	cmp	r3, #2
 8009ae4:	d103      	bne.n	8009aee <xQueueGenericSend+0x6e>
 8009ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	d101      	bne.n	8009af2 <xQueueGenericSend+0x72>
 8009aee:	2301      	movs	r3, #1
 8009af0:	e000      	b.n	8009af4 <xQueueGenericSend+0x74>
 8009af2:	2300      	movs	r3, #0
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d10a      	bne.n	8009b0e <xQueueGenericSend+0x8e>
	__asm volatile
 8009af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009afc:	f383 8811 	msr	BASEPRI, r3
 8009b00:	f3bf 8f6f 	isb	sy
 8009b04:	f3bf 8f4f 	dsb	sy
 8009b08:	623b      	str	r3, [r7, #32]
}
 8009b0a:	bf00      	nop
 8009b0c:	e7fe      	b.n	8009b0c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b0e:	f001 f9b3 	bl	800ae78 <xTaskGetSchedulerState>
 8009b12:	4603      	mov	r3, r0
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d102      	bne.n	8009b1e <xQueueGenericSend+0x9e>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d101      	bne.n	8009b22 <xQueueGenericSend+0xa2>
 8009b1e:	2301      	movs	r3, #1
 8009b20:	e000      	b.n	8009b24 <xQueueGenericSend+0xa4>
 8009b22:	2300      	movs	r3, #0
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d10a      	bne.n	8009b3e <xQueueGenericSend+0xbe>
	__asm volatile
 8009b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b2c:	f383 8811 	msr	BASEPRI, r3
 8009b30:	f3bf 8f6f 	isb	sy
 8009b34:	f3bf 8f4f 	dsb	sy
 8009b38:	61fb      	str	r3, [r7, #28]
}
 8009b3a:	bf00      	nop
 8009b3c:	e7fe      	b.n	8009b3c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009b3e:	f7ff fd79 	bl	8009634 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d302      	bcc.n	8009b54 <xQueueGenericSend+0xd4>
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	2b02      	cmp	r3, #2
 8009b52:	d129      	bne.n	8009ba8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009b54:	683a      	ldr	r2, [r7, #0]
 8009b56:	68b9      	ldr	r1, [r7, #8]
 8009b58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b5a:	f000 fa0b 	bl	8009f74 <prvCopyDataToQueue>
 8009b5e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d010      	beq.n	8009b8a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b6a:	3324      	adds	r3, #36	; 0x24
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f000 ffc1 	bl	800aaf4 <xTaskRemoveFromEventList>
 8009b72:	4603      	mov	r3, r0
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d013      	beq.n	8009ba0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009b78:	4b3f      	ldr	r3, [pc, #252]	; (8009c78 <xQueueGenericSend+0x1f8>)
 8009b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b7e:	601a      	str	r2, [r3, #0]
 8009b80:	f3bf 8f4f 	dsb	sy
 8009b84:	f3bf 8f6f 	isb	sy
 8009b88:	e00a      	b.n	8009ba0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d007      	beq.n	8009ba0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009b90:	4b39      	ldr	r3, [pc, #228]	; (8009c78 <xQueueGenericSend+0x1f8>)
 8009b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b96:	601a      	str	r2, [r3, #0]
 8009b98:	f3bf 8f4f 	dsb	sy
 8009b9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009ba0:	f7ff fd78 	bl	8009694 <vPortExitCritical>
				return pdPASS;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	e063      	b.n	8009c70 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d103      	bne.n	8009bb6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009bae:	f7ff fd71 	bl	8009694 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	e05c      	b.n	8009c70 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d106      	bne.n	8009bca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009bbc:	f107 0314 	add.w	r3, r7, #20
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f000 fffb 	bl	800abbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009bca:	f7ff fd63 	bl	8009694 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009bce:	f000 fd67 	bl	800a6a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009bd2:	f7ff fd2f 	bl	8009634 <vPortEnterCritical>
 8009bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009bdc:	b25b      	sxtb	r3, r3
 8009bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009be2:	d103      	bne.n	8009bec <xQueueGenericSend+0x16c>
 8009be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be6:	2200      	movs	r2, #0
 8009be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009bf2:	b25b      	sxtb	r3, r3
 8009bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bf8:	d103      	bne.n	8009c02 <xQueueGenericSend+0x182>
 8009bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c02:	f7ff fd47 	bl	8009694 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009c06:	1d3a      	adds	r2, r7, #4
 8009c08:	f107 0314 	add.w	r3, r7, #20
 8009c0c:	4611      	mov	r1, r2
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f000 ffea 	bl	800abe8 <xTaskCheckForTimeOut>
 8009c14:	4603      	mov	r3, r0
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d124      	bne.n	8009c64 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009c1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c1c:	f000 faa2 	bl	800a164 <prvIsQueueFull>
 8009c20:	4603      	mov	r3, r0
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d018      	beq.n	8009c58 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c28:	3310      	adds	r3, #16
 8009c2a:	687a      	ldr	r2, [r7, #4]
 8009c2c:	4611      	mov	r1, r2
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f000 ff10 	bl	800aa54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009c34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c36:	f000 fa2d 	bl	800a094 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009c3a:	f000 fd3f 	bl	800a6bc <xTaskResumeAll>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	f47f af7c 	bne.w	8009b3e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009c46:	4b0c      	ldr	r3, [pc, #48]	; (8009c78 <xQueueGenericSend+0x1f8>)
 8009c48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c4c:	601a      	str	r2, [r3, #0]
 8009c4e:	f3bf 8f4f 	dsb	sy
 8009c52:	f3bf 8f6f 	isb	sy
 8009c56:	e772      	b.n	8009b3e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009c58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c5a:	f000 fa1b 	bl	800a094 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c5e:	f000 fd2d 	bl	800a6bc <xTaskResumeAll>
 8009c62:	e76c      	b.n	8009b3e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009c64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c66:	f000 fa15 	bl	800a094 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009c6a:	f000 fd27 	bl	800a6bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009c6e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3738      	adds	r7, #56	; 0x38
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}
 8009c78:	e000ed04 	.word	0xe000ed04

08009c7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b090      	sub	sp, #64	; 0x40
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	60b9      	str	r1, [r7, #8]
 8009c86:	607a      	str	r2, [r7, #4]
 8009c88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d10a      	bne.n	8009caa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c98:	f383 8811 	msr	BASEPRI, r3
 8009c9c:	f3bf 8f6f 	isb	sy
 8009ca0:	f3bf 8f4f 	dsb	sy
 8009ca4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009ca6:	bf00      	nop
 8009ca8:	e7fe      	b.n	8009ca8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d103      	bne.n	8009cb8 <xQueueGenericSendFromISR+0x3c>
 8009cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d101      	bne.n	8009cbc <xQueueGenericSendFromISR+0x40>
 8009cb8:	2301      	movs	r3, #1
 8009cba:	e000      	b.n	8009cbe <xQueueGenericSendFromISR+0x42>
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d10a      	bne.n	8009cd8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc6:	f383 8811 	msr	BASEPRI, r3
 8009cca:	f3bf 8f6f 	isb	sy
 8009cce:	f3bf 8f4f 	dsb	sy
 8009cd2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009cd4:	bf00      	nop
 8009cd6:	e7fe      	b.n	8009cd6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	2b02      	cmp	r3, #2
 8009cdc:	d103      	bne.n	8009ce6 <xQueueGenericSendFromISR+0x6a>
 8009cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	d101      	bne.n	8009cea <xQueueGenericSendFromISR+0x6e>
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	e000      	b.n	8009cec <xQueueGenericSendFromISR+0x70>
 8009cea:	2300      	movs	r3, #0
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d10a      	bne.n	8009d06 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf4:	f383 8811 	msr	BASEPRI, r3
 8009cf8:	f3bf 8f6f 	isb	sy
 8009cfc:	f3bf 8f4f 	dsb	sy
 8009d00:	623b      	str	r3, [r7, #32]
}
 8009d02:	bf00      	nop
 8009d04:	e7fe      	b.n	8009d04 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009d06:	f7ff fd77 	bl	80097f8 <vPortValidateInterruptPriority>
	__asm volatile
 8009d0a:	f3ef 8211 	mrs	r2, BASEPRI
 8009d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d12:	f383 8811 	msr	BASEPRI, r3
 8009d16:	f3bf 8f6f 	isb	sy
 8009d1a:	f3bf 8f4f 	dsb	sy
 8009d1e:	61fa      	str	r2, [r7, #28]
 8009d20:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8009d22:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009d24:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d302      	bcc.n	8009d38 <xQueueGenericSendFromISR+0xbc>
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	2b02      	cmp	r3, #2
 8009d36:	d12f      	bne.n	8009d98 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d46:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009d48:	683a      	ldr	r2, [r7, #0]
 8009d4a:	68b9      	ldr	r1, [r7, #8]
 8009d4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009d4e:	f000 f911 	bl	8009f74 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009d52:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d5a:	d112      	bne.n	8009d82 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d016      	beq.n	8009d92 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d66:	3324      	adds	r3, #36	; 0x24
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f000 fec3 	bl	800aaf4 <xTaskRemoveFromEventList>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d00e      	beq.n	8009d92 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d00b      	beq.n	8009d92 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2201      	movs	r2, #1
 8009d7e:	601a      	str	r2, [r3, #0]
 8009d80:	e007      	b.n	8009d92 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009d82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009d86:	3301      	adds	r3, #1
 8009d88:	b2db      	uxtb	r3, r3
 8009d8a:	b25a      	sxtb	r2, r3
 8009d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009d92:	2301      	movs	r3, #1
 8009d94:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009d96:	e001      	b.n	8009d9c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d9e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	f383 8811 	msr	BASEPRI, r3
}
 8009da6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3740      	adds	r7, #64	; 0x40
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
	...

08009db4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b08c      	sub	sp, #48	; 0x30
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	60f8      	str	r0, [r7, #12]
 8009dbc:	60b9      	str	r1, [r7, #8]
 8009dbe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d10a      	bne.n	8009de4 <xQueueReceive+0x30>
	__asm volatile
 8009dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd2:	f383 8811 	msr	BASEPRI, r3
 8009dd6:	f3bf 8f6f 	isb	sy
 8009dda:	f3bf 8f4f 	dsb	sy
 8009dde:	623b      	str	r3, [r7, #32]
}
 8009de0:	bf00      	nop
 8009de2:	e7fe      	b.n	8009de2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d103      	bne.n	8009df2 <xQueueReceive+0x3e>
 8009dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d101      	bne.n	8009df6 <xQueueReceive+0x42>
 8009df2:	2301      	movs	r3, #1
 8009df4:	e000      	b.n	8009df8 <xQueueReceive+0x44>
 8009df6:	2300      	movs	r3, #0
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d10a      	bne.n	8009e12 <xQueueReceive+0x5e>
	__asm volatile
 8009dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e00:	f383 8811 	msr	BASEPRI, r3
 8009e04:	f3bf 8f6f 	isb	sy
 8009e08:	f3bf 8f4f 	dsb	sy
 8009e0c:	61fb      	str	r3, [r7, #28]
}
 8009e0e:	bf00      	nop
 8009e10:	e7fe      	b.n	8009e10 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e12:	f001 f831 	bl	800ae78 <xTaskGetSchedulerState>
 8009e16:	4603      	mov	r3, r0
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d102      	bne.n	8009e22 <xQueueReceive+0x6e>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d101      	bne.n	8009e26 <xQueueReceive+0x72>
 8009e22:	2301      	movs	r3, #1
 8009e24:	e000      	b.n	8009e28 <xQueueReceive+0x74>
 8009e26:	2300      	movs	r3, #0
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d10a      	bne.n	8009e42 <xQueueReceive+0x8e>
	__asm volatile
 8009e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e30:	f383 8811 	msr	BASEPRI, r3
 8009e34:	f3bf 8f6f 	isb	sy
 8009e38:	f3bf 8f4f 	dsb	sy
 8009e3c:	61bb      	str	r3, [r7, #24]
}
 8009e3e:	bf00      	nop
 8009e40:	e7fe      	b.n	8009e40 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009e42:	f7ff fbf7 	bl	8009634 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e4a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d01f      	beq.n	8009e92 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009e52:	68b9      	ldr	r1, [r7, #8]
 8009e54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e56:	f000 f8f7 	bl	800a048 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5c:	1e5a      	subs	r2, r3, #1
 8009e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e60:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e64:	691b      	ldr	r3, [r3, #16]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d00f      	beq.n	8009e8a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e6c:	3310      	adds	r3, #16
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f000 fe40 	bl	800aaf4 <xTaskRemoveFromEventList>
 8009e74:	4603      	mov	r3, r0
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d007      	beq.n	8009e8a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009e7a:	4b3d      	ldr	r3, [pc, #244]	; (8009f70 <xQueueReceive+0x1bc>)
 8009e7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e80:	601a      	str	r2, [r3, #0]
 8009e82:	f3bf 8f4f 	dsb	sy
 8009e86:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009e8a:	f7ff fc03 	bl	8009694 <vPortExitCritical>
				return pdPASS;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	e069      	b.n	8009f66 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d103      	bne.n	8009ea0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009e98:	f7ff fbfc 	bl	8009694 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	e062      	b.n	8009f66 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d106      	bne.n	8009eb4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009ea6:	f107 0310 	add.w	r3, r7, #16
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f000 fe86 	bl	800abbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009eb4:	f7ff fbee 	bl	8009694 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009eb8:	f000 fbf2 	bl	800a6a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009ebc:	f7ff fbba 	bl	8009634 <vPortEnterCritical>
 8009ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009ec6:	b25b      	sxtb	r3, r3
 8009ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ecc:	d103      	bne.n	8009ed6 <xQueueReceive+0x122>
 8009ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009edc:	b25b      	sxtb	r3, r3
 8009ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ee2:	d103      	bne.n	8009eec <xQueueReceive+0x138>
 8009ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009eec:	f7ff fbd2 	bl	8009694 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ef0:	1d3a      	adds	r2, r7, #4
 8009ef2:	f107 0310 	add.w	r3, r7, #16
 8009ef6:	4611      	mov	r1, r2
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f000 fe75 	bl	800abe8 <xTaskCheckForTimeOut>
 8009efe:	4603      	mov	r3, r0
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d123      	bne.n	8009f4c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009f04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f06:	f000 f917 	bl	800a138 <prvIsQueueEmpty>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d017      	beq.n	8009f40 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f12:	3324      	adds	r3, #36	; 0x24
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	4611      	mov	r1, r2
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f000 fd9b 	bl	800aa54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009f1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f20:	f000 f8b8 	bl	800a094 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009f24:	f000 fbca 	bl	800a6bc <xTaskResumeAll>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d189      	bne.n	8009e42 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009f2e:	4b10      	ldr	r3, [pc, #64]	; (8009f70 <xQueueReceive+0x1bc>)
 8009f30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f34:	601a      	str	r2, [r3, #0]
 8009f36:	f3bf 8f4f 	dsb	sy
 8009f3a:	f3bf 8f6f 	isb	sy
 8009f3e:	e780      	b.n	8009e42 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009f40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f42:	f000 f8a7 	bl	800a094 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009f46:	f000 fbb9 	bl	800a6bc <xTaskResumeAll>
 8009f4a:	e77a      	b.n	8009e42 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009f4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f4e:	f000 f8a1 	bl	800a094 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009f52:	f000 fbb3 	bl	800a6bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009f56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f58:	f000 f8ee 	bl	800a138 <prvIsQueueEmpty>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	f43f af6f 	beq.w	8009e42 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009f64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3730      	adds	r7, #48	; 0x30
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
 8009f6e:	bf00      	nop
 8009f70:	e000ed04 	.word	0xe000ed04

08009f74 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b086      	sub	sp, #24
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	60f8      	str	r0, [r7, #12]
 8009f7c:	60b9      	str	r1, [r7, #8]
 8009f7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009f80:	2300      	movs	r3, #0
 8009f82:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f88:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d10d      	bne.n	8009fae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d14d      	bne.n	800a036 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	689b      	ldr	r3, [r3, #8]
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f000 ff88 	bl	800aeb4 <xTaskPriorityDisinherit>
 8009fa4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	609a      	str	r2, [r3, #8]
 8009fac:	e043      	b.n	800a036 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d119      	bne.n	8009fe8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	6858      	ldr	r0, [r3, #4]
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	68b9      	ldr	r1, [r7, #8]
 8009fc0:	f001 fcab 	bl	800b91a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	685a      	ldr	r2, [r3, #4]
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fcc:	441a      	add	r2, r3
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	685a      	ldr	r2, [r3, #4]
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	689b      	ldr	r3, [r3, #8]
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d32b      	bcc.n	800a036 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681a      	ldr	r2, [r3, #0]
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	605a      	str	r2, [r3, #4]
 8009fe6:	e026      	b.n	800a036 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	68d8      	ldr	r0, [r3, #12]
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	68b9      	ldr	r1, [r7, #8]
 8009ff4:	f001 fc91 	bl	800b91a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	68da      	ldr	r2, [r3, #12]
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a000:	425b      	negs	r3, r3
 800a002:	441a      	add	r2, r3
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	68da      	ldr	r2, [r3, #12]
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	429a      	cmp	r2, r3
 800a012:	d207      	bcs.n	800a024 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	689a      	ldr	r2, [r3, #8]
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a01c:	425b      	negs	r3, r3
 800a01e:	441a      	add	r2, r3
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2b02      	cmp	r3, #2
 800a028:	d105      	bne.n	800a036 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a02a:	693b      	ldr	r3, [r7, #16]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d002      	beq.n	800a036 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	3b01      	subs	r3, #1
 800a034:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	1c5a      	adds	r2, r3, #1
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a03e:	697b      	ldr	r3, [r7, #20]
}
 800a040:	4618      	mov	r0, r3
 800a042:	3718      	adds	r7, #24
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a056:	2b00      	cmp	r3, #0
 800a058:	d018      	beq.n	800a08c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	68da      	ldr	r2, [r3, #12]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a062:	441a      	add	r2, r3
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	68da      	ldr	r2, [r3, #12]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	689b      	ldr	r3, [r3, #8]
 800a070:	429a      	cmp	r2, r3
 800a072:	d303      	bcc.n	800a07c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	68d9      	ldr	r1, [r3, #12]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a084:	461a      	mov	r2, r3
 800a086:	6838      	ldr	r0, [r7, #0]
 800a088:	f001 fc47 	bl	800b91a <memcpy>
	}
}
 800a08c:	bf00      	nop
 800a08e:	3708      	adds	r7, #8
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}

0800a094 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a09c:	f7ff faca 	bl	8009634 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a0a8:	e011      	b.n	800a0ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d012      	beq.n	800a0d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	3324      	adds	r3, #36	; 0x24
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f000 fd1c 	bl	800aaf4 <xTaskRemoveFromEventList>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d001      	beq.n	800a0c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a0c2:	f000 fdf3 	bl	800acac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a0c6:	7bfb      	ldrb	r3, [r7, #15]
 800a0c8:	3b01      	subs	r3, #1
 800a0ca:	b2db      	uxtb	r3, r3
 800a0cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a0ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	dce9      	bgt.n	800a0aa <prvUnlockQueue+0x16>
 800a0d6:	e000      	b.n	800a0da <prvUnlockQueue+0x46>
					break;
 800a0d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	22ff      	movs	r2, #255	; 0xff
 800a0de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a0e2:	f7ff fad7 	bl	8009694 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a0e6:	f7ff faa5 	bl	8009634 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a0f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a0f2:	e011      	b.n	800a118 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	691b      	ldr	r3, [r3, #16]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d012      	beq.n	800a122 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	3310      	adds	r3, #16
 800a100:	4618      	mov	r0, r3
 800a102:	f000 fcf7 	bl	800aaf4 <xTaskRemoveFromEventList>
 800a106:	4603      	mov	r3, r0
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d001      	beq.n	800a110 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a10c:	f000 fdce 	bl	800acac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a110:	7bbb      	ldrb	r3, [r7, #14]
 800a112:	3b01      	subs	r3, #1
 800a114:	b2db      	uxtb	r3, r3
 800a116:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a118:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	dce9      	bgt.n	800a0f4 <prvUnlockQueue+0x60>
 800a120:	e000      	b.n	800a124 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a122:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	22ff      	movs	r2, #255	; 0xff
 800a128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a12c:	f7ff fab2 	bl	8009694 <vPortExitCritical>
}
 800a130:	bf00      	nop
 800a132:	3710      	adds	r7, #16
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}

0800a138 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b084      	sub	sp, #16
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a140:	f7ff fa78 	bl	8009634 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d102      	bne.n	800a152 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a14c:	2301      	movs	r3, #1
 800a14e:	60fb      	str	r3, [r7, #12]
 800a150:	e001      	b.n	800a156 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a152:	2300      	movs	r3, #0
 800a154:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a156:	f7ff fa9d 	bl	8009694 <vPortExitCritical>

	return xReturn;
 800a15a:	68fb      	ldr	r3, [r7, #12]
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3710      	adds	r7, #16
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}

0800a164 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a16c:	f7ff fa62 	bl	8009634 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a178:	429a      	cmp	r2, r3
 800a17a:	d102      	bne.n	800a182 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a17c:	2301      	movs	r3, #1
 800a17e:	60fb      	str	r3, [r7, #12]
 800a180:	e001      	b.n	800a186 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a182:	2300      	movs	r3, #0
 800a184:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a186:	f7ff fa85 	bl	8009694 <vPortExitCritical>

	return xReturn;
 800a18a:	68fb      	ldr	r3, [r7, #12]
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3710      	adds	r7, #16
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a194:	b480      	push	{r7}
 800a196:	b085      	sub	sp, #20
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a19e:	2300      	movs	r3, #0
 800a1a0:	60fb      	str	r3, [r7, #12]
 800a1a2:	e014      	b.n	800a1ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a1a4:	4a0f      	ldr	r2, [pc, #60]	; (800a1e4 <vQueueAddToRegistry+0x50>)
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d10b      	bne.n	800a1c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a1b0:	490c      	ldr	r1, [pc, #48]	; (800a1e4 <vQueueAddToRegistry+0x50>)
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	683a      	ldr	r2, [r7, #0]
 800a1b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a1ba:	4a0a      	ldr	r2, [pc, #40]	; (800a1e4 <vQueueAddToRegistry+0x50>)
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	00db      	lsls	r3, r3, #3
 800a1c0:	4413      	add	r3, r2
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a1c6:	e006      	b.n	800a1d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	3301      	adds	r3, #1
 800a1cc:	60fb      	str	r3, [r7, #12]
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2b07      	cmp	r3, #7
 800a1d2:	d9e7      	bls.n	800a1a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a1d4:	bf00      	nop
 800a1d6:	bf00      	nop
 800a1d8:	3714      	adds	r7, #20
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e0:	4770      	bx	lr
 800a1e2:	bf00      	nop
 800a1e4:	2400487c 	.word	0x2400487c

0800a1e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b086      	sub	sp, #24
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	60f8      	str	r0, [r7, #12]
 800a1f0:	60b9      	str	r1, [r7, #8]
 800a1f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a1f8:	f7ff fa1c 	bl	8009634 <vPortEnterCritical>
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a202:	b25b      	sxtb	r3, r3
 800a204:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a208:	d103      	bne.n	800a212 <vQueueWaitForMessageRestricted+0x2a>
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	2200      	movs	r2, #0
 800a20e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a218:	b25b      	sxtb	r3, r3
 800a21a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a21e:	d103      	bne.n	800a228 <vQueueWaitForMessageRestricted+0x40>
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	2200      	movs	r2, #0
 800a224:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a228:	f7ff fa34 	bl	8009694 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a230:	2b00      	cmp	r3, #0
 800a232:	d106      	bne.n	800a242 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	3324      	adds	r3, #36	; 0x24
 800a238:	687a      	ldr	r2, [r7, #4]
 800a23a:	68b9      	ldr	r1, [r7, #8]
 800a23c:	4618      	mov	r0, r3
 800a23e:	f000 fc2d 	bl	800aa9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a242:	6978      	ldr	r0, [r7, #20]
 800a244:	f7ff ff26 	bl	800a094 <prvUnlockQueue>
	}
 800a248:	bf00      	nop
 800a24a:	3718      	adds	r7, #24
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}

0800a250 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a250:	b580      	push	{r7, lr}
 800a252:	b08e      	sub	sp, #56	; 0x38
 800a254:	af04      	add	r7, sp, #16
 800a256:	60f8      	str	r0, [r7, #12]
 800a258:	60b9      	str	r1, [r7, #8]
 800a25a:	607a      	str	r2, [r7, #4]
 800a25c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a25e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a260:	2b00      	cmp	r3, #0
 800a262:	d10a      	bne.n	800a27a <xTaskCreateStatic+0x2a>
	__asm volatile
 800a264:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a268:	f383 8811 	msr	BASEPRI, r3
 800a26c:	f3bf 8f6f 	isb	sy
 800a270:	f3bf 8f4f 	dsb	sy
 800a274:	623b      	str	r3, [r7, #32]
}
 800a276:	bf00      	nop
 800a278:	e7fe      	b.n	800a278 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a27a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d10a      	bne.n	800a296 <xTaskCreateStatic+0x46>
	__asm volatile
 800a280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a284:	f383 8811 	msr	BASEPRI, r3
 800a288:	f3bf 8f6f 	isb	sy
 800a28c:	f3bf 8f4f 	dsb	sy
 800a290:	61fb      	str	r3, [r7, #28]
}
 800a292:	bf00      	nop
 800a294:	e7fe      	b.n	800a294 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a296:	23bc      	movs	r3, #188	; 0xbc
 800a298:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	2bbc      	cmp	r3, #188	; 0xbc
 800a29e:	d00a      	beq.n	800a2b6 <xTaskCreateStatic+0x66>
	__asm volatile
 800a2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a4:	f383 8811 	msr	BASEPRI, r3
 800a2a8:	f3bf 8f6f 	isb	sy
 800a2ac:	f3bf 8f4f 	dsb	sy
 800a2b0:	61bb      	str	r3, [r7, #24]
}
 800a2b2:	bf00      	nop
 800a2b4:	e7fe      	b.n	800a2b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a2b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d01e      	beq.n	800a2fc <xTaskCreateStatic+0xac>
 800a2be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d01b      	beq.n	800a2fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d0:	2202      	movs	r2, #2
 800a2d2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	9303      	str	r3, [sp, #12]
 800a2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2dc:	9302      	str	r3, [sp, #8]
 800a2de:	f107 0314 	add.w	r3, r7, #20
 800a2e2:	9301      	str	r3, [sp, #4]
 800a2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e6:	9300      	str	r3, [sp, #0]
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	687a      	ldr	r2, [r7, #4]
 800a2ec:	68b9      	ldr	r1, [r7, #8]
 800a2ee:	68f8      	ldr	r0, [r7, #12]
 800a2f0:	f000 f850 	bl	800a394 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a2f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a2f6:	f000 f8f3 	bl	800a4e0 <prvAddNewTaskToReadyList>
 800a2fa:	e001      	b.n	800a300 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a300:	697b      	ldr	r3, [r7, #20]
	}
 800a302:	4618      	mov	r0, r3
 800a304:	3728      	adds	r7, #40	; 0x28
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}

0800a30a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a30a:	b580      	push	{r7, lr}
 800a30c:	b08c      	sub	sp, #48	; 0x30
 800a30e:	af04      	add	r7, sp, #16
 800a310:	60f8      	str	r0, [r7, #12]
 800a312:	60b9      	str	r1, [r7, #8]
 800a314:	603b      	str	r3, [r7, #0]
 800a316:	4613      	mov	r3, r2
 800a318:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a31a:	88fb      	ldrh	r3, [r7, #6]
 800a31c:	009b      	lsls	r3, r3, #2
 800a31e:	4618      	mov	r0, r3
 800a320:	f7fe fdbc 	bl	8008e9c <pvPortMalloc>
 800a324:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d00e      	beq.n	800a34a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a32c:	20bc      	movs	r0, #188	; 0xbc
 800a32e:	f7fe fdb5 	bl	8008e9c <pvPortMalloc>
 800a332:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a334:	69fb      	ldr	r3, [r7, #28]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d003      	beq.n	800a342 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a33a:	69fb      	ldr	r3, [r7, #28]
 800a33c:	697a      	ldr	r2, [r7, #20]
 800a33e:	631a      	str	r2, [r3, #48]	; 0x30
 800a340:	e005      	b.n	800a34e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a342:	6978      	ldr	r0, [r7, #20]
 800a344:	f7fe fe76 	bl	8009034 <vPortFree>
 800a348:	e001      	b.n	800a34e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a34a:	2300      	movs	r3, #0
 800a34c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a34e:	69fb      	ldr	r3, [r7, #28]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d017      	beq.n	800a384 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a354:	69fb      	ldr	r3, [r7, #28]
 800a356:	2200      	movs	r2, #0
 800a358:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a35c:	88fa      	ldrh	r2, [r7, #6]
 800a35e:	2300      	movs	r3, #0
 800a360:	9303      	str	r3, [sp, #12]
 800a362:	69fb      	ldr	r3, [r7, #28]
 800a364:	9302      	str	r3, [sp, #8]
 800a366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a368:	9301      	str	r3, [sp, #4]
 800a36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a36c:	9300      	str	r3, [sp, #0]
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	68b9      	ldr	r1, [r7, #8]
 800a372:	68f8      	ldr	r0, [r7, #12]
 800a374:	f000 f80e 	bl	800a394 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a378:	69f8      	ldr	r0, [r7, #28]
 800a37a:	f000 f8b1 	bl	800a4e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a37e:	2301      	movs	r3, #1
 800a380:	61bb      	str	r3, [r7, #24]
 800a382:	e002      	b.n	800a38a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a384:	f04f 33ff 	mov.w	r3, #4294967295
 800a388:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a38a:	69bb      	ldr	r3, [r7, #24]
	}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3720      	adds	r7, #32
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b088      	sub	sp, #32
 800a398:	af00      	add	r7, sp, #0
 800a39a:	60f8      	str	r0, [r7, #12]
 800a39c:	60b9      	str	r1, [r7, #8]
 800a39e:	607a      	str	r2, [r7, #4]
 800a3a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	009b      	lsls	r3, r3, #2
 800a3aa:	461a      	mov	r2, r3
 800a3ac:	21a5      	movs	r1, #165	; 0xa5
 800a3ae:	f001 fac2 	bl	800b936 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a3b6:	6879      	ldr	r1, [r7, #4]
 800a3b8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800a3bc:	440b      	add	r3, r1
 800a3be:	009b      	lsls	r3, r3, #2
 800a3c0:	4413      	add	r3, r2
 800a3c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a3c4:	69bb      	ldr	r3, [r7, #24]
 800a3c6:	f023 0307 	bic.w	r3, r3, #7
 800a3ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a3cc:	69bb      	ldr	r3, [r7, #24]
 800a3ce:	f003 0307 	and.w	r3, r3, #7
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d00a      	beq.n	800a3ec <prvInitialiseNewTask+0x58>
	__asm volatile
 800a3d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3da:	f383 8811 	msr	BASEPRI, r3
 800a3de:	f3bf 8f6f 	isb	sy
 800a3e2:	f3bf 8f4f 	dsb	sy
 800a3e6:	617b      	str	r3, [r7, #20]
}
 800a3e8:	bf00      	nop
 800a3ea:	e7fe      	b.n	800a3ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d01f      	beq.n	800a432 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	61fb      	str	r3, [r7, #28]
 800a3f6:	e012      	b.n	800a41e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a3f8:	68ba      	ldr	r2, [r7, #8]
 800a3fa:	69fb      	ldr	r3, [r7, #28]
 800a3fc:	4413      	add	r3, r2
 800a3fe:	7819      	ldrb	r1, [r3, #0]
 800a400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a402:	69fb      	ldr	r3, [r7, #28]
 800a404:	4413      	add	r3, r2
 800a406:	3334      	adds	r3, #52	; 0x34
 800a408:	460a      	mov	r2, r1
 800a40a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a40c:	68ba      	ldr	r2, [r7, #8]
 800a40e:	69fb      	ldr	r3, [r7, #28]
 800a410:	4413      	add	r3, r2
 800a412:	781b      	ldrb	r3, [r3, #0]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d006      	beq.n	800a426 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a418:	69fb      	ldr	r3, [r7, #28]
 800a41a:	3301      	adds	r3, #1
 800a41c:	61fb      	str	r3, [r7, #28]
 800a41e:	69fb      	ldr	r3, [r7, #28]
 800a420:	2b0f      	cmp	r3, #15
 800a422:	d9e9      	bls.n	800a3f8 <prvInitialiseNewTask+0x64>
 800a424:	e000      	b.n	800a428 <prvInitialiseNewTask+0x94>
			{
				break;
 800a426:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a42a:	2200      	movs	r2, #0
 800a42c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a430:	e003      	b.n	800a43a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a434:	2200      	movs	r2, #0
 800a436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a43c:	2b37      	cmp	r3, #55	; 0x37
 800a43e:	d901      	bls.n	800a444 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a440:	2337      	movs	r3, #55	; 0x37
 800a442:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a446:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a448:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a44c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a44e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a452:	2200      	movs	r2, #0
 800a454:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a458:	3304      	adds	r3, #4
 800a45a:	4618      	mov	r0, r3
 800a45c:	f7fe ff28 	bl	80092b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a462:	3318      	adds	r3, #24
 800a464:	4618      	mov	r0, r3
 800a466:	f7fe ff23 	bl	80092b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a46c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a46e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a472:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a478:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a47c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a47e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a482:	2200      	movs	r2, #0
 800a484:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a48a:	2200      	movs	r2, #0
 800a48c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a492:	3354      	adds	r3, #84	; 0x54
 800a494:	2260      	movs	r2, #96	; 0x60
 800a496:	2100      	movs	r1, #0
 800a498:	4618      	mov	r0, r3
 800a49a:	f001 fa4c 	bl	800b936 <memset>
 800a49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a0:	4a0c      	ldr	r2, [pc, #48]	; (800a4d4 <prvInitialiseNewTask+0x140>)
 800a4a2:	659a      	str	r2, [r3, #88]	; 0x58
 800a4a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a6:	4a0c      	ldr	r2, [pc, #48]	; (800a4d8 <prvInitialiseNewTask+0x144>)
 800a4a8:	65da      	str	r2, [r3, #92]	; 0x5c
 800a4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ac:	4a0b      	ldr	r2, [pc, #44]	; (800a4dc <prvInitialiseNewTask+0x148>)
 800a4ae:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a4b0:	683a      	ldr	r2, [r7, #0]
 800a4b2:	68f9      	ldr	r1, [r7, #12]
 800a4b4:	69b8      	ldr	r0, [r7, #24]
 800a4b6:	f7fe ff8f 	bl	80093d8 <pxPortInitialiseStack>
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4be:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d002      	beq.n	800a4cc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4cc:	bf00      	nop
 800a4ce:	3720      	adds	r7, #32
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}
 800a4d4:	0800d13c 	.word	0x0800d13c
 800a4d8:	0800d15c 	.word	0x0800d15c
 800a4dc:	0800d11c 	.word	0x0800d11c

0800a4e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b082      	sub	sp, #8
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a4e8:	f7ff f8a4 	bl	8009634 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a4ec:	4b2d      	ldr	r3, [pc, #180]	; (800a5a4 <prvAddNewTaskToReadyList+0xc4>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	4a2c      	ldr	r2, [pc, #176]	; (800a5a4 <prvAddNewTaskToReadyList+0xc4>)
 800a4f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a4f6:	4b2c      	ldr	r3, [pc, #176]	; (800a5a8 <prvAddNewTaskToReadyList+0xc8>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d109      	bne.n	800a512 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a4fe:	4a2a      	ldr	r2, [pc, #168]	; (800a5a8 <prvAddNewTaskToReadyList+0xc8>)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a504:	4b27      	ldr	r3, [pc, #156]	; (800a5a4 <prvAddNewTaskToReadyList+0xc4>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	2b01      	cmp	r3, #1
 800a50a:	d110      	bne.n	800a52e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a50c:	f000 fbf2 	bl	800acf4 <prvInitialiseTaskLists>
 800a510:	e00d      	b.n	800a52e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a512:	4b26      	ldr	r3, [pc, #152]	; (800a5ac <prvAddNewTaskToReadyList+0xcc>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d109      	bne.n	800a52e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a51a:	4b23      	ldr	r3, [pc, #140]	; (800a5a8 <prvAddNewTaskToReadyList+0xc8>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a524:	429a      	cmp	r2, r3
 800a526:	d802      	bhi.n	800a52e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a528:	4a1f      	ldr	r2, [pc, #124]	; (800a5a8 <prvAddNewTaskToReadyList+0xc8>)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a52e:	4b20      	ldr	r3, [pc, #128]	; (800a5b0 <prvAddNewTaskToReadyList+0xd0>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	3301      	adds	r3, #1
 800a534:	4a1e      	ldr	r2, [pc, #120]	; (800a5b0 <prvAddNewTaskToReadyList+0xd0>)
 800a536:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a538:	4b1d      	ldr	r3, [pc, #116]	; (800a5b0 <prvAddNewTaskToReadyList+0xd0>)
 800a53a:	681a      	ldr	r2, [r3, #0]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a544:	4b1b      	ldr	r3, [pc, #108]	; (800a5b4 <prvAddNewTaskToReadyList+0xd4>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	429a      	cmp	r2, r3
 800a54a:	d903      	bls.n	800a554 <prvAddNewTaskToReadyList+0x74>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a550:	4a18      	ldr	r2, [pc, #96]	; (800a5b4 <prvAddNewTaskToReadyList+0xd4>)
 800a552:	6013      	str	r3, [r2, #0]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a558:	4613      	mov	r3, r2
 800a55a:	009b      	lsls	r3, r3, #2
 800a55c:	4413      	add	r3, r2
 800a55e:	009b      	lsls	r3, r3, #2
 800a560:	4a15      	ldr	r2, [pc, #84]	; (800a5b8 <prvAddNewTaskToReadyList+0xd8>)
 800a562:	441a      	add	r2, r3
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	3304      	adds	r3, #4
 800a568:	4619      	mov	r1, r3
 800a56a:	4610      	mov	r0, r2
 800a56c:	f7fe fead 	bl	80092ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a570:	f7ff f890 	bl	8009694 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a574:	4b0d      	ldr	r3, [pc, #52]	; (800a5ac <prvAddNewTaskToReadyList+0xcc>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d00e      	beq.n	800a59a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a57c:	4b0a      	ldr	r3, [pc, #40]	; (800a5a8 <prvAddNewTaskToReadyList+0xc8>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a586:	429a      	cmp	r2, r3
 800a588:	d207      	bcs.n	800a59a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a58a:	4b0c      	ldr	r3, [pc, #48]	; (800a5bc <prvAddNewTaskToReadyList+0xdc>)
 800a58c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a590:	601a      	str	r2, [r3, #0]
 800a592:	f3bf 8f4f 	dsb	sy
 800a596:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a59a:	bf00      	nop
 800a59c:	3708      	adds	r7, #8
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
 800a5a2:	bf00      	nop
 800a5a4:	24004d90 	.word	0x24004d90
 800a5a8:	240048bc 	.word	0x240048bc
 800a5ac:	24004d9c 	.word	0x24004d9c
 800a5b0:	24004dac 	.word	0x24004dac
 800a5b4:	24004d98 	.word	0x24004d98
 800a5b8:	240048c0 	.word	0x240048c0
 800a5bc:	e000ed04 	.word	0xe000ed04

0800a5c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b08a      	sub	sp, #40	; 0x28
 800a5c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a5ce:	463a      	mov	r2, r7
 800a5d0:	1d39      	adds	r1, r7, #4
 800a5d2:	f107 0308 	add.w	r3, r7, #8
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f7fe fc2c 	bl	8008e34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a5dc:	6839      	ldr	r1, [r7, #0]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	68ba      	ldr	r2, [r7, #8]
 800a5e2:	9202      	str	r2, [sp, #8]
 800a5e4:	9301      	str	r3, [sp, #4]
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	9300      	str	r3, [sp, #0]
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	460a      	mov	r2, r1
 800a5ee:	4924      	ldr	r1, [pc, #144]	; (800a680 <vTaskStartScheduler+0xc0>)
 800a5f0:	4824      	ldr	r0, [pc, #144]	; (800a684 <vTaskStartScheduler+0xc4>)
 800a5f2:	f7ff fe2d 	bl	800a250 <xTaskCreateStatic>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	4a23      	ldr	r2, [pc, #140]	; (800a688 <vTaskStartScheduler+0xc8>)
 800a5fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a5fc:	4b22      	ldr	r3, [pc, #136]	; (800a688 <vTaskStartScheduler+0xc8>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d002      	beq.n	800a60a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a604:	2301      	movs	r3, #1
 800a606:	617b      	str	r3, [r7, #20]
 800a608:	e001      	b.n	800a60e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a60a:	2300      	movs	r3, #0
 800a60c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	2b01      	cmp	r3, #1
 800a612:	d102      	bne.n	800a61a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a614:	f000 fd10 	bl	800b038 <xTimerCreateTimerTask>
 800a618:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d11b      	bne.n	800a658 <vTaskStartScheduler+0x98>
	__asm volatile
 800a620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a624:	f383 8811 	msr	BASEPRI, r3
 800a628:	f3bf 8f6f 	isb	sy
 800a62c:	f3bf 8f4f 	dsb	sy
 800a630:	613b      	str	r3, [r7, #16]
}
 800a632:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a634:	4b15      	ldr	r3, [pc, #84]	; (800a68c <vTaskStartScheduler+0xcc>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	3354      	adds	r3, #84	; 0x54
 800a63a:	4a15      	ldr	r2, [pc, #84]	; (800a690 <vTaskStartScheduler+0xd0>)
 800a63c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a63e:	4b15      	ldr	r3, [pc, #84]	; (800a694 <vTaskStartScheduler+0xd4>)
 800a640:	f04f 32ff 	mov.w	r2, #4294967295
 800a644:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a646:	4b14      	ldr	r3, [pc, #80]	; (800a698 <vTaskStartScheduler+0xd8>)
 800a648:	2201      	movs	r2, #1
 800a64a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a64c:	4b13      	ldr	r3, [pc, #76]	; (800a69c <vTaskStartScheduler+0xdc>)
 800a64e:	2200      	movs	r2, #0
 800a650:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a652:	f7fe ff4d 	bl	80094f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a656:	e00e      	b.n	800a676 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a65e:	d10a      	bne.n	800a676 <vTaskStartScheduler+0xb6>
	__asm volatile
 800a660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a664:	f383 8811 	msr	BASEPRI, r3
 800a668:	f3bf 8f6f 	isb	sy
 800a66c:	f3bf 8f4f 	dsb	sy
 800a670:	60fb      	str	r3, [r7, #12]
}
 800a672:	bf00      	nop
 800a674:	e7fe      	b.n	800a674 <vTaskStartScheduler+0xb4>
}
 800a676:	bf00      	nop
 800a678:	3718      	adds	r7, #24
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}
 800a67e:	bf00      	nop
 800a680:	0800d098 	.word	0x0800d098
 800a684:	0800acc5 	.word	0x0800acc5
 800a688:	24004db4 	.word	0x24004db4
 800a68c:	240048bc 	.word	0x240048bc
 800a690:	2400001c 	.word	0x2400001c
 800a694:	24004db0 	.word	0x24004db0
 800a698:	24004d9c 	.word	0x24004d9c
 800a69c:	24004d94 	.word	0x24004d94

0800a6a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a6a4:	4b04      	ldr	r3, [pc, #16]	; (800a6b8 <vTaskSuspendAll+0x18>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	3301      	adds	r3, #1
 800a6aa:	4a03      	ldr	r2, [pc, #12]	; (800a6b8 <vTaskSuspendAll+0x18>)
 800a6ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a6ae:	bf00      	nop
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr
 800a6b8:	24004db8 	.word	0x24004db8

0800a6bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b084      	sub	sp, #16
 800a6c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a6ca:	4b42      	ldr	r3, [pc, #264]	; (800a7d4 <xTaskResumeAll+0x118>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d10a      	bne.n	800a6e8 <xTaskResumeAll+0x2c>
	__asm volatile
 800a6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d6:	f383 8811 	msr	BASEPRI, r3
 800a6da:	f3bf 8f6f 	isb	sy
 800a6de:	f3bf 8f4f 	dsb	sy
 800a6e2:	603b      	str	r3, [r7, #0]
}
 800a6e4:	bf00      	nop
 800a6e6:	e7fe      	b.n	800a6e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a6e8:	f7fe ffa4 	bl	8009634 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a6ec:	4b39      	ldr	r3, [pc, #228]	; (800a7d4 <xTaskResumeAll+0x118>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	3b01      	subs	r3, #1
 800a6f2:	4a38      	ldr	r2, [pc, #224]	; (800a7d4 <xTaskResumeAll+0x118>)
 800a6f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6f6:	4b37      	ldr	r3, [pc, #220]	; (800a7d4 <xTaskResumeAll+0x118>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d162      	bne.n	800a7c4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a6fe:	4b36      	ldr	r3, [pc, #216]	; (800a7d8 <xTaskResumeAll+0x11c>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d05e      	beq.n	800a7c4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a706:	e02f      	b.n	800a768 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a708:	4b34      	ldr	r3, [pc, #208]	; (800a7dc <xTaskResumeAll+0x120>)
 800a70a:	68db      	ldr	r3, [r3, #12]
 800a70c:	68db      	ldr	r3, [r3, #12]
 800a70e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	3318      	adds	r3, #24
 800a714:	4618      	mov	r0, r3
 800a716:	f7fe fe35 	bl	8009384 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	3304      	adds	r3, #4
 800a71e:	4618      	mov	r0, r3
 800a720:	f7fe fe30 	bl	8009384 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a728:	4b2d      	ldr	r3, [pc, #180]	; (800a7e0 <xTaskResumeAll+0x124>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	429a      	cmp	r2, r3
 800a72e:	d903      	bls.n	800a738 <xTaskResumeAll+0x7c>
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a734:	4a2a      	ldr	r2, [pc, #168]	; (800a7e0 <xTaskResumeAll+0x124>)
 800a736:	6013      	str	r3, [r2, #0]
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a73c:	4613      	mov	r3, r2
 800a73e:	009b      	lsls	r3, r3, #2
 800a740:	4413      	add	r3, r2
 800a742:	009b      	lsls	r3, r3, #2
 800a744:	4a27      	ldr	r2, [pc, #156]	; (800a7e4 <xTaskResumeAll+0x128>)
 800a746:	441a      	add	r2, r3
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	3304      	adds	r3, #4
 800a74c:	4619      	mov	r1, r3
 800a74e:	4610      	mov	r0, r2
 800a750:	f7fe fdbb 	bl	80092ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a758:	4b23      	ldr	r3, [pc, #140]	; (800a7e8 <xTaskResumeAll+0x12c>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a75e:	429a      	cmp	r2, r3
 800a760:	d302      	bcc.n	800a768 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a762:	4b22      	ldr	r3, [pc, #136]	; (800a7ec <xTaskResumeAll+0x130>)
 800a764:	2201      	movs	r2, #1
 800a766:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a768:	4b1c      	ldr	r3, [pc, #112]	; (800a7dc <xTaskResumeAll+0x120>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d1cb      	bne.n	800a708 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d001      	beq.n	800a77a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a776:	f000 fb5f 	bl	800ae38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a77a:	4b1d      	ldr	r3, [pc, #116]	; (800a7f0 <xTaskResumeAll+0x134>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d010      	beq.n	800a7a8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a786:	f000 f847 	bl	800a818 <xTaskIncrementTick>
 800a78a:	4603      	mov	r3, r0
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d002      	beq.n	800a796 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a790:	4b16      	ldr	r3, [pc, #88]	; (800a7ec <xTaskResumeAll+0x130>)
 800a792:	2201      	movs	r2, #1
 800a794:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	3b01      	subs	r3, #1
 800a79a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d1f1      	bne.n	800a786 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a7a2:	4b13      	ldr	r3, [pc, #76]	; (800a7f0 <xTaskResumeAll+0x134>)
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a7a8:	4b10      	ldr	r3, [pc, #64]	; (800a7ec <xTaskResumeAll+0x130>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d009      	beq.n	800a7c4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a7b4:	4b0f      	ldr	r3, [pc, #60]	; (800a7f4 <xTaskResumeAll+0x138>)
 800a7b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7ba:	601a      	str	r2, [r3, #0]
 800a7bc:	f3bf 8f4f 	dsb	sy
 800a7c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a7c4:	f7fe ff66 	bl	8009694 <vPortExitCritical>

	return xAlreadyYielded;
 800a7c8:	68bb      	ldr	r3, [r7, #8]
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3710      	adds	r7, #16
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
 800a7d2:	bf00      	nop
 800a7d4:	24004db8 	.word	0x24004db8
 800a7d8:	24004d90 	.word	0x24004d90
 800a7dc:	24004d50 	.word	0x24004d50
 800a7e0:	24004d98 	.word	0x24004d98
 800a7e4:	240048c0 	.word	0x240048c0
 800a7e8:	240048bc 	.word	0x240048bc
 800a7ec:	24004da4 	.word	0x24004da4
 800a7f0:	24004da0 	.word	0x24004da0
 800a7f4:	e000ed04 	.word	0xe000ed04

0800a7f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b083      	sub	sp, #12
 800a7fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a7fe:	4b05      	ldr	r3, [pc, #20]	; (800a814 <xTaskGetTickCount+0x1c>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a804:	687b      	ldr	r3, [r7, #4]
}
 800a806:	4618      	mov	r0, r3
 800a808:	370c      	adds	r7, #12
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr
 800a812:	bf00      	nop
 800a814:	24004d94 	.word	0x24004d94

0800a818 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b086      	sub	sp, #24
 800a81c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a81e:	2300      	movs	r3, #0
 800a820:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a822:	4b4f      	ldr	r3, [pc, #316]	; (800a960 <xTaskIncrementTick+0x148>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	2b00      	cmp	r3, #0
 800a828:	f040 808f 	bne.w	800a94a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a82c:	4b4d      	ldr	r3, [pc, #308]	; (800a964 <xTaskIncrementTick+0x14c>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	3301      	adds	r3, #1
 800a832:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a834:	4a4b      	ldr	r2, [pc, #300]	; (800a964 <xTaskIncrementTick+0x14c>)
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a83a:	693b      	ldr	r3, [r7, #16]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d120      	bne.n	800a882 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a840:	4b49      	ldr	r3, [pc, #292]	; (800a968 <xTaskIncrementTick+0x150>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d00a      	beq.n	800a860 <xTaskIncrementTick+0x48>
	__asm volatile
 800a84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a84e:	f383 8811 	msr	BASEPRI, r3
 800a852:	f3bf 8f6f 	isb	sy
 800a856:	f3bf 8f4f 	dsb	sy
 800a85a:	603b      	str	r3, [r7, #0]
}
 800a85c:	bf00      	nop
 800a85e:	e7fe      	b.n	800a85e <xTaskIncrementTick+0x46>
 800a860:	4b41      	ldr	r3, [pc, #260]	; (800a968 <xTaskIncrementTick+0x150>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	60fb      	str	r3, [r7, #12]
 800a866:	4b41      	ldr	r3, [pc, #260]	; (800a96c <xTaskIncrementTick+0x154>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	4a3f      	ldr	r2, [pc, #252]	; (800a968 <xTaskIncrementTick+0x150>)
 800a86c:	6013      	str	r3, [r2, #0]
 800a86e:	4a3f      	ldr	r2, [pc, #252]	; (800a96c <xTaskIncrementTick+0x154>)
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	6013      	str	r3, [r2, #0]
 800a874:	4b3e      	ldr	r3, [pc, #248]	; (800a970 <xTaskIncrementTick+0x158>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	3301      	adds	r3, #1
 800a87a:	4a3d      	ldr	r2, [pc, #244]	; (800a970 <xTaskIncrementTick+0x158>)
 800a87c:	6013      	str	r3, [r2, #0]
 800a87e:	f000 fadb 	bl	800ae38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a882:	4b3c      	ldr	r3, [pc, #240]	; (800a974 <xTaskIncrementTick+0x15c>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	693a      	ldr	r2, [r7, #16]
 800a888:	429a      	cmp	r2, r3
 800a88a:	d349      	bcc.n	800a920 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a88c:	4b36      	ldr	r3, [pc, #216]	; (800a968 <xTaskIncrementTick+0x150>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d104      	bne.n	800a8a0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a896:	4b37      	ldr	r3, [pc, #220]	; (800a974 <xTaskIncrementTick+0x15c>)
 800a898:	f04f 32ff 	mov.w	r2, #4294967295
 800a89c:	601a      	str	r2, [r3, #0]
					break;
 800a89e:	e03f      	b.n	800a920 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8a0:	4b31      	ldr	r3, [pc, #196]	; (800a968 <xTaskIncrementTick+0x150>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	68db      	ldr	r3, [r3, #12]
 800a8a6:	68db      	ldr	r3, [r3, #12]
 800a8a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	685b      	ldr	r3, [r3, #4]
 800a8ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a8b0:	693a      	ldr	r2, [r7, #16]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d203      	bcs.n	800a8c0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a8b8:	4a2e      	ldr	r2, [pc, #184]	; (800a974 <xTaskIncrementTick+0x15c>)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a8be:	e02f      	b.n	800a920 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	3304      	adds	r3, #4
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f7fe fd5d 	bl	8009384 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d004      	beq.n	800a8dc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	3318      	adds	r3, #24
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f7fe fd54 	bl	8009384 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8e0:	4b25      	ldr	r3, [pc, #148]	; (800a978 <xTaskIncrementTick+0x160>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d903      	bls.n	800a8f0 <xTaskIncrementTick+0xd8>
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ec:	4a22      	ldr	r2, [pc, #136]	; (800a978 <xTaskIncrementTick+0x160>)
 800a8ee:	6013      	str	r3, [r2, #0]
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8f4:	4613      	mov	r3, r2
 800a8f6:	009b      	lsls	r3, r3, #2
 800a8f8:	4413      	add	r3, r2
 800a8fa:	009b      	lsls	r3, r3, #2
 800a8fc:	4a1f      	ldr	r2, [pc, #124]	; (800a97c <xTaskIncrementTick+0x164>)
 800a8fe:	441a      	add	r2, r3
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	3304      	adds	r3, #4
 800a904:	4619      	mov	r1, r3
 800a906:	4610      	mov	r0, r2
 800a908:	f7fe fcdf 	bl	80092ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a910:	4b1b      	ldr	r3, [pc, #108]	; (800a980 <xTaskIncrementTick+0x168>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a916:	429a      	cmp	r2, r3
 800a918:	d3b8      	bcc.n	800a88c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a91a:	2301      	movs	r3, #1
 800a91c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a91e:	e7b5      	b.n	800a88c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a920:	4b17      	ldr	r3, [pc, #92]	; (800a980 <xTaskIncrementTick+0x168>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a926:	4915      	ldr	r1, [pc, #84]	; (800a97c <xTaskIncrementTick+0x164>)
 800a928:	4613      	mov	r3, r2
 800a92a:	009b      	lsls	r3, r3, #2
 800a92c:	4413      	add	r3, r2
 800a92e:	009b      	lsls	r3, r3, #2
 800a930:	440b      	add	r3, r1
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	2b01      	cmp	r3, #1
 800a936:	d901      	bls.n	800a93c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a938:	2301      	movs	r3, #1
 800a93a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a93c:	4b11      	ldr	r3, [pc, #68]	; (800a984 <xTaskIncrementTick+0x16c>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d007      	beq.n	800a954 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a944:	2301      	movs	r3, #1
 800a946:	617b      	str	r3, [r7, #20]
 800a948:	e004      	b.n	800a954 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a94a:	4b0f      	ldr	r3, [pc, #60]	; (800a988 <xTaskIncrementTick+0x170>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	3301      	adds	r3, #1
 800a950:	4a0d      	ldr	r2, [pc, #52]	; (800a988 <xTaskIncrementTick+0x170>)
 800a952:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a954:	697b      	ldr	r3, [r7, #20]
}
 800a956:	4618      	mov	r0, r3
 800a958:	3718      	adds	r7, #24
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}
 800a95e:	bf00      	nop
 800a960:	24004db8 	.word	0x24004db8
 800a964:	24004d94 	.word	0x24004d94
 800a968:	24004d48 	.word	0x24004d48
 800a96c:	24004d4c 	.word	0x24004d4c
 800a970:	24004da8 	.word	0x24004da8
 800a974:	24004db0 	.word	0x24004db0
 800a978:	24004d98 	.word	0x24004d98
 800a97c:	240048c0 	.word	0x240048c0
 800a980:	240048bc 	.word	0x240048bc
 800a984:	24004da4 	.word	0x24004da4
 800a988:	24004da0 	.word	0x24004da0

0800a98c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a98c:	b480      	push	{r7}
 800a98e:	b085      	sub	sp, #20
 800a990:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a992:	4b2a      	ldr	r3, [pc, #168]	; (800aa3c <vTaskSwitchContext+0xb0>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d003      	beq.n	800a9a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a99a:	4b29      	ldr	r3, [pc, #164]	; (800aa40 <vTaskSwitchContext+0xb4>)
 800a99c:	2201      	movs	r2, #1
 800a99e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a9a0:	e046      	b.n	800aa30 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a9a2:	4b27      	ldr	r3, [pc, #156]	; (800aa40 <vTaskSwitchContext+0xb4>)
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9a8:	4b26      	ldr	r3, [pc, #152]	; (800aa44 <vTaskSwitchContext+0xb8>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	60fb      	str	r3, [r7, #12]
 800a9ae:	e010      	b.n	800a9d2 <vTaskSwitchContext+0x46>
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d10a      	bne.n	800a9cc <vTaskSwitchContext+0x40>
	__asm volatile
 800a9b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ba:	f383 8811 	msr	BASEPRI, r3
 800a9be:	f3bf 8f6f 	isb	sy
 800a9c2:	f3bf 8f4f 	dsb	sy
 800a9c6:	607b      	str	r3, [r7, #4]
}
 800a9c8:	bf00      	nop
 800a9ca:	e7fe      	b.n	800a9ca <vTaskSwitchContext+0x3e>
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	3b01      	subs	r3, #1
 800a9d0:	60fb      	str	r3, [r7, #12]
 800a9d2:	491d      	ldr	r1, [pc, #116]	; (800aa48 <vTaskSwitchContext+0xbc>)
 800a9d4:	68fa      	ldr	r2, [r7, #12]
 800a9d6:	4613      	mov	r3, r2
 800a9d8:	009b      	lsls	r3, r3, #2
 800a9da:	4413      	add	r3, r2
 800a9dc:	009b      	lsls	r3, r3, #2
 800a9de:	440b      	add	r3, r1
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d0e4      	beq.n	800a9b0 <vTaskSwitchContext+0x24>
 800a9e6:	68fa      	ldr	r2, [r7, #12]
 800a9e8:	4613      	mov	r3, r2
 800a9ea:	009b      	lsls	r3, r3, #2
 800a9ec:	4413      	add	r3, r2
 800a9ee:	009b      	lsls	r3, r3, #2
 800a9f0:	4a15      	ldr	r2, [pc, #84]	; (800aa48 <vTaskSwitchContext+0xbc>)
 800a9f2:	4413      	add	r3, r2
 800a9f4:	60bb      	str	r3, [r7, #8]
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	685b      	ldr	r3, [r3, #4]
 800a9fa:	685a      	ldr	r2, [r3, #4]
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	605a      	str	r2, [r3, #4]
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	685a      	ldr	r2, [r3, #4]
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	3308      	adds	r3, #8
 800aa08:	429a      	cmp	r2, r3
 800aa0a:	d104      	bne.n	800aa16 <vTaskSwitchContext+0x8a>
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	685a      	ldr	r2, [r3, #4]
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	605a      	str	r2, [r3, #4]
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	68db      	ldr	r3, [r3, #12]
 800aa1c:	4a0b      	ldr	r2, [pc, #44]	; (800aa4c <vTaskSwitchContext+0xc0>)
 800aa1e:	6013      	str	r3, [r2, #0]
 800aa20:	4a08      	ldr	r2, [pc, #32]	; (800aa44 <vTaskSwitchContext+0xb8>)
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800aa26:	4b09      	ldr	r3, [pc, #36]	; (800aa4c <vTaskSwitchContext+0xc0>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	3354      	adds	r3, #84	; 0x54
 800aa2c:	4a08      	ldr	r2, [pc, #32]	; (800aa50 <vTaskSwitchContext+0xc4>)
 800aa2e:	6013      	str	r3, [r2, #0]
}
 800aa30:	bf00      	nop
 800aa32:	3714      	adds	r7, #20
 800aa34:	46bd      	mov	sp, r7
 800aa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3a:	4770      	bx	lr
 800aa3c:	24004db8 	.word	0x24004db8
 800aa40:	24004da4 	.word	0x24004da4
 800aa44:	24004d98 	.word	0x24004d98
 800aa48:	240048c0 	.word	0x240048c0
 800aa4c:	240048bc 	.word	0x240048bc
 800aa50:	2400001c 	.word	0x2400001c

0800aa54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b084      	sub	sp, #16
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d10a      	bne.n	800aa7a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800aa64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa68:	f383 8811 	msr	BASEPRI, r3
 800aa6c:	f3bf 8f6f 	isb	sy
 800aa70:	f3bf 8f4f 	dsb	sy
 800aa74:	60fb      	str	r3, [r7, #12]
}
 800aa76:	bf00      	nop
 800aa78:	e7fe      	b.n	800aa78 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aa7a:	4b07      	ldr	r3, [pc, #28]	; (800aa98 <vTaskPlaceOnEventList+0x44>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	3318      	adds	r3, #24
 800aa80:	4619      	mov	r1, r3
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f7fe fc45 	bl	8009312 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aa88:	2101      	movs	r1, #1
 800aa8a:	6838      	ldr	r0, [r7, #0]
 800aa8c:	f000 fa80 	bl	800af90 <prvAddCurrentTaskToDelayedList>
}
 800aa90:	bf00      	nop
 800aa92:	3710      	adds	r7, #16
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}
 800aa98:	240048bc 	.word	0x240048bc

0800aa9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b086      	sub	sp, #24
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	60f8      	str	r0, [r7, #12]
 800aaa4:	60b9      	str	r1, [r7, #8]
 800aaa6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d10a      	bne.n	800aac4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800aaae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab2:	f383 8811 	msr	BASEPRI, r3
 800aab6:	f3bf 8f6f 	isb	sy
 800aaba:	f3bf 8f4f 	dsb	sy
 800aabe:	617b      	str	r3, [r7, #20]
}
 800aac0:	bf00      	nop
 800aac2:	e7fe      	b.n	800aac2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aac4:	4b0a      	ldr	r3, [pc, #40]	; (800aaf0 <vTaskPlaceOnEventListRestricted+0x54>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	3318      	adds	r3, #24
 800aaca:	4619      	mov	r1, r3
 800aacc:	68f8      	ldr	r0, [r7, #12]
 800aace:	f7fe fbfc 	bl	80092ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d002      	beq.n	800aade <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800aad8:	f04f 33ff 	mov.w	r3, #4294967295
 800aadc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800aade:	6879      	ldr	r1, [r7, #4]
 800aae0:	68b8      	ldr	r0, [r7, #8]
 800aae2:	f000 fa55 	bl	800af90 <prvAddCurrentTaskToDelayedList>
	}
 800aae6:	bf00      	nop
 800aae8:	3718      	adds	r7, #24
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
 800aaee:	bf00      	nop
 800aaf0:	240048bc 	.word	0x240048bc

0800aaf4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b086      	sub	sp, #24
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	68db      	ldr	r3, [r3, #12]
 800ab00:	68db      	ldr	r3, [r3, #12]
 800ab02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d10a      	bne.n	800ab20 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ab0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab0e:	f383 8811 	msr	BASEPRI, r3
 800ab12:	f3bf 8f6f 	isb	sy
 800ab16:	f3bf 8f4f 	dsb	sy
 800ab1a:	60fb      	str	r3, [r7, #12]
}
 800ab1c:	bf00      	nop
 800ab1e:	e7fe      	b.n	800ab1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	3318      	adds	r3, #24
 800ab24:	4618      	mov	r0, r3
 800ab26:	f7fe fc2d 	bl	8009384 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab2a:	4b1e      	ldr	r3, [pc, #120]	; (800aba4 <xTaskRemoveFromEventList+0xb0>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d11d      	bne.n	800ab6e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ab32:	693b      	ldr	r3, [r7, #16]
 800ab34:	3304      	adds	r3, #4
 800ab36:	4618      	mov	r0, r3
 800ab38:	f7fe fc24 	bl	8009384 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab40:	4b19      	ldr	r3, [pc, #100]	; (800aba8 <xTaskRemoveFromEventList+0xb4>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d903      	bls.n	800ab50 <xTaskRemoveFromEventList+0x5c>
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab4c:	4a16      	ldr	r2, [pc, #88]	; (800aba8 <xTaskRemoveFromEventList+0xb4>)
 800ab4e:	6013      	str	r3, [r2, #0]
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab54:	4613      	mov	r3, r2
 800ab56:	009b      	lsls	r3, r3, #2
 800ab58:	4413      	add	r3, r2
 800ab5a:	009b      	lsls	r3, r3, #2
 800ab5c:	4a13      	ldr	r2, [pc, #76]	; (800abac <xTaskRemoveFromEventList+0xb8>)
 800ab5e:	441a      	add	r2, r3
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	3304      	adds	r3, #4
 800ab64:	4619      	mov	r1, r3
 800ab66:	4610      	mov	r0, r2
 800ab68:	f7fe fbaf 	bl	80092ca <vListInsertEnd>
 800ab6c:	e005      	b.n	800ab7a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ab6e:	693b      	ldr	r3, [r7, #16]
 800ab70:	3318      	adds	r3, #24
 800ab72:	4619      	mov	r1, r3
 800ab74:	480e      	ldr	r0, [pc, #56]	; (800abb0 <xTaskRemoveFromEventList+0xbc>)
 800ab76:	f7fe fba8 	bl	80092ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab7e:	4b0d      	ldr	r3, [pc, #52]	; (800abb4 <xTaskRemoveFromEventList+0xc0>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d905      	bls.n	800ab94 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ab88:	2301      	movs	r3, #1
 800ab8a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ab8c:	4b0a      	ldr	r3, [pc, #40]	; (800abb8 <xTaskRemoveFromEventList+0xc4>)
 800ab8e:	2201      	movs	r2, #1
 800ab90:	601a      	str	r2, [r3, #0]
 800ab92:	e001      	b.n	800ab98 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ab94:	2300      	movs	r3, #0
 800ab96:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ab98:	697b      	ldr	r3, [r7, #20]
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3718      	adds	r7, #24
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	bf00      	nop
 800aba4:	24004db8 	.word	0x24004db8
 800aba8:	24004d98 	.word	0x24004d98
 800abac:	240048c0 	.word	0x240048c0
 800abb0:	24004d50 	.word	0x24004d50
 800abb4:	240048bc 	.word	0x240048bc
 800abb8:	24004da4 	.word	0x24004da4

0800abbc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800abbc:	b480      	push	{r7}
 800abbe:	b083      	sub	sp, #12
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800abc4:	4b06      	ldr	r3, [pc, #24]	; (800abe0 <vTaskInternalSetTimeOutState+0x24>)
 800abc6:	681a      	ldr	r2, [r3, #0]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800abcc:	4b05      	ldr	r3, [pc, #20]	; (800abe4 <vTaskInternalSetTimeOutState+0x28>)
 800abce:	681a      	ldr	r2, [r3, #0]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	605a      	str	r2, [r3, #4]
}
 800abd4:	bf00      	nop
 800abd6:	370c      	adds	r7, #12
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr
 800abe0:	24004da8 	.word	0x24004da8
 800abe4:	24004d94 	.word	0x24004d94

0800abe8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b088      	sub	sp, #32
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d10a      	bne.n	800ac0e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800abf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abfc:	f383 8811 	msr	BASEPRI, r3
 800ac00:	f3bf 8f6f 	isb	sy
 800ac04:	f3bf 8f4f 	dsb	sy
 800ac08:	613b      	str	r3, [r7, #16]
}
 800ac0a:	bf00      	nop
 800ac0c:	e7fe      	b.n	800ac0c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d10a      	bne.n	800ac2a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ac14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac18:	f383 8811 	msr	BASEPRI, r3
 800ac1c:	f3bf 8f6f 	isb	sy
 800ac20:	f3bf 8f4f 	dsb	sy
 800ac24:	60fb      	str	r3, [r7, #12]
}
 800ac26:	bf00      	nop
 800ac28:	e7fe      	b.n	800ac28 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ac2a:	f7fe fd03 	bl	8009634 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ac2e:	4b1d      	ldr	r3, [pc, #116]	; (800aca4 <xTaskCheckForTimeOut+0xbc>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	69ba      	ldr	r2, [r7, #24]
 800ac3a:	1ad3      	subs	r3, r2, r3
 800ac3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac46:	d102      	bne.n	800ac4e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	61fb      	str	r3, [r7, #28]
 800ac4c:	e023      	b.n	800ac96 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681a      	ldr	r2, [r3, #0]
 800ac52:	4b15      	ldr	r3, [pc, #84]	; (800aca8 <xTaskCheckForTimeOut+0xc0>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	429a      	cmp	r2, r3
 800ac58:	d007      	beq.n	800ac6a <xTaskCheckForTimeOut+0x82>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	69ba      	ldr	r2, [r7, #24]
 800ac60:	429a      	cmp	r2, r3
 800ac62:	d302      	bcc.n	800ac6a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ac64:	2301      	movs	r3, #1
 800ac66:	61fb      	str	r3, [r7, #28]
 800ac68:	e015      	b.n	800ac96 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	697a      	ldr	r2, [r7, #20]
 800ac70:	429a      	cmp	r2, r3
 800ac72:	d20b      	bcs.n	800ac8c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	681a      	ldr	r2, [r3, #0]
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	1ad2      	subs	r2, r2, r3
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f7ff ff9b 	bl	800abbc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ac86:	2300      	movs	r3, #0
 800ac88:	61fb      	str	r3, [r7, #28]
 800ac8a:	e004      	b.n	800ac96 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ac92:	2301      	movs	r3, #1
 800ac94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ac96:	f7fe fcfd 	bl	8009694 <vPortExitCritical>

	return xReturn;
 800ac9a:	69fb      	ldr	r3, [r7, #28]
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3720      	adds	r7, #32
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}
 800aca4:	24004d94 	.word	0x24004d94
 800aca8:	24004da8 	.word	0x24004da8

0800acac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800acac:	b480      	push	{r7}
 800acae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800acb0:	4b03      	ldr	r3, [pc, #12]	; (800acc0 <vTaskMissedYield+0x14>)
 800acb2:	2201      	movs	r2, #1
 800acb4:	601a      	str	r2, [r3, #0]
}
 800acb6:	bf00      	nop
 800acb8:	46bd      	mov	sp, r7
 800acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbe:	4770      	bx	lr
 800acc0:	24004da4 	.word	0x24004da4

0800acc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b082      	sub	sp, #8
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800accc:	f000 f852 	bl	800ad74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800acd0:	4b06      	ldr	r3, [pc, #24]	; (800acec <prvIdleTask+0x28>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d9f9      	bls.n	800accc <prvIdleTask+0x8>
			{
				taskYIELD();
 800acd8:	4b05      	ldr	r3, [pc, #20]	; (800acf0 <prvIdleTask+0x2c>)
 800acda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acde:	601a      	str	r2, [r3, #0]
 800ace0:	f3bf 8f4f 	dsb	sy
 800ace4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ace8:	e7f0      	b.n	800accc <prvIdleTask+0x8>
 800acea:	bf00      	nop
 800acec:	240048c0 	.word	0x240048c0
 800acf0:	e000ed04 	.word	0xe000ed04

0800acf4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b082      	sub	sp, #8
 800acf8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800acfa:	2300      	movs	r3, #0
 800acfc:	607b      	str	r3, [r7, #4]
 800acfe:	e00c      	b.n	800ad1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ad00:	687a      	ldr	r2, [r7, #4]
 800ad02:	4613      	mov	r3, r2
 800ad04:	009b      	lsls	r3, r3, #2
 800ad06:	4413      	add	r3, r2
 800ad08:	009b      	lsls	r3, r3, #2
 800ad0a:	4a12      	ldr	r2, [pc, #72]	; (800ad54 <prvInitialiseTaskLists+0x60>)
 800ad0c:	4413      	add	r3, r2
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f7fe faae 	bl	8009270 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	3301      	adds	r3, #1
 800ad18:	607b      	str	r3, [r7, #4]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2b37      	cmp	r3, #55	; 0x37
 800ad1e:	d9ef      	bls.n	800ad00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ad20:	480d      	ldr	r0, [pc, #52]	; (800ad58 <prvInitialiseTaskLists+0x64>)
 800ad22:	f7fe faa5 	bl	8009270 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ad26:	480d      	ldr	r0, [pc, #52]	; (800ad5c <prvInitialiseTaskLists+0x68>)
 800ad28:	f7fe faa2 	bl	8009270 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ad2c:	480c      	ldr	r0, [pc, #48]	; (800ad60 <prvInitialiseTaskLists+0x6c>)
 800ad2e:	f7fe fa9f 	bl	8009270 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ad32:	480c      	ldr	r0, [pc, #48]	; (800ad64 <prvInitialiseTaskLists+0x70>)
 800ad34:	f7fe fa9c 	bl	8009270 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ad38:	480b      	ldr	r0, [pc, #44]	; (800ad68 <prvInitialiseTaskLists+0x74>)
 800ad3a:	f7fe fa99 	bl	8009270 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ad3e:	4b0b      	ldr	r3, [pc, #44]	; (800ad6c <prvInitialiseTaskLists+0x78>)
 800ad40:	4a05      	ldr	r2, [pc, #20]	; (800ad58 <prvInitialiseTaskLists+0x64>)
 800ad42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ad44:	4b0a      	ldr	r3, [pc, #40]	; (800ad70 <prvInitialiseTaskLists+0x7c>)
 800ad46:	4a05      	ldr	r2, [pc, #20]	; (800ad5c <prvInitialiseTaskLists+0x68>)
 800ad48:	601a      	str	r2, [r3, #0]
}
 800ad4a:	bf00      	nop
 800ad4c:	3708      	adds	r7, #8
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
 800ad52:	bf00      	nop
 800ad54:	240048c0 	.word	0x240048c0
 800ad58:	24004d20 	.word	0x24004d20
 800ad5c:	24004d34 	.word	0x24004d34
 800ad60:	24004d50 	.word	0x24004d50
 800ad64:	24004d64 	.word	0x24004d64
 800ad68:	24004d7c 	.word	0x24004d7c
 800ad6c:	24004d48 	.word	0x24004d48
 800ad70:	24004d4c 	.word	0x24004d4c

0800ad74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ad7a:	e019      	b.n	800adb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ad7c:	f7fe fc5a 	bl	8009634 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad80:	4b10      	ldr	r3, [pc, #64]	; (800adc4 <prvCheckTasksWaitingTermination+0x50>)
 800ad82:	68db      	ldr	r3, [r3, #12]
 800ad84:	68db      	ldr	r3, [r3, #12]
 800ad86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	3304      	adds	r3, #4
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f7fe faf9 	bl	8009384 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ad92:	4b0d      	ldr	r3, [pc, #52]	; (800adc8 <prvCheckTasksWaitingTermination+0x54>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	3b01      	subs	r3, #1
 800ad98:	4a0b      	ldr	r2, [pc, #44]	; (800adc8 <prvCheckTasksWaitingTermination+0x54>)
 800ad9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ad9c:	4b0b      	ldr	r3, [pc, #44]	; (800adcc <prvCheckTasksWaitingTermination+0x58>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	3b01      	subs	r3, #1
 800ada2:	4a0a      	ldr	r2, [pc, #40]	; (800adcc <prvCheckTasksWaitingTermination+0x58>)
 800ada4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ada6:	f7fe fc75 	bl	8009694 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f000 f810 	bl	800add0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800adb0:	4b06      	ldr	r3, [pc, #24]	; (800adcc <prvCheckTasksWaitingTermination+0x58>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d1e1      	bne.n	800ad7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800adb8:	bf00      	nop
 800adba:	bf00      	nop
 800adbc:	3708      	adds	r7, #8
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}
 800adc2:	bf00      	nop
 800adc4:	24004d64 	.word	0x24004d64
 800adc8:	24004d90 	.word	0x24004d90
 800adcc:	24004d78 	.word	0x24004d78

0800add0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800add0:	b580      	push	{r7, lr}
 800add2:	b084      	sub	sp, #16
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	3354      	adds	r3, #84	; 0x54
 800addc:	4618      	mov	r0, r3
 800adde:	f000 fe6d 	bl	800babc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d108      	bne.n	800adfe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adf0:	4618      	mov	r0, r3
 800adf2:	f7fe f91f 	bl	8009034 <vPortFree>
				vPortFree( pxTCB );
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f7fe f91c 	bl	8009034 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800adfc:	e018      	b.n	800ae30 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	d103      	bne.n	800ae10 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f7fe f913 	bl	8009034 <vPortFree>
	}
 800ae0e:	e00f      	b.n	800ae30 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ae16:	2b02      	cmp	r3, #2
 800ae18:	d00a      	beq.n	800ae30 <prvDeleteTCB+0x60>
	__asm volatile
 800ae1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae1e:	f383 8811 	msr	BASEPRI, r3
 800ae22:	f3bf 8f6f 	isb	sy
 800ae26:	f3bf 8f4f 	dsb	sy
 800ae2a:	60fb      	str	r3, [r7, #12]
}
 800ae2c:	bf00      	nop
 800ae2e:	e7fe      	b.n	800ae2e <prvDeleteTCB+0x5e>
	}
 800ae30:	bf00      	nop
 800ae32:	3710      	adds	r7, #16
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}

0800ae38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b083      	sub	sp, #12
 800ae3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae3e:	4b0c      	ldr	r3, [pc, #48]	; (800ae70 <prvResetNextTaskUnblockTime+0x38>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d104      	bne.n	800ae52 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ae48:	4b0a      	ldr	r3, [pc, #40]	; (800ae74 <prvResetNextTaskUnblockTime+0x3c>)
 800ae4a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae4e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ae50:	e008      	b.n	800ae64 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae52:	4b07      	ldr	r3, [pc, #28]	; (800ae70 <prvResetNextTaskUnblockTime+0x38>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	68db      	ldr	r3, [r3, #12]
 800ae58:	68db      	ldr	r3, [r3, #12]
 800ae5a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	4a04      	ldr	r2, [pc, #16]	; (800ae74 <prvResetNextTaskUnblockTime+0x3c>)
 800ae62:	6013      	str	r3, [r2, #0]
}
 800ae64:	bf00      	nop
 800ae66:	370c      	adds	r7, #12
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr
 800ae70:	24004d48 	.word	0x24004d48
 800ae74:	24004db0 	.word	0x24004db0

0800ae78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ae78:	b480      	push	{r7}
 800ae7a:	b083      	sub	sp, #12
 800ae7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ae7e:	4b0b      	ldr	r3, [pc, #44]	; (800aeac <xTaskGetSchedulerState+0x34>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d102      	bne.n	800ae8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ae86:	2301      	movs	r3, #1
 800ae88:	607b      	str	r3, [r7, #4]
 800ae8a:	e008      	b.n	800ae9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae8c:	4b08      	ldr	r3, [pc, #32]	; (800aeb0 <xTaskGetSchedulerState+0x38>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d102      	bne.n	800ae9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ae94:	2302      	movs	r3, #2
 800ae96:	607b      	str	r3, [r7, #4]
 800ae98:	e001      	b.n	800ae9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ae9e:	687b      	ldr	r3, [r7, #4]
	}
 800aea0:	4618      	mov	r0, r3
 800aea2:	370c      	adds	r7, #12
 800aea4:	46bd      	mov	sp, r7
 800aea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeaa:	4770      	bx	lr
 800aeac:	24004d9c 	.word	0x24004d9c
 800aeb0:	24004db8 	.word	0x24004db8

0800aeb4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b086      	sub	sp, #24
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800aec0:	2300      	movs	r3, #0
 800aec2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d056      	beq.n	800af78 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800aeca:	4b2e      	ldr	r3, [pc, #184]	; (800af84 <xTaskPriorityDisinherit+0xd0>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	693a      	ldr	r2, [r7, #16]
 800aed0:	429a      	cmp	r2, r3
 800aed2:	d00a      	beq.n	800aeea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800aed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed8:	f383 8811 	msr	BASEPRI, r3
 800aedc:	f3bf 8f6f 	isb	sy
 800aee0:	f3bf 8f4f 	dsb	sy
 800aee4:	60fb      	str	r3, [r7, #12]
}
 800aee6:	bf00      	nop
 800aee8:	e7fe      	b.n	800aee8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800aeea:	693b      	ldr	r3, [r7, #16]
 800aeec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d10a      	bne.n	800af08 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800aef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef6:	f383 8811 	msr	BASEPRI, r3
 800aefa:	f3bf 8f6f 	isb	sy
 800aefe:	f3bf 8f4f 	dsb	sy
 800af02:	60bb      	str	r3, [r7, #8]
}
 800af04:	bf00      	nop
 800af06:	e7fe      	b.n	800af06 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af0c:	1e5a      	subs	r2, r3, #1
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af1a:	429a      	cmp	r2, r3
 800af1c:	d02c      	beq.n	800af78 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800af1e:	693b      	ldr	r3, [r7, #16]
 800af20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af22:	2b00      	cmp	r3, #0
 800af24:	d128      	bne.n	800af78 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af26:	693b      	ldr	r3, [r7, #16]
 800af28:	3304      	adds	r3, #4
 800af2a:	4618      	mov	r0, r3
 800af2c:	f7fe fa2a 	bl	8009384 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af3c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800af44:	693b      	ldr	r3, [r7, #16]
 800af46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af48:	4b0f      	ldr	r3, [pc, #60]	; (800af88 <xTaskPriorityDisinherit+0xd4>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	429a      	cmp	r2, r3
 800af4e:	d903      	bls.n	800af58 <xTaskPriorityDisinherit+0xa4>
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af54:	4a0c      	ldr	r2, [pc, #48]	; (800af88 <xTaskPriorityDisinherit+0xd4>)
 800af56:	6013      	str	r3, [r2, #0]
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af5c:	4613      	mov	r3, r2
 800af5e:	009b      	lsls	r3, r3, #2
 800af60:	4413      	add	r3, r2
 800af62:	009b      	lsls	r3, r3, #2
 800af64:	4a09      	ldr	r2, [pc, #36]	; (800af8c <xTaskPriorityDisinherit+0xd8>)
 800af66:	441a      	add	r2, r3
 800af68:	693b      	ldr	r3, [r7, #16]
 800af6a:	3304      	adds	r3, #4
 800af6c:	4619      	mov	r1, r3
 800af6e:	4610      	mov	r0, r2
 800af70:	f7fe f9ab 	bl	80092ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800af74:	2301      	movs	r3, #1
 800af76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800af78:	697b      	ldr	r3, [r7, #20]
	}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3718      	adds	r7, #24
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}
 800af82:	bf00      	nop
 800af84:	240048bc 	.word	0x240048bc
 800af88:	24004d98 	.word	0x24004d98
 800af8c:	240048c0 	.word	0x240048c0

0800af90 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b084      	sub	sp, #16
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800af9a:	4b21      	ldr	r3, [pc, #132]	; (800b020 <prvAddCurrentTaskToDelayedList+0x90>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800afa0:	4b20      	ldr	r3, [pc, #128]	; (800b024 <prvAddCurrentTaskToDelayedList+0x94>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	3304      	adds	r3, #4
 800afa6:	4618      	mov	r0, r3
 800afa8:	f7fe f9ec 	bl	8009384 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afb2:	d10a      	bne.n	800afca <prvAddCurrentTaskToDelayedList+0x3a>
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d007      	beq.n	800afca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800afba:	4b1a      	ldr	r3, [pc, #104]	; (800b024 <prvAddCurrentTaskToDelayedList+0x94>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	3304      	adds	r3, #4
 800afc0:	4619      	mov	r1, r3
 800afc2:	4819      	ldr	r0, [pc, #100]	; (800b028 <prvAddCurrentTaskToDelayedList+0x98>)
 800afc4:	f7fe f981 	bl	80092ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800afc8:	e026      	b.n	800b018 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800afca:	68fa      	ldr	r2, [r7, #12]
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	4413      	add	r3, r2
 800afd0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800afd2:	4b14      	ldr	r3, [pc, #80]	; (800b024 <prvAddCurrentTaskToDelayedList+0x94>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	68ba      	ldr	r2, [r7, #8]
 800afd8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800afda:	68ba      	ldr	r2, [r7, #8]
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	429a      	cmp	r2, r3
 800afe0:	d209      	bcs.n	800aff6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800afe2:	4b12      	ldr	r3, [pc, #72]	; (800b02c <prvAddCurrentTaskToDelayedList+0x9c>)
 800afe4:	681a      	ldr	r2, [r3, #0]
 800afe6:	4b0f      	ldr	r3, [pc, #60]	; (800b024 <prvAddCurrentTaskToDelayedList+0x94>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	3304      	adds	r3, #4
 800afec:	4619      	mov	r1, r3
 800afee:	4610      	mov	r0, r2
 800aff0:	f7fe f98f 	bl	8009312 <vListInsert>
}
 800aff4:	e010      	b.n	800b018 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aff6:	4b0e      	ldr	r3, [pc, #56]	; (800b030 <prvAddCurrentTaskToDelayedList+0xa0>)
 800aff8:	681a      	ldr	r2, [r3, #0]
 800affa:	4b0a      	ldr	r3, [pc, #40]	; (800b024 <prvAddCurrentTaskToDelayedList+0x94>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	3304      	adds	r3, #4
 800b000:	4619      	mov	r1, r3
 800b002:	4610      	mov	r0, r2
 800b004:	f7fe f985 	bl	8009312 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b008:	4b0a      	ldr	r3, [pc, #40]	; (800b034 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	68ba      	ldr	r2, [r7, #8]
 800b00e:	429a      	cmp	r2, r3
 800b010:	d202      	bcs.n	800b018 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b012:	4a08      	ldr	r2, [pc, #32]	; (800b034 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	6013      	str	r3, [r2, #0]
}
 800b018:	bf00      	nop
 800b01a:	3710      	adds	r7, #16
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}
 800b020:	24004d94 	.word	0x24004d94
 800b024:	240048bc 	.word	0x240048bc
 800b028:	24004d7c 	.word	0x24004d7c
 800b02c:	24004d4c 	.word	0x24004d4c
 800b030:	24004d48 	.word	0x24004d48
 800b034:	24004db0 	.word	0x24004db0

0800b038 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b08a      	sub	sp, #40	; 0x28
 800b03c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b03e:	2300      	movs	r3, #0
 800b040:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b042:	f000 fb07 	bl	800b654 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b046:	4b1c      	ldr	r3, [pc, #112]	; (800b0b8 <xTimerCreateTimerTask+0x80>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d021      	beq.n	800b092 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b04e:	2300      	movs	r3, #0
 800b050:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b052:	2300      	movs	r3, #0
 800b054:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b056:	1d3a      	adds	r2, r7, #4
 800b058:	f107 0108 	add.w	r1, r7, #8
 800b05c:	f107 030c 	add.w	r3, r7, #12
 800b060:	4618      	mov	r0, r3
 800b062:	f7fd ff01 	bl	8008e68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b066:	6879      	ldr	r1, [r7, #4]
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	68fa      	ldr	r2, [r7, #12]
 800b06c:	9202      	str	r2, [sp, #8]
 800b06e:	9301      	str	r3, [sp, #4]
 800b070:	2302      	movs	r3, #2
 800b072:	9300      	str	r3, [sp, #0]
 800b074:	2300      	movs	r3, #0
 800b076:	460a      	mov	r2, r1
 800b078:	4910      	ldr	r1, [pc, #64]	; (800b0bc <xTimerCreateTimerTask+0x84>)
 800b07a:	4811      	ldr	r0, [pc, #68]	; (800b0c0 <xTimerCreateTimerTask+0x88>)
 800b07c:	f7ff f8e8 	bl	800a250 <xTaskCreateStatic>
 800b080:	4603      	mov	r3, r0
 800b082:	4a10      	ldr	r2, [pc, #64]	; (800b0c4 <xTimerCreateTimerTask+0x8c>)
 800b084:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b086:	4b0f      	ldr	r3, [pc, #60]	; (800b0c4 <xTimerCreateTimerTask+0x8c>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d001      	beq.n	800b092 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b08e:	2301      	movs	r3, #1
 800b090:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d10a      	bne.n	800b0ae <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b09c:	f383 8811 	msr	BASEPRI, r3
 800b0a0:	f3bf 8f6f 	isb	sy
 800b0a4:	f3bf 8f4f 	dsb	sy
 800b0a8:	613b      	str	r3, [r7, #16]
}
 800b0aa:	bf00      	nop
 800b0ac:	e7fe      	b.n	800b0ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b0ae:	697b      	ldr	r3, [r7, #20]
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3718      	adds	r7, #24
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}
 800b0b8:	24004dec 	.word	0x24004dec
 800b0bc:	0800d0a0 	.word	0x0800d0a0
 800b0c0:	0800b1fd 	.word	0x0800b1fd
 800b0c4:	24004df0 	.word	0x24004df0

0800b0c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b08a      	sub	sp, #40	; 0x28
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	60f8      	str	r0, [r7, #12]
 800b0d0:	60b9      	str	r1, [r7, #8]
 800b0d2:	607a      	str	r2, [r7, #4]
 800b0d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d10a      	bne.n	800b0f6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e4:	f383 8811 	msr	BASEPRI, r3
 800b0e8:	f3bf 8f6f 	isb	sy
 800b0ec:	f3bf 8f4f 	dsb	sy
 800b0f0:	623b      	str	r3, [r7, #32]
}
 800b0f2:	bf00      	nop
 800b0f4:	e7fe      	b.n	800b0f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b0f6:	4b1a      	ldr	r3, [pc, #104]	; (800b160 <xTimerGenericCommand+0x98>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d02a      	beq.n	800b154 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	2b05      	cmp	r3, #5
 800b10e:	dc18      	bgt.n	800b142 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b110:	f7ff feb2 	bl	800ae78 <xTaskGetSchedulerState>
 800b114:	4603      	mov	r3, r0
 800b116:	2b02      	cmp	r3, #2
 800b118:	d109      	bne.n	800b12e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b11a:	4b11      	ldr	r3, [pc, #68]	; (800b160 <xTimerGenericCommand+0x98>)
 800b11c:	6818      	ldr	r0, [r3, #0]
 800b11e:	f107 0110 	add.w	r1, r7, #16
 800b122:	2300      	movs	r3, #0
 800b124:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b126:	f7fe fcab 	bl	8009a80 <xQueueGenericSend>
 800b12a:	6278      	str	r0, [r7, #36]	; 0x24
 800b12c:	e012      	b.n	800b154 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b12e:	4b0c      	ldr	r3, [pc, #48]	; (800b160 <xTimerGenericCommand+0x98>)
 800b130:	6818      	ldr	r0, [r3, #0]
 800b132:	f107 0110 	add.w	r1, r7, #16
 800b136:	2300      	movs	r3, #0
 800b138:	2200      	movs	r2, #0
 800b13a:	f7fe fca1 	bl	8009a80 <xQueueGenericSend>
 800b13e:	6278      	str	r0, [r7, #36]	; 0x24
 800b140:	e008      	b.n	800b154 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b142:	4b07      	ldr	r3, [pc, #28]	; (800b160 <xTimerGenericCommand+0x98>)
 800b144:	6818      	ldr	r0, [r3, #0]
 800b146:	f107 0110 	add.w	r1, r7, #16
 800b14a:	2300      	movs	r3, #0
 800b14c:	683a      	ldr	r2, [r7, #0]
 800b14e:	f7fe fd95 	bl	8009c7c <xQueueGenericSendFromISR>
 800b152:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b156:	4618      	mov	r0, r3
 800b158:	3728      	adds	r7, #40	; 0x28
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
 800b15e:	bf00      	nop
 800b160:	24004dec 	.word	0x24004dec

0800b164 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b088      	sub	sp, #32
 800b168:	af02      	add	r7, sp, #8
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b16e:	4b22      	ldr	r3, [pc, #136]	; (800b1f8 <prvProcessExpiredTimer+0x94>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	68db      	ldr	r3, [r3, #12]
 800b174:	68db      	ldr	r3, [r3, #12]
 800b176:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	3304      	adds	r3, #4
 800b17c:	4618      	mov	r0, r3
 800b17e:	f7fe f901 	bl	8009384 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b188:	f003 0304 	and.w	r3, r3, #4
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d022      	beq.n	800b1d6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	699a      	ldr	r2, [r3, #24]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	18d1      	adds	r1, r2, r3
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	683a      	ldr	r2, [r7, #0]
 800b19c:	6978      	ldr	r0, [r7, #20]
 800b19e:	f000 f8d1 	bl	800b344 <prvInsertTimerInActiveList>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d01f      	beq.n	800b1e8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	9300      	str	r3, [sp, #0]
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	687a      	ldr	r2, [r7, #4]
 800b1b0:	2100      	movs	r1, #0
 800b1b2:	6978      	ldr	r0, [r7, #20]
 800b1b4:	f7ff ff88 	bl	800b0c8 <xTimerGenericCommand>
 800b1b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d113      	bne.n	800b1e8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c4:	f383 8811 	msr	BASEPRI, r3
 800b1c8:	f3bf 8f6f 	isb	sy
 800b1cc:	f3bf 8f4f 	dsb	sy
 800b1d0:	60fb      	str	r3, [r7, #12]
}
 800b1d2:	bf00      	nop
 800b1d4:	e7fe      	b.n	800b1d4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1dc:	f023 0301 	bic.w	r3, r3, #1
 800b1e0:	b2da      	uxtb	r2, r3
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	6a1b      	ldr	r3, [r3, #32]
 800b1ec:	6978      	ldr	r0, [r7, #20]
 800b1ee:	4798      	blx	r3
}
 800b1f0:	bf00      	nop
 800b1f2:	3718      	adds	r7, #24
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}
 800b1f8:	24004de4 	.word	0x24004de4

0800b1fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b084      	sub	sp, #16
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b204:	f107 0308 	add.w	r3, r7, #8
 800b208:	4618      	mov	r0, r3
 800b20a:	f000 f857 	bl	800b2bc <prvGetNextExpireTime>
 800b20e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	4619      	mov	r1, r3
 800b214:	68f8      	ldr	r0, [r7, #12]
 800b216:	f000 f803 	bl	800b220 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b21a:	f000 f8d5 	bl	800b3c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b21e:	e7f1      	b.n	800b204 <prvTimerTask+0x8>

0800b220 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b084      	sub	sp, #16
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
 800b228:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b22a:	f7ff fa39 	bl	800a6a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b22e:	f107 0308 	add.w	r3, r7, #8
 800b232:	4618      	mov	r0, r3
 800b234:	f000 f866 	bl	800b304 <prvSampleTimeNow>
 800b238:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d130      	bne.n	800b2a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d10a      	bne.n	800b25c <prvProcessTimerOrBlockTask+0x3c>
 800b246:	687a      	ldr	r2, [r7, #4]
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	429a      	cmp	r2, r3
 800b24c:	d806      	bhi.n	800b25c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b24e:	f7ff fa35 	bl	800a6bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b252:	68f9      	ldr	r1, [r7, #12]
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f7ff ff85 	bl	800b164 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b25a:	e024      	b.n	800b2a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d008      	beq.n	800b274 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b262:	4b13      	ldr	r3, [pc, #76]	; (800b2b0 <prvProcessTimerOrBlockTask+0x90>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d101      	bne.n	800b270 <prvProcessTimerOrBlockTask+0x50>
 800b26c:	2301      	movs	r3, #1
 800b26e:	e000      	b.n	800b272 <prvProcessTimerOrBlockTask+0x52>
 800b270:	2300      	movs	r3, #0
 800b272:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b274:	4b0f      	ldr	r3, [pc, #60]	; (800b2b4 <prvProcessTimerOrBlockTask+0x94>)
 800b276:	6818      	ldr	r0, [r3, #0]
 800b278:	687a      	ldr	r2, [r7, #4]
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	1ad3      	subs	r3, r2, r3
 800b27e:	683a      	ldr	r2, [r7, #0]
 800b280:	4619      	mov	r1, r3
 800b282:	f7fe ffb1 	bl	800a1e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b286:	f7ff fa19 	bl	800a6bc <xTaskResumeAll>
 800b28a:	4603      	mov	r3, r0
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d10a      	bne.n	800b2a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b290:	4b09      	ldr	r3, [pc, #36]	; (800b2b8 <prvProcessTimerOrBlockTask+0x98>)
 800b292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b296:	601a      	str	r2, [r3, #0]
 800b298:	f3bf 8f4f 	dsb	sy
 800b29c:	f3bf 8f6f 	isb	sy
}
 800b2a0:	e001      	b.n	800b2a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b2a2:	f7ff fa0b 	bl	800a6bc <xTaskResumeAll>
}
 800b2a6:	bf00      	nop
 800b2a8:	3710      	adds	r7, #16
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
 800b2ae:	bf00      	nop
 800b2b0:	24004de8 	.word	0x24004de8
 800b2b4:	24004dec 	.word	0x24004dec
 800b2b8:	e000ed04 	.word	0xe000ed04

0800b2bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b085      	sub	sp, #20
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b2c4:	4b0e      	ldr	r3, [pc, #56]	; (800b300 <prvGetNextExpireTime+0x44>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d101      	bne.n	800b2d2 <prvGetNextExpireTime+0x16>
 800b2ce:	2201      	movs	r2, #1
 800b2d0:	e000      	b.n	800b2d4 <prvGetNextExpireTime+0x18>
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d105      	bne.n	800b2ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b2e0:	4b07      	ldr	r3, [pc, #28]	; (800b300 <prvGetNextExpireTime+0x44>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	68db      	ldr	r3, [r3, #12]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	60fb      	str	r3, [r7, #12]
 800b2ea:	e001      	b.n	800b2f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3714      	adds	r7, #20
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fc:	4770      	bx	lr
 800b2fe:	bf00      	nop
 800b300:	24004de4 	.word	0x24004de4

0800b304 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b084      	sub	sp, #16
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b30c:	f7ff fa74 	bl	800a7f8 <xTaskGetTickCount>
 800b310:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b312:	4b0b      	ldr	r3, [pc, #44]	; (800b340 <prvSampleTimeNow+0x3c>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	68fa      	ldr	r2, [r7, #12]
 800b318:	429a      	cmp	r2, r3
 800b31a:	d205      	bcs.n	800b328 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b31c:	f000 f936 	bl	800b58c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2201      	movs	r2, #1
 800b324:	601a      	str	r2, [r3, #0]
 800b326:	e002      	b.n	800b32e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2200      	movs	r2, #0
 800b32c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b32e:	4a04      	ldr	r2, [pc, #16]	; (800b340 <prvSampleTimeNow+0x3c>)
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b334:	68fb      	ldr	r3, [r7, #12]
}
 800b336:	4618      	mov	r0, r3
 800b338:	3710      	adds	r7, #16
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
 800b33e:	bf00      	nop
 800b340:	24004df4 	.word	0x24004df4

0800b344 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b086      	sub	sp, #24
 800b348:	af00      	add	r7, sp, #0
 800b34a:	60f8      	str	r0, [r7, #12]
 800b34c:	60b9      	str	r1, [r7, #8]
 800b34e:	607a      	str	r2, [r7, #4]
 800b350:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b352:	2300      	movs	r3, #0
 800b354:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	68ba      	ldr	r2, [r7, #8]
 800b35a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	68fa      	ldr	r2, [r7, #12]
 800b360:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b362:	68ba      	ldr	r2, [r7, #8]
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	429a      	cmp	r2, r3
 800b368:	d812      	bhi.n	800b390 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b36a:	687a      	ldr	r2, [r7, #4]
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	1ad2      	subs	r2, r2, r3
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	699b      	ldr	r3, [r3, #24]
 800b374:	429a      	cmp	r2, r3
 800b376:	d302      	bcc.n	800b37e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b378:	2301      	movs	r3, #1
 800b37a:	617b      	str	r3, [r7, #20]
 800b37c:	e01b      	b.n	800b3b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b37e:	4b10      	ldr	r3, [pc, #64]	; (800b3c0 <prvInsertTimerInActiveList+0x7c>)
 800b380:	681a      	ldr	r2, [r3, #0]
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	3304      	adds	r3, #4
 800b386:	4619      	mov	r1, r3
 800b388:	4610      	mov	r0, r2
 800b38a:	f7fd ffc2 	bl	8009312 <vListInsert>
 800b38e:	e012      	b.n	800b3b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b390:	687a      	ldr	r2, [r7, #4]
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	429a      	cmp	r2, r3
 800b396:	d206      	bcs.n	800b3a6 <prvInsertTimerInActiveList+0x62>
 800b398:	68ba      	ldr	r2, [r7, #8]
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d302      	bcc.n	800b3a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	617b      	str	r3, [r7, #20]
 800b3a4:	e007      	b.n	800b3b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b3a6:	4b07      	ldr	r3, [pc, #28]	; (800b3c4 <prvInsertTimerInActiveList+0x80>)
 800b3a8:	681a      	ldr	r2, [r3, #0]
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	3304      	adds	r3, #4
 800b3ae:	4619      	mov	r1, r3
 800b3b0:	4610      	mov	r0, r2
 800b3b2:	f7fd ffae 	bl	8009312 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b3b6:	697b      	ldr	r3, [r7, #20]
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3718      	adds	r7, #24
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}
 800b3c0:	24004de8 	.word	0x24004de8
 800b3c4:	24004de4 	.word	0x24004de4

0800b3c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b08e      	sub	sp, #56	; 0x38
 800b3cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b3ce:	e0ca      	b.n	800b566 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	da18      	bge.n	800b408 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b3d6:	1d3b      	adds	r3, r7, #4
 800b3d8:	3304      	adds	r3, #4
 800b3da:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d10a      	bne.n	800b3f8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e6:	f383 8811 	msr	BASEPRI, r3
 800b3ea:	f3bf 8f6f 	isb	sy
 800b3ee:	f3bf 8f4f 	dsb	sy
 800b3f2:	61fb      	str	r3, [r7, #28]
}
 800b3f4:	bf00      	nop
 800b3f6:	e7fe      	b.n	800b3f6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3fe:	6850      	ldr	r0, [r2, #4]
 800b400:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b402:	6892      	ldr	r2, [r2, #8]
 800b404:	4611      	mov	r1, r2
 800b406:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	f2c0 80aa 	blt.w	800b564 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b416:	695b      	ldr	r3, [r3, #20]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d004      	beq.n	800b426 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b41e:	3304      	adds	r3, #4
 800b420:	4618      	mov	r0, r3
 800b422:	f7fd ffaf 	bl	8009384 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b426:	463b      	mov	r3, r7
 800b428:	4618      	mov	r0, r3
 800b42a:	f7ff ff6b 	bl	800b304 <prvSampleTimeNow>
 800b42e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2b09      	cmp	r3, #9
 800b434:	f200 8097 	bhi.w	800b566 <prvProcessReceivedCommands+0x19e>
 800b438:	a201      	add	r2, pc, #4	; (adr r2, 800b440 <prvProcessReceivedCommands+0x78>)
 800b43a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b43e:	bf00      	nop
 800b440:	0800b469 	.word	0x0800b469
 800b444:	0800b469 	.word	0x0800b469
 800b448:	0800b469 	.word	0x0800b469
 800b44c:	0800b4dd 	.word	0x0800b4dd
 800b450:	0800b4f1 	.word	0x0800b4f1
 800b454:	0800b53b 	.word	0x0800b53b
 800b458:	0800b469 	.word	0x0800b469
 800b45c:	0800b469 	.word	0x0800b469
 800b460:	0800b4dd 	.word	0x0800b4dd
 800b464:	0800b4f1 	.word	0x0800b4f1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b46a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b46e:	f043 0301 	orr.w	r3, r3, #1
 800b472:	b2da      	uxtb	r2, r3
 800b474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b476:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b47a:	68ba      	ldr	r2, [r7, #8]
 800b47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b47e:	699b      	ldr	r3, [r3, #24]
 800b480:	18d1      	adds	r1, r2, r3
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b486:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b488:	f7ff ff5c 	bl	800b344 <prvInsertTimerInActiveList>
 800b48c:	4603      	mov	r3, r0
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d069      	beq.n	800b566 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b494:	6a1b      	ldr	r3, [r3, #32]
 800b496:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b498:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b49c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b4a0:	f003 0304 	and.w	r3, r3, #4
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d05e      	beq.n	800b566 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b4a8:	68ba      	ldr	r2, [r7, #8]
 800b4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ac:	699b      	ldr	r3, [r3, #24]
 800b4ae:	441a      	add	r2, r3
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	9300      	str	r3, [sp, #0]
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	2100      	movs	r1, #0
 800b4b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b4ba:	f7ff fe05 	bl	800b0c8 <xTimerGenericCommand>
 800b4be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b4c0:	6a3b      	ldr	r3, [r7, #32]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d14f      	bne.n	800b566 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ca:	f383 8811 	msr	BASEPRI, r3
 800b4ce:	f3bf 8f6f 	isb	sy
 800b4d2:	f3bf 8f4f 	dsb	sy
 800b4d6:	61bb      	str	r3, [r7, #24]
}
 800b4d8:	bf00      	nop
 800b4da:	e7fe      	b.n	800b4da <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b4e2:	f023 0301 	bic.w	r3, r3, #1
 800b4e6:	b2da      	uxtb	r2, r3
 800b4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b4ee:	e03a      	b.n	800b566 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b4f6:	f043 0301 	orr.w	r3, r3, #1
 800b4fa:	b2da      	uxtb	r2, r3
 800b4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b502:	68ba      	ldr	r2, [r7, #8]
 800b504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b506:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b50a:	699b      	ldr	r3, [r3, #24]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d10a      	bne.n	800b526 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b514:	f383 8811 	msr	BASEPRI, r3
 800b518:	f3bf 8f6f 	isb	sy
 800b51c:	f3bf 8f4f 	dsb	sy
 800b520:	617b      	str	r3, [r7, #20]
}
 800b522:	bf00      	nop
 800b524:	e7fe      	b.n	800b524 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b528:	699a      	ldr	r2, [r3, #24]
 800b52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b52c:	18d1      	adds	r1, r2, r3
 800b52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b532:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b534:	f7ff ff06 	bl	800b344 <prvInsertTimerInActiveList>
					break;
 800b538:	e015      	b.n	800b566 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b53a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b53c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b540:	f003 0302 	and.w	r3, r3, #2
 800b544:	2b00      	cmp	r3, #0
 800b546:	d103      	bne.n	800b550 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b548:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b54a:	f7fd fd73 	bl	8009034 <vPortFree>
 800b54e:	e00a      	b.n	800b566 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b552:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b556:	f023 0301 	bic.w	r3, r3, #1
 800b55a:	b2da      	uxtb	r2, r3
 800b55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b55e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b562:	e000      	b.n	800b566 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b564:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b566:	4b08      	ldr	r3, [pc, #32]	; (800b588 <prvProcessReceivedCommands+0x1c0>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	1d39      	adds	r1, r7, #4
 800b56c:	2200      	movs	r2, #0
 800b56e:	4618      	mov	r0, r3
 800b570:	f7fe fc20 	bl	8009db4 <xQueueReceive>
 800b574:	4603      	mov	r3, r0
 800b576:	2b00      	cmp	r3, #0
 800b578:	f47f af2a 	bne.w	800b3d0 <prvProcessReceivedCommands+0x8>
	}
}
 800b57c:	bf00      	nop
 800b57e:	bf00      	nop
 800b580:	3730      	adds	r7, #48	; 0x30
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}
 800b586:	bf00      	nop
 800b588:	24004dec 	.word	0x24004dec

0800b58c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b088      	sub	sp, #32
 800b590:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b592:	e048      	b.n	800b626 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b594:	4b2d      	ldr	r3, [pc, #180]	; (800b64c <prvSwitchTimerLists+0xc0>)
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	68db      	ldr	r3, [r3, #12]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b59e:	4b2b      	ldr	r3, [pc, #172]	; (800b64c <prvSwitchTimerLists+0xc0>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	68db      	ldr	r3, [r3, #12]
 800b5a4:	68db      	ldr	r3, [r3, #12]
 800b5a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	3304      	adds	r3, #4
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f7fd fee9 	bl	8009384 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	6a1b      	ldr	r3, [r3, #32]
 800b5b6:	68f8      	ldr	r0, [r7, #12]
 800b5b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b5c0:	f003 0304 	and.w	r3, r3, #4
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d02e      	beq.n	800b626 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	699b      	ldr	r3, [r3, #24]
 800b5cc:	693a      	ldr	r2, [r7, #16]
 800b5ce:	4413      	add	r3, r2
 800b5d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b5d2:	68ba      	ldr	r2, [r7, #8]
 800b5d4:	693b      	ldr	r3, [r7, #16]
 800b5d6:	429a      	cmp	r2, r3
 800b5d8:	d90e      	bls.n	800b5f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	68ba      	ldr	r2, [r7, #8]
 800b5de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	68fa      	ldr	r2, [r7, #12]
 800b5e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b5e6:	4b19      	ldr	r3, [pc, #100]	; (800b64c <prvSwitchTimerLists+0xc0>)
 800b5e8:	681a      	ldr	r2, [r3, #0]
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	3304      	adds	r3, #4
 800b5ee:	4619      	mov	r1, r3
 800b5f0:	4610      	mov	r0, r2
 800b5f2:	f7fd fe8e 	bl	8009312 <vListInsert>
 800b5f6:	e016      	b.n	800b626 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	9300      	str	r3, [sp, #0]
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	693a      	ldr	r2, [r7, #16]
 800b600:	2100      	movs	r1, #0
 800b602:	68f8      	ldr	r0, [r7, #12]
 800b604:	f7ff fd60 	bl	800b0c8 <xTimerGenericCommand>
 800b608:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d10a      	bne.n	800b626 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b614:	f383 8811 	msr	BASEPRI, r3
 800b618:	f3bf 8f6f 	isb	sy
 800b61c:	f3bf 8f4f 	dsb	sy
 800b620:	603b      	str	r3, [r7, #0]
}
 800b622:	bf00      	nop
 800b624:	e7fe      	b.n	800b624 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b626:	4b09      	ldr	r3, [pc, #36]	; (800b64c <prvSwitchTimerLists+0xc0>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d1b1      	bne.n	800b594 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b630:	4b06      	ldr	r3, [pc, #24]	; (800b64c <prvSwitchTimerLists+0xc0>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b636:	4b06      	ldr	r3, [pc, #24]	; (800b650 <prvSwitchTimerLists+0xc4>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	4a04      	ldr	r2, [pc, #16]	; (800b64c <prvSwitchTimerLists+0xc0>)
 800b63c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b63e:	4a04      	ldr	r2, [pc, #16]	; (800b650 <prvSwitchTimerLists+0xc4>)
 800b640:	697b      	ldr	r3, [r7, #20]
 800b642:	6013      	str	r3, [r2, #0]
}
 800b644:	bf00      	nop
 800b646:	3718      	adds	r7, #24
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}
 800b64c:	24004de4 	.word	0x24004de4
 800b650:	24004de8 	.word	0x24004de8

0800b654 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b082      	sub	sp, #8
 800b658:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b65a:	f7fd ffeb 	bl	8009634 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b65e:	4b15      	ldr	r3, [pc, #84]	; (800b6b4 <prvCheckForValidListAndQueue+0x60>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d120      	bne.n	800b6a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b666:	4814      	ldr	r0, [pc, #80]	; (800b6b8 <prvCheckForValidListAndQueue+0x64>)
 800b668:	f7fd fe02 	bl	8009270 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b66c:	4813      	ldr	r0, [pc, #76]	; (800b6bc <prvCheckForValidListAndQueue+0x68>)
 800b66e:	f7fd fdff 	bl	8009270 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b672:	4b13      	ldr	r3, [pc, #76]	; (800b6c0 <prvCheckForValidListAndQueue+0x6c>)
 800b674:	4a10      	ldr	r2, [pc, #64]	; (800b6b8 <prvCheckForValidListAndQueue+0x64>)
 800b676:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b678:	4b12      	ldr	r3, [pc, #72]	; (800b6c4 <prvCheckForValidListAndQueue+0x70>)
 800b67a:	4a10      	ldr	r2, [pc, #64]	; (800b6bc <prvCheckForValidListAndQueue+0x68>)
 800b67c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b67e:	2300      	movs	r3, #0
 800b680:	9300      	str	r3, [sp, #0]
 800b682:	4b11      	ldr	r3, [pc, #68]	; (800b6c8 <prvCheckForValidListAndQueue+0x74>)
 800b684:	4a11      	ldr	r2, [pc, #68]	; (800b6cc <prvCheckForValidListAndQueue+0x78>)
 800b686:	2110      	movs	r1, #16
 800b688:	200a      	movs	r0, #10
 800b68a:	f7fe f95d 	bl	8009948 <xQueueGenericCreateStatic>
 800b68e:	4603      	mov	r3, r0
 800b690:	4a08      	ldr	r2, [pc, #32]	; (800b6b4 <prvCheckForValidListAndQueue+0x60>)
 800b692:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b694:	4b07      	ldr	r3, [pc, #28]	; (800b6b4 <prvCheckForValidListAndQueue+0x60>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d005      	beq.n	800b6a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b69c:	4b05      	ldr	r3, [pc, #20]	; (800b6b4 <prvCheckForValidListAndQueue+0x60>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	490b      	ldr	r1, [pc, #44]	; (800b6d0 <prvCheckForValidListAndQueue+0x7c>)
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f7fe fd76 	bl	800a194 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b6a8:	f7fd fff4 	bl	8009694 <vPortExitCritical>
}
 800b6ac:	bf00      	nop
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop
 800b6b4:	24004dec 	.word	0x24004dec
 800b6b8:	24004dbc 	.word	0x24004dbc
 800b6bc:	24004dd0 	.word	0x24004dd0
 800b6c0:	24004de4 	.word	0x24004de4
 800b6c4:	24004de8 	.word	0x24004de8
 800b6c8:	24004e98 	.word	0x24004e98
 800b6cc:	24004df8 	.word	0x24004df8
 800b6d0:	0800d0a8 	.word	0x0800d0a8

0800b6d4 <__errno>:
 800b6d4:	4b01      	ldr	r3, [pc, #4]	; (800b6dc <__errno+0x8>)
 800b6d6:	6818      	ldr	r0, [r3, #0]
 800b6d8:	4770      	bx	lr
 800b6da:	bf00      	nop
 800b6dc:	2400001c 	.word	0x2400001c

0800b6e0 <std>:
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	b510      	push	{r4, lr}
 800b6e4:	4604      	mov	r4, r0
 800b6e6:	e9c0 3300 	strd	r3, r3, [r0]
 800b6ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b6ee:	6083      	str	r3, [r0, #8]
 800b6f0:	8181      	strh	r1, [r0, #12]
 800b6f2:	6643      	str	r3, [r0, #100]	; 0x64
 800b6f4:	81c2      	strh	r2, [r0, #14]
 800b6f6:	6183      	str	r3, [r0, #24]
 800b6f8:	4619      	mov	r1, r3
 800b6fa:	2208      	movs	r2, #8
 800b6fc:	305c      	adds	r0, #92	; 0x5c
 800b6fe:	f000 f91a 	bl	800b936 <memset>
 800b702:	4b05      	ldr	r3, [pc, #20]	; (800b718 <std+0x38>)
 800b704:	6263      	str	r3, [r4, #36]	; 0x24
 800b706:	4b05      	ldr	r3, [pc, #20]	; (800b71c <std+0x3c>)
 800b708:	62a3      	str	r3, [r4, #40]	; 0x28
 800b70a:	4b05      	ldr	r3, [pc, #20]	; (800b720 <std+0x40>)
 800b70c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b70e:	4b05      	ldr	r3, [pc, #20]	; (800b724 <std+0x44>)
 800b710:	6224      	str	r4, [r4, #32]
 800b712:	6323      	str	r3, [r4, #48]	; 0x30
 800b714:	bd10      	pop	{r4, pc}
 800b716:	bf00      	nop
 800b718:	0800bbd5 	.word	0x0800bbd5
 800b71c:	0800bbf7 	.word	0x0800bbf7
 800b720:	0800bc2f 	.word	0x0800bc2f
 800b724:	0800bc53 	.word	0x0800bc53

0800b728 <_cleanup_r>:
 800b728:	4901      	ldr	r1, [pc, #4]	; (800b730 <_cleanup_r+0x8>)
 800b72a:	f000 b8af 	b.w	800b88c <_fwalk_reent>
 800b72e:	bf00      	nop
 800b730:	0800bdad 	.word	0x0800bdad

0800b734 <__sfmoreglue>:
 800b734:	b570      	push	{r4, r5, r6, lr}
 800b736:	2268      	movs	r2, #104	; 0x68
 800b738:	1e4d      	subs	r5, r1, #1
 800b73a:	4355      	muls	r5, r2
 800b73c:	460e      	mov	r6, r1
 800b73e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b742:	f000 f921 	bl	800b988 <_malloc_r>
 800b746:	4604      	mov	r4, r0
 800b748:	b140      	cbz	r0, 800b75c <__sfmoreglue+0x28>
 800b74a:	2100      	movs	r1, #0
 800b74c:	e9c0 1600 	strd	r1, r6, [r0]
 800b750:	300c      	adds	r0, #12
 800b752:	60a0      	str	r0, [r4, #8]
 800b754:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b758:	f000 f8ed 	bl	800b936 <memset>
 800b75c:	4620      	mov	r0, r4
 800b75e:	bd70      	pop	{r4, r5, r6, pc}

0800b760 <__sfp_lock_acquire>:
 800b760:	4801      	ldr	r0, [pc, #4]	; (800b768 <__sfp_lock_acquire+0x8>)
 800b762:	f000 b8d8 	b.w	800b916 <__retarget_lock_acquire_recursive>
 800b766:	bf00      	nop
 800b768:	24004ee9 	.word	0x24004ee9

0800b76c <__sfp_lock_release>:
 800b76c:	4801      	ldr	r0, [pc, #4]	; (800b774 <__sfp_lock_release+0x8>)
 800b76e:	f000 b8d3 	b.w	800b918 <__retarget_lock_release_recursive>
 800b772:	bf00      	nop
 800b774:	24004ee9 	.word	0x24004ee9

0800b778 <__sinit_lock_acquire>:
 800b778:	4801      	ldr	r0, [pc, #4]	; (800b780 <__sinit_lock_acquire+0x8>)
 800b77a:	f000 b8cc 	b.w	800b916 <__retarget_lock_acquire_recursive>
 800b77e:	bf00      	nop
 800b780:	24004eea 	.word	0x24004eea

0800b784 <__sinit_lock_release>:
 800b784:	4801      	ldr	r0, [pc, #4]	; (800b78c <__sinit_lock_release+0x8>)
 800b786:	f000 b8c7 	b.w	800b918 <__retarget_lock_release_recursive>
 800b78a:	bf00      	nop
 800b78c:	24004eea 	.word	0x24004eea

0800b790 <__sinit>:
 800b790:	b510      	push	{r4, lr}
 800b792:	4604      	mov	r4, r0
 800b794:	f7ff fff0 	bl	800b778 <__sinit_lock_acquire>
 800b798:	69a3      	ldr	r3, [r4, #24]
 800b79a:	b11b      	cbz	r3, 800b7a4 <__sinit+0x14>
 800b79c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7a0:	f7ff bff0 	b.w	800b784 <__sinit_lock_release>
 800b7a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b7a8:	6523      	str	r3, [r4, #80]	; 0x50
 800b7aa:	4b13      	ldr	r3, [pc, #76]	; (800b7f8 <__sinit+0x68>)
 800b7ac:	4a13      	ldr	r2, [pc, #76]	; (800b7fc <__sinit+0x6c>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	62a2      	str	r2, [r4, #40]	; 0x28
 800b7b2:	42a3      	cmp	r3, r4
 800b7b4:	bf04      	itt	eq
 800b7b6:	2301      	moveq	r3, #1
 800b7b8:	61a3      	streq	r3, [r4, #24]
 800b7ba:	4620      	mov	r0, r4
 800b7bc:	f000 f820 	bl	800b800 <__sfp>
 800b7c0:	6060      	str	r0, [r4, #4]
 800b7c2:	4620      	mov	r0, r4
 800b7c4:	f000 f81c 	bl	800b800 <__sfp>
 800b7c8:	60a0      	str	r0, [r4, #8]
 800b7ca:	4620      	mov	r0, r4
 800b7cc:	f000 f818 	bl	800b800 <__sfp>
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	60e0      	str	r0, [r4, #12]
 800b7d4:	2104      	movs	r1, #4
 800b7d6:	6860      	ldr	r0, [r4, #4]
 800b7d8:	f7ff ff82 	bl	800b6e0 <std>
 800b7dc:	68a0      	ldr	r0, [r4, #8]
 800b7de:	2201      	movs	r2, #1
 800b7e0:	2109      	movs	r1, #9
 800b7e2:	f7ff ff7d 	bl	800b6e0 <std>
 800b7e6:	68e0      	ldr	r0, [r4, #12]
 800b7e8:	2202      	movs	r2, #2
 800b7ea:	2112      	movs	r1, #18
 800b7ec:	f7ff ff78 	bl	800b6e0 <std>
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	61a3      	str	r3, [r4, #24]
 800b7f4:	e7d2      	b.n	800b79c <__sinit+0xc>
 800b7f6:	bf00      	nop
 800b7f8:	0800d17c 	.word	0x0800d17c
 800b7fc:	0800b729 	.word	0x0800b729

0800b800 <__sfp>:
 800b800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b802:	4607      	mov	r7, r0
 800b804:	f7ff ffac 	bl	800b760 <__sfp_lock_acquire>
 800b808:	4b1e      	ldr	r3, [pc, #120]	; (800b884 <__sfp+0x84>)
 800b80a:	681e      	ldr	r6, [r3, #0]
 800b80c:	69b3      	ldr	r3, [r6, #24]
 800b80e:	b913      	cbnz	r3, 800b816 <__sfp+0x16>
 800b810:	4630      	mov	r0, r6
 800b812:	f7ff ffbd 	bl	800b790 <__sinit>
 800b816:	3648      	adds	r6, #72	; 0x48
 800b818:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b81c:	3b01      	subs	r3, #1
 800b81e:	d503      	bpl.n	800b828 <__sfp+0x28>
 800b820:	6833      	ldr	r3, [r6, #0]
 800b822:	b30b      	cbz	r3, 800b868 <__sfp+0x68>
 800b824:	6836      	ldr	r6, [r6, #0]
 800b826:	e7f7      	b.n	800b818 <__sfp+0x18>
 800b828:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b82c:	b9d5      	cbnz	r5, 800b864 <__sfp+0x64>
 800b82e:	4b16      	ldr	r3, [pc, #88]	; (800b888 <__sfp+0x88>)
 800b830:	60e3      	str	r3, [r4, #12]
 800b832:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b836:	6665      	str	r5, [r4, #100]	; 0x64
 800b838:	f000 f86c 	bl	800b914 <__retarget_lock_init_recursive>
 800b83c:	f7ff ff96 	bl	800b76c <__sfp_lock_release>
 800b840:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b844:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b848:	6025      	str	r5, [r4, #0]
 800b84a:	61a5      	str	r5, [r4, #24]
 800b84c:	2208      	movs	r2, #8
 800b84e:	4629      	mov	r1, r5
 800b850:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b854:	f000 f86f 	bl	800b936 <memset>
 800b858:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b85c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b860:	4620      	mov	r0, r4
 800b862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b864:	3468      	adds	r4, #104	; 0x68
 800b866:	e7d9      	b.n	800b81c <__sfp+0x1c>
 800b868:	2104      	movs	r1, #4
 800b86a:	4638      	mov	r0, r7
 800b86c:	f7ff ff62 	bl	800b734 <__sfmoreglue>
 800b870:	4604      	mov	r4, r0
 800b872:	6030      	str	r0, [r6, #0]
 800b874:	2800      	cmp	r0, #0
 800b876:	d1d5      	bne.n	800b824 <__sfp+0x24>
 800b878:	f7ff ff78 	bl	800b76c <__sfp_lock_release>
 800b87c:	230c      	movs	r3, #12
 800b87e:	603b      	str	r3, [r7, #0]
 800b880:	e7ee      	b.n	800b860 <__sfp+0x60>
 800b882:	bf00      	nop
 800b884:	0800d17c 	.word	0x0800d17c
 800b888:	ffff0001 	.word	0xffff0001

0800b88c <_fwalk_reent>:
 800b88c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b890:	4606      	mov	r6, r0
 800b892:	4688      	mov	r8, r1
 800b894:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b898:	2700      	movs	r7, #0
 800b89a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b89e:	f1b9 0901 	subs.w	r9, r9, #1
 800b8a2:	d505      	bpl.n	800b8b0 <_fwalk_reent+0x24>
 800b8a4:	6824      	ldr	r4, [r4, #0]
 800b8a6:	2c00      	cmp	r4, #0
 800b8a8:	d1f7      	bne.n	800b89a <_fwalk_reent+0xe>
 800b8aa:	4638      	mov	r0, r7
 800b8ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8b0:	89ab      	ldrh	r3, [r5, #12]
 800b8b2:	2b01      	cmp	r3, #1
 800b8b4:	d907      	bls.n	800b8c6 <_fwalk_reent+0x3a>
 800b8b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b8ba:	3301      	adds	r3, #1
 800b8bc:	d003      	beq.n	800b8c6 <_fwalk_reent+0x3a>
 800b8be:	4629      	mov	r1, r5
 800b8c0:	4630      	mov	r0, r6
 800b8c2:	47c0      	blx	r8
 800b8c4:	4307      	orrs	r7, r0
 800b8c6:	3568      	adds	r5, #104	; 0x68
 800b8c8:	e7e9      	b.n	800b89e <_fwalk_reent+0x12>
	...

0800b8cc <__libc_init_array>:
 800b8cc:	b570      	push	{r4, r5, r6, lr}
 800b8ce:	4d0d      	ldr	r5, [pc, #52]	; (800b904 <__libc_init_array+0x38>)
 800b8d0:	4c0d      	ldr	r4, [pc, #52]	; (800b908 <__libc_init_array+0x3c>)
 800b8d2:	1b64      	subs	r4, r4, r5
 800b8d4:	10a4      	asrs	r4, r4, #2
 800b8d6:	2600      	movs	r6, #0
 800b8d8:	42a6      	cmp	r6, r4
 800b8da:	d109      	bne.n	800b8f0 <__libc_init_array+0x24>
 800b8dc:	4d0b      	ldr	r5, [pc, #44]	; (800b90c <__libc_init_array+0x40>)
 800b8de:	4c0c      	ldr	r4, [pc, #48]	; (800b910 <__libc_init_array+0x44>)
 800b8e0:	f001 f900 	bl	800cae4 <_init>
 800b8e4:	1b64      	subs	r4, r4, r5
 800b8e6:	10a4      	asrs	r4, r4, #2
 800b8e8:	2600      	movs	r6, #0
 800b8ea:	42a6      	cmp	r6, r4
 800b8ec:	d105      	bne.n	800b8fa <__libc_init_array+0x2e>
 800b8ee:	bd70      	pop	{r4, r5, r6, pc}
 800b8f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8f4:	4798      	blx	r3
 800b8f6:	3601      	adds	r6, #1
 800b8f8:	e7ee      	b.n	800b8d8 <__libc_init_array+0xc>
 800b8fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8fe:	4798      	blx	r3
 800b900:	3601      	adds	r6, #1
 800b902:	e7f2      	b.n	800b8ea <__libc_init_array+0x1e>
 800b904:	0800d1bc 	.word	0x0800d1bc
 800b908:	0800d1bc 	.word	0x0800d1bc
 800b90c:	0800d1bc 	.word	0x0800d1bc
 800b910:	0800d1c0 	.word	0x0800d1c0

0800b914 <__retarget_lock_init_recursive>:
 800b914:	4770      	bx	lr

0800b916 <__retarget_lock_acquire_recursive>:
 800b916:	4770      	bx	lr

0800b918 <__retarget_lock_release_recursive>:
 800b918:	4770      	bx	lr

0800b91a <memcpy>:
 800b91a:	440a      	add	r2, r1
 800b91c:	4291      	cmp	r1, r2
 800b91e:	f100 33ff 	add.w	r3, r0, #4294967295
 800b922:	d100      	bne.n	800b926 <memcpy+0xc>
 800b924:	4770      	bx	lr
 800b926:	b510      	push	{r4, lr}
 800b928:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b92c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b930:	4291      	cmp	r1, r2
 800b932:	d1f9      	bne.n	800b928 <memcpy+0xe>
 800b934:	bd10      	pop	{r4, pc}

0800b936 <memset>:
 800b936:	4402      	add	r2, r0
 800b938:	4603      	mov	r3, r0
 800b93a:	4293      	cmp	r3, r2
 800b93c:	d100      	bne.n	800b940 <memset+0xa>
 800b93e:	4770      	bx	lr
 800b940:	f803 1b01 	strb.w	r1, [r3], #1
 800b944:	e7f9      	b.n	800b93a <memset+0x4>
	...

0800b948 <sbrk_aligned>:
 800b948:	b570      	push	{r4, r5, r6, lr}
 800b94a:	4e0e      	ldr	r6, [pc, #56]	; (800b984 <sbrk_aligned+0x3c>)
 800b94c:	460c      	mov	r4, r1
 800b94e:	6831      	ldr	r1, [r6, #0]
 800b950:	4605      	mov	r5, r0
 800b952:	b911      	cbnz	r1, 800b95a <sbrk_aligned+0x12>
 800b954:	f000 f90e 	bl	800bb74 <_sbrk_r>
 800b958:	6030      	str	r0, [r6, #0]
 800b95a:	4621      	mov	r1, r4
 800b95c:	4628      	mov	r0, r5
 800b95e:	f000 f909 	bl	800bb74 <_sbrk_r>
 800b962:	1c43      	adds	r3, r0, #1
 800b964:	d00a      	beq.n	800b97c <sbrk_aligned+0x34>
 800b966:	1cc4      	adds	r4, r0, #3
 800b968:	f024 0403 	bic.w	r4, r4, #3
 800b96c:	42a0      	cmp	r0, r4
 800b96e:	d007      	beq.n	800b980 <sbrk_aligned+0x38>
 800b970:	1a21      	subs	r1, r4, r0
 800b972:	4628      	mov	r0, r5
 800b974:	f000 f8fe 	bl	800bb74 <_sbrk_r>
 800b978:	3001      	adds	r0, #1
 800b97a:	d101      	bne.n	800b980 <sbrk_aligned+0x38>
 800b97c:	f04f 34ff 	mov.w	r4, #4294967295
 800b980:	4620      	mov	r0, r4
 800b982:	bd70      	pop	{r4, r5, r6, pc}
 800b984:	24004ef0 	.word	0x24004ef0

0800b988 <_malloc_r>:
 800b988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b98c:	1ccd      	adds	r5, r1, #3
 800b98e:	f025 0503 	bic.w	r5, r5, #3
 800b992:	3508      	adds	r5, #8
 800b994:	2d0c      	cmp	r5, #12
 800b996:	bf38      	it	cc
 800b998:	250c      	movcc	r5, #12
 800b99a:	2d00      	cmp	r5, #0
 800b99c:	4607      	mov	r7, r0
 800b99e:	db01      	blt.n	800b9a4 <_malloc_r+0x1c>
 800b9a0:	42a9      	cmp	r1, r5
 800b9a2:	d905      	bls.n	800b9b0 <_malloc_r+0x28>
 800b9a4:	230c      	movs	r3, #12
 800b9a6:	603b      	str	r3, [r7, #0]
 800b9a8:	2600      	movs	r6, #0
 800b9aa:	4630      	mov	r0, r6
 800b9ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9b0:	4e2e      	ldr	r6, [pc, #184]	; (800ba6c <_malloc_r+0xe4>)
 800b9b2:	f000 fa49 	bl	800be48 <__malloc_lock>
 800b9b6:	6833      	ldr	r3, [r6, #0]
 800b9b8:	461c      	mov	r4, r3
 800b9ba:	bb34      	cbnz	r4, 800ba0a <_malloc_r+0x82>
 800b9bc:	4629      	mov	r1, r5
 800b9be:	4638      	mov	r0, r7
 800b9c0:	f7ff ffc2 	bl	800b948 <sbrk_aligned>
 800b9c4:	1c43      	adds	r3, r0, #1
 800b9c6:	4604      	mov	r4, r0
 800b9c8:	d14d      	bne.n	800ba66 <_malloc_r+0xde>
 800b9ca:	6834      	ldr	r4, [r6, #0]
 800b9cc:	4626      	mov	r6, r4
 800b9ce:	2e00      	cmp	r6, #0
 800b9d0:	d140      	bne.n	800ba54 <_malloc_r+0xcc>
 800b9d2:	6823      	ldr	r3, [r4, #0]
 800b9d4:	4631      	mov	r1, r6
 800b9d6:	4638      	mov	r0, r7
 800b9d8:	eb04 0803 	add.w	r8, r4, r3
 800b9dc:	f000 f8ca 	bl	800bb74 <_sbrk_r>
 800b9e0:	4580      	cmp	r8, r0
 800b9e2:	d13a      	bne.n	800ba5a <_malloc_r+0xd2>
 800b9e4:	6821      	ldr	r1, [r4, #0]
 800b9e6:	3503      	adds	r5, #3
 800b9e8:	1a6d      	subs	r5, r5, r1
 800b9ea:	f025 0503 	bic.w	r5, r5, #3
 800b9ee:	3508      	adds	r5, #8
 800b9f0:	2d0c      	cmp	r5, #12
 800b9f2:	bf38      	it	cc
 800b9f4:	250c      	movcc	r5, #12
 800b9f6:	4629      	mov	r1, r5
 800b9f8:	4638      	mov	r0, r7
 800b9fa:	f7ff ffa5 	bl	800b948 <sbrk_aligned>
 800b9fe:	3001      	adds	r0, #1
 800ba00:	d02b      	beq.n	800ba5a <_malloc_r+0xd2>
 800ba02:	6823      	ldr	r3, [r4, #0]
 800ba04:	442b      	add	r3, r5
 800ba06:	6023      	str	r3, [r4, #0]
 800ba08:	e00e      	b.n	800ba28 <_malloc_r+0xa0>
 800ba0a:	6822      	ldr	r2, [r4, #0]
 800ba0c:	1b52      	subs	r2, r2, r5
 800ba0e:	d41e      	bmi.n	800ba4e <_malloc_r+0xc6>
 800ba10:	2a0b      	cmp	r2, #11
 800ba12:	d916      	bls.n	800ba42 <_malloc_r+0xba>
 800ba14:	1961      	adds	r1, r4, r5
 800ba16:	42a3      	cmp	r3, r4
 800ba18:	6025      	str	r5, [r4, #0]
 800ba1a:	bf18      	it	ne
 800ba1c:	6059      	strne	r1, [r3, #4]
 800ba1e:	6863      	ldr	r3, [r4, #4]
 800ba20:	bf08      	it	eq
 800ba22:	6031      	streq	r1, [r6, #0]
 800ba24:	5162      	str	r2, [r4, r5]
 800ba26:	604b      	str	r3, [r1, #4]
 800ba28:	4638      	mov	r0, r7
 800ba2a:	f104 060b 	add.w	r6, r4, #11
 800ba2e:	f000 fa11 	bl	800be54 <__malloc_unlock>
 800ba32:	f026 0607 	bic.w	r6, r6, #7
 800ba36:	1d23      	adds	r3, r4, #4
 800ba38:	1af2      	subs	r2, r6, r3
 800ba3a:	d0b6      	beq.n	800b9aa <_malloc_r+0x22>
 800ba3c:	1b9b      	subs	r3, r3, r6
 800ba3e:	50a3      	str	r3, [r4, r2]
 800ba40:	e7b3      	b.n	800b9aa <_malloc_r+0x22>
 800ba42:	6862      	ldr	r2, [r4, #4]
 800ba44:	42a3      	cmp	r3, r4
 800ba46:	bf0c      	ite	eq
 800ba48:	6032      	streq	r2, [r6, #0]
 800ba4a:	605a      	strne	r2, [r3, #4]
 800ba4c:	e7ec      	b.n	800ba28 <_malloc_r+0xa0>
 800ba4e:	4623      	mov	r3, r4
 800ba50:	6864      	ldr	r4, [r4, #4]
 800ba52:	e7b2      	b.n	800b9ba <_malloc_r+0x32>
 800ba54:	4634      	mov	r4, r6
 800ba56:	6876      	ldr	r6, [r6, #4]
 800ba58:	e7b9      	b.n	800b9ce <_malloc_r+0x46>
 800ba5a:	230c      	movs	r3, #12
 800ba5c:	603b      	str	r3, [r7, #0]
 800ba5e:	4638      	mov	r0, r7
 800ba60:	f000 f9f8 	bl	800be54 <__malloc_unlock>
 800ba64:	e7a1      	b.n	800b9aa <_malloc_r+0x22>
 800ba66:	6025      	str	r5, [r4, #0]
 800ba68:	e7de      	b.n	800ba28 <_malloc_r+0xa0>
 800ba6a:	bf00      	nop
 800ba6c:	24004eec 	.word	0x24004eec

0800ba70 <iprintf>:
 800ba70:	b40f      	push	{r0, r1, r2, r3}
 800ba72:	4b0a      	ldr	r3, [pc, #40]	; (800ba9c <iprintf+0x2c>)
 800ba74:	b513      	push	{r0, r1, r4, lr}
 800ba76:	681c      	ldr	r4, [r3, #0]
 800ba78:	b124      	cbz	r4, 800ba84 <iprintf+0x14>
 800ba7a:	69a3      	ldr	r3, [r4, #24]
 800ba7c:	b913      	cbnz	r3, 800ba84 <iprintf+0x14>
 800ba7e:	4620      	mov	r0, r4
 800ba80:	f7ff fe86 	bl	800b790 <__sinit>
 800ba84:	ab05      	add	r3, sp, #20
 800ba86:	9a04      	ldr	r2, [sp, #16]
 800ba88:	68a1      	ldr	r1, [r4, #8]
 800ba8a:	9301      	str	r3, [sp, #4]
 800ba8c:	4620      	mov	r0, r4
 800ba8e:	f000 fbb9 	bl	800c204 <_vfiprintf_r>
 800ba92:	b002      	add	sp, #8
 800ba94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba98:	b004      	add	sp, #16
 800ba9a:	4770      	bx	lr
 800ba9c:	2400001c 	.word	0x2400001c

0800baa0 <cleanup_glue>:
 800baa0:	b538      	push	{r3, r4, r5, lr}
 800baa2:	460c      	mov	r4, r1
 800baa4:	6809      	ldr	r1, [r1, #0]
 800baa6:	4605      	mov	r5, r0
 800baa8:	b109      	cbz	r1, 800baae <cleanup_glue+0xe>
 800baaa:	f7ff fff9 	bl	800baa0 <cleanup_glue>
 800baae:	4621      	mov	r1, r4
 800bab0:	4628      	mov	r0, r5
 800bab2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bab6:	f000 b9d3 	b.w	800be60 <_free_r>
	...

0800babc <_reclaim_reent>:
 800babc:	4b2c      	ldr	r3, [pc, #176]	; (800bb70 <_reclaim_reent+0xb4>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	4283      	cmp	r3, r0
 800bac2:	b570      	push	{r4, r5, r6, lr}
 800bac4:	4604      	mov	r4, r0
 800bac6:	d051      	beq.n	800bb6c <_reclaim_reent+0xb0>
 800bac8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800baca:	b143      	cbz	r3, 800bade <_reclaim_reent+0x22>
 800bacc:	68db      	ldr	r3, [r3, #12]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d14a      	bne.n	800bb68 <_reclaim_reent+0xac>
 800bad2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bad4:	6819      	ldr	r1, [r3, #0]
 800bad6:	b111      	cbz	r1, 800bade <_reclaim_reent+0x22>
 800bad8:	4620      	mov	r0, r4
 800bada:	f000 f9c1 	bl	800be60 <_free_r>
 800bade:	6961      	ldr	r1, [r4, #20]
 800bae0:	b111      	cbz	r1, 800bae8 <_reclaim_reent+0x2c>
 800bae2:	4620      	mov	r0, r4
 800bae4:	f000 f9bc 	bl	800be60 <_free_r>
 800bae8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800baea:	b111      	cbz	r1, 800baf2 <_reclaim_reent+0x36>
 800baec:	4620      	mov	r0, r4
 800baee:	f000 f9b7 	bl	800be60 <_free_r>
 800baf2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800baf4:	b111      	cbz	r1, 800bafc <_reclaim_reent+0x40>
 800baf6:	4620      	mov	r0, r4
 800baf8:	f000 f9b2 	bl	800be60 <_free_r>
 800bafc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bafe:	b111      	cbz	r1, 800bb06 <_reclaim_reent+0x4a>
 800bb00:	4620      	mov	r0, r4
 800bb02:	f000 f9ad 	bl	800be60 <_free_r>
 800bb06:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bb08:	b111      	cbz	r1, 800bb10 <_reclaim_reent+0x54>
 800bb0a:	4620      	mov	r0, r4
 800bb0c:	f000 f9a8 	bl	800be60 <_free_r>
 800bb10:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800bb12:	b111      	cbz	r1, 800bb1a <_reclaim_reent+0x5e>
 800bb14:	4620      	mov	r0, r4
 800bb16:	f000 f9a3 	bl	800be60 <_free_r>
 800bb1a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800bb1c:	b111      	cbz	r1, 800bb24 <_reclaim_reent+0x68>
 800bb1e:	4620      	mov	r0, r4
 800bb20:	f000 f99e 	bl	800be60 <_free_r>
 800bb24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb26:	b111      	cbz	r1, 800bb2e <_reclaim_reent+0x72>
 800bb28:	4620      	mov	r0, r4
 800bb2a:	f000 f999 	bl	800be60 <_free_r>
 800bb2e:	69a3      	ldr	r3, [r4, #24]
 800bb30:	b1e3      	cbz	r3, 800bb6c <_reclaim_reent+0xb0>
 800bb32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bb34:	4620      	mov	r0, r4
 800bb36:	4798      	blx	r3
 800bb38:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bb3a:	b1b9      	cbz	r1, 800bb6c <_reclaim_reent+0xb0>
 800bb3c:	4620      	mov	r0, r4
 800bb3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bb42:	f7ff bfad 	b.w	800baa0 <cleanup_glue>
 800bb46:	5949      	ldr	r1, [r1, r5]
 800bb48:	b941      	cbnz	r1, 800bb5c <_reclaim_reent+0xa0>
 800bb4a:	3504      	adds	r5, #4
 800bb4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb4e:	2d80      	cmp	r5, #128	; 0x80
 800bb50:	68d9      	ldr	r1, [r3, #12]
 800bb52:	d1f8      	bne.n	800bb46 <_reclaim_reent+0x8a>
 800bb54:	4620      	mov	r0, r4
 800bb56:	f000 f983 	bl	800be60 <_free_r>
 800bb5a:	e7ba      	b.n	800bad2 <_reclaim_reent+0x16>
 800bb5c:	680e      	ldr	r6, [r1, #0]
 800bb5e:	4620      	mov	r0, r4
 800bb60:	f000 f97e 	bl	800be60 <_free_r>
 800bb64:	4631      	mov	r1, r6
 800bb66:	e7ef      	b.n	800bb48 <_reclaim_reent+0x8c>
 800bb68:	2500      	movs	r5, #0
 800bb6a:	e7ef      	b.n	800bb4c <_reclaim_reent+0x90>
 800bb6c:	bd70      	pop	{r4, r5, r6, pc}
 800bb6e:	bf00      	nop
 800bb70:	2400001c 	.word	0x2400001c

0800bb74 <_sbrk_r>:
 800bb74:	b538      	push	{r3, r4, r5, lr}
 800bb76:	4d06      	ldr	r5, [pc, #24]	; (800bb90 <_sbrk_r+0x1c>)
 800bb78:	2300      	movs	r3, #0
 800bb7a:	4604      	mov	r4, r0
 800bb7c:	4608      	mov	r0, r1
 800bb7e:	602b      	str	r3, [r5, #0]
 800bb80:	f7f6 fd8e 	bl	80026a0 <_sbrk>
 800bb84:	1c43      	adds	r3, r0, #1
 800bb86:	d102      	bne.n	800bb8e <_sbrk_r+0x1a>
 800bb88:	682b      	ldr	r3, [r5, #0]
 800bb8a:	b103      	cbz	r3, 800bb8e <_sbrk_r+0x1a>
 800bb8c:	6023      	str	r3, [r4, #0]
 800bb8e:	bd38      	pop	{r3, r4, r5, pc}
 800bb90:	24004ef4 	.word	0x24004ef4

0800bb94 <siprintf>:
 800bb94:	b40e      	push	{r1, r2, r3}
 800bb96:	b500      	push	{lr}
 800bb98:	b09c      	sub	sp, #112	; 0x70
 800bb9a:	ab1d      	add	r3, sp, #116	; 0x74
 800bb9c:	9002      	str	r0, [sp, #8]
 800bb9e:	9006      	str	r0, [sp, #24]
 800bba0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bba4:	4809      	ldr	r0, [pc, #36]	; (800bbcc <siprintf+0x38>)
 800bba6:	9107      	str	r1, [sp, #28]
 800bba8:	9104      	str	r1, [sp, #16]
 800bbaa:	4909      	ldr	r1, [pc, #36]	; (800bbd0 <siprintf+0x3c>)
 800bbac:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbb0:	9105      	str	r1, [sp, #20]
 800bbb2:	6800      	ldr	r0, [r0, #0]
 800bbb4:	9301      	str	r3, [sp, #4]
 800bbb6:	a902      	add	r1, sp, #8
 800bbb8:	f000 f9fa 	bl	800bfb0 <_svfiprintf_r>
 800bbbc:	9b02      	ldr	r3, [sp, #8]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	701a      	strb	r2, [r3, #0]
 800bbc2:	b01c      	add	sp, #112	; 0x70
 800bbc4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bbc8:	b003      	add	sp, #12
 800bbca:	4770      	bx	lr
 800bbcc:	2400001c 	.word	0x2400001c
 800bbd0:	ffff0208 	.word	0xffff0208

0800bbd4 <__sread>:
 800bbd4:	b510      	push	{r4, lr}
 800bbd6:	460c      	mov	r4, r1
 800bbd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbdc:	f000 fdd6 	bl	800c78c <_read_r>
 800bbe0:	2800      	cmp	r0, #0
 800bbe2:	bfab      	itete	ge
 800bbe4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bbe6:	89a3      	ldrhlt	r3, [r4, #12]
 800bbe8:	181b      	addge	r3, r3, r0
 800bbea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bbee:	bfac      	ite	ge
 800bbf0:	6563      	strge	r3, [r4, #84]	; 0x54
 800bbf2:	81a3      	strhlt	r3, [r4, #12]
 800bbf4:	bd10      	pop	{r4, pc}

0800bbf6 <__swrite>:
 800bbf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbfa:	461f      	mov	r7, r3
 800bbfc:	898b      	ldrh	r3, [r1, #12]
 800bbfe:	05db      	lsls	r3, r3, #23
 800bc00:	4605      	mov	r5, r0
 800bc02:	460c      	mov	r4, r1
 800bc04:	4616      	mov	r6, r2
 800bc06:	d505      	bpl.n	800bc14 <__swrite+0x1e>
 800bc08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc0c:	2302      	movs	r3, #2
 800bc0e:	2200      	movs	r2, #0
 800bc10:	f000 f908 	bl	800be24 <_lseek_r>
 800bc14:	89a3      	ldrh	r3, [r4, #12]
 800bc16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc1e:	81a3      	strh	r3, [r4, #12]
 800bc20:	4632      	mov	r2, r6
 800bc22:	463b      	mov	r3, r7
 800bc24:	4628      	mov	r0, r5
 800bc26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc2a:	f000 b817 	b.w	800bc5c <_write_r>

0800bc2e <__sseek>:
 800bc2e:	b510      	push	{r4, lr}
 800bc30:	460c      	mov	r4, r1
 800bc32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc36:	f000 f8f5 	bl	800be24 <_lseek_r>
 800bc3a:	1c43      	adds	r3, r0, #1
 800bc3c:	89a3      	ldrh	r3, [r4, #12]
 800bc3e:	bf15      	itete	ne
 800bc40:	6560      	strne	r0, [r4, #84]	; 0x54
 800bc42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bc46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bc4a:	81a3      	strheq	r3, [r4, #12]
 800bc4c:	bf18      	it	ne
 800bc4e:	81a3      	strhne	r3, [r4, #12]
 800bc50:	bd10      	pop	{r4, pc}

0800bc52 <__sclose>:
 800bc52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc56:	f000 b813 	b.w	800bc80 <_close_r>
	...

0800bc5c <_write_r>:
 800bc5c:	b538      	push	{r3, r4, r5, lr}
 800bc5e:	4d07      	ldr	r5, [pc, #28]	; (800bc7c <_write_r+0x20>)
 800bc60:	4604      	mov	r4, r0
 800bc62:	4608      	mov	r0, r1
 800bc64:	4611      	mov	r1, r2
 800bc66:	2200      	movs	r2, #0
 800bc68:	602a      	str	r2, [r5, #0]
 800bc6a:	461a      	mov	r2, r3
 800bc6c:	f7f6 fcc7 	bl	80025fe <_write>
 800bc70:	1c43      	adds	r3, r0, #1
 800bc72:	d102      	bne.n	800bc7a <_write_r+0x1e>
 800bc74:	682b      	ldr	r3, [r5, #0]
 800bc76:	b103      	cbz	r3, 800bc7a <_write_r+0x1e>
 800bc78:	6023      	str	r3, [r4, #0]
 800bc7a:	bd38      	pop	{r3, r4, r5, pc}
 800bc7c:	24004ef4 	.word	0x24004ef4

0800bc80 <_close_r>:
 800bc80:	b538      	push	{r3, r4, r5, lr}
 800bc82:	4d06      	ldr	r5, [pc, #24]	; (800bc9c <_close_r+0x1c>)
 800bc84:	2300      	movs	r3, #0
 800bc86:	4604      	mov	r4, r0
 800bc88:	4608      	mov	r0, r1
 800bc8a:	602b      	str	r3, [r5, #0]
 800bc8c:	f7f6 fcd3 	bl	8002636 <_close>
 800bc90:	1c43      	adds	r3, r0, #1
 800bc92:	d102      	bne.n	800bc9a <_close_r+0x1a>
 800bc94:	682b      	ldr	r3, [r5, #0]
 800bc96:	b103      	cbz	r3, 800bc9a <_close_r+0x1a>
 800bc98:	6023      	str	r3, [r4, #0]
 800bc9a:	bd38      	pop	{r3, r4, r5, pc}
 800bc9c:	24004ef4 	.word	0x24004ef4

0800bca0 <__sflush_r>:
 800bca0:	898a      	ldrh	r2, [r1, #12]
 800bca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bca6:	4605      	mov	r5, r0
 800bca8:	0710      	lsls	r0, r2, #28
 800bcaa:	460c      	mov	r4, r1
 800bcac:	d458      	bmi.n	800bd60 <__sflush_r+0xc0>
 800bcae:	684b      	ldr	r3, [r1, #4]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	dc05      	bgt.n	800bcc0 <__sflush_r+0x20>
 800bcb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	dc02      	bgt.n	800bcc0 <__sflush_r+0x20>
 800bcba:	2000      	movs	r0, #0
 800bcbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bcc2:	2e00      	cmp	r6, #0
 800bcc4:	d0f9      	beq.n	800bcba <__sflush_r+0x1a>
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bccc:	682f      	ldr	r7, [r5, #0]
 800bcce:	602b      	str	r3, [r5, #0]
 800bcd0:	d032      	beq.n	800bd38 <__sflush_r+0x98>
 800bcd2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bcd4:	89a3      	ldrh	r3, [r4, #12]
 800bcd6:	075a      	lsls	r2, r3, #29
 800bcd8:	d505      	bpl.n	800bce6 <__sflush_r+0x46>
 800bcda:	6863      	ldr	r3, [r4, #4]
 800bcdc:	1ac0      	subs	r0, r0, r3
 800bcde:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bce0:	b10b      	cbz	r3, 800bce6 <__sflush_r+0x46>
 800bce2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bce4:	1ac0      	subs	r0, r0, r3
 800bce6:	2300      	movs	r3, #0
 800bce8:	4602      	mov	r2, r0
 800bcea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bcec:	6a21      	ldr	r1, [r4, #32]
 800bcee:	4628      	mov	r0, r5
 800bcf0:	47b0      	blx	r6
 800bcf2:	1c43      	adds	r3, r0, #1
 800bcf4:	89a3      	ldrh	r3, [r4, #12]
 800bcf6:	d106      	bne.n	800bd06 <__sflush_r+0x66>
 800bcf8:	6829      	ldr	r1, [r5, #0]
 800bcfa:	291d      	cmp	r1, #29
 800bcfc:	d82c      	bhi.n	800bd58 <__sflush_r+0xb8>
 800bcfe:	4a2a      	ldr	r2, [pc, #168]	; (800bda8 <__sflush_r+0x108>)
 800bd00:	40ca      	lsrs	r2, r1
 800bd02:	07d6      	lsls	r6, r2, #31
 800bd04:	d528      	bpl.n	800bd58 <__sflush_r+0xb8>
 800bd06:	2200      	movs	r2, #0
 800bd08:	6062      	str	r2, [r4, #4]
 800bd0a:	04d9      	lsls	r1, r3, #19
 800bd0c:	6922      	ldr	r2, [r4, #16]
 800bd0e:	6022      	str	r2, [r4, #0]
 800bd10:	d504      	bpl.n	800bd1c <__sflush_r+0x7c>
 800bd12:	1c42      	adds	r2, r0, #1
 800bd14:	d101      	bne.n	800bd1a <__sflush_r+0x7a>
 800bd16:	682b      	ldr	r3, [r5, #0]
 800bd18:	b903      	cbnz	r3, 800bd1c <__sflush_r+0x7c>
 800bd1a:	6560      	str	r0, [r4, #84]	; 0x54
 800bd1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd1e:	602f      	str	r7, [r5, #0]
 800bd20:	2900      	cmp	r1, #0
 800bd22:	d0ca      	beq.n	800bcba <__sflush_r+0x1a>
 800bd24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd28:	4299      	cmp	r1, r3
 800bd2a:	d002      	beq.n	800bd32 <__sflush_r+0x92>
 800bd2c:	4628      	mov	r0, r5
 800bd2e:	f000 f897 	bl	800be60 <_free_r>
 800bd32:	2000      	movs	r0, #0
 800bd34:	6360      	str	r0, [r4, #52]	; 0x34
 800bd36:	e7c1      	b.n	800bcbc <__sflush_r+0x1c>
 800bd38:	6a21      	ldr	r1, [r4, #32]
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	4628      	mov	r0, r5
 800bd3e:	47b0      	blx	r6
 800bd40:	1c41      	adds	r1, r0, #1
 800bd42:	d1c7      	bne.n	800bcd4 <__sflush_r+0x34>
 800bd44:	682b      	ldr	r3, [r5, #0]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d0c4      	beq.n	800bcd4 <__sflush_r+0x34>
 800bd4a:	2b1d      	cmp	r3, #29
 800bd4c:	d001      	beq.n	800bd52 <__sflush_r+0xb2>
 800bd4e:	2b16      	cmp	r3, #22
 800bd50:	d101      	bne.n	800bd56 <__sflush_r+0xb6>
 800bd52:	602f      	str	r7, [r5, #0]
 800bd54:	e7b1      	b.n	800bcba <__sflush_r+0x1a>
 800bd56:	89a3      	ldrh	r3, [r4, #12]
 800bd58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd5c:	81a3      	strh	r3, [r4, #12]
 800bd5e:	e7ad      	b.n	800bcbc <__sflush_r+0x1c>
 800bd60:	690f      	ldr	r7, [r1, #16]
 800bd62:	2f00      	cmp	r7, #0
 800bd64:	d0a9      	beq.n	800bcba <__sflush_r+0x1a>
 800bd66:	0793      	lsls	r3, r2, #30
 800bd68:	680e      	ldr	r6, [r1, #0]
 800bd6a:	bf08      	it	eq
 800bd6c:	694b      	ldreq	r3, [r1, #20]
 800bd6e:	600f      	str	r7, [r1, #0]
 800bd70:	bf18      	it	ne
 800bd72:	2300      	movne	r3, #0
 800bd74:	eba6 0807 	sub.w	r8, r6, r7
 800bd78:	608b      	str	r3, [r1, #8]
 800bd7a:	f1b8 0f00 	cmp.w	r8, #0
 800bd7e:	dd9c      	ble.n	800bcba <__sflush_r+0x1a>
 800bd80:	6a21      	ldr	r1, [r4, #32]
 800bd82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bd84:	4643      	mov	r3, r8
 800bd86:	463a      	mov	r2, r7
 800bd88:	4628      	mov	r0, r5
 800bd8a:	47b0      	blx	r6
 800bd8c:	2800      	cmp	r0, #0
 800bd8e:	dc06      	bgt.n	800bd9e <__sflush_r+0xfe>
 800bd90:	89a3      	ldrh	r3, [r4, #12]
 800bd92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd96:	81a3      	strh	r3, [r4, #12]
 800bd98:	f04f 30ff 	mov.w	r0, #4294967295
 800bd9c:	e78e      	b.n	800bcbc <__sflush_r+0x1c>
 800bd9e:	4407      	add	r7, r0
 800bda0:	eba8 0800 	sub.w	r8, r8, r0
 800bda4:	e7e9      	b.n	800bd7a <__sflush_r+0xda>
 800bda6:	bf00      	nop
 800bda8:	20400001 	.word	0x20400001

0800bdac <_fflush_r>:
 800bdac:	b538      	push	{r3, r4, r5, lr}
 800bdae:	690b      	ldr	r3, [r1, #16]
 800bdb0:	4605      	mov	r5, r0
 800bdb2:	460c      	mov	r4, r1
 800bdb4:	b913      	cbnz	r3, 800bdbc <_fflush_r+0x10>
 800bdb6:	2500      	movs	r5, #0
 800bdb8:	4628      	mov	r0, r5
 800bdba:	bd38      	pop	{r3, r4, r5, pc}
 800bdbc:	b118      	cbz	r0, 800bdc6 <_fflush_r+0x1a>
 800bdbe:	6983      	ldr	r3, [r0, #24]
 800bdc0:	b90b      	cbnz	r3, 800bdc6 <_fflush_r+0x1a>
 800bdc2:	f7ff fce5 	bl	800b790 <__sinit>
 800bdc6:	4b14      	ldr	r3, [pc, #80]	; (800be18 <_fflush_r+0x6c>)
 800bdc8:	429c      	cmp	r4, r3
 800bdca:	d11b      	bne.n	800be04 <_fflush_r+0x58>
 800bdcc:	686c      	ldr	r4, [r5, #4]
 800bdce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d0ef      	beq.n	800bdb6 <_fflush_r+0xa>
 800bdd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bdd8:	07d0      	lsls	r0, r2, #31
 800bdda:	d404      	bmi.n	800bde6 <_fflush_r+0x3a>
 800bddc:	0599      	lsls	r1, r3, #22
 800bdde:	d402      	bmi.n	800bde6 <_fflush_r+0x3a>
 800bde0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bde2:	f7ff fd98 	bl	800b916 <__retarget_lock_acquire_recursive>
 800bde6:	4628      	mov	r0, r5
 800bde8:	4621      	mov	r1, r4
 800bdea:	f7ff ff59 	bl	800bca0 <__sflush_r>
 800bdee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bdf0:	07da      	lsls	r2, r3, #31
 800bdf2:	4605      	mov	r5, r0
 800bdf4:	d4e0      	bmi.n	800bdb8 <_fflush_r+0xc>
 800bdf6:	89a3      	ldrh	r3, [r4, #12]
 800bdf8:	059b      	lsls	r3, r3, #22
 800bdfa:	d4dd      	bmi.n	800bdb8 <_fflush_r+0xc>
 800bdfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdfe:	f7ff fd8b 	bl	800b918 <__retarget_lock_release_recursive>
 800be02:	e7d9      	b.n	800bdb8 <_fflush_r+0xc>
 800be04:	4b05      	ldr	r3, [pc, #20]	; (800be1c <_fflush_r+0x70>)
 800be06:	429c      	cmp	r4, r3
 800be08:	d101      	bne.n	800be0e <_fflush_r+0x62>
 800be0a:	68ac      	ldr	r4, [r5, #8]
 800be0c:	e7df      	b.n	800bdce <_fflush_r+0x22>
 800be0e:	4b04      	ldr	r3, [pc, #16]	; (800be20 <_fflush_r+0x74>)
 800be10:	429c      	cmp	r4, r3
 800be12:	bf08      	it	eq
 800be14:	68ec      	ldreq	r4, [r5, #12]
 800be16:	e7da      	b.n	800bdce <_fflush_r+0x22>
 800be18:	0800d13c 	.word	0x0800d13c
 800be1c:	0800d15c 	.word	0x0800d15c
 800be20:	0800d11c 	.word	0x0800d11c

0800be24 <_lseek_r>:
 800be24:	b538      	push	{r3, r4, r5, lr}
 800be26:	4d07      	ldr	r5, [pc, #28]	; (800be44 <_lseek_r+0x20>)
 800be28:	4604      	mov	r4, r0
 800be2a:	4608      	mov	r0, r1
 800be2c:	4611      	mov	r1, r2
 800be2e:	2200      	movs	r2, #0
 800be30:	602a      	str	r2, [r5, #0]
 800be32:	461a      	mov	r2, r3
 800be34:	f7f6 fc26 	bl	8002684 <_lseek>
 800be38:	1c43      	adds	r3, r0, #1
 800be3a:	d102      	bne.n	800be42 <_lseek_r+0x1e>
 800be3c:	682b      	ldr	r3, [r5, #0]
 800be3e:	b103      	cbz	r3, 800be42 <_lseek_r+0x1e>
 800be40:	6023      	str	r3, [r4, #0]
 800be42:	bd38      	pop	{r3, r4, r5, pc}
 800be44:	24004ef4 	.word	0x24004ef4

0800be48 <__malloc_lock>:
 800be48:	4801      	ldr	r0, [pc, #4]	; (800be50 <__malloc_lock+0x8>)
 800be4a:	f7ff bd64 	b.w	800b916 <__retarget_lock_acquire_recursive>
 800be4e:	bf00      	nop
 800be50:	24004ee8 	.word	0x24004ee8

0800be54 <__malloc_unlock>:
 800be54:	4801      	ldr	r0, [pc, #4]	; (800be5c <__malloc_unlock+0x8>)
 800be56:	f7ff bd5f 	b.w	800b918 <__retarget_lock_release_recursive>
 800be5a:	bf00      	nop
 800be5c:	24004ee8 	.word	0x24004ee8

0800be60 <_free_r>:
 800be60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be62:	2900      	cmp	r1, #0
 800be64:	d044      	beq.n	800bef0 <_free_r+0x90>
 800be66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be6a:	9001      	str	r0, [sp, #4]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	f1a1 0404 	sub.w	r4, r1, #4
 800be72:	bfb8      	it	lt
 800be74:	18e4      	addlt	r4, r4, r3
 800be76:	f7ff ffe7 	bl	800be48 <__malloc_lock>
 800be7a:	4a1e      	ldr	r2, [pc, #120]	; (800bef4 <_free_r+0x94>)
 800be7c:	9801      	ldr	r0, [sp, #4]
 800be7e:	6813      	ldr	r3, [r2, #0]
 800be80:	b933      	cbnz	r3, 800be90 <_free_r+0x30>
 800be82:	6063      	str	r3, [r4, #4]
 800be84:	6014      	str	r4, [r2, #0]
 800be86:	b003      	add	sp, #12
 800be88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800be8c:	f7ff bfe2 	b.w	800be54 <__malloc_unlock>
 800be90:	42a3      	cmp	r3, r4
 800be92:	d908      	bls.n	800bea6 <_free_r+0x46>
 800be94:	6825      	ldr	r5, [r4, #0]
 800be96:	1961      	adds	r1, r4, r5
 800be98:	428b      	cmp	r3, r1
 800be9a:	bf01      	itttt	eq
 800be9c:	6819      	ldreq	r1, [r3, #0]
 800be9e:	685b      	ldreq	r3, [r3, #4]
 800bea0:	1949      	addeq	r1, r1, r5
 800bea2:	6021      	streq	r1, [r4, #0]
 800bea4:	e7ed      	b.n	800be82 <_free_r+0x22>
 800bea6:	461a      	mov	r2, r3
 800bea8:	685b      	ldr	r3, [r3, #4]
 800beaa:	b10b      	cbz	r3, 800beb0 <_free_r+0x50>
 800beac:	42a3      	cmp	r3, r4
 800beae:	d9fa      	bls.n	800bea6 <_free_r+0x46>
 800beb0:	6811      	ldr	r1, [r2, #0]
 800beb2:	1855      	adds	r5, r2, r1
 800beb4:	42a5      	cmp	r5, r4
 800beb6:	d10b      	bne.n	800bed0 <_free_r+0x70>
 800beb8:	6824      	ldr	r4, [r4, #0]
 800beba:	4421      	add	r1, r4
 800bebc:	1854      	adds	r4, r2, r1
 800bebe:	42a3      	cmp	r3, r4
 800bec0:	6011      	str	r1, [r2, #0]
 800bec2:	d1e0      	bne.n	800be86 <_free_r+0x26>
 800bec4:	681c      	ldr	r4, [r3, #0]
 800bec6:	685b      	ldr	r3, [r3, #4]
 800bec8:	6053      	str	r3, [r2, #4]
 800beca:	4421      	add	r1, r4
 800becc:	6011      	str	r1, [r2, #0]
 800bece:	e7da      	b.n	800be86 <_free_r+0x26>
 800bed0:	d902      	bls.n	800bed8 <_free_r+0x78>
 800bed2:	230c      	movs	r3, #12
 800bed4:	6003      	str	r3, [r0, #0]
 800bed6:	e7d6      	b.n	800be86 <_free_r+0x26>
 800bed8:	6825      	ldr	r5, [r4, #0]
 800beda:	1961      	adds	r1, r4, r5
 800bedc:	428b      	cmp	r3, r1
 800bede:	bf04      	itt	eq
 800bee0:	6819      	ldreq	r1, [r3, #0]
 800bee2:	685b      	ldreq	r3, [r3, #4]
 800bee4:	6063      	str	r3, [r4, #4]
 800bee6:	bf04      	itt	eq
 800bee8:	1949      	addeq	r1, r1, r5
 800beea:	6021      	streq	r1, [r4, #0]
 800beec:	6054      	str	r4, [r2, #4]
 800beee:	e7ca      	b.n	800be86 <_free_r+0x26>
 800bef0:	b003      	add	sp, #12
 800bef2:	bd30      	pop	{r4, r5, pc}
 800bef4:	24004eec 	.word	0x24004eec

0800bef8 <__ssputs_r>:
 800bef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800befc:	688e      	ldr	r6, [r1, #8]
 800befe:	429e      	cmp	r6, r3
 800bf00:	4682      	mov	sl, r0
 800bf02:	460c      	mov	r4, r1
 800bf04:	4690      	mov	r8, r2
 800bf06:	461f      	mov	r7, r3
 800bf08:	d838      	bhi.n	800bf7c <__ssputs_r+0x84>
 800bf0a:	898a      	ldrh	r2, [r1, #12]
 800bf0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bf10:	d032      	beq.n	800bf78 <__ssputs_r+0x80>
 800bf12:	6825      	ldr	r5, [r4, #0]
 800bf14:	6909      	ldr	r1, [r1, #16]
 800bf16:	eba5 0901 	sub.w	r9, r5, r1
 800bf1a:	6965      	ldr	r5, [r4, #20]
 800bf1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bf20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bf24:	3301      	adds	r3, #1
 800bf26:	444b      	add	r3, r9
 800bf28:	106d      	asrs	r5, r5, #1
 800bf2a:	429d      	cmp	r5, r3
 800bf2c:	bf38      	it	cc
 800bf2e:	461d      	movcc	r5, r3
 800bf30:	0553      	lsls	r3, r2, #21
 800bf32:	d531      	bpl.n	800bf98 <__ssputs_r+0xa0>
 800bf34:	4629      	mov	r1, r5
 800bf36:	f7ff fd27 	bl	800b988 <_malloc_r>
 800bf3a:	4606      	mov	r6, r0
 800bf3c:	b950      	cbnz	r0, 800bf54 <__ssputs_r+0x5c>
 800bf3e:	230c      	movs	r3, #12
 800bf40:	f8ca 3000 	str.w	r3, [sl]
 800bf44:	89a3      	ldrh	r3, [r4, #12]
 800bf46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf4a:	81a3      	strh	r3, [r4, #12]
 800bf4c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf54:	6921      	ldr	r1, [r4, #16]
 800bf56:	464a      	mov	r2, r9
 800bf58:	f7ff fcdf 	bl	800b91a <memcpy>
 800bf5c:	89a3      	ldrh	r3, [r4, #12]
 800bf5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bf62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf66:	81a3      	strh	r3, [r4, #12]
 800bf68:	6126      	str	r6, [r4, #16]
 800bf6a:	6165      	str	r5, [r4, #20]
 800bf6c:	444e      	add	r6, r9
 800bf6e:	eba5 0509 	sub.w	r5, r5, r9
 800bf72:	6026      	str	r6, [r4, #0]
 800bf74:	60a5      	str	r5, [r4, #8]
 800bf76:	463e      	mov	r6, r7
 800bf78:	42be      	cmp	r6, r7
 800bf7a:	d900      	bls.n	800bf7e <__ssputs_r+0x86>
 800bf7c:	463e      	mov	r6, r7
 800bf7e:	6820      	ldr	r0, [r4, #0]
 800bf80:	4632      	mov	r2, r6
 800bf82:	4641      	mov	r1, r8
 800bf84:	f000 fd3a 	bl	800c9fc <memmove>
 800bf88:	68a3      	ldr	r3, [r4, #8]
 800bf8a:	1b9b      	subs	r3, r3, r6
 800bf8c:	60a3      	str	r3, [r4, #8]
 800bf8e:	6823      	ldr	r3, [r4, #0]
 800bf90:	4433      	add	r3, r6
 800bf92:	6023      	str	r3, [r4, #0]
 800bf94:	2000      	movs	r0, #0
 800bf96:	e7db      	b.n	800bf50 <__ssputs_r+0x58>
 800bf98:	462a      	mov	r2, r5
 800bf9a:	f000 fd49 	bl	800ca30 <_realloc_r>
 800bf9e:	4606      	mov	r6, r0
 800bfa0:	2800      	cmp	r0, #0
 800bfa2:	d1e1      	bne.n	800bf68 <__ssputs_r+0x70>
 800bfa4:	6921      	ldr	r1, [r4, #16]
 800bfa6:	4650      	mov	r0, sl
 800bfa8:	f7ff ff5a 	bl	800be60 <_free_r>
 800bfac:	e7c7      	b.n	800bf3e <__ssputs_r+0x46>
	...

0800bfb0 <_svfiprintf_r>:
 800bfb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfb4:	4698      	mov	r8, r3
 800bfb6:	898b      	ldrh	r3, [r1, #12]
 800bfb8:	061b      	lsls	r3, r3, #24
 800bfba:	b09d      	sub	sp, #116	; 0x74
 800bfbc:	4607      	mov	r7, r0
 800bfbe:	460d      	mov	r5, r1
 800bfc0:	4614      	mov	r4, r2
 800bfc2:	d50e      	bpl.n	800bfe2 <_svfiprintf_r+0x32>
 800bfc4:	690b      	ldr	r3, [r1, #16]
 800bfc6:	b963      	cbnz	r3, 800bfe2 <_svfiprintf_r+0x32>
 800bfc8:	2140      	movs	r1, #64	; 0x40
 800bfca:	f7ff fcdd 	bl	800b988 <_malloc_r>
 800bfce:	6028      	str	r0, [r5, #0]
 800bfd0:	6128      	str	r0, [r5, #16]
 800bfd2:	b920      	cbnz	r0, 800bfde <_svfiprintf_r+0x2e>
 800bfd4:	230c      	movs	r3, #12
 800bfd6:	603b      	str	r3, [r7, #0]
 800bfd8:	f04f 30ff 	mov.w	r0, #4294967295
 800bfdc:	e0d1      	b.n	800c182 <_svfiprintf_r+0x1d2>
 800bfde:	2340      	movs	r3, #64	; 0x40
 800bfe0:	616b      	str	r3, [r5, #20]
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	9309      	str	r3, [sp, #36]	; 0x24
 800bfe6:	2320      	movs	r3, #32
 800bfe8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bfec:	f8cd 800c 	str.w	r8, [sp, #12]
 800bff0:	2330      	movs	r3, #48	; 0x30
 800bff2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c19c <_svfiprintf_r+0x1ec>
 800bff6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bffa:	f04f 0901 	mov.w	r9, #1
 800bffe:	4623      	mov	r3, r4
 800c000:	469a      	mov	sl, r3
 800c002:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c006:	b10a      	cbz	r2, 800c00c <_svfiprintf_r+0x5c>
 800c008:	2a25      	cmp	r2, #37	; 0x25
 800c00a:	d1f9      	bne.n	800c000 <_svfiprintf_r+0x50>
 800c00c:	ebba 0b04 	subs.w	fp, sl, r4
 800c010:	d00b      	beq.n	800c02a <_svfiprintf_r+0x7a>
 800c012:	465b      	mov	r3, fp
 800c014:	4622      	mov	r2, r4
 800c016:	4629      	mov	r1, r5
 800c018:	4638      	mov	r0, r7
 800c01a:	f7ff ff6d 	bl	800bef8 <__ssputs_r>
 800c01e:	3001      	adds	r0, #1
 800c020:	f000 80aa 	beq.w	800c178 <_svfiprintf_r+0x1c8>
 800c024:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c026:	445a      	add	r2, fp
 800c028:	9209      	str	r2, [sp, #36]	; 0x24
 800c02a:	f89a 3000 	ldrb.w	r3, [sl]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	f000 80a2 	beq.w	800c178 <_svfiprintf_r+0x1c8>
 800c034:	2300      	movs	r3, #0
 800c036:	f04f 32ff 	mov.w	r2, #4294967295
 800c03a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c03e:	f10a 0a01 	add.w	sl, sl, #1
 800c042:	9304      	str	r3, [sp, #16]
 800c044:	9307      	str	r3, [sp, #28]
 800c046:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c04a:	931a      	str	r3, [sp, #104]	; 0x68
 800c04c:	4654      	mov	r4, sl
 800c04e:	2205      	movs	r2, #5
 800c050:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c054:	4851      	ldr	r0, [pc, #324]	; (800c19c <_svfiprintf_r+0x1ec>)
 800c056:	f7f4 f94b 	bl	80002f0 <memchr>
 800c05a:	9a04      	ldr	r2, [sp, #16]
 800c05c:	b9d8      	cbnz	r0, 800c096 <_svfiprintf_r+0xe6>
 800c05e:	06d0      	lsls	r0, r2, #27
 800c060:	bf44      	itt	mi
 800c062:	2320      	movmi	r3, #32
 800c064:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c068:	0711      	lsls	r1, r2, #28
 800c06a:	bf44      	itt	mi
 800c06c:	232b      	movmi	r3, #43	; 0x2b
 800c06e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c072:	f89a 3000 	ldrb.w	r3, [sl]
 800c076:	2b2a      	cmp	r3, #42	; 0x2a
 800c078:	d015      	beq.n	800c0a6 <_svfiprintf_r+0xf6>
 800c07a:	9a07      	ldr	r2, [sp, #28]
 800c07c:	4654      	mov	r4, sl
 800c07e:	2000      	movs	r0, #0
 800c080:	f04f 0c0a 	mov.w	ip, #10
 800c084:	4621      	mov	r1, r4
 800c086:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c08a:	3b30      	subs	r3, #48	; 0x30
 800c08c:	2b09      	cmp	r3, #9
 800c08e:	d94e      	bls.n	800c12e <_svfiprintf_r+0x17e>
 800c090:	b1b0      	cbz	r0, 800c0c0 <_svfiprintf_r+0x110>
 800c092:	9207      	str	r2, [sp, #28]
 800c094:	e014      	b.n	800c0c0 <_svfiprintf_r+0x110>
 800c096:	eba0 0308 	sub.w	r3, r0, r8
 800c09a:	fa09 f303 	lsl.w	r3, r9, r3
 800c09e:	4313      	orrs	r3, r2
 800c0a0:	9304      	str	r3, [sp, #16]
 800c0a2:	46a2      	mov	sl, r4
 800c0a4:	e7d2      	b.n	800c04c <_svfiprintf_r+0x9c>
 800c0a6:	9b03      	ldr	r3, [sp, #12]
 800c0a8:	1d19      	adds	r1, r3, #4
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	9103      	str	r1, [sp, #12]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	bfbb      	ittet	lt
 800c0b2:	425b      	neglt	r3, r3
 800c0b4:	f042 0202 	orrlt.w	r2, r2, #2
 800c0b8:	9307      	strge	r3, [sp, #28]
 800c0ba:	9307      	strlt	r3, [sp, #28]
 800c0bc:	bfb8      	it	lt
 800c0be:	9204      	strlt	r2, [sp, #16]
 800c0c0:	7823      	ldrb	r3, [r4, #0]
 800c0c2:	2b2e      	cmp	r3, #46	; 0x2e
 800c0c4:	d10c      	bne.n	800c0e0 <_svfiprintf_r+0x130>
 800c0c6:	7863      	ldrb	r3, [r4, #1]
 800c0c8:	2b2a      	cmp	r3, #42	; 0x2a
 800c0ca:	d135      	bne.n	800c138 <_svfiprintf_r+0x188>
 800c0cc:	9b03      	ldr	r3, [sp, #12]
 800c0ce:	1d1a      	adds	r2, r3, #4
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	9203      	str	r2, [sp, #12]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	bfb8      	it	lt
 800c0d8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c0dc:	3402      	adds	r4, #2
 800c0de:	9305      	str	r3, [sp, #20]
 800c0e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c1ac <_svfiprintf_r+0x1fc>
 800c0e4:	7821      	ldrb	r1, [r4, #0]
 800c0e6:	2203      	movs	r2, #3
 800c0e8:	4650      	mov	r0, sl
 800c0ea:	f7f4 f901 	bl	80002f0 <memchr>
 800c0ee:	b140      	cbz	r0, 800c102 <_svfiprintf_r+0x152>
 800c0f0:	2340      	movs	r3, #64	; 0x40
 800c0f2:	eba0 000a 	sub.w	r0, r0, sl
 800c0f6:	fa03 f000 	lsl.w	r0, r3, r0
 800c0fa:	9b04      	ldr	r3, [sp, #16]
 800c0fc:	4303      	orrs	r3, r0
 800c0fe:	3401      	adds	r4, #1
 800c100:	9304      	str	r3, [sp, #16]
 800c102:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c106:	4826      	ldr	r0, [pc, #152]	; (800c1a0 <_svfiprintf_r+0x1f0>)
 800c108:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c10c:	2206      	movs	r2, #6
 800c10e:	f7f4 f8ef 	bl	80002f0 <memchr>
 800c112:	2800      	cmp	r0, #0
 800c114:	d038      	beq.n	800c188 <_svfiprintf_r+0x1d8>
 800c116:	4b23      	ldr	r3, [pc, #140]	; (800c1a4 <_svfiprintf_r+0x1f4>)
 800c118:	bb1b      	cbnz	r3, 800c162 <_svfiprintf_r+0x1b2>
 800c11a:	9b03      	ldr	r3, [sp, #12]
 800c11c:	3307      	adds	r3, #7
 800c11e:	f023 0307 	bic.w	r3, r3, #7
 800c122:	3308      	adds	r3, #8
 800c124:	9303      	str	r3, [sp, #12]
 800c126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c128:	4433      	add	r3, r6
 800c12a:	9309      	str	r3, [sp, #36]	; 0x24
 800c12c:	e767      	b.n	800bffe <_svfiprintf_r+0x4e>
 800c12e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c132:	460c      	mov	r4, r1
 800c134:	2001      	movs	r0, #1
 800c136:	e7a5      	b.n	800c084 <_svfiprintf_r+0xd4>
 800c138:	2300      	movs	r3, #0
 800c13a:	3401      	adds	r4, #1
 800c13c:	9305      	str	r3, [sp, #20]
 800c13e:	4619      	mov	r1, r3
 800c140:	f04f 0c0a 	mov.w	ip, #10
 800c144:	4620      	mov	r0, r4
 800c146:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c14a:	3a30      	subs	r2, #48	; 0x30
 800c14c:	2a09      	cmp	r2, #9
 800c14e:	d903      	bls.n	800c158 <_svfiprintf_r+0x1a8>
 800c150:	2b00      	cmp	r3, #0
 800c152:	d0c5      	beq.n	800c0e0 <_svfiprintf_r+0x130>
 800c154:	9105      	str	r1, [sp, #20]
 800c156:	e7c3      	b.n	800c0e0 <_svfiprintf_r+0x130>
 800c158:	fb0c 2101 	mla	r1, ip, r1, r2
 800c15c:	4604      	mov	r4, r0
 800c15e:	2301      	movs	r3, #1
 800c160:	e7f0      	b.n	800c144 <_svfiprintf_r+0x194>
 800c162:	ab03      	add	r3, sp, #12
 800c164:	9300      	str	r3, [sp, #0]
 800c166:	462a      	mov	r2, r5
 800c168:	4b0f      	ldr	r3, [pc, #60]	; (800c1a8 <_svfiprintf_r+0x1f8>)
 800c16a:	a904      	add	r1, sp, #16
 800c16c:	4638      	mov	r0, r7
 800c16e:	f3af 8000 	nop.w
 800c172:	1c42      	adds	r2, r0, #1
 800c174:	4606      	mov	r6, r0
 800c176:	d1d6      	bne.n	800c126 <_svfiprintf_r+0x176>
 800c178:	89ab      	ldrh	r3, [r5, #12]
 800c17a:	065b      	lsls	r3, r3, #25
 800c17c:	f53f af2c 	bmi.w	800bfd8 <_svfiprintf_r+0x28>
 800c180:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c182:	b01d      	add	sp, #116	; 0x74
 800c184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c188:	ab03      	add	r3, sp, #12
 800c18a:	9300      	str	r3, [sp, #0]
 800c18c:	462a      	mov	r2, r5
 800c18e:	4b06      	ldr	r3, [pc, #24]	; (800c1a8 <_svfiprintf_r+0x1f8>)
 800c190:	a904      	add	r1, sp, #16
 800c192:	4638      	mov	r0, r7
 800c194:	f000 f9d4 	bl	800c540 <_printf_i>
 800c198:	e7eb      	b.n	800c172 <_svfiprintf_r+0x1c2>
 800c19a:	bf00      	nop
 800c19c:	0800d180 	.word	0x0800d180
 800c1a0:	0800d18a 	.word	0x0800d18a
 800c1a4:	00000000 	.word	0x00000000
 800c1a8:	0800bef9 	.word	0x0800bef9
 800c1ac:	0800d186 	.word	0x0800d186

0800c1b0 <__sfputc_r>:
 800c1b0:	6893      	ldr	r3, [r2, #8]
 800c1b2:	3b01      	subs	r3, #1
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	b410      	push	{r4}
 800c1b8:	6093      	str	r3, [r2, #8]
 800c1ba:	da08      	bge.n	800c1ce <__sfputc_r+0x1e>
 800c1bc:	6994      	ldr	r4, [r2, #24]
 800c1be:	42a3      	cmp	r3, r4
 800c1c0:	db01      	blt.n	800c1c6 <__sfputc_r+0x16>
 800c1c2:	290a      	cmp	r1, #10
 800c1c4:	d103      	bne.n	800c1ce <__sfputc_r+0x1e>
 800c1c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1ca:	f000 baf1 	b.w	800c7b0 <__swbuf_r>
 800c1ce:	6813      	ldr	r3, [r2, #0]
 800c1d0:	1c58      	adds	r0, r3, #1
 800c1d2:	6010      	str	r0, [r2, #0]
 800c1d4:	7019      	strb	r1, [r3, #0]
 800c1d6:	4608      	mov	r0, r1
 800c1d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1dc:	4770      	bx	lr

0800c1de <__sfputs_r>:
 800c1de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1e0:	4606      	mov	r6, r0
 800c1e2:	460f      	mov	r7, r1
 800c1e4:	4614      	mov	r4, r2
 800c1e6:	18d5      	adds	r5, r2, r3
 800c1e8:	42ac      	cmp	r4, r5
 800c1ea:	d101      	bne.n	800c1f0 <__sfputs_r+0x12>
 800c1ec:	2000      	movs	r0, #0
 800c1ee:	e007      	b.n	800c200 <__sfputs_r+0x22>
 800c1f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1f4:	463a      	mov	r2, r7
 800c1f6:	4630      	mov	r0, r6
 800c1f8:	f7ff ffda 	bl	800c1b0 <__sfputc_r>
 800c1fc:	1c43      	adds	r3, r0, #1
 800c1fe:	d1f3      	bne.n	800c1e8 <__sfputs_r+0xa>
 800c200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c204 <_vfiprintf_r>:
 800c204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c208:	460d      	mov	r5, r1
 800c20a:	b09d      	sub	sp, #116	; 0x74
 800c20c:	4614      	mov	r4, r2
 800c20e:	4698      	mov	r8, r3
 800c210:	4606      	mov	r6, r0
 800c212:	b118      	cbz	r0, 800c21c <_vfiprintf_r+0x18>
 800c214:	6983      	ldr	r3, [r0, #24]
 800c216:	b90b      	cbnz	r3, 800c21c <_vfiprintf_r+0x18>
 800c218:	f7ff faba 	bl	800b790 <__sinit>
 800c21c:	4b89      	ldr	r3, [pc, #548]	; (800c444 <_vfiprintf_r+0x240>)
 800c21e:	429d      	cmp	r5, r3
 800c220:	d11b      	bne.n	800c25a <_vfiprintf_r+0x56>
 800c222:	6875      	ldr	r5, [r6, #4]
 800c224:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c226:	07d9      	lsls	r1, r3, #31
 800c228:	d405      	bmi.n	800c236 <_vfiprintf_r+0x32>
 800c22a:	89ab      	ldrh	r3, [r5, #12]
 800c22c:	059a      	lsls	r2, r3, #22
 800c22e:	d402      	bmi.n	800c236 <_vfiprintf_r+0x32>
 800c230:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c232:	f7ff fb70 	bl	800b916 <__retarget_lock_acquire_recursive>
 800c236:	89ab      	ldrh	r3, [r5, #12]
 800c238:	071b      	lsls	r3, r3, #28
 800c23a:	d501      	bpl.n	800c240 <_vfiprintf_r+0x3c>
 800c23c:	692b      	ldr	r3, [r5, #16]
 800c23e:	b9eb      	cbnz	r3, 800c27c <_vfiprintf_r+0x78>
 800c240:	4629      	mov	r1, r5
 800c242:	4630      	mov	r0, r6
 800c244:	f000 fb06 	bl	800c854 <__swsetup_r>
 800c248:	b1c0      	cbz	r0, 800c27c <_vfiprintf_r+0x78>
 800c24a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c24c:	07dc      	lsls	r4, r3, #31
 800c24e:	d50e      	bpl.n	800c26e <_vfiprintf_r+0x6a>
 800c250:	f04f 30ff 	mov.w	r0, #4294967295
 800c254:	b01d      	add	sp, #116	; 0x74
 800c256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c25a:	4b7b      	ldr	r3, [pc, #492]	; (800c448 <_vfiprintf_r+0x244>)
 800c25c:	429d      	cmp	r5, r3
 800c25e:	d101      	bne.n	800c264 <_vfiprintf_r+0x60>
 800c260:	68b5      	ldr	r5, [r6, #8]
 800c262:	e7df      	b.n	800c224 <_vfiprintf_r+0x20>
 800c264:	4b79      	ldr	r3, [pc, #484]	; (800c44c <_vfiprintf_r+0x248>)
 800c266:	429d      	cmp	r5, r3
 800c268:	bf08      	it	eq
 800c26a:	68f5      	ldreq	r5, [r6, #12]
 800c26c:	e7da      	b.n	800c224 <_vfiprintf_r+0x20>
 800c26e:	89ab      	ldrh	r3, [r5, #12]
 800c270:	0598      	lsls	r0, r3, #22
 800c272:	d4ed      	bmi.n	800c250 <_vfiprintf_r+0x4c>
 800c274:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c276:	f7ff fb4f 	bl	800b918 <__retarget_lock_release_recursive>
 800c27a:	e7e9      	b.n	800c250 <_vfiprintf_r+0x4c>
 800c27c:	2300      	movs	r3, #0
 800c27e:	9309      	str	r3, [sp, #36]	; 0x24
 800c280:	2320      	movs	r3, #32
 800c282:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c286:	f8cd 800c 	str.w	r8, [sp, #12]
 800c28a:	2330      	movs	r3, #48	; 0x30
 800c28c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c450 <_vfiprintf_r+0x24c>
 800c290:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c294:	f04f 0901 	mov.w	r9, #1
 800c298:	4623      	mov	r3, r4
 800c29a:	469a      	mov	sl, r3
 800c29c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2a0:	b10a      	cbz	r2, 800c2a6 <_vfiprintf_r+0xa2>
 800c2a2:	2a25      	cmp	r2, #37	; 0x25
 800c2a4:	d1f9      	bne.n	800c29a <_vfiprintf_r+0x96>
 800c2a6:	ebba 0b04 	subs.w	fp, sl, r4
 800c2aa:	d00b      	beq.n	800c2c4 <_vfiprintf_r+0xc0>
 800c2ac:	465b      	mov	r3, fp
 800c2ae:	4622      	mov	r2, r4
 800c2b0:	4629      	mov	r1, r5
 800c2b2:	4630      	mov	r0, r6
 800c2b4:	f7ff ff93 	bl	800c1de <__sfputs_r>
 800c2b8:	3001      	adds	r0, #1
 800c2ba:	f000 80aa 	beq.w	800c412 <_vfiprintf_r+0x20e>
 800c2be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2c0:	445a      	add	r2, fp
 800c2c2:	9209      	str	r2, [sp, #36]	; 0x24
 800c2c4:	f89a 3000 	ldrb.w	r3, [sl]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	f000 80a2 	beq.w	800c412 <_vfiprintf_r+0x20e>
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	f04f 32ff 	mov.w	r2, #4294967295
 800c2d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2d8:	f10a 0a01 	add.w	sl, sl, #1
 800c2dc:	9304      	str	r3, [sp, #16]
 800c2de:	9307      	str	r3, [sp, #28]
 800c2e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c2e4:	931a      	str	r3, [sp, #104]	; 0x68
 800c2e6:	4654      	mov	r4, sl
 800c2e8:	2205      	movs	r2, #5
 800c2ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2ee:	4858      	ldr	r0, [pc, #352]	; (800c450 <_vfiprintf_r+0x24c>)
 800c2f0:	f7f3 fffe 	bl	80002f0 <memchr>
 800c2f4:	9a04      	ldr	r2, [sp, #16]
 800c2f6:	b9d8      	cbnz	r0, 800c330 <_vfiprintf_r+0x12c>
 800c2f8:	06d1      	lsls	r1, r2, #27
 800c2fa:	bf44      	itt	mi
 800c2fc:	2320      	movmi	r3, #32
 800c2fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c302:	0713      	lsls	r3, r2, #28
 800c304:	bf44      	itt	mi
 800c306:	232b      	movmi	r3, #43	; 0x2b
 800c308:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c30c:	f89a 3000 	ldrb.w	r3, [sl]
 800c310:	2b2a      	cmp	r3, #42	; 0x2a
 800c312:	d015      	beq.n	800c340 <_vfiprintf_r+0x13c>
 800c314:	9a07      	ldr	r2, [sp, #28]
 800c316:	4654      	mov	r4, sl
 800c318:	2000      	movs	r0, #0
 800c31a:	f04f 0c0a 	mov.w	ip, #10
 800c31e:	4621      	mov	r1, r4
 800c320:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c324:	3b30      	subs	r3, #48	; 0x30
 800c326:	2b09      	cmp	r3, #9
 800c328:	d94e      	bls.n	800c3c8 <_vfiprintf_r+0x1c4>
 800c32a:	b1b0      	cbz	r0, 800c35a <_vfiprintf_r+0x156>
 800c32c:	9207      	str	r2, [sp, #28]
 800c32e:	e014      	b.n	800c35a <_vfiprintf_r+0x156>
 800c330:	eba0 0308 	sub.w	r3, r0, r8
 800c334:	fa09 f303 	lsl.w	r3, r9, r3
 800c338:	4313      	orrs	r3, r2
 800c33a:	9304      	str	r3, [sp, #16]
 800c33c:	46a2      	mov	sl, r4
 800c33e:	e7d2      	b.n	800c2e6 <_vfiprintf_r+0xe2>
 800c340:	9b03      	ldr	r3, [sp, #12]
 800c342:	1d19      	adds	r1, r3, #4
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	9103      	str	r1, [sp, #12]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	bfbb      	ittet	lt
 800c34c:	425b      	neglt	r3, r3
 800c34e:	f042 0202 	orrlt.w	r2, r2, #2
 800c352:	9307      	strge	r3, [sp, #28]
 800c354:	9307      	strlt	r3, [sp, #28]
 800c356:	bfb8      	it	lt
 800c358:	9204      	strlt	r2, [sp, #16]
 800c35a:	7823      	ldrb	r3, [r4, #0]
 800c35c:	2b2e      	cmp	r3, #46	; 0x2e
 800c35e:	d10c      	bne.n	800c37a <_vfiprintf_r+0x176>
 800c360:	7863      	ldrb	r3, [r4, #1]
 800c362:	2b2a      	cmp	r3, #42	; 0x2a
 800c364:	d135      	bne.n	800c3d2 <_vfiprintf_r+0x1ce>
 800c366:	9b03      	ldr	r3, [sp, #12]
 800c368:	1d1a      	adds	r2, r3, #4
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	9203      	str	r2, [sp, #12]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	bfb8      	it	lt
 800c372:	f04f 33ff 	movlt.w	r3, #4294967295
 800c376:	3402      	adds	r4, #2
 800c378:	9305      	str	r3, [sp, #20]
 800c37a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c460 <_vfiprintf_r+0x25c>
 800c37e:	7821      	ldrb	r1, [r4, #0]
 800c380:	2203      	movs	r2, #3
 800c382:	4650      	mov	r0, sl
 800c384:	f7f3 ffb4 	bl	80002f0 <memchr>
 800c388:	b140      	cbz	r0, 800c39c <_vfiprintf_r+0x198>
 800c38a:	2340      	movs	r3, #64	; 0x40
 800c38c:	eba0 000a 	sub.w	r0, r0, sl
 800c390:	fa03 f000 	lsl.w	r0, r3, r0
 800c394:	9b04      	ldr	r3, [sp, #16]
 800c396:	4303      	orrs	r3, r0
 800c398:	3401      	adds	r4, #1
 800c39a:	9304      	str	r3, [sp, #16]
 800c39c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3a0:	482c      	ldr	r0, [pc, #176]	; (800c454 <_vfiprintf_r+0x250>)
 800c3a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c3a6:	2206      	movs	r2, #6
 800c3a8:	f7f3 ffa2 	bl	80002f0 <memchr>
 800c3ac:	2800      	cmp	r0, #0
 800c3ae:	d03f      	beq.n	800c430 <_vfiprintf_r+0x22c>
 800c3b0:	4b29      	ldr	r3, [pc, #164]	; (800c458 <_vfiprintf_r+0x254>)
 800c3b2:	bb1b      	cbnz	r3, 800c3fc <_vfiprintf_r+0x1f8>
 800c3b4:	9b03      	ldr	r3, [sp, #12]
 800c3b6:	3307      	adds	r3, #7
 800c3b8:	f023 0307 	bic.w	r3, r3, #7
 800c3bc:	3308      	adds	r3, #8
 800c3be:	9303      	str	r3, [sp, #12]
 800c3c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3c2:	443b      	add	r3, r7
 800c3c4:	9309      	str	r3, [sp, #36]	; 0x24
 800c3c6:	e767      	b.n	800c298 <_vfiprintf_r+0x94>
 800c3c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3cc:	460c      	mov	r4, r1
 800c3ce:	2001      	movs	r0, #1
 800c3d0:	e7a5      	b.n	800c31e <_vfiprintf_r+0x11a>
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	3401      	adds	r4, #1
 800c3d6:	9305      	str	r3, [sp, #20]
 800c3d8:	4619      	mov	r1, r3
 800c3da:	f04f 0c0a 	mov.w	ip, #10
 800c3de:	4620      	mov	r0, r4
 800c3e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3e4:	3a30      	subs	r2, #48	; 0x30
 800c3e6:	2a09      	cmp	r2, #9
 800c3e8:	d903      	bls.n	800c3f2 <_vfiprintf_r+0x1ee>
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d0c5      	beq.n	800c37a <_vfiprintf_r+0x176>
 800c3ee:	9105      	str	r1, [sp, #20]
 800c3f0:	e7c3      	b.n	800c37a <_vfiprintf_r+0x176>
 800c3f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3f6:	4604      	mov	r4, r0
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	e7f0      	b.n	800c3de <_vfiprintf_r+0x1da>
 800c3fc:	ab03      	add	r3, sp, #12
 800c3fe:	9300      	str	r3, [sp, #0]
 800c400:	462a      	mov	r2, r5
 800c402:	4b16      	ldr	r3, [pc, #88]	; (800c45c <_vfiprintf_r+0x258>)
 800c404:	a904      	add	r1, sp, #16
 800c406:	4630      	mov	r0, r6
 800c408:	f3af 8000 	nop.w
 800c40c:	4607      	mov	r7, r0
 800c40e:	1c78      	adds	r0, r7, #1
 800c410:	d1d6      	bne.n	800c3c0 <_vfiprintf_r+0x1bc>
 800c412:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c414:	07d9      	lsls	r1, r3, #31
 800c416:	d405      	bmi.n	800c424 <_vfiprintf_r+0x220>
 800c418:	89ab      	ldrh	r3, [r5, #12]
 800c41a:	059a      	lsls	r2, r3, #22
 800c41c:	d402      	bmi.n	800c424 <_vfiprintf_r+0x220>
 800c41e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c420:	f7ff fa7a 	bl	800b918 <__retarget_lock_release_recursive>
 800c424:	89ab      	ldrh	r3, [r5, #12]
 800c426:	065b      	lsls	r3, r3, #25
 800c428:	f53f af12 	bmi.w	800c250 <_vfiprintf_r+0x4c>
 800c42c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c42e:	e711      	b.n	800c254 <_vfiprintf_r+0x50>
 800c430:	ab03      	add	r3, sp, #12
 800c432:	9300      	str	r3, [sp, #0]
 800c434:	462a      	mov	r2, r5
 800c436:	4b09      	ldr	r3, [pc, #36]	; (800c45c <_vfiprintf_r+0x258>)
 800c438:	a904      	add	r1, sp, #16
 800c43a:	4630      	mov	r0, r6
 800c43c:	f000 f880 	bl	800c540 <_printf_i>
 800c440:	e7e4      	b.n	800c40c <_vfiprintf_r+0x208>
 800c442:	bf00      	nop
 800c444:	0800d13c 	.word	0x0800d13c
 800c448:	0800d15c 	.word	0x0800d15c
 800c44c:	0800d11c 	.word	0x0800d11c
 800c450:	0800d180 	.word	0x0800d180
 800c454:	0800d18a 	.word	0x0800d18a
 800c458:	00000000 	.word	0x00000000
 800c45c:	0800c1df 	.word	0x0800c1df
 800c460:	0800d186 	.word	0x0800d186

0800c464 <_printf_common>:
 800c464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c468:	4616      	mov	r6, r2
 800c46a:	4699      	mov	r9, r3
 800c46c:	688a      	ldr	r2, [r1, #8]
 800c46e:	690b      	ldr	r3, [r1, #16]
 800c470:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c474:	4293      	cmp	r3, r2
 800c476:	bfb8      	it	lt
 800c478:	4613      	movlt	r3, r2
 800c47a:	6033      	str	r3, [r6, #0]
 800c47c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c480:	4607      	mov	r7, r0
 800c482:	460c      	mov	r4, r1
 800c484:	b10a      	cbz	r2, 800c48a <_printf_common+0x26>
 800c486:	3301      	adds	r3, #1
 800c488:	6033      	str	r3, [r6, #0]
 800c48a:	6823      	ldr	r3, [r4, #0]
 800c48c:	0699      	lsls	r1, r3, #26
 800c48e:	bf42      	ittt	mi
 800c490:	6833      	ldrmi	r3, [r6, #0]
 800c492:	3302      	addmi	r3, #2
 800c494:	6033      	strmi	r3, [r6, #0]
 800c496:	6825      	ldr	r5, [r4, #0]
 800c498:	f015 0506 	ands.w	r5, r5, #6
 800c49c:	d106      	bne.n	800c4ac <_printf_common+0x48>
 800c49e:	f104 0a19 	add.w	sl, r4, #25
 800c4a2:	68e3      	ldr	r3, [r4, #12]
 800c4a4:	6832      	ldr	r2, [r6, #0]
 800c4a6:	1a9b      	subs	r3, r3, r2
 800c4a8:	42ab      	cmp	r3, r5
 800c4aa:	dc26      	bgt.n	800c4fa <_printf_common+0x96>
 800c4ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c4b0:	1e13      	subs	r3, r2, #0
 800c4b2:	6822      	ldr	r2, [r4, #0]
 800c4b4:	bf18      	it	ne
 800c4b6:	2301      	movne	r3, #1
 800c4b8:	0692      	lsls	r2, r2, #26
 800c4ba:	d42b      	bmi.n	800c514 <_printf_common+0xb0>
 800c4bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c4c0:	4649      	mov	r1, r9
 800c4c2:	4638      	mov	r0, r7
 800c4c4:	47c0      	blx	r8
 800c4c6:	3001      	adds	r0, #1
 800c4c8:	d01e      	beq.n	800c508 <_printf_common+0xa4>
 800c4ca:	6823      	ldr	r3, [r4, #0]
 800c4cc:	68e5      	ldr	r5, [r4, #12]
 800c4ce:	6832      	ldr	r2, [r6, #0]
 800c4d0:	f003 0306 	and.w	r3, r3, #6
 800c4d4:	2b04      	cmp	r3, #4
 800c4d6:	bf08      	it	eq
 800c4d8:	1aad      	subeq	r5, r5, r2
 800c4da:	68a3      	ldr	r3, [r4, #8]
 800c4dc:	6922      	ldr	r2, [r4, #16]
 800c4de:	bf0c      	ite	eq
 800c4e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c4e4:	2500      	movne	r5, #0
 800c4e6:	4293      	cmp	r3, r2
 800c4e8:	bfc4      	itt	gt
 800c4ea:	1a9b      	subgt	r3, r3, r2
 800c4ec:	18ed      	addgt	r5, r5, r3
 800c4ee:	2600      	movs	r6, #0
 800c4f0:	341a      	adds	r4, #26
 800c4f2:	42b5      	cmp	r5, r6
 800c4f4:	d11a      	bne.n	800c52c <_printf_common+0xc8>
 800c4f6:	2000      	movs	r0, #0
 800c4f8:	e008      	b.n	800c50c <_printf_common+0xa8>
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	4652      	mov	r2, sl
 800c4fe:	4649      	mov	r1, r9
 800c500:	4638      	mov	r0, r7
 800c502:	47c0      	blx	r8
 800c504:	3001      	adds	r0, #1
 800c506:	d103      	bne.n	800c510 <_printf_common+0xac>
 800c508:	f04f 30ff 	mov.w	r0, #4294967295
 800c50c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c510:	3501      	adds	r5, #1
 800c512:	e7c6      	b.n	800c4a2 <_printf_common+0x3e>
 800c514:	18e1      	adds	r1, r4, r3
 800c516:	1c5a      	adds	r2, r3, #1
 800c518:	2030      	movs	r0, #48	; 0x30
 800c51a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c51e:	4422      	add	r2, r4
 800c520:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c524:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c528:	3302      	adds	r3, #2
 800c52a:	e7c7      	b.n	800c4bc <_printf_common+0x58>
 800c52c:	2301      	movs	r3, #1
 800c52e:	4622      	mov	r2, r4
 800c530:	4649      	mov	r1, r9
 800c532:	4638      	mov	r0, r7
 800c534:	47c0      	blx	r8
 800c536:	3001      	adds	r0, #1
 800c538:	d0e6      	beq.n	800c508 <_printf_common+0xa4>
 800c53a:	3601      	adds	r6, #1
 800c53c:	e7d9      	b.n	800c4f2 <_printf_common+0x8e>
	...

0800c540 <_printf_i>:
 800c540:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c544:	7e0f      	ldrb	r7, [r1, #24]
 800c546:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c548:	2f78      	cmp	r7, #120	; 0x78
 800c54a:	4691      	mov	r9, r2
 800c54c:	4680      	mov	r8, r0
 800c54e:	460c      	mov	r4, r1
 800c550:	469a      	mov	sl, r3
 800c552:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c556:	d807      	bhi.n	800c568 <_printf_i+0x28>
 800c558:	2f62      	cmp	r7, #98	; 0x62
 800c55a:	d80a      	bhi.n	800c572 <_printf_i+0x32>
 800c55c:	2f00      	cmp	r7, #0
 800c55e:	f000 80d8 	beq.w	800c712 <_printf_i+0x1d2>
 800c562:	2f58      	cmp	r7, #88	; 0x58
 800c564:	f000 80a3 	beq.w	800c6ae <_printf_i+0x16e>
 800c568:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c56c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c570:	e03a      	b.n	800c5e8 <_printf_i+0xa8>
 800c572:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c576:	2b15      	cmp	r3, #21
 800c578:	d8f6      	bhi.n	800c568 <_printf_i+0x28>
 800c57a:	a101      	add	r1, pc, #4	; (adr r1, 800c580 <_printf_i+0x40>)
 800c57c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c580:	0800c5d9 	.word	0x0800c5d9
 800c584:	0800c5ed 	.word	0x0800c5ed
 800c588:	0800c569 	.word	0x0800c569
 800c58c:	0800c569 	.word	0x0800c569
 800c590:	0800c569 	.word	0x0800c569
 800c594:	0800c569 	.word	0x0800c569
 800c598:	0800c5ed 	.word	0x0800c5ed
 800c59c:	0800c569 	.word	0x0800c569
 800c5a0:	0800c569 	.word	0x0800c569
 800c5a4:	0800c569 	.word	0x0800c569
 800c5a8:	0800c569 	.word	0x0800c569
 800c5ac:	0800c6f9 	.word	0x0800c6f9
 800c5b0:	0800c61d 	.word	0x0800c61d
 800c5b4:	0800c6db 	.word	0x0800c6db
 800c5b8:	0800c569 	.word	0x0800c569
 800c5bc:	0800c569 	.word	0x0800c569
 800c5c0:	0800c71b 	.word	0x0800c71b
 800c5c4:	0800c569 	.word	0x0800c569
 800c5c8:	0800c61d 	.word	0x0800c61d
 800c5cc:	0800c569 	.word	0x0800c569
 800c5d0:	0800c569 	.word	0x0800c569
 800c5d4:	0800c6e3 	.word	0x0800c6e3
 800c5d8:	682b      	ldr	r3, [r5, #0]
 800c5da:	1d1a      	adds	r2, r3, #4
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	602a      	str	r2, [r5, #0]
 800c5e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c5e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	e0a3      	b.n	800c734 <_printf_i+0x1f4>
 800c5ec:	6820      	ldr	r0, [r4, #0]
 800c5ee:	6829      	ldr	r1, [r5, #0]
 800c5f0:	0606      	lsls	r6, r0, #24
 800c5f2:	f101 0304 	add.w	r3, r1, #4
 800c5f6:	d50a      	bpl.n	800c60e <_printf_i+0xce>
 800c5f8:	680e      	ldr	r6, [r1, #0]
 800c5fa:	602b      	str	r3, [r5, #0]
 800c5fc:	2e00      	cmp	r6, #0
 800c5fe:	da03      	bge.n	800c608 <_printf_i+0xc8>
 800c600:	232d      	movs	r3, #45	; 0x2d
 800c602:	4276      	negs	r6, r6
 800c604:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c608:	485e      	ldr	r0, [pc, #376]	; (800c784 <_printf_i+0x244>)
 800c60a:	230a      	movs	r3, #10
 800c60c:	e019      	b.n	800c642 <_printf_i+0x102>
 800c60e:	680e      	ldr	r6, [r1, #0]
 800c610:	602b      	str	r3, [r5, #0]
 800c612:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c616:	bf18      	it	ne
 800c618:	b236      	sxthne	r6, r6
 800c61a:	e7ef      	b.n	800c5fc <_printf_i+0xbc>
 800c61c:	682b      	ldr	r3, [r5, #0]
 800c61e:	6820      	ldr	r0, [r4, #0]
 800c620:	1d19      	adds	r1, r3, #4
 800c622:	6029      	str	r1, [r5, #0]
 800c624:	0601      	lsls	r1, r0, #24
 800c626:	d501      	bpl.n	800c62c <_printf_i+0xec>
 800c628:	681e      	ldr	r6, [r3, #0]
 800c62a:	e002      	b.n	800c632 <_printf_i+0xf2>
 800c62c:	0646      	lsls	r6, r0, #25
 800c62e:	d5fb      	bpl.n	800c628 <_printf_i+0xe8>
 800c630:	881e      	ldrh	r6, [r3, #0]
 800c632:	4854      	ldr	r0, [pc, #336]	; (800c784 <_printf_i+0x244>)
 800c634:	2f6f      	cmp	r7, #111	; 0x6f
 800c636:	bf0c      	ite	eq
 800c638:	2308      	moveq	r3, #8
 800c63a:	230a      	movne	r3, #10
 800c63c:	2100      	movs	r1, #0
 800c63e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c642:	6865      	ldr	r5, [r4, #4]
 800c644:	60a5      	str	r5, [r4, #8]
 800c646:	2d00      	cmp	r5, #0
 800c648:	bfa2      	ittt	ge
 800c64a:	6821      	ldrge	r1, [r4, #0]
 800c64c:	f021 0104 	bicge.w	r1, r1, #4
 800c650:	6021      	strge	r1, [r4, #0]
 800c652:	b90e      	cbnz	r6, 800c658 <_printf_i+0x118>
 800c654:	2d00      	cmp	r5, #0
 800c656:	d04d      	beq.n	800c6f4 <_printf_i+0x1b4>
 800c658:	4615      	mov	r5, r2
 800c65a:	fbb6 f1f3 	udiv	r1, r6, r3
 800c65e:	fb03 6711 	mls	r7, r3, r1, r6
 800c662:	5dc7      	ldrb	r7, [r0, r7]
 800c664:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c668:	4637      	mov	r7, r6
 800c66a:	42bb      	cmp	r3, r7
 800c66c:	460e      	mov	r6, r1
 800c66e:	d9f4      	bls.n	800c65a <_printf_i+0x11a>
 800c670:	2b08      	cmp	r3, #8
 800c672:	d10b      	bne.n	800c68c <_printf_i+0x14c>
 800c674:	6823      	ldr	r3, [r4, #0]
 800c676:	07de      	lsls	r6, r3, #31
 800c678:	d508      	bpl.n	800c68c <_printf_i+0x14c>
 800c67a:	6923      	ldr	r3, [r4, #16]
 800c67c:	6861      	ldr	r1, [r4, #4]
 800c67e:	4299      	cmp	r1, r3
 800c680:	bfde      	ittt	le
 800c682:	2330      	movle	r3, #48	; 0x30
 800c684:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c688:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c68c:	1b52      	subs	r2, r2, r5
 800c68e:	6122      	str	r2, [r4, #16]
 800c690:	f8cd a000 	str.w	sl, [sp]
 800c694:	464b      	mov	r3, r9
 800c696:	aa03      	add	r2, sp, #12
 800c698:	4621      	mov	r1, r4
 800c69a:	4640      	mov	r0, r8
 800c69c:	f7ff fee2 	bl	800c464 <_printf_common>
 800c6a0:	3001      	adds	r0, #1
 800c6a2:	d14c      	bne.n	800c73e <_printf_i+0x1fe>
 800c6a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6a8:	b004      	add	sp, #16
 800c6aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6ae:	4835      	ldr	r0, [pc, #212]	; (800c784 <_printf_i+0x244>)
 800c6b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c6b4:	6829      	ldr	r1, [r5, #0]
 800c6b6:	6823      	ldr	r3, [r4, #0]
 800c6b8:	f851 6b04 	ldr.w	r6, [r1], #4
 800c6bc:	6029      	str	r1, [r5, #0]
 800c6be:	061d      	lsls	r5, r3, #24
 800c6c0:	d514      	bpl.n	800c6ec <_printf_i+0x1ac>
 800c6c2:	07df      	lsls	r7, r3, #31
 800c6c4:	bf44      	itt	mi
 800c6c6:	f043 0320 	orrmi.w	r3, r3, #32
 800c6ca:	6023      	strmi	r3, [r4, #0]
 800c6cc:	b91e      	cbnz	r6, 800c6d6 <_printf_i+0x196>
 800c6ce:	6823      	ldr	r3, [r4, #0]
 800c6d0:	f023 0320 	bic.w	r3, r3, #32
 800c6d4:	6023      	str	r3, [r4, #0]
 800c6d6:	2310      	movs	r3, #16
 800c6d8:	e7b0      	b.n	800c63c <_printf_i+0xfc>
 800c6da:	6823      	ldr	r3, [r4, #0]
 800c6dc:	f043 0320 	orr.w	r3, r3, #32
 800c6e0:	6023      	str	r3, [r4, #0]
 800c6e2:	2378      	movs	r3, #120	; 0x78
 800c6e4:	4828      	ldr	r0, [pc, #160]	; (800c788 <_printf_i+0x248>)
 800c6e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c6ea:	e7e3      	b.n	800c6b4 <_printf_i+0x174>
 800c6ec:	0659      	lsls	r1, r3, #25
 800c6ee:	bf48      	it	mi
 800c6f0:	b2b6      	uxthmi	r6, r6
 800c6f2:	e7e6      	b.n	800c6c2 <_printf_i+0x182>
 800c6f4:	4615      	mov	r5, r2
 800c6f6:	e7bb      	b.n	800c670 <_printf_i+0x130>
 800c6f8:	682b      	ldr	r3, [r5, #0]
 800c6fa:	6826      	ldr	r6, [r4, #0]
 800c6fc:	6961      	ldr	r1, [r4, #20]
 800c6fe:	1d18      	adds	r0, r3, #4
 800c700:	6028      	str	r0, [r5, #0]
 800c702:	0635      	lsls	r5, r6, #24
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	d501      	bpl.n	800c70c <_printf_i+0x1cc>
 800c708:	6019      	str	r1, [r3, #0]
 800c70a:	e002      	b.n	800c712 <_printf_i+0x1d2>
 800c70c:	0670      	lsls	r0, r6, #25
 800c70e:	d5fb      	bpl.n	800c708 <_printf_i+0x1c8>
 800c710:	8019      	strh	r1, [r3, #0]
 800c712:	2300      	movs	r3, #0
 800c714:	6123      	str	r3, [r4, #16]
 800c716:	4615      	mov	r5, r2
 800c718:	e7ba      	b.n	800c690 <_printf_i+0x150>
 800c71a:	682b      	ldr	r3, [r5, #0]
 800c71c:	1d1a      	adds	r2, r3, #4
 800c71e:	602a      	str	r2, [r5, #0]
 800c720:	681d      	ldr	r5, [r3, #0]
 800c722:	6862      	ldr	r2, [r4, #4]
 800c724:	2100      	movs	r1, #0
 800c726:	4628      	mov	r0, r5
 800c728:	f7f3 fde2 	bl	80002f0 <memchr>
 800c72c:	b108      	cbz	r0, 800c732 <_printf_i+0x1f2>
 800c72e:	1b40      	subs	r0, r0, r5
 800c730:	6060      	str	r0, [r4, #4]
 800c732:	6863      	ldr	r3, [r4, #4]
 800c734:	6123      	str	r3, [r4, #16]
 800c736:	2300      	movs	r3, #0
 800c738:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c73c:	e7a8      	b.n	800c690 <_printf_i+0x150>
 800c73e:	6923      	ldr	r3, [r4, #16]
 800c740:	462a      	mov	r2, r5
 800c742:	4649      	mov	r1, r9
 800c744:	4640      	mov	r0, r8
 800c746:	47d0      	blx	sl
 800c748:	3001      	adds	r0, #1
 800c74a:	d0ab      	beq.n	800c6a4 <_printf_i+0x164>
 800c74c:	6823      	ldr	r3, [r4, #0]
 800c74e:	079b      	lsls	r3, r3, #30
 800c750:	d413      	bmi.n	800c77a <_printf_i+0x23a>
 800c752:	68e0      	ldr	r0, [r4, #12]
 800c754:	9b03      	ldr	r3, [sp, #12]
 800c756:	4298      	cmp	r0, r3
 800c758:	bfb8      	it	lt
 800c75a:	4618      	movlt	r0, r3
 800c75c:	e7a4      	b.n	800c6a8 <_printf_i+0x168>
 800c75e:	2301      	movs	r3, #1
 800c760:	4632      	mov	r2, r6
 800c762:	4649      	mov	r1, r9
 800c764:	4640      	mov	r0, r8
 800c766:	47d0      	blx	sl
 800c768:	3001      	adds	r0, #1
 800c76a:	d09b      	beq.n	800c6a4 <_printf_i+0x164>
 800c76c:	3501      	adds	r5, #1
 800c76e:	68e3      	ldr	r3, [r4, #12]
 800c770:	9903      	ldr	r1, [sp, #12]
 800c772:	1a5b      	subs	r3, r3, r1
 800c774:	42ab      	cmp	r3, r5
 800c776:	dcf2      	bgt.n	800c75e <_printf_i+0x21e>
 800c778:	e7eb      	b.n	800c752 <_printf_i+0x212>
 800c77a:	2500      	movs	r5, #0
 800c77c:	f104 0619 	add.w	r6, r4, #25
 800c780:	e7f5      	b.n	800c76e <_printf_i+0x22e>
 800c782:	bf00      	nop
 800c784:	0800d191 	.word	0x0800d191
 800c788:	0800d1a2 	.word	0x0800d1a2

0800c78c <_read_r>:
 800c78c:	b538      	push	{r3, r4, r5, lr}
 800c78e:	4d07      	ldr	r5, [pc, #28]	; (800c7ac <_read_r+0x20>)
 800c790:	4604      	mov	r4, r0
 800c792:	4608      	mov	r0, r1
 800c794:	4611      	mov	r1, r2
 800c796:	2200      	movs	r2, #0
 800c798:	602a      	str	r2, [r5, #0]
 800c79a:	461a      	mov	r2, r3
 800c79c:	f7f5 ff12 	bl	80025c4 <_read>
 800c7a0:	1c43      	adds	r3, r0, #1
 800c7a2:	d102      	bne.n	800c7aa <_read_r+0x1e>
 800c7a4:	682b      	ldr	r3, [r5, #0]
 800c7a6:	b103      	cbz	r3, 800c7aa <_read_r+0x1e>
 800c7a8:	6023      	str	r3, [r4, #0]
 800c7aa:	bd38      	pop	{r3, r4, r5, pc}
 800c7ac:	24004ef4 	.word	0x24004ef4

0800c7b0 <__swbuf_r>:
 800c7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7b2:	460e      	mov	r6, r1
 800c7b4:	4614      	mov	r4, r2
 800c7b6:	4605      	mov	r5, r0
 800c7b8:	b118      	cbz	r0, 800c7c2 <__swbuf_r+0x12>
 800c7ba:	6983      	ldr	r3, [r0, #24]
 800c7bc:	b90b      	cbnz	r3, 800c7c2 <__swbuf_r+0x12>
 800c7be:	f7fe ffe7 	bl	800b790 <__sinit>
 800c7c2:	4b21      	ldr	r3, [pc, #132]	; (800c848 <__swbuf_r+0x98>)
 800c7c4:	429c      	cmp	r4, r3
 800c7c6:	d12b      	bne.n	800c820 <__swbuf_r+0x70>
 800c7c8:	686c      	ldr	r4, [r5, #4]
 800c7ca:	69a3      	ldr	r3, [r4, #24]
 800c7cc:	60a3      	str	r3, [r4, #8]
 800c7ce:	89a3      	ldrh	r3, [r4, #12]
 800c7d0:	071a      	lsls	r2, r3, #28
 800c7d2:	d52f      	bpl.n	800c834 <__swbuf_r+0x84>
 800c7d4:	6923      	ldr	r3, [r4, #16]
 800c7d6:	b36b      	cbz	r3, 800c834 <__swbuf_r+0x84>
 800c7d8:	6923      	ldr	r3, [r4, #16]
 800c7da:	6820      	ldr	r0, [r4, #0]
 800c7dc:	1ac0      	subs	r0, r0, r3
 800c7de:	6963      	ldr	r3, [r4, #20]
 800c7e0:	b2f6      	uxtb	r6, r6
 800c7e2:	4283      	cmp	r3, r0
 800c7e4:	4637      	mov	r7, r6
 800c7e6:	dc04      	bgt.n	800c7f2 <__swbuf_r+0x42>
 800c7e8:	4621      	mov	r1, r4
 800c7ea:	4628      	mov	r0, r5
 800c7ec:	f7ff fade 	bl	800bdac <_fflush_r>
 800c7f0:	bb30      	cbnz	r0, 800c840 <__swbuf_r+0x90>
 800c7f2:	68a3      	ldr	r3, [r4, #8]
 800c7f4:	3b01      	subs	r3, #1
 800c7f6:	60a3      	str	r3, [r4, #8]
 800c7f8:	6823      	ldr	r3, [r4, #0]
 800c7fa:	1c5a      	adds	r2, r3, #1
 800c7fc:	6022      	str	r2, [r4, #0]
 800c7fe:	701e      	strb	r6, [r3, #0]
 800c800:	6963      	ldr	r3, [r4, #20]
 800c802:	3001      	adds	r0, #1
 800c804:	4283      	cmp	r3, r0
 800c806:	d004      	beq.n	800c812 <__swbuf_r+0x62>
 800c808:	89a3      	ldrh	r3, [r4, #12]
 800c80a:	07db      	lsls	r3, r3, #31
 800c80c:	d506      	bpl.n	800c81c <__swbuf_r+0x6c>
 800c80e:	2e0a      	cmp	r6, #10
 800c810:	d104      	bne.n	800c81c <__swbuf_r+0x6c>
 800c812:	4621      	mov	r1, r4
 800c814:	4628      	mov	r0, r5
 800c816:	f7ff fac9 	bl	800bdac <_fflush_r>
 800c81a:	b988      	cbnz	r0, 800c840 <__swbuf_r+0x90>
 800c81c:	4638      	mov	r0, r7
 800c81e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c820:	4b0a      	ldr	r3, [pc, #40]	; (800c84c <__swbuf_r+0x9c>)
 800c822:	429c      	cmp	r4, r3
 800c824:	d101      	bne.n	800c82a <__swbuf_r+0x7a>
 800c826:	68ac      	ldr	r4, [r5, #8]
 800c828:	e7cf      	b.n	800c7ca <__swbuf_r+0x1a>
 800c82a:	4b09      	ldr	r3, [pc, #36]	; (800c850 <__swbuf_r+0xa0>)
 800c82c:	429c      	cmp	r4, r3
 800c82e:	bf08      	it	eq
 800c830:	68ec      	ldreq	r4, [r5, #12]
 800c832:	e7ca      	b.n	800c7ca <__swbuf_r+0x1a>
 800c834:	4621      	mov	r1, r4
 800c836:	4628      	mov	r0, r5
 800c838:	f000 f80c 	bl	800c854 <__swsetup_r>
 800c83c:	2800      	cmp	r0, #0
 800c83e:	d0cb      	beq.n	800c7d8 <__swbuf_r+0x28>
 800c840:	f04f 37ff 	mov.w	r7, #4294967295
 800c844:	e7ea      	b.n	800c81c <__swbuf_r+0x6c>
 800c846:	bf00      	nop
 800c848:	0800d13c 	.word	0x0800d13c
 800c84c:	0800d15c 	.word	0x0800d15c
 800c850:	0800d11c 	.word	0x0800d11c

0800c854 <__swsetup_r>:
 800c854:	4b32      	ldr	r3, [pc, #200]	; (800c920 <__swsetup_r+0xcc>)
 800c856:	b570      	push	{r4, r5, r6, lr}
 800c858:	681d      	ldr	r5, [r3, #0]
 800c85a:	4606      	mov	r6, r0
 800c85c:	460c      	mov	r4, r1
 800c85e:	b125      	cbz	r5, 800c86a <__swsetup_r+0x16>
 800c860:	69ab      	ldr	r3, [r5, #24]
 800c862:	b913      	cbnz	r3, 800c86a <__swsetup_r+0x16>
 800c864:	4628      	mov	r0, r5
 800c866:	f7fe ff93 	bl	800b790 <__sinit>
 800c86a:	4b2e      	ldr	r3, [pc, #184]	; (800c924 <__swsetup_r+0xd0>)
 800c86c:	429c      	cmp	r4, r3
 800c86e:	d10f      	bne.n	800c890 <__swsetup_r+0x3c>
 800c870:	686c      	ldr	r4, [r5, #4]
 800c872:	89a3      	ldrh	r3, [r4, #12]
 800c874:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c878:	0719      	lsls	r1, r3, #28
 800c87a:	d42c      	bmi.n	800c8d6 <__swsetup_r+0x82>
 800c87c:	06dd      	lsls	r5, r3, #27
 800c87e:	d411      	bmi.n	800c8a4 <__swsetup_r+0x50>
 800c880:	2309      	movs	r3, #9
 800c882:	6033      	str	r3, [r6, #0]
 800c884:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c888:	81a3      	strh	r3, [r4, #12]
 800c88a:	f04f 30ff 	mov.w	r0, #4294967295
 800c88e:	e03e      	b.n	800c90e <__swsetup_r+0xba>
 800c890:	4b25      	ldr	r3, [pc, #148]	; (800c928 <__swsetup_r+0xd4>)
 800c892:	429c      	cmp	r4, r3
 800c894:	d101      	bne.n	800c89a <__swsetup_r+0x46>
 800c896:	68ac      	ldr	r4, [r5, #8]
 800c898:	e7eb      	b.n	800c872 <__swsetup_r+0x1e>
 800c89a:	4b24      	ldr	r3, [pc, #144]	; (800c92c <__swsetup_r+0xd8>)
 800c89c:	429c      	cmp	r4, r3
 800c89e:	bf08      	it	eq
 800c8a0:	68ec      	ldreq	r4, [r5, #12]
 800c8a2:	e7e6      	b.n	800c872 <__swsetup_r+0x1e>
 800c8a4:	0758      	lsls	r0, r3, #29
 800c8a6:	d512      	bpl.n	800c8ce <__swsetup_r+0x7a>
 800c8a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8aa:	b141      	cbz	r1, 800c8be <__swsetup_r+0x6a>
 800c8ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8b0:	4299      	cmp	r1, r3
 800c8b2:	d002      	beq.n	800c8ba <__swsetup_r+0x66>
 800c8b4:	4630      	mov	r0, r6
 800c8b6:	f7ff fad3 	bl	800be60 <_free_r>
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	6363      	str	r3, [r4, #52]	; 0x34
 800c8be:	89a3      	ldrh	r3, [r4, #12]
 800c8c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c8c4:	81a3      	strh	r3, [r4, #12]
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	6063      	str	r3, [r4, #4]
 800c8ca:	6923      	ldr	r3, [r4, #16]
 800c8cc:	6023      	str	r3, [r4, #0]
 800c8ce:	89a3      	ldrh	r3, [r4, #12]
 800c8d0:	f043 0308 	orr.w	r3, r3, #8
 800c8d4:	81a3      	strh	r3, [r4, #12]
 800c8d6:	6923      	ldr	r3, [r4, #16]
 800c8d8:	b94b      	cbnz	r3, 800c8ee <__swsetup_r+0x9a>
 800c8da:	89a3      	ldrh	r3, [r4, #12]
 800c8dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c8e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8e4:	d003      	beq.n	800c8ee <__swsetup_r+0x9a>
 800c8e6:	4621      	mov	r1, r4
 800c8e8:	4630      	mov	r0, r6
 800c8ea:	f000 f847 	bl	800c97c <__smakebuf_r>
 800c8ee:	89a0      	ldrh	r0, [r4, #12]
 800c8f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c8f4:	f010 0301 	ands.w	r3, r0, #1
 800c8f8:	d00a      	beq.n	800c910 <__swsetup_r+0xbc>
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	60a3      	str	r3, [r4, #8]
 800c8fe:	6963      	ldr	r3, [r4, #20]
 800c900:	425b      	negs	r3, r3
 800c902:	61a3      	str	r3, [r4, #24]
 800c904:	6923      	ldr	r3, [r4, #16]
 800c906:	b943      	cbnz	r3, 800c91a <__swsetup_r+0xc6>
 800c908:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c90c:	d1ba      	bne.n	800c884 <__swsetup_r+0x30>
 800c90e:	bd70      	pop	{r4, r5, r6, pc}
 800c910:	0781      	lsls	r1, r0, #30
 800c912:	bf58      	it	pl
 800c914:	6963      	ldrpl	r3, [r4, #20]
 800c916:	60a3      	str	r3, [r4, #8]
 800c918:	e7f4      	b.n	800c904 <__swsetup_r+0xb0>
 800c91a:	2000      	movs	r0, #0
 800c91c:	e7f7      	b.n	800c90e <__swsetup_r+0xba>
 800c91e:	bf00      	nop
 800c920:	2400001c 	.word	0x2400001c
 800c924:	0800d13c 	.word	0x0800d13c
 800c928:	0800d15c 	.word	0x0800d15c
 800c92c:	0800d11c 	.word	0x0800d11c

0800c930 <__swhatbuf_r>:
 800c930:	b570      	push	{r4, r5, r6, lr}
 800c932:	460e      	mov	r6, r1
 800c934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c938:	2900      	cmp	r1, #0
 800c93a:	b096      	sub	sp, #88	; 0x58
 800c93c:	4614      	mov	r4, r2
 800c93e:	461d      	mov	r5, r3
 800c940:	da08      	bge.n	800c954 <__swhatbuf_r+0x24>
 800c942:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c946:	2200      	movs	r2, #0
 800c948:	602a      	str	r2, [r5, #0]
 800c94a:	061a      	lsls	r2, r3, #24
 800c94c:	d410      	bmi.n	800c970 <__swhatbuf_r+0x40>
 800c94e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c952:	e00e      	b.n	800c972 <__swhatbuf_r+0x42>
 800c954:	466a      	mov	r2, sp
 800c956:	f000 f89b 	bl	800ca90 <_fstat_r>
 800c95a:	2800      	cmp	r0, #0
 800c95c:	dbf1      	blt.n	800c942 <__swhatbuf_r+0x12>
 800c95e:	9a01      	ldr	r2, [sp, #4]
 800c960:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c964:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c968:	425a      	negs	r2, r3
 800c96a:	415a      	adcs	r2, r3
 800c96c:	602a      	str	r2, [r5, #0]
 800c96e:	e7ee      	b.n	800c94e <__swhatbuf_r+0x1e>
 800c970:	2340      	movs	r3, #64	; 0x40
 800c972:	2000      	movs	r0, #0
 800c974:	6023      	str	r3, [r4, #0]
 800c976:	b016      	add	sp, #88	; 0x58
 800c978:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c97c <__smakebuf_r>:
 800c97c:	898b      	ldrh	r3, [r1, #12]
 800c97e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c980:	079d      	lsls	r5, r3, #30
 800c982:	4606      	mov	r6, r0
 800c984:	460c      	mov	r4, r1
 800c986:	d507      	bpl.n	800c998 <__smakebuf_r+0x1c>
 800c988:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c98c:	6023      	str	r3, [r4, #0]
 800c98e:	6123      	str	r3, [r4, #16]
 800c990:	2301      	movs	r3, #1
 800c992:	6163      	str	r3, [r4, #20]
 800c994:	b002      	add	sp, #8
 800c996:	bd70      	pop	{r4, r5, r6, pc}
 800c998:	ab01      	add	r3, sp, #4
 800c99a:	466a      	mov	r2, sp
 800c99c:	f7ff ffc8 	bl	800c930 <__swhatbuf_r>
 800c9a0:	9900      	ldr	r1, [sp, #0]
 800c9a2:	4605      	mov	r5, r0
 800c9a4:	4630      	mov	r0, r6
 800c9a6:	f7fe ffef 	bl	800b988 <_malloc_r>
 800c9aa:	b948      	cbnz	r0, 800c9c0 <__smakebuf_r+0x44>
 800c9ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9b0:	059a      	lsls	r2, r3, #22
 800c9b2:	d4ef      	bmi.n	800c994 <__smakebuf_r+0x18>
 800c9b4:	f023 0303 	bic.w	r3, r3, #3
 800c9b8:	f043 0302 	orr.w	r3, r3, #2
 800c9bc:	81a3      	strh	r3, [r4, #12]
 800c9be:	e7e3      	b.n	800c988 <__smakebuf_r+0xc>
 800c9c0:	4b0d      	ldr	r3, [pc, #52]	; (800c9f8 <__smakebuf_r+0x7c>)
 800c9c2:	62b3      	str	r3, [r6, #40]	; 0x28
 800c9c4:	89a3      	ldrh	r3, [r4, #12]
 800c9c6:	6020      	str	r0, [r4, #0]
 800c9c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9cc:	81a3      	strh	r3, [r4, #12]
 800c9ce:	9b00      	ldr	r3, [sp, #0]
 800c9d0:	6163      	str	r3, [r4, #20]
 800c9d2:	9b01      	ldr	r3, [sp, #4]
 800c9d4:	6120      	str	r0, [r4, #16]
 800c9d6:	b15b      	cbz	r3, 800c9f0 <__smakebuf_r+0x74>
 800c9d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c9dc:	4630      	mov	r0, r6
 800c9de:	f000 f869 	bl	800cab4 <_isatty_r>
 800c9e2:	b128      	cbz	r0, 800c9f0 <__smakebuf_r+0x74>
 800c9e4:	89a3      	ldrh	r3, [r4, #12]
 800c9e6:	f023 0303 	bic.w	r3, r3, #3
 800c9ea:	f043 0301 	orr.w	r3, r3, #1
 800c9ee:	81a3      	strh	r3, [r4, #12]
 800c9f0:	89a0      	ldrh	r0, [r4, #12]
 800c9f2:	4305      	orrs	r5, r0
 800c9f4:	81a5      	strh	r5, [r4, #12]
 800c9f6:	e7cd      	b.n	800c994 <__smakebuf_r+0x18>
 800c9f8:	0800b729 	.word	0x0800b729

0800c9fc <memmove>:
 800c9fc:	4288      	cmp	r0, r1
 800c9fe:	b510      	push	{r4, lr}
 800ca00:	eb01 0402 	add.w	r4, r1, r2
 800ca04:	d902      	bls.n	800ca0c <memmove+0x10>
 800ca06:	4284      	cmp	r4, r0
 800ca08:	4623      	mov	r3, r4
 800ca0a:	d807      	bhi.n	800ca1c <memmove+0x20>
 800ca0c:	1e43      	subs	r3, r0, #1
 800ca0e:	42a1      	cmp	r1, r4
 800ca10:	d008      	beq.n	800ca24 <memmove+0x28>
 800ca12:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca16:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ca1a:	e7f8      	b.n	800ca0e <memmove+0x12>
 800ca1c:	4402      	add	r2, r0
 800ca1e:	4601      	mov	r1, r0
 800ca20:	428a      	cmp	r2, r1
 800ca22:	d100      	bne.n	800ca26 <memmove+0x2a>
 800ca24:	bd10      	pop	{r4, pc}
 800ca26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ca2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ca2e:	e7f7      	b.n	800ca20 <memmove+0x24>

0800ca30 <_realloc_r>:
 800ca30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca34:	4680      	mov	r8, r0
 800ca36:	4614      	mov	r4, r2
 800ca38:	460e      	mov	r6, r1
 800ca3a:	b921      	cbnz	r1, 800ca46 <_realloc_r+0x16>
 800ca3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca40:	4611      	mov	r1, r2
 800ca42:	f7fe bfa1 	b.w	800b988 <_malloc_r>
 800ca46:	b92a      	cbnz	r2, 800ca54 <_realloc_r+0x24>
 800ca48:	f7ff fa0a 	bl	800be60 <_free_r>
 800ca4c:	4625      	mov	r5, r4
 800ca4e:	4628      	mov	r0, r5
 800ca50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca54:	f000 f83e 	bl	800cad4 <_malloc_usable_size_r>
 800ca58:	4284      	cmp	r4, r0
 800ca5a:	4607      	mov	r7, r0
 800ca5c:	d802      	bhi.n	800ca64 <_realloc_r+0x34>
 800ca5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ca62:	d812      	bhi.n	800ca8a <_realloc_r+0x5a>
 800ca64:	4621      	mov	r1, r4
 800ca66:	4640      	mov	r0, r8
 800ca68:	f7fe ff8e 	bl	800b988 <_malloc_r>
 800ca6c:	4605      	mov	r5, r0
 800ca6e:	2800      	cmp	r0, #0
 800ca70:	d0ed      	beq.n	800ca4e <_realloc_r+0x1e>
 800ca72:	42bc      	cmp	r4, r7
 800ca74:	4622      	mov	r2, r4
 800ca76:	4631      	mov	r1, r6
 800ca78:	bf28      	it	cs
 800ca7a:	463a      	movcs	r2, r7
 800ca7c:	f7fe ff4d 	bl	800b91a <memcpy>
 800ca80:	4631      	mov	r1, r6
 800ca82:	4640      	mov	r0, r8
 800ca84:	f7ff f9ec 	bl	800be60 <_free_r>
 800ca88:	e7e1      	b.n	800ca4e <_realloc_r+0x1e>
 800ca8a:	4635      	mov	r5, r6
 800ca8c:	e7df      	b.n	800ca4e <_realloc_r+0x1e>
	...

0800ca90 <_fstat_r>:
 800ca90:	b538      	push	{r3, r4, r5, lr}
 800ca92:	4d07      	ldr	r5, [pc, #28]	; (800cab0 <_fstat_r+0x20>)
 800ca94:	2300      	movs	r3, #0
 800ca96:	4604      	mov	r4, r0
 800ca98:	4608      	mov	r0, r1
 800ca9a:	4611      	mov	r1, r2
 800ca9c:	602b      	str	r3, [r5, #0]
 800ca9e:	f7f5 fdd6 	bl	800264e <_fstat>
 800caa2:	1c43      	adds	r3, r0, #1
 800caa4:	d102      	bne.n	800caac <_fstat_r+0x1c>
 800caa6:	682b      	ldr	r3, [r5, #0]
 800caa8:	b103      	cbz	r3, 800caac <_fstat_r+0x1c>
 800caaa:	6023      	str	r3, [r4, #0]
 800caac:	bd38      	pop	{r3, r4, r5, pc}
 800caae:	bf00      	nop
 800cab0:	24004ef4 	.word	0x24004ef4

0800cab4 <_isatty_r>:
 800cab4:	b538      	push	{r3, r4, r5, lr}
 800cab6:	4d06      	ldr	r5, [pc, #24]	; (800cad0 <_isatty_r+0x1c>)
 800cab8:	2300      	movs	r3, #0
 800caba:	4604      	mov	r4, r0
 800cabc:	4608      	mov	r0, r1
 800cabe:	602b      	str	r3, [r5, #0]
 800cac0:	f7f5 fdd5 	bl	800266e <_isatty>
 800cac4:	1c43      	adds	r3, r0, #1
 800cac6:	d102      	bne.n	800cace <_isatty_r+0x1a>
 800cac8:	682b      	ldr	r3, [r5, #0]
 800caca:	b103      	cbz	r3, 800cace <_isatty_r+0x1a>
 800cacc:	6023      	str	r3, [r4, #0]
 800cace:	bd38      	pop	{r3, r4, r5, pc}
 800cad0:	24004ef4 	.word	0x24004ef4

0800cad4 <_malloc_usable_size_r>:
 800cad4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cad8:	1f18      	subs	r0, r3, #4
 800cada:	2b00      	cmp	r3, #0
 800cadc:	bfbc      	itt	lt
 800cade:	580b      	ldrlt	r3, [r1, r0]
 800cae0:	18c0      	addlt	r0, r0, r3
 800cae2:	4770      	bx	lr

0800cae4 <_init>:
 800cae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cae6:	bf00      	nop
 800cae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800caea:	bc08      	pop	{r3}
 800caec:	469e      	mov	lr, r3
 800caee:	4770      	bx	lr

0800caf0 <_fini>:
 800caf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caf2:	bf00      	nop
 800caf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800caf6:	bc08      	pop	{r3}
 800caf8:	469e      	mov	lr, r3
 800cafa:	4770      	bx	lr
