
tractorDeere_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc9c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e0  0800cf3c  0800cf3c  0001cf3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d61c  0800d61c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800d61c  0800d61c  0001d61c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d624  0800d624  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d624  0800d624  0001d624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d628  0800d628  0001d628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  24000000  0800d62c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f00  24000080  0800d6ac  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24004f80  0800d6ac  00024f80  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b16f  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047f4  00000000  00000000  0004b21d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002088  00000000  00000000  0004fa18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ee0  00000000  00000000  00051aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ee33  00000000  00000000  00053980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024de9  00000000  00000000  000927b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019f76c  00000000  00000000  000b759c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00256d08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009524  00000000  00000000  00256d58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000080 	.word	0x24000080
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800cf24 	.word	0x0800cf24

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000084 	.word	0x24000084
 80002dc:	0800cf24 	.word	0x0800cf24

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <NRF24_DelayMicroSeconds+0x3c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a0b      	ldr	r2, [pc, #44]	; (8000800 <NRF24_DelayMicroSeconds+0x40>)
 80007d2:	fba2 2303 	umull	r2, r3, r2, r3
 80007d6:	0c9a      	lsrs	r2, r3, #18
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	fb02 f303 	mul.w	r3, r2, r3
 80007de:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80007e0:	bf00      	nop
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	1e5a      	subs	r2, r3, #1
 80007e6:	60fa      	str	r2, [r7, #12]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1fa      	bne.n	80007e2 <NRF24_DelayMicroSeconds+0x22>
}
 80007ec:	bf00      	nop
 80007ee:	bf00      	nop
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	24000000 	.word	0x24000000
 8000800:	165e9f81 	.word	0x165e9f81

08000804 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d008      	beq.n	8000824 <NRF24_csn+0x20>
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <NRF24_csn+0x38>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <NRF24_csn+0x3c>)
 8000818:	8811      	ldrh	r1, [r2, #0]
 800081a:	2201      	movs	r2, #1
 800081c:	4618      	mov	r0, r3
 800081e:	f002 ff0b 	bl	8003638 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000822:	e007      	b.n	8000834 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <NRF24_csn+0x38>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a05      	ldr	r2, [pc, #20]	; (8000840 <NRF24_csn+0x3c>)
 800082a:	8811      	ldrh	r1, [r2, #0]
 800082c:	2200      	movs	r2, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f002 ff02 	bl	8003638 <HAL_GPIO_WritePin>
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	240000ac 	.word	0x240000ac
 8000840:	240000b0 	.word	0x240000b0

08000844 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d008      	beq.n	8000864 <NRF24_ce+0x20>
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <NRF24_ce+0x38>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <NRF24_ce+0x3c>)
 8000858:	8811      	ldrh	r1, [r2, #0]
 800085a:	2201      	movs	r2, #1
 800085c:	4618      	mov	r0, r3
 800085e:	f002 feeb 	bl	8003638 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000862:	e007      	b.n	8000874 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <NRF24_ce+0x38>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a05      	ldr	r2, [pc, #20]	; (8000880 <NRF24_ce+0x3c>)
 800086a:	8811      	ldrh	r1, [r2, #0]
 800086c:	2200      	movs	r2, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f002 fee2 	bl	8003638 <HAL_GPIO_WritePin>
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	240000ac 	.word	0x240000ac
 8000880:	240000b2 	.word	0x240000b2

08000884 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff ffb8 	bl	8000804 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	f003 031f 	and.w	r3, r3, #31
 800089a:	b2db      	uxtb	r3, r3
 800089c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800089e:	f107 010c 	add.w	r1, r7, #12
 80008a2:	2364      	movs	r3, #100	; 0x64
 80008a4:	2201      	movs	r2, #1
 80008a6:	480a      	ldr	r0, [pc, #40]	; (80008d0 <NRF24_read_register+0x4c>)
 80008a8:	f005 fbd2 	bl	8006050 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	1c59      	adds	r1, r3, #1
 80008b2:	2364      	movs	r3, #100	; 0x64
 80008b4:	2201      	movs	r2, #1
 80008b6:	4806      	ldr	r0, [pc, #24]	; (80008d0 <NRF24_read_register+0x4c>)
 80008b8:	f005 fdbc 	bl	8006434 <HAL_SPI_Receive>
	retData = spiBuf[1];
 80008bc:	7b7b      	ldrb	r3, [r7, #13]
 80008be:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 80008c0:	2001      	movs	r0, #1
 80008c2:	f7ff ff9f 	bl	8000804 <NRF24_csn>
	return retData;
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	240000b4 	.word	0x240000b4

080008d4 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	6039      	str	r1, [r7, #0]
 80008de:	71fb      	strb	r3, [r7, #7]
 80008e0:	4613      	mov	r3, r2
 80008e2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80008e4:	2000      	movs	r0, #0
 80008e6:	f7ff ff8d 	bl	8000804 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	f003 031f 	and.w	r3, r3, #31
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80008f4:	f107 010c 	add.w	r1, r7, #12
 80008f8:	2364      	movs	r3, #100	; 0x64
 80008fa:	2201      	movs	r2, #1
 80008fc:	4808      	ldr	r0, [pc, #32]	; (8000920 <NRF24_read_registerN+0x4c>)
 80008fe:	f005 fba7 	bl	8006050 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000902:	79bb      	ldrb	r3, [r7, #6]
 8000904:	b29a      	uxth	r2, r3
 8000906:	2364      	movs	r3, #100	; 0x64
 8000908:	6839      	ldr	r1, [r7, #0]
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <NRF24_read_registerN+0x4c>)
 800090c:	f005 fd92 	bl	8006434 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000910:	2001      	movs	r0, #1
 8000912:	f7ff ff77 	bl	8000804 <NRF24_csn>
}
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	240000b4 	.word	0x240000b4

08000924 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	460a      	mov	r2, r1
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	4613      	mov	r3, r2
 8000932:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000934:	2000      	movs	r0, #0
 8000936:	f7ff ff65 	bl	8000804 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	f043 0320 	orr.w	r3, r3, #32
 8000940:	b2db      	uxtb	r3, r3
 8000942:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000944:	79bb      	ldrb	r3, [r7, #6]
 8000946:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000948:	f107 010c 	add.w	r1, r7, #12
 800094c:	2364      	movs	r3, #100	; 0x64
 800094e:	2202      	movs	r2, #2
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <NRF24_write_register+0x40>)
 8000952:	f005 fb7d 	bl	8006050 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000956:	2001      	movs	r0, #1
 8000958:	f7ff ff54 	bl	8000804 <NRF24_csn>
}
 800095c:	bf00      	nop
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	240000b4 	.word	0x240000b4

08000968 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	6039      	str	r1, [r7, #0]
 8000972:	71fb      	strb	r3, [r7, #7]
 8000974:	4613      	mov	r3, r2
 8000976:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000978:	2000      	movs	r0, #0
 800097a:	f7ff ff43 	bl	8000804 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	f043 0320 	orr.w	r3, r3, #32
 8000984:	b2db      	uxtb	r3, r3
 8000986:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000988:	f107 010c 	add.w	r1, r7, #12
 800098c:	2364      	movs	r3, #100	; 0x64
 800098e:	2201      	movs	r2, #1
 8000990:	4808      	ldr	r0, [pc, #32]	; (80009b4 <NRF24_write_registerN+0x4c>)
 8000992:	f005 fb5d 	bl	8006050 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000996:	79bb      	ldrb	r3, [r7, #6]
 8000998:	b29a      	uxth	r2, r3
 800099a:	2364      	movs	r3, #100	; 0x64
 800099c:	6839      	ldr	r1, [r7, #0]
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <NRF24_write_registerN+0x4c>)
 80009a0:	f005 fb56 	bl	8006050 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80009a4:	2001      	movs	r0, #1
 80009a6:	f7ff ff2d 	bl	8000804 <NRF24_csn>
}
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	240000b4 	.word	0x240000b4

080009b8 <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	460b      	mov	r3, r1
 80009c2:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 80009c4:	f000 fa0a 	bl	8000ddc <NRF24_getPayloadSize>
 80009c8:	4603      	mov	r3, r0
 80009ca:	461a      	mov	r2, r3
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d303      	bcc.n	80009da <NRF24_read_payload+0x22>
 80009d2:	f000 fa03 	bl	8000ddc <NRF24_getPayloadSize>
 80009d6:	4603      	mov	r3, r0
 80009d8:	e000      	b.n	80009dc <NRF24_read_payload+0x24>
 80009da:	78fb      	ldrb	r3, [r7, #3]
 80009dc:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80009de:	2000      	movs	r0, #0
 80009e0:	f7ff ff10 	bl	8000804 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 80009e4:	2361      	movs	r3, #97	; 0x61
 80009e6:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 80009e8:	f107 010e 	add.w	r1, r7, #14
 80009ec:	2364      	movs	r3, #100	; 0x64
 80009ee:	2201      	movs	r2, #1
 80009f0:	4808      	ldr	r0, [pc, #32]	; (8000a14 <NRF24_read_payload+0x5c>)
 80009f2:	f005 fb2d 	bl	8006050 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	2364      	movs	r3, #100	; 0x64
 80009fc:	6879      	ldr	r1, [r7, #4]
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <NRF24_read_payload+0x5c>)
 8000a00:	f005 fd18 	bl	8006434 <HAL_SPI_Receive>
	NRF24_csn(1);
 8000a04:	2001      	movs	r0, #1
 8000a06:	f7ff fefd 	bl	8000804 <NRF24_csn>
}
 8000a0a:	bf00      	nop
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	240000b4 	.word	0x240000b4

08000a18 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000a1c:	21ff      	movs	r1, #255	; 0xff
 8000a1e:	20e1      	movs	r0, #225	; 0xe1
 8000a20:	f7ff ff80 	bl	8000924 <NRF24_write_register>
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000a2c:	21ff      	movs	r1, #255	; 0xff
 8000a2e:	20e2      	movs	r0, #226	; 0xe2
 8000a30:	f7ff ff78 	bl	8000924 <NRF24_write_register>
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8000a3e:	2007      	movs	r0, #7
 8000a40:	f7ff ff20 	bl	8000884 <NRF24_read_register>
 8000a44:	4603      	mov	r3, r0
 8000a46:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000a48:	79fb      	ldrb	r3, [r7, #7]
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000a54:	b082      	sub	sp, #8
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b084      	sub	sp, #16
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	61fb      	str	r3, [r7, #28]
 8000a60:	460b      	mov	r3, r1
 8000a62:	807b      	strh	r3, [r7, #2]
 8000a64:	4613      	mov	r3, r2
 8000a66:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000a68:	4b66      	ldr	r3, [pc, #408]	; (8000c04 <NRF24_begin+0x1b0>)
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	2288      	movs	r2, #136	; 0x88
 8000a72:	4619      	mov	r1, r3
 8000a74:	f00b f971 	bl	800bd5a <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000a78:	4a63      	ldr	r2, [pc, #396]	; (8000c08 <NRF24_begin+0x1b4>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000a7e:	4a63      	ldr	r2, [pc, #396]	; (8000c0c <NRF24_begin+0x1b8>)
 8000a80:	887b      	ldrh	r3, [r7, #2]
 8000a82:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000a84:	4a62      	ldr	r2, [pc, #392]	; (8000c10 <NRF24_begin+0x1bc>)
 8000a86:	883b      	ldrh	r3, [r7, #0]
 8000a88:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	f7ff feba 	bl	8000804 <NRF24_csn>
	NRF24_ce(0);
 8000a90:	2000      	movs	r0, #0
 8000a92:	f7ff fed7 	bl	8000844 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000a96:	2005      	movs	r0, #5
 8000a98:	f001 ffaa 	bl	80029f0 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000a9c:	2108      	movs	r1, #8
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f7ff ff40 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000aa4:	213f      	movs	r1, #63	; 0x3f
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f7ff ff3c 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000aac:	2103      	movs	r1, #3
 8000aae:	2002      	movs	r0, #2
 8000ab0:	f7ff ff38 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000ab4:	2103      	movs	r1, #3
 8000ab6:	2003      	movs	r0, #3
 8000ab8:	f7ff ff34 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000abc:	2103      	movs	r1, #3
 8000abe:	2004      	movs	r0, #4
 8000ac0:	f7ff ff30 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000ac4:	2102      	movs	r1, #2
 8000ac6:	2005      	movs	r0, #5
 8000ac8:	f7ff ff2c 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000acc:	210f      	movs	r1, #15
 8000ace:	2006      	movs	r0, #6
 8000ad0:	f7ff ff28 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000ad4:	210e      	movs	r1, #14
 8000ad6:	2007      	movs	r0, #7
 8000ad8:	f7ff ff24 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000adc:	2100      	movs	r1, #0
 8000ade:	2008      	movs	r0, #8
 8000ae0:	f7ff ff20 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2009      	movs	r0, #9
 8000ae8:	f7ff ff1c 	bl	8000924 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000aec:	23e7      	movs	r3, #231	; 0xe7
 8000aee:	733b      	strb	r3, [r7, #12]
 8000af0:	23e7      	movs	r3, #231	; 0xe7
 8000af2:	72fb      	strb	r3, [r7, #11]
 8000af4:	23e7      	movs	r3, #231	; 0xe7
 8000af6:	72bb      	strb	r3, [r7, #10]
 8000af8:	23e7      	movs	r3, #231	; 0xe7
 8000afa:	727b      	strb	r3, [r7, #9]
 8000afc:	23e7      	movs	r3, #231	; 0xe7
 8000afe:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	2205      	movs	r2, #5
 8000b06:	4619      	mov	r1, r3
 8000b08:	200a      	movs	r0, #10
 8000b0a:	f7ff ff2d 	bl	8000968 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 8000b0e:	23c2      	movs	r3, #194	; 0xc2
 8000b10:	733b      	strb	r3, [r7, #12]
 8000b12:	23c2      	movs	r3, #194	; 0xc2
 8000b14:	72fb      	strb	r3, [r7, #11]
 8000b16:	23c2      	movs	r3, #194	; 0xc2
 8000b18:	72bb      	strb	r3, [r7, #10]
 8000b1a:	23c2      	movs	r3, #194	; 0xc2
 8000b1c:	727b      	strb	r3, [r7, #9]
 8000b1e:	23c2      	movs	r3, #194	; 0xc2
 8000b20:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000b22:	f107 0308 	add.w	r3, r7, #8
 8000b26:	2205      	movs	r2, #5
 8000b28:	4619      	mov	r1, r3
 8000b2a:	200b      	movs	r0, #11
 8000b2c:	f7ff ff1c 	bl	8000968 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000b30:	21c3      	movs	r1, #195	; 0xc3
 8000b32:	200c      	movs	r0, #12
 8000b34:	f7ff fef6 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000b38:	21c4      	movs	r1, #196	; 0xc4
 8000b3a:	200d      	movs	r0, #13
 8000b3c:	f7ff fef2 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000b40:	21c5      	movs	r1, #197	; 0xc5
 8000b42:	200e      	movs	r0, #14
 8000b44:	f7ff feee 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000b48:	21c6      	movs	r1, #198	; 0xc6
 8000b4a:	200f      	movs	r0, #15
 8000b4c:	f7ff feea 	bl	8000924 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000b50:	23e7      	movs	r3, #231	; 0xe7
 8000b52:	733b      	strb	r3, [r7, #12]
 8000b54:	23e7      	movs	r3, #231	; 0xe7
 8000b56:	72fb      	strb	r3, [r7, #11]
 8000b58:	23e7      	movs	r3, #231	; 0xe7
 8000b5a:	72bb      	strb	r3, [r7, #10]
 8000b5c:	23e7      	movs	r3, #231	; 0xe7
 8000b5e:	727b      	strb	r3, [r7, #9]
 8000b60:	23e7      	movs	r3, #231	; 0xe7
 8000b62:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000b64:	f107 0308 	add.w	r3, r7, #8
 8000b68:	2205      	movs	r2, #5
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	2010      	movs	r0, #16
 8000b6e:	f7ff fefb 	bl	8000968 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000b72:	2100      	movs	r1, #0
 8000b74:	2011      	movs	r0, #17
 8000b76:	f7ff fed5 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2012      	movs	r0, #18
 8000b7e:	f7ff fed1 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000b82:	2100      	movs	r1, #0
 8000b84:	2013      	movs	r0, #19
 8000b86:	f7ff fecd 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2014      	movs	r0, #20
 8000b8e:	f7ff fec9 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000b92:	2100      	movs	r1, #0
 8000b94:	2015      	movs	r0, #21
 8000b96:	f7ff fec5 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	2016      	movs	r0, #22
 8000b9e:	f7ff fec1 	bl	8000924 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8000ba2:	f000 fa7d 	bl	80010a0 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	201c      	movs	r0, #28
 8000baa:	f7ff febb 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000bae:	2100      	movs	r1, #0
 8000bb0:	201d      	movs	r0, #29
 8000bb2:	f7ff feb7 	bl	8000924 <NRF24_write_register>
	printRadioSettings();
 8000bb6:	f000 fa8d 	bl	80010d4 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000bba:	210f      	movs	r1, #15
 8000bbc:	200f      	movs	r0, #15
 8000bbe:	f000 f8c5 	bl	8000d4c <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000bc2:	2003      	movs	r0, #3
 8000bc4:	f000 f97d 	bl	8000ec2 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f000 f9b3 	bl	8000f34 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000bce:	2002      	movs	r0, #2
 8000bd0:	f000 f9f6 	bl	8000fc0 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000bd4:	f000 f948 	bl	8000e68 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000bd8:	2020      	movs	r0, #32
 8000bda:	f000 f8e7 	bl	8000dac <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 8000bde:	f000 fa56 	bl	800108e <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000be2:	204c      	movs	r0, #76	; 0x4c
 8000be4:	f000 f8cd 	bl	8000d82 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000be8:	f7ff ff16 	bl	8000a18 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000bec:	f7ff ff1c 	bl	8000a28 <NRF24_flush_rx>

	NRF24_powerDown();
 8000bf0:	f000 fa0e 	bl	8001010 <NRF24_powerDown>

}
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bfe:	b002      	add	sp, #8
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	240000b4 	.word	0x240000b4
 8000c08:	240000ac 	.word	0x240000ac
 8000c0c:	240000b0 	.word	0x240000b0
 8000c10:	240000b2 	.word	0x240000b2

08000c14 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f7ff fe33 	bl	8000884 <NRF24_read_register>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	f043 0303 	orr.w	r3, r3, #3
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	4619      	mov	r1, r3
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f7ff fe7b 	bl	8000924 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <NRF24_startListening+0x48>)
 8000c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	d004      	beq.n	8000c42 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8000c38:	2205      	movs	r2, #5
 8000c3a:	4908      	ldr	r1, [pc, #32]	; (8000c5c <NRF24_startListening+0x48>)
 8000c3c:	200a      	movs	r0, #10
 8000c3e:	f7ff fe93 	bl	8000968 <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 8000c42:	f7ff fee9 	bl	8000a18 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000c46:	f7ff feef 	bl	8000a28 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f7ff fdfa 	bl	8000844 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8000c50:	2096      	movs	r0, #150	; 0x96
 8000c52:	f7ff fdb5 	bl	80007c0 <NRF24_DelayMicroSeconds>
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	240000a0 	.word	0x240000a0

08000c60 <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000c64:	2000      	movs	r0, #0
 8000c66:	f000 f9e2 	bl	800102e <NRF24_availablePipe>
 8000c6a:	4603      	mov	r3, r0
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8000c7c:	78fb      	ldrb	r3, [r7, #3]
 8000c7e:	4619      	mov	r1, r3
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff fe99 	bl	80009b8 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8000c86:	2017      	movs	r0, #23
 8000c88:	f7ff fdfc 	bl	8000884 <NRF24_read_register>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8000c94:	f7ff fec8 	bl	8000a28 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8000c98:	f000 f8ac 	bl	8000df4 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	bf14      	ite	ne
 8000ca2:	2301      	movne	r3, #1
 8000ca4:	2300      	moveq	r3, #0
 8000ca6:	b2db      	uxtb	r3, r3
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4601      	mov	r1, r0
 8000cb8:	e9c7 2300 	strd	r2, r3, [r7]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d104      	bne.n	8000cd0 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8000cc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000cca:	491c      	ldr	r1, [pc, #112]	; (8000d3c <NRF24_openReadingPipe+0x8c>)
 8000ccc:	e9c1 2300 	strd	r2, r3, [r1]

	if(number <= 6)
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d82d      	bhi.n	8000d32 <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d808      	bhi.n	8000cee <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	4a18      	ldr	r2, [pc, #96]	; (8000d40 <NRF24_openReadingPipe+0x90>)
 8000ce0:	5cd3      	ldrb	r3, [r2, r3]
 8000ce2:	4639      	mov	r1, r7
 8000ce4:	2205      	movs	r2, #5
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fe3e 	bl	8000968 <NRF24_write_registerN>
 8000cec:	e007      	b.n	8000cfe <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
 8000cf0:	4a13      	ldr	r2, [pc, #76]	; (8000d40 <NRF24_openReadingPipe+0x90>)
 8000cf2:	5cd3      	ldrb	r3, [r2, r3]
 8000cf4:	4639      	mov	r1, r7
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fe35 	bl	8000968 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	4a10      	ldr	r2, [pc, #64]	; (8000d44 <NRF24_openReadingPipe+0x94>)
 8000d02:	5cd3      	ldrb	r3, [r2, r3]
 8000d04:	4a10      	ldr	r2, [pc, #64]	; (8000d48 <NRF24_openReadingPipe+0x98>)
 8000d06:	7812      	ldrb	r2, [r2, #0]
 8000d08:	4611      	mov	r1, r2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fe0a 	bl	8000924 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8000d10:	2002      	movs	r0, #2
 8000d12:	f7ff fdb7 	bl	8000884 <NRF24_read_register>
 8000d16:	4603      	mov	r3, r0
 8000d18:	b25a      	sxtb	r2, r3
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	b25b      	sxtb	r3, r3
 8000d24:	4313      	orrs	r3, r2
 8000d26:	b25b      	sxtb	r3, r3
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	2002      	movs	r0, #2
 8000d2e:	f7ff fdf9 	bl	8000924 <NRF24_write_register>
	}

}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	240000a0 	.word	0x240000a0
 8000d40:	0800d528 	.word	0x0800d528
 8000d44:	0800d530 	.word	0x0800d530
 8000d48:	240000a8 	.word	0x240000a8

08000d4c <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	460a      	mov	r2, r1
 8000d56:	71fb      	strb	r3, [r7, #7]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	011b      	lsls	r3, r3, #4
 8000d60:	b25a      	sxtb	r2, r3
 8000d62:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	b25b      	sxtb	r3, r3
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	4619      	mov	r1, r3
 8000d74:	2004      	movs	r0, #4
 8000d76:	f7ff fdd5 	bl	8000924 <NRF24_write_register>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b084      	sub	sp, #16
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000d8c:	237f      	movs	r3, #127	; 0x7f
 8000d8e:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000d90:	7bfa      	ldrb	r2, [r7, #15]
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	4293      	cmp	r3, r2
 8000d96:	bf28      	it	cs
 8000d98:	4613      	movcs	r3, r2
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	2005      	movs	r0, #5
 8000da0:	f7ff fdc0 	bl	8000924 <NRF24_write_register>
}
 8000da4:	bf00      	nop
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000db6:	2320      	movs	r3, #32
 8000db8:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000dba:	7bfa      	ldrb	r2, [r7, #15]
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	bf28      	it	cs
 8000dc2:	4613      	movcs	r3, r2
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <NRF24_setPayloadSize+0x2c>)
 8000dc8:	701a      	strb	r2, [r3, #0]
}
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	240000a8 	.word	0x240000a8

08000ddc <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
	return payload_size;
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <NRF24_getPayloadSize+0x14>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	240000a8 	.word	0x240000a8

08000df4 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000df8:	2060      	movs	r0, #96	; 0x60
 8000dfa:	f7ff fd43 	bl	8000884 <NRF24_read_register>
 8000dfe:	4603      	mov	r3, r0
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <NRF24_enableDynamicPayloads>:
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
}
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000e08:	201d      	movs	r0, #29
 8000e0a:	f7ff fd3b 	bl	8000884 <NRF24_read_register>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	f043 0304 	orr.w	r3, r3, #4
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	4619      	mov	r1, r3
 8000e18:	201d      	movs	r0, #29
 8000e1a:	f7ff fd83 	bl	8000924 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8000e1e:	201d      	movs	r0, #29
 8000e20:	f7ff fd30 	bl	8000884 <NRF24_read_register>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d10c      	bne.n	8000e44 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8000e2a:	f000 f939 	bl	80010a0 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000e2e:	201d      	movs	r0, #29
 8000e30:	f7ff fd28 	bl	8000884 <NRF24_read_register>
 8000e34:	4603      	mov	r3, r0
 8000e36:	f043 0304 	orr.w	r3, r3, #4
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	201d      	movs	r0, #29
 8000e40:	f7ff fd70 	bl	8000924 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8000e44:	201c      	movs	r0, #28
 8000e46:	f7ff fd1d 	bl	8000884 <NRF24_read_register>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	4619      	mov	r1, r3
 8000e54:	201c      	movs	r0, #28
 8000e56:	f7ff fd65 	bl	8000924 <NRF24_write_register>
  dynamic_payloads_enabled = true;
 8000e5a:	4b02      	ldr	r3, [pc, #8]	; (8000e64 <NRF24_enableDynamicPayloads+0x60>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	701a      	strb	r2, [r3, #0]

}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	240000a9 	.word	0x240000a9

08000e68 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000e6c:	201d      	movs	r0, #29
 8000e6e:	f7ff fd09 	bl	8000884 <NRF24_read_register>
 8000e72:	4603      	mov	r3, r0
 8000e74:	f023 0304 	bic.w	r3, r3, #4
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	201d      	movs	r0, #29
 8000e7e:	f7ff fd51 	bl	8000924 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8000e82:	2100      	movs	r1, #0
 8000e84:	201c      	movs	r0, #28
 8000e86:	f7ff fd4d 	bl	8000924 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000e8a:	4b02      	ldr	r3, [pc, #8]	; (8000e94 <NRF24_disableDynamicPayloads+0x2c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	701a      	strb	r2, [r3, #0]
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	240000a9 	.word	0x240000a9

08000e98 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d004      	beq.n	8000eb2 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000ea8:	213f      	movs	r1, #63	; 0x3f
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f7ff fd3a 	bl	8000924 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000eb0:	e003      	b.n	8000eba <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	f7ff fd35 	bl	8000924 <NRF24_write_register>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b084      	sub	sp, #16
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	4603      	mov	r3, r0
 8000eca:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000ecc:	2006      	movs	r0, #6
 8000ece:	f7ff fcd9 	bl	8000884 <NRF24_read_register>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000ed6:	7bfb      	ldrb	r3, [r7, #15]
 8000ed8:	f023 0306 	bic.w	r3, r3, #6
 8000edc:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	2b03      	cmp	r3, #3
 8000ee2:	d104      	bne.n	8000eee <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
 8000ee6:	f043 0306 	orr.w	r3, r3, #6
 8000eea:	73fb      	strb	r3, [r7, #15]
 8000eec:	e019      	b.n	8000f22 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d104      	bne.n	8000efe <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
 8000ef6:	f043 0304 	orr.w	r3, r3, #4
 8000efa:	73fb      	strb	r3, [r7, #15]
 8000efc:	e011      	b.n	8000f22 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d104      	bne.n	8000f0e <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	f043 0302 	orr.w	r3, r3, #2
 8000f0a:	73fb      	strb	r3, [r7, #15]
 8000f0c:	e009      	b.n	8000f22 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d006      	beq.n	8000f22 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	2b04      	cmp	r3, #4
 8000f18:	d103      	bne.n	8000f22 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	f043 0306 	orr.w	r3, r3, #6
 8000f20:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	4619      	mov	r1, r3
 8000f26:	2006      	movs	r0, #6
 8000f28:	f7ff fcfc 	bl	8000924 <NRF24_write_register>
}
 8000f2c:	bf00      	nop
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000f42:	2006      	movs	r0, #6
 8000f44:	f7ff fc9e 	bl	8000884 <NRF24_read_register>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <NRF24_setDataRate+0x88>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000f52:	7bbb      	ldrb	r3, [r7, #14]
 8000f54:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000f58:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d107      	bne.n	8000f70 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000f60:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <NRF24_setDataRate+0x88>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000f66:	7bbb      	ldrb	r3, [r7, #14]
 8000f68:	f043 0320 	orr.w	r3, r3, #32
 8000f6c:	73bb      	strb	r3, [r7, #14]
 8000f6e:	e00d      	b.n	8000f8c <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d107      	bne.n	8000f86 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <NRF24_setDataRate+0x88>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000f7c:	7bbb      	ldrb	r3, [r7, #14]
 8000f7e:	f043 0308 	orr.w	r3, r3, #8
 8000f82:	73bb      	strb	r3, [r7, #14]
 8000f84:	e002      	b.n	8000f8c <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000f86:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <NRF24_setDataRate+0x88>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000f8c:	7bbb      	ldrb	r3, [r7, #14]
 8000f8e:	4619      	mov	r1, r3
 8000f90:	2006      	movs	r0, #6
 8000f92:	f7ff fcc7 	bl	8000924 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000f96:	2006      	movs	r0, #6
 8000f98:	f7ff fc74 	bl	8000884 <NRF24_read_register>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	7bbb      	ldrb	r3, [r7, #14]
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d102      	bne.n	8000fac <NRF24_setDataRate+0x78>
  {
    result = true;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	73fb      	strb	r3, [r7, #15]
 8000faa:	e002      	b.n	8000fb2 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000fac:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <NRF24_setDataRate+0x88>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	240000aa 	.word	0x240000aa

08000fc0 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f7ff fc5a 	bl	8000884 <NRF24_read_register>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	f023 030c 	bic.w	r3, r3, #12
 8000fd6:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d00f      	beq.n	8000ffe <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d104      	bne.n	8000fee <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	f043 0308 	orr.w	r3, r3, #8
 8000fea:	73fb      	strb	r3, [r7, #15]
 8000fec:	e007      	b.n	8000ffe <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	f043 0308 	orr.w	r3, r3, #8
 8000ff4:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	f043 0304 	orr.w	r3, r3, #4
 8000ffc:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	4619      	mov	r1, r3
 8001002:	2000      	movs	r0, #0
 8001004:	f7ff fc8e 	bl	8000924 <NRF24_write_register>
}
 8001008:	bf00      	nop
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8001014:	2000      	movs	r0, #0
 8001016:	f7ff fc35 	bl	8000884 <NRF24_read_register>
 800101a:	4603      	mov	r3, r0
 800101c:	f023 0302 	bic.w	r3, r3, #2
 8001020:	b2db      	uxtb	r3, r3
 8001022:	4619      	mov	r1, r3
 8001024:	2000      	movs	r0, #0
 8001026:	f7ff fc7d 	bl	8000924 <NRF24_write_register>
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}

0800102e <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b084      	sub	sp, #16
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001036:	f7ff fcff 	bl	8000a38 <NRF24_get_status>
 800103a:	4603      	mov	r3, r0
 800103c:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001044:	2b00      	cmp	r3, #0
 8001046:	bf14      	ite	ne
 8001048:	2301      	movne	r3, #1
 800104a:	2300      	moveq	r3, #0
 800104c:	73bb      	strb	r3, [r7, #14]

  if (result)
 800104e:	7bbb      	ldrb	r3, [r7, #14]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d017      	beq.n	8001084 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d007      	beq.n	800106a <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	085b      	lsrs	r3, r3, #1
 800105e:	b2db      	uxtb	r3, r3
 8001060:	f003 0307 	and.w	r3, r3, #7
 8001064:	b2da      	uxtb	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 800106a:	2140      	movs	r1, #64	; 0x40
 800106c:	2007      	movs	r0, #7
 800106e:	f7ff fc59 	bl	8000924 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	f003 0320 	and.w	r3, r3, #32
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 800107c:	2120      	movs	r1, #32
 800107e:	2007      	movs	r0, #7
 8001080:	f7ff fc50 	bl	8000924 <NRF24_write_register>
    }
  }
  return result;
 8001084:	7bbb      	ldrb	r3, [r7, #14]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001092:	2170      	movs	r1, #112	; 0x70
 8001094:	2007      	movs	r0, #7
 8001096:	f7ff fc45 	bl	8000924 <NRF24_write_register>
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80010a6:	2000      	movs	r0, #0
 80010a8:	f7ff fbac 	bl	8000804 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 80010ac:	2350      	movs	r3, #80	; 0x50
 80010ae:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 80010b0:	2373      	movs	r3, #115	; 0x73
 80010b2:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 80010b4:	1d39      	adds	r1, r7, #4
 80010b6:	2364      	movs	r3, #100	; 0x64
 80010b8:	2202      	movs	r2, #2
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <NRF24_ACTIVATE_cmd+0x30>)
 80010bc:	f004 ffc8 	bl	8006050 <HAL_SPI_Transmit>
	NRF24_csn(1);
 80010c0:	2001      	movs	r0, #1
 80010c2:	f7ff fb9f 	bl	8000804 <NRF24_csn>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	240000b4 	.word	0x240000b4

080010d4 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 80010d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010d6:	b0a1      	sub	sp, #132	; 0x84
 80010d8:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80010da:	f107 0308 	add.w	r3, r7, #8
 80010de:	49c3      	ldr	r1, [pc, #780]	; (80013ec <printRadioSettings+0x318>)
 80010e0:	4618      	mov	r0, r3
 80010e2:	f00a ff77 	bl	800bfd4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010e6:	f107 0308 	add.w	r3, r7, #8
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff f8f8 	bl	80002e0 <strlen>
 80010f0:	4603      	mov	r3, r0
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	f107 0108 	add.w	r1, r7, #8
 80010f8:	230a      	movs	r3, #10
 80010fa:	48bd      	ldr	r0, [pc, #756]	; (80013f0 <printRadioSettings+0x31c>)
 80010fc:	f006 fee5 	bl	8007eca <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8001100:	2000      	movs	r0, #0
 8001102:	f7ff fbbf 	bl	8000884 <NRF24_read_register>
 8001106:	4603      	mov	r3, r0
 8001108:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 800110c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001110:	f003 0308 	and.w	r3, r3, #8
 8001114:	2b00      	cmp	r3, #0
 8001116:	d013      	beq.n	8001140 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8001118:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800111c:	f003 0304 	and.w	r3, r3, #4
 8001120:	2b00      	cmp	r3, #0
 8001122:	d006      	beq.n	8001132 <printRadioSettings+0x5e>
 8001124:	f107 0308 	add.w	r3, r7, #8
 8001128:	49b2      	ldr	r1, [pc, #712]	; (80013f4 <printRadioSettings+0x320>)
 800112a:	4618      	mov	r0, r3
 800112c:	f00a ff52 	bl	800bfd4 <siprintf>
 8001130:	e00c      	b.n	800114c <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	49b0      	ldr	r1, [pc, #704]	; (80013f8 <printRadioSettings+0x324>)
 8001138:	4618      	mov	r0, r3
 800113a:	f00a ff4b 	bl	800bfd4 <siprintf>
 800113e:	e005      	b.n	800114c <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8001140:	f107 0308 	add.w	r3, r7, #8
 8001144:	49ad      	ldr	r1, [pc, #692]	; (80013fc <printRadioSettings+0x328>)
 8001146:	4618      	mov	r0, r3
 8001148:	f00a ff44 	bl	800bfd4 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800114c:	f107 0308 	add.w	r3, r7, #8
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff f8c5 	bl	80002e0 <strlen>
 8001156:	4603      	mov	r3, r0
 8001158:	b29a      	uxth	r2, r3
 800115a:	f107 0108 	add.w	r1, r7, #8
 800115e:	230a      	movs	r3, #10
 8001160:	48a3      	ldr	r0, [pc, #652]	; (80013f0 <printRadioSettings+0x31c>)
 8001162:	f006 feb2 	bl	8007eca <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8001166:	2001      	movs	r0, #1
 8001168:	f7ff fb8c 	bl	8000884 <NRF24_read_register>
 800116c:	4603      	mov	r3, r0
 800116e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001172:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001176:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800117a:	2b00      	cmp	r3, #0
 800117c:	bfcc      	ite	gt
 800117e:	2301      	movgt	r3, #1
 8001180:	2300      	movle	r3, #0
 8001182:	b2db      	uxtb	r3, r3
 8001184:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001186:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800118a:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800118e:	2b00      	cmp	r3, #0
 8001190:	bfcc      	ite	gt
 8001192:	2301      	movgt	r3, #1
 8001194:	2300      	movle	r3, #0
 8001196:	b2db      	uxtb	r3, r3
 8001198:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800119a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800119e:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	bfcc      	ite	gt
 80011a6:	2301      	movgt	r3, #1
 80011a8:	2300      	movle	r3, #0
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011ae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011b2:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	bfcc      	ite	gt
 80011ba:	2301      	movgt	r3, #1
 80011bc:	2300      	movle	r3, #0
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011c2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011c6:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	bfcc      	ite	gt
 80011ce:	2301      	movgt	r3, #1
 80011d0:	2300      	movle	r3, #0
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011da:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011de:	2b00      	cmp	r3, #0
 80011e0:	bfcc      	ite	gt
 80011e2:	2301      	movgt	r3, #1
 80011e4:	2300      	movle	r3, #0
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	f107 0008 	add.w	r0, r7, #8
 80011ec:	9303      	str	r3, [sp, #12]
 80011ee:	9402      	str	r4, [sp, #8]
 80011f0:	9101      	str	r1, [sp, #4]
 80011f2:	9200      	str	r2, [sp, #0]
 80011f4:	4633      	mov	r3, r6
 80011f6:	462a      	mov	r2, r5
 80011f8:	4981      	ldr	r1, [pc, #516]	; (8001400 <printRadioSettings+0x32c>)
 80011fa:	f00a feeb 	bl	800bfd4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011fe:	f107 0308 	add.w	r3, r7, #8
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff f86c 	bl	80002e0 <strlen>
 8001208:	4603      	mov	r3, r0
 800120a:	b29a      	uxth	r2, r3
 800120c:	f107 0108 	add.w	r1, r7, #8
 8001210:	230a      	movs	r3, #10
 8001212:	4877      	ldr	r0, [pc, #476]	; (80013f0 <printRadioSettings+0x31c>)
 8001214:	f006 fe59 	bl	8007eca <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8001218:	2002      	movs	r0, #2
 800121a:	f7ff fb33 	bl	8000884 <NRF24_read_register>
 800121e:	4603      	mov	r3, r0
 8001220:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001224:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001228:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800122c:	2b00      	cmp	r3, #0
 800122e:	bfcc      	ite	gt
 8001230:	2301      	movgt	r3, #1
 8001232:	2300      	movle	r3, #0
 8001234:	b2db      	uxtb	r3, r3
 8001236:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001238:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800123c:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001240:	2b00      	cmp	r3, #0
 8001242:	bfcc      	ite	gt
 8001244:	2301      	movgt	r3, #1
 8001246:	2300      	movle	r3, #0
 8001248:	b2db      	uxtb	r3, r3
 800124a:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800124c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001250:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001254:	2b00      	cmp	r3, #0
 8001256:	bfcc      	ite	gt
 8001258:	2301      	movgt	r3, #1
 800125a:	2300      	movle	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001260:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001264:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001268:	2b00      	cmp	r3, #0
 800126a:	bfcc      	ite	gt
 800126c:	2301      	movgt	r3, #1
 800126e:	2300      	movle	r3, #0
 8001270:	b2db      	uxtb	r3, r3
 8001272:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001274:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001278:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800127c:	2b00      	cmp	r3, #0
 800127e:	bfcc      	ite	gt
 8001280:	2301      	movgt	r3, #1
 8001282:	2300      	movle	r3, #0
 8001284:	b2db      	uxtb	r3, r3
 8001286:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001288:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800128c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001290:	2b00      	cmp	r3, #0
 8001292:	bfcc      	ite	gt
 8001294:	2301      	movgt	r3, #1
 8001296:	2300      	movle	r3, #0
 8001298:	b2db      	uxtb	r3, r3
 800129a:	f107 0008 	add.w	r0, r7, #8
 800129e:	9303      	str	r3, [sp, #12]
 80012a0:	9402      	str	r4, [sp, #8]
 80012a2:	9101      	str	r1, [sp, #4]
 80012a4:	9200      	str	r2, [sp, #0]
 80012a6:	4633      	mov	r3, r6
 80012a8:	462a      	mov	r2, r5
 80012aa:	4956      	ldr	r1, [pc, #344]	; (8001404 <printRadioSettings+0x330>)
 80012ac:	f00a fe92 	bl	800bfd4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012b0:	f107 0308 	add.w	r3, r7, #8
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff f813 	bl	80002e0 <strlen>
 80012ba:	4603      	mov	r3, r0
 80012bc:	b29a      	uxth	r2, r3
 80012be:	f107 0108 	add.w	r1, r7, #8
 80012c2:	230a      	movs	r3, #10
 80012c4:	484a      	ldr	r0, [pc, #296]	; (80013f0 <printRadioSettings+0x31c>)
 80012c6:	f006 fe00 	bl	8007eca <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 80012ca:	2003      	movs	r0, #3
 80012cc:	f7ff fada 	bl	8000884 <NRF24_read_register>
 80012d0:	4603      	mov	r3, r0
 80012d2:	f003 0303 	and.w	r3, r3, #3
 80012d6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 80012da:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012de:	3302      	adds	r3, #2
 80012e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 80012e4:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80012e8:	f107 0308 	add.w	r3, r7, #8
 80012ec:	4946      	ldr	r1, [pc, #280]	; (8001408 <printRadioSettings+0x334>)
 80012ee:	4618      	mov	r0, r3
 80012f0:	f00a fe70 	bl	800bfd4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012f4:	f107 0308 	add.w	r3, r7, #8
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7fe fff1 	bl	80002e0 <strlen>
 80012fe:	4603      	mov	r3, r0
 8001300:	b29a      	uxth	r2, r3
 8001302:	f107 0108 	add.w	r1, r7, #8
 8001306:	230a      	movs	r3, #10
 8001308:	4839      	ldr	r0, [pc, #228]	; (80013f0 <printRadioSettings+0x31c>)
 800130a:	f006 fdde 	bl	8007eca <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 800130e:	2005      	movs	r0, #5
 8001310:	f7ff fab8 	bl	8000884 <NRF24_read_register>
 8001314:	4603      	mov	r3, r0
 8001316:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 800131a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800131e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001322:	f107 0308 	add.w	r3, r7, #8
 8001326:	4939      	ldr	r1, [pc, #228]	; (800140c <printRadioSettings+0x338>)
 8001328:	4618      	mov	r0, r3
 800132a:	f00a fe53 	bl	800bfd4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800132e:	f107 0308 	add.w	r3, r7, #8
 8001332:	4618      	mov	r0, r3
 8001334:	f7fe ffd4 	bl	80002e0 <strlen>
 8001338:	4603      	mov	r3, r0
 800133a:	b29a      	uxth	r2, r3
 800133c:	f107 0108 	add.w	r1, r7, #8
 8001340:	230a      	movs	r3, #10
 8001342:	482b      	ldr	r0, [pc, #172]	; (80013f0 <printRadioSettings+0x31c>)
 8001344:	f006 fdc1 	bl	8007eca <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001348:	2006      	movs	r0, #6
 800134a:	f7ff fa9b 	bl	8000884 <NRF24_read_register>
 800134e:	4603      	mov	r3, r0
 8001350:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8001354:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001358:	f003 0308 	and.w	r3, r3, #8
 800135c:	2b00      	cmp	r3, #0
 800135e:	d006      	beq.n	800136e <printRadioSettings+0x29a>
 8001360:	f107 0308 	add.w	r3, r7, #8
 8001364:	492a      	ldr	r1, [pc, #168]	; (8001410 <printRadioSettings+0x33c>)
 8001366:	4618      	mov	r0, r3
 8001368:	f00a fe34 	bl	800bfd4 <siprintf>
 800136c:	e005      	b.n	800137a <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 800136e:	f107 0308 	add.w	r3, r7, #8
 8001372:	4928      	ldr	r1, [pc, #160]	; (8001414 <printRadioSettings+0x340>)
 8001374:	4618      	mov	r0, r3
 8001376:	f00a fe2d 	bl	800bfd4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800137a:	f107 0308 	add.w	r3, r7, #8
 800137e:	4618      	mov	r0, r3
 8001380:	f7fe ffae 	bl	80002e0 <strlen>
 8001384:	4603      	mov	r3, r0
 8001386:	b29a      	uxth	r2, r3
 8001388:	f107 0108 	add.w	r1, r7, #8
 800138c:	230a      	movs	r3, #10
 800138e:	4818      	ldr	r0, [pc, #96]	; (80013f0 <printRadioSettings+0x31c>)
 8001390:	f006 fd9b 	bl	8007eca <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8001394:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001398:	f003 0306 	and.w	r3, r3, #6
 800139c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 80013a0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013a4:	085b      	lsrs	r3, r3, #1
 80013a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 80013aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d106      	bne.n	80013c0 <printRadioSettings+0x2ec>
 80013b2:	f107 0308 	add.w	r3, r7, #8
 80013b6:	4918      	ldr	r1, [pc, #96]	; (8001418 <printRadioSettings+0x344>)
 80013b8:	4618      	mov	r0, r3
 80013ba:	f00a fe0b 	bl	800bfd4 <siprintf>
 80013be:	e03b      	b.n	8001438 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 80013c0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d106      	bne.n	80013d6 <printRadioSettings+0x302>
 80013c8:	f107 0308 	add.w	r3, r7, #8
 80013cc:	4913      	ldr	r1, [pc, #76]	; (800141c <printRadioSettings+0x348>)
 80013ce:	4618      	mov	r0, r3
 80013d0:	f00a fe00 	bl	800bfd4 <siprintf>
 80013d4:	e030      	b.n	8001438 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 80013d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d122      	bne.n	8001424 <printRadioSettings+0x350>
 80013de:	f107 0308 	add.w	r3, r7, #8
 80013e2:	490f      	ldr	r1, [pc, #60]	; (8001420 <printRadioSettings+0x34c>)
 80013e4:	4618      	mov	r0, r3
 80013e6:	f00a fdf5 	bl	800bfd4 <siprintf>
 80013ea:	e025      	b.n	8001438 <printRadioSettings+0x364>
 80013ec:	0800cf3c 	.word	0x0800cf3c
 80013f0:	2400013c 	.word	0x2400013c
 80013f4:	0800cf70 	.word	0x0800cf70
 80013f8:	0800cf8c 	.word	0x0800cf8c
 80013fc:	0800cfa8 	.word	0x0800cfa8
 8001400:	0800cfbc 	.word	0x0800cfbc
 8001404:	0800d000 	.word	0x0800d000
 8001408:	0800d04c 	.word	0x0800d04c
 800140c:	0800d068 	.word	0x0800d068
 8001410:	0800d07c 	.word	0x0800d07c
 8001414:	0800d094 	.word	0x0800d094
 8001418:	0800d0ac 	.word	0x0800d0ac
 800141c:	0800d0c0 	.word	0x0800d0c0
 8001420:	0800d0d4 	.word	0x0800d0d4
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001424:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001428:	2b03      	cmp	r3, #3
 800142a:	d105      	bne.n	8001438 <printRadioSettings+0x364>
 800142c:	f107 0308 	add.w	r3, r7, #8
 8001430:	49d7      	ldr	r1, [pc, #860]	; (8001790 <printRadioSettings+0x6bc>)
 8001432:	4618      	mov	r0, r3
 8001434:	f00a fdce 	bl	800bfd4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001438:	f107 0308 	add.w	r3, r7, #8
 800143c:	4618      	mov	r0, r3
 800143e:	f7fe ff4f 	bl	80002e0 <strlen>
 8001442:	4603      	mov	r3, r0
 8001444:	b29a      	uxth	r2, r3
 8001446:	f107 0108 	add.w	r1, r7, #8
 800144a:	230a      	movs	r3, #10
 800144c:	48d1      	ldr	r0, [pc, #836]	; (8001794 <printRadioSettings+0x6c0>)
 800144e:	f006 fd3c 	bl	8007eca <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001452:	463b      	mov	r3, r7
 8001454:	2205      	movs	r2, #5
 8001456:	4619      	mov	r1, r3
 8001458:	200a      	movs	r0, #10
 800145a:	f7ff fa3b 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800145e:	793b      	ldrb	r3, [r7, #4]
 8001460:	461c      	mov	r4, r3
 8001462:	78fb      	ldrb	r3, [r7, #3]
 8001464:	461d      	mov	r5, r3
 8001466:	78bb      	ldrb	r3, [r7, #2]
 8001468:	787a      	ldrb	r2, [r7, #1]
 800146a:	7839      	ldrb	r1, [r7, #0]
 800146c:	f107 0008 	add.w	r0, r7, #8
 8001470:	9102      	str	r1, [sp, #8]
 8001472:	9201      	str	r2, [sp, #4]
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	462b      	mov	r3, r5
 8001478:	4622      	mov	r2, r4
 800147a:	49c7      	ldr	r1, [pc, #796]	; (8001798 <printRadioSettings+0x6c4>)
 800147c:	f00a fdaa 	bl	800bfd4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001480:	f107 0308 	add.w	r3, r7, #8
 8001484:	4618      	mov	r0, r3
 8001486:	f7fe ff2b 	bl	80002e0 <strlen>
 800148a:	4603      	mov	r3, r0
 800148c:	b29a      	uxth	r2, r3
 800148e:	f107 0108 	add.w	r1, r7, #8
 8001492:	230a      	movs	r3, #10
 8001494:	48bf      	ldr	r0, [pc, #764]	; (8001794 <printRadioSettings+0x6c0>)
 8001496:	f006 fd18 	bl	8007eca <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 800149a:	463b      	mov	r3, r7
 800149c:	2205      	movs	r2, #5
 800149e:	4619      	mov	r1, r3
 80014a0:	200b      	movs	r0, #11
 80014a2:	f7ff fa17 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80014a6:	793b      	ldrb	r3, [r7, #4]
 80014a8:	461c      	mov	r4, r3
 80014aa:	78fb      	ldrb	r3, [r7, #3]
 80014ac:	461d      	mov	r5, r3
 80014ae:	78bb      	ldrb	r3, [r7, #2]
 80014b0:	787a      	ldrb	r2, [r7, #1]
 80014b2:	7839      	ldrb	r1, [r7, #0]
 80014b4:	f107 0008 	add.w	r0, r7, #8
 80014b8:	9102      	str	r1, [sp, #8]
 80014ba:	9201      	str	r2, [sp, #4]
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	462b      	mov	r3, r5
 80014c0:	4622      	mov	r2, r4
 80014c2:	49b6      	ldr	r1, [pc, #728]	; (800179c <printRadioSettings+0x6c8>)
 80014c4:	f00a fd86 	bl	800bfd4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014c8:	f107 0308 	add.w	r3, r7, #8
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7fe ff07 	bl	80002e0 <strlen>
 80014d2:	4603      	mov	r3, r0
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	f107 0108 	add.w	r1, r7, #8
 80014da:	230a      	movs	r3, #10
 80014dc:	48ad      	ldr	r0, [pc, #692]	; (8001794 <printRadioSettings+0x6c0>)
 80014de:	f006 fcf4 	bl	8007eca <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 80014e2:	463b      	mov	r3, r7
 80014e4:	2201      	movs	r2, #1
 80014e6:	4619      	mov	r1, r3
 80014e8:	200c      	movs	r0, #12
 80014ea:	f7ff f9f3 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80014ee:	783b      	ldrb	r3, [r7, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	f107 0308 	add.w	r3, r7, #8
 80014f6:	49aa      	ldr	r1, [pc, #680]	; (80017a0 <printRadioSettings+0x6cc>)
 80014f8:	4618      	mov	r0, r3
 80014fa:	f00a fd6b 	bl	800bfd4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014fe:	f107 0308 	add.w	r3, r7, #8
 8001502:	4618      	mov	r0, r3
 8001504:	f7fe feec 	bl	80002e0 <strlen>
 8001508:	4603      	mov	r3, r0
 800150a:	b29a      	uxth	r2, r3
 800150c:	f107 0108 	add.w	r1, r7, #8
 8001510:	230a      	movs	r3, #10
 8001512:	48a0      	ldr	r0, [pc, #640]	; (8001794 <printRadioSettings+0x6c0>)
 8001514:	f006 fcd9 	bl	8007eca <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8001518:	463b      	mov	r3, r7
 800151a:	2201      	movs	r2, #1
 800151c:	4619      	mov	r1, r3
 800151e:	200d      	movs	r0, #13
 8001520:	f7ff f9d8 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001524:	783b      	ldrb	r3, [r7, #0]
 8001526:	461a      	mov	r2, r3
 8001528:	f107 0308 	add.w	r3, r7, #8
 800152c:	499d      	ldr	r1, [pc, #628]	; (80017a4 <printRadioSettings+0x6d0>)
 800152e:	4618      	mov	r0, r3
 8001530:	f00a fd50 	bl	800bfd4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001534:	f107 0308 	add.w	r3, r7, #8
 8001538:	4618      	mov	r0, r3
 800153a:	f7fe fed1 	bl	80002e0 <strlen>
 800153e:	4603      	mov	r3, r0
 8001540:	b29a      	uxth	r2, r3
 8001542:	f107 0108 	add.w	r1, r7, #8
 8001546:	230a      	movs	r3, #10
 8001548:	4892      	ldr	r0, [pc, #584]	; (8001794 <printRadioSettings+0x6c0>)
 800154a:	f006 fcbe 	bl	8007eca <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 800154e:	463b      	mov	r3, r7
 8001550:	2201      	movs	r2, #1
 8001552:	4619      	mov	r1, r3
 8001554:	200e      	movs	r0, #14
 8001556:	f7ff f9bd 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800155a:	783b      	ldrb	r3, [r7, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	f107 0308 	add.w	r3, r7, #8
 8001562:	4991      	ldr	r1, [pc, #580]	; (80017a8 <printRadioSettings+0x6d4>)
 8001564:	4618      	mov	r0, r3
 8001566:	f00a fd35 	bl	800bfd4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800156a:	f107 0308 	add.w	r3, r7, #8
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe feb6 	bl	80002e0 <strlen>
 8001574:	4603      	mov	r3, r0
 8001576:	b29a      	uxth	r2, r3
 8001578:	f107 0108 	add.w	r1, r7, #8
 800157c:	230a      	movs	r3, #10
 800157e:	4885      	ldr	r0, [pc, #532]	; (8001794 <printRadioSettings+0x6c0>)
 8001580:	f006 fca3 	bl	8007eca <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001584:	463b      	mov	r3, r7
 8001586:	2201      	movs	r2, #1
 8001588:	4619      	mov	r1, r3
 800158a:	200f      	movs	r0, #15
 800158c:	f7ff f9a2 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001590:	783b      	ldrb	r3, [r7, #0]
 8001592:	461a      	mov	r2, r3
 8001594:	f107 0308 	add.w	r3, r7, #8
 8001598:	4984      	ldr	r1, [pc, #528]	; (80017ac <printRadioSettings+0x6d8>)
 800159a:	4618      	mov	r0, r3
 800159c:	f00a fd1a 	bl	800bfd4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015a0:	f107 0308 	add.w	r3, r7, #8
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7fe fe9b 	bl	80002e0 <strlen>
 80015aa:	4603      	mov	r3, r0
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	f107 0108 	add.w	r1, r7, #8
 80015b2:	230a      	movs	r3, #10
 80015b4:	4877      	ldr	r0, [pc, #476]	; (8001794 <printRadioSettings+0x6c0>)
 80015b6:	f006 fc88 	bl	8007eca <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 80015ba:	463b      	mov	r3, r7
 80015bc:	2205      	movs	r2, #5
 80015be:	4619      	mov	r1, r3
 80015c0:	2010      	movs	r0, #16
 80015c2:	f7ff f987 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80015c6:	793b      	ldrb	r3, [r7, #4]
 80015c8:	461c      	mov	r4, r3
 80015ca:	78fb      	ldrb	r3, [r7, #3]
 80015cc:	461d      	mov	r5, r3
 80015ce:	78bb      	ldrb	r3, [r7, #2]
 80015d0:	787a      	ldrb	r2, [r7, #1]
 80015d2:	7839      	ldrb	r1, [r7, #0]
 80015d4:	f107 0008 	add.w	r0, r7, #8
 80015d8:	9102      	str	r1, [sp, #8]
 80015da:	9201      	str	r2, [sp, #4]
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	462b      	mov	r3, r5
 80015e0:	4622      	mov	r2, r4
 80015e2:	4973      	ldr	r1, [pc, #460]	; (80017b0 <printRadioSettings+0x6dc>)
 80015e4:	f00a fcf6 	bl	800bfd4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015e8:	f107 0308 	add.w	r3, r7, #8
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe fe77 	bl	80002e0 <strlen>
 80015f2:	4603      	mov	r3, r0
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	f107 0108 	add.w	r1, r7, #8
 80015fa:	230a      	movs	r3, #10
 80015fc:	4865      	ldr	r0, [pc, #404]	; (8001794 <printRadioSettings+0x6c0>)
 80015fe:	f006 fc64 	bl	8007eca <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8001602:	2011      	movs	r0, #17
 8001604:	f7ff f93e 	bl	8000884 <NRF24_read_register>
 8001608:	4603      	mov	r3, r0
 800160a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800160e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001612:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001616:	f107 0308 	add.w	r3, r7, #8
 800161a:	4966      	ldr	r1, [pc, #408]	; (80017b4 <printRadioSettings+0x6e0>)
 800161c:	4618      	mov	r0, r3
 800161e:	f00a fcd9 	bl	800bfd4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001622:	f107 0308 	add.w	r3, r7, #8
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe fe5a 	bl	80002e0 <strlen>
 800162c:	4603      	mov	r3, r0
 800162e:	b29a      	uxth	r2, r3
 8001630:	f107 0108 	add.w	r1, r7, #8
 8001634:	230a      	movs	r3, #10
 8001636:	4857      	ldr	r0, [pc, #348]	; (8001794 <printRadioSettings+0x6c0>)
 8001638:	f006 fc47 	bl	8007eca <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 800163c:	2012      	movs	r0, #18
 800163e:	f7ff f921 	bl	8000884 <NRF24_read_register>
 8001642:	4603      	mov	r3, r0
 8001644:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001648:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800164c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001650:	f107 0308 	add.w	r3, r7, #8
 8001654:	4958      	ldr	r1, [pc, #352]	; (80017b8 <printRadioSettings+0x6e4>)
 8001656:	4618      	mov	r0, r3
 8001658:	f00a fcbc 	bl	800bfd4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800165c:	f107 0308 	add.w	r3, r7, #8
 8001660:	4618      	mov	r0, r3
 8001662:	f7fe fe3d 	bl	80002e0 <strlen>
 8001666:	4603      	mov	r3, r0
 8001668:	b29a      	uxth	r2, r3
 800166a:	f107 0108 	add.w	r1, r7, #8
 800166e:	230a      	movs	r3, #10
 8001670:	4848      	ldr	r0, [pc, #288]	; (8001794 <printRadioSettings+0x6c0>)
 8001672:	f006 fc2a 	bl	8007eca <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 8001676:	2013      	movs	r0, #19
 8001678:	f7ff f904 	bl	8000884 <NRF24_read_register>
 800167c:	4603      	mov	r3, r0
 800167e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001682:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001686:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800168a:	f107 0308 	add.w	r3, r7, #8
 800168e:	494b      	ldr	r1, [pc, #300]	; (80017bc <printRadioSettings+0x6e8>)
 8001690:	4618      	mov	r0, r3
 8001692:	f00a fc9f 	bl	800bfd4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001696:	f107 0308 	add.w	r3, r7, #8
 800169a:	4618      	mov	r0, r3
 800169c:	f7fe fe20 	bl	80002e0 <strlen>
 80016a0:	4603      	mov	r3, r0
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	f107 0108 	add.w	r1, r7, #8
 80016a8:	230a      	movs	r3, #10
 80016aa:	483a      	ldr	r0, [pc, #232]	; (8001794 <printRadioSettings+0x6c0>)
 80016ac:	f006 fc0d 	bl	8007eca <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 80016b0:	2014      	movs	r0, #20
 80016b2:	f7ff f8e7 	bl	8000884 <NRF24_read_register>
 80016b6:	4603      	mov	r3, r0
 80016b8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80016bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016c4:	f107 0308 	add.w	r3, r7, #8
 80016c8:	493d      	ldr	r1, [pc, #244]	; (80017c0 <printRadioSettings+0x6ec>)
 80016ca:	4618      	mov	r0, r3
 80016cc:	f00a fc82 	bl	800bfd4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016d0:	f107 0308 	add.w	r3, r7, #8
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe fe03 	bl	80002e0 <strlen>
 80016da:	4603      	mov	r3, r0
 80016dc:	b29a      	uxth	r2, r3
 80016de:	f107 0108 	add.w	r1, r7, #8
 80016e2:	230a      	movs	r3, #10
 80016e4:	482b      	ldr	r0, [pc, #172]	; (8001794 <printRadioSettings+0x6c0>)
 80016e6:	f006 fbf0 	bl	8007eca <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 80016ea:	2015      	movs	r0, #21
 80016ec:	f7ff f8ca 	bl	8000884 <NRF24_read_register>
 80016f0:	4603      	mov	r3, r0
 80016f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80016f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016fe:	f107 0308 	add.w	r3, r7, #8
 8001702:	4930      	ldr	r1, [pc, #192]	; (80017c4 <printRadioSettings+0x6f0>)
 8001704:	4618      	mov	r0, r3
 8001706:	f00a fc65 	bl	800bfd4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800170a:	f107 0308 	add.w	r3, r7, #8
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe fde6 	bl	80002e0 <strlen>
 8001714:	4603      	mov	r3, r0
 8001716:	b29a      	uxth	r2, r3
 8001718:	f107 0108 	add.w	r1, r7, #8
 800171c:	230a      	movs	r3, #10
 800171e:	481d      	ldr	r0, [pc, #116]	; (8001794 <printRadioSettings+0x6c0>)
 8001720:	f006 fbd3 	bl	8007eca <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 8001724:	2016      	movs	r0, #22
 8001726:	f7ff f8ad 	bl	8000884 <NRF24_read_register>
 800172a:	4603      	mov	r3, r0
 800172c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001730:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001734:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001738:	f107 0308 	add.w	r3, r7, #8
 800173c:	4922      	ldr	r1, [pc, #136]	; (80017c8 <printRadioSettings+0x6f4>)
 800173e:	4618      	mov	r0, r3
 8001740:	f00a fc48 	bl	800bfd4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001744:	f107 0308 	add.w	r3, r7, #8
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe fdc9 	bl	80002e0 <strlen>
 800174e:	4603      	mov	r3, r0
 8001750:	b29a      	uxth	r2, r3
 8001752:	f107 0108 	add.w	r1, r7, #8
 8001756:	230a      	movs	r3, #10
 8001758:	480e      	ldr	r0, [pc, #56]	; (8001794 <printRadioSettings+0x6c0>)
 800175a:	f006 fbb6 	bl	8007eca <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 800175e:	201c      	movs	r0, #28
 8001760:	f7ff f890 	bl	8000884 <NRF24_read_register>
 8001764:	4603      	mov	r3, r0
 8001766:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800176a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800176e:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001772:	2b00      	cmp	r3, #0
 8001774:	bfcc      	ite	gt
 8001776:	2301      	movgt	r3, #1
 8001778:	2300      	movle	r3, #0
 800177a:	b2db      	uxtb	r3, r3
 800177c:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800177e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001782:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001786:	2b00      	cmp	r3, #0
 8001788:	bfcc      	ite	gt
 800178a:	2301      	movgt	r3, #1
 800178c:	2300      	movle	r3, #0
 800178e:	e01d      	b.n	80017cc <printRadioSettings+0x6f8>
 8001790:	0800d0e8 	.word	0x0800d0e8
 8001794:	2400013c 	.word	0x2400013c
 8001798:	0800d0fc 	.word	0x0800d0fc
 800179c:	0800d12c 	.word	0x0800d12c
 80017a0:	0800d15c 	.word	0x0800d15c
 80017a4:	0800d184 	.word	0x0800d184
 80017a8:	0800d1ac 	.word	0x0800d1ac
 80017ac:	0800d1d4 	.word	0x0800d1d4
 80017b0:	0800d1fc 	.word	0x0800d1fc
 80017b4:	0800d228 	.word	0x0800d228
 80017b8:	0800d244 	.word	0x0800d244
 80017bc:	0800d260 	.word	0x0800d260
 80017c0:	0800d27c 	.word	0x0800d27c
 80017c4:	0800d298 	.word	0x0800d298
 80017c8:	0800d2b4 	.word	0x0800d2b4
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017d0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017d4:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017d8:	2b00      	cmp	r3, #0
 80017da:	bfcc      	ite	gt
 80017dc:	2301      	movgt	r3, #1
 80017de:	2300      	movle	r3, #0
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017e4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017e8:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	bfcc      	ite	gt
 80017f0:	2301      	movgt	r3, #1
 80017f2:	2300      	movle	r3, #0
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017fc:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001800:	2b00      	cmp	r3, #0
 8001802:	bfcc      	ite	gt
 8001804:	2301      	movgt	r3, #1
 8001806:	2300      	movle	r3, #0
 8001808:	b2db      	uxtb	r3, r3
 800180a:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800180c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001810:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001814:	2b00      	cmp	r3, #0
 8001816:	bfcc      	ite	gt
 8001818:	2301      	movgt	r3, #1
 800181a:	2300      	movle	r3, #0
 800181c:	b2db      	uxtb	r3, r3
 800181e:	f107 0008 	add.w	r0, r7, #8
 8001822:	9303      	str	r3, [sp, #12]
 8001824:	9402      	str	r4, [sp, #8]
 8001826:	9101      	str	r1, [sp, #4]
 8001828:	9200      	str	r2, [sp, #0]
 800182a:	4633      	mov	r3, r6
 800182c:	462a      	mov	r2, r5
 800182e:	4936      	ldr	r1, [pc, #216]	; (8001908 <printRadioSettings+0x834>)
 8001830:	f00a fbd0 	bl	800bfd4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001834:	f107 0308 	add.w	r3, r7, #8
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fd51 	bl	80002e0 <strlen>
 800183e:	4603      	mov	r3, r0
 8001840:	b29a      	uxth	r2, r3
 8001842:	f107 0108 	add.w	r1, r7, #8
 8001846:	230a      	movs	r3, #10
 8001848:	4830      	ldr	r0, [pc, #192]	; (800190c <printRadioSettings+0x838>)
 800184a:	f006 fb3e 	bl	8007eca <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 800184e:	201d      	movs	r0, #29
 8001850:	f7ff f818 	bl	8000884 <NRF24_read_register>
 8001854:	4603      	mov	r3, r0
 8001856:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 800185a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800185e:	f003 0304 	and.w	r3, r3, #4
 8001862:	2b00      	cmp	r3, #0
 8001864:	d006      	beq.n	8001874 <printRadioSettings+0x7a0>
 8001866:	f107 0308 	add.w	r3, r7, #8
 800186a:	4929      	ldr	r1, [pc, #164]	; (8001910 <printRadioSettings+0x83c>)
 800186c:	4618      	mov	r0, r3
 800186e:	f00a fbb1 	bl	800bfd4 <siprintf>
 8001872:	e005      	b.n	8001880 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001874:	f107 0308 	add.w	r3, r7, #8
 8001878:	4926      	ldr	r1, [pc, #152]	; (8001914 <printRadioSettings+0x840>)
 800187a:	4618      	mov	r0, r3
 800187c:	f00a fbaa 	bl	800bfd4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001880:	f107 0308 	add.w	r3, r7, #8
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fd2b 	bl	80002e0 <strlen>
 800188a:	4603      	mov	r3, r0
 800188c:	b29a      	uxth	r2, r3
 800188e:	f107 0108 	add.w	r1, r7, #8
 8001892:	230a      	movs	r3, #10
 8001894:	481d      	ldr	r0, [pc, #116]	; (800190c <printRadioSettings+0x838>)
 8001896:	f006 fb18 	bl	8007eca <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 800189a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d006      	beq.n	80018b4 <printRadioSettings+0x7e0>
 80018a6:	f107 0308 	add.w	r3, r7, #8
 80018aa:	491b      	ldr	r1, [pc, #108]	; (8001918 <printRadioSettings+0x844>)
 80018ac:	4618      	mov	r0, r3
 80018ae:	f00a fb91 	bl	800bfd4 <siprintf>
 80018b2:	e005      	b.n	80018c0 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 80018b4:	f107 0308 	add.w	r3, r7, #8
 80018b8:	4918      	ldr	r1, [pc, #96]	; (800191c <printRadioSettings+0x848>)
 80018ba:	4618      	mov	r0, r3
 80018bc:	f00a fb8a 	bl	800bfd4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018c0:	f107 0308 	add.w	r3, r7, #8
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7fe fd0b 	bl	80002e0 <strlen>
 80018ca:	4603      	mov	r3, r0
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	f107 0108 	add.w	r1, r7, #8
 80018d2:	230a      	movs	r3, #10
 80018d4:	480d      	ldr	r0, [pc, #52]	; (800190c <printRadioSettings+0x838>)
 80018d6:	f006 faf8 	bl	8007eca <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80018da:	f107 0308 	add.w	r3, r7, #8
 80018de:	4910      	ldr	r1, [pc, #64]	; (8001920 <printRadioSettings+0x84c>)
 80018e0:	4618      	mov	r0, r3
 80018e2:	f00a fb77 	bl	800bfd4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018e6:	f107 0308 	add.w	r3, r7, #8
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fcf8 	bl	80002e0 <strlen>
 80018f0:	4603      	mov	r3, r0
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	f107 0108 	add.w	r1, r7, #8
 80018f8:	230a      	movs	r3, #10
 80018fa:	4804      	ldr	r0, [pc, #16]	; (800190c <printRadioSettings+0x838>)
 80018fc:	f006 fae5 	bl	8007eca <HAL_UART_Transmit>
}
 8001900:	bf00      	nop
 8001902:	3774      	adds	r7, #116	; 0x74
 8001904:	46bd      	mov	sp, r7
 8001906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001908:	0800d2d0 	.word	0x0800d2d0
 800190c:	2400013c 	.word	0x2400013c
 8001910:	0800d31c 	.word	0x0800d31c
 8001914:	0800d334 	.word	0x0800d334
 8001918:	0800d34c 	.word	0x0800d34c
 800191c:	0800d368 	.word	0x0800d368
 8001920:	0800cf3c 	.word	0x0800cf3c

08001924 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8001924:	b084      	sub	sp, #16
 8001926:	b580      	push	{r7, lr}
 8001928:	af00      	add	r7, sp, #0
 800192a:	f107 0c08 	add.w	ip, r7, #8
 800192e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8001932:	4b07      	ldr	r3, [pc, #28]	; (8001950 <nrf24_DebugUART_Init+0x2c>)
 8001934:	4618      	mov	r0, r3
 8001936:	f107 0308 	add.w	r3, r7, #8
 800193a:	2290      	movs	r2, #144	; 0x90
 800193c:	4619      	mov	r1, r3
 800193e:	f00a fa0c 	bl	800bd5a <memcpy>
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800194a:	b004      	add	sp, #16
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	2400013c 	.word	0x2400013c

08001954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001954:	b590      	push	{r4, r7, lr}
 8001956:	b0a5      	sub	sp, #148	; 0x94
 8001958:	af22      	add	r7, sp, #136	; 0x88
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800195a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800195e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001960:	bf00      	nop
 8001962:	4b49      	ldr	r3, [pc, #292]	; (8001a88 <main+0x134>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d004      	beq.n	8001978 <main+0x24>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	1e5a      	subs	r2, r3, #1
 8001972:	607a      	str	r2, [r7, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	dcf4      	bgt.n	8001962 <main+0xe>
  if ( timeout < 0 )
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	da01      	bge.n	8001982 <main+0x2e>
  {
  Error_Handler();
 800197e:	f000 fc09 	bl	8002194 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001982:	f000 ffd9 	bl	8002938 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001986:	f000 f893 	bl	8001ab0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800198a:	4b3f      	ldr	r3, [pc, #252]	; (8001a88 <main+0x134>)
 800198c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001990:	4a3d      	ldr	r2, [pc, #244]	; (8001a88 <main+0x134>)
 8001992:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001996:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800199a:	4b3b      	ldr	r3, [pc, #236]	; (8001a88 <main+0x134>)
 800199c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a4:	603b      	str	r3, [r7, #0]
 80019a6:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80019a8:	2000      	movs	r0, #0
 80019aa:	f001 fe5f 	bl	800366c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80019ae:	2100      	movs	r1, #0
 80019b0:	2000      	movs	r0, #0
 80019b2:	f001 fe75 	bl	80036a0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80019b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019ba:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80019bc:	bf00      	nop
 80019be:	4b32      	ldr	r3, [pc, #200]	; (8001a88 <main+0x134>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d104      	bne.n	80019d4 <main+0x80>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	1e5a      	subs	r2, r3, #1
 80019ce:	607a      	str	r2, [r7, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	dcf4      	bgt.n	80019be <main+0x6a>
if ( timeout < 0 )
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	da01      	bge.n	80019de <main+0x8a>
{
Error_Handler();
 80019da:	f000 fbdb 	bl	8002194 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019de:	f000 fae1 	bl	8001fa4 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80019e2:	f000 f8e3 	bl	8001bac <MX_FDCAN1_Init>
  MX_USART3_UART_Init();
 80019e6:	f000 fa91 	bl	8001f0c <MX_USART3_UART_Init>
  MX_SPI4_Init();
 80019ea:	f000 f99b 	bl	8001d24 <MX_SPI4_Init>
  MX_TIM13_Init();
 80019ee:	f000 f9f1 	bl	8001dd4 <MX_TIM13_Init>
  MX_TIM14_Init();
 80019f2:	f000 fa3d 	bl	8001e70 <MX_TIM14_Init>
  MX_SPI1_Init();
 80019f6:	f000 f93d 	bl	8001c74 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // PWM Inicialiaztion
  HAL_TIM_PWM_Start(&htim14,TIM_CHANNEL_1);
 80019fa:	2100      	movs	r1, #0
 80019fc:	4823      	ldr	r0, [pc, #140]	; (8001a8c <main+0x138>)
 80019fe:	f005 faf7 	bl	8006ff0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim13,TIM_CHANNEL_1);
 8001a02:	2100      	movs	r1, #0
 8001a04:	4822      	ldr	r0, [pc, #136]	; (8001a90 <main+0x13c>)
 8001a06:	f005 faf3 	bl	8006ff0 <HAL_TIM_PWM_Start>

  // NRF24 Inicialization
  NRF24_begin(GPIOB, GPIO_PIN_2, GPIO_PIN_1, hspi1);
 8001a0a:	4c22      	ldr	r4, [pc, #136]	; (8001a94 <main+0x140>)
 8001a0c:	4668      	mov	r0, sp
 8001a0e:	1d23      	adds	r3, r4, #4
 8001a10:	2284      	movs	r2, #132	; 0x84
 8001a12:	4619      	mov	r1, r3
 8001a14:	f00a f9a1 	bl	800bd5a <memcpy>
 8001a18:	6823      	ldr	r3, [r4, #0]
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	2104      	movs	r1, #4
 8001a1e:	481e      	ldr	r0, [pc, #120]	; (8001a98 <main+0x144>)
 8001a20:	f7ff f818 	bl	8000a54 <NRF24_begin>
  nrf24_DebugUART_Init(huart3);
 8001a24:	4c1d      	ldr	r4, [pc, #116]	; (8001a9c <main+0x148>)
 8001a26:	4668      	mov	r0, sp
 8001a28:	f104 0310 	add.w	r3, r4, #16
 8001a2c:	2280      	movs	r2, #128	; 0x80
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f00a f993 	bl	800bd5a <memcpy>
 8001a34:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a38:	f7ff ff74 	bl	8001924 <nrf24_DebugUART_Init>

  // NRF24 setup to read
  NRF24_setAutoAck(false);
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	f7ff fa2b 	bl	8000e98 <NRF24_setAutoAck>
  NRF24_setChannel(52);
 8001a42:	2034      	movs	r0, #52	; 0x34
 8001a44:	f7ff f99d 	bl	8000d82 <NRF24_setChannel>
  NRF24_setPayloadSize(32);
 8001a48:	2020      	movs	r0, #32
 8001a4a:	f7ff f9af 	bl	8000dac <NRF24_setPayloadSize>
  NRF24_setDataRate(RF24_2MBPS);
 8001a4e:	2001      	movs	r0, #1
 8001a50:	f7ff fa70 	bl	8000f34 <NRF24_setDataRate>
  NRF24_openReadingPipe(0, RxpipeAddrs);
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <main+0x14c>)
 8001a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	f7ff f928 	bl	8000cb0 <NRF24_openReadingPipe>
  NRF24_enableDynamicPayloads();
 8001a60:	f7ff f9d0 	bl	8000e04 <NRF24_enableDynamicPayloads>
  printRadioSettings();
 8001a64:	f7ff fb36 	bl	80010d4 <printRadioSettings>
  NRF24_startListening();
 8001a68:	f7ff f8d4 	bl	8000c14 <NRF24_startListening>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001a6c:	f007 fb28 	bl	80090c0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001a70:	4a0c      	ldr	r2, [pc, #48]	; (8001aa4 <main+0x150>)
 8001a72:	2100      	movs	r1, #0
 8001a74:	480c      	ldr	r0, [pc, #48]	; (8001aa8 <main+0x154>)
 8001a76:	f007 fb6d 	bl	8009154 <osThreadNew>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	4a0b      	ldr	r2, [pc, #44]	; (8001aac <main+0x158>)
 8001a7e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001a80:	f007 fb42 	bl	8009108 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a84:	e7fe      	b.n	8001a84 <main+0x130>
 8001a86:	bf00      	nop
 8001a88:	58024400 	.word	0x58024400
 8001a8c:	240003c8 	.word	0x240003c8
 8001a90:	2400037c 	.word	0x2400037c
 8001a94:	2400026c 	.word	0x2400026c
 8001a98:	58020400 	.word	0x58020400
 8001a9c:	24000414 	.word	0x24000414
 8001aa0:	24000008 	.word	0x24000008
 8001aa4:	0800d538 	.word	0x0800d538
 8001aa8:	08002111 	.word	0x08002111
 8001aac:	240004a4 	.word	0x240004a4

08001ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b09c      	sub	sp, #112	; 0x70
 8001ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aba:	224c      	movs	r2, #76	; 0x4c
 8001abc:	2100      	movs	r1, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f00a f959 	bl	800bd76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ac4:	1d3b      	adds	r3, r7, #4
 8001ac6:	2220      	movs	r2, #32
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4618      	mov	r0, r3
 8001acc:	f00a f953 	bl	800bd76 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001ad0:	2004      	movs	r0, #4
 8001ad2:	f001 fdf9 	bl	80036c8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	603b      	str	r3, [r7, #0]
 8001ada:	4b32      	ldr	r3, [pc, #200]	; (8001ba4 <SystemClock_Config+0xf4>)
 8001adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ade:	4a31      	ldr	r2, [pc, #196]	; (8001ba4 <SystemClock_Config+0xf4>)
 8001ae0:	f023 0301 	bic.w	r3, r3, #1
 8001ae4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001ae6:	4b2f      	ldr	r3, [pc, #188]	; (8001ba4 <SystemClock_Config+0xf4>)
 8001ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	603b      	str	r3, [r7, #0]
 8001af0:	4b2d      	ldr	r3, [pc, #180]	; (8001ba8 <SystemClock_Config+0xf8>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001af8:	4a2b      	ldr	r2, [pc, #172]	; (8001ba8 <SystemClock_Config+0xf8>)
 8001afa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001afe:	6193      	str	r3, [r2, #24]
 8001b00:	4b29      	ldr	r3, [pc, #164]	; (8001ba8 <SystemClock_Config+0xf8>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b08:	603b      	str	r3, [r7, #0]
 8001b0a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001b0c:	bf00      	nop
 8001b0e:	4b26      	ldr	r3, [pc, #152]	; (8001ba8 <SystemClock_Config+0xf8>)
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b1a:	d1f8      	bne.n	8001b0e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001b20:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001b24:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b26:	2302      	movs	r3, #2
 8001b28:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8001b32:	2312      	movs	r3, #18
 8001b34:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001b36:	2302      	movs	r3, #2
 8001b38:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001b42:	230c      	movs	r3, #12
 8001b44:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001b46:	2302      	movs	r3, #2
 8001b48:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8001b4a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b4e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b54:	4618      	mov	r0, r3
 8001b56:	f001 fe11 	bl	800377c <HAL_RCC_OscConfig>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001b60:	f000 fb18 	bl	8002194 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b64:	233f      	movs	r3, #63	; 0x3f
 8001b66:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001b70:	2300      	movs	r3, #0
 8001b72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001b78:	2340      	movs	r3, #64	; 0x40
 8001b7a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001b7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b80:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001b82:	2300      	movs	r3, #0
 8001b84:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b86:	1d3b      	adds	r3, r7, #4
 8001b88:	2101      	movs	r1, #1
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f002 fa24 	bl	8003fd8 <HAL_RCC_ClockConfig>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8001b96:	f000 fafd 	bl	8002194 <Error_Handler>
  }
}
 8001b9a:	bf00      	nop
 8001b9c:	3770      	adds	r7, #112	; 0x70
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	58000400 	.word	0x58000400
 8001ba8:	58024800 	.word	0x58024800

08001bac <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001bb0:	4b2e      	ldr	r3, [pc, #184]	; (8001c6c <MX_FDCAN1_Init+0xc0>)
 8001bb2:	4a2f      	ldr	r2, [pc, #188]	; (8001c70 <MX_FDCAN1_Init+0xc4>)
 8001bb4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001bb6:	4b2d      	ldr	r3, [pc, #180]	; (8001c6c <MX_FDCAN1_Init+0xc0>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001bbc:	4b2b      	ldr	r3, [pc, #172]	; (8001c6c <MX_FDCAN1_Init+0xc0>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001bc2:	4b2a      	ldr	r3, [pc, #168]	; (8001c6c <MX_FDCAN1_Init+0xc0>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001bc8:	4b28      	ldr	r3, [pc, #160]	; (8001c6c <MX_FDCAN1_Init+0xc0>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001bce:	4b27      	ldr	r3, [pc, #156]	; (8001c6c <MX_FDCAN1_Init+0xc0>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8001bd4:	4b25      	ldr	r3, [pc, #148]	; (8001c6c <MX_FDCAN1_Init+0xc0>)
 8001bd6:	2210      	movs	r2, #16
 8001bd8:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001bda:	4b24      	ldr	r3, [pc, #144]	; (8001c6c <MX_FDCAN1_Init+0xc0>)
 8001bdc:	2201      	movs	r2, #1
 8001bde:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001be0:	4b22      	ldr	r3, [pc, #136]	; (8001c6c <MX_FDCAN1_Init+0xc0>)
 8001be2:	2202      	movs	r2, #2
 8001be4:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001be6:	4b21      	ldr	r3, [pc, #132]	; (8001c6c <MX_FDCAN1_Init+0xc0>)
 8001be8:	2202      	movs	r2, #2
 8001bea:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001bec:	4b1f      	ldr	r3, [pc, #124]	; (8001c6c <MX_FDCAN1_Init+0xc0>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001bf2:	4b1e      	ldr	r3, [pc, #120]	; (8001c6c <MX_FDCAN1_Init+0xc0>)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001bf8:	4b1c      	ldr	r3, [pc, #112]	; (8001c6c <MX_FDCAN1_Init+0xc0>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001bfe:	4b1b      	ldr	r3, [pc, #108]	; (8001c6c <MX_FDCAN1_Init+0xc0>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001c04:	4b19      	ldr	r3, [pc, #100]	; (8001c6c <MX_FDCAN1_Init+0xc0>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8001c0a:	4b18      	ldr	r3, [pc, #96]	; (8001c6c <MX_FDCAN1_Init+0xc0>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001c10:	4b16      	ldr	r3, [pc, #88]	; (8001c6c <MX_FDCAN1_Init+0xc0>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8001c16:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <MX_FDCAN1_Init+0xc0>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001c1c:	4b13      	ldr	r3, [pc, #76]	; (8001c6c <MX_FDCAN1_Init+0xc0>)
 8001c1e:	2204      	movs	r2, #4
 8001c20:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001c22:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <MX_FDCAN1_Init+0xc0>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001c28:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <MX_FDCAN1_Init+0xc0>)
 8001c2a:	2204      	movs	r2, #4
 8001c2c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001c2e:	4b0f      	ldr	r3, [pc, #60]	; (8001c6c <MX_FDCAN1_Init+0xc0>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001c34:	4b0d      	ldr	r3, [pc, #52]	; (8001c6c <MX_FDCAN1_Init+0xc0>)
 8001c36:	2204      	movs	r2, #4
 8001c38:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001c3a:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <MX_FDCAN1_Init+0xc0>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001c40:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <MX_FDCAN1_Init+0xc0>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8001c46:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <MX_FDCAN1_Init+0xc0>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001c4c:	4b07      	ldr	r3, [pc, #28]	; (8001c6c <MX_FDCAN1_Init+0xc0>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001c52:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <MX_FDCAN1_Init+0xc0>)
 8001c54:	2204      	movs	r2, #4
 8001c56:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001c58:	4804      	ldr	r0, [pc, #16]	; (8001c6c <MX_FDCAN1_Init+0xc0>)
 8001c5a:	f000 ffd9 	bl	8002c10 <HAL_FDCAN_Init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8001c64:	f000 fa96 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001c68:	bf00      	nop
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	240001cc 	.word	0x240001cc
 8001c70:	4000a000 	.word	0x4000a000

08001c74 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c78:	4b28      	ldr	r3, [pc, #160]	; (8001d1c <MX_SPI1_Init+0xa8>)
 8001c7a:	4a29      	ldr	r2, [pc, #164]	; (8001d20 <MX_SPI1_Init+0xac>)
 8001c7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c7e:	4b27      	ldr	r3, [pc, #156]	; (8001d1c <MX_SPI1_Init+0xa8>)
 8001c80:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001c84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c86:	4b25      	ldr	r3, [pc, #148]	; (8001d1c <MX_SPI1_Init+0xa8>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c8c:	4b23      	ldr	r3, [pc, #140]	; (8001d1c <MX_SPI1_Init+0xa8>)
 8001c8e:	2207      	movs	r2, #7
 8001c90:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001c92:	4b22      	ldr	r3, [pc, #136]	; (8001d1c <MX_SPI1_Init+0xa8>)
 8001c94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c98:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001c9a:	4b20      	ldr	r3, [pc, #128]	; (8001d1c <MX_SPI1_Init+0xa8>)
 8001c9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ca0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ca2:	4b1e      	ldr	r3, [pc, #120]	; (8001d1c <MX_SPI1_Init+0xa8>)
 8001ca4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ca8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001caa:	4b1c      	ldr	r3, [pc, #112]	; (8001d1c <MX_SPI1_Init+0xa8>)
 8001cac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cb0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cb2:	4b1a      	ldr	r3, [pc, #104]	; (8001d1c <MX_SPI1_Init+0xa8>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cb8:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <MX_SPI1_Init+0xa8>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cbe:	4b17      	ldr	r3, [pc, #92]	; (8001d1c <MX_SPI1_Init+0xa8>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001cc4:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <MX_SPI1_Init+0xa8>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001cca:	4b14      	ldr	r3, [pc, #80]	; (8001d1c <MX_SPI1_Init+0xa8>)
 8001ccc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cd0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001cd2:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <MX_SPI1_Init+0xa8>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001cd8:	4b10      	ldr	r3, [pc, #64]	; (8001d1c <MX_SPI1_Init+0xa8>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001cde:	4b0f      	ldr	r3, [pc, #60]	; (8001d1c <MX_SPI1_Init+0xa8>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001ce4:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <MX_SPI1_Init+0xa8>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001cea:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <MX_SPI1_Init+0xa8>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001cf0:	4b0a      	ldr	r3, [pc, #40]	; (8001d1c <MX_SPI1_Init+0xa8>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001cf6:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <MX_SPI1_Init+0xa8>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001cfc:	4b07      	ldr	r3, [pc, #28]	; (8001d1c <MX_SPI1_Init+0xa8>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <MX_SPI1_Init+0xa8>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d08:	4804      	ldr	r0, [pc, #16]	; (8001d1c <MX_SPI1_Init+0xa8>)
 8001d0a:	f004 f89b 	bl	8005e44 <HAL_SPI_Init>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8001d14:	f000 fa3e 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d18:	bf00      	nop
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	2400026c 	.word	0x2400026c
 8001d20:	40013000 	.word	0x40013000

08001d24 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001d28:	4b28      	ldr	r3, [pc, #160]	; (8001dcc <MX_SPI4_Init+0xa8>)
 8001d2a:	4a29      	ldr	r2, [pc, #164]	; (8001dd0 <MX_SPI4_Init+0xac>)
 8001d2c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001d2e:	4b27      	ldr	r3, [pc, #156]	; (8001dcc <MX_SPI4_Init+0xa8>)
 8001d30:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001d34:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001d36:	4b25      	ldr	r3, [pc, #148]	; (8001dcc <MX_SPI4_Init+0xa8>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d3c:	4b23      	ldr	r3, [pc, #140]	; (8001dcc <MX_SPI4_Init+0xa8>)
 8001d3e:	2207      	movs	r2, #7
 8001d40:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001d42:	4b22      	ldr	r3, [pc, #136]	; (8001dcc <MX_SPI4_Init+0xa8>)
 8001d44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d48:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001d4a:	4b20      	ldr	r3, [pc, #128]	; (8001dcc <MX_SPI4_Init+0xa8>)
 8001d4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d50:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001d52:	4b1e      	ldr	r3, [pc, #120]	; (8001dcc <MX_SPI4_Init+0xa8>)
 8001d54:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001d58:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001d5a:	4b1c      	ldr	r3, [pc, #112]	; (8001dcc <MX_SPI4_Init+0xa8>)
 8001d5c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001d60:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d62:	4b1a      	ldr	r3, [pc, #104]	; (8001dcc <MX_SPI4_Init+0xa8>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d68:	4b18      	ldr	r3, [pc, #96]	; (8001dcc <MX_SPI4_Init+0xa8>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d6e:	4b17      	ldr	r3, [pc, #92]	; (8001dcc <MX_SPI4_Init+0xa8>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001d74:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <MX_SPI4_Init+0xa8>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d7a:	4b14      	ldr	r3, [pc, #80]	; (8001dcc <MX_SPI4_Init+0xa8>)
 8001d7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d80:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001d82:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <MX_SPI4_Init+0xa8>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001d88:	4b10      	ldr	r3, [pc, #64]	; (8001dcc <MX_SPI4_Init+0xa8>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001d8e:	4b0f      	ldr	r3, [pc, #60]	; (8001dcc <MX_SPI4_Init+0xa8>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001d94:	4b0d      	ldr	r3, [pc, #52]	; (8001dcc <MX_SPI4_Init+0xa8>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001d9a:	4b0c      	ldr	r3, [pc, #48]	; (8001dcc <MX_SPI4_Init+0xa8>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001da0:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <MX_SPI4_Init+0xa8>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001da6:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <MX_SPI4_Init+0xa8>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001dac:	4b07      	ldr	r3, [pc, #28]	; (8001dcc <MX_SPI4_Init+0xa8>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001db2:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <MX_SPI4_Init+0xa8>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001db8:	4804      	ldr	r0, [pc, #16]	; (8001dcc <MX_SPI4_Init+0xa8>)
 8001dba:	f004 f843 	bl	8005e44 <HAL_SPI_Init>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_SPI4_Init+0xa4>
  {
    Error_Handler();
 8001dc4:	f000 f9e6 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	240002f4 	.word	0x240002f4
 8001dd0:	40013400 	.word	0x40013400

08001dd4 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b088      	sub	sp, #32
 8001dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dda:	1d3b      	adds	r3, r7, #4
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
 8001de8:	615a      	str	r2, [r3, #20]
 8001dea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001dec:	4b1e      	ldr	r3, [pc, #120]	; (8001e68 <MX_TIM13_Init+0x94>)
 8001dee:	4a1f      	ldr	r2, [pc, #124]	; (8001e6c <MX_TIM13_Init+0x98>)
 8001df0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 22;
 8001df2:	4b1d      	ldr	r3, [pc, #116]	; (8001e68 <MX_TIM13_Init+0x94>)
 8001df4:	2216      	movs	r2, #22
 8001df6:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df8:	4b1b      	ldr	r3, [pc, #108]	; (8001e68 <MX_TIM13_Init+0x94>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8001dfe:	4b1a      	ldr	r3, [pc, #104]	; (8001e68 <MX_TIM13_Init+0x94>)
 8001e00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e04:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e06:	4b18      	ldr	r3, [pc, #96]	; (8001e68 <MX_TIM13_Init+0x94>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e0c:	4b16      	ldr	r3, [pc, #88]	; (8001e68 <MX_TIM13_Init+0x94>)
 8001e0e:	2280      	movs	r2, #128	; 0x80
 8001e10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001e12:	4815      	ldr	r0, [pc, #84]	; (8001e68 <MX_TIM13_Init+0x94>)
 8001e14:	f004 ffbb 	bl	8006d8e <HAL_TIM_Base_Init>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001e1e:	f000 f9b9 	bl	8002194 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001e22:	4811      	ldr	r0, [pc, #68]	; (8001e68 <MX_TIM13_Init+0x94>)
 8001e24:	f005 f882 	bl	8006f2c <HAL_TIM_PWM_Init>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001e2e:	f000 f9b1 	bl	8002194 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e32:	2360      	movs	r3, #96	; 0x60
 8001e34:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e42:	1d3b      	adds	r3, r7, #4
 8001e44:	2200      	movs	r2, #0
 8001e46:	4619      	mov	r1, r3
 8001e48:	4807      	ldr	r0, [pc, #28]	; (8001e68 <MX_TIM13_Init+0x94>)
 8001e4a:	f005 faff 	bl	800744c <HAL_TIM_PWM_ConfigChannel>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001e54:	f000 f99e 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001e58:	4803      	ldr	r0, [pc, #12]	; (8001e68 <MX_TIM13_Init+0x94>)
 8001e5a:	f000 fb49 	bl	80024f0 <HAL_TIM_MspPostInit>

}
 8001e5e:	bf00      	nop
 8001e60:	3720      	adds	r7, #32
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	2400037c 	.word	0x2400037c
 8001e6c:	40001c00 	.word	0x40001c00

08001e70 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b088      	sub	sp, #32
 8001e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e76:	1d3b      	adds	r3, r7, #4
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
 8001e84:	615a      	str	r2, [r3, #20]
 8001e86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001e88:	4b1e      	ldr	r3, [pc, #120]	; (8001f04 <MX_TIM14_Init+0x94>)
 8001e8a:	4a1f      	ldr	r2, [pc, #124]	; (8001f08 <MX_TIM14_Init+0x98>)
 8001e8c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 22;
 8001e8e:	4b1d      	ldr	r3, [pc, #116]	; (8001f04 <MX_TIM14_Init+0x94>)
 8001e90:	2216      	movs	r2, #22
 8001e92:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e94:	4b1b      	ldr	r3, [pc, #108]	; (8001f04 <MX_TIM14_Init+0x94>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001e9a:	4b1a      	ldr	r3, [pc, #104]	; (8001f04 <MX_TIM14_Init+0x94>)
 8001e9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ea0:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea2:	4b18      	ldr	r3, [pc, #96]	; (8001f04 <MX_TIM14_Init+0x94>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ea8:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <MX_TIM14_Init+0x94>)
 8001eaa:	2280      	movs	r2, #128	; 0x80
 8001eac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001eae:	4815      	ldr	r0, [pc, #84]	; (8001f04 <MX_TIM14_Init+0x94>)
 8001eb0:	f004 ff6d 	bl	8006d8e <HAL_TIM_Base_Init>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8001eba:	f000 f96b 	bl	8002194 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001ebe:	4811      	ldr	r0, [pc, #68]	; (8001f04 <MX_TIM14_Init+0x94>)
 8001ec0:	f005 f834 	bl	8006f2c <HAL_TIM_PWM_Init>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8001eca:	f000 f963 	bl	8002194 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ece:	2360      	movs	r3, #96	; 0x60
 8001ed0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ede:	1d3b      	adds	r3, r7, #4
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4807      	ldr	r0, [pc, #28]	; (8001f04 <MX_TIM14_Init+0x94>)
 8001ee6:	f005 fab1 	bl	800744c <HAL_TIM_PWM_ConfigChannel>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001ef0:	f000 f950 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001ef4:	4803      	ldr	r0, [pc, #12]	; (8001f04 <MX_TIM14_Init+0x94>)
 8001ef6:	f000 fafb 	bl	80024f0 <HAL_TIM_MspPostInit>

}
 8001efa:	bf00      	nop
 8001efc:	3720      	adds	r7, #32
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	240003c8 	.word	0x240003c8
 8001f08:	40002000 	.word	0x40002000

08001f0c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f10:	4b22      	ldr	r3, [pc, #136]	; (8001f9c <MX_USART3_UART_Init+0x90>)
 8001f12:	4a23      	ldr	r2, [pc, #140]	; (8001fa0 <MX_USART3_UART_Init+0x94>)
 8001f14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f16:	4b21      	ldr	r3, [pc, #132]	; (8001f9c <MX_USART3_UART_Init+0x90>)
 8001f18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f1e:	4b1f      	ldr	r3, [pc, #124]	; (8001f9c <MX_USART3_UART_Init+0x90>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f24:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <MX_USART3_UART_Init+0x90>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f2a:	4b1c      	ldr	r3, [pc, #112]	; (8001f9c <MX_USART3_UART_Init+0x90>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f30:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <MX_USART3_UART_Init+0x90>)
 8001f32:	220c      	movs	r2, #12
 8001f34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f36:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <MX_USART3_UART_Init+0x90>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f3c:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <MX_USART3_UART_Init+0x90>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f42:	4b16      	ldr	r3, [pc, #88]	; (8001f9c <MX_USART3_UART_Init+0x90>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f48:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <MX_USART3_UART_Init+0x90>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f4e:	4b13      	ldr	r3, [pc, #76]	; (8001f9c <MX_USART3_UART_Init+0x90>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f54:	4811      	ldr	r0, [pc, #68]	; (8001f9c <MX_USART3_UART_Init+0x90>)
 8001f56:	f005 ff68 	bl	8007e2a <HAL_UART_Init>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001f60:	f000 f918 	bl	8002194 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f64:	2100      	movs	r1, #0
 8001f66:	480d      	ldr	r0, [pc, #52]	; (8001f9c <MX_USART3_UART_Init+0x90>)
 8001f68:	f006 ff9c 	bl	8008ea4 <HAL_UARTEx_SetTxFifoThreshold>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001f72:	f000 f90f 	bl	8002194 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f76:	2100      	movs	r1, #0
 8001f78:	4808      	ldr	r0, [pc, #32]	; (8001f9c <MX_USART3_UART_Init+0x90>)
 8001f7a:	f006 ffd1 	bl	8008f20 <HAL_UARTEx_SetRxFifoThreshold>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001f84:	f000 f906 	bl	8002194 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001f88:	4804      	ldr	r0, [pc, #16]	; (8001f9c <MX_USART3_UART_Init+0x90>)
 8001f8a:	f006 ff52 	bl	8008e32 <HAL_UARTEx_DisableFifoMode>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001f94:	f000 f8fe 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f98:	bf00      	nop
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	24000414 	.word	0x24000414
 8001fa0:	40004800 	.word	0x40004800

08001fa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08c      	sub	sp, #48	; 0x30
 8001fa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001faa:	f107 031c 	add.w	r3, r7, #28
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	605a      	str	r2, [r3, #4]
 8001fb4:	609a      	str	r2, [r3, #8]
 8001fb6:	60da      	str	r2, [r3, #12]
 8001fb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fba:	4b51      	ldr	r3, [pc, #324]	; (8002100 <MX_GPIO_Init+0x15c>)
 8001fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fc0:	4a4f      	ldr	r2, [pc, #316]	; (8002100 <MX_GPIO_Init+0x15c>)
 8001fc2:	f043 0310 	orr.w	r3, r3, #16
 8001fc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fca:	4b4d      	ldr	r3, [pc, #308]	; (8002100 <MX_GPIO_Init+0x15c>)
 8001fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fd0:	f003 0310 	and.w	r3, r3, #16
 8001fd4:	61bb      	str	r3, [r7, #24]
 8001fd6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fd8:	4b49      	ldr	r3, [pc, #292]	; (8002100 <MX_GPIO_Init+0x15c>)
 8001fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fde:	4a48      	ldr	r2, [pc, #288]	; (8002100 <MX_GPIO_Init+0x15c>)
 8001fe0:	f043 0304 	orr.w	r3, r3, #4
 8001fe4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fe8:	4b45      	ldr	r3, [pc, #276]	; (8002100 <MX_GPIO_Init+0x15c>)
 8001fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fee:	f003 0304 	and.w	r3, r3, #4
 8001ff2:	617b      	str	r3, [r7, #20]
 8001ff4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ff6:	4b42      	ldr	r3, [pc, #264]	; (8002100 <MX_GPIO_Init+0x15c>)
 8001ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ffc:	4a40      	ldr	r2, [pc, #256]	; (8002100 <MX_GPIO_Init+0x15c>)
 8001ffe:	f043 0320 	orr.w	r3, r3, #32
 8002002:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002006:	4b3e      	ldr	r3, [pc, #248]	; (8002100 <MX_GPIO_Init+0x15c>)
 8002008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800200c:	f003 0320 	and.w	r3, r3, #32
 8002010:	613b      	str	r3, [r7, #16]
 8002012:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002014:	4b3a      	ldr	r3, [pc, #232]	; (8002100 <MX_GPIO_Init+0x15c>)
 8002016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800201a:	4a39      	ldr	r2, [pc, #228]	; (8002100 <MX_GPIO_Init+0x15c>)
 800201c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002020:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002024:	4b36      	ldr	r3, [pc, #216]	; (8002100 <MX_GPIO_Init+0x15c>)
 8002026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800202a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002032:	4b33      	ldr	r3, [pc, #204]	; (8002100 <MX_GPIO_Init+0x15c>)
 8002034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002038:	4a31      	ldr	r2, [pc, #196]	; (8002100 <MX_GPIO_Init+0x15c>)
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002042:	4b2f      	ldr	r3, [pc, #188]	; (8002100 <MX_GPIO_Init+0x15c>)
 8002044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	60bb      	str	r3, [r7, #8]
 800204e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002050:	4b2b      	ldr	r3, [pc, #172]	; (8002100 <MX_GPIO_Init+0x15c>)
 8002052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002056:	4a2a      	ldr	r2, [pc, #168]	; (8002100 <MX_GPIO_Init+0x15c>)
 8002058:	f043 0302 	orr.w	r3, r3, #2
 800205c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002060:	4b27      	ldr	r3, [pc, #156]	; (8002100 <MX_GPIO_Init+0x15c>)
 8002062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	607b      	str	r3, [r7, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800206e:	4b24      	ldr	r3, [pc, #144]	; (8002100 <MX_GPIO_Init+0x15c>)
 8002070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002074:	4a22      	ldr	r2, [pc, #136]	; (8002100 <MX_GPIO_Init+0x15c>)
 8002076:	f043 0308 	orr.w	r3, r3, #8
 800207a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800207e:	4b20      	ldr	r3, [pc, #128]	; (8002100 <MX_GPIO_Init+0x15c>)
 8002080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002084:	f003 0308 	and.w	r3, r3, #8
 8002088:	603b      	str	r3, [r7, #0]
 800208a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I_GPIO_Port, CS_I_Pin, GPIO_PIN_RESET);
 800208c:	2200      	movs	r2, #0
 800208e:	2110      	movs	r1, #16
 8002090:	481c      	ldr	r0, [pc, #112]	; (8002104 <MX_GPIO_Init+0x160>)
 8002092:	f001 fad1 	bl	8003638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8002096:	2200      	movs	r2, #0
 8002098:	f244 0101 	movw	r1, #16385	; 0x4001
 800209c:	481a      	ldr	r0, [pc, #104]	; (8002108 <MX_GPIO_Init+0x164>)
 800209e:	f001 facb 	bl	8003638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I_Pin */
  GPIO_InitStruct.Pin = CS_I_Pin;
 80020a2:	2310      	movs	r3, #16
 80020a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a6:	2301      	movs	r3, #1
 80020a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ae:	2300      	movs	r3, #0
 80020b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I_GPIO_Port, &GPIO_InitStruct);
 80020b2:	f107 031c 	add.w	r3, r7, #28
 80020b6:	4619      	mov	r1, r3
 80020b8:	4812      	ldr	r0, [pc, #72]	; (8002104 <MX_GPIO_Init+0x160>)
 80020ba:	f001 f90d 	bl	80032d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80020be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020c4:	2300      	movs	r3, #0
 80020c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80020cc:	f107 031c 	add.w	r3, r7, #28
 80020d0:	4619      	mov	r1, r3
 80020d2:	480e      	ldr	r0, [pc, #56]	; (800210c <MX_GPIO_Init+0x168>)
 80020d4:	f001 f900 	bl	80032d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80020d8:	f244 0301 	movw	r3, #16385	; 0x4001
 80020dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020de:	2301      	movs	r3, #1
 80020e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e6:	2300      	movs	r3, #0
 80020e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ea:	f107 031c 	add.w	r3, r7, #28
 80020ee:	4619      	mov	r1, r3
 80020f0:	4805      	ldr	r0, [pc, #20]	; (8002108 <MX_GPIO_Init+0x164>)
 80020f2:	f001 f8f1 	bl	80032d8 <HAL_GPIO_Init>

}
 80020f6:	bf00      	nop
 80020f8:	3730      	adds	r7, #48	; 0x30
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	58024400 	.word	0x58024400
 8002104:	58021000 	.word	0x58021000
 8002108:	58020400 	.word	0x58020400
 800210c:	58020800 	.word	0x58020800

08002110 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002112:	b087      	sub	sp, #28
 8002114:	af04      	add	r7, sp, #16
 8002116:	6078      	str	r0, [r7, #4]
    */

	// NRF24


    if(NRF24_available()){
 8002118:	f7fe fda2 	bl	8000c60 <NRF24_available>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0fa      	beq.n	8002118 <StartDefaultTask+0x8>
	  NRF24_read(myRxData, 32);
 8002122:	2120      	movs	r1, #32
 8002124:	4810      	ldr	r0, [pc, #64]	; (8002168 <StartDefaultTask+0x58>)
 8002126:	f7fe fda3 	bl	8000c70 <NRF24_read>
	  printf("Coordinates: %d %d %d %d %d %d %d \r\n", myRxData[0],myRxData[1],myRxData[2],myRxData[3],myRxData[4],myRxData[5],myRxData[6]);
 800212a:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <StartDefaultTask+0x58>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	461c      	mov	r4, r3
 8002130:	4b0d      	ldr	r3, [pc, #52]	; (8002168 <StartDefaultTask+0x58>)
 8002132:	785b      	ldrb	r3, [r3, #1]
 8002134:	461d      	mov	r5, r3
 8002136:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <StartDefaultTask+0x58>)
 8002138:	789b      	ldrb	r3, [r3, #2]
 800213a:	461e      	mov	r6, r3
 800213c:	4b0a      	ldr	r3, [pc, #40]	; (8002168 <StartDefaultTask+0x58>)
 800213e:	78db      	ldrb	r3, [r3, #3]
 8002140:	461a      	mov	r2, r3
 8002142:	4b09      	ldr	r3, [pc, #36]	; (8002168 <StartDefaultTask+0x58>)
 8002144:	791b      	ldrb	r3, [r3, #4]
 8002146:	4619      	mov	r1, r3
 8002148:	4b07      	ldr	r3, [pc, #28]	; (8002168 <StartDefaultTask+0x58>)
 800214a:	795b      	ldrb	r3, [r3, #5]
 800214c:	4618      	mov	r0, r3
 800214e:	4b06      	ldr	r3, [pc, #24]	; (8002168 <StartDefaultTask+0x58>)
 8002150:	799b      	ldrb	r3, [r3, #6]
 8002152:	9303      	str	r3, [sp, #12]
 8002154:	9002      	str	r0, [sp, #8]
 8002156:	9101      	str	r1, [sp, #4]
 8002158:	9200      	str	r2, [sp, #0]
 800215a:	4633      	mov	r3, r6
 800215c:	462a      	mov	r2, r5
 800215e:	4621      	mov	r1, r4
 8002160:	4802      	ldr	r0, [pc, #8]	; (800216c <StartDefaultTask+0x5c>)
 8002162:	f009 fea5 	bl	800beb0 <iprintf>
    if(NRF24_available()){
 8002166:	e7d7      	b.n	8002118 <StartDefaultTask+0x8>
 8002168:	240004a8 	.word	0x240004a8
 800216c:	0800d48c 	.word	0x0800d48c

08002170 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a04      	ldr	r2, [pc, #16]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d101      	bne.n	8002186 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002182:	f000 fc15 	bl	80029b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40001400 	.word	0x40001400

08002194 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002198:	b672      	cpsid	i
}
 800219a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800219c:	e7fe      	b.n	800219c <Error_Handler+0x8>
	...

080021a0 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80021a8:	1d39      	adds	r1, r7, #4
 80021aa:	f04f 33ff 	mov.w	r3, #4294967295
 80021ae:	2201      	movs	r2, #1
 80021b0:	4803      	ldr	r0, [pc, #12]	; (80021c0 <__io_putchar+0x20>)
 80021b2:	f005 fe8a 	bl	8007eca <HAL_UART_Transmit>
  return ch;
 80021b6:	687b      	ldr	r3, [r7, #4]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	24000414 	.word	0x24000414

080021c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ca:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <HAL_MspInit+0x38>)
 80021cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80021d0:	4a0a      	ldr	r2, [pc, #40]	; (80021fc <HAL_MspInit+0x38>)
 80021d2:	f043 0302 	orr.w	r3, r3, #2
 80021d6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80021da:	4b08      	ldr	r3, [pc, #32]	; (80021fc <HAL_MspInit+0x38>)
 80021dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	607b      	str	r3, [r7, #4]
 80021e6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021e8:	2200      	movs	r2, #0
 80021ea:	210f      	movs	r1, #15
 80021ec:	f06f 0001 	mvn.w	r0, #1
 80021f0:	f000 fce6 	bl	8002bc0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021f4:	bf00      	nop
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	58024400 	.word	0x58024400

08002200 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b0b8      	sub	sp, #224	; 0xe0
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002208:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	60da      	str	r2, [r3, #12]
 8002216:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002218:	f107 0310 	add.w	r3, r7, #16
 800221c:	22bc      	movs	r2, #188	; 0xbc
 800221e:	2100      	movs	r1, #0
 8002220:	4618      	mov	r0, r3
 8002222:	f009 fda8 	bl	800bd76 <memset>
  if(hfdcan->Instance==FDCAN1)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a25      	ldr	r2, [pc, #148]	; (80022c0 <HAL_FDCAN_MspInit+0xc0>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d142      	bne.n	80022b6 <HAL_FDCAN_MspInit+0xb6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002230:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002234:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002236:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800223a:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800223c:	f107 0310 	add.w	r3, r7, #16
 8002240:	4618      	mov	r0, r3
 8002242:	f002 fa97 	bl	8004774 <HAL_RCCEx_PeriphCLKConfig>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800224c:	f7ff ffa2 	bl	8002194 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002250:	4b1c      	ldr	r3, [pc, #112]	; (80022c4 <HAL_FDCAN_MspInit+0xc4>)
 8002252:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002256:	4a1b      	ldr	r2, [pc, #108]	; (80022c4 <HAL_FDCAN_MspInit+0xc4>)
 8002258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800225c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002260:	4b18      	ldr	r3, [pc, #96]	; (80022c4 <HAL_FDCAN_MspInit+0xc4>)
 8002262:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800226e:	4b15      	ldr	r3, [pc, #84]	; (80022c4 <HAL_FDCAN_MspInit+0xc4>)
 8002270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002274:	4a13      	ldr	r2, [pc, #76]	; (80022c4 <HAL_FDCAN_MspInit+0xc4>)
 8002276:	f043 0308 	orr.w	r3, r3, #8
 800227a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800227e:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <HAL_FDCAN_MspInit+0xc4>)
 8002280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002284:	f003 0308 	and.w	r3, r3, #8
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800228c:	2303      	movs	r3, #3
 800228e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002292:	2302      	movs	r3, #2
 8002294:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229e:	2300      	movs	r3, #0
 80022a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80022a4:	2309      	movs	r3, #9
 80022a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022aa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80022ae:	4619      	mov	r1, r3
 80022b0:	4805      	ldr	r0, [pc, #20]	; (80022c8 <HAL_FDCAN_MspInit+0xc8>)
 80022b2:	f001 f811 	bl	80032d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80022b6:	bf00      	nop
 80022b8:	37e0      	adds	r7, #224	; 0xe0
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	4000a000 	.word	0x4000a000
 80022c4:	58024400 	.word	0x58024400
 80022c8:	58020c00 	.word	0x58020c00

080022cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b0bc      	sub	sp, #240	; 0xf0
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	605a      	str	r2, [r3, #4]
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	60da      	str	r2, [r3, #12]
 80022e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022e4:	f107 0320 	add.w	r3, r7, #32
 80022e8:	22bc      	movs	r2, #188	; 0xbc
 80022ea:	2100      	movs	r1, #0
 80022ec:	4618      	mov	r0, r3
 80022ee:	f009 fd42 	bl	800bd76 <memset>
  if(hspi->Instance==SPI1)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a5b      	ldr	r2, [pc, #364]	; (8002464 <HAL_SPI_MspInit+0x198>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d166      	bne.n	80023ca <HAL_SPI_MspInit+0xfe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80022fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002300:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002302:	2300      	movs	r3, #0
 8002304:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002306:	f107 0320 	add.w	r3, r7, #32
 800230a:	4618      	mov	r0, r3
 800230c:	f002 fa32 	bl	8004774 <HAL_RCCEx_PeriphCLKConfig>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8002316:	f7ff ff3d 	bl	8002194 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800231a:	4b53      	ldr	r3, [pc, #332]	; (8002468 <HAL_SPI_MspInit+0x19c>)
 800231c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002320:	4a51      	ldr	r2, [pc, #324]	; (8002468 <HAL_SPI_MspInit+0x19c>)
 8002322:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002326:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800232a:	4b4f      	ldr	r3, [pc, #316]	; (8002468 <HAL_SPI_MspInit+0x19c>)
 800232c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002330:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002334:	61fb      	str	r3, [r7, #28]
 8002336:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002338:	4b4b      	ldr	r3, [pc, #300]	; (8002468 <HAL_SPI_MspInit+0x19c>)
 800233a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800233e:	4a4a      	ldr	r2, [pc, #296]	; (8002468 <HAL_SPI_MspInit+0x19c>)
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002348:	4b47      	ldr	r3, [pc, #284]	; (8002468 <HAL_SPI_MspInit+0x19c>)
 800234a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	61bb      	str	r3, [r7, #24]
 8002354:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002356:	4b44      	ldr	r3, [pc, #272]	; (8002468 <HAL_SPI_MspInit+0x19c>)
 8002358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800235c:	4a42      	ldr	r2, [pc, #264]	; (8002468 <HAL_SPI_MspInit+0x19c>)
 800235e:	f043 0302 	orr.w	r3, r3, #2
 8002362:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002366:	4b40      	ldr	r3, [pc, #256]	; (8002468 <HAL_SPI_MspInit+0x19c>)
 8002368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	617b      	str	r3, [r7, #20]
 8002372:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002374:	2360      	movs	r3, #96	; 0x60
 8002376:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237a:	2302      	movs	r3, #2
 800237c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002380:	2300      	movs	r3, #0
 8002382:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002386:	2300      	movs	r3, #0
 8002388:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800238c:	2305      	movs	r3, #5
 800238e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002392:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002396:	4619      	mov	r1, r3
 8002398:	4834      	ldr	r0, [pc, #208]	; (800246c <HAL_SPI_MspInit+0x1a0>)
 800239a:	f000 ff9d 	bl	80032d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800239e:	2320      	movs	r3, #32
 80023a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a4:	2302      	movs	r3, #2
 80023a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b0:	2300      	movs	r3, #0
 80023b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023b6:	2305      	movs	r3, #5
 80023b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023bc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80023c0:	4619      	mov	r1, r3
 80023c2:	482b      	ldr	r0, [pc, #172]	; (8002470 <HAL_SPI_MspInit+0x1a4>)
 80023c4:	f000 ff88 	bl	80032d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80023c8:	e047      	b.n	800245a <HAL_SPI_MspInit+0x18e>
  else if(hspi->Instance==SPI4)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a29      	ldr	r2, [pc, #164]	; (8002474 <HAL_SPI_MspInit+0x1a8>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d142      	bne.n	800245a <HAL_SPI_MspInit+0x18e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80023d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023d8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80023da:	2300      	movs	r3, #0
 80023dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023e0:	f107 0320 	add.w	r3, r7, #32
 80023e4:	4618      	mov	r0, r3
 80023e6:	f002 f9c5 	bl	8004774 <HAL_RCCEx_PeriphCLKConfig>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <HAL_SPI_MspInit+0x128>
      Error_Handler();
 80023f0:	f7ff fed0 	bl	8002194 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80023f4:	4b1c      	ldr	r3, [pc, #112]	; (8002468 <HAL_SPI_MspInit+0x19c>)
 80023f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023fa:	4a1b      	ldr	r2, [pc, #108]	; (8002468 <HAL_SPI_MspInit+0x19c>)
 80023fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002400:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002404:	4b18      	ldr	r3, [pc, #96]	; (8002468 <HAL_SPI_MspInit+0x19c>)
 8002406:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800240a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800240e:	613b      	str	r3, [r7, #16]
 8002410:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002412:	4b15      	ldr	r3, [pc, #84]	; (8002468 <HAL_SPI_MspInit+0x19c>)
 8002414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002418:	4a13      	ldr	r2, [pc, #76]	; (8002468 <HAL_SPI_MspInit+0x19c>)
 800241a:	f043 0310 	orr.w	r3, r3, #16
 800241e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002422:	4b11      	ldr	r3, [pc, #68]	; (8002468 <HAL_SPI_MspInit+0x19c>)
 8002424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002428:	f003 0310 	and.w	r3, r3, #16
 800242c:	60fb      	str	r3, [r7, #12]
 800242e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002430:	2364      	movs	r3, #100	; 0x64
 8002432:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002436:	2302      	movs	r3, #2
 8002438:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243c:	2300      	movs	r3, #0
 800243e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002442:	2300      	movs	r3, #0
 8002444:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002448:	2305      	movs	r3, #5
 800244a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800244e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002452:	4619      	mov	r1, r3
 8002454:	4808      	ldr	r0, [pc, #32]	; (8002478 <HAL_SPI_MspInit+0x1ac>)
 8002456:	f000 ff3f 	bl	80032d8 <HAL_GPIO_Init>
}
 800245a:	bf00      	nop
 800245c:	37f0      	adds	r7, #240	; 0xf0
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40013000 	.word	0x40013000
 8002468:	58024400 	.word	0x58024400
 800246c:	58020000 	.word	0x58020000
 8002470:	58020400 	.word	0x58020400
 8002474:	40013400 	.word	0x40013400
 8002478:	58021000 	.word	0x58021000

0800247c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a16      	ldr	r2, [pc, #88]	; (80024e4 <HAL_TIM_Base_MspInit+0x68>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d10f      	bne.n	80024ae <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 800248e:	4b16      	ldr	r3, [pc, #88]	; (80024e8 <HAL_TIM_Base_MspInit+0x6c>)
 8002490:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002494:	4a14      	ldr	r2, [pc, #80]	; (80024e8 <HAL_TIM_Base_MspInit+0x6c>)
 8002496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800249a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800249e:	4b12      	ldr	r3, [pc, #72]	; (80024e8 <HAL_TIM_Base_MspInit+0x6c>)
 80024a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80024ac:	e013      	b.n	80024d6 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM14)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a0e      	ldr	r2, [pc, #56]	; (80024ec <HAL_TIM_Base_MspInit+0x70>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d10e      	bne.n	80024d6 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80024b8:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <HAL_TIM_Base_MspInit+0x6c>)
 80024ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024be:	4a0a      	ldr	r2, [pc, #40]	; (80024e8 <HAL_TIM_Base_MspInit+0x6c>)
 80024c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80024c8:	4b07      	ldr	r3, [pc, #28]	; (80024e8 <HAL_TIM_Base_MspInit+0x6c>)
 80024ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	68bb      	ldr	r3, [r7, #8]
}
 80024d6:	bf00      	nop
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	40001c00 	.word	0x40001c00
 80024e8:	58024400 	.word	0x58024400
 80024ec:	40002000 	.word	0x40002000

080024f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b08a      	sub	sp, #40	; 0x28
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f8:	f107 0314 	add.w	r3, r7, #20
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	605a      	str	r2, [r3, #4]
 8002502:	609a      	str	r2, [r3, #8]
 8002504:	60da      	str	r2, [r3, #12]
 8002506:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a26      	ldr	r2, [pc, #152]	; (80025a8 <HAL_TIM_MspPostInit+0xb8>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d120      	bne.n	8002554 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002512:	4b26      	ldr	r3, [pc, #152]	; (80025ac <HAL_TIM_MspPostInit+0xbc>)
 8002514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002518:	4a24      	ldr	r2, [pc, #144]	; (80025ac <HAL_TIM_MspPostInit+0xbc>)
 800251a:	f043 0320 	orr.w	r3, r3, #32
 800251e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002522:	4b22      	ldr	r3, [pc, #136]	; (80025ac <HAL_TIM_MspPostInit+0xbc>)
 8002524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002528:	f003 0320 	and.w	r3, r3, #32
 800252c:	613b      	str	r3, [r7, #16]
 800252e:	693b      	ldr	r3, [r7, #16]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002530:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002536:	2302      	movs	r3, #2
 8002538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	2300      	movs	r3, #0
 800253c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253e:	2300      	movs	r3, #0
 8002540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002542:	2309      	movs	r3, #9
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002546:	f107 0314 	add.w	r3, r7, #20
 800254a:	4619      	mov	r1, r3
 800254c:	4818      	ldr	r0, [pc, #96]	; (80025b0 <HAL_TIM_MspPostInit+0xc0>)
 800254e:	f000 fec3 	bl	80032d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8002552:	e024      	b.n	800259e <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM14)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a16      	ldr	r2, [pc, #88]	; (80025b4 <HAL_TIM_MspPostInit+0xc4>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d11f      	bne.n	800259e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800255e:	4b13      	ldr	r3, [pc, #76]	; (80025ac <HAL_TIM_MspPostInit+0xbc>)
 8002560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002564:	4a11      	ldr	r2, [pc, #68]	; (80025ac <HAL_TIM_MspPostInit+0xbc>)
 8002566:	f043 0320 	orr.w	r3, r3, #32
 800256a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800256e:	4b0f      	ldr	r3, [pc, #60]	; (80025ac <HAL_TIM_MspPostInit+0xbc>)
 8002570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002574:	f003 0320 	and.w	r3, r3, #32
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800257c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002582:	2302      	movs	r3, #2
 8002584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002586:	2300      	movs	r3, #0
 8002588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258a:	2300      	movs	r3, #0
 800258c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 800258e:	2309      	movs	r3, #9
 8002590:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002592:	f107 0314 	add.w	r3, r7, #20
 8002596:	4619      	mov	r1, r3
 8002598:	4805      	ldr	r0, [pc, #20]	; (80025b0 <HAL_TIM_MspPostInit+0xc0>)
 800259a:	f000 fe9d 	bl	80032d8 <HAL_GPIO_Init>
}
 800259e:	bf00      	nop
 80025a0:	3728      	adds	r7, #40	; 0x28
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40001c00 	.word	0x40001c00
 80025ac:	58024400 	.word	0x58024400
 80025b0:	58021400 	.word	0x58021400
 80025b4:	40002000 	.word	0x40002000

080025b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b0b8      	sub	sp, #224	; 0xe0
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	605a      	str	r2, [r3, #4]
 80025ca:	609a      	str	r2, [r3, #8]
 80025cc:	60da      	str	r2, [r3, #12]
 80025ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025d0:	f107 0310 	add.w	r3, r7, #16
 80025d4:	22bc      	movs	r2, #188	; 0xbc
 80025d6:	2100      	movs	r1, #0
 80025d8:	4618      	mov	r0, r3
 80025da:	f009 fbcc 	bl	800bd76 <memset>
  if(huart->Instance==USART3)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a25      	ldr	r2, [pc, #148]	; (8002678 <HAL_UART_MspInit+0xc0>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d142      	bne.n	800266e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80025e8:	2302      	movs	r3, #2
 80025ea:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80025ec:	2300      	movs	r3, #0
 80025ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025f2:	f107 0310 	add.w	r3, r7, #16
 80025f6:	4618      	mov	r0, r3
 80025f8:	f002 f8bc 	bl	8004774 <HAL_RCCEx_PeriphCLKConfig>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002602:	f7ff fdc7 	bl	8002194 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002606:	4b1d      	ldr	r3, [pc, #116]	; (800267c <HAL_UART_MspInit+0xc4>)
 8002608:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800260c:	4a1b      	ldr	r2, [pc, #108]	; (800267c <HAL_UART_MspInit+0xc4>)
 800260e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002612:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002616:	4b19      	ldr	r3, [pc, #100]	; (800267c <HAL_UART_MspInit+0xc4>)
 8002618:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800261c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002624:	4b15      	ldr	r3, [pc, #84]	; (800267c <HAL_UART_MspInit+0xc4>)
 8002626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800262a:	4a14      	ldr	r2, [pc, #80]	; (800267c <HAL_UART_MspInit+0xc4>)
 800262c:	f043 0308 	orr.w	r3, r3, #8
 8002630:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002634:	4b11      	ldr	r3, [pc, #68]	; (800267c <HAL_UART_MspInit+0xc4>)
 8002636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	60bb      	str	r3, [r7, #8]
 8002640:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002642:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002646:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264a:	2302      	movs	r3, #2
 800264c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002650:	2300      	movs	r3, #0
 8002652:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002656:	2300      	movs	r3, #0
 8002658:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800265c:	2307      	movs	r3, #7
 800265e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002662:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002666:	4619      	mov	r1, r3
 8002668:	4805      	ldr	r0, [pc, #20]	; (8002680 <HAL_UART_MspInit+0xc8>)
 800266a:	f000 fe35 	bl	80032d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800266e:	bf00      	nop
 8002670:	37e0      	adds	r7, #224	; 0xe0
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40004800 	.word	0x40004800
 800267c:	58024400 	.word	0x58024400
 8002680:	58020c00 	.word	0x58020c00

08002684 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b090      	sub	sp, #64	; 0x40
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b0f      	cmp	r3, #15
 8002690:	d827      	bhi.n	80026e2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 8002692:	2200      	movs	r2, #0
 8002694:	6879      	ldr	r1, [r7, #4]
 8002696:	2037      	movs	r0, #55	; 0x37
 8002698:	f000 fa92 	bl	8002bc0 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800269c:	2037      	movs	r0, #55	; 0x37
 800269e:	f000 faa9 	bl	8002bf4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80026a2:	4a29      	ldr	r2, [pc, #164]	; (8002748 <HAL_InitTick+0xc4>)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80026a8:	4b28      	ldr	r3, [pc, #160]	; (800274c <HAL_InitTick+0xc8>)
 80026aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026ae:	4a27      	ldr	r2, [pc, #156]	; (800274c <HAL_InitTick+0xc8>)
 80026b0:	f043 0320 	orr.w	r3, r3, #32
 80026b4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80026b8:	4b24      	ldr	r3, [pc, #144]	; (800274c <HAL_InitTick+0xc8>)
 80026ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026be:	f003 0320 	and.w	r3, r3, #32
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80026c6:	f107 0210 	add.w	r2, r7, #16
 80026ca:	f107 0314 	add.w	r3, r7, #20
 80026ce:	4611      	mov	r1, r2
 80026d0:	4618      	mov	r0, r3
 80026d2:	f002 f80d 	bl	80046f0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80026d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d8:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80026da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d106      	bne.n	80026ee <HAL_InitTick+0x6a>
 80026e0:	e001      	b.n	80026e6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e02b      	b.n	800273e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80026e6:	f001 ffd7 	bl	8004698 <HAL_RCC_GetPCLK1Freq>
 80026ea:	63f8      	str	r0, [r7, #60]	; 0x3c
 80026ec:	e004      	b.n	80026f8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80026ee:	f001 ffd3 	bl	8004698 <HAL_RCC_GetPCLK1Freq>
 80026f2:	4603      	mov	r3, r0
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80026f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026fa:	4a15      	ldr	r2, [pc, #84]	; (8002750 <HAL_InitTick+0xcc>)
 80026fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002700:	0c9b      	lsrs	r3, r3, #18
 8002702:	3b01      	subs	r3, #1
 8002704:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8002706:	4b13      	ldr	r3, [pc, #76]	; (8002754 <HAL_InitTick+0xd0>)
 8002708:	4a13      	ldr	r2, [pc, #76]	; (8002758 <HAL_InitTick+0xd4>)
 800270a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800270c:	4b11      	ldr	r3, [pc, #68]	; (8002754 <HAL_InitTick+0xd0>)
 800270e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002712:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8002714:	4a0f      	ldr	r2, [pc, #60]	; (8002754 <HAL_InitTick+0xd0>)
 8002716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002718:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800271a:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <HAL_InitTick+0xd0>)
 800271c:	2200      	movs	r2, #0
 800271e:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002720:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <HAL_InitTick+0xd0>)
 8002722:	2200      	movs	r2, #0
 8002724:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8002726:	480b      	ldr	r0, [pc, #44]	; (8002754 <HAL_InitTick+0xd0>)
 8002728:	f004 fb31 	bl	8006d8e <HAL_TIM_Base_Init>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d104      	bne.n	800273c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8002732:	4808      	ldr	r0, [pc, #32]	; (8002754 <HAL_InitTick+0xd0>)
 8002734:	f004 fb82 	bl	8006e3c <HAL_TIM_Base_Start_IT>
 8002738:	4603      	mov	r3, r0
 800273a:	e000      	b.n	800273e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
}
 800273e:	4618      	mov	r0, r3
 8002740:	3740      	adds	r7, #64	; 0x40
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	24000010 	.word	0x24000010
 800274c:	58024400 	.word	0x58024400
 8002750:	431bde83 	.word	0x431bde83
 8002754:	2400050c 	.word	0x2400050c
 8002758:	40001400 	.word	0x40001400

0800275c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002760:	e7fe      	b.n	8002760 <NMI_Handler+0x4>

08002762 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002762:	b480      	push	{r7}
 8002764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002766:	e7fe      	b.n	8002766 <HardFault_Handler+0x4>

08002768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800276c:	e7fe      	b.n	800276c <MemManage_Handler+0x4>

0800276e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800276e:	b480      	push	{r7}
 8002770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002772:	e7fe      	b.n	8002772 <BusFault_Handler+0x4>

08002774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002778:	e7fe      	b.n	8002778 <UsageFault_Handler+0x4>

0800277a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800277a:	b480      	push	{r7}
 800277c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800277e:	bf00      	nop
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800278c:	4802      	ldr	r0, [pc, #8]	; (8002798 <TIM7_IRQHandler+0x10>)
 800278e:	f004 fd3d 	bl	800720c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	2400050c 	.word	0x2400050c

0800279c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]
 80027ac:	e00a      	b.n	80027c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027ae:	f3af 8000 	nop.w
 80027b2:	4601      	mov	r1, r0
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	1c5a      	adds	r2, r3, #1
 80027b8:	60ba      	str	r2, [r7, #8]
 80027ba:	b2ca      	uxtb	r2, r1
 80027bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	3301      	adds	r3, #1
 80027c2:	617b      	str	r3, [r7, #20]
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	dbf0      	blt.n	80027ae <_read+0x12>
	}

return len;
 80027cc:	687b      	ldr	r3, [r7, #4]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b086      	sub	sp, #24
 80027da:	af00      	add	r7, sp, #0
 80027dc:	60f8      	str	r0, [r7, #12]
 80027de:	60b9      	str	r1, [r7, #8]
 80027e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027e2:	2300      	movs	r3, #0
 80027e4:	617b      	str	r3, [r7, #20]
 80027e6:	e009      	b.n	80027fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	1c5a      	adds	r2, r3, #1
 80027ec:	60ba      	str	r2, [r7, #8]
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff fcd5 	bl	80021a0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	3301      	adds	r3, #1
 80027fa:	617b      	str	r3, [r7, #20]
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	429a      	cmp	r2, r3
 8002802:	dbf1      	blt.n	80027e8 <_write+0x12>
	}
	return len;
 8002804:	687b      	ldr	r3, [r7, #4]
}
 8002806:	4618      	mov	r0, r3
 8002808:	3718      	adds	r7, #24
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <_close>:

int _close(int file)
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
	return -1;
 8002816:	f04f 33ff 	mov.w	r3, #4294967295
}
 800281a:	4618      	mov	r0, r3
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002826:	b480      	push	{r7}
 8002828:	b083      	sub	sp, #12
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
 800282e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002836:	605a      	str	r2, [r3, #4]
	return 0;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <_isatty>:

int _isatty(int file)
{
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
	return 1;
 800284e:	2301      	movs	r3, #1
}
 8002850:	4618      	mov	r0, r3
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
	return 0;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
	...

08002878 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002880:	4a14      	ldr	r2, [pc, #80]	; (80028d4 <_sbrk+0x5c>)
 8002882:	4b15      	ldr	r3, [pc, #84]	; (80028d8 <_sbrk+0x60>)
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800288c:	4b13      	ldr	r3, [pc, #76]	; (80028dc <_sbrk+0x64>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d102      	bne.n	800289a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002894:	4b11      	ldr	r3, [pc, #68]	; (80028dc <_sbrk+0x64>)
 8002896:	4a12      	ldr	r2, [pc, #72]	; (80028e0 <_sbrk+0x68>)
 8002898:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800289a:	4b10      	ldr	r3, [pc, #64]	; (80028dc <_sbrk+0x64>)
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4413      	add	r3, r2
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d207      	bcs.n	80028b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028a8:	f009 f934 	bl	800bb14 <__errno>
 80028ac:	4603      	mov	r3, r0
 80028ae:	220c      	movs	r2, #12
 80028b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028b2:	f04f 33ff 	mov.w	r3, #4294967295
 80028b6:	e009      	b.n	80028cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028b8:	4b08      	ldr	r3, [pc, #32]	; (80028dc <_sbrk+0x64>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028be:	4b07      	ldr	r3, [pc, #28]	; (80028dc <_sbrk+0x64>)
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4413      	add	r3, r2
 80028c6:	4a05      	ldr	r2, [pc, #20]	; (80028dc <_sbrk+0x64>)
 80028c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028ca:	68fb      	ldr	r3, [r7, #12]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3718      	adds	r7, #24
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	24080000 	.word	0x24080000
 80028d8:	00000400 	.word	0x00000400
 80028dc:	24000558 	.word	0x24000558
 80028e0:	24004f80 	.word	0x24004f80

080028e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80028e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800291c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80028e8:	f7fd fed4 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028ec:	480c      	ldr	r0, [pc, #48]	; (8002920 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028ee:	490d      	ldr	r1, [pc, #52]	; (8002924 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028f0:	4a0d      	ldr	r2, [pc, #52]	; (8002928 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028f4:	e002      	b.n	80028fc <LoopCopyDataInit>

080028f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028fa:	3304      	adds	r3, #4

080028fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002900:	d3f9      	bcc.n	80028f6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002902:	4a0a      	ldr	r2, [pc, #40]	; (800292c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002904:	4c0a      	ldr	r4, [pc, #40]	; (8002930 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002908:	e001      	b.n	800290e <LoopFillZerobss>

0800290a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800290a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800290c:	3204      	adds	r2, #4

0800290e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800290e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002910:	d3fb      	bcc.n	800290a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002912:	f009 f9fb 	bl	800bd0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002916:	f7ff f81d 	bl	8001954 <main>
  bx  lr
 800291a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800291c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002920:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002924:	24000080 	.word	0x24000080
  ldr r2, =_sidata
 8002928:	0800d62c 	.word	0x0800d62c
  ldr r2, =_sbss
 800292c:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 8002930:	24004f80 	.word	0x24004f80

08002934 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002934:	e7fe      	b.n	8002934 <ADC3_IRQHandler>
	...

08002938 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800293e:	2003      	movs	r0, #3
 8002940:	f000 f933 	bl	8002baa <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002944:	f001 fcfe 	bl	8004344 <HAL_RCC_GetSysClockFreq>
 8002948:	4602      	mov	r2, r0
 800294a:	4b15      	ldr	r3, [pc, #84]	; (80029a0 <HAL_Init+0x68>)
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	0a1b      	lsrs	r3, r3, #8
 8002950:	f003 030f 	and.w	r3, r3, #15
 8002954:	4913      	ldr	r1, [pc, #76]	; (80029a4 <HAL_Init+0x6c>)
 8002956:	5ccb      	ldrb	r3, [r1, r3]
 8002958:	f003 031f 	and.w	r3, r3, #31
 800295c:	fa22 f303 	lsr.w	r3, r2, r3
 8002960:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002962:	4b0f      	ldr	r3, [pc, #60]	; (80029a0 <HAL_Init+0x68>)
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	f003 030f 	and.w	r3, r3, #15
 800296a:	4a0e      	ldr	r2, [pc, #56]	; (80029a4 <HAL_Init+0x6c>)
 800296c:	5cd3      	ldrb	r3, [r2, r3]
 800296e:	f003 031f 	and.w	r3, r3, #31
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	fa22 f303 	lsr.w	r3, r2, r3
 8002978:	4a0b      	ldr	r2, [pc, #44]	; (80029a8 <HAL_Init+0x70>)
 800297a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800297c:	4a0b      	ldr	r2, [pc, #44]	; (80029ac <HAL_Init+0x74>)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002982:	200f      	movs	r0, #15
 8002984:	f7ff fe7e 	bl	8002684 <HAL_InitTick>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e002      	b.n	8002998 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002992:	f7ff fc17 	bl	80021c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	58024400 	.word	0x58024400
 80029a4:	0800d518 	.word	0x0800d518
 80029a8:	24000004 	.word	0x24000004
 80029ac:	24000000 	.word	0x24000000

080029b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80029b4:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <HAL_IncTick+0x20>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	461a      	mov	r2, r3
 80029ba:	4b06      	ldr	r3, [pc, #24]	; (80029d4 <HAL_IncTick+0x24>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4413      	add	r3, r2
 80029c0:	4a04      	ldr	r2, [pc, #16]	; (80029d4 <HAL_IncTick+0x24>)
 80029c2:	6013      	str	r3, [r2, #0]
}
 80029c4:	bf00      	nop
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	24000014 	.word	0x24000014
 80029d4:	2400055c 	.word	0x2400055c

080029d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  return uwTick;
 80029dc:	4b03      	ldr	r3, [pc, #12]	; (80029ec <HAL_GetTick+0x14>)
 80029de:	681b      	ldr	r3, [r3, #0]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	2400055c 	.word	0x2400055c

080029f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029f8:	f7ff ffee 	bl	80029d8 <HAL_GetTick>
 80029fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a08:	d005      	beq.n	8002a16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a0a:	4b0a      	ldr	r3, [pc, #40]	; (8002a34 <HAL_Delay+0x44>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4413      	add	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a16:	bf00      	nop
 8002a18:	f7ff ffde 	bl	80029d8 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d8f7      	bhi.n	8002a18 <HAL_Delay+0x28>
  {
  }
}
 8002a28:	bf00      	nop
 8002a2a:	bf00      	nop
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	24000014 	.word	0x24000014

08002a38 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002a3c:	4b03      	ldr	r3, [pc, #12]	; (8002a4c <HAL_GetREVID+0x14>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	0c1b      	lsrs	r3, r3, #16
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	5c001000 	.word	0x5c001000

08002a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a60:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <__NVIC_SetPriorityGrouping+0x40>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a78:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <__NVIC_SetPriorityGrouping+0x44>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a7e:	4a04      	ldr	r2, [pc, #16]	; (8002a90 <__NVIC_SetPriorityGrouping+0x40>)
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	60d3      	str	r3, [r2, #12]
}
 8002a84:	bf00      	nop
 8002a86:	3714      	adds	r7, #20
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	e000ed00 	.word	0xe000ed00
 8002a94:	05fa0000 	.word	0x05fa0000

08002a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a9c:	4b04      	ldr	r3, [pc, #16]	; (8002ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	0a1b      	lsrs	r3, r3, #8
 8002aa2:	f003 0307 	and.w	r3, r3, #7
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	e000ed00 	.word	0xe000ed00

08002ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002abe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	db0b      	blt.n	8002ade <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ac6:	88fb      	ldrh	r3, [r7, #6]
 8002ac8:	f003 021f 	and.w	r2, r3, #31
 8002acc:	4907      	ldr	r1, [pc, #28]	; (8002aec <__NVIC_EnableIRQ+0x38>)
 8002ace:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ad2:	095b      	lsrs	r3, r3, #5
 8002ad4:	2001      	movs	r0, #1
 8002ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8002ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	e000e100 	.word	0xe000e100

08002af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	4603      	mov	r3, r0
 8002af8:	6039      	str	r1, [r7, #0]
 8002afa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002afc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	db0a      	blt.n	8002b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	b2da      	uxtb	r2, r3
 8002b08:	490c      	ldr	r1, [pc, #48]	; (8002b3c <__NVIC_SetPriority+0x4c>)
 8002b0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b0e:	0112      	lsls	r2, r2, #4
 8002b10:	b2d2      	uxtb	r2, r2
 8002b12:	440b      	add	r3, r1
 8002b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b18:	e00a      	b.n	8002b30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	b2da      	uxtb	r2, r3
 8002b1e:	4908      	ldr	r1, [pc, #32]	; (8002b40 <__NVIC_SetPriority+0x50>)
 8002b20:	88fb      	ldrh	r3, [r7, #6]
 8002b22:	f003 030f 	and.w	r3, r3, #15
 8002b26:	3b04      	subs	r3, #4
 8002b28:	0112      	lsls	r2, r2, #4
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	761a      	strb	r2, [r3, #24]
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	e000e100 	.word	0xe000e100
 8002b40:	e000ed00 	.word	0xe000ed00

08002b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b089      	sub	sp, #36	; 0x24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f003 0307 	and.w	r3, r3, #7
 8002b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	f1c3 0307 	rsb	r3, r3, #7
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	bf28      	it	cs
 8002b62:	2304      	movcs	r3, #4
 8002b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	3304      	adds	r3, #4
 8002b6a:	2b06      	cmp	r3, #6
 8002b6c:	d902      	bls.n	8002b74 <NVIC_EncodePriority+0x30>
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	3b03      	subs	r3, #3
 8002b72:	e000      	b.n	8002b76 <NVIC_EncodePriority+0x32>
 8002b74:	2300      	movs	r3, #0
 8002b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b78:	f04f 32ff 	mov.w	r2, #4294967295
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	43da      	mvns	r2, r3
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	401a      	ands	r2, r3
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	fa01 f303 	lsl.w	r3, r1, r3
 8002b96:	43d9      	mvns	r1, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b9c:	4313      	orrs	r3, r2
         );
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3724      	adds	r7, #36	; 0x24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b082      	sub	sp, #8
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7ff ff4c 	bl	8002a50 <__NVIC_SetPriorityGrouping>
}
 8002bb8:	bf00      	nop
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
 8002bcc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bce:	f7ff ff63 	bl	8002a98 <__NVIC_GetPriorityGrouping>
 8002bd2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	68b9      	ldr	r1, [r7, #8]
 8002bd8:	6978      	ldr	r0, [r7, #20]
 8002bda:	f7ff ffb3 	bl	8002b44 <NVIC_EncodePriority>
 8002bde:	4602      	mov	r2, r0
 8002be0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002be4:	4611      	mov	r1, r2
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff ff82 	bl	8002af0 <__NVIC_SetPriority>
}
 8002bec:	bf00      	nop
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff ff56 	bl	8002ab4 <__NVIC_EnableIRQ>
}
 8002c08:	bf00      	nop
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b098      	sub	sp, #96	; 0x60
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8002c18:	4a84      	ldr	r2, [pc, #528]	; (8002e2c <HAL_FDCAN_Init+0x21c>)
 8002c1a:	f107 030c 	add.w	r3, r7, #12
 8002c1e:	4611      	mov	r1, r2
 8002c20:	224c      	movs	r2, #76	; 0x4c
 8002c22:	4618      	mov	r0, r3
 8002c24:	f009 f899 	bl	800bd5a <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e1c6      	b.n	8002fc0 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a7e      	ldr	r2, [pc, #504]	; (8002e30 <HAL_FDCAN_Init+0x220>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d106      	bne.n	8002c4a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002c44:	461a      	mov	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d106      	bne.n	8002c64 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7ff face 	bl	8002200 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699a      	ldr	r2, [r3, #24]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0210 	bic.w	r2, r2, #16
 8002c72:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c74:	f7ff feb0 	bl	80029d8 <HAL_GetTick>
 8002c78:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002c7a:	e014      	b.n	8002ca6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002c7c:	f7ff feac 	bl	80029d8 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b0a      	cmp	r3, #10
 8002c88:	d90d      	bls.n	8002ca6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c90:	f043 0201 	orr.w	r2, r3, #1
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2203      	movs	r2, #3
 8002c9e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e18c      	b.n	8002fc0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	f003 0308 	and.w	r3, r3, #8
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d0e3      	beq.n	8002c7c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	699a      	ldr	r2, [r3, #24]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f042 0201 	orr.w	r2, r2, #1
 8002cc2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cc4:	f7ff fe88 	bl	80029d8 <HAL_GetTick>
 8002cc8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002cca:	e014      	b.n	8002cf6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002ccc:	f7ff fe84 	bl	80029d8 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b0a      	cmp	r3, #10
 8002cd8:	d90d      	bls.n	8002cf6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ce0:	f043 0201 	orr.w	r2, r3, #1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2203      	movs	r2, #3
 8002cee:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e164      	b.n	8002fc0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0e3      	beq.n	8002ccc <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	699a      	ldr	r2, [r3, #24]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0202 	orr.w	r2, r2, #2
 8002d12:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	7c1b      	ldrb	r3, [r3, #16]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d108      	bne.n	8002d2e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	699a      	ldr	r2, [r3, #24]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d2a:	619a      	str	r2, [r3, #24]
 8002d2c:	e007      	b.n	8002d3e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	699a      	ldr	r2, [r3, #24]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d3c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	7c5b      	ldrb	r3, [r3, #17]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d108      	bne.n	8002d58 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	699a      	ldr	r2, [r3, #24]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d54:	619a      	str	r2, [r3, #24]
 8002d56:	e007      	b.n	8002d68 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	699a      	ldr	r2, [r3, #24]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d66:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	7c9b      	ldrb	r3, [r3, #18]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d108      	bne.n	8002d82 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	699a      	ldr	r2, [r3, #24]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d7e:	619a      	str	r2, [r3, #24]
 8002d80:	e007      	b.n	8002d92 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	699a      	ldr	r2, [r3, #24]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d90:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	699a      	ldr	r2, [r3, #24]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002db6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	691a      	ldr	r2, [r3, #16]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0210 	bic.w	r2, r2, #16
 8002dc6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d108      	bne.n	8002de2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	699a      	ldr	r2, [r3, #24]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0204 	orr.w	r2, r2, #4
 8002dde:	619a      	str	r2, [r3, #24]
 8002de0:	e030      	b.n	8002e44 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d02c      	beq.n	8002e44 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d020      	beq.n	8002e34 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	699a      	ldr	r2, [r3, #24]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e00:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	691a      	ldr	r2, [r3, #16]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f042 0210 	orr.w	r2, r2, #16
 8002e10:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	2b03      	cmp	r3, #3
 8002e18:	d114      	bne.n	8002e44 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	699a      	ldr	r2, [r3, #24]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f042 0220 	orr.w	r2, r2, #32
 8002e28:	619a      	str	r2, [r3, #24]
 8002e2a:	e00b      	b.n	8002e44 <HAL_FDCAN_Init+0x234>
 8002e2c:	0800d4b4 	.word	0x0800d4b4
 8002e30:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	699a      	ldr	r2, [r3, #24]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 0220 	orr.w	r2, r2, #32
 8002e42:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	69db      	ldr	r3, [r3, #28]
 8002e50:	3b01      	subs	r3, #1
 8002e52:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002e54:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002e5c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	3b01      	subs	r3, #1
 8002e66:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002e6c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002e6e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e78:	d115      	bne.n	8002ea6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e84:	3b01      	subs	r3, #1
 8002e86:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002e88:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8002e92:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8002ea2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002ea4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00a      	beq.n	8002ec4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ecc:	4413      	add	r3, r2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d011      	beq.n	8002ef6 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002eda:	f023 0107 	bic.w	r1, r3, #7
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	3360      	adds	r3, #96	; 0x60
 8002ee6:	443b      	add	r3, r7
 8002ee8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d011      	beq.n	8002f22 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002f06:	f023 0107 	bic.w	r1, r3, #7
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	3360      	adds	r3, #96	; 0x60
 8002f12:	443b      	add	r3, r7
 8002f14:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d012      	beq.n	8002f50 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002f32:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	3360      	adds	r3, #96	; 0x60
 8002f3e:	443b      	add	r3, r7
 8002f40:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002f44:	011a      	lsls	r2, r3, #4
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d012      	beq.n	8002f7e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002f60:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	3360      	adds	r3, #96	; 0x60
 8002f6c:	443b      	add	r3, r7
 8002f6e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002f72:	021a      	lsls	r2, r3, #8
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a11      	ldr	r2, [pc, #68]	; (8002fc8 <HAL_FDCAN_Init+0x3b8>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d107      	bne.n	8002f98 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	689a      	ldr	r2, [r3, #8]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f022 0203 	bic.w	r2, r2, #3
 8002f96:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 f80b 	bl	8002fcc <FDCAN_CalcultateRamBlockAddresses>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8002fbc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3760      	adds	r7, #96	; 0x60
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	4000a000 	.word	0x4000a000

08002fcc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002fe2:	4ba7      	ldr	r3, [pc, #668]	; (8003280 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	68ba      	ldr	r2, [r7, #8]
 8002fe8:	0091      	lsls	r1, r2, #2
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	6812      	ldr	r2, [r2, #0]
 8002fee:	430b      	orrs	r3, r1
 8002ff0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ffc:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003004:	041a      	lsls	r2, r3, #16
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	430a      	orrs	r2, r1
 800300c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	4413      	add	r3, r2
 8003018:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003022:	4b97      	ldr	r3, [pc, #604]	; (8003280 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003024:	4013      	ands	r3, r2
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	0091      	lsls	r1, r2, #2
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6812      	ldr	r2, [r2, #0]
 800302e:	430b      	orrs	r3, r1
 8003030:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003044:	041a      	lsls	r2, r3, #16
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	4413      	add	r3, r2
 800305a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003064:	4b86      	ldr	r3, [pc, #536]	; (8003280 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003066:	4013      	ands	r3, r2
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	0091      	lsls	r1, r2, #2
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	6812      	ldr	r2, [r2, #0]
 8003070:	430b      	orrs	r3, r1
 8003072:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800307e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	041a      	lsls	r2, r3, #16
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800309a:	fb02 f303 	mul.w	r3, r2, r3
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	4413      	add	r3, r2
 80030a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80030ac:	4b74      	ldr	r3, [pc, #464]	; (8003280 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80030ae:	4013      	ands	r3, r2
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	0091      	lsls	r1, r2, #2
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	6812      	ldr	r2, [r2, #0]
 80030b8:	430b      	orrs	r3, r1
 80030ba:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80030c6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ce:	041a      	lsls	r2, r3, #16
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80030e2:	fb02 f303 	mul.w	r3, r2, r3
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	4413      	add	r3, r2
 80030ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80030f4:	4b62      	ldr	r3, [pc, #392]	; (8003280 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80030f6:	4013      	ands	r3, r2
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	0091      	lsls	r1, r2, #2
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6812      	ldr	r2, [r2, #0]
 8003100:	430b      	orrs	r3, r1
 8003102:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800310e:	fb02 f303 	mul.w	r3, r2, r3
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	4413      	add	r3, r2
 8003116:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003120:	4b57      	ldr	r3, [pc, #348]	; (8003280 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003122:	4013      	ands	r3, r2
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	0091      	lsls	r1, r2, #2
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6812      	ldr	r2, [r2, #0]
 800312c:	430b      	orrs	r3, r1
 800312e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800313a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003142:	041a      	lsls	r2, r3, #16
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	430a      	orrs	r2, r1
 800314a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	68ba      	ldr	r2, [r7, #8]
 8003156:	4413      	add	r3, r2
 8003158:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003162:	4b47      	ldr	r3, [pc, #284]	; (8003280 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003164:	4013      	ands	r3, r2
 8003166:	68ba      	ldr	r2, [r7, #8]
 8003168:	0091      	lsls	r1, r2, #2
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	6812      	ldr	r2, [r2, #0]
 800316e:	430b      	orrs	r3, r1
 8003170:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800317c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003184:	041a      	lsls	r2, r3, #16
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003198:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031a0:	061a      	lsls	r2, r3, #24
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031b0:	4b34      	ldr	r3, [pc, #208]	; (8003284 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80031b2:	4413      	add	r3, r2
 80031b4:	009a      	lsls	r2, r3, #2
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	441a      	add	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	441a      	add	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80031e6:	fb01 f303 	mul.w	r3, r1, r3
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	441a      	add	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80031fe:	fb01 f303 	mul.w	r3, r1, r3
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	441a      	add	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8003216:	fb01 f303 	mul.w	r3, r1, r3
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	441a      	add	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	441a      	add	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003246:	fb01 f303 	mul.w	r3, r1, r3
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	441a      	add	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003262:	fb01 f303 	mul.w	r3, r1, r3
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	441a      	add	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003276:	4a04      	ldr	r2, [pc, #16]	; (8003288 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d915      	bls.n	80032a8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800327c:	e006      	b.n	800328c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800327e:	bf00      	nop
 8003280:	ffff0003 	.word	0xffff0003
 8003284:	10002b00 	.word	0x10002b00
 8003288:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003292:	f043 0220 	orr.w	r2, r3, #32
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2203      	movs	r2, #3
 80032a0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e010      	b.n	80032ca <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	e005      	b.n	80032bc <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	3304      	adds	r3, #4
 80032ba:	60fb      	str	r3, [r7, #12]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d3f3      	bcc.n	80032b0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3714      	adds	r7, #20
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop

080032d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032d8:	b480      	push	{r7}
 80032da:	b089      	sub	sp, #36	; 0x24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80032e6:	4b89      	ldr	r3, [pc, #548]	; (800350c <HAL_GPIO_Init+0x234>)
 80032e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80032ea:	e194      	b.n	8003616 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	2101      	movs	r1, #1
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	fa01 f303 	lsl.w	r3, r1, r3
 80032f8:	4013      	ands	r3, r2
 80032fa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 8186 	beq.w	8003610 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f003 0303 	and.w	r3, r3, #3
 800330c:	2b01      	cmp	r3, #1
 800330e:	d005      	beq.n	800331c <HAL_GPIO_Init+0x44>
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 0303 	and.w	r3, r3, #3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d130      	bne.n	800337e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	2203      	movs	r2, #3
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	43db      	mvns	r3, r3
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	4013      	ands	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	68da      	ldr	r2, [r3, #12]
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	4313      	orrs	r3, r2
 8003344:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003352:	2201      	movs	r2, #1
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	43db      	mvns	r3, r3
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	4013      	ands	r3, r2
 8003360:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	091b      	lsrs	r3, r3, #4
 8003368:	f003 0201 	and.w	r2, r3, #1
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	fa02 f303 	lsl.w	r3, r2, r3
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	4313      	orrs	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	2b03      	cmp	r3, #3
 8003388:	d017      	beq.n	80033ba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	2203      	movs	r2, #3
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	43db      	mvns	r3, r3
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	4013      	ands	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	689a      	ldr	r2, [r3, #8]
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f003 0303 	and.w	r3, r3, #3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d123      	bne.n	800340e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	08da      	lsrs	r2, r3, #3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	3208      	adds	r2, #8
 80033ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	f003 0307 	and.w	r3, r3, #7
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	220f      	movs	r2, #15
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	43db      	mvns	r3, r3
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	4013      	ands	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	691a      	ldr	r2, [r3, #16]
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	fa02 f303 	lsl.w	r3, r2, r3
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	08da      	lsrs	r2, r3, #3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3208      	adds	r2, #8
 8003408:	69b9      	ldr	r1, [r7, #24]
 800340a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	2203      	movs	r2, #3
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	43db      	mvns	r3, r3
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	4013      	ands	r3, r2
 8003424:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f003 0203 	and.w	r2, r3, #3
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	4313      	orrs	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800344a:	2b00      	cmp	r3, #0
 800344c:	f000 80e0 	beq.w	8003610 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003450:	4b2f      	ldr	r3, [pc, #188]	; (8003510 <HAL_GPIO_Init+0x238>)
 8003452:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003456:	4a2e      	ldr	r2, [pc, #184]	; (8003510 <HAL_GPIO_Init+0x238>)
 8003458:	f043 0302 	orr.w	r3, r3, #2
 800345c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003460:	4b2b      	ldr	r3, [pc, #172]	; (8003510 <HAL_GPIO_Init+0x238>)
 8003462:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	60fb      	str	r3, [r7, #12]
 800346c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800346e:	4a29      	ldr	r2, [pc, #164]	; (8003514 <HAL_GPIO_Init+0x23c>)
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	089b      	lsrs	r3, r3, #2
 8003474:	3302      	adds	r3, #2
 8003476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800347a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	220f      	movs	r2, #15
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	43db      	mvns	r3, r3
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	4013      	ands	r3, r2
 8003490:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a20      	ldr	r2, [pc, #128]	; (8003518 <HAL_GPIO_Init+0x240>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d052      	beq.n	8003540 <HAL_GPIO_Init+0x268>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a1f      	ldr	r2, [pc, #124]	; (800351c <HAL_GPIO_Init+0x244>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d031      	beq.n	8003506 <HAL_GPIO_Init+0x22e>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a1e      	ldr	r2, [pc, #120]	; (8003520 <HAL_GPIO_Init+0x248>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d02b      	beq.n	8003502 <HAL_GPIO_Init+0x22a>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a1d      	ldr	r2, [pc, #116]	; (8003524 <HAL_GPIO_Init+0x24c>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d025      	beq.n	80034fe <HAL_GPIO_Init+0x226>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a1c      	ldr	r2, [pc, #112]	; (8003528 <HAL_GPIO_Init+0x250>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d01f      	beq.n	80034fa <HAL_GPIO_Init+0x222>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a1b      	ldr	r2, [pc, #108]	; (800352c <HAL_GPIO_Init+0x254>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d019      	beq.n	80034f6 <HAL_GPIO_Init+0x21e>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a1a      	ldr	r2, [pc, #104]	; (8003530 <HAL_GPIO_Init+0x258>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d013      	beq.n	80034f2 <HAL_GPIO_Init+0x21a>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a19      	ldr	r2, [pc, #100]	; (8003534 <HAL_GPIO_Init+0x25c>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d00d      	beq.n	80034ee <HAL_GPIO_Init+0x216>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a18      	ldr	r2, [pc, #96]	; (8003538 <HAL_GPIO_Init+0x260>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d007      	beq.n	80034ea <HAL_GPIO_Init+0x212>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a17      	ldr	r2, [pc, #92]	; (800353c <HAL_GPIO_Init+0x264>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d101      	bne.n	80034e6 <HAL_GPIO_Init+0x20e>
 80034e2:	2309      	movs	r3, #9
 80034e4:	e02d      	b.n	8003542 <HAL_GPIO_Init+0x26a>
 80034e6:	230a      	movs	r3, #10
 80034e8:	e02b      	b.n	8003542 <HAL_GPIO_Init+0x26a>
 80034ea:	2308      	movs	r3, #8
 80034ec:	e029      	b.n	8003542 <HAL_GPIO_Init+0x26a>
 80034ee:	2307      	movs	r3, #7
 80034f0:	e027      	b.n	8003542 <HAL_GPIO_Init+0x26a>
 80034f2:	2306      	movs	r3, #6
 80034f4:	e025      	b.n	8003542 <HAL_GPIO_Init+0x26a>
 80034f6:	2305      	movs	r3, #5
 80034f8:	e023      	b.n	8003542 <HAL_GPIO_Init+0x26a>
 80034fa:	2304      	movs	r3, #4
 80034fc:	e021      	b.n	8003542 <HAL_GPIO_Init+0x26a>
 80034fe:	2303      	movs	r3, #3
 8003500:	e01f      	b.n	8003542 <HAL_GPIO_Init+0x26a>
 8003502:	2302      	movs	r3, #2
 8003504:	e01d      	b.n	8003542 <HAL_GPIO_Init+0x26a>
 8003506:	2301      	movs	r3, #1
 8003508:	e01b      	b.n	8003542 <HAL_GPIO_Init+0x26a>
 800350a:	bf00      	nop
 800350c:	58000080 	.word	0x58000080
 8003510:	58024400 	.word	0x58024400
 8003514:	58000400 	.word	0x58000400
 8003518:	58020000 	.word	0x58020000
 800351c:	58020400 	.word	0x58020400
 8003520:	58020800 	.word	0x58020800
 8003524:	58020c00 	.word	0x58020c00
 8003528:	58021000 	.word	0x58021000
 800352c:	58021400 	.word	0x58021400
 8003530:	58021800 	.word	0x58021800
 8003534:	58021c00 	.word	0x58021c00
 8003538:	58022000 	.word	0x58022000
 800353c:	58022400 	.word	0x58022400
 8003540:	2300      	movs	r3, #0
 8003542:	69fa      	ldr	r2, [r7, #28]
 8003544:	f002 0203 	and.w	r2, r2, #3
 8003548:	0092      	lsls	r2, r2, #2
 800354a:	4093      	lsls	r3, r2
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	4313      	orrs	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003552:	4938      	ldr	r1, [pc, #224]	; (8003634 <HAL_GPIO_Init+0x35c>)
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	089b      	lsrs	r3, r3, #2
 8003558:	3302      	adds	r3, #2
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	43db      	mvns	r3, r3
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	4013      	ands	r3, r2
 8003570:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	4313      	orrs	r3, r2
 8003584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003586:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800358e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	43db      	mvns	r3, r3
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	4013      	ands	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80035b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	43db      	mvns	r3, r3
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	4013      	ands	r3, r2
 80035ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	4313      	orrs	r3, r2
 80035de:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	43db      	mvns	r3, r3
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	4013      	ands	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	4313      	orrs	r3, r2
 8003608:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	3301      	adds	r3, #1
 8003614:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	fa22 f303 	lsr.w	r3, r2, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	f47f ae63 	bne.w	80032ec <HAL_GPIO_Init+0x14>
  }
}
 8003626:	bf00      	nop
 8003628:	bf00      	nop
 800362a:	3724      	adds	r7, #36	; 0x24
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	58000400 	.word	0x58000400

08003638 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	460b      	mov	r3, r1
 8003642:	807b      	strh	r3, [r7, #2]
 8003644:	4613      	mov	r3, r2
 8003646:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003648:	787b      	ldrb	r3, [r7, #1]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800364e:	887a      	ldrh	r2, [r7, #2]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003654:	e003      	b.n	800365e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003656:	887b      	ldrh	r3, [r7, #2]
 8003658:	041a      	lsls	r2, r3, #16
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	619a      	str	r2, [r3, #24]
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
	...

0800366c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003674:	4a08      	ldr	r2, [pc, #32]	; (8003698 <HAL_HSEM_FastTake+0x2c>)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	3320      	adds	r3, #32
 800367a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800367e:	4a07      	ldr	r2, [pc, #28]	; (800369c <HAL_HSEM_FastTake+0x30>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d101      	bne.n	8003688 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003684:	2300      	movs	r3, #0
 8003686:	e000      	b.n	800368a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
}
 800368a:	4618      	mov	r0, r3
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	58026400 	.word	0x58026400
 800369c:	80000300 	.word	0x80000300

080036a0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80036aa:	4906      	ldr	r1, [pc, #24]	; (80036c4 <HAL_HSEM_Release+0x24>)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	58026400 	.word	0x58026400

080036c8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80036d0:	4b29      	ldr	r3, [pc, #164]	; (8003778 <HAL_PWREx_ConfigSupply+0xb0>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	2b06      	cmp	r3, #6
 80036da:	d00a      	beq.n	80036f2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80036dc:	4b26      	ldr	r3, [pc, #152]	; (8003778 <HAL_PWREx_ConfigSupply+0xb0>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d001      	beq.n	80036ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e040      	b.n	8003770 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80036ee:	2300      	movs	r3, #0
 80036f0:	e03e      	b.n	8003770 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80036f2:	4b21      	ldr	r3, [pc, #132]	; (8003778 <HAL_PWREx_ConfigSupply+0xb0>)
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80036fa:	491f      	ldr	r1, [pc, #124]	; (8003778 <HAL_PWREx_ConfigSupply+0xb0>)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4313      	orrs	r3, r2
 8003700:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003702:	f7ff f969 	bl	80029d8 <HAL_GetTick>
 8003706:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003708:	e009      	b.n	800371e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800370a:	f7ff f965 	bl	80029d8 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003718:	d901      	bls.n	800371e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e028      	b.n	8003770 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800371e:	4b16      	ldr	r3, [pc, #88]	; (8003778 <HAL_PWREx_ConfigSupply+0xb0>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800372a:	d1ee      	bne.n	800370a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b1e      	cmp	r3, #30
 8003730:	d008      	beq.n	8003744 <HAL_PWREx_ConfigSupply+0x7c>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b2e      	cmp	r3, #46	; 0x2e
 8003736:	d005      	beq.n	8003744 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b1d      	cmp	r3, #29
 800373c:	d002      	beq.n	8003744 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b2d      	cmp	r3, #45	; 0x2d
 8003742:	d114      	bne.n	800376e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003744:	f7ff f948 	bl	80029d8 <HAL_GetTick>
 8003748:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800374a:	e009      	b.n	8003760 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800374c:	f7ff f944 	bl	80029d8 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800375a:	d901      	bls.n	8003760 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e007      	b.n	8003770 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003760:	4b05      	ldr	r3, [pc, #20]	; (8003778 <HAL_PWREx_ConfigSupply+0xb0>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800376c:	d1ee      	bne.n	800374c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	58024800 	.word	0x58024800

0800377c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b08c      	sub	sp, #48	; 0x30
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d102      	bne.n	8003790 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	f000 bc1d 	b.w	8003fca <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 8087 	beq.w	80038ac <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800379e:	4b99      	ldr	r3, [pc, #612]	; (8003a04 <HAL_RCC_OscConfig+0x288>)
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80037a8:	4b96      	ldr	r3, [pc, #600]	; (8003a04 <HAL_RCC_OscConfig+0x288>)
 80037aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ac:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80037ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b0:	2b10      	cmp	r3, #16
 80037b2:	d007      	beq.n	80037c4 <HAL_RCC_OscConfig+0x48>
 80037b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b6:	2b18      	cmp	r3, #24
 80037b8:	d110      	bne.n	80037dc <HAL_RCC_OscConfig+0x60>
 80037ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037bc:	f003 0303 	and.w	r3, r3, #3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d10b      	bne.n	80037dc <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c4:	4b8f      	ldr	r3, [pc, #572]	; (8003a04 <HAL_RCC_OscConfig+0x288>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d06c      	beq.n	80038aa <HAL_RCC_OscConfig+0x12e>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d168      	bne.n	80038aa <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e3f6      	b.n	8003fca <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e4:	d106      	bne.n	80037f4 <HAL_RCC_OscConfig+0x78>
 80037e6:	4b87      	ldr	r3, [pc, #540]	; (8003a04 <HAL_RCC_OscConfig+0x288>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a86      	ldr	r2, [pc, #536]	; (8003a04 <HAL_RCC_OscConfig+0x288>)
 80037ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	e02e      	b.n	8003852 <HAL_RCC_OscConfig+0xd6>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10c      	bne.n	8003816 <HAL_RCC_OscConfig+0x9a>
 80037fc:	4b81      	ldr	r3, [pc, #516]	; (8003a04 <HAL_RCC_OscConfig+0x288>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a80      	ldr	r2, [pc, #512]	; (8003a04 <HAL_RCC_OscConfig+0x288>)
 8003802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003806:	6013      	str	r3, [r2, #0]
 8003808:	4b7e      	ldr	r3, [pc, #504]	; (8003a04 <HAL_RCC_OscConfig+0x288>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a7d      	ldr	r2, [pc, #500]	; (8003a04 <HAL_RCC_OscConfig+0x288>)
 800380e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003812:	6013      	str	r3, [r2, #0]
 8003814:	e01d      	b.n	8003852 <HAL_RCC_OscConfig+0xd6>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800381e:	d10c      	bne.n	800383a <HAL_RCC_OscConfig+0xbe>
 8003820:	4b78      	ldr	r3, [pc, #480]	; (8003a04 <HAL_RCC_OscConfig+0x288>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a77      	ldr	r2, [pc, #476]	; (8003a04 <HAL_RCC_OscConfig+0x288>)
 8003826:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800382a:	6013      	str	r3, [r2, #0]
 800382c:	4b75      	ldr	r3, [pc, #468]	; (8003a04 <HAL_RCC_OscConfig+0x288>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a74      	ldr	r2, [pc, #464]	; (8003a04 <HAL_RCC_OscConfig+0x288>)
 8003832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003836:	6013      	str	r3, [r2, #0]
 8003838:	e00b      	b.n	8003852 <HAL_RCC_OscConfig+0xd6>
 800383a:	4b72      	ldr	r3, [pc, #456]	; (8003a04 <HAL_RCC_OscConfig+0x288>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a71      	ldr	r2, [pc, #452]	; (8003a04 <HAL_RCC_OscConfig+0x288>)
 8003840:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003844:	6013      	str	r3, [r2, #0]
 8003846:	4b6f      	ldr	r3, [pc, #444]	; (8003a04 <HAL_RCC_OscConfig+0x288>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a6e      	ldr	r2, [pc, #440]	; (8003a04 <HAL_RCC_OscConfig+0x288>)
 800384c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003850:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d013      	beq.n	8003882 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385a:	f7ff f8bd 	bl	80029d8 <HAL_GetTick>
 800385e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003860:	e008      	b.n	8003874 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003862:	f7ff f8b9 	bl	80029d8 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b64      	cmp	r3, #100	; 0x64
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e3aa      	b.n	8003fca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003874:	4b63      	ldr	r3, [pc, #396]	; (8003a04 <HAL_RCC_OscConfig+0x288>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0f0      	beq.n	8003862 <HAL_RCC_OscConfig+0xe6>
 8003880:	e014      	b.n	80038ac <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003882:	f7ff f8a9 	bl	80029d8 <HAL_GetTick>
 8003886:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003888:	e008      	b.n	800389c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800388a:	f7ff f8a5 	bl	80029d8 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b64      	cmp	r3, #100	; 0x64
 8003896:	d901      	bls.n	800389c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e396      	b.n	8003fca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800389c:	4b59      	ldr	r3, [pc, #356]	; (8003a04 <HAL_RCC_OscConfig+0x288>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1f0      	bne.n	800388a <HAL_RCC_OscConfig+0x10e>
 80038a8:	e000      	b.n	80038ac <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038aa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 80cb 	beq.w	8003a50 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038ba:	4b52      	ldr	r3, [pc, #328]	; (8003a04 <HAL_RCC_OscConfig+0x288>)
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038c2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038c4:	4b4f      	ldr	r3, [pc, #316]	; (8003a04 <HAL_RCC_OscConfig+0x288>)
 80038c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d007      	beq.n	80038e0 <HAL_RCC_OscConfig+0x164>
 80038d0:	6a3b      	ldr	r3, [r7, #32]
 80038d2:	2b18      	cmp	r3, #24
 80038d4:	d156      	bne.n	8003984 <HAL_RCC_OscConfig+0x208>
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	f003 0303 	and.w	r3, r3, #3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d151      	bne.n	8003984 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038e0:	4b48      	ldr	r3, [pc, #288]	; (8003a04 <HAL_RCC_OscConfig+0x288>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d005      	beq.n	80038f8 <HAL_RCC_OscConfig+0x17c>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e368      	b.n	8003fca <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80038f8:	4b42      	ldr	r3, [pc, #264]	; (8003a04 <HAL_RCC_OscConfig+0x288>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f023 0219 	bic.w	r2, r3, #25
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	493f      	ldr	r1, [pc, #252]	; (8003a04 <HAL_RCC_OscConfig+0x288>)
 8003906:	4313      	orrs	r3, r2
 8003908:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800390a:	f7ff f865 	bl	80029d8 <HAL_GetTick>
 800390e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003910:	e008      	b.n	8003924 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003912:	f7ff f861 	bl	80029d8 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d901      	bls.n	8003924 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e352      	b.n	8003fca <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003924:	4b37      	ldr	r3, [pc, #220]	; (8003a04 <HAL_RCC_OscConfig+0x288>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0304 	and.w	r3, r3, #4
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0f0      	beq.n	8003912 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003930:	f7ff f882 	bl	8002a38 <HAL_GetREVID>
 8003934:	4603      	mov	r3, r0
 8003936:	f241 0203 	movw	r2, #4099	; 0x1003
 800393a:	4293      	cmp	r3, r2
 800393c:	d817      	bhi.n	800396e <HAL_RCC_OscConfig+0x1f2>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	2b40      	cmp	r3, #64	; 0x40
 8003944:	d108      	bne.n	8003958 <HAL_RCC_OscConfig+0x1dc>
 8003946:	4b2f      	ldr	r3, [pc, #188]	; (8003a04 <HAL_RCC_OscConfig+0x288>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800394e:	4a2d      	ldr	r2, [pc, #180]	; (8003a04 <HAL_RCC_OscConfig+0x288>)
 8003950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003954:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003956:	e07b      	b.n	8003a50 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003958:	4b2a      	ldr	r3, [pc, #168]	; (8003a04 <HAL_RCC_OscConfig+0x288>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	031b      	lsls	r3, r3, #12
 8003966:	4927      	ldr	r1, [pc, #156]	; (8003a04 <HAL_RCC_OscConfig+0x288>)
 8003968:	4313      	orrs	r3, r2
 800396a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800396c:	e070      	b.n	8003a50 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800396e:	4b25      	ldr	r3, [pc, #148]	; (8003a04 <HAL_RCC_OscConfig+0x288>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	061b      	lsls	r3, r3, #24
 800397c:	4921      	ldr	r1, [pc, #132]	; (8003a04 <HAL_RCC_OscConfig+0x288>)
 800397e:	4313      	orrs	r3, r2
 8003980:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003982:	e065      	b.n	8003a50 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d048      	beq.n	8003a1e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800398c:	4b1d      	ldr	r3, [pc, #116]	; (8003a04 <HAL_RCC_OscConfig+0x288>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f023 0219 	bic.w	r2, r3, #25
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	491a      	ldr	r1, [pc, #104]	; (8003a04 <HAL_RCC_OscConfig+0x288>)
 800399a:	4313      	orrs	r3, r2
 800399c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399e:	f7ff f81b 	bl	80029d8 <HAL_GetTick>
 80039a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039a4:	e008      	b.n	80039b8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039a6:	f7ff f817 	bl	80029d8 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d901      	bls.n	80039b8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e308      	b.n	8003fca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039b8:	4b12      	ldr	r3, [pc, #72]	; (8003a04 <HAL_RCC_OscConfig+0x288>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d0f0      	beq.n	80039a6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c4:	f7ff f838 	bl	8002a38 <HAL_GetREVID>
 80039c8:	4603      	mov	r3, r0
 80039ca:	f241 0203 	movw	r2, #4099	; 0x1003
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d81a      	bhi.n	8003a08 <HAL_RCC_OscConfig+0x28c>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	2b40      	cmp	r3, #64	; 0x40
 80039d8:	d108      	bne.n	80039ec <HAL_RCC_OscConfig+0x270>
 80039da:	4b0a      	ldr	r3, [pc, #40]	; (8003a04 <HAL_RCC_OscConfig+0x288>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80039e2:	4a08      	ldr	r2, [pc, #32]	; (8003a04 <HAL_RCC_OscConfig+0x288>)
 80039e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039e8:	6053      	str	r3, [r2, #4]
 80039ea:	e031      	b.n	8003a50 <HAL_RCC_OscConfig+0x2d4>
 80039ec:	4b05      	ldr	r3, [pc, #20]	; (8003a04 <HAL_RCC_OscConfig+0x288>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	031b      	lsls	r3, r3, #12
 80039fa:	4902      	ldr	r1, [pc, #8]	; (8003a04 <HAL_RCC_OscConfig+0x288>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	604b      	str	r3, [r1, #4]
 8003a00:	e026      	b.n	8003a50 <HAL_RCC_OscConfig+0x2d4>
 8003a02:	bf00      	nop
 8003a04:	58024400 	.word	0x58024400
 8003a08:	4b9a      	ldr	r3, [pc, #616]	; (8003c74 <HAL_RCC_OscConfig+0x4f8>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	061b      	lsls	r3, r3, #24
 8003a16:	4997      	ldr	r1, [pc, #604]	; (8003c74 <HAL_RCC_OscConfig+0x4f8>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	604b      	str	r3, [r1, #4]
 8003a1c:	e018      	b.n	8003a50 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a1e:	4b95      	ldr	r3, [pc, #596]	; (8003c74 <HAL_RCC_OscConfig+0x4f8>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a94      	ldr	r2, [pc, #592]	; (8003c74 <HAL_RCC_OscConfig+0x4f8>)
 8003a24:	f023 0301 	bic.w	r3, r3, #1
 8003a28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2a:	f7fe ffd5 	bl	80029d8 <HAL_GetTick>
 8003a2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a32:	f7fe ffd1 	bl	80029d8 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e2c2      	b.n	8003fca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a44:	4b8b      	ldr	r3, [pc, #556]	; (8003c74 <HAL_RCC_OscConfig+0x4f8>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1f0      	bne.n	8003a32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0310 	and.w	r3, r3, #16
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 80a9 	beq.w	8003bb0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a5e:	4b85      	ldr	r3, [pc, #532]	; (8003c74 <HAL_RCC_OscConfig+0x4f8>)
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a66:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a68:	4b82      	ldr	r3, [pc, #520]	; (8003c74 <HAL_RCC_OscConfig+0x4f8>)
 8003a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	2b08      	cmp	r3, #8
 8003a72:	d007      	beq.n	8003a84 <HAL_RCC_OscConfig+0x308>
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	2b18      	cmp	r3, #24
 8003a78:	d13a      	bne.n	8003af0 <HAL_RCC_OscConfig+0x374>
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f003 0303 	and.w	r3, r3, #3
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d135      	bne.n	8003af0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a84:	4b7b      	ldr	r3, [pc, #492]	; (8003c74 <HAL_RCC_OscConfig+0x4f8>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d005      	beq.n	8003a9c <HAL_RCC_OscConfig+0x320>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	69db      	ldr	r3, [r3, #28]
 8003a94:	2b80      	cmp	r3, #128	; 0x80
 8003a96:	d001      	beq.n	8003a9c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e296      	b.n	8003fca <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a9c:	f7fe ffcc 	bl	8002a38 <HAL_GetREVID>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	f241 0203 	movw	r2, #4099	; 0x1003
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d817      	bhi.n	8003ada <HAL_RCC_OscConfig+0x35e>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	2b20      	cmp	r3, #32
 8003ab0:	d108      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x348>
 8003ab2:	4b70      	ldr	r3, [pc, #448]	; (8003c74 <HAL_RCC_OscConfig+0x4f8>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003aba:	4a6e      	ldr	r2, [pc, #440]	; (8003c74 <HAL_RCC_OscConfig+0x4f8>)
 8003abc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ac0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ac2:	e075      	b.n	8003bb0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ac4:	4b6b      	ldr	r3, [pc, #428]	; (8003c74 <HAL_RCC_OscConfig+0x4f8>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	069b      	lsls	r3, r3, #26
 8003ad2:	4968      	ldr	r1, [pc, #416]	; (8003c74 <HAL_RCC_OscConfig+0x4f8>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ad8:	e06a      	b.n	8003bb0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ada:	4b66      	ldr	r3, [pc, #408]	; (8003c74 <HAL_RCC_OscConfig+0x4f8>)
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	061b      	lsls	r3, r3, #24
 8003ae8:	4962      	ldr	r1, [pc, #392]	; (8003c74 <HAL_RCC_OscConfig+0x4f8>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003aee:	e05f      	b.n	8003bb0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	69db      	ldr	r3, [r3, #28]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d042      	beq.n	8003b7e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003af8:	4b5e      	ldr	r3, [pc, #376]	; (8003c74 <HAL_RCC_OscConfig+0x4f8>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a5d      	ldr	r2, [pc, #372]	; (8003c74 <HAL_RCC_OscConfig+0x4f8>)
 8003afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b04:	f7fe ff68 	bl	80029d8 <HAL_GetTick>
 8003b08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003b0c:	f7fe ff64 	bl	80029d8 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e255      	b.n	8003fca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b1e:	4b55      	ldr	r3, [pc, #340]	; (8003c74 <HAL_RCC_OscConfig+0x4f8>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0f0      	beq.n	8003b0c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b2a:	f7fe ff85 	bl	8002a38 <HAL_GetREVID>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d817      	bhi.n	8003b68 <HAL_RCC_OscConfig+0x3ec>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	2b20      	cmp	r3, #32
 8003b3e:	d108      	bne.n	8003b52 <HAL_RCC_OscConfig+0x3d6>
 8003b40:	4b4c      	ldr	r3, [pc, #304]	; (8003c74 <HAL_RCC_OscConfig+0x4f8>)
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003b48:	4a4a      	ldr	r2, [pc, #296]	; (8003c74 <HAL_RCC_OscConfig+0x4f8>)
 8003b4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b4e:	6053      	str	r3, [r2, #4]
 8003b50:	e02e      	b.n	8003bb0 <HAL_RCC_OscConfig+0x434>
 8003b52:	4b48      	ldr	r3, [pc, #288]	; (8003c74 <HAL_RCC_OscConfig+0x4f8>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	069b      	lsls	r3, r3, #26
 8003b60:	4944      	ldr	r1, [pc, #272]	; (8003c74 <HAL_RCC_OscConfig+0x4f8>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	604b      	str	r3, [r1, #4]
 8003b66:	e023      	b.n	8003bb0 <HAL_RCC_OscConfig+0x434>
 8003b68:	4b42      	ldr	r3, [pc, #264]	; (8003c74 <HAL_RCC_OscConfig+0x4f8>)
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	061b      	lsls	r3, r3, #24
 8003b76:	493f      	ldr	r1, [pc, #252]	; (8003c74 <HAL_RCC_OscConfig+0x4f8>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	60cb      	str	r3, [r1, #12]
 8003b7c:	e018      	b.n	8003bb0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003b7e:	4b3d      	ldr	r3, [pc, #244]	; (8003c74 <HAL_RCC_OscConfig+0x4f8>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a3c      	ldr	r2, [pc, #240]	; (8003c74 <HAL_RCC_OscConfig+0x4f8>)
 8003b84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8a:	f7fe ff25 	bl	80029d8 <HAL_GetTick>
 8003b8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003b90:	e008      	b.n	8003ba4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003b92:	f7fe ff21 	bl	80029d8 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e212      	b.n	8003fca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ba4:	4b33      	ldr	r3, [pc, #204]	; (8003c74 <HAL_RCC_OscConfig+0x4f8>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1f0      	bne.n	8003b92 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0308 	and.w	r3, r3, #8
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d036      	beq.n	8003c2a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d019      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bc4:	4b2b      	ldr	r3, [pc, #172]	; (8003c74 <HAL_RCC_OscConfig+0x4f8>)
 8003bc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bc8:	4a2a      	ldr	r2, [pc, #168]	; (8003c74 <HAL_RCC_OscConfig+0x4f8>)
 8003bca:	f043 0301 	orr.w	r3, r3, #1
 8003bce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd0:	f7fe ff02 	bl	80029d8 <HAL_GetTick>
 8003bd4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bd8:	f7fe fefe 	bl	80029d8 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e1ef      	b.n	8003fca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003bea:	4b22      	ldr	r3, [pc, #136]	; (8003c74 <HAL_RCC_OscConfig+0x4f8>)
 8003bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0f0      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x45c>
 8003bf6:	e018      	b.n	8003c2a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bf8:	4b1e      	ldr	r3, [pc, #120]	; (8003c74 <HAL_RCC_OscConfig+0x4f8>)
 8003bfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bfc:	4a1d      	ldr	r2, [pc, #116]	; (8003c74 <HAL_RCC_OscConfig+0x4f8>)
 8003bfe:	f023 0301 	bic.w	r3, r3, #1
 8003c02:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c04:	f7fe fee8 	bl	80029d8 <HAL_GetTick>
 8003c08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c0c:	f7fe fee4 	bl	80029d8 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e1d5      	b.n	8003fca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c1e:	4b15      	ldr	r3, [pc, #84]	; (8003c74 <HAL_RCC_OscConfig+0x4f8>)
 8003c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1f0      	bne.n	8003c0c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0320 	and.w	r3, r3, #32
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d039      	beq.n	8003caa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d01c      	beq.n	8003c78 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c3e:	4b0d      	ldr	r3, [pc, #52]	; (8003c74 <HAL_RCC_OscConfig+0x4f8>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a0c      	ldr	r2, [pc, #48]	; (8003c74 <HAL_RCC_OscConfig+0x4f8>)
 8003c44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c48:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003c4a:	f7fe fec5 	bl	80029d8 <HAL_GetTick>
 8003c4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003c50:	e008      	b.n	8003c64 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003c52:	f7fe fec1 	bl	80029d8 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e1b2      	b.n	8003fca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003c64:	4b03      	ldr	r3, [pc, #12]	; (8003c74 <HAL_RCC_OscConfig+0x4f8>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d0f0      	beq.n	8003c52 <HAL_RCC_OscConfig+0x4d6>
 8003c70:	e01b      	b.n	8003caa <HAL_RCC_OscConfig+0x52e>
 8003c72:	bf00      	nop
 8003c74:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c78:	4b9b      	ldr	r3, [pc, #620]	; (8003ee8 <HAL_RCC_OscConfig+0x76c>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a9a      	ldr	r2, [pc, #616]	; (8003ee8 <HAL_RCC_OscConfig+0x76c>)
 8003c7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c82:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003c84:	f7fe fea8 	bl	80029d8 <HAL_GetTick>
 8003c88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003c8c:	f7fe fea4 	bl	80029d8 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e195      	b.n	8003fca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003c9e:	4b92      	ldr	r3, [pc, #584]	; (8003ee8 <HAL_RCC_OscConfig+0x76c>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1f0      	bne.n	8003c8c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0304 	and.w	r3, r3, #4
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f000 8081 	beq.w	8003dba <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003cb8:	4b8c      	ldr	r3, [pc, #560]	; (8003eec <HAL_RCC_OscConfig+0x770>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a8b      	ldr	r2, [pc, #556]	; (8003eec <HAL_RCC_OscConfig+0x770>)
 8003cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cc2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cc4:	f7fe fe88 	bl	80029d8 <HAL_GetTick>
 8003cc8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003ccc:	f7fe fe84 	bl	80029d8 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b64      	cmp	r3, #100	; 0x64
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e175      	b.n	8003fca <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cde:	4b83      	ldr	r3, [pc, #524]	; (8003eec <HAL_RCC_OscConfig+0x770>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d0f0      	beq.n	8003ccc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d106      	bne.n	8003d00 <HAL_RCC_OscConfig+0x584>
 8003cf2:	4b7d      	ldr	r3, [pc, #500]	; (8003ee8 <HAL_RCC_OscConfig+0x76c>)
 8003cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf6:	4a7c      	ldr	r2, [pc, #496]	; (8003ee8 <HAL_RCC_OscConfig+0x76c>)
 8003cf8:	f043 0301 	orr.w	r3, r3, #1
 8003cfc:	6713      	str	r3, [r2, #112]	; 0x70
 8003cfe:	e02d      	b.n	8003d5c <HAL_RCC_OscConfig+0x5e0>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10c      	bne.n	8003d22 <HAL_RCC_OscConfig+0x5a6>
 8003d08:	4b77      	ldr	r3, [pc, #476]	; (8003ee8 <HAL_RCC_OscConfig+0x76c>)
 8003d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0c:	4a76      	ldr	r2, [pc, #472]	; (8003ee8 <HAL_RCC_OscConfig+0x76c>)
 8003d0e:	f023 0301 	bic.w	r3, r3, #1
 8003d12:	6713      	str	r3, [r2, #112]	; 0x70
 8003d14:	4b74      	ldr	r3, [pc, #464]	; (8003ee8 <HAL_RCC_OscConfig+0x76c>)
 8003d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d18:	4a73      	ldr	r2, [pc, #460]	; (8003ee8 <HAL_RCC_OscConfig+0x76c>)
 8003d1a:	f023 0304 	bic.w	r3, r3, #4
 8003d1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d20:	e01c      	b.n	8003d5c <HAL_RCC_OscConfig+0x5e0>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	2b05      	cmp	r3, #5
 8003d28:	d10c      	bne.n	8003d44 <HAL_RCC_OscConfig+0x5c8>
 8003d2a:	4b6f      	ldr	r3, [pc, #444]	; (8003ee8 <HAL_RCC_OscConfig+0x76c>)
 8003d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2e:	4a6e      	ldr	r2, [pc, #440]	; (8003ee8 <HAL_RCC_OscConfig+0x76c>)
 8003d30:	f043 0304 	orr.w	r3, r3, #4
 8003d34:	6713      	str	r3, [r2, #112]	; 0x70
 8003d36:	4b6c      	ldr	r3, [pc, #432]	; (8003ee8 <HAL_RCC_OscConfig+0x76c>)
 8003d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3a:	4a6b      	ldr	r2, [pc, #428]	; (8003ee8 <HAL_RCC_OscConfig+0x76c>)
 8003d3c:	f043 0301 	orr.w	r3, r3, #1
 8003d40:	6713      	str	r3, [r2, #112]	; 0x70
 8003d42:	e00b      	b.n	8003d5c <HAL_RCC_OscConfig+0x5e0>
 8003d44:	4b68      	ldr	r3, [pc, #416]	; (8003ee8 <HAL_RCC_OscConfig+0x76c>)
 8003d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d48:	4a67      	ldr	r2, [pc, #412]	; (8003ee8 <HAL_RCC_OscConfig+0x76c>)
 8003d4a:	f023 0301 	bic.w	r3, r3, #1
 8003d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d50:	4b65      	ldr	r3, [pc, #404]	; (8003ee8 <HAL_RCC_OscConfig+0x76c>)
 8003d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d54:	4a64      	ldr	r2, [pc, #400]	; (8003ee8 <HAL_RCC_OscConfig+0x76c>)
 8003d56:	f023 0304 	bic.w	r3, r3, #4
 8003d5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d015      	beq.n	8003d90 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d64:	f7fe fe38 	bl	80029d8 <HAL_GetTick>
 8003d68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d6a:	e00a      	b.n	8003d82 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d6c:	f7fe fe34 	bl	80029d8 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e123      	b.n	8003fca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d82:	4b59      	ldr	r3, [pc, #356]	; (8003ee8 <HAL_RCC_OscConfig+0x76c>)
 8003d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0ee      	beq.n	8003d6c <HAL_RCC_OscConfig+0x5f0>
 8003d8e:	e014      	b.n	8003dba <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d90:	f7fe fe22 	bl	80029d8 <HAL_GetTick>
 8003d94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d96:	e00a      	b.n	8003dae <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d98:	f7fe fe1e 	bl	80029d8 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e10d      	b.n	8003fca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003dae:	4b4e      	ldr	r3, [pc, #312]	; (8003ee8 <HAL_RCC_OscConfig+0x76c>)
 8003db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1ee      	bne.n	8003d98 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f000 8102 	beq.w	8003fc8 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003dc4:	4b48      	ldr	r3, [pc, #288]	; (8003ee8 <HAL_RCC_OscConfig+0x76c>)
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003dcc:	2b18      	cmp	r3, #24
 8003dce:	f000 80bd 	beq.w	8003f4c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	f040 809e 	bne.w	8003f18 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ddc:	4b42      	ldr	r3, [pc, #264]	; (8003ee8 <HAL_RCC_OscConfig+0x76c>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a41      	ldr	r2, [pc, #260]	; (8003ee8 <HAL_RCC_OscConfig+0x76c>)
 8003de2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003de6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de8:	f7fe fdf6 	bl	80029d8 <HAL_GetTick>
 8003dec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003df0:	f7fe fdf2 	bl	80029d8 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e0e3      	b.n	8003fca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e02:	4b39      	ldr	r3, [pc, #228]	; (8003ee8 <HAL_RCC_OscConfig+0x76c>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1f0      	bne.n	8003df0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e0e:	4b36      	ldr	r3, [pc, #216]	; (8003ee8 <HAL_RCC_OscConfig+0x76c>)
 8003e10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e12:	4b37      	ldr	r3, [pc, #220]	; (8003ef0 <HAL_RCC_OscConfig+0x774>)
 8003e14:	4013      	ands	r3, r2
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003e1e:	0112      	lsls	r2, r2, #4
 8003e20:	430a      	orrs	r2, r1
 8003e22:	4931      	ldr	r1, [pc, #196]	; (8003ee8 <HAL_RCC_OscConfig+0x76c>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	628b      	str	r3, [r1, #40]	; 0x28
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e36:	3b01      	subs	r3, #1
 8003e38:	025b      	lsls	r3, r3, #9
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e42:	3b01      	subs	r3, #1
 8003e44:	041b      	lsls	r3, r3, #16
 8003e46:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e50:	3b01      	subs	r3, #1
 8003e52:	061b      	lsls	r3, r3, #24
 8003e54:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003e58:	4923      	ldr	r1, [pc, #140]	; (8003ee8 <HAL_RCC_OscConfig+0x76c>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003e5e:	4b22      	ldr	r3, [pc, #136]	; (8003ee8 <HAL_RCC_OscConfig+0x76c>)
 8003e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e62:	4a21      	ldr	r2, [pc, #132]	; (8003ee8 <HAL_RCC_OscConfig+0x76c>)
 8003e64:	f023 0301 	bic.w	r3, r3, #1
 8003e68:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003e6a:	4b1f      	ldr	r3, [pc, #124]	; (8003ee8 <HAL_RCC_OscConfig+0x76c>)
 8003e6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e6e:	4b21      	ldr	r3, [pc, #132]	; (8003ef4 <HAL_RCC_OscConfig+0x778>)
 8003e70:	4013      	ands	r3, r2
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003e76:	00d2      	lsls	r2, r2, #3
 8003e78:	491b      	ldr	r1, [pc, #108]	; (8003ee8 <HAL_RCC_OscConfig+0x76c>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003e7e:	4b1a      	ldr	r3, [pc, #104]	; (8003ee8 <HAL_RCC_OscConfig+0x76c>)
 8003e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e82:	f023 020c 	bic.w	r2, r3, #12
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	4917      	ldr	r1, [pc, #92]	; (8003ee8 <HAL_RCC_OscConfig+0x76c>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003e90:	4b15      	ldr	r3, [pc, #84]	; (8003ee8 <HAL_RCC_OscConfig+0x76c>)
 8003e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e94:	f023 0202 	bic.w	r2, r3, #2
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9c:	4912      	ldr	r1, [pc, #72]	; (8003ee8 <HAL_RCC_OscConfig+0x76c>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003ea2:	4b11      	ldr	r3, [pc, #68]	; (8003ee8 <HAL_RCC_OscConfig+0x76c>)
 8003ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea6:	4a10      	ldr	r2, [pc, #64]	; (8003ee8 <HAL_RCC_OscConfig+0x76c>)
 8003ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eae:	4b0e      	ldr	r3, [pc, #56]	; (8003ee8 <HAL_RCC_OscConfig+0x76c>)
 8003eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb2:	4a0d      	ldr	r2, [pc, #52]	; (8003ee8 <HAL_RCC_OscConfig+0x76c>)
 8003eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eb8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003eba:	4b0b      	ldr	r3, [pc, #44]	; (8003ee8 <HAL_RCC_OscConfig+0x76c>)
 8003ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebe:	4a0a      	ldr	r2, [pc, #40]	; (8003ee8 <HAL_RCC_OscConfig+0x76c>)
 8003ec0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ec4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003ec6:	4b08      	ldr	r3, [pc, #32]	; (8003ee8 <HAL_RCC_OscConfig+0x76c>)
 8003ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eca:	4a07      	ldr	r2, [pc, #28]	; (8003ee8 <HAL_RCC_OscConfig+0x76c>)
 8003ecc:	f043 0301 	orr.w	r3, r3, #1
 8003ed0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ed2:	4b05      	ldr	r3, [pc, #20]	; (8003ee8 <HAL_RCC_OscConfig+0x76c>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a04      	ldr	r2, [pc, #16]	; (8003ee8 <HAL_RCC_OscConfig+0x76c>)
 8003ed8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003edc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ede:	f7fe fd7b 	bl	80029d8 <HAL_GetTick>
 8003ee2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ee4:	e011      	b.n	8003f0a <HAL_RCC_OscConfig+0x78e>
 8003ee6:	bf00      	nop
 8003ee8:	58024400 	.word	0x58024400
 8003eec:	58024800 	.word	0x58024800
 8003ef0:	fffffc0c 	.word	0xfffffc0c
 8003ef4:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ef8:	f7fe fd6e 	bl	80029d8 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e05f      	b.n	8003fca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f0a:	4b32      	ldr	r3, [pc, #200]	; (8003fd4 <HAL_RCC_OscConfig+0x858>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d0f0      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x77c>
 8003f16:	e057      	b.n	8003fc8 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f18:	4b2e      	ldr	r3, [pc, #184]	; (8003fd4 <HAL_RCC_OscConfig+0x858>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a2d      	ldr	r2, [pc, #180]	; (8003fd4 <HAL_RCC_OscConfig+0x858>)
 8003f1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f24:	f7fe fd58 	bl	80029d8 <HAL_GetTick>
 8003f28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f2c:	f7fe fd54 	bl	80029d8 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e045      	b.n	8003fca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f3e:	4b25      	ldr	r3, [pc, #148]	; (8003fd4 <HAL_RCC_OscConfig+0x858>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1f0      	bne.n	8003f2c <HAL_RCC_OscConfig+0x7b0>
 8003f4a:	e03d      	b.n	8003fc8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003f4c:	4b21      	ldr	r3, [pc, #132]	; (8003fd4 <HAL_RCC_OscConfig+0x858>)
 8003f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f50:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003f52:	4b20      	ldr	r3, [pc, #128]	; (8003fd4 <HAL_RCC_OscConfig+0x858>)
 8003f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f56:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d031      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	f003 0203 	and.w	r2, r3, #3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d12a      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	091b      	lsrs	r3, r3, #4
 8003f72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d122      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f88:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d11a      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	0a5b      	lsrs	r3, r3, #9
 8003f92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f9a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d111      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	0c1b      	lsrs	r3, r3, #16
 8003fa4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fac:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d108      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	0e1b      	lsrs	r3, r3, #24
 8003fb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fbe:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d001      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e000      	b.n	8003fca <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3730      	adds	r7, #48	; 0x30
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	58024400 	.word	0x58024400

08003fd8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d101      	bne.n	8003fec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e19c      	b.n	8004326 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fec:	4b8a      	ldr	r3, [pc, #552]	; (8004218 <HAL_RCC_ClockConfig+0x240>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 030f 	and.w	r3, r3, #15
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d910      	bls.n	800401c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ffa:	4b87      	ldr	r3, [pc, #540]	; (8004218 <HAL_RCC_ClockConfig+0x240>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f023 020f 	bic.w	r2, r3, #15
 8004002:	4985      	ldr	r1, [pc, #532]	; (8004218 <HAL_RCC_ClockConfig+0x240>)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	4313      	orrs	r3, r2
 8004008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800400a:	4b83      	ldr	r3, [pc, #524]	; (8004218 <HAL_RCC_ClockConfig+0x240>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 030f 	and.w	r3, r3, #15
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	429a      	cmp	r2, r3
 8004016:	d001      	beq.n	800401c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e184      	b.n	8004326 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b00      	cmp	r3, #0
 8004026:	d010      	beq.n	800404a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	691a      	ldr	r2, [r3, #16]
 800402c:	4b7b      	ldr	r3, [pc, #492]	; (800421c <HAL_RCC_ClockConfig+0x244>)
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004034:	429a      	cmp	r2, r3
 8004036:	d908      	bls.n	800404a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004038:	4b78      	ldr	r3, [pc, #480]	; (800421c <HAL_RCC_ClockConfig+0x244>)
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	4975      	ldr	r1, [pc, #468]	; (800421c <HAL_RCC_ClockConfig+0x244>)
 8004046:	4313      	orrs	r3, r2
 8004048:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0308 	and.w	r3, r3, #8
 8004052:	2b00      	cmp	r3, #0
 8004054:	d010      	beq.n	8004078 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	695a      	ldr	r2, [r3, #20]
 800405a:	4b70      	ldr	r3, [pc, #448]	; (800421c <HAL_RCC_ClockConfig+0x244>)
 800405c:	69db      	ldr	r3, [r3, #28]
 800405e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004062:	429a      	cmp	r2, r3
 8004064:	d908      	bls.n	8004078 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004066:	4b6d      	ldr	r3, [pc, #436]	; (800421c <HAL_RCC_ClockConfig+0x244>)
 8004068:	69db      	ldr	r3, [r3, #28]
 800406a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	496a      	ldr	r1, [pc, #424]	; (800421c <HAL_RCC_ClockConfig+0x244>)
 8004074:	4313      	orrs	r3, r2
 8004076:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0310 	and.w	r3, r3, #16
 8004080:	2b00      	cmp	r3, #0
 8004082:	d010      	beq.n	80040a6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	699a      	ldr	r2, [r3, #24]
 8004088:	4b64      	ldr	r3, [pc, #400]	; (800421c <HAL_RCC_ClockConfig+0x244>)
 800408a:	69db      	ldr	r3, [r3, #28]
 800408c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004090:	429a      	cmp	r2, r3
 8004092:	d908      	bls.n	80040a6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004094:	4b61      	ldr	r3, [pc, #388]	; (800421c <HAL_RCC_ClockConfig+0x244>)
 8004096:	69db      	ldr	r3, [r3, #28]
 8004098:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	495e      	ldr	r1, [pc, #376]	; (800421c <HAL_RCC_ClockConfig+0x244>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0320 	and.w	r3, r3, #32
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d010      	beq.n	80040d4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	69da      	ldr	r2, [r3, #28]
 80040b6:	4b59      	ldr	r3, [pc, #356]	; (800421c <HAL_RCC_ClockConfig+0x244>)
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040be:	429a      	cmp	r2, r3
 80040c0:	d908      	bls.n	80040d4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80040c2:	4b56      	ldr	r3, [pc, #344]	; (800421c <HAL_RCC_ClockConfig+0x244>)
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	4953      	ldr	r1, [pc, #332]	; (800421c <HAL_RCC_ClockConfig+0x244>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d010      	beq.n	8004102 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	68da      	ldr	r2, [r3, #12]
 80040e4:	4b4d      	ldr	r3, [pc, #308]	; (800421c <HAL_RCC_ClockConfig+0x244>)
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	f003 030f 	and.w	r3, r3, #15
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d908      	bls.n	8004102 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040f0:	4b4a      	ldr	r3, [pc, #296]	; (800421c <HAL_RCC_ClockConfig+0x244>)
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	f023 020f 	bic.w	r2, r3, #15
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	4947      	ldr	r1, [pc, #284]	; (800421c <HAL_RCC_ClockConfig+0x244>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b00      	cmp	r3, #0
 800410c:	d055      	beq.n	80041ba <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800410e:	4b43      	ldr	r3, [pc, #268]	; (800421c <HAL_RCC_ClockConfig+0x244>)
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	4940      	ldr	r1, [pc, #256]	; (800421c <HAL_RCC_ClockConfig+0x244>)
 800411c:	4313      	orrs	r3, r2
 800411e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	2b02      	cmp	r3, #2
 8004126:	d107      	bne.n	8004138 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004128:	4b3c      	ldr	r3, [pc, #240]	; (800421c <HAL_RCC_ClockConfig+0x244>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d121      	bne.n	8004178 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e0f6      	b.n	8004326 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	2b03      	cmp	r3, #3
 800413e:	d107      	bne.n	8004150 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004140:	4b36      	ldr	r3, [pc, #216]	; (800421c <HAL_RCC_ClockConfig+0x244>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d115      	bne.n	8004178 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e0ea      	b.n	8004326 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d107      	bne.n	8004168 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004158:	4b30      	ldr	r3, [pc, #192]	; (800421c <HAL_RCC_ClockConfig+0x244>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004160:	2b00      	cmp	r3, #0
 8004162:	d109      	bne.n	8004178 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e0de      	b.n	8004326 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004168:	4b2c      	ldr	r3, [pc, #176]	; (800421c <HAL_RCC_ClockConfig+0x244>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e0d6      	b.n	8004326 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004178:	4b28      	ldr	r3, [pc, #160]	; (800421c <HAL_RCC_ClockConfig+0x244>)
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	f023 0207 	bic.w	r2, r3, #7
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	4925      	ldr	r1, [pc, #148]	; (800421c <HAL_RCC_ClockConfig+0x244>)
 8004186:	4313      	orrs	r3, r2
 8004188:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800418a:	f7fe fc25 	bl	80029d8 <HAL_GetTick>
 800418e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004190:	e00a      	b.n	80041a8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004192:	f7fe fc21 	bl	80029d8 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	f241 3288 	movw	r2, #5000	; 0x1388
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e0be      	b.n	8004326 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041a8:	4b1c      	ldr	r3, [pc, #112]	; (800421c <HAL_RCC_ClockConfig+0x244>)
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	00db      	lsls	r3, r3, #3
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d1eb      	bne.n	8004192 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d010      	beq.n	80041e8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68da      	ldr	r2, [r3, #12]
 80041ca:	4b14      	ldr	r3, [pc, #80]	; (800421c <HAL_RCC_ClockConfig+0x244>)
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	f003 030f 	and.w	r3, r3, #15
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d208      	bcs.n	80041e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041d6:	4b11      	ldr	r3, [pc, #68]	; (800421c <HAL_RCC_ClockConfig+0x244>)
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	f023 020f 	bic.w	r2, r3, #15
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	490e      	ldr	r1, [pc, #56]	; (800421c <HAL_RCC_ClockConfig+0x244>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041e8:	4b0b      	ldr	r3, [pc, #44]	; (8004218 <HAL_RCC_ClockConfig+0x240>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 030f 	and.w	r3, r3, #15
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d214      	bcs.n	8004220 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f6:	4b08      	ldr	r3, [pc, #32]	; (8004218 <HAL_RCC_ClockConfig+0x240>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f023 020f 	bic.w	r2, r3, #15
 80041fe:	4906      	ldr	r1, [pc, #24]	; (8004218 <HAL_RCC_ClockConfig+0x240>)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	4313      	orrs	r3, r2
 8004204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004206:	4b04      	ldr	r3, [pc, #16]	; (8004218 <HAL_RCC_ClockConfig+0x240>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	429a      	cmp	r2, r3
 8004212:	d005      	beq.n	8004220 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e086      	b.n	8004326 <HAL_RCC_ClockConfig+0x34e>
 8004218:	52002000 	.word	0x52002000
 800421c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b00      	cmp	r3, #0
 800422a:	d010      	beq.n	800424e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	691a      	ldr	r2, [r3, #16]
 8004230:	4b3f      	ldr	r3, [pc, #252]	; (8004330 <HAL_RCC_ClockConfig+0x358>)
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004238:	429a      	cmp	r2, r3
 800423a:	d208      	bcs.n	800424e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800423c:	4b3c      	ldr	r3, [pc, #240]	; (8004330 <HAL_RCC_ClockConfig+0x358>)
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	4939      	ldr	r1, [pc, #228]	; (8004330 <HAL_RCC_ClockConfig+0x358>)
 800424a:	4313      	orrs	r3, r2
 800424c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0308 	and.w	r3, r3, #8
 8004256:	2b00      	cmp	r3, #0
 8004258:	d010      	beq.n	800427c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	695a      	ldr	r2, [r3, #20]
 800425e:	4b34      	ldr	r3, [pc, #208]	; (8004330 <HAL_RCC_ClockConfig+0x358>)
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004266:	429a      	cmp	r2, r3
 8004268:	d208      	bcs.n	800427c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800426a:	4b31      	ldr	r3, [pc, #196]	; (8004330 <HAL_RCC_ClockConfig+0x358>)
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	492e      	ldr	r1, [pc, #184]	; (8004330 <HAL_RCC_ClockConfig+0x358>)
 8004278:	4313      	orrs	r3, r2
 800427a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0310 	and.w	r3, r3, #16
 8004284:	2b00      	cmp	r3, #0
 8004286:	d010      	beq.n	80042aa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	699a      	ldr	r2, [r3, #24]
 800428c:	4b28      	ldr	r3, [pc, #160]	; (8004330 <HAL_RCC_ClockConfig+0x358>)
 800428e:	69db      	ldr	r3, [r3, #28]
 8004290:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004294:	429a      	cmp	r2, r3
 8004296:	d208      	bcs.n	80042aa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004298:	4b25      	ldr	r3, [pc, #148]	; (8004330 <HAL_RCC_ClockConfig+0x358>)
 800429a:	69db      	ldr	r3, [r3, #28]
 800429c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	4922      	ldr	r1, [pc, #136]	; (8004330 <HAL_RCC_ClockConfig+0x358>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0320 	and.w	r3, r3, #32
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d010      	beq.n	80042d8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	69da      	ldr	r2, [r3, #28]
 80042ba:	4b1d      	ldr	r3, [pc, #116]	; (8004330 <HAL_RCC_ClockConfig+0x358>)
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d208      	bcs.n	80042d8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80042c6:	4b1a      	ldr	r3, [pc, #104]	; (8004330 <HAL_RCC_ClockConfig+0x358>)
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	69db      	ldr	r3, [r3, #28]
 80042d2:	4917      	ldr	r1, [pc, #92]	; (8004330 <HAL_RCC_ClockConfig+0x358>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80042d8:	f000 f834 	bl	8004344 <HAL_RCC_GetSysClockFreq>
 80042dc:	4602      	mov	r2, r0
 80042de:	4b14      	ldr	r3, [pc, #80]	; (8004330 <HAL_RCC_ClockConfig+0x358>)
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	0a1b      	lsrs	r3, r3, #8
 80042e4:	f003 030f 	and.w	r3, r3, #15
 80042e8:	4912      	ldr	r1, [pc, #72]	; (8004334 <HAL_RCC_ClockConfig+0x35c>)
 80042ea:	5ccb      	ldrb	r3, [r1, r3]
 80042ec:	f003 031f 	and.w	r3, r3, #31
 80042f0:	fa22 f303 	lsr.w	r3, r2, r3
 80042f4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80042f6:	4b0e      	ldr	r3, [pc, #56]	; (8004330 <HAL_RCC_ClockConfig+0x358>)
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	f003 030f 	and.w	r3, r3, #15
 80042fe:	4a0d      	ldr	r2, [pc, #52]	; (8004334 <HAL_RCC_ClockConfig+0x35c>)
 8004300:	5cd3      	ldrb	r3, [r2, r3]
 8004302:	f003 031f 	and.w	r3, r3, #31
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	fa22 f303 	lsr.w	r3, r2, r3
 800430c:	4a0a      	ldr	r2, [pc, #40]	; (8004338 <HAL_RCC_ClockConfig+0x360>)
 800430e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004310:	4a0a      	ldr	r2, [pc, #40]	; (800433c <HAL_RCC_ClockConfig+0x364>)
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004316:	4b0a      	ldr	r3, [pc, #40]	; (8004340 <HAL_RCC_ClockConfig+0x368>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4618      	mov	r0, r3
 800431c:	f7fe f9b2 	bl	8002684 <HAL_InitTick>
 8004320:	4603      	mov	r3, r0
 8004322:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004324:	7bfb      	ldrb	r3, [r7, #15]
}
 8004326:	4618      	mov	r0, r3
 8004328:	3718      	adds	r7, #24
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	58024400 	.word	0x58024400
 8004334:	0800d518 	.word	0x0800d518
 8004338:	24000004 	.word	0x24000004
 800433c:	24000000 	.word	0x24000000
 8004340:	24000010 	.word	0x24000010

08004344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004344:	b480      	push	{r7}
 8004346:	b089      	sub	sp, #36	; 0x24
 8004348:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800434a:	4bb3      	ldr	r3, [pc, #716]	; (8004618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004352:	2b18      	cmp	r3, #24
 8004354:	f200 8155 	bhi.w	8004602 <HAL_RCC_GetSysClockFreq+0x2be>
 8004358:	a201      	add	r2, pc, #4	; (adr r2, 8004360 <HAL_RCC_GetSysClockFreq+0x1c>)
 800435a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435e:	bf00      	nop
 8004360:	080043c5 	.word	0x080043c5
 8004364:	08004603 	.word	0x08004603
 8004368:	08004603 	.word	0x08004603
 800436c:	08004603 	.word	0x08004603
 8004370:	08004603 	.word	0x08004603
 8004374:	08004603 	.word	0x08004603
 8004378:	08004603 	.word	0x08004603
 800437c:	08004603 	.word	0x08004603
 8004380:	080043eb 	.word	0x080043eb
 8004384:	08004603 	.word	0x08004603
 8004388:	08004603 	.word	0x08004603
 800438c:	08004603 	.word	0x08004603
 8004390:	08004603 	.word	0x08004603
 8004394:	08004603 	.word	0x08004603
 8004398:	08004603 	.word	0x08004603
 800439c:	08004603 	.word	0x08004603
 80043a0:	080043f1 	.word	0x080043f1
 80043a4:	08004603 	.word	0x08004603
 80043a8:	08004603 	.word	0x08004603
 80043ac:	08004603 	.word	0x08004603
 80043b0:	08004603 	.word	0x08004603
 80043b4:	08004603 	.word	0x08004603
 80043b8:	08004603 	.word	0x08004603
 80043bc:	08004603 	.word	0x08004603
 80043c0:	080043f7 	.word	0x080043f7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043c4:	4b94      	ldr	r3, [pc, #592]	; (8004618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0320 	and.w	r3, r3, #32
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d009      	beq.n	80043e4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80043d0:	4b91      	ldr	r3, [pc, #580]	; (8004618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	08db      	lsrs	r3, r3, #3
 80043d6:	f003 0303 	and.w	r3, r3, #3
 80043da:	4a90      	ldr	r2, [pc, #576]	; (800461c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80043dc:	fa22 f303 	lsr.w	r3, r2, r3
 80043e0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80043e2:	e111      	b.n	8004608 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80043e4:	4b8d      	ldr	r3, [pc, #564]	; (800461c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80043e6:	61bb      	str	r3, [r7, #24]
    break;
 80043e8:	e10e      	b.n	8004608 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80043ea:	4b8d      	ldr	r3, [pc, #564]	; (8004620 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80043ec:	61bb      	str	r3, [r7, #24]
    break;
 80043ee:	e10b      	b.n	8004608 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80043f0:	4b8c      	ldr	r3, [pc, #560]	; (8004624 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80043f2:	61bb      	str	r3, [r7, #24]
    break;
 80043f4:	e108      	b.n	8004608 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80043f6:	4b88      	ldr	r3, [pc, #544]	; (8004618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fa:	f003 0303 	and.w	r3, r3, #3
 80043fe:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004400:	4b85      	ldr	r3, [pc, #532]	; (8004618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004404:	091b      	lsrs	r3, r3, #4
 8004406:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800440a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800440c:	4b82      	ldr	r3, [pc, #520]	; (8004618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800440e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004416:	4b80      	ldr	r3, [pc, #512]	; (8004618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441a:	08db      	lsrs	r3, r3, #3
 800441c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	fb02 f303 	mul.w	r3, r2, r3
 8004426:	ee07 3a90 	vmov	s15, r3
 800442a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800442e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 80e1 	beq.w	80045fc <HAL_RCC_GetSysClockFreq+0x2b8>
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2b02      	cmp	r3, #2
 800443e:	f000 8083 	beq.w	8004548 <HAL_RCC_GetSysClockFreq+0x204>
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	2b02      	cmp	r3, #2
 8004446:	f200 80a1 	bhi.w	800458c <HAL_RCC_GetSysClockFreq+0x248>
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d003      	beq.n	8004458 <HAL_RCC_GetSysClockFreq+0x114>
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d056      	beq.n	8004504 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004456:	e099      	b.n	800458c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004458:	4b6f      	ldr	r3, [pc, #444]	; (8004618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0320 	and.w	r3, r3, #32
 8004460:	2b00      	cmp	r3, #0
 8004462:	d02d      	beq.n	80044c0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004464:	4b6c      	ldr	r3, [pc, #432]	; (8004618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	08db      	lsrs	r3, r3, #3
 800446a:	f003 0303 	and.w	r3, r3, #3
 800446e:	4a6b      	ldr	r2, [pc, #428]	; (800461c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004470:	fa22 f303 	lsr.w	r3, r2, r3
 8004474:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	ee07 3a90 	vmov	s15, r3
 800447c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	ee07 3a90 	vmov	s15, r3
 8004486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800448a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800448e:	4b62      	ldr	r3, [pc, #392]	; (8004618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004496:	ee07 3a90 	vmov	s15, r3
 800449a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800449e:	ed97 6a02 	vldr	s12, [r7, #8]
 80044a2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004628 <HAL_RCC_GetSysClockFreq+0x2e4>
 80044a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80044be:	e087      	b.n	80045d0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	ee07 3a90 	vmov	s15, r3
 80044c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ca:	eddf 6a58 	vldr	s13, [pc, #352]	; 800462c <HAL_RCC_GetSysClockFreq+0x2e8>
 80044ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044d2:	4b51      	ldr	r3, [pc, #324]	; (8004618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044da:	ee07 3a90 	vmov	s15, r3
 80044de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80044e6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004628 <HAL_RCC_GetSysClockFreq+0x2e4>
 80044ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004502:	e065      	b.n	80045d0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	ee07 3a90 	vmov	s15, r3
 800450a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800450e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004630 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004516:	4b40      	ldr	r3, [pc, #256]	; (8004618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800451e:	ee07 3a90 	vmov	s15, r3
 8004522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004526:	ed97 6a02 	vldr	s12, [r7, #8]
 800452a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004628 <HAL_RCC_GetSysClockFreq+0x2e4>
 800452e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800453a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800453e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004542:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004546:	e043      	b.n	80045d0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	ee07 3a90 	vmov	s15, r3
 800454e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004552:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004634 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800455a:	4b2f      	ldr	r3, [pc, #188]	; (8004618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800455c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004562:	ee07 3a90 	vmov	s15, r3
 8004566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800456a:	ed97 6a02 	vldr	s12, [r7, #8]
 800456e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004628 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800457a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800457e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004586:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800458a:	e021      	b.n	80045d0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	ee07 3a90 	vmov	s15, r3
 8004592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004596:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004630 <HAL_RCC_GetSysClockFreq+0x2ec>
 800459a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800459e:	4b1e      	ldr	r3, [pc, #120]	; (8004618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045a6:	ee07 3a90 	vmov	s15, r3
 80045aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80045b2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004628 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045ce:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80045d0:	4b11      	ldr	r3, [pc, #68]	; (8004618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d4:	0a5b      	lsrs	r3, r3, #9
 80045d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045da:	3301      	adds	r3, #1
 80045dc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	ee07 3a90 	vmov	s15, r3
 80045e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80045e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80045ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045f4:	ee17 3a90 	vmov	r3, s15
 80045f8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80045fa:	e005      	b.n	8004608 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80045fc:	2300      	movs	r3, #0
 80045fe:	61bb      	str	r3, [r7, #24]
    break;
 8004600:	e002      	b.n	8004608 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004602:	4b07      	ldr	r3, [pc, #28]	; (8004620 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004604:	61bb      	str	r3, [r7, #24]
    break;
 8004606:	bf00      	nop
  }

  return sysclockfreq;
 8004608:	69bb      	ldr	r3, [r7, #24]
}
 800460a:	4618      	mov	r0, r3
 800460c:	3724      	adds	r7, #36	; 0x24
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	58024400 	.word	0x58024400
 800461c:	03d09000 	.word	0x03d09000
 8004620:	003d0900 	.word	0x003d0900
 8004624:	007a1200 	.word	0x007a1200
 8004628:	46000000 	.word	0x46000000
 800462c:	4c742400 	.word	0x4c742400
 8004630:	4a742400 	.word	0x4a742400
 8004634:	4af42400 	.word	0x4af42400

08004638 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800463e:	f7ff fe81 	bl	8004344 <HAL_RCC_GetSysClockFreq>
 8004642:	4602      	mov	r2, r0
 8004644:	4b10      	ldr	r3, [pc, #64]	; (8004688 <HAL_RCC_GetHCLKFreq+0x50>)
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	0a1b      	lsrs	r3, r3, #8
 800464a:	f003 030f 	and.w	r3, r3, #15
 800464e:	490f      	ldr	r1, [pc, #60]	; (800468c <HAL_RCC_GetHCLKFreq+0x54>)
 8004650:	5ccb      	ldrb	r3, [r1, r3]
 8004652:	f003 031f 	and.w	r3, r3, #31
 8004656:	fa22 f303 	lsr.w	r3, r2, r3
 800465a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800465c:	4b0a      	ldr	r3, [pc, #40]	; (8004688 <HAL_RCC_GetHCLKFreq+0x50>)
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	f003 030f 	and.w	r3, r3, #15
 8004664:	4a09      	ldr	r2, [pc, #36]	; (800468c <HAL_RCC_GetHCLKFreq+0x54>)
 8004666:	5cd3      	ldrb	r3, [r2, r3]
 8004668:	f003 031f 	and.w	r3, r3, #31
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	fa22 f303 	lsr.w	r3, r2, r3
 8004672:	4a07      	ldr	r2, [pc, #28]	; (8004690 <HAL_RCC_GetHCLKFreq+0x58>)
 8004674:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004676:	4a07      	ldr	r2, [pc, #28]	; (8004694 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800467c:	4b04      	ldr	r3, [pc, #16]	; (8004690 <HAL_RCC_GetHCLKFreq+0x58>)
 800467e:	681b      	ldr	r3, [r3, #0]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	58024400 	.word	0x58024400
 800468c:	0800d518 	.word	0x0800d518
 8004690:	24000004 	.word	0x24000004
 8004694:	24000000 	.word	0x24000000

08004698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800469c:	f7ff ffcc 	bl	8004638 <HAL_RCC_GetHCLKFreq>
 80046a0:	4602      	mov	r2, r0
 80046a2:	4b06      	ldr	r3, [pc, #24]	; (80046bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	091b      	lsrs	r3, r3, #4
 80046a8:	f003 0307 	and.w	r3, r3, #7
 80046ac:	4904      	ldr	r1, [pc, #16]	; (80046c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80046ae:	5ccb      	ldrb	r3, [r1, r3]
 80046b0:	f003 031f 	and.w	r3, r3, #31
 80046b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	58024400 	.word	0x58024400
 80046c0:	0800d518 	.word	0x0800d518

080046c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80046c8:	f7ff ffb6 	bl	8004638 <HAL_RCC_GetHCLKFreq>
 80046cc:	4602      	mov	r2, r0
 80046ce:	4b06      	ldr	r3, [pc, #24]	; (80046e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	0a1b      	lsrs	r3, r3, #8
 80046d4:	f003 0307 	and.w	r3, r3, #7
 80046d8:	4904      	ldr	r1, [pc, #16]	; (80046ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80046da:	5ccb      	ldrb	r3, [r1, r3]
 80046dc:	f003 031f 	and.w	r3, r3, #31
 80046e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	58024400 	.word	0x58024400
 80046ec:	0800d518 	.word	0x0800d518

080046f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	223f      	movs	r2, #63	; 0x3f
 80046fe:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004700:	4b1a      	ldr	r3, [pc, #104]	; (800476c <HAL_RCC_GetClockConfig+0x7c>)
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	f003 0207 	and.w	r2, r3, #7
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800470c:	4b17      	ldr	r3, [pc, #92]	; (800476c <HAL_RCC_GetClockConfig+0x7c>)
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004718:	4b14      	ldr	r3, [pc, #80]	; (800476c <HAL_RCC_GetClockConfig+0x7c>)
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	f003 020f 	and.w	r2, r3, #15
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004724:	4b11      	ldr	r3, [pc, #68]	; (800476c <HAL_RCC_GetClockConfig+0x7c>)
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004730:	4b0e      	ldr	r3, [pc, #56]	; (800476c <HAL_RCC_GetClockConfig+0x7c>)
 8004732:	69db      	ldr	r3, [r3, #28]
 8004734:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800473c:	4b0b      	ldr	r3, [pc, #44]	; (800476c <HAL_RCC_GetClockConfig+0x7c>)
 800473e:	69db      	ldr	r3, [r3, #28]
 8004740:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004748:	4b08      	ldr	r3, [pc, #32]	; (800476c <HAL_RCC_GetClockConfig+0x7c>)
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004754:	4b06      	ldr	r3, [pc, #24]	; (8004770 <HAL_RCC_GetClockConfig+0x80>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 020f 	and.w	r2, r3, #15
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	601a      	str	r2, [r3, #0]
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	58024400 	.word	0x58024400
 8004770:	52002000 	.word	0x52002000

08004774 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b086      	sub	sp, #24
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800477c:	2300      	movs	r3, #0
 800477e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004780:	2300      	movs	r3, #0
 8004782:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d03f      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004794:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004798:	d02a      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800479a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800479e:	d824      	bhi.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80047a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047a4:	d018      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80047a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047aa:	d81e      	bhi.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80047b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047b4:	d007      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80047b6:	e018      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047b8:	4ba3      	ldr	r3, [pc, #652]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80047ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047bc:	4aa2      	ldr	r2, [pc, #648]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80047be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80047c4:	e015      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	3304      	adds	r3, #4
 80047ca:	2102      	movs	r1, #2
 80047cc:	4618      	mov	r0, r3
 80047ce:	f001 f9d5 	bl	8005b7c <RCCEx_PLL2_Config>
 80047d2:	4603      	mov	r3, r0
 80047d4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80047d6:	e00c      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	3324      	adds	r3, #36	; 0x24
 80047dc:	2102      	movs	r1, #2
 80047de:	4618      	mov	r0, r3
 80047e0:	f001 fa7e 	bl	8005ce0 <RCCEx_PLL3_Config>
 80047e4:	4603      	mov	r3, r0
 80047e6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80047e8:	e003      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	75fb      	strb	r3, [r7, #23]
      break;
 80047ee:	e000      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80047f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047f2:	7dfb      	ldrb	r3, [r7, #23]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d109      	bne.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80047f8:	4b93      	ldr	r3, [pc, #588]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80047fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004804:	4990      	ldr	r1, [pc, #576]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004806:	4313      	orrs	r3, r2
 8004808:	650b      	str	r3, [r1, #80]	; 0x50
 800480a:	e001      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800480c:	7dfb      	ldrb	r3, [r7, #23]
 800480e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004818:	2b00      	cmp	r3, #0
 800481a:	d03d      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004820:	2b04      	cmp	r3, #4
 8004822:	d826      	bhi.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004824:	a201      	add	r2, pc, #4	; (adr r2, 800482c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800482a:	bf00      	nop
 800482c:	08004841 	.word	0x08004841
 8004830:	0800484f 	.word	0x0800484f
 8004834:	08004861 	.word	0x08004861
 8004838:	08004879 	.word	0x08004879
 800483c:	08004879 	.word	0x08004879
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004840:	4b81      	ldr	r3, [pc, #516]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004844:	4a80      	ldr	r2, [pc, #512]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004846:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800484a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800484c:	e015      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	3304      	adds	r3, #4
 8004852:	2100      	movs	r1, #0
 8004854:	4618      	mov	r0, r3
 8004856:	f001 f991 	bl	8005b7c <RCCEx_PLL2_Config>
 800485a:	4603      	mov	r3, r0
 800485c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800485e:	e00c      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	3324      	adds	r3, #36	; 0x24
 8004864:	2100      	movs	r1, #0
 8004866:	4618      	mov	r0, r3
 8004868:	f001 fa3a 	bl	8005ce0 <RCCEx_PLL3_Config>
 800486c:	4603      	mov	r3, r0
 800486e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004870:	e003      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	75fb      	strb	r3, [r7, #23]
      break;
 8004876:	e000      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004878:	bf00      	nop
    }

    if(ret == HAL_OK)
 800487a:	7dfb      	ldrb	r3, [r7, #23]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d109      	bne.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004880:	4b71      	ldr	r3, [pc, #452]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004884:	f023 0207 	bic.w	r2, r3, #7
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800488c:	496e      	ldr	r1, [pc, #440]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800488e:	4313      	orrs	r3, r2
 8004890:	650b      	str	r3, [r1, #80]	; 0x50
 8004892:	e001      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004894:	7dfb      	ldrb	r3, [r7, #23]
 8004896:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d042      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ac:	d02b      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80048ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048b2:	d825      	bhi.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80048b4:	2bc0      	cmp	r3, #192	; 0xc0
 80048b6:	d028      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80048b8:	2bc0      	cmp	r3, #192	; 0xc0
 80048ba:	d821      	bhi.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80048bc:	2b80      	cmp	r3, #128	; 0x80
 80048be:	d016      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80048c0:	2b80      	cmp	r3, #128	; 0x80
 80048c2:	d81d      	bhi.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d002      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80048c8:	2b40      	cmp	r3, #64	; 0x40
 80048ca:	d007      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x168>
 80048cc:	e018      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048ce:	4b5e      	ldr	r3, [pc, #376]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80048d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d2:	4a5d      	ldr	r2, [pc, #372]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80048d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80048da:	e017      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	3304      	adds	r3, #4
 80048e0:	2100      	movs	r1, #0
 80048e2:	4618      	mov	r0, r3
 80048e4:	f001 f94a 	bl	8005b7c <RCCEx_PLL2_Config>
 80048e8:	4603      	mov	r3, r0
 80048ea:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80048ec:	e00e      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	3324      	adds	r3, #36	; 0x24
 80048f2:	2100      	movs	r1, #0
 80048f4:	4618      	mov	r0, r3
 80048f6:	f001 f9f3 	bl	8005ce0 <RCCEx_PLL3_Config>
 80048fa:	4603      	mov	r3, r0
 80048fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80048fe:	e005      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	75fb      	strb	r3, [r7, #23]
      break;
 8004904:	e002      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004906:	bf00      	nop
 8004908:	e000      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800490a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800490c:	7dfb      	ldrb	r3, [r7, #23]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d109      	bne.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004912:	4b4d      	ldr	r3, [pc, #308]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004916:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800491e:	494a      	ldr	r1, [pc, #296]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004920:	4313      	orrs	r3, r2
 8004922:	650b      	str	r3, [r1, #80]	; 0x50
 8004924:	e001      	b.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004926:	7dfb      	ldrb	r3, [r7, #23]
 8004928:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004932:	2b00      	cmp	r3, #0
 8004934:	d049      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800493c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004940:	d030      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004942:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004946:	d82a      	bhi.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004948:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800494c:	d02c      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800494e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004952:	d824      	bhi.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004954:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004958:	d018      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800495a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800495e:	d81e      	bhi.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004960:	2b00      	cmp	r3, #0
 8004962:	d003      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004964:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004968:	d007      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800496a:	e018      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800496c:	4b36      	ldr	r3, [pc, #216]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800496e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004970:	4a35      	ldr	r2, [pc, #212]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004972:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004976:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004978:	e017      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	3304      	adds	r3, #4
 800497e:	2100      	movs	r1, #0
 8004980:	4618      	mov	r0, r3
 8004982:	f001 f8fb 	bl	8005b7c <RCCEx_PLL2_Config>
 8004986:	4603      	mov	r3, r0
 8004988:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800498a:	e00e      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	3324      	adds	r3, #36	; 0x24
 8004990:	2100      	movs	r1, #0
 8004992:	4618      	mov	r0, r3
 8004994:	f001 f9a4 	bl	8005ce0 <RCCEx_PLL3_Config>
 8004998:	4603      	mov	r3, r0
 800499a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800499c:	e005      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	75fb      	strb	r3, [r7, #23]
      break;
 80049a2:	e002      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80049a4:	bf00      	nop
 80049a6:	e000      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80049a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049aa:	7dfb      	ldrb	r3, [r7, #23]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10a      	bne.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80049b0:	4b25      	ldr	r3, [pc, #148]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80049b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80049be:	4922      	ldr	r1, [pc, #136]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	658b      	str	r3, [r1, #88]	; 0x58
 80049c4:	e001      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c6:	7dfb      	ldrb	r3, [r7, #23]
 80049c8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d04b      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80049dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049e0:	d030      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80049e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049e6:	d82a      	bhi.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80049e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049ec:	d02e      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80049ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049f2:	d824      	bhi.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80049f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049f8:	d018      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80049fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049fe:	d81e      	bhi.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d003      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004a04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a08:	d007      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004a0a:	e018      	b.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a0c:	4b0e      	ldr	r3, [pc, #56]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a10:	4a0d      	ldr	r2, [pc, #52]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a18:	e019      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	3304      	adds	r3, #4
 8004a1e:	2100      	movs	r1, #0
 8004a20:	4618      	mov	r0, r3
 8004a22:	f001 f8ab 	bl	8005b7c <RCCEx_PLL2_Config>
 8004a26:	4603      	mov	r3, r0
 8004a28:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004a2a:	e010      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	3324      	adds	r3, #36	; 0x24
 8004a30:	2100      	movs	r1, #0
 8004a32:	4618      	mov	r0, r3
 8004a34:	f001 f954 	bl	8005ce0 <RCCEx_PLL3_Config>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a3c:	e007      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	75fb      	strb	r3, [r7, #23]
      break;
 8004a42:	e004      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8004a44:	bf00      	nop
 8004a46:	e002      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004a48:	58024400 	.word	0x58024400
      break;
 8004a4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a4e:	7dfb      	ldrb	r3, [r7, #23]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d10a      	bne.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004a54:	4b99      	ldr	r3, [pc, #612]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a58:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a62:	4996      	ldr	r1, [pc, #600]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	658b      	str	r3, [r1, #88]	; 0x58
 8004a68:	e001      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a6a:	7dfb      	ldrb	r3, [r7, #23]
 8004a6c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d032      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a7e:	2b30      	cmp	r3, #48	; 0x30
 8004a80:	d01c      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004a82:	2b30      	cmp	r3, #48	; 0x30
 8004a84:	d817      	bhi.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004a86:	2b20      	cmp	r3, #32
 8004a88:	d00c      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8004a8a:	2b20      	cmp	r3, #32
 8004a8c:	d813      	bhi.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d016      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004a92:	2b10      	cmp	r3, #16
 8004a94:	d10f      	bne.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a96:	4b89      	ldr	r3, [pc, #548]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9a:	4a88      	ldr	r2, [pc, #544]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aa0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004aa2:	e00e      	b.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	3304      	adds	r3, #4
 8004aa8:	2102      	movs	r1, #2
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f001 f866 	bl	8005b7c <RCCEx_PLL2_Config>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004ab4:	e005      	b.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	75fb      	strb	r3, [r7, #23]
      break;
 8004aba:	e002      	b.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004abc:	bf00      	nop
 8004abe:	e000      	b.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004ac0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ac2:	7dfb      	ldrb	r3, [r7, #23]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d109      	bne.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004ac8:	4b7c      	ldr	r3, [pc, #496]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004acc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ad4:	4979      	ldr	r1, [pc, #484]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004ada:	e001      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004adc:	7dfb      	ldrb	r3, [r7, #23]
 8004ade:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d047      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004af4:	d030      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004af6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004afa:	d82a      	bhi.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004afc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b00:	d02c      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004b02:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b06:	d824      	bhi.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004b08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b0c:	d018      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004b0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b12:	d81e      	bhi.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d003      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8004b18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b1c:	d007      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8004b1e:	e018      	b.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b20:	4b66      	ldr	r3, [pc, #408]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b24:	4a65      	ldr	r2, [pc, #404]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004b2c:	e017      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	3304      	adds	r3, #4
 8004b32:	2100      	movs	r1, #0
 8004b34:	4618      	mov	r0, r3
 8004b36:	f001 f821 	bl	8005b7c <RCCEx_PLL2_Config>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004b3e:	e00e      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	3324      	adds	r3, #36	; 0x24
 8004b44:	2100      	movs	r1, #0
 8004b46:	4618      	mov	r0, r3
 8004b48:	f001 f8ca 	bl	8005ce0 <RCCEx_PLL3_Config>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004b50:	e005      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	75fb      	strb	r3, [r7, #23]
      break;
 8004b56:	e002      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004b58:	bf00      	nop
 8004b5a:	e000      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004b5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b5e:	7dfb      	ldrb	r3, [r7, #23]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d109      	bne.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004b64:	4b55      	ldr	r3, [pc, #340]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b68:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b70:	4952      	ldr	r1, [pc, #328]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	650b      	str	r3, [r1, #80]	; 0x50
 8004b76:	e001      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b78:	7dfb      	ldrb	r3, [r7, #23]
 8004b7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d049      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b90:	d02e      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004b92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b96:	d828      	bhi.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004b98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b9c:	d02a      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8004b9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ba2:	d822      	bhi.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004ba4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ba8:	d026      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8004baa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004bae:	d81c      	bhi.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004bb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bb4:	d010      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8004bb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bba:	d816      	bhi.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d01d      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bc4:	d111      	bne.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	3304      	adds	r3, #4
 8004bca:	2101      	movs	r1, #1
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f000 ffd5 	bl	8005b7c <RCCEx_PLL2_Config>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004bd6:	e012      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	3324      	adds	r3, #36	; 0x24
 8004bdc:	2101      	movs	r1, #1
 8004bde:	4618      	mov	r0, r3
 8004be0:	f001 f87e 	bl	8005ce0 <RCCEx_PLL3_Config>
 8004be4:	4603      	mov	r3, r0
 8004be6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004be8:	e009      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	75fb      	strb	r3, [r7, #23]
      break;
 8004bee:	e006      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004bf0:	bf00      	nop
 8004bf2:	e004      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004bf4:	bf00      	nop
 8004bf6:	e002      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004bf8:	bf00      	nop
 8004bfa:	e000      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004bfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bfe:	7dfb      	ldrb	r3, [r7, #23]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d109      	bne.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004c04:	4b2d      	ldr	r3, [pc, #180]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c08:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c10:	492a      	ldr	r1, [pc, #168]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	650b      	str	r3, [r1, #80]	; 0x50
 8004c16:	e001      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c18:	7dfb      	ldrb	r3, [r7, #23]
 8004c1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d04d      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004c2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c32:	d02e      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004c34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c38:	d828      	bhi.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c3e:	d02a      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c44:	d822      	bhi.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004c46:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c4a:	d026      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x526>
 8004c4c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c50:	d81c      	bhi.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004c52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c56:	d010      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004c58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c5c:	d816      	bhi.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d01d      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004c62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c66:	d111      	bne.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	3304      	adds	r3, #4
 8004c6c:	2101      	movs	r1, #1
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 ff84 	bl	8005b7c <RCCEx_PLL2_Config>
 8004c74:	4603      	mov	r3, r0
 8004c76:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004c78:	e012      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	3324      	adds	r3, #36	; 0x24
 8004c7e:	2101      	movs	r1, #1
 8004c80:	4618      	mov	r0, r3
 8004c82:	f001 f82d 	bl	8005ce0 <RCCEx_PLL3_Config>
 8004c86:	4603      	mov	r3, r0
 8004c88:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004c8a:	e009      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	75fb      	strb	r3, [r7, #23]
      break;
 8004c90:	e006      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004c92:	bf00      	nop
 8004c94:	e004      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004c96:	bf00      	nop
 8004c98:	e002      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004c9a:	bf00      	nop
 8004c9c:	e000      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004c9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ca0:	7dfb      	ldrb	r3, [r7, #23]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10c      	bne.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004ca6:	4b05      	ldr	r3, [pc, #20]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004caa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004cb4:	4901      	ldr	r1, [pc, #4]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	658b      	str	r3, [r1, #88]	; 0x58
 8004cba:	e003      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004cbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cc0:	7dfb      	ldrb	r3, [r7, #23]
 8004cc2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d02f      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cd8:	d00e      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8004cda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cde:	d814      	bhi.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d015      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8004ce4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ce8:	d10f      	bne.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cea:	4baf      	ldr	r3, [pc, #700]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cee:	4aae      	ldr	r2, [pc, #696]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cf4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004cf6:	e00c      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	3304      	adds	r3, #4
 8004cfc:	2101      	movs	r1, #1
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f000 ff3c 	bl	8005b7c <RCCEx_PLL2_Config>
 8004d04:	4603      	mov	r3, r0
 8004d06:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004d08:	e003      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	75fb      	strb	r3, [r7, #23]
      break;
 8004d0e:	e000      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8004d10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d12:	7dfb      	ldrb	r3, [r7, #23]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d109      	bne.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004d18:	4ba3      	ldr	r3, [pc, #652]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d1c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d24:	49a0      	ldr	r1, [pc, #640]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	650b      	str	r3, [r1, #80]	; 0x50
 8004d2a:	e001      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d2c:	7dfb      	ldrb	r3, [r7, #23]
 8004d2e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d032      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d40:	2b03      	cmp	r3, #3
 8004d42:	d81b      	bhi.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004d44:	a201      	add	r2, pc, #4	; (adr r2, 8004d4c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8004d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4a:	bf00      	nop
 8004d4c:	08004d83 	.word	0x08004d83
 8004d50:	08004d5d 	.word	0x08004d5d
 8004d54:	08004d6b 	.word	0x08004d6b
 8004d58:	08004d83 	.word	0x08004d83
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d5c:	4b92      	ldr	r3, [pc, #584]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d60:	4a91      	ldr	r2, [pc, #580]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004d68:	e00c      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	3304      	adds	r3, #4
 8004d6e:	2102      	movs	r1, #2
 8004d70:	4618      	mov	r0, r3
 8004d72:	f000 ff03 	bl	8005b7c <RCCEx_PLL2_Config>
 8004d76:	4603      	mov	r3, r0
 8004d78:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004d7a:	e003      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d80:	e000      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004d82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d84:	7dfb      	ldrb	r3, [r7, #23]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d109      	bne.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004d8a:	4b87      	ldr	r3, [pc, #540]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d8e:	f023 0203 	bic.w	r2, r3, #3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d96:	4984      	ldr	r1, [pc, #528]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004d9c:	e001      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d9e:	7dfb      	ldrb	r3, [r7, #23]
 8004da0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f000 8086 	beq.w	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004db0:	4b7e      	ldr	r3, [pc, #504]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a7d      	ldr	r2, [pc, #500]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004dbc:	f7fd fe0c 	bl	80029d8 <HAL_GetTick>
 8004dc0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004dc2:	e009      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dc4:	f7fd fe08 	bl	80029d8 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	2b64      	cmp	r3, #100	; 0x64
 8004dd0:	d902      	bls.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	75fb      	strb	r3, [r7, #23]
        break;
 8004dd6:	e005      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004dd8:	4b74      	ldr	r3, [pc, #464]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d0ef      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004de4:	7dfb      	ldrb	r3, [r7, #23]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d166      	bne.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004dea:	4b6f      	ldr	r3, [pc, #444]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004dec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004df4:	4053      	eors	r3, r2
 8004df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d013      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004dfe:	4b6a      	ldr	r3, [pc, #424]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e06:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e08:	4b67      	ldr	r3, [pc, #412]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e0c:	4a66      	ldr	r2, [pc, #408]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e12:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e14:	4b64      	ldr	r3, [pc, #400]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e18:	4a63      	ldr	r2, [pc, #396]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e1e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004e20:	4a61      	ldr	r2, [pc, #388]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e30:	d115      	bne.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e32:	f7fd fdd1 	bl	80029d8 <HAL_GetTick>
 8004e36:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e38:	e00b      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e3a:	f7fd fdcd 	bl	80029d8 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d902      	bls.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	75fb      	strb	r3, [r7, #23]
            break;
 8004e50:	e005      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e52:	4b55      	ldr	r3, [pc, #340]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d0ed      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004e5e:	7dfb      	ldrb	r3, [r7, #23]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d126      	bne.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e72:	d10d      	bne.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004e74:	4b4c      	ldr	r3, [pc, #304]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e82:	0919      	lsrs	r1, r3, #4
 8004e84:	4b4a      	ldr	r3, [pc, #296]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8004e86:	400b      	ands	r3, r1
 8004e88:	4947      	ldr	r1, [pc, #284]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	610b      	str	r3, [r1, #16]
 8004e8e:	e005      	b.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004e90:	4b45      	ldr	r3, [pc, #276]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	4a44      	ldr	r2, [pc, #272]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e96:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004e9a:	6113      	str	r3, [r2, #16]
 8004e9c:	4b42      	ldr	r3, [pc, #264]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ea6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004eaa:	493f      	ldr	r1, [pc, #252]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	670b      	str	r3, [r1, #112]	; 0x70
 8004eb0:	e004      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004eb2:	7dfb      	ldrb	r3, [r7, #23]
 8004eb4:	75bb      	strb	r3, [r7, #22]
 8004eb6:	e001      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eb8:	7dfb      	ldrb	r3, [r7, #23]
 8004eba:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0301 	and.w	r3, r3, #1
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f000 8085 	beq.w	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ece:	2b28      	cmp	r3, #40	; 0x28
 8004ed0:	d866      	bhi.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004ed2:	a201      	add	r2, pc, #4	; (adr r2, 8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed8:	08004fb5 	.word	0x08004fb5
 8004edc:	08004fa1 	.word	0x08004fa1
 8004ee0:	08004fa1 	.word	0x08004fa1
 8004ee4:	08004fa1 	.word	0x08004fa1
 8004ee8:	08004fa1 	.word	0x08004fa1
 8004eec:	08004fa1 	.word	0x08004fa1
 8004ef0:	08004fa1 	.word	0x08004fa1
 8004ef4:	08004fa1 	.word	0x08004fa1
 8004ef8:	08004f7d 	.word	0x08004f7d
 8004efc:	08004fa1 	.word	0x08004fa1
 8004f00:	08004fa1 	.word	0x08004fa1
 8004f04:	08004fa1 	.word	0x08004fa1
 8004f08:	08004fa1 	.word	0x08004fa1
 8004f0c:	08004fa1 	.word	0x08004fa1
 8004f10:	08004fa1 	.word	0x08004fa1
 8004f14:	08004fa1 	.word	0x08004fa1
 8004f18:	08004f8f 	.word	0x08004f8f
 8004f1c:	08004fa1 	.word	0x08004fa1
 8004f20:	08004fa1 	.word	0x08004fa1
 8004f24:	08004fa1 	.word	0x08004fa1
 8004f28:	08004fa1 	.word	0x08004fa1
 8004f2c:	08004fa1 	.word	0x08004fa1
 8004f30:	08004fa1 	.word	0x08004fa1
 8004f34:	08004fa1 	.word	0x08004fa1
 8004f38:	08004fb5 	.word	0x08004fb5
 8004f3c:	08004fa1 	.word	0x08004fa1
 8004f40:	08004fa1 	.word	0x08004fa1
 8004f44:	08004fa1 	.word	0x08004fa1
 8004f48:	08004fa1 	.word	0x08004fa1
 8004f4c:	08004fa1 	.word	0x08004fa1
 8004f50:	08004fa1 	.word	0x08004fa1
 8004f54:	08004fa1 	.word	0x08004fa1
 8004f58:	08004fb5 	.word	0x08004fb5
 8004f5c:	08004fa1 	.word	0x08004fa1
 8004f60:	08004fa1 	.word	0x08004fa1
 8004f64:	08004fa1 	.word	0x08004fa1
 8004f68:	08004fa1 	.word	0x08004fa1
 8004f6c:	08004fa1 	.word	0x08004fa1
 8004f70:	08004fa1 	.word	0x08004fa1
 8004f74:	08004fa1 	.word	0x08004fa1
 8004f78:	08004fb5 	.word	0x08004fb5
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	3304      	adds	r3, #4
 8004f80:	2101      	movs	r1, #1
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 fdfa 	bl	8005b7c <RCCEx_PLL2_Config>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004f8c:	e013      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	3324      	adds	r3, #36	; 0x24
 8004f92:	2101      	movs	r1, #1
 8004f94:	4618      	mov	r0, r3
 8004f96:	f000 fea3 	bl	8005ce0 <RCCEx_PLL3_Config>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004f9e:	e00a      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	75fb      	strb	r3, [r7, #23]
      break;
 8004fa4:	e007      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004fa6:	bf00      	nop
 8004fa8:	58024400 	.word	0x58024400
 8004fac:	58024800 	.word	0x58024800
 8004fb0:	00ffffcf 	.word	0x00ffffcf
      break;
 8004fb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fb6:	7dfb      	ldrb	r3, [r7, #23]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d109      	bne.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004fbc:	4b96      	ldr	r3, [pc, #600]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fc8:	4993      	ldr	r1, [pc, #588]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	654b      	str	r3, [r1, #84]	; 0x54
 8004fce:	e001      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fd0:	7dfb      	ldrb	r3, [r7, #23]
 8004fd2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0302 	and.w	r3, r3, #2
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d038      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fe4:	2b05      	cmp	r3, #5
 8004fe6:	d821      	bhi.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004fe8:	a201      	add	r2, pc, #4	; (adr r2, 8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8004fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fee:	bf00      	nop
 8004ff0:	08005033 	.word	0x08005033
 8004ff4:	08005009 	.word	0x08005009
 8004ff8:	0800501b 	.word	0x0800501b
 8004ffc:	08005033 	.word	0x08005033
 8005000:	08005033 	.word	0x08005033
 8005004:	08005033 	.word	0x08005033
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	3304      	adds	r3, #4
 800500c:	2101      	movs	r1, #1
 800500e:	4618      	mov	r0, r3
 8005010:	f000 fdb4 	bl	8005b7c <RCCEx_PLL2_Config>
 8005014:	4603      	mov	r3, r0
 8005016:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005018:	e00c      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	3324      	adds	r3, #36	; 0x24
 800501e:	2101      	movs	r1, #1
 8005020:	4618      	mov	r0, r3
 8005022:	f000 fe5d 	bl	8005ce0 <RCCEx_PLL3_Config>
 8005026:	4603      	mov	r3, r0
 8005028:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800502a:	e003      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	75fb      	strb	r3, [r7, #23]
      break;
 8005030:	e000      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8005032:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005034:	7dfb      	ldrb	r3, [r7, #23]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d109      	bne.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800503a:	4b77      	ldr	r3, [pc, #476]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800503c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800503e:	f023 0207 	bic.w	r2, r3, #7
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005046:	4974      	ldr	r1, [pc, #464]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005048:	4313      	orrs	r3, r2
 800504a:	654b      	str	r3, [r1, #84]	; 0x54
 800504c:	e001      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800504e:	7dfb      	ldrb	r3, [r7, #23]
 8005050:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0304 	and.w	r3, r3, #4
 800505a:	2b00      	cmp	r3, #0
 800505c:	d03a      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005064:	2b05      	cmp	r3, #5
 8005066:	d821      	bhi.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x938>
 8005068:	a201      	add	r2, pc, #4	; (adr r2, 8005070 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800506a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506e:	bf00      	nop
 8005070:	080050b3 	.word	0x080050b3
 8005074:	08005089 	.word	0x08005089
 8005078:	0800509b 	.word	0x0800509b
 800507c:	080050b3 	.word	0x080050b3
 8005080:	080050b3 	.word	0x080050b3
 8005084:	080050b3 	.word	0x080050b3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	3304      	adds	r3, #4
 800508c:	2101      	movs	r1, #1
 800508e:	4618      	mov	r0, r3
 8005090:	f000 fd74 	bl	8005b7c <RCCEx_PLL2_Config>
 8005094:	4603      	mov	r3, r0
 8005096:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005098:	e00c      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	3324      	adds	r3, #36	; 0x24
 800509e:	2101      	movs	r1, #1
 80050a0:	4618      	mov	r0, r3
 80050a2:	f000 fe1d 	bl	8005ce0 <RCCEx_PLL3_Config>
 80050a6:	4603      	mov	r3, r0
 80050a8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80050aa:	e003      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	75fb      	strb	r3, [r7, #23]
      break;
 80050b0:	e000      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80050b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050b4:	7dfb      	ldrb	r3, [r7, #23]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10a      	bne.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80050ba:	4b57      	ldr	r3, [pc, #348]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80050bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050be:	f023 0207 	bic.w	r2, r3, #7
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c8:	4953      	ldr	r1, [pc, #332]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	658b      	str	r3, [r1, #88]	; 0x58
 80050ce:	e001      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d0:	7dfb      	ldrb	r3, [r7, #23]
 80050d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0320 	and.w	r3, r3, #32
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d04b      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050ea:	d02e      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80050ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050f0:	d828      	bhi.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80050f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050f6:	d02a      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80050f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050fc:	d822      	bhi.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80050fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005102:	d026      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005104:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005108:	d81c      	bhi.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800510a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800510e:	d010      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8005110:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005114:	d816      	bhi.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005116:	2b00      	cmp	r3, #0
 8005118:	d01d      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800511a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800511e:	d111      	bne.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	3304      	adds	r3, #4
 8005124:	2100      	movs	r1, #0
 8005126:	4618      	mov	r0, r3
 8005128:	f000 fd28 	bl	8005b7c <RCCEx_PLL2_Config>
 800512c:	4603      	mov	r3, r0
 800512e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005130:	e012      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	3324      	adds	r3, #36	; 0x24
 8005136:	2102      	movs	r1, #2
 8005138:	4618      	mov	r0, r3
 800513a:	f000 fdd1 	bl	8005ce0 <RCCEx_PLL3_Config>
 800513e:	4603      	mov	r3, r0
 8005140:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005142:	e009      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	75fb      	strb	r3, [r7, #23]
      break;
 8005148:	e006      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800514a:	bf00      	nop
 800514c:	e004      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800514e:	bf00      	nop
 8005150:	e002      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005152:	bf00      	nop
 8005154:	e000      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005156:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005158:	7dfb      	ldrb	r3, [r7, #23]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10a      	bne.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800515e:	4b2e      	ldr	r3, [pc, #184]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005162:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800516c:	492a      	ldr	r1, [pc, #168]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800516e:	4313      	orrs	r3, r2
 8005170:	654b      	str	r3, [r1, #84]	; 0x54
 8005172:	e001      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005174:	7dfb      	ldrb	r3, [r7, #23]
 8005176:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005180:	2b00      	cmp	r3, #0
 8005182:	d04d      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800518a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800518e:	d02e      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005190:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005194:	d828      	bhi.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800519a:	d02a      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800519c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051a0:	d822      	bhi.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80051a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051a6:	d026      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80051a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051ac:	d81c      	bhi.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80051ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051b2:	d010      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80051b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051b8:	d816      	bhi.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d01d      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80051be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051c2:	d111      	bne.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	3304      	adds	r3, #4
 80051c8:	2100      	movs	r1, #0
 80051ca:	4618      	mov	r0, r3
 80051cc:	f000 fcd6 	bl	8005b7c <RCCEx_PLL2_Config>
 80051d0:	4603      	mov	r3, r0
 80051d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80051d4:	e012      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	3324      	adds	r3, #36	; 0x24
 80051da:	2102      	movs	r1, #2
 80051dc:	4618      	mov	r0, r3
 80051de:	f000 fd7f 	bl	8005ce0 <RCCEx_PLL3_Config>
 80051e2:	4603      	mov	r3, r0
 80051e4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80051e6:	e009      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	75fb      	strb	r3, [r7, #23]
      break;
 80051ec:	e006      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80051ee:	bf00      	nop
 80051f0:	e004      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80051f2:	bf00      	nop
 80051f4:	e002      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80051f6:	bf00      	nop
 80051f8:	e000      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80051fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051fc:	7dfb      	ldrb	r3, [r7, #23]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10c      	bne.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005202:	4b05      	ldr	r3, [pc, #20]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005206:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005210:	4901      	ldr	r1, [pc, #4]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005212:	4313      	orrs	r3, r2
 8005214:	658b      	str	r3, [r1, #88]	; 0x58
 8005216:	e003      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005218:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800521c:	7dfb      	ldrb	r3, [r7, #23]
 800521e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005228:	2b00      	cmp	r3, #0
 800522a:	d04b      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005232:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005236:	d02e      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005238:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800523c:	d828      	bhi.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800523e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005242:	d02a      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005244:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005248:	d822      	bhi.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800524a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800524e:	d026      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8005250:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005254:	d81c      	bhi.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005256:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800525a:	d010      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800525c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005260:	d816      	bhi.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005262:	2b00      	cmp	r3, #0
 8005264:	d01d      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8005266:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800526a:	d111      	bne.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	3304      	adds	r3, #4
 8005270:	2100      	movs	r1, #0
 8005272:	4618      	mov	r0, r3
 8005274:	f000 fc82 	bl	8005b7c <RCCEx_PLL2_Config>
 8005278:	4603      	mov	r3, r0
 800527a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800527c:	e012      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	3324      	adds	r3, #36	; 0x24
 8005282:	2102      	movs	r1, #2
 8005284:	4618      	mov	r0, r3
 8005286:	f000 fd2b 	bl	8005ce0 <RCCEx_PLL3_Config>
 800528a:	4603      	mov	r3, r0
 800528c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800528e:	e009      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	75fb      	strb	r3, [r7, #23]
      break;
 8005294:	e006      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005296:	bf00      	nop
 8005298:	e004      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800529a:	bf00      	nop
 800529c:	e002      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800529e:	bf00      	nop
 80052a0:	e000      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80052a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052a4:	7dfb      	ldrb	r3, [r7, #23]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10a      	bne.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80052aa:	4b9d      	ldr	r3, [pc, #628]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80052ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052b8:	4999      	ldr	r1, [pc, #612]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	658b      	str	r3, [r1, #88]	; 0x58
 80052be:	e001      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052c0:	7dfb      	ldrb	r3, [r7, #23]
 80052c2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0308 	and.w	r3, r3, #8
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d01a      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052da:	d10a      	bne.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	3324      	adds	r3, #36	; 0x24
 80052e0:	2102      	movs	r1, #2
 80052e2:	4618      	mov	r0, r3
 80052e4:	f000 fcfc 	bl	8005ce0 <RCCEx_PLL3_Config>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d001      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80052f2:	4b8b      	ldr	r3, [pc, #556]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80052f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005300:	4987      	ldr	r1, [pc, #540]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005302:	4313      	orrs	r3, r2
 8005304:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0310 	and.w	r3, r3, #16
 800530e:	2b00      	cmp	r3, #0
 8005310:	d01a      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005318:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800531c:	d10a      	bne.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	3324      	adds	r3, #36	; 0x24
 8005322:	2102      	movs	r1, #2
 8005324:	4618      	mov	r0, r3
 8005326:	f000 fcdb 	bl	8005ce0 <RCCEx_PLL3_Config>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d001      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005334:	4b7a      	ldr	r3, [pc, #488]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005338:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005342:	4977      	ldr	r1, [pc, #476]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005344:	4313      	orrs	r3, r2
 8005346:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d034      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800535a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800535e:	d01d      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005360:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005364:	d817      	bhi.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800536a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800536e:	d009      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005370:	e011      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	3304      	adds	r3, #4
 8005376:	2100      	movs	r1, #0
 8005378:	4618      	mov	r0, r3
 800537a:	f000 fbff 	bl	8005b7c <RCCEx_PLL2_Config>
 800537e:	4603      	mov	r3, r0
 8005380:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005382:	e00c      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	3324      	adds	r3, #36	; 0x24
 8005388:	2102      	movs	r1, #2
 800538a:	4618      	mov	r0, r3
 800538c:	f000 fca8 	bl	8005ce0 <RCCEx_PLL3_Config>
 8005390:	4603      	mov	r3, r0
 8005392:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005394:	e003      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	75fb      	strb	r3, [r7, #23]
      break;
 800539a:	e000      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800539c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800539e:	7dfb      	ldrb	r3, [r7, #23]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10a      	bne.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053a4:	4b5e      	ldr	r3, [pc, #376]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80053a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80053b2:	495b      	ldr	r1, [pc, #364]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	658b      	str	r3, [r1, #88]	; 0x58
 80053b8:	e001      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ba:	7dfb      	ldrb	r3, [r7, #23]
 80053bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d033      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80053d4:	d01c      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80053d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80053da:	d816      	bhi.n	800540a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80053dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053e0:	d003      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80053e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053e6:	d007      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80053e8:	e00f      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053ea:	4b4d      	ldr	r3, [pc, #308]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80053ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ee:	4a4c      	ldr	r2, [pc, #304]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80053f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80053f6:	e00c      	b.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	3324      	adds	r3, #36	; 0x24
 80053fc:	2101      	movs	r1, #1
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 fc6e 	bl	8005ce0 <RCCEx_PLL3_Config>
 8005404:	4603      	mov	r3, r0
 8005406:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005408:	e003      	b.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	75fb      	strb	r3, [r7, #23]
      break;
 800540e:	e000      	b.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8005410:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005412:	7dfb      	ldrb	r3, [r7, #23]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10a      	bne.n	800542e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005418:	4b41      	ldr	r3, [pc, #260]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800541a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800541c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005426:	493e      	ldr	r1, [pc, #248]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005428:	4313      	orrs	r3, r2
 800542a:	654b      	str	r3, [r1, #84]	; 0x54
 800542c:	e001      	b.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800542e:	7dfb      	ldrb	r3, [r7, #23]
 8005430:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d029      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005442:	2b00      	cmp	r3, #0
 8005444:	d003      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8005446:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800544a:	d007      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800544c:	e00f      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800544e:	4b34      	ldr	r3, [pc, #208]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005452:	4a33      	ldr	r2, [pc, #204]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005458:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800545a:	e00b      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	3304      	adds	r3, #4
 8005460:	2102      	movs	r1, #2
 8005462:	4618      	mov	r0, r3
 8005464:	f000 fb8a 	bl	8005b7c <RCCEx_PLL2_Config>
 8005468:	4603      	mov	r3, r0
 800546a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800546c:	e002      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	75fb      	strb	r3, [r7, #23]
      break;
 8005472:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005474:	7dfb      	ldrb	r3, [r7, #23]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d109      	bne.n	800548e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800547a:	4b29      	ldr	r3, [pc, #164]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800547c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800547e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005486:	4926      	ldr	r1, [pc, #152]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005488:	4313      	orrs	r3, r2
 800548a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800548c:	e001      	b.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800548e:	7dfb      	ldrb	r3, [r7, #23]
 8005490:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00a      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	3324      	adds	r3, #36	; 0x24
 80054a2:	2102      	movs	r1, #2
 80054a4:	4618      	mov	r0, r3
 80054a6:	f000 fc1b 	bl	8005ce0 <RCCEx_PLL3_Config>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d001      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d033      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054c8:	d017      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80054ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054ce:	d811      	bhi.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80054d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054d4:	d013      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80054d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054da:	d80b      	bhi.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d010      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80054e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054e4:	d106      	bne.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054e6:	4b0e      	ldr	r3, [pc, #56]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80054e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ea:	4a0d      	ldr	r2, [pc, #52]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80054ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80054f2:	e007      	b.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	75fb      	strb	r3, [r7, #23]
      break;
 80054f8:	e004      	b.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80054fa:	bf00      	nop
 80054fc:	e002      	b.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80054fe:	bf00      	nop
 8005500:	e000      	b.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005502:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005504:	7dfb      	ldrb	r3, [r7, #23]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10c      	bne.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800550a:	4b05      	ldr	r3, [pc, #20]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800550c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800550e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005516:	4902      	ldr	r1, [pc, #8]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005518:	4313      	orrs	r3, r2
 800551a:	654b      	str	r3, [r1, #84]	; 0x54
 800551c:	e004      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800551e:	bf00      	nop
 8005520:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005524:	7dfb      	ldrb	r3, [r7, #23]
 8005526:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d008      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005534:	4b31      	ldr	r3, [pc, #196]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005538:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005540:	492e      	ldr	r1, [pc, #184]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005542:	4313      	orrs	r3, r2
 8005544:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d009      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005552:	4b2a      	ldr	r3, [pc, #168]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005560:	4926      	ldr	r1, [pc, #152]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005562:	4313      	orrs	r3, r2
 8005564:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d008      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005572:	4b22      	ldr	r3, [pc, #136]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005576:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800557e:	491f      	ldr	r1, [pc, #124]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005580:	4313      	orrs	r3, r2
 8005582:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00d      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005590:	4b1a      	ldr	r3, [pc, #104]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	4a19      	ldr	r2, [pc, #100]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005596:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800559a:	6113      	str	r3, [r2, #16]
 800559c:	4b17      	ldr	r3, [pc, #92]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800559e:	691a      	ldr	r2, [r3, #16]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80055a6:	4915      	ldr	r1, [pc, #84]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	da08      	bge.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80055b4:	4b11      	ldr	r3, [pc, #68]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80055b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055b8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055c0:	490e      	ldr	r1, [pc, #56]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d009      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80055d2:	4b0a      	ldr	r3, [pc, #40]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80055d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e0:	4906      	ldr	r1, [pc, #24]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80055e6:	7dbb      	ldrb	r3, [r7, #22]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d101      	bne.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80055ec:	2300      	movs	r3, #0
 80055ee:	e000      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3718      	adds	r7, #24
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	58024400 	.word	0x58024400

08005600 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005604:	f7ff f818 	bl	8004638 <HAL_RCC_GetHCLKFreq>
 8005608:	4602      	mov	r2, r0
 800560a:	4b06      	ldr	r3, [pc, #24]	; (8005624 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	091b      	lsrs	r3, r3, #4
 8005610:	f003 0307 	and.w	r3, r3, #7
 8005614:	4904      	ldr	r1, [pc, #16]	; (8005628 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005616:	5ccb      	ldrb	r3, [r1, r3]
 8005618:	f003 031f 	and.w	r3, r3, #31
 800561c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005620:	4618      	mov	r0, r3
 8005622:	bd80      	pop	{r7, pc}
 8005624:	58024400 	.word	0x58024400
 8005628:	0800d518 	.word	0x0800d518

0800562c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800562c:	b480      	push	{r7}
 800562e:	b089      	sub	sp, #36	; 0x24
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005634:	4ba1      	ldr	r3, [pc, #644]	; (80058bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005638:	f003 0303 	and.w	r3, r3, #3
 800563c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800563e:	4b9f      	ldr	r3, [pc, #636]	; (80058bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005642:	0b1b      	lsrs	r3, r3, #12
 8005644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005648:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800564a:	4b9c      	ldr	r3, [pc, #624]	; (80058bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800564c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564e:	091b      	lsrs	r3, r3, #4
 8005650:	f003 0301 	and.w	r3, r3, #1
 8005654:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005656:	4b99      	ldr	r3, [pc, #612]	; (80058bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800565a:	08db      	lsrs	r3, r3, #3
 800565c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	fb02 f303 	mul.w	r3, r2, r3
 8005666:	ee07 3a90 	vmov	s15, r3
 800566a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800566e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	2b00      	cmp	r3, #0
 8005676:	f000 8111 	beq.w	800589c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	2b02      	cmp	r3, #2
 800567e:	f000 8083 	beq.w	8005788 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	2b02      	cmp	r3, #2
 8005686:	f200 80a1 	bhi.w	80057cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d003      	beq.n	8005698 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d056      	beq.n	8005744 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005696:	e099      	b.n	80057cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005698:	4b88      	ldr	r3, [pc, #544]	; (80058bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0320 	and.w	r3, r3, #32
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d02d      	beq.n	8005700 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80056a4:	4b85      	ldr	r3, [pc, #532]	; (80058bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	08db      	lsrs	r3, r3, #3
 80056aa:	f003 0303 	and.w	r3, r3, #3
 80056ae:	4a84      	ldr	r2, [pc, #528]	; (80058c0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80056b0:	fa22 f303 	lsr.w	r3, r2, r3
 80056b4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	ee07 3a90 	vmov	s15, r3
 80056bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	ee07 3a90 	vmov	s15, r3
 80056c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056ce:	4b7b      	ldr	r3, [pc, #492]	; (80058bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056d6:	ee07 3a90 	vmov	s15, r3
 80056da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056de:	ed97 6a03 	vldr	s12, [r7, #12]
 80056e2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80058c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80056e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056fa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80056fe:	e087      	b.n	8005810 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	ee07 3a90 	vmov	s15, r3
 8005706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800570a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80058c8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800570e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005712:	4b6a      	ldr	r3, [pc, #424]	; (80058bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800571a:	ee07 3a90 	vmov	s15, r3
 800571e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005722:	ed97 6a03 	vldr	s12, [r7, #12]
 8005726:	eddf 5a67 	vldr	s11, [pc, #412]	; 80058c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800572a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800572e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005732:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800573a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800573e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005742:	e065      	b.n	8005810 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	ee07 3a90 	vmov	s15, r3
 800574a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800574e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80058cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005756:	4b59      	ldr	r3, [pc, #356]	; (80058bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800575e:	ee07 3a90 	vmov	s15, r3
 8005762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005766:	ed97 6a03 	vldr	s12, [r7, #12]
 800576a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80058c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800576e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005776:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800577a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800577e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005782:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005786:	e043      	b.n	8005810 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	ee07 3a90 	vmov	s15, r3
 800578e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005792:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80058d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800579a:	4b48      	ldr	r3, [pc, #288]	; (80058bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800579c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057a2:	ee07 3a90 	vmov	s15, r3
 80057a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80057ae:	eddf 5a45 	vldr	s11, [pc, #276]	; 80058c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80057b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057ca:	e021      	b.n	8005810 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	ee07 3a90 	vmov	s15, r3
 80057d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80058cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80057da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057de:	4b37      	ldr	r3, [pc, #220]	; (80058bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057e6:	ee07 3a90 	vmov	s15, r3
 80057ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80057f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80058c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80057f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800580a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800580e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005810:	4b2a      	ldr	r3, [pc, #168]	; (80058bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005814:	0a5b      	lsrs	r3, r3, #9
 8005816:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800581a:	ee07 3a90 	vmov	s15, r3
 800581e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005822:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005826:	ee37 7a87 	vadd.f32	s14, s15, s14
 800582a:	edd7 6a07 	vldr	s13, [r7, #28]
 800582e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005832:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005836:	ee17 2a90 	vmov	r2, s15
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800583e:	4b1f      	ldr	r3, [pc, #124]	; (80058bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005842:	0c1b      	lsrs	r3, r3, #16
 8005844:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005848:	ee07 3a90 	vmov	s15, r3
 800584c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005850:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005854:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005858:	edd7 6a07 	vldr	s13, [r7, #28]
 800585c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005860:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005864:	ee17 2a90 	vmov	r2, s15
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800586c:	4b13      	ldr	r3, [pc, #76]	; (80058bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800586e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005870:	0e1b      	lsrs	r3, r3, #24
 8005872:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005876:	ee07 3a90 	vmov	s15, r3
 800587a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800587e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005882:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005886:	edd7 6a07 	vldr	s13, [r7, #28]
 800588a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800588e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005892:	ee17 2a90 	vmov	r2, s15
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800589a:	e008      	b.n	80058ae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	609a      	str	r2, [r3, #8]
}
 80058ae:	bf00      	nop
 80058b0:	3724      	adds	r7, #36	; 0x24
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	58024400 	.word	0x58024400
 80058c0:	03d09000 	.word	0x03d09000
 80058c4:	46000000 	.word	0x46000000
 80058c8:	4c742400 	.word	0x4c742400
 80058cc:	4a742400 	.word	0x4a742400
 80058d0:	4af42400 	.word	0x4af42400

080058d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b089      	sub	sp, #36	; 0x24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80058dc:	4ba1      	ldr	r3, [pc, #644]	; (8005b64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e0:	f003 0303 	and.w	r3, r3, #3
 80058e4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80058e6:	4b9f      	ldr	r3, [pc, #636]	; (8005b64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ea:	0d1b      	lsrs	r3, r3, #20
 80058ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058f0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80058f2:	4b9c      	ldr	r3, [pc, #624]	; (8005b64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f6:	0a1b      	lsrs	r3, r3, #8
 80058f8:	f003 0301 	and.w	r3, r3, #1
 80058fc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80058fe:	4b99      	ldr	r3, [pc, #612]	; (8005b64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005902:	08db      	lsrs	r3, r3, #3
 8005904:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	fb02 f303 	mul.w	r3, r2, r3
 800590e:	ee07 3a90 	vmov	s15, r3
 8005912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005916:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	2b00      	cmp	r3, #0
 800591e:	f000 8111 	beq.w	8005b44 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	2b02      	cmp	r3, #2
 8005926:	f000 8083 	beq.w	8005a30 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	2b02      	cmp	r3, #2
 800592e:	f200 80a1 	bhi.w	8005a74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d003      	beq.n	8005940 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d056      	beq.n	80059ec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800593e:	e099      	b.n	8005a74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005940:	4b88      	ldr	r3, [pc, #544]	; (8005b64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0320 	and.w	r3, r3, #32
 8005948:	2b00      	cmp	r3, #0
 800594a:	d02d      	beq.n	80059a8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800594c:	4b85      	ldr	r3, [pc, #532]	; (8005b64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	08db      	lsrs	r3, r3, #3
 8005952:	f003 0303 	and.w	r3, r3, #3
 8005956:	4a84      	ldr	r2, [pc, #528]	; (8005b68 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005958:	fa22 f303 	lsr.w	r3, r2, r3
 800595c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	ee07 3a90 	vmov	s15, r3
 8005964:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	ee07 3a90 	vmov	s15, r3
 800596e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005976:	4b7b      	ldr	r3, [pc, #492]	; (8005b64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800597e:	ee07 3a90 	vmov	s15, r3
 8005982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005986:	ed97 6a03 	vldr	s12, [r7, #12]
 800598a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005b6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800598e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800599a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800599e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059a2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80059a6:	e087      	b.n	8005ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	ee07 3a90 	vmov	s15, r3
 80059ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005b70 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80059b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059ba:	4b6a      	ldr	r3, [pc, #424]	; (8005b64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059c2:	ee07 3a90 	vmov	s15, r3
 80059c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80059ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005b6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80059d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059ea:	e065      	b.n	8005ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	ee07 3a90 	vmov	s15, r3
 80059f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005b74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80059fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059fe:	4b59      	ldr	r3, [pc, #356]	; (8005b64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a06:	ee07 3a90 	vmov	s15, r3
 8005a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a12:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005b6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a2e:	e043      	b.n	8005ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	ee07 3a90 	vmov	s15, r3
 8005a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a3a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005b78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a42:	4b48      	ldr	r3, [pc, #288]	; (8005b64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a4a:	ee07 3a90 	vmov	s15, r3
 8005a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a52:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a56:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005b6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a72:	e021      	b.n	8005ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	ee07 3a90 	vmov	s15, r3
 8005a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a7e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005b74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a86:	4b37      	ldr	r3, [pc, #220]	; (8005b64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a8e:	ee07 3a90 	vmov	s15, r3
 8005a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a96:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a9a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005b6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ab2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ab6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005ab8:	4b2a      	ldr	r3, [pc, #168]	; (8005b64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005abc:	0a5b      	lsrs	r3, r3, #9
 8005abe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ac2:	ee07 3a90 	vmov	s15, r3
 8005ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ace:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ad2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ad6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ada:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ade:	ee17 2a90 	vmov	r2, s15
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005ae6:	4b1f      	ldr	r3, [pc, #124]	; (8005b64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aea:	0c1b      	lsrs	r3, r3, #16
 8005aec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005af0:	ee07 3a90 	vmov	s15, r3
 8005af4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005af8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005afc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b00:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b0c:	ee17 2a90 	vmov	r2, s15
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005b14:	4b13      	ldr	r3, [pc, #76]	; (8005b64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b18:	0e1b      	lsrs	r3, r3, #24
 8005b1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b1e:	ee07 3a90 	vmov	s15, r3
 8005b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b3a:	ee17 2a90 	vmov	r2, s15
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005b42:	e008      	b.n	8005b56 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	609a      	str	r2, [r3, #8]
}
 8005b56:	bf00      	nop
 8005b58:	3724      	adds	r7, #36	; 0x24
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	58024400 	.word	0x58024400
 8005b68:	03d09000 	.word	0x03d09000
 8005b6c:	46000000 	.word	0x46000000
 8005b70:	4c742400 	.word	0x4c742400
 8005b74:	4a742400 	.word	0x4a742400
 8005b78:	4af42400 	.word	0x4af42400

08005b7c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b86:	2300      	movs	r3, #0
 8005b88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005b8a:	4b53      	ldr	r3, [pc, #332]	; (8005cd8 <RCCEx_PLL2_Config+0x15c>)
 8005b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8e:	f003 0303 	and.w	r3, r3, #3
 8005b92:	2b03      	cmp	r3, #3
 8005b94:	d101      	bne.n	8005b9a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e099      	b.n	8005cce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005b9a:	4b4f      	ldr	r3, [pc, #316]	; (8005cd8 <RCCEx_PLL2_Config+0x15c>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a4e      	ldr	r2, [pc, #312]	; (8005cd8 <RCCEx_PLL2_Config+0x15c>)
 8005ba0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ba4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ba6:	f7fc ff17 	bl	80029d8 <HAL_GetTick>
 8005baa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005bac:	e008      	b.n	8005bc0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005bae:	f7fc ff13 	bl	80029d8 <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d901      	bls.n	8005bc0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e086      	b.n	8005cce <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005bc0:	4b45      	ldr	r3, [pc, #276]	; (8005cd8 <RCCEx_PLL2_Config+0x15c>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1f0      	bne.n	8005bae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005bcc:	4b42      	ldr	r3, [pc, #264]	; (8005cd8 <RCCEx_PLL2_Config+0x15c>)
 8005bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	031b      	lsls	r3, r3, #12
 8005bda:	493f      	ldr	r1, [pc, #252]	; (8005cd8 <RCCEx_PLL2_Config+0x15c>)
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	628b      	str	r3, [r1, #40]	; 0x28
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	3b01      	subs	r3, #1
 8005be6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	025b      	lsls	r3, r3, #9
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	431a      	orrs	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	041b      	lsls	r3, r3, #16
 8005bfe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005c02:	431a      	orrs	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	061b      	lsls	r3, r3, #24
 8005c0c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005c10:	4931      	ldr	r1, [pc, #196]	; (8005cd8 <RCCEx_PLL2_Config+0x15c>)
 8005c12:	4313      	orrs	r3, r2
 8005c14:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005c16:	4b30      	ldr	r3, [pc, #192]	; (8005cd8 <RCCEx_PLL2_Config+0x15c>)
 8005c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	492d      	ldr	r1, [pc, #180]	; (8005cd8 <RCCEx_PLL2_Config+0x15c>)
 8005c24:	4313      	orrs	r3, r2
 8005c26:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005c28:	4b2b      	ldr	r3, [pc, #172]	; (8005cd8 <RCCEx_PLL2_Config+0x15c>)
 8005c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2c:	f023 0220 	bic.w	r2, r3, #32
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	4928      	ldr	r1, [pc, #160]	; (8005cd8 <RCCEx_PLL2_Config+0x15c>)
 8005c36:	4313      	orrs	r3, r2
 8005c38:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005c3a:	4b27      	ldr	r3, [pc, #156]	; (8005cd8 <RCCEx_PLL2_Config+0x15c>)
 8005c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3e:	4a26      	ldr	r2, [pc, #152]	; (8005cd8 <RCCEx_PLL2_Config+0x15c>)
 8005c40:	f023 0310 	bic.w	r3, r3, #16
 8005c44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005c46:	4b24      	ldr	r3, [pc, #144]	; (8005cd8 <RCCEx_PLL2_Config+0x15c>)
 8005c48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c4a:	4b24      	ldr	r3, [pc, #144]	; (8005cdc <RCCEx_PLL2_Config+0x160>)
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	69d2      	ldr	r2, [r2, #28]
 8005c52:	00d2      	lsls	r2, r2, #3
 8005c54:	4920      	ldr	r1, [pc, #128]	; (8005cd8 <RCCEx_PLL2_Config+0x15c>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005c5a:	4b1f      	ldr	r3, [pc, #124]	; (8005cd8 <RCCEx_PLL2_Config+0x15c>)
 8005c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5e:	4a1e      	ldr	r2, [pc, #120]	; (8005cd8 <RCCEx_PLL2_Config+0x15c>)
 8005c60:	f043 0310 	orr.w	r3, r3, #16
 8005c64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d106      	bne.n	8005c7a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005c6c:	4b1a      	ldr	r3, [pc, #104]	; (8005cd8 <RCCEx_PLL2_Config+0x15c>)
 8005c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c70:	4a19      	ldr	r2, [pc, #100]	; (8005cd8 <RCCEx_PLL2_Config+0x15c>)
 8005c72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005c78:	e00f      	b.n	8005c9a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d106      	bne.n	8005c8e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005c80:	4b15      	ldr	r3, [pc, #84]	; (8005cd8 <RCCEx_PLL2_Config+0x15c>)
 8005c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c84:	4a14      	ldr	r2, [pc, #80]	; (8005cd8 <RCCEx_PLL2_Config+0x15c>)
 8005c86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005c8c:	e005      	b.n	8005c9a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005c8e:	4b12      	ldr	r3, [pc, #72]	; (8005cd8 <RCCEx_PLL2_Config+0x15c>)
 8005c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c92:	4a11      	ldr	r2, [pc, #68]	; (8005cd8 <RCCEx_PLL2_Config+0x15c>)
 8005c94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c98:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005c9a:	4b0f      	ldr	r3, [pc, #60]	; (8005cd8 <RCCEx_PLL2_Config+0x15c>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a0e      	ldr	r2, [pc, #56]	; (8005cd8 <RCCEx_PLL2_Config+0x15c>)
 8005ca0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ca4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ca6:	f7fc fe97 	bl	80029d8 <HAL_GetTick>
 8005caa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005cac:	e008      	b.n	8005cc0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005cae:	f7fc fe93 	bl	80029d8 <HAL_GetTick>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d901      	bls.n	8005cc0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e006      	b.n	8005cce <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005cc0:	4b05      	ldr	r3, [pc, #20]	; (8005cd8 <RCCEx_PLL2_Config+0x15c>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d0f0      	beq.n	8005cae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	58024400 	.word	0x58024400
 8005cdc:	ffff0007 	.word	0xffff0007

08005ce0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005cea:	2300      	movs	r3, #0
 8005cec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005cee:	4b53      	ldr	r3, [pc, #332]	; (8005e3c <RCCEx_PLL3_Config+0x15c>)
 8005cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf2:	f003 0303 	and.w	r3, r3, #3
 8005cf6:	2b03      	cmp	r3, #3
 8005cf8:	d101      	bne.n	8005cfe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e099      	b.n	8005e32 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005cfe:	4b4f      	ldr	r3, [pc, #316]	; (8005e3c <RCCEx_PLL3_Config+0x15c>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a4e      	ldr	r2, [pc, #312]	; (8005e3c <RCCEx_PLL3_Config+0x15c>)
 8005d04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d0a:	f7fc fe65 	bl	80029d8 <HAL_GetTick>
 8005d0e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005d10:	e008      	b.n	8005d24 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005d12:	f7fc fe61 	bl	80029d8 <HAL_GetTick>
 8005d16:	4602      	mov	r2, r0
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d901      	bls.n	8005d24 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e086      	b.n	8005e32 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005d24:	4b45      	ldr	r3, [pc, #276]	; (8005e3c <RCCEx_PLL3_Config+0x15c>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1f0      	bne.n	8005d12 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005d30:	4b42      	ldr	r3, [pc, #264]	; (8005e3c <RCCEx_PLL3_Config+0x15c>)
 8005d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d34:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	051b      	lsls	r3, r3, #20
 8005d3e:	493f      	ldr	r1, [pc, #252]	; (8005e3c <RCCEx_PLL3_Config+0x15c>)
 8005d40:	4313      	orrs	r3, r2
 8005d42:	628b      	str	r3, [r1, #40]	; 0x28
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	3b01      	subs	r3, #1
 8005d54:	025b      	lsls	r3, r3, #9
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	431a      	orrs	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	041b      	lsls	r3, r3, #16
 8005d62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005d66:	431a      	orrs	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	061b      	lsls	r3, r3, #24
 8005d70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005d74:	4931      	ldr	r1, [pc, #196]	; (8005e3c <RCCEx_PLL3_Config+0x15c>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005d7a:	4b30      	ldr	r3, [pc, #192]	; (8005e3c <RCCEx_PLL3_Config+0x15c>)
 8005d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d7e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	492d      	ldr	r1, [pc, #180]	; (8005e3c <RCCEx_PLL3_Config+0x15c>)
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005d8c:	4b2b      	ldr	r3, [pc, #172]	; (8005e3c <RCCEx_PLL3_Config+0x15c>)
 8005d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d90:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	4928      	ldr	r1, [pc, #160]	; (8005e3c <RCCEx_PLL3_Config+0x15c>)
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005d9e:	4b27      	ldr	r3, [pc, #156]	; (8005e3c <RCCEx_PLL3_Config+0x15c>)
 8005da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da2:	4a26      	ldr	r2, [pc, #152]	; (8005e3c <RCCEx_PLL3_Config+0x15c>)
 8005da4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005da8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005daa:	4b24      	ldr	r3, [pc, #144]	; (8005e3c <RCCEx_PLL3_Config+0x15c>)
 8005dac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dae:	4b24      	ldr	r3, [pc, #144]	; (8005e40 <RCCEx_PLL3_Config+0x160>)
 8005db0:	4013      	ands	r3, r2
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	69d2      	ldr	r2, [r2, #28]
 8005db6:	00d2      	lsls	r2, r2, #3
 8005db8:	4920      	ldr	r1, [pc, #128]	; (8005e3c <RCCEx_PLL3_Config+0x15c>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005dbe:	4b1f      	ldr	r3, [pc, #124]	; (8005e3c <RCCEx_PLL3_Config+0x15c>)
 8005dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc2:	4a1e      	ldr	r2, [pc, #120]	; (8005e3c <RCCEx_PLL3_Config+0x15c>)
 8005dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d106      	bne.n	8005dde <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005dd0:	4b1a      	ldr	r3, [pc, #104]	; (8005e3c <RCCEx_PLL3_Config+0x15c>)
 8005dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd4:	4a19      	ldr	r2, [pc, #100]	; (8005e3c <RCCEx_PLL3_Config+0x15c>)
 8005dd6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005dda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ddc:	e00f      	b.n	8005dfe <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d106      	bne.n	8005df2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005de4:	4b15      	ldr	r3, [pc, #84]	; (8005e3c <RCCEx_PLL3_Config+0x15c>)
 8005de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de8:	4a14      	ldr	r2, [pc, #80]	; (8005e3c <RCCEx_PLL3_Config+0x15c>)
 8005dea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005dee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005df0:	e005      	b.n	8005dfe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005df2:	4b12      	ldr	r3, [pc, #72]	; (8005e3c <RCCEx_PLL3_Config+0x15c>)
 8005df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df6:	4a11      	ldr	r2, [pc, #68]	; (8005e3c <RCCEx_PLL3_Config+0x15c>)
 8005df8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005dfc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005dfe:	4b0f      	ldr	r3, [pc, #60]	; (8005e3c <RCCEx_PLL3_Config+0x15c>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a0e      	ldr	r2, [pc, #56]	; (8005e3c <RCCEx_PLL3_Config+0x15c>)
 8005e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e0a:	f7fc fde5 	bl	80029d8 <HAL_GetTick>
 8005e0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005e10:	e008      	b.n	8005e24 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005e12:	f7fc fde1 	bl	80029d8 <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d901      	bls.n	8005e24 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e006      	b.n	8005e32 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005e24:	4b05      	ldr	r3, [pc, #20]	; (8005e3c <RCCEx_PLL3_Config+0x15c>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d0f0      	beq.n	8005e12 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	58024400 	.word	0x58024400
 8005e40:	ffff0007 	.word	0xffff0007

08005e44 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d101      	bne.n	8005e56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e0f1      	b.n	800603a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a78      	ldr	r2, [pc, #480]	; (8006044 <HAL_SPI_Init+0x200>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d00f      	beq.n	8005e86 <HAL_SPI_Init+0x42>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a77      	ldr	r2, [pc, #476]	; (8006048 <HAL_SPI_Init+0x204>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d00a      	beq.n	8005e86 <HAL_SPI_Init+0x42>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a75      	ldr	r2, [pc, #468]	; (800604c <HAL_SPI_Init+0x208>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d005      	beq.n	8005e86 <HAL_SPI_Init+0x42>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	2b0f      	cmp	r3, #15
 8005e80:	d901      	bls.n	8005e86 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e0d9      	b.n	800603a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 ff66 	bl	8006d58 <SPI_GetPacketSize>
 8005e8c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a6c      	ldr	r2, [pc, #432]	; (8006044 <HAL_SPI_Init+0x200>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d00c      	beq.n	8005eb2 <HAL_SPI_Init+0x6e>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a6a      	ldr	r2, [pc, #424]	; (8006048 <HAL_SPI_Init+0x204>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d007      	beq.n	8005eb2 <HAL_SPI_Init+0x6e>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a69      	ldr	r2, [pc, #420]	; (800604c <HAL_SPI_Init+0x208>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d002      	beq.n	8005eb2 <HAL_SPI_Init+0x6e>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2b08      	cmp	r3, #8
 8005eb0:	d811      	bhi.n	8005ed6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005eb6:	4a63      	ldr	r2, [pc, #396]	; (8006044 <HAL_SPI_Init+0x200>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d009      	beq.n	8005ed0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a61      	ldr	r2, [pc, #388]	; (8006048 <HAL_SPI_Init+0x204>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d004      	beq.n	8005ed0 <HAL_SPI_Init+0x8c>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a60      	ldr	r2, [pc, #384]	; (800604c <HAL_SPI_Init+0x208>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d104      	bne.n	8005eda <HAL_SPI_Init+0x96>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2b10      	cmp	r3, #16
 8005ed4:	d901      	bls.n	8005eda <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e0af      	b.n	800603a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d106      	bne.n	8005ef4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f7fc f9ec 	bl	80022cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2202      	movs	r2, #2
 8005ef8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f022 0201 	bic.w	r2, r2, #1
 8005f0a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8005f16:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f20:	d119      	bne.n	8005f56 <HAL_SPI_Init+0x112>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f2a:	d103      	bne.n	8005f34 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d008      	beq.n	8005f46 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10c      	bne.n	8005f56 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005f40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f44:	d107      	bne.n	8005f56 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f54:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	69da      	ldr	r2, [r3, #28]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f5e:	431a      	orrs	r2, r3
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	431a      	orrs	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f68:	ea42 0103 	orr.w	r1, r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	68da      	ldr	r2, [r3, #12]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	430a      	orrs	r2, r1
 8005f76:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f80:	431a      	orrs	r2, r3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f86:	431a      	orrs	r2, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	699b      	ldr	r3, [r3, #24]
 8005f8c:	431a      	orrs	r2, r3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	431a      	orrs	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	695b      	ldr	r3, [r3, #20]
 8005f98:	431a      	orrs	r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	431a      	orrs	r2, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	431a      	orrs	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005faa:	431a      	orrs	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	431a      	orrs	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fb6:	ea42 0103 	orr.w	r1, r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d113      	bne.n	8005ff6 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fe0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ff4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f022 0201 	bic.w	r2, r2, #1
 8006004:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00a      	beq.n	8006028 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	430a      	orrs	r2, r1
 8006026:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	40013000 	.word	0x40013000
 8006048:	40003800 	.word	0x40003800
 800604c:	40003c00 	.word	0x40003c00

08006050 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b08a      	sub	sp, #40	; 0x28
 8006054:	af02      	add	r7, sp, #8
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	603b      	str	r3, [r7, #0]
 800605c:	4613      	mov	r3, r2
 800605e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	3320      	adds	r3, #32
 8006066:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006068:	2300      	movs	r3, #0
 800606a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006072:	2b01      	cmp	r3, #1
 8006074:	d101      	bne.n	800607a <HAL_SPI_Transmit+0x2a>
 8006076:	2302      	movs	r3, #2
 8006078:	e1d7      	b.n	800642a <HAL_SPI_Transmit+0x3da>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006082:	f7fc fca9 	bl	80029d8 <HAL_GetTick>
 8006086:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800608e:	b2db      	uxtb	r3, r3
 8006090:	2b01      	cmp	r3, #1
 8006092:	d007      	beq.n	80060a4 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8006094:	2302      	movs	r3, #2
 8006096:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2200      	movs	r2, #0
 800609c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80060a0:	7efb      	ldrb	r3, [r7, #27]
 80060a2:	e1c2      	b.n	800642a <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d002      	beq.n	80060b0 <HAL_SPI_Transmit+0x60>
 80060aa:	88fb      	ldrh	r3, [r7, #6]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d107      	bne.n	80060c0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80060bc:	7efb      	ldrb	r3, [r7, #27]
 80060be:	e1b4      	b.n	800642a <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2203      	movs	r2, #3
 80060c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	68ba      	ldr	r2, [r7, #8]
 80060d4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	88fa      	ldrh	r2, [r7, #6]
 80060da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	88fa      	ldrh	r2, [r7, #6]
 80060e2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8006110:	d107      	bne.n	8006122 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006120:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	685a      	ldr	r2, [r3, #4]
 8006128:	4b96      	ldr	r3, [pc, #600]	; (8006384 <HAL_SPI_Transmit+0x334>)
 800612a:	4013      	ands	r3, r2
 800612c:	88f9      	ldrh	r1, [r7, #6]
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	6812      	ldr	r2, [r2, #0]
 8006132:	430b      	orrs	r3, r1
 8006134:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f042 0201 	orr.w	r2, r2, #1
 8006144:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800614e:	d107      	bne.n	8006160 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800615e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	2b0f      	cmp	r3, #15
 8006166:	d947      	bls.n	80061f8 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006168:	e03f      	b.n	80061ea <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	695b      	ldr	r3, [r3, #20]
 8006170:	f003 0302 	and.w	r3, r3, #2
 8006174:	2b02      	cmp	r3, #2
 8006176:	d114      	bne.n	80061a2 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6812      	ldr	r2, [r2, #0]
 8006182:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006188:	1d1a      	adds	r2, r3, #4
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006194:	b29b      	uxth	r3, r3
 8006196:	3b01      	subs	r3, #1
 8006198:	b29a      	uxth	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80061a0:	e023      	b.n	80061ea <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061a2:	f7fc fc19 	bl	80029d8 <HAL_GetTick>
 80061a6:	4602      	mov	r2, r0
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	683a      	ldr	r2, [r7, #0]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d803      	bhi.n	80061ba <HAL_SPI_Transmit+0x16a>
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b8:	d102      	bne.n	80061c0 <HAL_SPI_Transmit+0x170>
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d114      	bne.n	80061ea <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f000 fcfb 	bl	8006bbc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e11f      	b.n	800642a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d1b9      	bne.n	800616a <HAL_SPI_Transmit+0x11a>
 80061f6:	e0f2      	b.n	80063de <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	2b07      	cmp	r3, #7
 80061fe:	f240 80e7 	bls.w	80063d0 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006202:	e05d      	b.n	80062c0 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	695b      	ldr	r3, [r3, #20]
 800620a:	f003 0302 	and.w	r3, r3, #2
 800620e:	2b02      	cmp	r3, #2
 8006210:	d132      	bne.n	8006278 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006218:	b29b      	uxth	r3, r3
 800621a:	2b01      	cmp	r3, #1
 800621c:	d918      	bls.n	8006250 <HAL_SPI_Transmit+0x200>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006222:	2b00      	cmp	r3, #0
 8006224:	d014      	beq.n	8006250 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	6812      	ldr	r2, [r2, #0]
 8006230:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006236:	1d1a      	adds	r2, r3, #4
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006242:	b29b      	uxth	r3, r3
 8006244:	3b02      	subs	r3, #2
 8006246:	b29a      	uxth	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800624e:	e037      	b.n	80062c0 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006254:	881a      	ldrh	r2, [r3, #0]
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800625e:	1c9a      	adds	r2, r3, #2
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800626a:	b29b      	uxth	r3, r3
 800626c:	3b01      	subs	r3, #1
 800626e:	b29a      	uxth	r2, r3
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006276:	e023      	b.n	80062c0 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006278:	f7fc fbae 	bl	80029d8 <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	683a      	ldr	r2, [r7, #0]
 8006284:	429a      	cmp	r2, r3
 8006286:	d803      	bhi.n	8006290 <HAL_SPI_Transmit+0x240>
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800628e:	d102      	bne.n	8006296 <HAL_SPI_Transmit+0x246>
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d114      	bne.n	80062c0 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006296:	68f8      	ldr	r0, [r7, #12]
 8006298:	f000 fc90 	bl	8006bbc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80062bc:	2303      	movs	r3, #3
 80062be:	e0b4      	b.n	800642a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d19b      	bne.n	8006204 <HAL_SPI_Transmit+0x1b4>
 80062cc:	e087      	b.n	80063de <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	695b      	ldr	r3, [r3, #20]
 80062d4:	f003 0302 	and.w	r3, r3, #2
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d155      	bne.n	8006388 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	2b03      	cmp	r3, #3
 80062e6:	d918      	bls.n	800631a <HAL_SPI_Transmit+0x2ca>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ec:	2b40      	cmp	r3, #64	; 0x40
 80062ee:	d914      	bls.n	800631a <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	6812      	ldr	r2, [r2, #0]
 80062fa:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006300:	1d1a      	adds	r2, r3, #4
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800630c:	b29b      	uxth	r3, r3
 800630e:	3b04      	subs	r3, #4
 8006310:	b29a      	uxth	r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006318:	e05a      	b.n	80063d0 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006320:	b29b      	uxth	r3, r3
 8006322:	2b01      	cmp	r3, #1
 8006324:	d917      	bls.n	8006356 <HAL_SPI_Transmit+0x306>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800632a:	2b00      	cmp	r3, #0
 800632c:	d013      	beq.n	8006356 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006332:	881a      	ldrh	r2, [r3, #0]
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800633c:	1c9a      	adds	r2, r3, #2
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006348:	b29b      	uxth	r3, r3
 800634a:	3b02      	subs	r3, #2
 800634c:	b29a      	uxth	r2, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006354:	e03c      	b.n	80063d0 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	3320      	adds	r3, #32
 8006360:	7812      	ldrb	r2, [r2, #0]
 8006362:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006368:	1c5a      	adds	r2, r3, #1
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006374:	b29b      	uxth	r3, r3
 8006376:	3b01      	subs	r3, #1
 8006378:	b29a      	uxth	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006380:	e026      	b.n	80063d0 <HAL_SPI_Transmit+0x380>
 8006382:	bf00      	nop
 8006384:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006388:	f7fc fb26 	bl	80029d8 <HAL_GetTick>
 800638c:	4602      	mov	r2, r0
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	683a      	ldr	r2, [r7, #0]
 8006394:	429a      	cmp	r2, r3
 8006396:	d803      	bhi.n	80063a0 <HAL_SPI_Transmit+0x350>
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800639e:	d102      	bne.n	80063a6 <HAL_SPI_Transmit+0x356>
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d114      	bne.n	80063d0 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f000 fc08 	bl	8006bbc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e02c      	b.n	800642a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f47f af78 	bne.w	80062ce <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	9300      	str	r3, [sp, #0]
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	2200      	movs	r2, #0
 80063e6:	2108      	movs	r1, #8
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	f000 fc87 	bl	8006cfc <SPI_WaitOnFlagUntilTimeout>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d007      	beq.n	8006404 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063fa:	f043 0220 	orr.w	r2, r3, #32
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006404:	68f8      	ldr	r0, [r7, #12]
 8006406:	f000 fbd9 	bl	8006bbc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006420:	2b00      	cmp	r3, #0
 8006422:	d001      	beq.n	8006428 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e000      	b.n	800642a <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8006428:	7efb      	ldrb	r3, [r7, #27]
}
 800642a:	4618      	mov	r0, r3
 800642c:	3720      	adds	r7, #32
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop

08006434 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b08a      	sub	sp, #40	; 0x28
 8006438:	af02      	add	r7, sp, #8
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	603b      	str	r3, [r7, #0]
 8006440:	4613      	mov	r3, r2
 8006442:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006444:	2300      	movs	r3, #0
 8006446:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	3330      	adds	r3, #48	; 0x30
 800644e:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006458:	d112      	bne.n	8006480 <HAL_SPI_Receive+0x4c>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10e      	bne.n	8006480 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2204      	movs	r2, #4
 8006466:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800646a:	88fa      	ldrh	r2, [r7, #6]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	9300      	str	r3, [sp, #0]
 8006470:	4613      	mov	r3, r2
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	68b9      	ldr	r1, [r7, #8]
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f000 f978 	bl	800676c <HAL_SPI_TransmitReceive>
 800647c:	4603      	mov	r3, r0
 800647e:	e16f      	b.n	8006760 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006486:	2b01      	cmp	r3, #1
 8006488:	d101      	bne.n	800648e <HAL_SPI_Receive+0x5a>
 800648a:	2302      	movs	r3, #2
 800648c:	e168      	b.n	8006760 <HAL_SPI_Receive+0x32c>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2201      	movs	r2, #1
 8006492:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006496:	f7fc fa9f 	bl	80029d8 <HAL_GetTick>
 800649a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d007      	beq.n	80064b8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 80064a8:	2302      	movs	r3, #2
 80064aa:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80064b4:	7ffb      	ldrb	r3, [r7, #31]
 80064b6:	e153      	b.n	8006760 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d002      	beq.n	80064c4 <HAL_SPI_Receive+0x90>
 80064be:	88fb      	ldrh	r3, [r7, #6]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d107      	bne.n	80064d4 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80064d0:	7ffb      	ldrb	r3, [r7, #31]
 80064d2:	e145      	b.n	8006760 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2204      	movs	r2, #4
 80064d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	68ba      	ldr	r2, [r7, #8]
 80064e8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	88fa      	ldrh	r2, [r7, #6]
 80064ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	88fa      	ldrh	r2, [r7, #6]
 80064f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2200      	movs	r2, #0
 80064fe:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2200      	movs	r2, #0
 8006504:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8006524:	d107      	bne.n	8006536 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006534:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	4b8a      	ldr	r3, [pc, #552]	; (8006768 <HAL_SPI_Receive+0x334>)
 800653e:	4013      	ands	r3, r2
 8006540:	88f9      	ldrh	r1, [r7, #6]
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	6812      	ldr	r2, [r2, #0]
 8006546:	430b      	orrs	r3, r1
 8006548:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f042 0201 	orr.w	r2, r2, #1
 8006558:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006562:	d107      	bne.n	8006574 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006572:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	2b0f      	cmp	r3, #15
 800657a:	d948      	bls.n	800660e <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800657c:	e040      	b.n	8006600 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	695a      	ldr	r2, [r3, #20]
 8006584:	f248 0308 	movw	r3, #32776	; 0x8008
 8006588:	4013      	ands	r3, r2
 800658a:	2b00      	cmp	r3, #0
 800658c:	d014      	beq.n	80065b8 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006596:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006598:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800659e:	1d1a      	adds	r2, r3, #4
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	3b01      	subs	r3, #1
 80065ae:	b29a      	uxth	r2, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80065b6:	e023      	b.n	8006600 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065b8:	f7fc fa0e 	bl	80029d8 <HAL_GetTick>
 80065bc:	4602      	mov	r2, r0
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	683a      	ldr	r2, [r7, #0]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d803      	bhi.n	80065d0 <HAL_SPI_Receive+0x19c>
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ce:	d102      	bne.n	80065d6 <HAL_SPI_Receive+0x1a2>
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d114      	bne.n	8006600 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80065d6:	68f8      	ldr	r0, [r7, #12]
 80065d8:	f000 faf0 	bl	8006bbc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80065fc:	2303      	movs	r3, #3
 80065fe:	e0af      	b.n	8006760 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006606:	b29b      	uxth	r3, r3
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1b8      	bne.n	800657e <HAL_SPI_Receive+0x14a>
 800660c:	e095      	b.n	800673a <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	2b07      	cmp	r3, #7
 8006614:	f240 808b 	bls.w	800672e <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006618:	e03f      	b.n	800669a <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	695b      	ldr	r3, [r3, #20]
 8006620:	f003 0301 	and.w	r3, r3, #1
 8006624:	2b01      	cmp	r3, #1
 8006626:	d114      	bne.n	8006652 <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800662c:	69ba      	ldr	r2, [r7, #24]
 800662e:	8812      	ldrh	r2, [r2, #0]
 8006630:	b292      	uxth	r2, r2
 8006632:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006638:	1c9a      	adds	r2, r3, #2
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006644:	b29b      	uxth	r3, r3
 8006646:	3b01      	subs	r3, #1
 8006648:	b29a      	uxth	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006650:	e023      	b.n	800669a <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006652:	f7fc f9c1 	bl	80029d8 <HAL_GetTick>
 8006656:	4602      	mov	r2, r0
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	683a      	ldr	r2, [r7, #0]
 800665e:	429a      	cmp	r2, r3
 8006660:	d803      	bhi.n	800666a <HAL_SPI_Receive+0x236>
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006668:	d102      	bne.n	8006670 <HAL_SPI_Receive+0x23c>
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d114      	bne.n	800669a <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f000 faa3 	bl	8006bbc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006684:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	e062      	b.n	8006760 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1b9      	bne.n	800661a <HAL_SPI_Receive+0x1e6>
 80066a6:	e048      	b.n	800673a <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	f003 0301 	and.w	r3, r3, #1
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d117      	bne.n	80066e6 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066c2:	7812      	ldrb	r2, [r2, #0]
 80066c4:	b2d2      	uxtb	r2, r2
 80066c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066cc:	1c5a      	adds	r2, r3, #1
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80066d8:	b29b      	uxth	r3, r3
 80066da:	3b01      	subs	r3, #1
 80066dc:	b29a      	uxth	r2, r3
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80066e4:	e023      	b.n	800672e <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066e6:	f7fc f977 	bl	80029d8 <HAL_GetTick>
 80066ea:	4602      	mov	r2, r0
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	683a      	ldr	r2, [r7, #0]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d803      	bhi.n	80066fe <HAL_SPI_Receive+0x2ca>
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066fc:	d102      	bne.n	8006704 <HAL_SPI_Receive+0x2d0>
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d114      	bne.n	800672e <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f000 fa59 	bl	8006bbc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006718:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2201      	movs	r2, #1
 8006726:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e018      	b.n	8006760 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006734:	b29b      	uxth	r3, r3
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1b6      	bne.n	80066a8 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800673a:	68f8      	ldr	r0, [r7, #12]
 800673c:	f000 fa3e 	bl	8006bbc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006756:	2b00      	cmp	r3, #0
 8006758:	d001      	beq.n	800675e <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e000      	b.n	8006760 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 800675e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006760:	4618      	mov	r0, r3
 8006762:	3720      	adds	r7, #32
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}
 8006768:	ffff0000 	.word	0xffff0000

0800676c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b08e      	sub	sp, #56	; 0x38
 8006770:	af02      	add	r7, sp, #8
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
 8006778:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800677a:	2300      	movs	r3, #0
 800677c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	3320      	adds	r3, #32
 8006786:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	3330      	adds	r3, #48	; 0x30
 800678e:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006796:	2b01      	cmp	r3, #1
 8006798:	d101      	bne.n	800679e <HAL_SPI_TransmitReceive+0x32>
 800679a:	2302      	movs	r3, #2
 800679c:	e209      	b.n	8006bb2 <HAL_SPI_TransmitReceive+0x446>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2201      	movs	r2, #1
 80067a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067a6:	f7fc f917 	bl	80029d8 <HAL_GetTick>
 80067aa:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 80067ac:	887b      	ldrh	r3, [r7, #2]
 80067ae:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 80067b0:	887b      	ldrh	r3, [r7, #2]
 80067b2:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80067ba:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80067c2:	7efb      	ldrb	r3, [r7, #27]
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d014      	beq.n	80067f2 <HAL_SPI_TransmitReceive+0x86>
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067ce:	d106      	bne.n	80067de <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d102      	bne.n	80067de <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 80067d8:	7efb      	ldrb	r3, [r7, #27]
 80067da:	2b04      	cmp	r3, #4
 80067dc:	d009      	beq.n	80067f2 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 80067de:	2302      	movs	r3, #2
 80067e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80067ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80067f0:	e1df      	b.n	8006bb2 <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d005      	beq.n	8006804 <HAL_SPI_TransmitReceive+0x98>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d002      	beq.n	8006804 <HAL_SPI_TransmitReceive+0x98>
 80067fe:	887b      	ldrh	r3, [r7, #2]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d109      	bne.n	8006818 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006812:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006816:	e1cc      	b.n	8006bb2 <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800681e:	b2db      	uxtb	r3, r3
 8006820:	2b04      	cmp	r3, #4
 8006822:	d003      	beq.n	800682c <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2205      	movs	r2, #5
 8006828:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	887a      	ldrh	r2, [r7, #2]
 800683e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	887a      	ldrh	r2, [r7, #2]
 8006846:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	68ba      	ldr	r2, [r7, #8]
 800684e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	887a      	ldrh	r2, [r7, #2]
 8006854:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	887a      	ldrh	r2, [r7, #2]
 800685c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2200      	movs	r2, #0
 8006864:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	685a      	ldr	r2, [r3, #4]
 8006872:	4b82      	ldr	r3, [pc, #520]	; (8006a7c <HAL_SPI_TransmitReceive+0x310>)
 8006874:	4013      	ands	r3, r2
 8006876:	8879      	ldrh	r1, [r7, #2]
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	6812      	ldr	r2, [r2, #0]
 800687c:	430b      	orrs	r3, r1
 800687e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f042 0201 	orr.w	r2, r2, #1
 800688e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006898:	d107      	bne.n	80068aa <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	2b0f      	cmp	r3, #15
 80068b0:	d970      	bls.n	8006994 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80068b2:	e068      	b.n	8006986 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	695b      	ldr	r3, [r3, #20]
 80068ba:	f003 0302 	and.w	r3, r3, #2
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d11a      	bne.n	80068f8 <HAL_SPI_TransmitReceive+0x18c>
 80068c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d017      	beq.n	80068f8 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	6812      	ldr	r2, [r2, #0]
 80068d2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068d8:	1d1a      	adds	r2, r3, #4
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	3b01      	subs	r3, #1
 80068e8:	b29a      	uxth	r2, r3
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80068f6:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	695a      	ldr	r2, [r3, #20]
 80068fe:	f248 0308 	movw	r3, #32776	; 0x8008
 8006902:	4013      	ands	r3, r2
 8006904:	2b00      	cmp	r3, #0
 8006906:	d01a      	beq.n	800693e <HAL_SPI_TransmitReceive+0x1d2>
 8006908:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800690a:	2b00      	cmp	r3, #0
 800690c:	d017      	beq.n	800693e <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006916:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006918:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800691e:	1d1a      	adds	r2, r3, #4
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800692a:	b29b      	uxth	r3, r3
 800692c:	3b01      	subs	r3, #1
 800692e:	b29a      	uxth	r2, r3
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800693c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800693e:	f7fc f84b 	bl	80029d8 <HAL_GetTick>
 8006942:	4602      	mov	r2, r0
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800694a:	429a      	cmp	r2, r3
 800694c:	d803      	bhi.n	8006956 <HAL_SPI_TransmitReceive+0x1ea>
 800694e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006954:	d102      	bne.n	800695c <HAL_SPI_TransmitReceive+0x1f0>
 8006956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006958:	2b00      	cmp	r3, #0
 800695a:	d114      	bne.n	8006986 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f000 f92d 	bl	8006bbc <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006970:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2201      	movs	r2, #1
 800697e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e115      	b.n	8006bb2 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006986:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006988:	2b00      	cmp	r3, #0
 800698a:	d193      	bne.n	80068b4 <HAL_SPI_TransmitReceive+0x148>
 800698c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800698e:	2b00      	cmp	r3, #0
 8006990:	d190      	bne.n	80068b4 <HAL_SPI_TransmitReceive+0x148>
 8006992:	e0e7      	b.n	8006b64 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	2b07      	cmp	r3, #7
 800699a:	f240 80dd 	bls.w	8006b58 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800699e:	e066      	b.n	8006a6e <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	f003 0302 	and.w	r3, r3, #2
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d119      	bne.n	80069e2 <HAL_SPI_TransmitReceive+0x276>
 80069ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d016      	beq.n	80069e2 <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069b8:	881a      	ldrh	r2, [r3, #0]
 80069ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069bc:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069c2:	1c9a      	adds	r2, r3, #2
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	3b01      	subs	r3, #1
 80069d2:	b29a      	uxth	r2, r3
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80069e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	695b      	ldr	r3, [r3, #20]
 80069e8:	f003 0301 	and.w	r3, r3, #1
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d11a      	bne.n	8006a26 <HAL_SPI_TransmitReceive+0x2ba>
 80069f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d017      	beq.n	8006a26 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069fa:	6a3a      	ldr	r2, [r7, #32]
 80069fc:	8812      	ldrh	r2, [r2, #0]
 80069fe:	b292      	uxth	r2, r2
 8006a00:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a06:	1c9a      	adds	r2, r3, #2
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	3b01      	subs	r3, #1
 8006a16:	b29a      	uxth	r2, r3
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006a24:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a26:	f7fb ffd7 	bl	80029d8 <HAL_GetTick>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d803      	bhi.n	8006a3e <HAL_SPI_TransmitReceive+0x2d2>
 8006a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a3c:	d102      	bne.n	8006a44 <HAL_SPI_TransmitReceive+0x2d8>
 8006a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d114      	bne.n	8006a6e <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f000 f8b9 	bl	8006bbc <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a58:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2201      	movs	r2, #1
 8006a66:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	e0a1      	b.n	8006bb2 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006a6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d195      	bne.n	80069a0 <HAL_SPI_TransmitReceive+0x234>
 8006a74:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d192      	bne.n	80069a0 <HAL_SPI_TransmitReceive+0x234>
 8006a7a:	e073      	b.n	8006b64 <HAL_SPI_TransmitReceive+0x3f8>
 8006a7c:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	695b      	ldr	r3, [r3, #20]
 8006a86:	f003 0302 	and.w	r3, r3, #2
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d11b      	bne.n	8006ac6 <HAL_SPI_TransmitReceive+0x35a>
 8006a8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d018      	beq.n	8006ac6 <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	3320      	adds	r3, #32
 8006a9e:	7812      	ldrb	r2, [r2, #0]
 8006aa0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aa6:	1c5a      	adds	r2, r3, #1
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006ac4:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	695b      	ldr	r3, [r3, #20]
 8006acc:	f003 0301 	and.w	r3, r3, #1
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d11d      	bne.n	8006b10 <HAL_SPI_TransmitReceive+0x3a4>
 8006ad4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d01a      	beq.n	8006b10 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ae6:	7812      	ldrb	r2, [r2, #0]
 8006ae8:	b2d2      	uxtb	r2, r2
 8006aea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006af0:	1c5a      	adds	r2, r3, #1
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	3b01      	subs	r3, #1
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006b0e:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b10:	f7fb ff62 	bl	80029d8 <HAL_GetTick>
 8006b14:	4602      	mov	r2, r0
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d803      	bhi.n	8006b28 <HAL_SPI_TransmitReceive+0x3bc>
 8006b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b26:	d102      	bne.n	8006b2e <HAL_SPI_TransmitReceive+0x3c2>
 8006b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d114      	bne.n	8006b58 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f000 f844 	bl	8006bbc <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b42:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8006b54:	2303      	movs	r3, #3
 8006b56:	e02c      	b.n	8006bb2 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006b58:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d190      	bne.n	8006a80 <HAL_SPI_TransmitReceive+0x314>
 8006b5e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d18d      	bne.n	8006a80 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8006b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b66:	9300      	str	r3, [sp, #0]
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	2108      	movs	r1, #8
 8006b6e:	68f8      	ldr	r0, [r7, #12]
 8006b70:	f000 f8c4 	bl	8006cfc <SPI_WaitOnFlagUntilTimeout>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d007      	beq.n	8006b8a <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b80:	f043 0220 	orr.w	r2, r3, #32
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f000 f816 	bl	8006bbc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d001      	beq.n	8006bae <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e001      	b.n	8006bb2 <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 8006bae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3730      	adds	r7, #48	; 0x30
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop

08006bbc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	695b      	ldr	r3, [r3, #20]
 8006bca:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	699a      	ldr	r2, [r3, #24]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f042 0208 	orr.w	r2, r2, #8
 8006bda:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	699a      	ldr	r2, [r3, #24]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f042 0210 	orr.w	r2, r2, #16
 8006bea:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f022 0201 	bic.w	r2, r2, #1
 8006bfa:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	6919      	ldr	r1, [r3, #16]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	4b3c      	ldr	r3, [pc, #240]	; (8006cf8 <SPI_CloseTransfer+0x13c>)
 8006c08:	400b      	ands	r3, r1
 8006c0a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	689a      	ldr	r2, [r3, #8]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006c1a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	2b04      	cmp	r3, #4
 8006c26:	d014      	beq.n	8006c52 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f003 0320 	and.w	r3, r3, #32
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00f      	beq.n	8006c52 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c38:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	699a      	ldr	r2, [r3, #24]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f042 0220 	orr.w	r2, r2, #32
 8006c50:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	2b03      	cmp	r3, #3
 8006c5c:	d014      	beq.n	8006c88 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00f      	beq.n	8006c88 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c6e:	f043 0204 	orr.w	r2, r3, #4
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	699a      	ldr	r2, [r3, #24]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c86:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00f      	beq.n	8006cb2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c98:	f043 0201 	orr.w	r2, r3, #1
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	699a      	ldr	r2, [r3, #24]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cb0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00f      	beq.n	8006cdc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cc2:	f043 0208 	orr.w	r2, r3, #8
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	699a      	ldr	r2, [r3, #24]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cda:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8006cec:	bf00      	nop
 8006cee:	3714      	adds	r7, #20
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr
 8006cf8:	fffffc90 	.word	0xfffffc90

08006cfc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	603b      	str	r3, [r7, #0]
 8006d08:	4613      	mov	r3, r2
 8006d0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006d0c:	e010      	b.n	8006d30 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d0e:	f7fb fe63 	bl	80029d8 <HAL_GetTick>
 8006d12:	4602      	mov	r2, r0
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	69ba      	ldr	r2, [r7, #24]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d803      	bhi.n	8006d26 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d24:	d102      	bne.n	8006d2c <SPI_WaitOnFlagUntilTimeout+0x30>
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d101      	bne.n	8006d30 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	e00f      	b.n	8006d50 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	695a      	ldr	r2, [r3, #20]
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	4013      	ands	r3, r2
 8006d3a:	68ba      	ldr	r2, [r7, #8]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	bf0c      	ite	eq
 8006d40:	2301      	moveq	r3, #1
 8006d42:	2300      	movne	r3, #0
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	461a      	mov	r2, r3
 8006d48:	79fb      	ldrb	r3, [r7, #7]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d0df      	beq.n	8006d0e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3710      	adds	r7, #16
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d64:	095b      	lsrs	r3, r3, #5
 8006d66:	3301      	adds	r3, #1
 8006d68:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	3301      	adds	r3, #1
 8006d70:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	3307      	adds	r3, #7
 8006d76:	08db      	lsrs	r3, r3, #3
 8006d78:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	fb02 f303 	mul.w	r3, r2, r3
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3714      	adds	r7, #20
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b082      	sub	sp, #8
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d101      	bne.n	8006da0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e049      	b.n	8006e34 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d106      	bne.n	8006dba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f7fb fb61 	bl	800247c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2202      	movs	r2, #2
 8006dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	3304      	adds	r3, #4
 8006dca:	4619      	mov	r1, r3
 8006dcc:	4610      	mov	r0, r2
 8006dce:	f000 fc79 	bl	80076c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2201      	movs	r2, #1
 8006de6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2201      	movs	r2, #1
 8006dee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2201      	movs	r2, #1
 8006df6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2201      	movs	r2, #1
 8006e16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2201      	movs	r2, #1
 8006e26:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3708      	adds	r7, #8
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d001      	beq.n	8006e54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e054      	b.n	8006efe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2202      	movs	r2, #2
 8006e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	68da      	ldr	r2, [r3, #12]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f042 0201 	orr.w	r2, r2, #1
 8006e6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a26      	ldr	r2, [pc, #152]	; (8006f0c <HAL_TIM_Base_Start_IT+0xd0>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d022      	beq.n	8006ebc <HAL_TIM_Base_Start_IT+0x80>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e7e:	d01d      	beq.n	8006ebc <HAL_TIM_Base_Start_IT+0x80>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a22      	ldr	r2, [pc, #136]	; (8006f10 <HAL_TIM_Base_Start_IT+0xd4>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d018      	beq.n	8006ebc <HAL_TIM_Base_Start_IT+0x80>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a21      	ldr	r2, [pc, #132]	; (8006f14 <HAL_TIM_Base_Start_IT+0xd8>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d013      	beq.n	8006ebc <HAL_TIM_Base_Start_IT+0x80>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a1f      	ldr	r2, [pc, #124]	; (8006f18 <HAL_TIM_Base_Start_IT+0xdc>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d00e      	beq.n	8006ebc <HAL_TIM_Base_Start_IT+0x80>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a1e      	ldr	r2, [pc, #120]	; (8006f1c <HAL_TIM_Base_Start_IT+0xe0>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d009      	beq.n	8006ebc <HAL_TIM_Base_Start_IT+0x80>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a1c      	ldr	r2, [pc, #112]	; (8006f20 <HAL_TIM_Base_Start_IT+0xe4>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d004      	beq.n	8006ebc <HAL_TIM_Base_Start_IT+0x80>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a1b      	ldr	r2, [pc, #108]	; (8006f24 <HAL_TIM_Base_Start_IT+0xe8>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d115      	bne.n	8006ee8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	689a      	ldr	r2, [r3, #8]
 8006ec2:	4b19      	ldr	r3, [pc, #100]	; (8006f28 <HAL_TIM_Base_Start_IT+0xec>)
 8006ec4:	4013      	ands	r3, r2
 8006ec6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2b06      	cmp	r3, #6
 8006ecc:	d015      	beq.n	8006efa <HAL_TIM_Base_Start_IT+0xbe>
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ed4:	d011      	beq.n	8006efa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f042 0201 	orr.w	r2, r2, #1
 8006ee4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ee6:	e008      	b.n	8006efa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f042 0201 	orr.w	r2, r2, #1
 8006ef6:	601a      	str	r2, [r3, #0]
 8006ef8:	e000      	b.n	8006efc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006efa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3714      	adds	r7, #20
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	40010000 	.word	0x40010000
 8006f10:	40000400 	.word	0x40000400
 8006f14:	40000800 	.word	0x40000800
 8006f18:	40000c00 	.word	0x40000c00
 8006f1c:	40010400 	.word	0x40010400
 8006f20:	40001800 	.word	0x40001800
 8006f24:	40014000 	.word	0x40014000
 8006f28:	00010007 	.word	0x00010007

08006f2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d101      	bne.n	8006f3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e049      	b.n	8006fd2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d106      	bne.n	8006f58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 f841 	bl	8006fda <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	3304      	adds	r3, #4
 8006f68:	4619      	mov	r1, r3
 8006f6a:	4610      	mov	r0, r2
 8006f6c:	f000 fbaa 	bl	80076c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3708      	adds	r7, #8
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b083      	sub	sp, #12
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006fe2:	bf00      	nop
 8006fe4:	370c      	adds	r7, #12
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr
	...

08006ff0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d109      	bne.n	8007014 <HAL_TIM_PWM_Start+0x24>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007006:	b2db      	uxtb	r3, r3
 8007008:	2b01      	cmp	r3, #1
 800700a:	bf14      	ite	ne
 800700c:	2301      	movne	r3, #1
 800700e:	2300      	moveq	r3, #0
 8007010:	b2db      	uxtb	r3, r3
 8007012:	e03c      	b.n	800708e <HAL_TIM_PWM_Start+0x9e>
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	2b04      	cmp	r3, #4
 8007018:	d109      	bne.n	800702e <HAL_TIM_PWM_Start+0x3e>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007020:	b2db      	uxtb	r3, r3
 8007022:	2b01      	cmp	r3, #1
 8007024:	bf14      	ite	ne
 8007026:	2301      	movne	r3, #1
 8007028:	2300      	moveq	r3, #0
 800702a:	b2db      	uxtb	r3, r3
 800702c:	e02f      	b.n	800708e <HAL_TIM_PWM_Start+0x9e>
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	2b08      	cmp	r3, #8
 8007032:	d109      	bne.n	8007048 <HAL_TIM_PWM_Start+0x58>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800703a:	b2db      	uxtb	r3, r3
 800703c:	2b01      	cmp	r3, #1
 800703e:	bf14      	ite	ne
 8007040:	2301      	movne	r3, #1
 8007042:	2300      	moveq	r3, #0
 8007044:	b2db      	uxtb	r3, r3
 8007046:	e022      	b.n	800708e <HAL_TIM_PWM_Start+0x9e>
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	2b0c      	cmp	r3, #12
 800704c:	d109      	bne.n	8007062 <HAL_TIM_PWM_Start+0x72>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007054:	b2db      	uxtb	r3, r3
 8007056:	2b01      	cmp	r3, #1
 8007058:	bf14      	ite	ne
 800705a:	2301      	movne	r3, #1
 800705c:	2300      	moveq	r3, #0
 800705e:	b2db      	uxtb	r3, r3
 8007060:	e015      	b.n	800708e <HAL_TIM_PWM_Start+0x9e>
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	2b10      	cmp	r3, #16
 8007066:	d109      	bne.n	800707c <HAL_TIM_PWM_Start+0x8c>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800706e:	b2db      	uxtb	r3, r3
 8007070:	2b01      	cmp	r3, #1
 8007072:	bf14      	ite	ne
 8007074:	2301      	movne	r3, #1
 8007076:	2300      	moveq	r3, #0
 8007078:	b2db      	uxtb	r3, r3
 800707a:	e008      	b.n	800708e <HAL_TIM_PWM_Start+0x9e>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007082:	b2db      	uxtb	r3, r3
 8007084:	2b01      	cmp	r3, #1
 8007086:	bf14      	ite	ne
 8007088:	2301      	movne	r3, #1
 800708a:	2300      	moveq	r3, #0
 800708c:	b2db      	uxtb	r3, r3
 800708e:	2b00      	cmp	r3, #0
 8007090:	d001      	beq.n	8007096 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	e0a1      	b.n	80071da <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d104      	bne.n	80070a6 <HAL_TIM_PWM_Start+0xb6>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2202      	movs	r2, #2
 80070a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070a4:	e023      	b.n	80070ee <HAL_TIM_PWM_Start+0xfe>
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	2b04      	cmp	r3, #4
 80070aa:	d104      	bne.n	80070b6 <HAL_TIM_PWM_Start+0xc6>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2202      	movs	r2, #2
 80070b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070b4:	e01b      	b.n	80070ee <HAL_TIM_PWM_Start+0xfe>
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	2b08      	cmp	r3, #8
 80070ba:	d104      	bne.n	80070c6 <HAL_TIM_PWM_Start+0xd6>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2202      	movs	r2, #2
 80070c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070c4:	e013      	b.n	80070ee <HAL_TIM_PWM_Start+0xfe>
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	2b0c      	cmp	r3, #12
 80070ca:	d104      	bne.n	80070d6 <HAL_TIM_PWM_Start+0xe6>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2202      	movs	r2, #2
 80070d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80070d4:	e00b      	b.n	80070ee <HAL_TIM_PWM_Start+0xfe>
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	2b10      	cmp	r3, #16
 80070da:	d104      	bne.n	80070e6 <HAL_TIM_PWM_Start+0xf6>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2202      	movs	r2, #2
 80070e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070e4:	e003      	b.n	80070ee <HAL_TIM_PWM_Start+0xfe>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2202      	movs	r2, #2
 80070ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2201      	movs	r2, #1
 80070f4:	6839      	ldr	r1, [r7, #0]
 80070f6:	4618      	mov	r0, r3
 80070f8:	f000 fe54 	bl	8007da4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a38      	ldr	r2, [pc, #224]	; (80071e4 <HAL_TIM_PWM_Start+0x1f4>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d013      	beq.n	800712e <HAL_TIM_PWM_Start+0x13e>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a37      	ldr	r2, [pc, #220]	; (80071e8 <HAL_TIM_PWM_Start+0x1f8>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d00e      	beq.n	800712e <HAL_TIM_PWM_Start+0x13e>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a35      	ldr	r2, [pc, #212]	; (80071ec <HAL_TIM_PWM_Start+0x1fc>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d009      	beq.n	800712e <HAL_TIM_PWM_Start+0x13e>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a34      	ldr	r2, [pc, #208]	; (80071f0 <HAL_TIM_PWM_Start+0x200>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d004      	beq.n	800712e <HAL_TIM_PWM_Start+0x13e>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a32      	ldr	r2, [pc, #200]	; (80071f4 <HAL_TIM_PWM_Start+0x204>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d101      	bne.n	8007132 <HAL_TIM_PWM_Start+0x142>
 800712e:	2301      	movs	r3, #1
 8007130:	e000      	b.n	8007134 <HAL_TIM_PWM_Start+0x144>
 8007132:	2300      	movs	r3, #0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d007      	beq.n	8007148 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007146:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a25      	ldr	r2, [pc, #148]	; (80071e4 <HAL_TIM_PWM_Start+0x1f4>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d022      	beq.n	8007198 <HAL_TIM_PWM_Start+0x1a8>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800715a:	d01d      	beq.n	8007198 <HAL_TIM_PWM_Start+0x1a8>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a25      	ldr	r2, [pc, #148]	; (80071f8 <HAL_TIM_PWM_Start+0x208>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d018      	beq.n	8007198 <HAL_TIM_PWM_Start+0x1a8>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a24      	ldr	r2, [pc, #144]	; (80071fc <HAL_TIM_PWM_Start+0x20c>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d013      	beq.n	8007198 <HAL_TIM_PWM_Start+0x1a8>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a22      	ldr	r2, [pc, #136]	; (8007200 <HAL_TIM_PWM_Start+0x210>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d00e      	beq.n	8007198 <HAL_TIM_PWM_Start+0x1a8>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a1a      	ldr	r2, [pc, #104]	; (80071e8 <HAL_TIM_PWM_Start+0x1f8>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d009      	beq.n	8007198 <HAL_TIM_PWM_Start+0x1a8>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a1e      	ldr	r2, [pc, #120]	; (8007204 <HAL_TIM_PWM_Start+0x214>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d004      	beq.n	8007198 <HAL_TIM_PWM_Start+0x1a8>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a16      	ldr	r2, [pc, #88]	; (80071ec <HAL_TIM_PWM_Start+0x1fc>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d115      	bne.n	80071c4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	689a      	ldr	r2, [r3, #8]
 800719e:	4b1a      	ldr	r3, [pc, #104]	; (8007208 <HAL_TIM_PWM_Start+0x218>)
 80071a0:	4013      	ands	r3, r2
 80071a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2b06      	cmp	r3, #6
 80071a8:	d015      	beq.n	80071d6 <HAL_TIM_PWM_Start+0x1e6>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071b0:	d011      	beq.n	80071d6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f042 0201 	orr.w	r2, r2, #1
 80071c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071c2:	e008      	b.n	80071d6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f042 0201 	orr.w	r2, r2, #1
 80071d2:	601a      	str	r2, [r3, #0]
 80071d4:	e000      	b.n	80071d8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3710      	adds	r7, #16
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	40010000 	.word	0x40010000
 80071e8:	40010400 	.word	0x40010400
 80071ec:	40014000 	.word	0x40014000
 80071f0:	40014400 	.word	0x40014400
 80071f4:	40014800 	.word	0x40014800
 80071f8:	40000400 	.word	0x40000400
 80071fc:	40000800 	.word	0x40000800
 8007200:	40000c00 	.word	0x40000c00
 8007204:	40001800 	.word	0x40001800
 8007208:	00010007 	.word	0x00010007

0800720c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	f003 0302 	and.w	r3, r3, #2
 800721e:	2b02      	cmp	r3, #2
 8007220:	d122      	bne.n	8007268 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	f003 0302 	and.w	r3, r3, #2
 800722c:	2b02      	cmp	r3, #2
 800722e:	d11b      	bne.n	8007268 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f06f 0202 	mvn.w	r2, #2
 8007238:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2201      	movs	r2, #1
 800723e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	699b      	ldr	r3, [r3, #24]
 8007246:	f003 0303 	and.w	r3, r3, #3
 800724a:	2b00      	cmp	r3, #0
 800724c:	d003      	beq.n	8007256 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 fa1a 	bl	8007688 <HAL_TIM_IC_CaptureCallback>
 8007254:	e005      	b.n	8007262 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 fa0c 	bl	8007674 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 fa1d 	bl	800769c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	f003 0304 	and.w	r3, r3, #4
 8007272:	2b04      	cmp	r3, #4
 8007274:	d122      	bne.n	80072bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	f003 0304 	and.w	r3, r3, #4
 8007280:	2b04      	cmp	r3, #4
 8007282:	d11b      	bne.n	80072bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f06f 0204 	mvn.w	r2, #4
 800728c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2202      	movs	r2, #2
 8007292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	699b      	ldr	r3, [r3, #24]
 800729a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d003      	beq.n	80072aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 f9f0 	bl	8007688 <HAL_TIM_IC_CaptureCallback>
 80072a8:	e005      	b.n	80072b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 f9e2 	bl	8007674 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 f9f3 	bl	800769c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	f003 0308 	and.w	r3, r3, #8
 80072c6:	2b08      	cmp	r3, #8
 80072c8:	d122      	bne.n	8007310 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	f003 0308 	and.w	r3, r3, #8
 80072d4:	2b08      	cmp	r3, #8
 80072d6:	d11b      	bne.n	8007310 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f06f 0208 	mvn.w	r2, #8
 80072e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2204      	movs	r2, #4
 80072e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	69db      	ldr	r3, [r3, #28]
 80072ee:	f003 0303 	and.w	r3, r3, #3
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d003      	beq.n	80072fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 f9c6 	bl	8007688 <HAL_TIM_IC_CaptureCallback>
 80072fc:	e005      	b.n	800730a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 f9b8 	bl	8007674 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 f9c9 	bl	800769c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	f003 0310 	and.w	r3, r3, #16
 800731a:	2b10      	cmp	r3, #16
 800731c:	d122      	bne.n	8007364 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	f003 0310 	and.w	r3, r3, #16
 8007328:	2b10      	cmp	r3, #16
 800732a:	d11b      	bne.n	8007364 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f06f 0210 	mvn.w	r2, #16
 8007334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2208      	movs	r2, #8
 800733a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	69db      	ldr	r3, [r3, #28]
 8007342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007346:	2b00      	cmp	r3, #0
 8007348:	d003      	beq.n	8007352 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 f99c 	bl	8007688 <HAL_TIM_IC_CaptureCallback>
 8007350:	e005      	b.n	800735e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 f98e 	bl	8007674 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 f99f 	bl	800769c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	f003 0301 	and.w	r3, r3, #1
 800736e:	2b01      	cmp	r3, #1
 8007370:	d10e      	bne.n	8007390 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	f003 0301 	and.w	r3, r3, #1
 800737c:	2b01      	cmp	r3, #1
 800737e:	d107      	bne.n	8007390 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f06f 0201 	mvn.w	r2, #1
 8007388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f7fa fef0 	bl	8002170 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800739a:	2b80      	cmp	r3, #128	; 0x80
 800739c:	d10e      	bne.n	80073bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073a8:	2b80      	cmp	r3, #128	; 0x80
 80073aa:	d107      	bne.n	80073bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80073b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fd23 	bl	8007e02 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073ca:	d10e      	bne.n	80073ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073d6:	2b80      	cmp	r3, #128	; 0x80
 80073d8:	d107      	bne.n	80073ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80073e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 fd16 	bl	8007e16 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073f4:	2b40      	cmp	r3, #64	; 0x40
 80073f6:	d10e      	bne.n	8007416 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007402:	2b40      	cmp	r3, #64	; 0x40
 8007404:	d107      	bne.n	8007416 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800740e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 f94d 	bl	80076b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	f003 0320 	and.w	r3, r3, #32
 8007420:	2b20      	cmp	r3, #32
 8007422:	d10e      	bne.n	8007442 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	f003 0320 	and.w	r3, r3, #32
 800742e:	2b20      	cmp	r3, #32
 8007430:	d107      	bne.n	8007442 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f06f 0220 	mvn.w	r2, #32
 800743a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 fcd6 	bl	8007dee <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007442:	bf00      	nop
 8007444:	3708      	adds	r7, #8
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
	...

0800744c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b086      	sub	sp, #24
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007458:	2300      	movs	r3, #0
 800745a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007462:	2b01      	cmp	r3, #1
 8007464:	d101      	bne.n	800746a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007466:	2302      	movs	r3, #2
 8007468:	e0ff      	b.n	800766a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2201      	movs	r2, #1
 800746e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2b14      	cmp	r3, #20
 8007476:	f200 80f0 	bhi.w	800765a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800747a:	a201      	add	r2, pc, #4	; (adr r2, 8007480 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800747c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007480:	080074d5 	.word	0x080074d5
 8007484:	0800765b 	.word	0x0800765b
 8007488:	0800765b 	.word	0x0800765b
 800748c:	0800765b 	.word	0x0800765b
 8007490:	08007515 	.word	0x08007515
 8007494:	0800765b 	.word	0x0800765b
 8007498:	0800765b 	.word	0x0800765b
 800749c:	0800765b 	.word	0x0800765b
 80074a0:	08007557 	.word	0x08007557
 80074a4:	0800765b 	.word	0x0800765b
 80074a8:	0800765b 	.word	0x0800765b
 80074ac:	0800765b 	.word	0x0800765b
 80074b0:	08007597 	.word	0x08007597
 80074b4:	0800765b 	.word	0x0800765b
 80074b8:	0800765b 	.word	0x0800765b
 80074bc:	0800765b 	.word	0x0800765b
 80074c0:	080075d9 	.word	0x080075d9
 80074c4:	0800765b 	.word	0x0800765b
 80074c8:	0800765b 	.word	0x0800765b
 80074cc:	0800765b 	.word	0x0800765b
 80074d0:	08007619 	.word	0x08007619
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	68b9      	ldr	r1, [r7, #8]
 80074da:	4618      	mov	r0, r3
 80074dc:	f000 f98c 	bl	80077f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	699a      	ldr	r2, [r3, #24]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f042 0208 	orr.w	r2, r2, #8
 80074ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	699a      	ldr	r2, [r3, #24]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f022 0204 	bic.w	r2, r2, #4
 80074fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	6999      	ldr	r1, [r3, #24]
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	691a      	ldr	r2, [r3, #16]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	430a      	orrs	r2, r1
 8007510:	619a      	str	r2, [r3, #24]
      break;
 8007512:	e0a5      	b.n	8007660 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	68b9      	ldr	r1, [r7, #8]
 800751a:	4618      	mov	r0, r3
 800751c:	f000 f9fc 	bl	8007918 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	699a      	ldr	r2, [r3, #24]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800752e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	699a      	ldr	r2, [r3, #24]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800753e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	6999      	ldr	r1, [r3, #24]
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	021a      	lsls	r2, r3, #8
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	430a      	orrs	r2, r1
 8007552:	619a      	str	r2, [r3, #24]
      break;
 8007554:	e084      	b.n	8007660 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	68b9      	ldr	r1, [r7, #8]
 800755c:	4618      	mov	r0, r3
 800755e:	f000 fa65 	bl	8007a2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	69da      	ldr	r2, [r3, #28]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f042 0208 	orr.w	r2, r2, #8
 8007570:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	69da      	ldr	r2, [r3, #28]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f022 0204 	bic.w	r2, r2, #4
 8007580:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	69d9      	ldr	r1, [r3, #28]
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	691a      	ldr	r2, [r3, #16]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	430a      	orrs	r2, r1
 8007592:	61da      	str	r2, [r3, #28]
      break;
 8007594:	e064      	b.n	8007660 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68b9      	ldr	r1, [r7, #8]
 800759c:	4618      	mov	r0, r3
 800759e:	f000 facd 	bl	8007b3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	69da      	ldr	r2, [r3, #28]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	69da      	ldr	r2, [r3, #28]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	69d9      	ldr	r1, [r3, #28]
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	021a      	lsls	r2, r3, #8
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	430a      	orrs	r2, r1
 80075d4:	61da      	str	r2, [r3, #28]
      break;
 80075d6:	e043      	b.n	8007660 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	68b9      	ldr	r1, [r7, #8]
 80075de:	4618      	mov	r0, r3
 80075e0:	f000 fb16 	bl	8007c10 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f042 0208 	orr.w	r2, r2, #8
 80075f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f022 0204 	bic.w	r2, r2, #4
 8007602:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	691a      	ldr	r2, [r3, #16]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	430a      	orrs	r2, r1
 8007614:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007616:	e023      	b.n	8007660 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	68b9      	ldr	r1, [r7, #8]
 800761e:	4618      	mov	r0, r3
 8007620:	f000 fb5a 	bl	8007cd8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007632:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007642:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	021a      	lsls	r2, r3, #8
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	430a      	orrs	r2, r1
 8007656:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007658:	e002      	b.n	8007660 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	75fb      	strb	r3, [r7, #23]
      break;
 800765e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2200      	movs	r2, #0
 8007664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007668:	7dfb      	ldrb	r3, [r7, #23]
}
 800766a:	4618      	mov	r0, r3
 800766c:	3718      	adds	r7, #24
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop

08007674 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800767c:	bf00      	nop
 800767e:	370c      	adds	r7, #12
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076a4:	bf00      	nop
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076b8:	bf00      	nop
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	4a40      	ldr	r2, [pc, #256]	; (80077d8 <TIM_Base_SetConfig+0x114>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d013      	beq.n	8007704 <TIM_Base_SetConfig+0x40>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076e2:	d00f      	beq.n	8007704 <TIM_Base_SetConfig+0x40>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	4a3d      	ldr	r2, [pc, #244]	; (80077dc <TIM_Base_SetConfig+0x118>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d00b      	beq.n	8007704 <TIM_Base_SetConfig+0x40>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4a3c      	ldr	r2, [pc, #240]	; (80077e0 <TIM_Base_SetConfig+0x11c>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d007      	beq.n	8007704 <TIM_Base_SetConfig+0x40>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	4a3b      	ldr	r2, [pc, #236]	; (80077e4 <TIM_Base_SetConfig+0x120>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d003      	beq.n	8007704 <TIM_Base_SetConfig+0x40>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4a3a      	ldr	r2, [pc, #232]	; (80077e8 <TIM_Base_SetConfig+0x124>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d108      	bne.n	8007716 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800770a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	68fa      	ldr	r2, [r7, #12]
 8007712:	4313      	orrs	r3, r2
 8007714:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4a2f      	ldr	r2, [pc, #188]	; (80077d8 <TIM_Base_SetConfig+0x114>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d01f      	beq.n	800775e <TIM_Base_SetConfig+0x9a>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007724:	d01b      	beq.n	800775e <TIM_Base_SetConfig+0x9a>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4a2c      	ldr	r2, [pc, #176]	; (80077dc <TIM_Base_SetConfig+0x118>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d017      	beq.n	800775e <TIM_Base_SetConfig+0x9a>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4a2b      	ldr	r2, [pc, #172]	; (80077e0 <TIM_Base_SetConfig+0x11c>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d013      	beq.n	800775e <TIM_Base_SetConfig+0x9a>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4a2a      	ldr	r2, [pc, #168]	; (80077e4 <TIM_Base_SetConfig+0x120>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d00f      	beq.n	800775e <TIM_Base_SetConfig+0x9a>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4a29      	ldr	r2, [pc, #164]	; (80077e8 <TIM_Base_SetConfig+0x124>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d00b      	beq.n	800775e <TIM_Base_SetConfig+0x9a>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a28      	ldr	r2, [pc, #160]	; (80077ec <TIM_Base_SetConfig+0x128>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d007      	beq.n	800775e <TIM_Base_SetConfig+0x9a>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a27      	ldr	r2, [pc, #156]	; (80077f0 <TIM_Base_SetConfig+0x12c>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d003      	beq.n	800775e <TIM_Base_SetConfig+0x9a>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a26      	ldr	r2, [pc, #152]	; (80077f4 <TIM_Base_SetConfig+0x130>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d108      	bne.n	8007770 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007764:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	68fa      	ldr	r2, [r7, #12]
 800776c:	4313      	orrs	r3, r2
 800776e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	695b      	ldr	r3, [r3, #20]
 800777a:	4313      	orrs	r3, r2
 800777c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	689a      	ldr	r2, [r3, #8]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	4a10      	ldr	r2, [pc, #64]	; (80077d8 <TIM_Base_SetConfig+0x114>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d00f      	beq.n	80077bc <TIM_Base_SetConfig+0xf8>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4a12      	ldr	r2, [pc, #72]	; (80077e8 <TIM_Base_SetConfig+0x124>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d00b      	beq.n	80077bc <TIM_Base_SetConfig+0xf8>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4a11      	ldr	r2, [pc, #68]	; (80077ec <TIM_Base_SetConfig+0x128>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d007      	beq.n	80077bc <TIM_Base_SetConfig+0xf8>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4a10      	ldr	r2, [pc, #64]	; (80077f0 <TIM_Base_SetConfig+0x12c>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d003      	beq.n	80077bc <TIM_Base_SetConfig+0xf8>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4a0f      	ldr	r2, [pc, #60]	; (80077f4 <TIM_Base_SetConfig+0x130>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d103      	bne.n	80077c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	691a      	ldr	r2, [r3, #16]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	615a      	str	r2, [r3, #20]
}
 80077ca:	bf00      	nop
 80077cc:	3714      	adds	r7, #20
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	40010000 	.word	0x40010000
 80077dc:	40000400 	.word	0x40000400
 80077e0:	40000800 	.word	0x40000800
 80077e4:	40000c00 	.word	0x40000c00
 80077e8:	40010400 	.word	0x40010400
 80077ec:	40014000 	.word	0x40014000
 80077f0:	40014400 	.word	0x40014400
 80077f4:	40014800 	.word	0x40014800

080077f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b087      	sub	sp, #28
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a1b      	ldr	r3, [r3, #32]
 8007806:	f023 0201 	bic.w	r2, r3, #1
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a1b      	ldr	r3, [r3, #32]
 8007812:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	699b      	ldr	r3, [r3, #24]
 800781e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007820:	68fa      	ldr	r2, [r7, #12]
 8007822:	4b37      	ldr	r3, [pc, #220]	; (8007900 <TIM_OC1_SetConfig+0x108>)
 8007824:	4013      	ands	r3, r2
 8007826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f023 0303 	bic.w	r3, r3, #3
 800782e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	68fa      	ldr	r2, [r7, #12]
 8007836:	4313      	orrs	r3, r2
 8007838:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	f023 0302 	bic.w	r3, r3, #2
 8007840:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	697a      	ldr	r2, [r7, #20]
 8007848:	4313      	orrs	r3, r2
 800784a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a2d      	ldr	r2, [pc, #180]	; (8007904 <TIM_OC1_SetConfig+0x10c>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d00f      	beq.n	8007874 <TIM_OC1_SetConfig+0x7c>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4a2c      	ldr	r2, [pc, #176]	; (8007908 <TIM_OC1_SetConfig+0x110>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d00b      	beq.n	8007874 <TIM_OC1_SetConfig+0x7c>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4a2b      	ldr	r2, [pc, #172]	; (800790c <TIM_OC1_SetConfig+0x114>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d007      	beq.n	8007874 <TIM_OC1_SetConfig+0x7c>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4a2a      	ldr	r2, [pc, #168]	; (8007910 <TIM_OC1_SetConfig+0x118>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d003      	beq.n	8007874 <TIM_OC1_SetConfig+0x7c>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4a29      	ldr	r2, [pc, #164]	; (8007914 <TIM_OC1_SetConfig+0x11c>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d10c      	bne.n	800788e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	f023 0308 	bic.w	r3, r3, #8
 800787a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	697a      	ldr	r2, [r7, #20]
 8007882:	4313      	orrs	r3, r2
 8007884:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	f023 0304 	bic.w	r3, r3, #4
 800788c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4a1c      	ldr	r2, [pc, #112]	; (8007904 <TIM_OC1_SetConfig+0x10c>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d00f      	beq.n	80078b6 <TIM_OC1_SetConfig+0xbe>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4a1b      	ldr	r2, [pc, #108]	; (8007908 <TIM_OC1_SetConfig+0x110>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d00b      	beq.n	80078b6 <TIM_OC1_SetConfig+0xbe>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4a1a      	ldr	r2, [pc, #104]	; (800790c <TIM_OC1_SetConfig+0x114>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d007      	beq.n	80078b6 <TIM_OC1_SetConfig+0xbe>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a19      	ldr	r2, [pc, #100]	; (8007910 <TIM_OC1_SetConfig+0x118>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d003      	beq.n	80078b6 <TIM_OC1_SetConfig+0xbe>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a18      	ldr	r2, [pc, #96]	; (8007914 <TIM_OC1_SetConfig+0x11c>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d111      	bne.n	80078da <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	695b      	ldr	r3, [r3, #20]
 80078ca:	693a      	ldr	r2, [r7, #16]
 80078cc:	4313      	orrs	r3, r2
 80078ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	699b      	ldr	r3, [r3, #24]
 80078d4:	693a      	ldr	r2, [r7, #16]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	693a      	ldr	r2, [r7, #16]
 80078de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	68fa      	ldr	r2, [r7, #12]
 80078e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	685a      	ldr	r2, [r3, #4]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	697a      	ldr	r2, [r7, #20]
 80078f2:	621a      	str	r2, [r3, #32]
}
 80078f4:	bf00      	nop
 80078f6:	371c      	adds	r7, #28
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr
 8007900:	fffeff8f 	.word	0xfffeff8f
 8007904:	40010000 	.word	0x40010000
 8007908:	40010400 	.word	0x40010400
 800790c:	40014000 	.word	0x40014000
 8007910:	40014400 	.word	0x40014400
 8007914:	40014800 	.word	0x40014800

08007918 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007918:	b480      	push	{r7}
 800791a:	b087      	sub	sp, #28
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6a1b      	ldr	r3, [r3, #32]
 8007926:	f023 0210 	bic.w	r2, r3, #16
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6a1b      	ldr	r3, [r3, #32]
 8007932:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	699b      	ldr	r3, [r3, #24]
 800793e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007940:	68fa      	ldr	r2, [r7, #12]
 8007942:	4b34      	ldr	r3, [pc, #208]	; (8007a14 <TIM_OC2_SetConfig+0xfc>)
 8007944:	4013      	ands	r3, r2
 8007946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800794e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	021b      	lsls	r3, r3, #8
 8007956:	68fa      	ldr	r2, [r7, #12]
 8007958:	4313      	orrs	r3, r2
 800795a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	f023 0320 	bic.w	r3, r3, #32
 8007962:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	011b      	lsls	r3, r3, #4
 800796a:	697a      	ldr	r2, [r7, #20]
 800796c:	4313      	orrs	r3, r2
 800796e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a29      	ldr	r2, [pc, #164]	; (8007a18 <TIM_OC2_SetConfig+0x100>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d003      	beq.n	8007980 <TIM_OC2_SetConfig+0x68>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a28      	ldr	r2, [pc, #160]	; (8007a1c <TIM_OC2_SetConfig+0x104>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d10d      	bne.n	800799c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007986:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	011b      	lsls	r3, r3, #4
 800798e:	697a      	ldr	r2, [r7, #20]
 8007990:	4313      	orrs	r3, r2
 8007992:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800799a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4a1e      	ldr	r2, [pc, #120]	; (8007a18 <TIM_OC2_SetConfig+0x100>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d00f      	beq.n	80079c4 <TIM_OC2_SetConfig+0xac>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a1d      	ldr	r2, [pc, #116]	; (8007a1c <TIM_OC2_SetConfig+0x104>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d00b      	beq.n	80079c4 <TIM_OC2_SetConfig+0xac>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4a1c      	ldr	r2, [pc, #112]	; (8007a20 <TIM_OC2_SetConfig+0x108>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d007      	beq.n	80079c4 <TIM_OC2_SetConfig+0xac>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a1b      	ldr	r2, [pc, #108]	; (8007a24 <TIM_OC2_SetConfig+0x10c>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d003      	beq.n	80079c4 <TIM_OC2_SetConfig+0xac>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a1a      	ldr	r2, [pc, #104]	; (8007a28 <TIM_OC2_SetConfig+0x110>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d113      	bne.n	80079ec <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	695b      	ldr	r3, [r3, #20]
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	693a      	ldr	r2, [r7, #16]
 80079dc:	4313      	orrs	r3, r2
 80079de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	699b      	ldr	r3, [r3, #24]
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	693a      	ldr	r2, [r7, #16]
 80079e8:	4313      	orrs	r3, r2
 80079ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	693a      	ldr	r2, [r7, #16]
 80079f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	68fa      	ldr	r2, [r7, #12]
 80079f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	685a      	ldr	r2, [r3, #4]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	697a      	ldr	r2, [r7, #20]
 8007a04:	621a      	str	r2, [r3, #32]
}
 8007a06:	bf00      	nop
 8007a08:	371c      	adds	r7, #28
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	feff8fff 	.word	0xfeff8fff
 8007a18:	40010000 	.word	0x40010000
 8007a1c:	40010400 	.word	0x40010400
 8007a20:	40014000 	.word	0x40014000
 8007a24:	40014400 	.word	0x40014400
 8007a28:	40014800 	.word	0x40014800

08007a2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b087      	sub	sp, #28
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a1b      	ldr	r3, [r3, #32]
 8007a3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a1b      	ldr	r3, [r3, #32]
 8007a46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	69db      	ldr	r3, [r3, #28]
 8007a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	4b33      	ldr	r3, [pc, #204]	; (8007b24 <TIM_OC3_SetConfig+0xf8>)
 8007a58:	4013      	ands	r3, r2
 8007a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f023 0303 	bic.w	r3, r3, #3
 8007a62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	021b      	lsls	r3, r3, #8
 8007a7c:	697a      	ldr	r2, [r7, #20]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4a28      	ldr	r2, [pc, #160]	; (8007b28 <TIM_OC3_SetConfig+0xfc>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d003      	beq.n	8007a92 <TIM_OC3_SetConfig+0x66>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a27      	ldr	r2, [pc, #156]	; (8007b2c <TIM_OC3_SetConfig+0x100>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d10d      	bne.n	8007aae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	021b      	lsls	r3, r3, #8
 8007aa0:	697a      	ldr	r2, [r7, #20]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007aac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a1d      	ldr	r2, [pc, #116]	; (8007b28 <TIM_OC3_SetConfig+0xfc>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d00f      	beq.n	8007ad6 <TIM_OC3_SetConfig+0xaa>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4a1c      	ldr	r2, [pc, #112]	; (8007b2c <TIM_OC3_SetConfig+0x100>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d00b      	beq.n	8007ad6 <TIM_OC3_SetConfig+0xaa>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a1b      	ldr	r2, [pc, #108]	; (8007b30 <TIM_OC3_SetConfig+0x104>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d007      	beq.n	8007ad6 <TIM_OC3_SetConfig+0xaa>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a1a      	ldr	r2, [pc, #104]	; (8007b34 <TIM_OC3_SetConfig+0x108>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d003      	beq.n	8007ad6 <TIM_OC3_SetConfig+0xaa>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a19      	ldr	r2, [pc, #100]	; (8007b38 <TIM_OC3_SetConfig+0x10c>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d113      	bne.n	8007afe <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007adc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	695b      	ldr	r3, [r3, #20]
 8007aea:	011b      	lsls	r3, r3, #4
 8007aec:	693a      	ldr	r2, [r7, #16]
 8007aee:	4313      	orrs	r3, r2
 8007af0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	699b      	ldr	r3, [r3, #24]
 8007af6:	011b      	lsls	r3, r3, #4
 8007af8:	693a      	ldr	r2, [r7, #16]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	693a      	ldr	r2, [r7, #16]
 8007b02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	68fa      	ldr	r2, [r7, #12]
 8007b08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	685a      	ldr	r2, [r3, #4]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	697a      	ldr	r2, [r7, #20]
 8007b16:	621a      	str	r2, [r3, #32]
}
 8007b18:	bf00      	nop
 8007b1a:	371c      	adds	r7, #28
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr
 8007b24:	fffeff8f 	.word	0xfffeff8f
 8007b28:	40010000 	.word	0x40010000
 8007b2c:	40010400 	.word	0x40010400
 8007b30:	40014000 	.word	0x40014000
 8007b34:	40014400 	.word	0x40014400
 8007b38:	40014800 	.word	0x40014800

08007b3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b087      	sub	sp, #28
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6a1b      	ldr	r3, [r3, #32]
 8007b4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a1b      	ldr	r3, [r3, #32]
 8007b56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	69db      	ldr	r3, [r3, #28]
 8007b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b64:	68fa      	ldr	r2, [r7, #12]
 8007b66:	4b24      	ldr	r3, [pc, #144]	; (8007bf8 <TIM_OC4_SetConfig+0xbc>)
 8007b68:	4013      	ands	r3, r2
 8007b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	021b      	lsls	r3, r3, #8
 8007b7a:	68fa      	ldr	r2, [r7, #12]
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	031b      	lsls	r3, r3, #12
 8007b8e:	693a      	ldr	r2, [r7, #16]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4a19      	ldr	r2, [pc, #100]	; (8007bfc <TIM_OC4_SetConfig+0xc0>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d00f      	beq.n	8007bbc <TIM_OC4_SetConfig+0x80>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4a18      	ldr	r2, [pc, #96]	; (8007c00 <TIM_OC4_SetConfig+0xc4>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d00b      	beq.n	8007bbc <TIM_OC4_SetConfig+0x80>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	4a17      	ldr	r2, [pc, #92]	; (8007c04 <TIM_OC4_SetConfig+0xc8>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d007      	beq.n	8007bbc <TIM_OC4_SetConfig+0x80>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4a16      	ldr	r2, [pc, #88]	; (8007c08 <TIM_OC4_SetConfig+0xcc>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d003      	beq.n	8007bbc <TIM_OC4_SetConfig+0x80>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a15      	ldr	r2, [pc, #84]	; (8007c0c <TIM_OC4_SetConfig+0xd0>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d109      	bne.n	8007bd0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	695b      	ldr	r3, [r3, #20]
 8007bc8:	019b      	lsls	r3, r3, #6
 8007bca:	697a      	ldr	r2, [r7, #20]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	697a      	ldr	r2, [r7, #20]
 8007bd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	685a      	ldr	r2, [r3, #4]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	693a      	ldr	r2, [r7, #16]
 8007be8:	621a      	str	r2, [r3, #32]
}
 8007bea:	bf00      	nop
 8007bec:	371c      	adds	r7, #28
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr
 8007bf6:	bf00      	nop
 8007bf8:	feff8fff 	.word	0xfeff8fff
 8007bfc:	40010000 	.word	0x40010000
 8007c00:	40010400 	.word	0x40010400
 8007c04:	40014000 	.word	0x40014000
 8007c08:	40014400 	.word	0x40014400
 8007c0c:	40014800 	.word	0x40014800

08007c10 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b087      	sub	sp, #28
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6a1b      	ldr	r3, [r3, #32]
 8007c1e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a1b      	ldr	r3, [r3, #32]
 8007c2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	4b21      	ldr	r3, [pc, #132]	; (8007cc0 <TIM_OC5_SetConfig+0xb0>)
 8007c3c:	4013      	ands	r3, r2
 8007c3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68fa      	ldr	r2, [r7, #12]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007c50:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	041b      	lsls	r3, r3, #16
 8007c58:	693a      	ldr	r2, [r7, #16]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a18      	ldr	r2, [pc, #96]	; (8007cc4 <TIM_OC5_SetConfig+0xb4>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d00f      	beq.n	8007c86 <TIM_OC5_SetConfig+0x76>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	4a17      	ldr	r2, [pc, #92]	; (8007cc8 <TIM_OC5_SetConfig+0xb8>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d00b      	beq.n	8007c86 <TIM_OC5_SetConfig+0x76>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4a16      	ldr	r2, [pc, #88]	; (8007ccc <TIM_OC5_SetConfig+0xbc>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d007      	beq.n	8007c86 <TIM_OC5_SetConfig+0x76>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4a15      	ldr	r2, [pc, #84]	; (8007cd0 <TIM_OC5_SetConfig+0xc0>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d003      	beq.n	8007c86 <TIM_OC5_SetConfig+0x76>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4a14      	ldr	r2, [pc, #80]	; (8007cd4 <TIM_OC5_SetConfig+0xc4>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d109      	bne.n	8007c9a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c8c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	021b      	lsls	r3, r3, #8
 8007c94:	697a      	ldr	r2, [r7, #20]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	697a      	ldr	r2, [r7, #20]
 8007c9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	68fa      	ldr	r2, [r7, #12]
 8007ca4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	685a      	ldr	r2, [r3, #4]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	621a      	str	r2, [r3, #32]
}
 8007cb4:	bf00      	nop
 8007cb6:	371c      	adds	r7, #28
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr
 8007cc0:	fffeff8f 	.word	0xfffeff8f
 8007cc4:	40010000 	.word	0x40010000
 8007cc8:	40010400 	.word	0x40010400
 8007ccc:	40014000 	.word	0x40014000
 8007cd0:	40014400 	.word	0x40014400
 8007cd4:	40014800 	.word	0x40014800

08007cd8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b087      	sub	sp, #28
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a1b      	ldr	r3, [r3, #32]
 8007ce6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6a1b      	ldr	r3, [r3, #32]
 8007cf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	4b22      	ldr	r3, [pc, #136]	; (8007d8c <TIM_OC6_SetConfig+0xb4>)
 8007d04:	4013      	ands	r3, r2
 8007d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	021b      	lsls	r3, r3, #8
 8007d0e:	68fa      	ldr	r2, [r7, #12]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	051b      	lsls	r3, r3, #20
 8007d22:	693a      	ldr	r2, [r7, #16]
 8007d24:	4313      	orrs	r3, r2
 8007d26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	4a19      	ldr	r2, [pc, #100]	; (8007d90 <TIM_OC6_SetConfig+0xb8>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d00f      	beq.n	8007d50 <TIM_OC6_SetConfig+0x78>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4a18      	ldr	r2, [pc, #96]	; (8007d94 <TIM_OC6_SetConfig+0xbc>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d00b      	beq.n	8007d50 <TIM_OC6_SetConfig+0x78>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a17      	ldr	r2, [pc, #92]	; (8007d98 <TIM_OC6_SetConfig+0xc0>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d007      	beq.n	8007d50 <TIM_OC6_SetConfig+0x78>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	4a16      	ldr	r2, [pc, #88]	; (8007d9c <TIM_OC6_SetConfig+0xc4>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d003      	beq.n	8007d50 <TIM_OC6_SetConfig+0x78>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	4a15      	ldr	r2, [pc, #84]	; (8007da0 <TIM_OC6_SetConfig+0xc8>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d109      	bne.n	8007d64 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	695b      	ldr	r3, [r3, #20]
 8007d5c:	029b      	lsls	r3, r3, #10
 8007d5e:	697a      	ldr	r2, [r7, #20]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	697a      	ldr	r2, [r7, #20]
 8007d68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	685a      	ldr	r2, [r3, #4]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	693a      	ldr	r2, [r7, #16]
 8007d7c:	621a      	str	r2, [r3, #32]
}
 8007d7e:	bf00      	nop
 8007d80:	371c      	adds	r7, #28
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	feff8fff 	.word	0xfeff8fff
 8007d90:	40010000 	.word	0x40010000
 8007d94:	40010400 	.word	0x40010400
 8007d98:	40014000 	.word	0x40014000
 8007d9c:	40014400 	.word	0x40014400
 8007da0:	40014800 	.word	0x40014800

08007da4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b087      	sub	sp, #28
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	f003 031f 	and.w	r3, r3, #31
 8007db6:	2201      	movs	r2, #1
 8007db8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6a1a      	ldr	r2, [r3, #32]
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	43db      	mvns	r3, r3
 8007dc6:	401a      	ands	r2, r3
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	6a1a      	ldr	r2, [r3, #32]
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	f003 031f 	and.w	r3, r3, #31
 8007dd6:	6879      	ldr	r1, [r7, #4]
 8007dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8007ddc:	431a      	orrs	r2, r3
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	621a      	str	r2, [r3, #32]
}
 8007de2:	bf00      	nop
 8007de4:	371c      	adds	r7, #28
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr

08007dee <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007dee:	b480      	push	{r7}
 8007df0:	b083      	sub	sp, #12
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007df6:	bf00      	nop
 8007df8:	370c      	adds	r7, #12
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr

08007e02 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e02:	b480      	push	{r7}
 8007e04:	b083      	sub	sp, #12
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e0a:	bf00      	nop
 8007e0c:	370c      	adds	r7, #12
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr

08007e16 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007e16:	b480      	push	{r7}
 8007e18:	b083      	sub	sp, #12
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007e1e:	bf00      	nop
 8007e20:	370c      	adds	r7, #12
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr

08007e2a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b082      	sub	sp, #8
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d101      	bne.n	8007e3c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	e042      	b.n	8007ec2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d106      	bne.n	8007e54 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f7fa fbb2 	bl	80025b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2224      	movs	r2, #36	; 0x24
 8007e58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f022 0201 	bic.w	r2, r2, #1
 8007e6a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 f8c3 	bl	8007ff8 <UART_SetConfig>
 8007e72:	4603      	mov	r3, r0
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d101      	bne.n	8007e7c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	e022      	b.n	8007ec2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d002      	beq.n	8007e8a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 fe1f 	bl	8008ac8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	685a      	ldr	r2, [r3, #4]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e98:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	689a      	ldr	r2, [r3, #8]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ea8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f042 0201 	orr.w	r2, r2, #1
 8007eb8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 fea6 	bl	8008c0c <UART_CheckIdleState>
 8007ec0:	4603      	mov	r3, r0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3708      	adds	r7, #8
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b08a      	sub	sp, #40	; 0x28
 8007ece:	af02      	add	r7, sp, #8
 8007ed0:	60f8      	str	r0, [r7, #12]
 8007ed2:	60b9      	str	r1, [r7, #8]
 8007ed4:	603b      	str	r3, [r7, #0]
 8007ed6:	4613      	mov	r3, r2
 8007ed8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ee0:	2b20      	cmp	r3, #32
 8007ee2:	f040 8083 	bne.w	8007fec <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d002      	beq.n	8007ef2 <HAL_UART_Transmit+0x28>
 8007eec:	88fb      	ldrh	r3, [r7, #6]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d101      	bne.n	8007ef6 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e07b      	b.n	8007fee <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d101      	bne.n	8007f04 <HAL_UART_Transmit+0x3a>
 8007f00:	2302      	movs	r3, #2
 8007f02:	e074      	b.n	8007fee <HAL_UART_Transmit+0x124>
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2221      	movs	r2, #33	; 0x21
 8007f18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f1c:	f7fa fd5c 	bl	80029d8 <HAL_GetTick>
 8007f20:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	88fa      	ldrh	r2, [r7, #6]
 8007f26:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	88fa      	ldrh	r2, [r7, #6]
 8007f2e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f3a:	d108      	bne.n	8007f4e <HAL_UART_Transmit+0x84>
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	691b      	ldr	r3, [r3, #16]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d104      	bne.n	8007f4e <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007f44:	2300      	movs	r3, #0
 8007f46:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	61bb      	str	r3, [r7, #24]
 8007f4c:	e003      	b.n	8007f56 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f52:	2300      	movs	r3, #0
 8007f54:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007f5e:	e02c      	b.n	8007fba <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	9300      	str	r3, [sp, #0]
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	2200      	movs	r2, #0
 8007f68:	2180      	movs	r1, #128	; 0x80
 8007f6a:	68f8      	ldr	r0, [r7, #12]
 8007f6c:	f000 fe99 	bl	8008ca2 <UART_WaitOnFlagUntilTimeout>
 8007f70:	4603      	mov	r3, r0
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d001      	beq.n	8007f7a <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007f76:	2303      	movs	r3, #3
 8007f78:	e039      	b.n	8007fee <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d10b      	bne.n	8007f98 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	881b      	ldrh	r3, [r3, #0]
 8007f84:	461a      	mov	r2, r3
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f8e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	3302      	adds	r3, #2
 8007f94:	61bb      	str	r3, [r7, #24]
 8007f96:	e007      	b.n	8007fa8 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	781a      	ldrb	r2, [r3, #0]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007fa2:	69fb      	ldr	r3, [r7, #28]
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	3b01      	subs	r3, #1
 8007fb2:	b29a      	uxth	r2, r3
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d1cc      	bne.n	8007f60 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	9300      	str	r3, [sp, #0]
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	2140      	movs	r1, #64	; 0x40
 8007fd0:	68f8      	ldr	r0, [r7, #12]
 8007fd2:	f000 fe66 	bl	8008ca2 <UART_WaitOnFlagUntilTimeout>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d001      	beq.n	8007fe0 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007fdc:	2303      	movs	r3, #3
 8007fde:	e006      	b.n	8007fee <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2220      	movs	r2, #32
 8007fe4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	e000      	b.n	8007fee <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007fec:	2302      	movs	r3, #2
  }
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3720      	adds	r7, #32
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
	...

08007ff8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ff8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ffc:	b092      	sub	sp, #72	; 0x48
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008002:	2300      	movs	r3, #0
 8008004:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	689a      	ldr	r2, [r3, #8]
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	691b      	ldr	r3, [r3, #16]
 8008010:	431a      	orrs	r2, r3
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	695b      	ldr	r3, [r3, #20]
 8008016:	431a      	orrs	r2, r3
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	69db      	ldr	r3, [r3, #28]
 800801c:	4313      	orrs	r3, r2
 800801e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	4bbe      	ldr	r3, [pc, #760]	; (8008320 <UART_SetConfig+0x328>)
 8008028:	4013      	ands	r3, r2
 800802a:	697a      	ldr	r2, [r7, #20]
 800802c:	6812      	ldr	r2, [r2, #0]
 800802e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008030:	430b      	orrs	r3, r1
 8008032:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	68da      	ldr	r2, [r3, #12]
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	430a      	orrs	r2, r1
 8008048:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	699b      	ldr	r3, [r3, #24]
 800804e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4ab3      	ldr	r2, [pc, #716]	; (8008324 <UART_SetConfig+0x32c>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d004      	beq.n	8008064 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	6a1b      	ldr	r3, [r3, #32]
 800805e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008060:	4313      	orrs	r3, r2
 8008062:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	689a      	ldr	r2, [r3, #8]
 800806a:	4baf      	ldr	r3, [pc, #700]	; (8008328 <UART_SetConfig+0x330>)
 800806c:	4013      	ands	r3, r2
 800806e:	697a      	ldr	r2, [r7, #20]
 8008070:	6812      	ldr	r2, [r2, #0]
 8008072:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008074:	430b      	orrs	r3, r1
 8008076:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807e:	f023 010f 	bic.w	r1, r3, #15
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	430a      	orrs	r2, r1
 800808c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4aa6      	ldr	r2, [pc, #664]	; (800832c <UART_SetConfig+0x334>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d177      	bne.n	8008188 <UART_SetConfig+0x190>
 8008098:	4ba5      	ldr	r3, [pc, #660]	; (8008330 <UART_SetConfig+0x338>)
 800809a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800809c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80080a0:	2b28      	cmp	r3, #40	; 0x28
 80080a2:	d86d      	bhi.n	8008180 <UART_SetConfig+0x188>
 80080a4:	a201      	add	r2, pc, #4	; (adr r2, 80080ac <UART_SetConfig+0xb4>)
 80080a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080aa:	bf00      	nop
 80080ac:	08008151 	.word	0x08008151
 80080b0:	08008181 	.word	0x08008181
 80080b4:	08008181 	.word	0x08008181
 80080b8:	08008181 	.word	0x08008181
 80080bc:	08008181 	.word	0x08008181
 80080c0:	08008181 	.word	0x08008181
 80080c4:	08008181 	.word	0x08008181
 80080c8:	08008181 	.word	0x08008181
 80080cc:	08008159 	.word	0x08008159
 80080d0:	08008181 	.word	0x08008181
 80080d4:	08008181 	.word	0x08008181
 80080d8:	08008181 	.word	0x08008181
 80080dc:	08008181 	.word	0x08008181
 80080e0:	08008181 	.word	0x08008181
 80080e4:	08008181 	.word	0x08008181
 80080e8:	08008181 	.word	0x08008181
 80080ec:	08008161 	.word	0x08008161
 80080f0:	08008181 	.word	0x08008181
 80080f4:	08008181 	.word	0x08008181
 80080f8:	08008181 	.word	0x08008181
 80080fc:	08008181 	.word	0x08008181
 8008100:	08008181 	.word	0x08008181
 8008104:	08008181 	.word	0x08008181
 8008108:	08008181 	.word	0x08008181
 800810c:	08008169 	.word	0x08008169
 8008110:	08008181 	.word	0x08008181
 8008114:	08008181 	.word	0x08008181
 8008118:	08008181 	.word	0x08008181
 800811c:	08008181 	.word	0x08008181
 8008120:	08008181 	.word	0x08008181
 8008124:	08008181 	.word	0x08008181
 8008128:	08008181 	.word	0x08008181
 800812c:	08008171 	.word	0x08008171
 8008130:	08008181 	.word	0x08008181
 8008134:	08008181 	.word	0x08008181
 8008138:	08008181 	.word	0x08008181
 800813c:	08008181 	.word	0x08008181
 8008140:	08008181 	.word	0x08008181
 8008144:	08008181 	.word	0x08008181
 8008148:	08008181 	.word	0x08008181
 800814c:	08008179 	.word	0x08008179
 8008150:	2301      	movs	r3, #1
 8008152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008156:	e222      	b.n	800859e <UART_SetConfig+0x5a6>
 8008158:	2304      	movs	r3, #4
 800815a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800815e:	e21e      	b.n	800859e <UART_SetConfig+0x5a6>
 8008160:	2308      	movs	r3, #8
 8008162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008166:	e21a      	b.n	800859e <UART_SetConfig+0x5a6>
 8008168:	2310      	movs	r3, #16
 800816a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800816e:	e216      	b.n	800859e <UART_SetConfig+0x5a6>
 8008170:	2320      	movs	r3, #32
 8008172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008176:	e212      	b.n	800859e <UART_SetConfig+0x5a6>
 8008178:	2340      	movs	r3, #64	; 0x40
 800817a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800817e:	e20e      	b.n	800859e <UART_SetConfig+0x5a6>
 8008180:	2380      	movs	r3, #128	; 0x80
 8008182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008186:	e20a      	b.n	800859e <UART_SetConfig+0x5a6>
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a69      	ldr	r2, [pc, #420]	; (8008334 <UART_SetConfig+0x33c>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d130      	bne.n	80081f4 <UART_SetConfig+0x1fc>
 8008192:	4b67      	ldr	r3, [pc, #412]	; (8008330 <UART_SetConfig+0x338>)
 8008194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008196:	f003 0307 	and.w	r3, r3, #7
 800819a:	2b05      	cmp	r3, #5
 800819c:	d826      	bhi.n	80081ec <UART_SetConfig+0x1f4>
 800819e:	a201      	add	r2, pc, #4	; (adr r2, 80081a4 <UART_SetConfig+0x1ac>)
 80081a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081a4:	080081bd 	.word	0x080081bd
 80081a8:	080081c5 	.word	0x080081c5
 80081ac:	080081cd 	.word	0x080081cd
 80081b0:	080081d5 	.word	0x080081d5
 80081b4:	080081dd 	.word	0x080081dd
 80081b8:	080081e5 	.word	0x080081e5
 80081bc:	2300      	movs	r3, #0
 80081be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081c2:	e1ec      	b.n	800859e <UART_SetConfig+0x5a6>
 80081c4:	2304      	movs	r3, #4
 80081c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081ca:	e1e8      	b.n	800859e <UART_SetConfig+0x5a6>
 80081cc:	2308      	movs	r3, #8
 80081ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081d2:	e1e4      	b.n	800859e <UART_SetConfig+0x5a6>
 80081d4:	2310      	movs	r3, #16
 80081d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081da:	e1e0      	b.n	800859e <UART_SetConfig+0x5a6>
 80081dc:	2320      	movs	r3, #32
 80081de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081e2:	e1dc      	b.n	800859e <UART_SetConfig+0x5a6>
 80081e4:	2340      	movs	r3, #64	; 0x40
 80081e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081ea:	e1d8      	b.n	800859e <UART_SetConfig+0x5a6>
 80081ec:	2380      	movs	r3, #128	; 0x80
 80081ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081f2:	e1d4      	b.n	800859e <UART_SetConfig+0x5a6>
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a4f      	ldr	r2, [pc, #316]	; (8008338 <UART_SetConfig+0x340>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d130      	bne.n	8008260 <UART_SetConfig+0x268>
 80081fe:	4b4c      	ldr	r3, [pc, #304]	; (8008330 <UART_SetConfig+0x338>)
 8008200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008202:	f003 0307 	and.w	r3, r3, #7
 8008206:	2b05      	cmp	r3, #5
 8008208:	d826      	bhi.n	8008258 <UART_SetConfig+0x260>
 800820a:	a201      	add	r2, pc, #4	; (adr r2, 8008210 <UART_SetConfig+0x218>)
 800820c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008210:	08008229 	.word	0x08008229
 8008214:	08008231 	.word	0x08008231
 8008218:	08008239 	.word	0x08008239
 800821c:	08008241 	.word	0x08008241
 8008220:	08008249 	.word	0x08008249
 8008224:	08008251 	.word	0x08008251
 8008228:	2300      	movs	r3, #0
 800822a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800822e:	e1b6      	b.n	800859e <UART_SetConfig+0x5a6>
 8008230:	2304      	movs	r3, #4
 8008232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008236:	e1b2      	b.n	800859e <UART_SetConfig+0x5a6>
 8008238:	2308      	movs	r3, #8
 800823a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800823e:	e1ae      	b.n	800859e <UART_SetConfig+0x5a6>
 8008240:	2310      	movs	r3, #16
 8008242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008246:	e1aa      	b.n	800859e <UART_SetConfig+0x5a6>
 8008248:	2320      	movs	r3, #32
 800824a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800824e:	e1a6      	b.n	800859e <UART_SetConfig+0x5a6>
 8008250:	2340      	movs	r3, #64	; 0x40
 8008252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008256:	e1a2      	b.n	800859e <UART_SetConfig+0x5a6>
 8008258:	2380      	movs	r3, #128	; 0x80
 800825a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800825e:	e19e      	b.n	800859e <UART_SetConfig+0x5a6>
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a35      	ldr	r2, [pc, #212]	; (800833c <UART_SetConfig+0x344>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d130      	bne.n	80082cc <UART_SetConfig+0x2d4>
 800826a:	4b31      	ldr	r3, [pc, #196]	; (8008330 <UART_SetConfig+0x338>)
 800826c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800826e:	f003 0307 	and.w	r3, r3, #7
 8008272:	2b05      	cmp	r3, #5
 8008274:	d826      	bhi.n	80082c4 <UART_SetConfig+0x2cc>
 8008276:	a201      	add	r2, pc, #4	; (adr r2, 800827c <UART_SetConfig+0x284>)
 8008278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800827c:	08008295 	.word	0x08008295
 8008280:	0800829d 	.word	0x0800829d
 8008284:	080082a5 	.word	0x080082a5
 8008288:	080082ad 	.word	0x080082ad
 800828c:	080082b5 	.word	0x080082b5
 8008290:	080082bd 	.word	0x080082bd
 8008294:	2300      	movs	r3, #0
 8008296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800829a:	e180      	b.n	800859e <UART_SetConfig+0x5a6>
 800829c:	2304      	movs	r3, #4
 800829e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082a2:	e17c      	b.n	800859e <UART_SetConfig+0x5a6>
 80082a4:	2308      	movs	r3, #8
 80082a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082aa:	e178      	b.n	800859e <UART_SetConfig+0x5a6>
 80082ac:	2310      	movs	r3, #16
 80082ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082b2:	e174      	b.n	800859e <UART_SetConfig+0x5a6>
 80082b4:	2320      	movs	r3, #32
 80082b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ba:	e170      	b.n	800859e <UART_SetConfig+0x5a6>
 80082bc:	2340      	movs	r3, #64	; 0x40
 80082be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082c2:	e16c      	b.n	800859e <UART_SetConfig+0x5a6>
 80082c4:	2380      	movs	r3, #128	; 0x80
 80082c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ca:	e168      	b.n	800859e <UART_SetConfig+0x5a6>
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a1b      	ldr	r2, [pc, #108]	; (8008340 <UART_SetConfig+0x348>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d142      	bne.n	800835c <UART_SetConfig+0x364>
 80082d6:	4b16      	ldr	r3, [pc, #88]	; (8008330 <UART_SetConfig+0x338>)
 80082d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082da:	f003 0307 	and.w	r3, r3, #7
 80082de:	2b05      	cmp	r3, #5
 80082e0:	d838      	bhi.n	8008354 <UART_SetConfig+0x35c>
 80082e2:	a201      	add	r2, pc, #4	; (adr r2, 80082e8 <UART_SetConfig+0x2f0>)
 80082e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082e8:	08008301 	.word	0x08008301
 80082ec:	08008309 	.word	0x08008309
 80082f0:	08008311 	.word	0x08008311
 80082f4:	08008319 	.word	0x08008319
 80082f8:	08008345 	.word	0x08008345
 80082fc:	0800834d 	.word	0x0800834d
 8008300:	2300      	movs	r3, #0
 8008302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008306:	e14a      	b.n	800859e <UART_SetConfig+0x5a6>
 8008308:	2304      	movs	r3, #4
 800830a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800830e:	e146      	b.n	800859e <UART_SetConfig+0x5a6>
 8008310:	2308      	movs	r3, #8
 8008312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008316:	e142      	b.n	800859e <UART_SetConfig+0x5a6>
 8008318:	2310      	movs	r3, #16
 800831a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800831e:	e13e      	b.n	800859e <UART_SetConfig+0x5a6>
 8008320:	cfff69f3 	.word	0xcfff69f3
 8008324:	58000c00 	.word	0x58000c00
 8008328:	11fff4ff 	.word	0x11fff4ff
 800832c:	40011000 	.word	0x40011000
 8008330:	58024400 	.word	0x58024400
 8008334:	40004400 	.word	0x40004400
 8008338:	40004800 	.word	0x40004800
 800833c:	40004c00 	.word	0x40004c00
 8008340:	40005000 	.word	0x40005000
 8008344:	2320      	movs	r3, #32
 8008346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800834a:	e128      	b.n	800859e <UART_SetConfig+0x5a6>
 800834c:	2340      	movs	r3, #64	; 0x40
 800834e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008352:	e124      	b.n	800859e <UART_SetConfig+0x5a6>
 8008354:	2380      	movs	r3, #128	; 0x80
 8008356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800835a:	e120      	b.n	800859e <UART_SetConfig+0x5a6>
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4acb      	ldr	r2, [pc, #812]	; (8008690 <UART_SetConfig+0x698>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d176      	bne.n	8008454 <UART_SetConfig+0x45c>
 8008366:	4bcb      	ldr	r3, [pc, #812]	; (8008694 <UART_SetConfig+0x69c>)
 8008368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800836a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800836e:	2b28      	cmp	r3, #40	; 0x28
 8008370:	d86c      	bhi.n	800844c <UART_SetConfig+0x454>
 8008372:	a201      	add	r2, pc, #4	; (adr r2, 8008378 <UART_SetConfig+0x380>)
 8008374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008378:	0800841d 	.word	0x0800841d
 800837c:	0800844d 	.word	0x0800844d
 8008380:	0800844d 	.word	0x0800844d
 8008384:	0800844d 	.word	0x0800844d
 8008388:	0800844d 	.word	0x0800844d
 800838c:	0800844d 	.word	0x0800844d
 8008390:	0800844d 	.word	0x0800844d
 8008394:	0800844d 	.word	0x0800844d
 8008398:	08008425 	.word	0x08008425
 800839c:	0800844d 	.word	0x0800844d
 80083a0:	0800844d 	.word	0x0800844d
 80083a4:	0800844d 	.word	0x0800844d
 80083a8:	0800844d 	.word	0x0800844d
 80083ac:	0800844d 	.word	0x0800844d
 80083b0:	0800844d 	.word	0x0800844d
 80083b4:	0800844d 	.word	0x0800844d
 80083b8:	0800842d 	.word	0x0800842d
 80083bc:	0800844d 	.word	0x0800844d
 80083c0:	0800844d 	.word	0x0800844d
 80083c4:	0800844d 	.word	0x0800844d
 80083c8:	0800844d 	.word	0x0800844d
 80083cc:	0800844d 	.word	0x0800844d
 80083d0:	0800844d 	.word	0x0800844d
 80083d4:	0800844d 	.word	0x0800844d
 80083d8:	08008435 	.word	0x08008435
 80083dc:	0800844d 	.word	0x0800844d
 80083e0:	0800844d 	.word	0x0800844d
 80083e4:	0800844d 	.word	0x0800844d
 80083e8:	0800844d 	.word	0x0800844d
 80083ec:	0800844d 	.word	0x0800844d
 80083f0:	0800844d 	.word	0x0800844d
 80083f4:	0800844d 	.word	0x0800844d
 80083f8:	0800843d 	.word	0x0800843d
 80083fc:	0800844d 	.word	0x0800844d
 8008400:	0800844d 	.word	0x0800844d
 8008404:	0800844d 	.word	0x0800844d
 8008408:	0800844d 	.word	0x0800844d
 800840c:	0800844d 	.word	0x0800844d
 8008410:	0800844d 	.word	0x0800844d
 8008414:	0800844d 	.word	0x0800844d
 8008418:	08008445 	.word	0x08008445
 800841c:	2301      	movs	r3, #1
 800841e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008422:	e0bc      	b.n	800859e <UART_SetConfig+0x5a6>
 8008424:	2304      	movs	r3, #4
 8008426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800842a:	e0b8      	b.n	800859e <UART_SetConfig+0x5a6>
 800842c:	2308      	movs	r3, #8
 800842e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008432:	e0b4      	b.n	800859e <UART_SetConfig+0x5a6>
 8008434:	2310      	movs	r3, #16
 8008436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800843a:	e0b0      	b.n	800859e <UART_SetConfig+0x5a6>
 800843c:	2320      	movs	r3, #32
 800843e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008442:	e0ac      	b.n	800859e <UART_SetConfig+0x5a6>
 8008444:	2340      	movs	r3, #64	; 0x40
 8008446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800844a:	e0a8      	b.n	800859e <UART_SetConfig+0x5a6>
 800844c:	2380      	movs	r3, #128	; 0x80
 800844e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008452:	e0a4      	b.n	800859e <UART_SetConfig+0x5a6>
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a8f      	ldr	r2, [pc, #572]	; (8008698 <UART_SetConfig+0x6a0>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d130      	bne.n	80084c0 <UART_SetConfig+0x4c8>
 800845e:	4b8d      	ldr	r3, [pc, #564]	; (8008694 <UART_SetConfig+0x69c>)
 8008460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008462:	f003 0307 	and.w	r3, r3, #7
 8008466:	2b05      	cmp	r3, #5
 8008468:	d826      	bhi.n	80084b8 <UART_SetConfig+0x4c0>
 800846a:	a201      	add	r2, pc, #4	; (adr r2, 8008470 <UART_SetConfig+0x478>)
 800846c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008470:	08008489 	.word	0x08008489
 8008474:	08008491 	.word	0x08008491
 8008478:	08008499 	.word	0x08008499
 800847c:	080084a1 	.word	0x080084a1
 8008480:	080084a9 	.word	0x080084a9
 8008484:	080084b1 	.word	0x080084b1
 8008488:	2300      	movs	r3, #0
 800848a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800848e:	e086      	b.n	800859e <UART_SetConfig+0x5a6>
 8008490:	2304      	movs	r3, #4
 8008492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008496:	e082      	b.n	800859e <UART_SetConfig+0x5a6>
 8008498:	2308      	movs	r3, #8
 800849a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800849e:	e07e      	b.n	800859e <UART_SetConfig+0x5a6>
 80084a0:	2310      	movs	r3, #16
 80084a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084a6:	e07a      	b.n	800859e <UART_SetConfig+0x5a6>
 80084a8:	2320      	movs	r3, #32
 80084aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ae:	e076      	b.n	800859e <UART_SetConfig+0x5a6>
 80084b0:	2340      	movs	r3, #64	; 0x40
 80084b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084b6:	e072      	b.n	800859e <UART_SetConfig+0x5a6>
 80084b8:	2380      	movs	r3, #128	; 0x80
 80084ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084be:	e06e      	b.n	800859e <UART_SetConfig+0x5a6>
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a75      	ldr	r2, [pc, #468]	; (800869c <UART_SetConfig+0x6a4>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d130      	bne.n	800852c <UART_SetConfig+0x534>
 80084ca:	4b72      	ldr	r3, [pc, #456]	; (8008694 <UART_SetConfig+0x69c>)
 80084cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084ce:	f003 0307 	and.w	r3, r3, #7
 80084d2:	2b05      	cmp	r3, #5
 80084d4:	d826      	bhi.n	8008524 <UART_SetConfig+0x52c>
 80084d6:	a201      	add	r2, pc, #4	; (adr r2, 80084dc <UART_SetConfig+0x4e4>)
 80084d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084dc:	080084f5 	.word	0x080084f5
 80084e0:	080084fd 	.word	0x080084fd
 80084e4:	08008505 	.word	0x08008505
 80084e8:	0800850d 	.word	0x0800850d
 80084ec:	08008515 	.word	0x08008515
 80084f0:	0800851d 	.word	0x0800851d
 80084f4:	2300      	movs	r3, #0
 80084f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084fa:	e050      	b.n	800859e <UART_SetConfig+0x5a6>
 80084fc:	2304      	movs	r3, #4
 80084fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008502:	e04c      	b.n	800859e <UART_SetConfig+0x5a6>
 8008504:	2308      	movs	r3, #8
 8008506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800850a:	e048      	b.n	800859e <UART_SetConfig+0x5a6>
 800850c:	2310      	movs	r3, #16
 800850e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008512:	e044      	b.n	800859e <UART_SetConfig+0x5a6>
 8008514:	2320      	movs	r3, #32
 8008516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800851a:	e040      	b.n	800859e <UART_SetConfig+0x5a6>
 800851c:	2340      	movs	r3, #64	; 0x40
 800851e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008522:	e03c      	b.n	800859e <UART_SetConfig+0x5a6>
 8008524:	2380      	movs	r3, #128	; 0x80
 8008526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800852a:	e038      	b.n	800859e <UART_SetConfig+0x5a6>
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a5b      	ldr	r2, [pc, #364]	; (80086a0 <UART_SetConfig+0x6a8>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d130      	bne.n	8008598 <UART_SetConfig+0x5a0>
 8008536:	4b57      	ldr	r3, [pc, #348]	; (8008694 <UART_SetConfig+0x69c>)
 8008538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800853a:	f003 0307 	and.w	r3, r3, #7
 800853e:	2b05      	cmp	r3, #5
 8008540:	d826      	bhi.n	8008590 <UART_SetConfig+0x598>
 8008542:	a201      	add	r2, pc, #4	; (adr r2, 8008548 <UART_SetConfig+0x550>)
 8008544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008548:	08008561 	.word	0x08008561
 800854c:	08008569 	.word	0x08008569
 8008550:	08008571 	.word	0x08008571
 8008554:	08008579 	.word	0x08008579
 8008558:	08008581 	.word	0x08008581
 800855c:	08008589 	.word	0x08008589
 8008560:	2302      	movs	r3, #2
 8008562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008566:	e01a      	b.n	800859e <UART_SetConfig+0x5a6>
 8008568:	2304      	movs	r3, #4
 800856a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800856e:	e016      	b.n	800859e <UART_SetConfig+0x5a6>
 8008570:	2308      	movs	r3, #8
 8008572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008576:	e012      	b.n	800859e <UART_SetConfig+0x5a6>
 8008578:	2310      	movs	r3, #16
 800857a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800857e:	e00e      	b.n	800859e <UART_SetConfig+0x5a6>
 8008580:	2320      	movs	r3, #32
 8008582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008586:	e00a      	b.n	800859e <UART_SetConfig+0x5a6>
 8008588:	2340      	movs	r3, #64	; 0x40
 800858a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800858e:	e006      	b.n	800859e <UART_SetConfig+0x5a6>
 8008590:	2380      	movs	r3, #128	; 0x80
 8008592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008596:	e002      	b.n	800859e <UART_SetConfig+0x5a6>
 8008598:	2380      	movs	r3, #128	; 0x80
 800859a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a3f      	ldr	r2, [pc, #252]	; (80086a0 <UART_SetConfig+0x6a8>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	f040 80f8 	bne.w	800879a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80085aa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80085ae:	2b20      	cmp	r3, #32
 80085b0:	dc46      	bgt.n	8008640 <UART_SetConfig+0x648>
 80085b2:	2b02      	cmp	r3, #2
 80085b4:	f2c0 8082 	blt.w	80086bc <UART_SetConfig+0x6c4>
 80085b8:	3b02      	subs	r3, #2
 80085ba:	2b1e      	cmp	r3, #30
 80085bc:	d87e      	bhi.n	80086bc <UART_SetConfig+0x6c4>
 80085be:	a201      	add	r2, pc, #4	; (adr r2, 80085c4 <UART_SetConfig+0x5cc>)
 80085c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c4:	08008647 	.word	0x08008647
 80085c8:	080086bd 	.word	0x080086bd
 80085cc:	0800864f 	.word	0x0800864f
 80085d0:	080086bd 	.word	0x080086bd
 80085d4:	080086bd 	.word	0x080086bd
 80085d8:	080086bd 	.word	0x080086bd
 80085dc:	0800865f 	.word	0x0800865f
 80085e0:	080086bd 	.word	0x080086bd
 80085e4:	080086bd 	.word	0x080086bd
 80085e8:	080086bd 	.word	0x080086bd
 80085ec:	080086bd 	.word	0x080086bd
 80085f0:	080086bd 	.word	0x080086bd
 80085f4:	080086bd 	.word	0x080086bd
 80085f8:	080086bd 	.word	0x080086bd
 80085fc:	0800866f 	.word	0x0800866f
 8008600:	080086bd 	.word	0x080086bd
 8008604:	080086bd 	.word	0x080086bd
 8008608:	080086bd 	.word	0x080086bd
 800860c:	080086bd 	.word	0x080086bd
 8008610:	080086bd 	.word	0x080086bd
 8008614:	080086bd 	.word	0x080086bd
 8008618:	080086bd 	.word	0x080086bd
 800861c:	080086bd 	.word	0x080086bd
 8008620:	080086bd 	.word	0x080086bd
 8008624:	080086bd 	.word	0x080086bd
 8008628:	080086bd 	.word	0x080086bd
 800862c:	080086bd 	.word	0x080086bd
 8008630:	080086bd 	.word	0x080086bd
 8008634:	080086bd 	.word	0x080086bd
 8008638:	080086bd 	.word	0x080086bd
 800863c:	080086af 	.word	0x080086af
 8008640:	2b40      	cmp	r3, #64	; 0x40
 8008642:	d037      	beq.n	80086b4 <UART_SetConfig+0x6bc>
 8008644:	e03a      	b.n	80086bc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008646:	f7fc ffdb 	bl	8005600 <HAL_RCCEx_GetD3PCLK1Freq>
 800864a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800864c:	e03c      	b.n	80086c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800864e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008652:	4618      	mov	r0, r3
 8008654:	f7fc ffea 	bl	800562c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800865c:	e034      	b.n	80086c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800865e:	f107 0318 	add.w	r3, r7, #24
 8008662:	4618      	mov	r0, r3
 8008664:	f7fd f936 	bl	80058d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800866c:	e02c      	b.n	80086c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800866e:	4b09      	ldr	r3, [pc, #36]	; (8008694 <UART_SetConfig+0x69c>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f003 0320 	and.w	r3, r3, #32
 8008676:	2b00      	cmp	r3, #0
 8008678:	d016      	beq.n	80086a8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800867a:	4b06      	ldr	r3, [pc, #24]	; (8008694 <UART_SetConfig+0x69c>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	08db      	lsrs	r3, r3, #3
 8008680:	f003 0303 	and.w	r3, r3, #3
 8008684:	4a07      	ldr	r2, [pc, #28]	; (80086a4 <UART_SetConfig+0x6ac>)
 8008686:	fa22 f303 	lsr.w	r3, r2, r3
 800868a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800868c:	e01c      	b.n	80086c8 <UART_SetConfig+0x6d0>
 800868e:	bf00      	nop
 8008690:	40011400 	.word	0x40011400
 8008694:	58024400 	.word	0x58024400
 8008698:	40007800 	.word	0x40007800
 800869c:	40007c00 	.word	0x40007c00
 80086a0:	58000c00 	.word	0x58000c00
 80086a4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80086a8:	4b9d      	ldr	r3, [pc, #628]	; (8008920 <UART_SetConfig+0x928>)
 80086aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086ac:	e00c      	b.n	80086c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80086ae:	4b9d      	ldr	r3, [pc, #628]	; (8008924 <UART_SetConfig+0x92c>)
 80086b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086b2:	e009      	b.n	80086c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086ba:	e005      	b.n	80086c8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80086bc:	2300      	movs	r3, #0
 80086be:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80086c0:	2301      	movs	r3, #1
 80086c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80086c6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80086c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	f000 81de 	beq.w	8008a8c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d4:	4a94      	ldr	r2, [pc, #592]	; (8008928 <UART_SetConfig+0x930>)
 80086d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086da:	461a      	mov	r2, r3
 80086dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086de:	fbb3 f3f2 	udiv	r3, r3, r2
 80086e2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	685a      	ldr	r2, [r3, #4]
 80086e8:	4613      	mov	r3, r2
 80086ea:	005b      	lsls	r3, r3, #1
 80086ec:	4413      	add	r3, r2
 80086ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d305      	bcc.n	8008700 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80086fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d903      	bls.n	8008708 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008700:	2301      	movs	r3, #1
 8008702:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008706:	e1c1      	b.n	8008a8c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800870a:	2200      	movs	r2, #0
 800870c:	60bb      	str	r3, [r7, #8]
 800870e:	60fa      	str	r2, [r7, #12]
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008714:	4a84      	ldr	r2, [pc, #528]	; (8008928 <UART_SetConfig+0x930>)
 8008716:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800871a:	b29b      	uxth	r3, r3
 800871c:	2200      	movs	r2, #0
 800871e:	603b      	str	r3, [r7, #0]
 8008720:	607a      	str	r2, [r7, #4]
 8008722:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008726:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800872a:	f7f7 fe31 	bl	8000390 <__aeabi_uldivmod>
 800872e:	4602      	mov	r2, r0
 8008730:	460b      	mov	r3, r1
 8008732:	4610      	mov	r0, r2
 8008734:	4619      	mov	r1, r3
 8008736:	f04f 0200 	mov.w	r2, #0
 800873a:	f04f 0300 	mov.w	r3, #0
 800873e:	020b      	lsls	r3, r1, #8
 8008740:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008744:	0202      	lsls	r2, r0, #8
 8008746:	6979      	ldr	r1, [r7, #20]
 8008748:	6849      	ldr	r1, [r1, #4]
 800874a:	0849      	lsrs	r1, r1, #1
 800874c:	2000      	movs	r0, #0
 800874e:	460c      	mov	r4, r1
 8008750:	4605      	mov	r5, r0
 8008752:	eb12 0804 	adds.w	r8, r2, r4
 8008756:	eb43 0905 	adc.w	r9, r3, r5
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	469a      	mov	sl, r3
 8008762:	4693      	mov	fp, r2
 8008764:	4652      	mov	r2, sl
 8008766:	465b      	mov	r3, fp
 8008768:	4640      	mov	r0, r8
 800876a:	4649      	mov	r1, r9
 800876c:	f7f7 fe10 	bl	8000390 <__aeabi_uldivmod>
 8008770:	4602      	mov	r2, r0
 8008772:	460b      	mov	r3, r1
 8008774:	4613      	mov	r3, r2
 8008776:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800877a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800877e:	d308      	bcc.n	8008792 <UART_SetConfig+0x79a>
 8008780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008782:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008786:	d204      	bcs.n	8008792 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800878e:	60da      	str	r2, [r3, #12]
 8008790:	e17c      	b.n	8008a8c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008798:	e178      	b.n	8008a8c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	69db      	ldr	r3, [r3, #28]
 800879e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087a2:	f040 80c5 	bne.w	8008930 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80087a6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80087aa:	2b20      	cmp	r3, #32
 80087ac:	dc48      	bgt.n	8008840 <UART_SetConfig+0x848>
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	db7b      	blt.n	80088aa <UART_SetConfig+0x8b2>
 80087b2:	2b20      	cmp	r3, #32
 80087b4:	d879      	bhi.n	80088aa <UART_SetConfig+0x8b2>
 80087b6:	a201      	add	r2, pc, #4	; (adr r2, 80087bc <UART_SetConfig+0x7c4>)
 80087b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087bc:	08008847 	.word	0x08008847
 80087c0:	0800884f 	.word	0x0800884f
 80087c4:	080088ab 	.word	0x080088ab
 80087c8:	080088ab 	.word	0x080088ab
 80087cc:	08008857 	.word	0x08008857
 80087d0:	080088ab 	.word	0x080088ab
 80087d4:	080088ab 	.word	0x080088ab
 80087d8:	080088ab 	.word	0x080088ab
 80087dc:	08008867 	.word	0x08008867
 80087e0:	080088ab 	.word	0x080088ab
 80087e4:	080088ab 	.word	0x080088ab
 80087e8:	080088ab 	.word	0x080088ab
 80087ec:	080088ab 	.word	0x080088ab
 80087f0:	080088ab 	.word	0x080088ab
 80087f4:	080088ab 	.word	0x080088ab
 80087f8:	080088ab 	.word	0x080088ab
 80087fc:	08008877 	.word	0x08008877
 8008800:	080088ab 	.word	0x080088ab
 8008804:	080088ab 	.word	0x080088ab
 8008808:	080088ab 	.word	0x080088ab
 800880c:	080088ab 	.word	0x080088ab
 8008810:	080088ab 	.word	0x080088ab
 8008814:	080088ab 	.word	0x080088ab
 8008818:	080088ab 	.word	0x080088ab
 800881c:	080088ab 	.word	0x080088ab
 8008820:	080088ab 	.word	0x080088ab
 8008824:	080088ab 	.word	0x080088ab
 8008828:	080088ab 	.word	0x080088ab
 800882c:	080088ab 	.word	0x080088ab
 8008830:	080088ab 	.word	0x080088ab
 8008834:	080088ab 	.word	0x080088ab
 8008838:	080088ab 	.word	0x080088ab
 800883c:	0800889d 	.word	0x0800889d
 8008840:	2b40      	cmp	r3, #64	; 0x40
 8008842:	d02e      	beq.n	80088a2 <UART_SetConfig+0x8aa>
 8008844:	e031      	b.n	80088aa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008846:	f7fb ff27 	bl	8004698 <HAL_RCC_GetPCLK1Freq>
 800884a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800884c:	e033      	b.n	80088b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800884e:	f7fb ff39 	bl	80046c4 <HAL_RCC_GetPCLK2Freq>
 8008852:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008854:	e02f      	b.n	80088b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008856:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800885a:	4618      	mov	r0, r3
 800885c:	f7fc fee6 	bl	800562c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008862:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008864:	e027      	b.n	80088b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008866:	f107 0318 	add.w	r3, r7, #24
 800886a:	4618      	mov	r0, r3
 800886c:	f7fd f832 	bl	80058d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008874:	e01f      	b.n	80088b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008876:	4b2d      	ldr	r3, [pc, #180]	; (800892c <UART_SetConfig+0x934>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f003 0320 	and.w	r3, r3, #32
 800887e:	2b00      	cmp	r3, #0
 8008880:	d009      	beq.n	8008896 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008882:	4b2a      	ldr	r3, [pc, #168]	; (800892c <UART_SetConfig+0x934>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	08db      	lsrs	r3, r3, #3
 8008888:	f003 0303 	and.w	r3, r3, #3
 800888c:	4a24      	ldr	r2, [pc, #144]	; (8008920 <UART_SetConfig+0x928>)
 800888e:	fa22 f303 	lsr.w	r3, r2, r3
 8008892:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008894:	e00f      	b.n	80088b6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008896:	4b22      	ldr	r3, [pc, #136]	; (8008920 <UART_SetConfig+0x928>)
 8008898:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800889a:	e00c      	b.n	80088b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800889c:	4b21      	ldr	r3, [pc, #132]	; (8008924 <UART_SetConfig+0x92c>)
 800889e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088a0:	e009      	b.n	80088b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088a8:	e005      	b.n	80088b6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80088aa:	2300      	movs	r3, #0
 80088ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80088ae:	2301      	movs	r3, #1
 80088b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80088b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80088b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	f000 80e7 	beq.w	8008a8c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c2:	4a19      	ldr	r2, [pc, #100]	; (8008928 <UART_SetConfig+0x930>)
 80088c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088c8:	461a      	mov	r2, r3
 80088ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80088d0:	005a      	lsls	r2, r3, #1
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	085b      	lsrs	r3, r3, #1
 80088d8:	441a      	add	r2, r3
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	fbb2 f3f3 	udiv	r3, r2, r3
 80088e2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e6:	2b0f      	cmp	r3, #15
 80088e8:	d916      	bls.n	8008918 <UART_SetConfig+0x920>
 80088ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088f0:	d212      	bcs.n	8008918 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80088f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	f023 030f 	bic.w	r3, r3, #15
 80088fa:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80088fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088fe:	085b      	lsrs	r3, r3, #1
 8008900:	b29b      	uxth	r3, r3
 8008902:	f003 0307 	and.w	r3, r3, #7
 8008906:	b29a      	uxth	r2, r3
 8008908:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800890a:	4313      	orrs	r3, r2
 800890c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008914:	60da      	str	r2, [r3, #12]
 8008916:	e0b9      	b.n	8008a8c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008918:	2301      	movs	r3, #1
 800891a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800891e:	e0b5      	b.n	8008a8c <UART_SetConfig+0xa94>
 8008920:	03d09000 	.word	0x03d09000
 8008924:	003d0900 	.word	0x003d0900
 8008928:	0800d55c 	.word	0x0800d55c
 800892c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008930:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008934:	2b20      	cmp	r3, #32
 8008936:	dc49      	bgt.n	80089cc <UART_SetConfig+0x9d4>
 8008938:	2b00      	cmp	r3, #0
 800893a:	db7c      	blt.n	8008a36 <UART_SetConfig+0xa3e>
 800893c:	2b20      	cmp	r3, #32
 800893e:	d87a      	bhi.n	8008a36 <UART_SetConfig+0xa3e>
 8008940:	a201      	add	r2, pc, #4	; (adr r2, 8008948 <UART_SetConfig+0x950>)
 8008942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008946:	bf00      	nop
 8008948:	080089d3 	.word	0x080089d3
 800894c:	080089db 	.word	0x080089db
 8008950:	08008a37 	.word	0x08008a37
 8008954:	08008a37 	.word	0x08008a37
 8008958:	080089e3 	.word	0x080089e3
 800895c:	08008a37 	.word	0x08008a37
 8008960:	08008a37 	.word	0x08008a37
 8008964:	08008a37 	.word	0x08008a37
 8008968:	080089f3 	.word	0x080089f3
 800896c:	08008a37 	.word	0x08008a37
 8008970:	08008a37 	.word	0x08008a37
 8008974:	08008a37 	.word	0x08008a37
 8008978:	08008a37 	.word	0x08008a37
 800897c:	08008a37 	.word	0x08008a37
 8008980:	08008a37 	.word	0x08008a37
 8008984:	08008a37 	.word	0x08008a37
 8008988:	08008a03 	.word	0x08008a03
 800898c:	08008a37 	.word	0x08008a37
 8008990:	08008a37 	.word	0x08008a37
 8008994:	08008a37 	.word	0x08008a37
 8008998:	08008a37 	.word	0x08008a37
 800899c:	08008a37 	.word	0x08008a37
 80089a0:	08008a37 	.word	0x08008a37
 80089a4:	08008a37 	.word	0x08008a37
 80089a8:	08008a37 	.word	0x08008a37
 80089ac:	08008a37 	.word	0x08008a37
 80089b0:	08008a37 	.word	0x08008a37
 80089b4:	08008a37 	.word	0x08008a37
 80089b8:	08008a37 	.word	0x08008a37
 80089bc:	08008a37 	.word	0x08008a37
 80089c0:	08008a37 	.word	0x08008a37
 80089c4:	08008a37 	.word	0x08008a37
 80089c8:	08008a29 	.word	0x08008a29
 80089cc:	2b40      	cmp	r3, #64	; 0x40
 80089ce:	d02e      	beq.n	8008a2e <UART_SetConfig+0xa36>
 80089d0:	e031      	b.n	8008a36 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089d2:	f7fb fe61 	bl	8004698 <HAL_RCC_GetPCLK1Freq>
 80089d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80089d8:	e033      	b.n	8008a42 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089da:	f7fb fe73 	bl	80046c4 <HAL_RCC_GetPCLK2Freq>
 80089de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80089e0:	e02f      	b.n	8008a42 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7fc fe20 	bl	800562c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80089ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089f0:	e027      	b.n	8008a42 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089f2:	f107 0318 	add.w	r3, r7, #24
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7fc ff6c 	bl	80058d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80089fc:	69fb      	ldr	r3, [r7, #28]
 80089fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a00:	e01f      	b.n	8008a42 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a02:	4b2d      	ldr	r3, [pc, #180]	; (8008ab8 <UART_SetConfig+0xac0>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f003 0320 	and.w	r3, r3, #32
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d009      	beq.n	8008a22 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008a0e:	4b2a      	ldr	r3, [pc, #168]	; (8008ab8 <UART_SetConfig+0xac0>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	08db      	lsrs	r3, r3, #3
 8008a14:	f003 0303 	and.w	r3, r3, #3
 8008a18:	4a28      	ldr	r2, [pc, #160]	; (8008abc <UART_SetConfig+0xac4>)
 8008a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008a20:	e00f      	b.n	8008a42 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008a22:	4b26      	ldr	r3, [pc, #152]	; (8008abc <UART_SetConfig+0xac4>)
 8008a24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a26:	e00c      	b.n	8008a42 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008a28:	4b25      	ldr	r3, [pc, #148]	; (8008ac0 <UART_SetConfig+0xac8>)
 8008a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a2c:	e009      	b.n	8008a42 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a34:	e005      	b.n	8008a42 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008a36:	2300      	movs	r3, #0
 8008a38:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008a40:	bf00      	nop
    }

    if (pclk != 0U)
 8008a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d021      	beq.n	8008a8c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4c:	4a1d      	ldr	r2, [pc, #116]	; (8008ac4 <UART_SetConfig+0xacc>)
 8008a4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a52:	461a      	mov	r2, r3
 8008a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a56:	fbb3 f2f2 	udiv	r2, r3, r2
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	085b      	lsrs	r3, r3, #1
 8008a60:	441a      	add	r2, r3
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a6a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a6e:	2b0f      	cmp	r3, #15
 8008a70:	d909      	bls.n	8008a86 <UART_SetConfig+0xa8e>
 8008a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a78:	d205      	bcs.n	8008a86 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a7c:	b29a      	uxth	r2, r3
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	60da      	str	r2, [r3, #12]
 8008a84:	e002      	b.n	8008a8c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	2201      	movs	r2, #1
 8008a90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	2201      	movs	r2, #1
 8008a98:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008aa8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3748      	adds	r7, #72	; 0x48
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ab6:	bf00      	nop
 8008ab8:	58024400 	.word	0x58024400
 8008abc:	03d09000 	.word	0x03d09000
 8008ac0:	003d0900 	.word	0x003d0900
 8008ac4:	0800d55c 	.word	0x0800d55c

08008ac8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b083      	sub	sp, #12
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ad4:	f003 0301 	and.w	r3, r3, #1
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d00a      	beq.n	8008af2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	430a      	orrs	r2, r1
 8008af0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008af6:	f003 0302 	and.w	r3, r3, #2
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d00a      	beq.n	8008b14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	430a      	orrs	r2, r1
 8008b12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b18:	f003 0304 	and.w	r3, r3, #4
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d00a      	beq.n	8008b36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	430a      	orrs	r2, r1
 8008b34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b3a:	f003 0308 	and.w	r3, r3, #8
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d00a      	beq.n	8008b58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	430a      	orrs	r2, r1
 8008b56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b5c:	f003 0310 	and.w	r3, r3, #16
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d00a      	beq.n	8008b7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	430a      	orrs	r2, r1
 8008b78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b7e:	f003 0320 	and.w	r3, r3, #32
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d00a      	beq.n	8008b9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	430a      	orrs	r2, r1
 8008b9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d01a      	beq.n	8008bde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	430a      	orrs	r2, r1
 8008bbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bc6:	d10a      	bne.n	8008bde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	430a      	orrs	r2, r1
 8008bdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d00a      	beq.n	8008c00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	430a      	orrs	r2, r1
 8008bfe:	605a      	str	r2, [r3, #4]
  }
}
 8008c00:	bf00      	nop
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b086      	sub	sp, #24
 8008c10:	af02      	add	r7, sp, #8
 8008c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c1c:	f7f9 fedc 	bl	80029d8 <HAL_GetTick>
 8008c20:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f003 0308 	and.w	r3, r3, #8
 8008c2c:	2b08      	cmp	r3, #8
 8008c2e:	d10e      	bne.n	8008c4e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c34:	9300      	str	r3, [sp, #0]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 f82f 	bl	8008ca2 <UART_WaitOnFlagUntilTimeout>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d001      	beq.n	8008c4e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c4a:	2303      	movs	r3, #3
 8008c4c:	e025      	b.n	8008c9a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f003 0304 	and.w	r3, r3, #4
 8008c58:	2b04      	cmp	r3, #4
 8008c5a:	d10e      	bne.n	8008c7a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c60:	9300      	str	r3, [sp, #0]
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2200      	movs	r2, #0
 8008c66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 f819 	bl	8008ca2 <UART_WaitOnFlagUntilTimeout>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d001      	beq.n	8008c7a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c76:	2303      	movs	r3, #3
 8008c78:	e00f      	b.n	8008c9a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2220      	movs	r2, #32
 8008c7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2220      	movs	r2, #32
 8008c86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008c98:	2300      	movs	r3, #0
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3710      	adds	r7, #16
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	b09c      	sub	sp, #112	; 0x70
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	60f8      	str	r0, [r7, #12]
 8008caa:	60b9      	str	r1, [r7, #8]
 8008cac:	603b      	str	r3, [r7, #0]
 8008cae:	4613      	mov	r3, r2
 8008cb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cb2:	e0a9      	b.n	8008e08 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cba:	f000 80a5 	beq.w	8008e08 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cbe:	f7f9 fe8b 	bl	80029d8 <HAL_GetTick>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	1ad3      	subs	r3, r2, r3
 8008cc8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d302      	bcc.n	8008cd4 <UART_WaitOnFlagUntilTimeout+0x32>
 8008cce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d140      	bne.n	8008d56 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cdc:	e853 3f00 	ldrex	r3, [r3]
 8008ce0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ce4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008ce8:	667b      	str	r3, [r7, #100]	; 0x64
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	461a      	mov	r2, r3
 8008cf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cf2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008cf4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008cf8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008cfa:	e841 2300 	strex	r3, r2, [r1]
 8008cfe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008d00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d1e6      	bne.n	8008cd4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	3308      	adds	r3, #8
 8008d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d10:	e853 3f00 	ldrex	r3, [r3]
 8008d14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d18:	f023 0301 	bic.w	r3, r3, #1
 8008d1c:	663b      	str	r3, [r7, #96]	; 0x60
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	3308      	adds	r3, #8
 8008d24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008d26:	64ba      	str	r2, [r7, #72]	; 0x48
 8008d28:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008d2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d2e:	e841 2300 	strex	r3, r2, [r1]
 8008d32:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008d34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d1e5      	bne.n	8008d06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2220      	movs	r2, #32
 8008d3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2220      	movs	r2, #32
 8008d46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008d52:	2303      	movs	r3, #3
 8008d54:	e069      	b.n	8008e2a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f003 0304 	and.w	r3, r3, #4
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d051      	beq.n	8008e08 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	69db      	ldr	r3, [r3, #28]
 8008d6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d72:	d149      	bne.n	8008e08 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d7c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d86:	e853 3f00 	ldrex	r3, [r3]
 8008d8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	461a      	mov	r2, r3
 8008d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d9c:	637b      	str	r3, [r7, #52]	; 0x34
 8008d9e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008da2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008da4:	e841 2300 	strex	r3, r2, [r1]
 8008da8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d1e6      	bne.n	8008d7e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	3308      	adds	r3, #8
 8008db6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	e853 3f00 	ldrex	r3, [r3]
 8008dbe:	613b      	str	r3, [r7, #16]
   return(result);
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	f023 0301 	bic.w	r3, r3, #1
 8008dc6:	66bb      	str	r3, [r7, #104]	; 0x68
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	3308      	adds	r3, #8
 8008dce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008dd0:	623a      	str	r2, [r7, #32]
 8008dd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd4:	69f9      	ldr	r1, [r7, #28]
 8008dd6:	6a3a      	ldr	r2, [r7, #32]
 8008dd8:	e841 2300 	strex	r3, r2, [r1]
 8008ddc:	61bb      	str	r3, [r7, #24]
   return(result);
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d1e5      	bne.n	8008db0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2220      	movs	r2, #32
 8008de8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2220      	movs	r2, #32
 8008df0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2220      	movs	r2, #32
 8008df8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008e04:	2303      	movs	r3, #3
 8008e06:	e010      	b.n	8008e2a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	69da      	ldr	r2, [r3, #28]
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	4013      	ands	r3, r2
 8008e12:	68ba      	ldr	r2, [r7, #8]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	bf0c      	ite	eq
 8008e18:	2301      	moveq	r3, #1
 8008e1a:	2300      	movne	r3, #0
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	461a      	mov	r2, r3
 8008e20:	79fb      	ldrb	r3, [r7, #7]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	f43f af46 	beq.w	8008cb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e28:	2300      	movs	r3, #0
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3770      	adds	r7, #112	; 0x70
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008e32:	b480      	push	{r7}
 8008e34:	b085      	sub	sp, #20
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d101      	bne.n	8008e48 <HAL_UARTEx_DisableFifoMode+0x16>
 8008e44:	2302      	movs	r3, #2
 8008e46:	e027      	b.n	8008e98 <HAL_UARTEx_DisableFifoMode+0x66>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2224      	movs	r2, #36	; 0x24
 8008e54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f022 0201 	bic.w	r2, r2, #1
 8008e6e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008e76:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	68fa      	ldr	r2, [r7, #12]
 8008e84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2220      	movs	r2, #32
 8008e8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2200      	movs	r2, #0
 8008e92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008e96:	2300      	movs	r3, #0
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3714      	adds	r7, #20
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr

08008ea4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d101      	bne.n	8008ebc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008eb8:	2302      	movs	r3, #2
 8008eba:	e02d      	b.n	8008f18 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2224      	movs	r2, #36	; 0x24
 8008ec8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f022 0201 	bic.w	r2, r2, #1
 8008ee2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	689b      	ldr	r3, [r3, #8]
 8008eea:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	683a      	ldr	r2, [r7, #0]
 8008ef4:	430a      	orrs	r2, r1
 8008ef6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 f84f 	bl	8008f9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	68fa      	ldr	r2, [r7, #12]
 8008f04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2220      	movs	r2, #32
 8008f0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008f16:	2300      	movs	r3, #0
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3710      	adds	r7, #16
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b084      	sub	sp, #16
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d101      	bne.n	8008f38 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008f34:	2302      	movs	r3, #2
 8008f36:	e02d      	b.n	8008f94 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2224      	movs	r2, #36	; 0x24
 8008f44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	681a      	ldr	r2, [r3, #0]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f022 0201 	bic.w	r2, r2, #1
 8008f5e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	683a      	ldr	r2, [r7, #0]
 8008f70:	430a      	orrs	r2, r1
 8008f72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f000 f811 	bl	8008f9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	68fa      	ldr	r2, [r7, #12]
 8008f80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2220      	movs	r2, #32
 8008f86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008f92:	2300      	movs	r3, #0
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3710      	adds	r7, #16
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b085      	sub	sp, #20
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d108      	bne.n	8008fbe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008fbc:	e031      	b.n	8009022 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008fbe:	2310      	movs	r3, #16
 8008fc0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008fc2:	2310      	movs	r3, #16
 8008fc4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	689b      	ldr	r3, [r3, #8]
 8008fcc:	0e5b      	lsrs	r3, r3, #25
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	f003 0307 	and.w	r3, r3, #7
 8008fd4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	0f5b      	lsrs	r3, r3, #29
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	f003 0307 	and.w	r3, r3, #7
 8008fe4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008fe6:	7bbb      	ldrb	r3, [r7, #14]
 8008fe8:	7b3a      	ldrb	r2, [r7, #12]
 8008fea:	4911      	ldr	r1, [pc, #68]	; (8009030 <UARTEx_SetNbDataToProcess+0x94>)
 8008fec:	5c8a      	ldrb	r2, [r1, r2]
 8008fee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008ff2:	7b3a      	ldrb	r2, [r7, #12]
 8008ff4:	490f      	ldr	r1, [pc, #60]	; (8009034 <UARTEx_SetNbDataToProcess+0x98>)
 8008ff6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ff8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ffc:	b29a      	uxth	r2, r3
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009004:	7bfb      	ldrb	r3, [r7, #15]
 8009006:	7b7a      	ldrb	r2, [r7, #13]
 8009008:	4909      	ldr	r1, [pc, #36]	; (8009030 <UARTEx_SetNbDataToProcess+0x94>)
 800900a:	5c8a      	ldrb	r2, [r1, r2]
 800900c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009010:	7b7a      	ldrb	r2, [r7, #13]
 8009012:	4908      	ldr	r1, [pc, #32]	; (8009034 <UARTEx_SetNbDataToProcess+0x98>)
 8009014:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009016:	fb93 f3f2 	sdiv	r3, r3, r2
 800901a:	b29a      	uxth	r2, r3
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009022:	bf00      	nop
 8009024:	3714      	adds	r7, #20
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr
 800902e:	bf00      	nop
 8009030:	0800d574 	.word	0x0800d574
 8009034:	0800d57c 	.word	0x0800d57c

08009038 <__NVIC_SetPriority>:
{
 8009038:	b480      	push	{r7}
 800903a:	b083      	sub	sp, #12
 800903c:	af00      	add	r7, sp, #0
 800903e:	4603      	mov	r3, r0
 8009040:	6039      	str	r1, [r7, #0]
 8009042:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8009044:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009048:	2b00      	cmp	r3, #0
 800904a:	db0a      	blt.n	8009062 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	b2da      	uxtb	r2, r3
 8009050:	490c      	ldr	r1, [pc, #48]	; (8009084 <__NVIC_SetPriority+0x4c>)
 8009052:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009056:	0112      	lsls	r2, r2, #4
 8009058:	b2d2      	uxtb	r2, r2
 800905a:	440b      	add	r3, r1
 800905c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009060:	e00a      	b.n	8009078 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	b2da      	uxtb	r2, r3
 8009066:	4908      	ldr	r1, [pc, #32]	; (8009088 <__NVIC_SetPriority+0x50>)
 8009068:	88fb      	ldrh	r3, [r7, #6]
 800906a:	f003 030f 	and.w	r3, r3, #15
 800906e:	3b04      	subs	r3, #4
 8009070:	0112      	lsls	r2, r2, #4
 8009072:	b2d2      	uxtb	r2, r2
 8009074:	440b      	add	r3, r1
 8009076:	761a      	strb	r2, [r3, #24]
}
 8009078:	bf00      	nop
 800907a:	370c      	adds	r7, #12
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr
 8009084:	e000e100 	.word	0xe000e100
 8009088:	e000ed00 	.word	0xe000ed00

0800908c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800908c:	b580      	push	{r7, lr}
 800908e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009090:	4b05      	ldr	r3, [pc, #20]	; (80090a8 <SysTick_Handler+0x1c>)
 8009092:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009094:	f002 f910 	bl	800b2b8 <xTaskGetSchedulerState>
 8009098:	4603      	mov	r3, r0
 800909a:	2b01      	cmp	r3, #1
 800909c:	d001      	beq.n	80090a2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800909e:	f000 fd7b 	bl	8009b98 <xPortSysTickHandler>
  }
}
 80090a2:	bf00      	nop
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	e000e010 	.word	0xe000e010

080090ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80090ac:	b580      	push	{r7, lr}
 80090ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80090b0:	2100      	movs	r1, #0
 80090b2:	f06f 0004 	mvn.w	r0, #4
 80090b6:	f7ff ffbf 	bl	8009038 <__NVIC_SetPriority>
#endif
}
 80090ba:	bf00      	nop
 80090bc:	bd80      	pop	{r7, pc}
	...

080090c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090c6:	f3ef 8305 	mrs	r3, IPSR
 80090ca:	603b      	str	r3, [r7, #0]
  return(result);
 80090cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d003      	beq.n	80090da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80090d2:	f06f 0305 	mvn.w	r3, #5
 80090d6:	607b      	str	r3, [r7, #4]
 80090d8:	e00c      	b.n	80090f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80090da:	4b0a      	ldr	r3, [pc, #40]	; (8009104 <osKernelInitialize+0x44>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d105      	bne.n	80090ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80090e2:	4b08      	ldr	r3, [pc, #32]	; (8009104 <osKernelInitialize+0x44>)
 80090e4:	2201      	movs	r2, #1
 80090e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80090e8:	2300      	movs	r3, #0
 80090ea:	607b      	str	r3, [r7, #4]
 80090ec:	e002      	b.n	80090f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80090ee:	f04f 33ff 	mov.w	r3, #4294967295
 80090f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80090f4:	687b      	ldr	r3, [r7, #4]
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	370c      	adds	r7, #12
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr
 8009102:	bf00      	nop
 8009104:	24000560 	.word	0x24000560

08009108 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009108:	b580      	push	{r7, lr}
 800910a:	b082      	sub	sp, #8
 800910c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800910e:	f3ef 8305 	mrs	r3, IPSR
 8009112:	603b      	str	r3, [r7, #0]
  return(result);
 8009114:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009116:	2b00      	cmp	r3, #0
 8009118:	d003      	beq.n	8009122 <osKernelStart+0x1a>
    stat = osErrorISR;
 800911a:	f06f 0305 	mvn.w	r3, #5
 800911e:	607b      	str	r3, [r7, #4]
 8009120:	e010      	b.n	8009144 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009122:	4b0b      	ldr	r3, [pc, #44]	; (8009150 <osKernelStart+0x48>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	2b01      	cmp	r3, #1
 8009128:	d109      	bne.n	800913e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800912a:	f7ff ffbf 	bl	80090ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800912e:	4b08      	ldr	r3, [pc, #32]	; (8009150 <osKernelStart+0x48>)
 8009130:	2202      	movs	r2, #2
 8009132:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009134:	f001 fc64 	bl	800aa00 <vTaskStartScheduler>
      stat = osOK;
 8009138:	2300      	movs	r3, #0
 800913a:	607b      	str	r3, [r7, #4]
 800913c:	e002      	b.n	8009144 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800913e:	f04f 33ff 	mov.w	r3, #4294967295
 8009142:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009144:	687b      	ldr	r3, [r7, #4]
}
 8009146:	4618      	mov	r0, r3
 8009148:	3708      	adds	r7, #8
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	24000560 	.word	0x24000560

08009154 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009154:	b580      	push	{r7, lr}
 8009156:	b08e      	sub	sp, #56	; 0x38
 8009158:	af04      	add	r7, sp, #16
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	60b9      	str	r1, [r7, #8]
 800915e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009160:	2300      	movs	r3, #0
 8009162:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009164:	f3ef 8305 	mrs	r3, IPSR
 8009168:	617b      	str	r3, [r7, #20]
  return(result);
 800916a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800916c:	2b00      	cmp	r3, #0
 800916e:	d17e      	bne.n	800926e <osThreadNew+0x11a>
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d07b      	beq.n	800926e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009176:	2380      	movs	r3, #128	; 0x80
 8009178:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800917a:	2318      	movs	r3, #24
 800917c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800917e:	2300      	movs	r3, #0
 8009180:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009182:	f04f 33ff 	mov.w	r3, #4294967295
 8009186:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d045      	beq.n	800921a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d002      	beq.n	800919c <osThreadNew+0x48>
        name = attr->name;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	699b      	ldr	r3, [r3, #24]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d002      	beq.n	80091aa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	699b      	ldr	r3, [r3, #24]
 80091a8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80091aa:	69fb      	ldr	r3, [r7, #28]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d008      	beq.n	80091c2 <osThreadNew+0x6e>
 80091b0:	69fb      	ldr	r3, [r7, #28]
 80091b2:	2b38      	cmp	r3, #56	; 0x38
 80091b4:	d805      	bhi.n	80091c2 <osThreadNew+0x6e>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	f003 0301 	and.w	r3, r3, #1
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d001      	beq.n	80091c6 <osThreadNew+0x72>
        return (NULL);
 80091c2:	2300      	movs	r3, #0
 80091c4:	e054      	b.n	8009270 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	695b      	ldr	r3, [r3, #20]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d003      	beq.n	80091d6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	695b      	ldr	r3, [r3, #20]
 80091d2:	089b      	lsrs	r3, r3, #2
 80091d4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	689b      	ldr	r3, [r3, #8]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d00e      	beq.n	80091fc <osThreadNew+0xa8>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	2bbb      	cmp	r3, #187	; 0xbb
 80091e4:	d90a      	bls.n	80091fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d006      	beq.n	80091fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	695b      	ldr	r3, [r3, #20]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d002      	beq.n	80091fc <osThreadNew+0xa8>
        mem = 1;
 80091f6:	2301      	movs	r3, #1
 80091f8:	61bb      	str	r3, [r7, #24]
 80091fa:	e010      	b.n	800921e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d10c      	bne.n	800921e <osThreadNew+0xca>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d108      	bne.n	800921e <osThreadNew+0xca>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	691b      	ldr	r3, [r3, #16]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d104      	bne.n	800921e <osThreadNew+0xca>
          mem = 0;
 8009214:	2300      	movs	r3, #0
 8009216:	61bb      	str	r3, [r7, #24]
 8009218:	e001      	b.n	800921e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800921a:	2300      	movs	r3, #0
 800921c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800921e:	69bb      	ldr	r3, [r7, #24]
 8009220:	2b01      	cmp	r3, #1
 8009222:	d110      	bne.n	8009246 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800922c:	9202      	str	r2, [sp, #8]
 800922e:	9301      	str	r3, [sp, #4]
 8009230:	69fb      	ldr	r3, [r7, #28]
 8009232:	9300      	str	r3, [sp, #0]
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	6a3a      	ldr	r2, [r7, #32]
 8009238:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800923a:	68f8      	ldr	r0, [r7, #12]
 800923c:	f001 fa28 	bl	800a690 <xTaskCreateStatic>
 8009240:	4603      	mov	r3, r0
 8009242:	613b      	str	r3, [r7, #16]
 8009244:	e013      	b.n	800926e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009246:	69bb      	ldr	r3, [r7, #24]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d110      	bne.n	800926e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800924c:	6a3b      	ldr	r3, [r7, #32]
 800924e:	b29a      	uxth	r2, r3
 8009250:	f107 0310 	add.w	r3, r7, #16
 8009254:	9301      	str	r3, [sp, #4]
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	9300      	str	r3, [sp, #0]
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800925e:	68f8      	ldr	r0, [r7, #12]
 8009260:	f001 fa73 	bl	800a74a <xTaskCreate>
 8009264:	4603      	mov	r3, r0
 8009266:	2b01      	cmp	r3, #1
 8009268:	d001      	beq.n	800926e <osThreadNew+0x11a>
            hTask = NULL;
 800926a:	2300      	movs	r3, #0
 800926c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800926e:	693b      	ldr	r3, [r7, #16]
}
 8009270:	4618      	mov	r0, r3
 8009272:	3728      	adds	r7, #40	; 0x28
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009278:	b480      	push	{r7}
 800927a:	b085      	sub	sp, #20
 800927c:	af00      	add	r7, sp, #0
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	60b9      	str	r1, [r7, #8]
 8009282:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	4a07      	ldr	r2, [pc, #28]	; (80092a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8009288:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	4a06      	ldr	r2, [pc, #24]	; (80092a8 <vApplicationGetIdleTaskMemory+0x30>)
 800928e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2280      	movs	r2, #128	; 0x80
 8009294:	601a      	str	r2, [r3, #0]
}
 8009296:	bf00      	nop
 8009298:	3714      	adds	r7, #20
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr
 80092a2:	bf00      	nop
 80092a4:	24000564 	.word	0x24000564
 80092a8:	24000620 	.word	0x24000620

080092ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80092ac:	b480      	push	{r7}
 80092ae:	b085      	sub	sp, #20
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	60b9      	str	r1, [r7, #8]
 80092b6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	4a07      	ldr	r2, [pc, #28]	; (80092d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80092bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	4a06      	ldr	r2, [pc, #24]	; (80092dc <vApplicationGetTimerTaskMemory+0x30>)
 80092c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80092ca:	601a      	str	r2, [r3, #0]
}
 80092cc:	bf00      	nop
 80092ce:	3714      	adds	r7, #20
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr
 80092d8:	24000820 	.word	0x24000820
 80092dc:	240008dc 	.word	0x240008dc

080092e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b08a      	sub	sp, #40	; 0x28
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80092e8:	2300      	movs	r3, #0
 80092ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80092ec:	f001 fbf8 	bl	800aae0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80092f0:	4b5b      	ldr	r3, [pc, #364]	; (8009460 <pvPortMalloc+0x180>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d101      	bne.n	80092fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80092f8:	f000 f920 	bl	800953c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80092fc:	4b59      	ldr	r3, [pc, #356]	; (8009464 <pvPortMalloc+0x184>)
 80092fe:	681a      	ldr	r2, [r3, #0]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	4013      	ands	r3, r2
 8009304:	2b00      	cmp	r3, #0
 8009306:	f040 8093 	bne.w	8009430 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d01d      	beq.n	800934c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009310:	2208      	movs	r2, #8
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	4413      	add	r3, r2
 8009316:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f003 0307 	and.w	r3, r3, #7
 800931e:	2b00      	cmp	r3, #0
 8009320:	d014      	beq.n	800934c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f023 0307 	bic.w	r3, r3, #7
 8009328:	3308      	adds	r3, #8
 800932a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f003 0307 	and.w	r3, r3, #7
 8009332:	2b00      	cmp	r3, #0
 8009334:	d00a      	beq.n	800934c <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800933a:	f383 8811 	msr	BASEPRI, r3
 800933e:	f3bf 8f6f 	isb	sy
 8009342:	f3bf 8f4f 	dsb	sy
 8009346:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009348:	bf00      	nop
 800934a:	e7fe      	b.n	800934a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d06e      	beq.n	8009430 <pvPortMalloc+0x150>
 8009352:	4b45      	ldr	r3, [pc, #276]	; (8009468 <pvPortMalloc+0x188>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	687a      	ldr	r2, [r7, #4]
 8009358:	429a      	cmp	r2, r3
 800935a:	d869      	bhi.n	8009430 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800935c:	4b43      	ldr	r3, [pc, #268]	; (800946c <pvPortMalloc+0x18c>)
 800935e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009360:	4b42      	ldr	r3, [pc, #264]	; (800946c <pvPortMalloc+0x18c>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009366:	e004      	b.n	8009372 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800936a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800936c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	429a      	cmp	r2, r3
 800937a:	d903      	bls.n	8009384 <pvPortMalloc+0xa4>
 800937c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d1f1      	bne.n	8009368 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009384:	4b36      	ldr	r3, [pc, #216]	; (8009460 <pvPortMalloc+0x180>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800938a:	429a      	cmp	r2, r3
 800938c:	d050      	beq.n	8009430 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800938e:	6a3b      	ldr	r3, [r7, #32]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	2208      	movs	r2, #8
 8009394:	4413      	add	r3, r2
 8009396:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	6a3b      	ldr	r3, [r7, #32]
 800939e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80093a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a2:	685a      	ldr	r2, [r3, #4]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	1ad2      	subs	r2, r2, r3
 80093a8:	2308      	movs	r3, #8
 80093aa:	005b      	lsls	r3, r3, #1
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d91f      	bls.n	80093f0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80093b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4413      	add	r3, r2
 80093b6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80093b8:	69bb      	ldr	r3, [r7, #24]
 80093ba:	f003 0307 	and.w	r3, r3, #7
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d00a      	beq.n	80093d8 <pvPortMalloc+0xf8>
	__asm volatile
 80093c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c6:	f383 8811 	msr	BASEPRI, r3
 80093ca:	f3bf 8f6f 	isb	sy
 80093ce:	f3bf 8f4f 	dsb	sy
 80093d2:	613b      	str	r3, [r7, #16]
}
 80093d4:	bf00      	nop
 80093d6:	e7fe      	b.n	80093d6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80093d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093da:	685a      	ldr	r2, [r3, #4]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	1ad2      	subs	r2, r2, r3
 80093e0:	69bb      	ldr	r3, [r7, #24]
 80093e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80093e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80093ea:	69b8      	ldr	r0, [r7, #24]
 80093ec:	f000 f908 	bl	8009600 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80093f0:	4b1d      	ldr	r3, [pc, #116]	; (8009468 <pvPortMalloc+0x188>)
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	1ad3      	subs	r3, r2, r3
 80093fa:	4a1b      	ldr	r2, [pc, #108]	; (8009468 <pvPortMalloc+0x188>)
 80093fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80093fe:	4b1a      	ldr	r3, [pc, #104]	; (8009468 <pvPortMalloc+0x188>)
 8009400:	681a      	ldr	r2, [r3, #0]
 8009402:	4b1b      	ldr	r3, [pc, #108]	; (8009470 <pvPortMalloc+0x190>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	429a      	cmp	r2, r3
 8009408:	d203      	bcs.n	8009412 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800940a:	4b17      	ldr	r3, [pc, #92]	; (8009468 <pvPortMalloc+0x188>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a18      	ldr	r2, [pc, #96]	; (8009470 <pvPortMalloc+0x190>)
 8009410:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009414:	685a      	ldr	r2, [r3, #4]
 8009416:	4b13      	ldr	r3, [pc, #76]	; (8009464 <pvPortMalloc+0x184>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	431a      	orrs	r2, r3
 800941c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009422:	2200      	movs	r2, #0
 8009424:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009426:	4b13      	ldr	r3, [pc, #76]	; (8009474 <pvPortMalloc+0x194>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	3301      	adds	r3, #1
 800942c:	4a11      	ldr	r2, [pc, #68]	; (8009474 <pvPortMalloc+0x194>)
 800942e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009430:	f001 fb64 	bl	800aafc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009434:	69fb      	ldr	r3, [r7, #28]
 8009436:	f003 0307 	and.w	r3, r3, #7
 800943a:	2b00      	cmp	r3, #0
 800943c:	d00a      	beq.n	8009454 <pvPortMalloc+0x174>
	__asm volatile
 800943e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009442:	f383 8811 	msr	BASEPRI, r3
 8009446:	f3bf 8f6f 	isb	sy
 800944a:	f3bf 8f4f 	dsb	sy
 800944e:	60fb      	str	r3, [r7, #12]
}
 8009450:	bf00      	nop
 8009452:	e7fe      	b.n	8009452 <pvPortMalloc+0x172>
	return pvReturn;
 8009454:	69fb      	ldr	r3, [r7, #28]
}
 8009456:	4618      	mov	r0, r3
 8009458:	3728      	adds	r7, #40	; 0x28
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	240048e4 	.word	0x240048e4
 8009464:	240048f8 	.word	0x240048f8
 8009468:	240048e8 	.word	0x240048e8
 800946c:	240048dc 	.word	0x240048dc
 8009470:	240048ec 	.word	0x240048ec
 8009474:	240048f0 	.word	0x240048f0

08009478 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b086      	sub	sp, #24
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d04d      	beq.n	8009526 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800948a:	2308      	movs	r3, #8
 800948c:	425b      	negs	r3, r3
 800948e:	697a      	ldr	r2, [r7, #20]
 8009490:	4413      	add	r3, r2
 8009492:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	685a      	ldr	r2, [r3, #4]
 800949c:	4b24      	ldr	r3, [pc, #144]	; (8009530 <vPortFree+0xb8>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4013      	ands	r3, r2
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d10a      	bne.n	80094bc <vPortFree+0x44>
	__asm volatile
 80094a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094aa:	f383 8811 	msr	BASEPRI, r3
 80094ae:	f3bf 8f6f 	isb	sy
 80094b2:	f3bf 8f4f 	dsb	sy
 80094b6:	60fb      	str	r3, [r7, #12]
}
 80094b8:	bf00      	nop
 80094ba:	e7fe      	b.n	80094ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d00a      	beq.n	80094da <vPortFree+0x62>
	__asm volatile
 80094c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c8:	f383 8811 	msr	BASEPRI, r3
 80094cc:	f3bf 8f6f 	isb	sy
 80094d0:	f3bf 8f4f 	dsb	sy
 80094d4:	60bb      	str	r3, [r7, #8]
}
 80094d6:	bf00      	nop
 80094d8:	e7fe      	b.n	80094d8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	685a      	ldr	r2, [r3, #4]
 80094de:	4b14      	ldr	r3, [pc, #80]	; (8009530 <vPortFree+0xb8>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4013      	ands	r3, r2
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d01e      	beq.n	8009526 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d11a      	bne.n	8009526 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	685a      	ldr	r2, [r3, #4]
 80094f4:	4b0e      	ldr	r3, [pc, #56]	; (8009530 <vPortFree+0xb8>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	43db      	mvns	r3, r3
 80094fa:	401a      	ands	r2, r3
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009500:	f001 faee 	bl	800aae0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	685a      	ldr	r2, [r3, #4]
 8009508:	4b0a      	ldr	r3, [pc, #40]	; (8009534 <vPortFree+0xbc>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4413      	add	r3, r2
 800950e:	4a09      	ldr	r2, [pc, #36]	; (8009534 <vPortFree+0xbc>)
 8009510:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009512:	6938      	ldr	r0, [r7, #16]
 8009514:	f000 f874 	bl	8009600 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009518:	4b07      	ldr	r3, [pc, #28]	; (8009538 <vPortFree+0xc0>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	3301      	adds	r3, #1
 800951e:	4a06      	ldr	r2, [pc, #24]	; (8009538 <vPortFree+0xc0>)
 8009520:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009522:	f001 faeb 	bl	800aafc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009526:	bf00      	nop
 8009528:	3718      	adds	r7, #24
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	240048f8 	.word	0x240048f8
 8009534:	240048e8 	.word	0x240048e8
 8009538:	240048f4 	.word	0x240048f4

0800953c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800953c:	b480      	push	{r7}
 800953e:	b085      	sub	sp, #20
 8009540:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009542:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009546:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009548:	4b27      	ldr	r3, [pc, #156]	; (80095e8 <prvHeapInit+0xac>)
 800954a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f003 0307 	and.w	r3, r3, #7
 8009552:	2b00      	cmp	r3, #0
 8009554:	d00c      	beq.n	8009570 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	3307      	adds	r3, #7
 800955a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f023 0307 	bic.w	r3, r3, #7
 8009562:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009564:	68ba      	ldr	r2, [r7, #8]
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	1ad3      	subs	r3, r2, r3
 800956a:	4a1f      	ldr	r2, [pc, #124]	; (80095e8 <prvHeapInit+0xac>)
 800956c:	4413      	add	r3, r2
 800956e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009574:	4a1d      	ldr	r2, [pc, #116]	; (80095ec <prvHeapInit+0xb0>)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800957a:	4b1c      	ldr	r3, [pc, #112]	; (80095ec <prvHeapInit+0xb0>)
 800957c:	2200      	movs	r2, #0
 800957e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	68ba      	ldr	r2, [r7, #8]
 8009584:	4413      	add	r3, r2
 8009586:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009588:	2208      	movs	r2, #8
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	1a9b      	subs	r3, r3, r2
 800958e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f023 0307 	bic.w	r3, r3, #7
 8009596:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	4a15      	ldr	r2, [pc, #84]	; (80095f0 <prvHeapInit+0xb4>)
 800959c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800959e:	4b14      	ldr	r3, [pc, #80]	; (80095f0 <prvHeapInit+0xb4>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	2200      	movs	r2, #0
 80095a4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80095a6:	4b12      	ldr	r3, [pc, #72]	; (80095f0 <prvHeapInit+0xb4>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	2200      	movs	r2, #0
 80095ac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	68fa      	ldr	r2, [r7, #12]
 80095b6:	1ad2      	subs	r2, r2, r3
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80095bc:	4b0c      	ldr	r3, [pc, #48]	; (80095f0 <prvHeapInit+0xb4>)
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	4a0a      	ldr	r2, [pc, #40]	; (80095f4 <prvHeapInit+0xb8>)
 80095ca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	4a09      	ldr	r2, [pc, #36]	; (80095f8 <prvHeapInit+0xbc>)
 80095d2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80095d4:	4b09      	ldr	r3, [pc, #36]	; (80095fc <prvHeapInit+0xc0>)
 80095d6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80095da:	601a      	str	r2, [r3, #0]
}
 80095dc:	bf00      	nop
 80095de:	3714      	adds	r7, #20
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr
 80095e8:	24000cdc 	.word	0x24000cdc
 80095ec:	240048dc 	.word	0x240048dc
 80095f0:	240048e4 	.word	0x240048e4
 80095f4:	240048ec 	.word	0x240048ec
 80095f8:	240048e8 	.word	0x240048e8
 80095fc:	240048f8 	.word	0x240048f8

08009600 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009600:	b480      	push	{r7}
 8009602:	b085      	sub	sp, #20
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009608:	4b28      	ldr	r3, [pc, #160]	; (80096ac <prvInsertBlockIntoFreeList+0xac>)
 800960a:	60fb      	str	r3, [r7, #12]
 800960c:	e002      	b.n	8009614 <prvInsertBlockIntoFreeList+0x14>
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	60fb      	str	r3, [r7, #12]
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	429a      	cmp	r2, r3
 800961c:	d8f7      	bhi.n	800960e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	68ba      	ldr	r2, [r7, #8]
 8009628:	4413      	add	r3, r2
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	429a      	cmp	r2, r3
 800962e:	d108      	bne.n	8009642 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	685a      	ldr	r2, [r3, #4]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	685b      	ldr	r3, [r3, #4]
 8009638:	441a      	add	r2, r3
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	68ba      	ldr	r2, [r7, #8]
 800964c:	441a      	add	r2, r3
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	429a      	cmp	r2, r3
 8009654:	d118      	bne.n	8009688 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681a      	ldr	r2, [r3, #0]
 800965a:	4b15      	ldr	r3, [pc, #84]	; (80096b0 <prvInsertBlockIntoFreeList+0xb0>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	429a      	cmp	r2, r3
 8009660:	d00d      	beq.n	800967e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	685a      	ldr	r2, [r3, #4]
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	441a      	add	r2, r3
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	681a      	ldr	r2, [r3, #0]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	601a      	str	r2, [r3, #0]
 800967c:	e008      	b.n	8009690 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800967e:	4b0c      	ldr	r3, [pc, #48]	; (80096b0 <prvInsertBlockIntoFreeList+0xb0>)
 8009680:	681a      	ldr	r2, [r3, #0]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	601a      	str	r2, [r3, #0]
 8009686:	e003      	b.n	8009690 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009690:	68fa      	ldr	r2, [r7, #12]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	429a      	cmp	r2, r3
 8009696:	d002      	beq.n	800969e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	687a      	ldr	r2, [r7, #4]
 800969c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800969e:	bf00      	nop
 80096a0:	3714      	adds	r7, #20
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr
 80096aa:	bf00      	nop
 80096ac:	240048dc 	.word	0x240048dc
 80096b0:	240048e4 	.word	0x240048e4

080096b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80096b4:	b480      	push	{r7}
 80096b6:	b083      	sub	sp, #12
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f103 0208 	add.w	r2, r3, #8
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f04f 32ff 	mov.w	r2, #4294967295
 80096cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f103 0208 	add.w	r2, r3, #8
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f103 0208 	add.w	r2, r3, #8
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80096e8:	bf00      	nop
 80096ea:	370c      	adds	r7, #12
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr

080096f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2200      	movs	r2, #0
 8009700:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009702:	bf00      	nop
 8009704:	370c      	adds	r7, #12
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr

0800970e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800970e:	b480      	push	{r7}
 8009710:	b085      	sub	sp, #20
 8009712:	af00      	add	r7, sp, #0
 8009714:	6078      	str	r0, [r7, #4]
 8009716:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	68fa      	ldr	r2, [r7, #12]
 8009722:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	689a      	ldr	r2, [r3, #8]
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	689b      	ldr	r3, [r3, #8]
 8009730:	683a      	ldr	r2, [r7, #0]
 8009732:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	683a      	ldr	r2, [r7, #0]
 8009738:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	1c5a      	adds	r2, r3, #1
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	601a      	str	r2, [r3, #0]
}
 800974a:	bf00      	nop
 800974c:	3714      	adds	r7, #20
 800974e:	46bd      	mov	sp, r7
 8009750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009754:	4770      	bx	lr

08009756 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009756:	b480      	push	{r7}
 8009758:	b085      	sub	sp, #20
 800975a:	af00      	add	r7, sp, #0
 800975c:	6078      	str	r0, [r7, #4]
 800975e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800976c:	d103      	bne.n	8009776 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	691b      	ldr	r3, [r3, #16]
 8009772:	60fb      	str	r3, [r7, #12]
 8009774:	e00c      	b.n	8009790 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	3308      	adds	r3, #8
 800977a:	60fb      	str	r3, [r7, #12]
 800977c:	e002      	b.n	8009784 <vListInsert+0x2e>
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	60fb      	str	r3, [r7, #12]
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	68ba      	ldr	r2, [r7, #8]
 800978c:	429a      	cmp	r2, r3
 800978e:	d2f6      	bcs.n	800977e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	685a      	ldr	r2, [r3, #4]
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	683a      	ldr	r2, [r7, #0]
 800979e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	68fa      	ldr	r2, [r7, #12]
 80097a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	683a      	ldr	r2, [r7, #0]
 80097aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	1c5a      	adds	r2, r3, #1
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	601a      	str	r2, [r3, #0]
}
 80097bc:	bf00      	nop
 80097be:	3714      	adds	r7, #20
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr

080097c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80097c8:	b480      	push	{r7}
 80097ca:	b085      	sub	sp, #20
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	691b      	ldr	r3, [r3, #16]
 80097d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	6892      	ldr	r2, [r2, #8]
 80097de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	687a      	ldr	r2, [r7, #4]
 80097e6:	6852      	ldr	r2, [r2, #4]
 80097e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d103      	bne.n	80097fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	689a      	ldr	r2, [r3, #8]
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2200      	movs	r2, #0
 8009800:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	1e5a      	subs	r2, r3, #1
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
}
 8009810:	4618      	mov	r0, r3
 8009812:	3714      	adds	r7, #20
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr

0800981c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800981c:	b480      	push	{r7}
 800981e:	b085      	sub	sp, #20
 8009820:	af00      	add	r7, sp, #0
 8009822:	60f8      	str	r0, [r7, #12]
 8009824:	60b9      	str	r1, [r7, #8]
 8009826:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	3b04      	subs	r3, #4
 800982c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009834:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	3b04      	subs	r3, #4
 800983a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	f023 0201 	bic.w	r2, r3, #1
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	3b04      	subs	r3, #4
 800984a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800984c:	4a0c      	ldr	r2, [pc, #48]	; (8009880 <pxPortInitialiseStack+0x64>)
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	3b14      	subs	r3, #20
 8009856:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	3b04      	subs	r3, #4
 8009862:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f06f 0202 	mvn.w	r2, #2
 800986a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	3b20      	subs	r3, #32
 8009870:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009872:	68fb      	ldr	r3, [r7, #12]
}
 8009874:	4618      	mov	r0, r3
 8009876:	3714      	adds	r7, #20
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr
 8009880:	08009885 	.word	0x08009885

08009884 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009884:	b480      	push	{r7}
 8009886:	b085      	sub	sp, #20
 8009888:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800988a:	2300      	movs	r3, #0
 800988c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800988e:	4b12      	ldr	r3, [pc, #72]	; (80098d8 <prvTaskExitError+0x54>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009896:	d00a      	beq.n	80098ae <prvTaskExitError+0x2a>
	__asm volatile
 8009898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800989c:	f383 8811 	msr	BASEPRI, r3
 80098a0:	f3bf 8f6f 	isb	sy
 80098a4:	f3bf 8f4f 	dsb	sy
 80098a8:	60fb      	str	r3, [r7, #12]
}
 80098aa:	bf00      	nop
 80098ac:	e7fe      	b.n	80098ac <prvTaskExitError+0x28>
	__asm volatile
 80098ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b2:	f383 8811 	msr	BASEPRI, r3
 80098b6:	f3bf 8f6f 	isb	sy
 80098ba:	f3bf 8f4f 	dsb	sy
 80098be:	60bb      	str	r3, [r7, #8]
}
 80098c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80098c2:	bf00      	nop
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d0fc      	beq.n	80098c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80098ca:	bf00      	nop
 80098cc:	bf00      	nop
 80098ce:	3714      	adds	r7, #20
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr
 80098d8:	24000018 	.word	0x24000018
 80098dc:	00000000 	.word	0x00000000

080098e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80098e0:	4b07      	ldr	r3, [pc, #28]	; (8009900 <pxCurrentTCBConst2>)
 80098e2:	6819      	ldr	r1, [r3, #0]
 80098e4:	6808      	ldr	r0, [r1, #0]
 80098e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ea:	f380 8809 	msr	PSP, r0
 80098ee:	f3bf 8f6f 	isb	sy
 80098f2:	f04f 0000 	mov.w	r0, #0
 80098f6:	f380 8811 	msr	BASEPRI, r0
 80098fa:	4770      	bx	lr
 80098fc:	f3af 8000 	nop.w

08009900 <pxCurrentTCBConst2>:
 8009900:	24004944 	.word	0x24004944
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009904:	bf00      	nop
 8009906:	bf00      	nop

08009908 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009908:	4808      	ldr	r0, [pc, #32]	; (800992c <prvPortStartFirstTask+0x24>)
 800990a:	6800      	ldr	r0, [r0, #0]
 800990c:	6800      	ldr	r0, [r0, #0]
 800990e:	f380 8808 	msr	MSP, r0
 8009912:	f04f 0000 	mov.w	r0, #0
 8009916:	f380 8814 	msr	CONTROL, r0
 800991a:	b662      	cpsie	i
 800991c:	b661      	cpsie	f
 800991e:	f3bf 8f4f 	dsb	sy
 8009922:	f3bf 8f6f 	isb	sy
 8009926:	df00      	svc	0
 8009928:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800992a:	bf00      	nop
 800992c:	e000ed08 	.word	0xe000ed08

08009930 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b086      	sub	sp, #24
 8009934:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009936:	4b46      	ldr	r3, [pc, #280]	; (8009a50 <xPortStartScheduler+0x120>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a46      	ldr	r2, [pc, #280]	; (8009a54 <xPortStartScheduler+0x124>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d10a      	bne.n	8009956 <xPortStartScheduler+0x26>
	__asm volatile
 8009940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009944:	f383 8811 	msr	BASEPRI, r3
 8009948:	f3bf 8f6f 	isb	sy
 800994c:	f3bf 8f4f 	dsb	sy
 8009950:	613b      	str	r3, [r7, #16]
}
 8009952:	bf00      	nop
 8009954:	e7fe      	b.n	8009954 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009956:	4b3e      	ldr	r3, [pc, #248]	; (8009a50 <xPortStartScheduler+0x120>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a3f      	ldr	r2, [pc, #252]	; (8009a58 <xPortStartScheduler+0x128>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d10a      	bne.n	8009976 <xPortStartScheduler+0x46>
	__asm volatile
 8009960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009964:	f383 8811 	msr	BASEPRI, r3
 8009968:	f3bf 8f6f 	isb	sy
 800996c:	f3bf 8f4f 	dsb	sy
 8009970:	60fb      	str	r3, [r7, #12]
}
 8009972:	bf00      	nop
 8009974:	e7fe      	b.n	8009974 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009976:	4b39      	ldr	r3, [pc, #228]	; (8009a5c <xPortStartScheduler+0x12c>)
 8009978:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	b2db      	uxtb	r3, r3
 8009980:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	22ff      	movs	r2, #255	; 0xff
 8009986:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	b2db      	uxtb	r3, r3
 800998e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009990:	78fb      	ldrb	r3, [r7, #3]
 8009992:	b2db      	uxtb	r3, r3
 8009994:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009998:	b2da      	uxtb	r2, r3
 800999a:	4b31      	ldr	r3, [pc, #196]	; (8009a60 <xPortStartScheduler+0x130>)
 800999c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800999e:	4b31      	ldr	r3, [pc, #196]	; (8009a64 <xPortStartScheduler+0x134>)
 80099a0:	2207      	movs	r2, #7
 80099a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80099a4:	e009      	b.n	80099ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80099a6:	4b2f      	ldr	r3, [pc, #188]	; (8009a64 <xPortStartScheduler+0x134>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	3b01      	subs	r3, #1
 80099ac:	4a2d      	ldr	r2, [pc, #180]	; (8009a64 <xPortStartScheduler+0x134>)
 80099ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80099b0:	78fb      	ldrb	r3, [r7, #3]
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	005b      	lsls	r3, r3, #1
 80099b6:	b2db      	uxtb	r3, r3
 80099b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80099ba:	78fb      	ldrb	r3, [r7, #3]
 80099bc:	b2db      	uxtb	r3, r3
 80099be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099c2:	2b80      	cmp	r3, #128	; 0x80
 80099c4:	d0ef      	beq.n	80099a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80099c6:	4b27      	ldr	r3, [pc, #156]	; (8009a64 <xPortStartScheduler+0x134>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f1c3 0307 	rsb	r3, r3, #7
 80099ce:	2b04      	cmp	r3, #4
 80099d0:	d00a      	beq.n	80099e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80099d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d6:	f383 8811 	msr	BASEPRI, r3
 80099da:	f3bf 8f6f 	isb	sy
 80099de:	f3bf 8f4f 	dsb	sy
 80099e2:	60bb      	str	r3, [r7, #8]
}
 80099e4:	bf00      	nop
 80099e6:	e7fe      	b.n	80099e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80099e8:	4b1e      	ldr	r3, [pc, #120]	; (8009a64 <xPortStartScheduler+0x134>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	021b      	lsls	r3, r3, #8
 80099ee:	4a1d      	ldr	r2, [pc, #116]	; (8009a64 <xPortStartScheduler+0x134>)
 80099f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80099f2:	4b1c      	ldr	r3, [pc, #112]	; (8009a64 <xPortStartScheduler+0x134>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80099fa:	4a1a      	ldr	r2, [pc, #104]	; (8009a64 <xPortStartScheduler+0x134>)
 80099fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	b2da      	uxtb	r2, r3
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009a06:	4b18      	ldr	r3, [pc, #96]	; (8009a68 <xPortStartScheduler+0x138>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a17      	ldr	r2, [pc, #92]	; (8009a68 <xPortStartScheduler+0x138>)
 8009a0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009a10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009a12:	4b15      	ldr	r3, [pc, #84]	; (8009a68 <xPortStartScheduler+0x138>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a14      	ldr	r2, [pc, #80]	; (8009a68 <xPortStartScheduler+0x138>)
 8009a18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009a1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009a1e:	f000 f8dd 	bl	8009bdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009a22:	4b12      	ldr	r3, [pc, #72]	; (8009a6c <xPortStartScheduler+0x13c>)
 8009a24:	2200      	movs	r2, #0
 8009a26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009a28:	f000 f8fc 	bl	8009c24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009a2c:	4b10      	ldr	r3, [pc, #64]	; (8009a70 <xPortStartScheduler+0x140>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4a0f      	ldr	r2, [pc, #60]	; (8009a70 <xPortStartScheduler+0x140>)
 8009a32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009a36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009a38:	f7ff ff66 	bl	8009908 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009a3c:	f001 f9c6 	bl	800adcc <vTaskSwitchContext>
	prvTaskExitError();
 8009a40:	f7ff ff20 	bl	8009884 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009a44:	2300      	movs	r3, #0
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3718      	adds	r7, #24
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}
 8009a4e:	bf00      	nop
 8009a50:	e000ed00 	.word	0xe000ed00
 8009a54:	410fc271 	.word	0x410fc271
 8009a58:	410fc270 	.word	0x410fc270
 8009a5c:	e000e400 	.word	0xe000e400
 8009a60:	240048fc 	.word	0x240048fc
 8009a64:	24004900 	.word	0x24004900
 8009a68:	e000ed20 	.word	0xe000ed20
 8009a6c:	24000018 	.word	0x24000018
 8009a70:	e000ef34 	.word	0xe000ef34

08009a74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009a74:	b480      	push	{r7}
 8009a76:	b083      	sub	sp, #12
 8009a78:	af00      	add	r7, sp, #0
	__asm volatile
 8009a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a7e:	f383 8811 	msr	BASEPRI, r3
 8009a82:	f3bf 8f6f 	isb	sy
 8009a86:	f3bf 8f4f 	dsb	sy
 8009a8a:	607b      	str	r3, [r7, #4]
}
 8009a8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009a8e:	4b0f      	ldr	r3, [pc, #60]	; (8009acc <vPortEnterCritical+0x58>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	3301      	adds	r3, #1
 8009a94:	4a0d      	ldr	r2, [pc, #52]	; (8009acc <vPortEnterCritical+0x58>)
 8009a96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009a98:	4b0c      	ldr	r3, [pc, #48]	; (8009acc <vPortEnterCritical+0x58>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	d10f      	bne.n	8009ac0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009aa0:	4b0b      	ldr	r3, [pc, #44]	; (8009ad0 <vPortEnterCritical+0x5c>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d00a      	beq.n	8009ac0 <vPortEnterCritical+0x4c>
	__asm volatile
 8009aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aae:	f383 8811 	msr	BASEPRI, r3
 8009ab2:	f3bf 8f6f 	isb	sy
 8009ab6:	f3bf 8f4f 	dsb	sy
 8009aba:	603b      	str	r3, [r7, #0]
}
 8009abc:	bf00      	nop
 8009abe:	e7fe      	b.n	8009abe <vPortEnterCritical+0x4a>
	}
}
 8009ac0:	bf00      	nop
 8009ac2:	370c      	adds	r7, #12
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr
 8009acc:	24000018 	.word	0x24000018
 8009ad0:	e000ed04 	.word	0xe000ed04

08009ad4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009ada:	4b12      	ldr	r3, [pc, #72]	; (8009b24 <vPortExitCritical+0x50>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d10a      	bne.n	8009af8 <vPortExitCritical+0x24>
	__asm volatile
 8009ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae6:	f383 8811 	msr	BASEPRI, r3
 8009aea:	f3bf 8f6f 	isb	sy
 8009aee:	f3bf 8f4f 	dsb	sy
 8009af2:	607b      	str	r3, [r7, #4]
}
 8009af4:	bf00      	nop
 8009af6:	e7fe      	b.n	8009af6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009af8:	4b0a      	ldr	r3, [pc, #40]	; (8009b24 <vPortExitCritical+0x50>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	3b01      	subs	r3, #1
 8009afe:	4a09      	ldr	r2, [pc, #36]	; (8009b24 <vPortExitCritical+0x50>)
 8009b00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009b02:	4b08      	ldr	r3, [pc, #32]	; (8009b24 <vPortExitCritical+0x50>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d105      	bne.n	8009b16 <vPortExitCritical+0x42>
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009b14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009b16:	bf00      	nop
 8009b18:	370c      	adds	r7, #12
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b20:	4770      	bx	lr
 8009b22:	bf00      	nop
 8009b24:	24000018 	.word	0x24000018
	...

08009b30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009b30:	f3ef 8009 	mrs	r0, PSP
 8009b34:	f3bf 8f6f 	isb	sy
 8009b38:	4b15      	ldr	r3, [pc, #84]	; (8009b90 <pxCurrentTCBConst>)
 8009b3a:	681a      	ldr	r2, [r3, #0]
 8009b3c:	f01e 0f10 	tst.w	lr, #16
 8009b40:	bf08      	it	eq
 8009b42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009b46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b4a:	6010      	str	r0, [r2, #0]
 8009b4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009b50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009b54:	f380 8811 	msr	BASEPRI, r0
 8009b58:	f3bf 8f4f 	dsb	sy
 8009b5c:	f3bf 8f6f 	isb	sy
 8009b60:	f001 f934 	bl	800adcc <vTaskSwitchContext>
 8009b64:	f04f 0000 	mov.w	r0, #0
 8009b68:	f380 8811 	msr	BASEPRI, r0
 8009b6c:	bc09      	pop	{r0, r3}
 8009b6e:	6819      	ldr	r1, [r3, #0]
 8009b70:	6808      	ldr	r0, [r1, #0]
 8009b72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b76:	f01e 0f10 	tst.w	lr, #16
 8009b7a:	bf08      	it	eq
 8009b7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009b80:	f380 8809 	msr	PSP, r0
 8009b84:	f3bf 8f6f 	isb	sy
 8009b88:	4770      	bx	lr
 8009b8a:	bf00      	nop
 8009b8c:	f3af 8000 	nop.w

08009b90 <pxCurrentTCBConst>:
 8009b90:	24004944 	.word	0x24004944
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009b94:	bf00      	nop
 8009b96:	bf00      	nop

08009b98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8009b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba2:	f383 8811 	msr	BASEPRI, r3
 8009ba6:	f3bf 8f6f 	isb	sy
 8009baa:	f3bf 8f4f 	dsb	sy
 8009bae:	607b      	str	r3, [r7, #4]
}
 8009bb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009bb2:	f001 f851 	bl	800ac58 <xTaskIncrementTick>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d003      	beq.n	8009bc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009bbc:	4b06      	ldr	r3, [pc, #24]	; (8009bd8 <xPortSysTickHandler+0x40>)
 8009bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bc2:	601a      	str	r2, [r3, #0]
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	f383 8811 	msr	BASEPRI, r3
}
 8009bce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009bd0:	bf00      	nop
 8009bd2:	3708      	adds	r7, #8
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}
 8009bd8:	e000ed04 	.word	0xe000ed04

08009bdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009bdc:	b480      	push	{r7}
 8009bde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009be0:	4b0b      	ldr	r3, [pc, #44]	; (8009c10 <vPortSetupTimerInterrupt+0x34>)
 8009be2:	2200      	movs	r2, #0
 8009be4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009be6:	4b0b      	ldr	r3, [pc, #44]	; (8009c14 <vPortSetupTimerInterrupt+0x38>)
 8009be8:	2200      	movs	r2, #0
 8009bea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009bec:	4b0a      	ldr	r3, [pc, #40]	; (8009c18 <vPortSetupTimerInterrupt+0x3c>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a0a      	ldr	r2, [pc, #40]	; (8009c1c <vPortSetupTimerInterrupt+0x40>)
 8009bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8009bf6:	099b      	lsrs	r3, r3, #6
 8009bf8:	4a09      	ldr	r2, [pc, #36]	; (8009c20 <vPortSetupTimerInterrupt+0x44>)
 8009bfa:	3b01      	subs	r3, #1
 8009bfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009bfe:	4b04      	ldr	r3, [pc, #16]	; (8009c10 <vPortSetupTimerInterrupt+0x34>)
 8009c00:	2207      	movs	r2, #7
 8009c02:	601a      	str	r2, [r3, #0]
}
 8009c04:	bf00      	nop
 8009c06:	46bd      	mov	sp, r7
 8009c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0c:	4770      	bx	lr
 8009c0e:	bf00      	nop
 8009c10:	e000e010 	.word	0xe000e010
 8009c14:	e000e018 	.word	0xe000e018
 8009c18:	24000000 	.word	0x24000000
 8009c1c:	10624dd3 	.word	0x10624dd3
 8009c20:	e000e014 	.word	0xe000e014

08009c24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009c24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009c34 <vPortEnableVFP+0x10>
 8009c28:	6801      	ldr	r1, [r0, #0]
 8009c2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009c2e:	6001      	str	r1, [r0, #0]
 8009c30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009c32:	bf00      	nop
 8009c34:	e000ed88 	.word	0xe000ed88

08009c38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009c38:	b480      	push	{r7}
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009c3e:	f3ef 8305 	mrs	r3, IPSR
 8009c42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2b0f      	cmp	r3, #15
 8009c48:	d914      	bls.n	8009c74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009c4a:	4a17      	ldr	r2, [pc, #92]	; (8009ca8 <vPortValidateInterruptPriority+0x70>)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	4413      	add	r3, r2
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009c54:	4b15      	ldr	r3, [pc, #84]	; (8009cac <vPortValidateInterruptPriority+0x74>)
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	7afa      	ldrb	r2, [r7, #11]
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d20a      	bcs.n	8009c74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c62:	f383 8811 	msr	BASEPRI, r3
 8009c66:	f3bf 8f6f 	isb	sy
 8009c6a:	f3bf 8f4f 	dsb	sy
 8009c6e:	607b      	str	r3, [r7, #4]
}
 8009c70:	bf00      	nop
 8009c72:	e7fe      	b.n	8009c72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009c74:	4b0e      	ldr	r3, [pc, #56]	; (8009cb0 <vPortValidateInterruptPriority+0x78>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009c7c:	4b0d      	ldr	r3, [pc, #52]	; (8009cb4 <vPortValidateInterruptPriority+0x7c>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d90a      	bls.n	8009c9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c88:	f383 8811 	msr	BASEPRI, r3
 8009c8c:	f3bf 8f6f 	isb	sy
 8009c90:	f3bf 8f4f 	dsb	sy
 8009c94:	603b      	str	r3, [r7, #0]
}
 8009c96:	bf00      	nop
 8009c98:	e7fe      	b.n	8009c98 <vPortValidateInterruptPriority+0x60>
	}
 8009c9a:	bf00      	nop
 8009c9c:	3714      	adds	r7, #20
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca4:	4770      	bx	lr
 8009ca6:	bf00      	nop
 8009ca8:	e000e3f0 	.word	0xe000e3f0
 8009cac:	240048fc 	.word	0x240048fc
 8009cb0:	e000ed0c 	.word	0xe000ed0c
 8009cb4:	24004900 	.word	0x24004900

08009cb8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d10a      	bne.n	8009ce2 <xQueueGenericReset+0x2a>
	__asm volatile
 8009ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd0:	f383 8811 	msr	BASEPRI, r3
 8009cd4:	f3bf 8f6f 	isb	sy
 8009cd8:	f3bf 8f4f 	dsb	sy
 8009cdc:	60bb      	str	r3, [r7, #8]
}
 8009cde:	bf00      	nop
 8009ce0:	e7fe      	b.n	8009ce0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009ce2:	f7ff fec7 	bl	8009a74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cee:	68f9      	ldr	r1, [r7, #12]
 8009cf0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009cf2:	fb01 f303 	mul.w	r3, r1, r3
 8009cf6:	441a      	add	r2, r3
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681a      	ldr	r2, [r3, #0]
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681a      	ldr	r2, [r3, #0]
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d12:	3b01      	subs	r3, #1
 8009d14:	68f9      	ldr	r1, [r7, #12]
 8009d16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009d18:	fb01 f303 	mul.w	r3, r1, r3
 8009d1c:	441a      	add	r2, r3
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	22ff      	movs	r2, #255	; 0xff
 8009d26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	22ff      	movs	r2, #255	; 0xff
 8009d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d114      	bne.n	8009d62 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	691b      	ldr	r3, [r3, #16]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d01a      	beq.n	8009d76 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	3310      	adds	r3, #16
 8009d44:	4618      	mov	r0, r3
 8009d46:	f001 f8f5 	bl	800af34 <xTaskRemoveFromEventList>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d012      	beq.n	8009d76 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009d50:	4b0c      	ldr	r3, [pc, #48]	; (8009d84 <xQueueGenericReset+0xcc>)
 8009d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d56:	601a      	str	r2, [r3, #0]
 8009d58:	f3bf 8f4f 	dsb	sy
 8009d5c:	f3bf 8f6f 	isb	sy
 8009d60:	e009      	b.n	8009d76 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	3310      	adds	r3, #16
 8009d66:	4618      	mov	r0, r3
 8009d68:	f7ff fca4 	bl	80096b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	3324      	adds	r3, #36	; 0x24
 8009d70:	4618      	mov	r0, r3
 8009d72:	f7ff fc9f 	bl	80096b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009d76:	f7ff fead 	bl	8009ad4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009d7a:	2301      	movs	r3, #1
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3710      	adds	r7, #16
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	e000ed04 	.word	0xe000ed04

08009d88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b08e      	sub	sp, #56	; 0x38
 8009d8c:	af02      	add	r7, sp, #8
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	60b9      	str	r1, [r7, #8]
 8009d92:	607a      	str	r2, [r7, #4]
 8009d94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d10a      	bne.n	8009db2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da0:	f383 8811 	msr	BASEPRI, r3
 8009da4:	f3bf 8f6f 	isb	sy
 8009da8:	f3bf 8f4f 	dsb	sy
 8009dac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009dae:	bf00      	nop
 8009db0:	e7fe      	b.n	8009db0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d10a      	bne.n	8009dce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dbc:	f383 8811 	msr	BASEPRI, r3
 8009dc0:	f3bf 8f6f 	isb	sy
 8009dc4:	f3bf 8f4f 	dsb	sy
 8009dc8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009dca:	bf00      	nop
 8009dcc:	e7fe      	b.n	8009dcc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d002      	beq.n	8009dda <xQueueGenericCreateStatic+0x52>
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d001      	beq.n	8009dde <xQueueGenericCreateStatic+0x56>
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e000      	b.n	8009de0 <xQueueGenericCreateStatic+0x58>
 8009dde:	2300      	movs	r3, #0
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d10a      	bne.n	8009dfa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de8:	f383 8811 	msr	BASEPRI, r3
 8009dec:	f3bf 8f6f 	isb	sy
 8009df0:	f3bf 8f4f 	dsb	sy
 8009df4:	623b      	str	r3, [r7, #32]
}
 8009df6:	bf00      	nop
 8009df8:	e7fe      	b.n	8009df8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d102      	bne.n	8009e06 <xQueueGenericCreateStatic+0x7e>
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d101      	bne.n	8009e0a <xQueueGenericCreateStatic+0x82>
 8009e06:	2301      	movs	r3, #1
 8009e08:	e000      	b.n	8009e0c <xQueueGenericCreateStatic+0x84>
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d10a      	bne.n	8009e26 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e14:	f383 8811 	msr	BASEPRI, r3
 8009e18:	f3bf 8f6f 	isb	sy
 8009e1c:	f3bf 8f4f 	dsb	sy
 8009e20:	61fb      	str	r3, [r7, #28]
}
 8009e22:	bf00      	nop
 8009e24:	e7fe      	b.n	8009e24 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009e26:	2350      	movs	r3, #80	; 0x50
 8009e28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	2b50      	cmp	r3, #80	; 0x50
 8009e2e:	d00a      	beq.n	8009e46 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e34:	f383 8811 	msr	BASEPRI, r3
 8009e38:	f3bf 8f6f 	isb	sy
 8009e3c:	f3bf 8f4f 	dsb	sy
 8009e40:	61bb      	str	r3, [r7, #24]
}
 8009e42:	bf00      	nop
 8009e44:	e7fe      	b.n	8009e44 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009e46:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d00d      	beq.n	8009e6e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e54:	2201      	movs	r2, #1
 8009e56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009e5a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e60:	9300      	str	r3, [sp, #0]
 8009e62:	4613      	mov	r3, r2
 8009e64:	687a      	ldr	r2, [r7, #4]
 8009e66:	68b9      	ldr	r1, [r7, #8]
 8009e68:	68f8      	ldr	r0, [r7, #12]
 8009e6a:	f000 f805 	bl	8009e78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3730      	adds	r7, #48	; 0x30
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	60f8      	str	r0, [r7, #12]
 8009e80:	60b9      	str	r1, [r7, #8]
 8009e82:	607a      	str	r2, [r7, #4]
 8009e84:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d103      	bne.n	8009e94 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009e8c:	69bb      	ldr	r3, [r7, #24]
 8009e8e:	69ba      	ldr	r2, [r7, #24]
 8009e90:	601a      	str	r2, [r3, #0]
 8009e92:	e002      	b.n	8009e9a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009e94:	69bb      	ldr	r3, [r7, #24]
 8009e96:	687a      	ldr	r2, [r7, #4]
 8009e98:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009e9a:	69bb      	ldr	r3, [r7, #24]
 8009e9c:	68fa      	ldr	r2, [r7, #12]
 8009e9e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009ea0:	69bb      	ldr	r3, [r7, #24]
 8009ea2:	68ba      	ldr	r2, [r7, #8]
 8009ea4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009ea6:	2101      	movs	r1, #1
 8009ea8:	69b8      	ldr	r0, [r7, #24]
 8009eaa:	f7ff ff05 	bl	8009cb8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009eae:	69bb      	ldr	r3, [r7, #24]
 8009eb0:	78fa      	ldrb	r2, [r7, #3]
 8009eb2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009eb6:	bf00      	nop
 8009eb8:	3710      	adds	r7, #16
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
	...

08009ec0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b08e      	sub	sp, #56	; 0x38
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	60f8      	str	r0, [r7, #12]
 8009ec8:	60b9      	str	r1, [r7, #8]
 8009eca:	607a      	str	r2, [r7, #4]
 8009ecc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d10a      	bne.n	8009ef2 <xQueueGenericSend+0x32>
	__asm volatile
 8009edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee0:	f383 8811 	msr	BASEPRI, r3
 8009ee4:	f3bf 8f6f 	isb	sy
 8009ee8:	f3bf 8f4f 	dsb	sy
 8009eec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009eee:	bf00      	nop
 8009ef0:	e7fe      	b.n	8009ef0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d103      	bne.n	8009f00 <xQueueGenericSend+0x40>
 8009ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d101      	bne.n	8009f04 <xQueueGenericSend+0x44>
 8009f00:	2301      	movs	r3, #1
 8009f02:	e000      	b.n	8009f06 <xQueueGenericSend+0x46>
 8009f04:	2300      	movs	r3, #0
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d10a      	bne.n	8009f20 <xQueueGenericSend+0x60>
	__asm volatile
 8009f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f0e:	f383 8811 	msr	BASEPRI, r3
 8009f12:	f3bf 8f6f 	isb	sy
 8009f16:	f3bf 8f4f 	dsb	sy
 8009f1a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009f1c:	bf00      	nop
 8009f1e:	e7fe      	b.n	8009f1e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	2b02      	cmp	r3, #2
 8009f24:	d103      	bne.n	8009f2e <xQueueGenericSend+0x6e>
 8009f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	d101      	bne.n	8009f32 <xQueueGenericSend+0x72>
 8009f2e:	2301      	movs	r3, #1
 8009f30:	e000      	b.n	8009f34 <xQueueGenericSend+0x74>
 8009f32:	2300      	movs	r3, #0
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d10a      	bne.n	8009f4e <xQueueGenericSend+0x8e>
	__asm volatile
 8009f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f3c:	f383 8811 	msr	BASEPRI, r3
 8009f40:	f3bf 8f6f 	isb	sy
 8009f44:	f3bf 8f4f 	dsb	sy
 8009f48:	623b      	str	r3, [r7, #32]
}
 8009f4a:	bf00      	nop
 8009f4c:	e7fe      	b.n	8009f4c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009f4e:	f001 f9b3 	bl	800b2b8 <xTaskGetSchedulerState>
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d102      	bne.n	8009f5e <xQueueGenericSend+0x9e>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d101      	bne.n	8009f62 <xQueueGenericSend+0xa2>
 8009f5e:	2301      	movs	r3, #1
 8009f60:	e000      	b.n	8009f64 <xQueueGenericSend+0xa4>
 8009f62:	2300      	movs	r3, #0
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d10a      	bne.n	8009f7e <xQueueGenericSend+0xbe>
	__asm volatile
 8009f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f6c:	f383 8811 	msr	BASEPRI, r3
 8009f70:	f3bf 8f6f 	isb	sy
 8009f74:	f3bf 8f4f 	dsb	sy
 8009f78:	61fb      	str	r3, [r7, #28]
}
 8009f7a:	bf00      	nop
 8009f7c:	e7fe      	b.n	8009f7c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009f7e:	f7ff fd79 	bl	8009a74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	d302      	bcc.n	8009f94 <xQueueGenericSend+0xd4>
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	2b02      	cmp	r3, #2
 8009f92:	d129      	bne.n	8009fe8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009f94:	683a      	ldr	r2, [r7, #0]
 8009f96:	68b9      	ldr	r1, [r7, #8]
 8009f98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f9a:	f000 fa0b 	bl	800a3b4 <prvCopyDataToQueue>
 8009f9e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d010      	beq.n	8009fca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009faa:	3324      	adds	r3, #36	; 0x24
 8009fac:	4618      	mov	r0, r3
 8009fae:	f000 ffc1 	bl	800af34 <xTaskRemoveFromEventList>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d013      	beq.n	8009fe0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009fb8:	4b3f      	ldr	r3, [pc, #252]	; (800a0b8 <xQueueGenericSend+0x1f8>)
 8009fba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fbe:	601a      	str	r2, [r3, #0]
 8009fc0:	f3bf 8f4f 	dsb	sy
 8009fc4:	f3bf 8f6f 	isb	sy
 8009fc8:	e00a      	b.n	8009fe0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d007      	beq.n	8009fe0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009fd0:	4b39      	ldr	r3, [pc, #228]	; (800a0b8 <xQueueGenericSend+0x1f8>)
 8009fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fd6:	601a      	str	r2, [r3, #0]
 8009fd8:	f3bf 8f4f 	dsb	sy
 8009fdc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009fe0:	f7ff fd78 	bl	8009ad4 <vPortExitCritical>
				return pdPASS;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	e063      	b.n	800a0b0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d103      	bne.n	8009ff6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009fee:	f7ff fd71 	bl	8009ad4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	e05c      	b.n	800a0b0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d106      	bne.n	800a00a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009ffc:	f107 0314 	add.w	r3, r7, #20
 800a000:	4618      	mov	r0, r3
 800a002:	f000 fffb 	bl	800affc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a006:	2301      	movs	r3, #1
 800a008:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a00a:	f7ff fd63 	bl	8009ad4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a00e:	f000 fd67 	bl	800aae0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a012:	f7ff fd2f 	bl	8009a74 <vPortEnterCritical>
 800a016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a018:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a01c:	b25b      	sxtb	r3, r3
 800a01e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a022:	d103      	bne.n	800a02c <xQueueGenericSend+0x16c>
 800a024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a026:	2200      	movs	r2, #0
 800a028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a032:	b25b      	sxtb	r3, r3
 800a034:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a038:	d103      	bne.n	800a042 <xQueueGenericSend+0x182>
 800a03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a03c:	2200      	movs	r2, #0
 800a03e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a042:	f7ff fd47 	bl	8009ad4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a046:	1d3a      	adds	r2, r7, #4
 800a048:	f107 0314 	add.w	r3, r7, #20
 800a04c:	4611      	mov	r1, r2
 800a04e:	4618      	mov	r0, r3
 800a050:	f000 ffea 	bl	800b028 <xTaskCheckForTimeOut>
 800a054:	4603      	mov	r3, r0
 800a056:	2b00      	cmp	r3, #0
 800a058:	d124      	bne.n	800a0a4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a05a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a05c:	f000 faa2 	bl	800a5a4 <prvIsQueueFull>
 800a060:	4603      	mov	r3, r0
 800a062:	2b00      	cmp	r3, #0
 800a064:	d018      	beq.n	800a098 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a068:	3310      	adds	r3, #16
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	4611      	mov	r1, r2
 800a06e:	4618      	mov	r0, r3
 800a070:	f000 ff10 	bl	800ae94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a074:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a076:	f000 fa2d 	bl	800a4d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a07a:	f000 fd3f 	bl	800aafc <xTaskResumeAll>
 800a07e:	4603      	mov	r3, r0
 800a080:	2b00      	cmp	r3, #0
 800a082:	f47f af7c 	bne.w	8009f7e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a086:	4b0c      	ldr	r3, [pc, #48]	; (800a0b8 <xQueueGenericSend+0x1f8>)
 800a088:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a08c:	601a      	str	r2, [r3, #0]
 800a08e:	f3bf 8f4f 	dsb	sy
 800a092:	f3bf 8f6f 	isb	sy
 800a096:	e772      	b.n	8009f7e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a098:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a09a:	f000 fa1b 	bl	800a4d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a09e:	f000 fd2d 	bl	800aafc <xTaskResumeAll>
 800a0a2:	e76c      	b.n	8009f7e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a0a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0a6:	f000 fa15 	bl	800a4d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a0aa:	f000 fd27 	bl	800aafc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a0ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3738      	adds	r7, #56	; 0x38
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}
 800a0b8:	e000ed04 	.word	0xe000ed04

0800a0bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b090      	sub	sp, #64	; 0x40
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	60f8      	str	r0, [r7, #12]
 800a0c4:	60b9      	str	r1, [r7, #8]
 800a0c6:	607a      	str	r2, [r7, #4]
 800a0c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d10a      	bne.n	800a0ea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d8:	f383 8811 	msr	BASEPRI, r3
 800a0dc:	f3bf 8f6f 	isb	sy
 800a0e0:	f3bf 8f4f 	dsb	sy
 800a0e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a0e6:	bf00      	nop
 800a0e8:	e7fe      	b.n	800a0e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d103      	bne.n	800a0f8 <xQueueGenericSendFromISR+0x3c>
 800a0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d101      	bne.n	800a0fc <xQueueGenericSendFromISR+0x40>
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e000      	b.n	800a0fe <xQueueGenericSendFromISR+0x42>
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d10a      	bne.n	800a118 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a106:	f383 8811 	msr	BASEPRI, r3
 800a10a:	f3bf 8f6f 	isb	sy
 800a10e:	f3bf 8f4f 	dsb	sy
 800a112:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a114:	bf00      	nop
 800a116:	e7fe      	b.n	800a116 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	2b02      	cmp	r3, #2
 800a11c:	d103      	bne.n	800a126 <xQueueGenericSendFromISR+0x6a>
 800a11e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a122:	2b01      	cmp	r3, #1
 800a124:	d101      	bne.n	800a12a <xQueueGenericSendFromISR+0x6e>
 800a126:	2301      	movs	r3, #1
 800a128:	e000      	b.n	800a12c <xQueueGenericSendFromISR+0x70>
 800a12a:	2300      	movs	r3, #0
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d10a      	bne.n	800a146 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a134:	f383 8811 	msr	BASEPRI, r3
 800a138:	f3bf 8f6f 	isb	sy
 800a13c:	f3bf 8f4f 	dsb	sy
 800a140:	623b      	str	r3, [r7, #32]
}
 800a142:	bf00      	nop
 800a144:	e7fe      	b.n	800a144 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a146:	f7ff fd77 	bl	8009c38 <vPortValidateInterruptPriority>
	__asm volatile
 800a14a:	f3ef 8211 	mrs	r2, BASEPRI
 800a14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a152:	f383 8811 	msr	BASEPRI, r3
 800a156:	f3bf 8f6f 	isb	sy
 800a15a:	f3bf 8f4f 	dsb	sy
 800a15e:	61fa      	str	r2, [r7, #28]
 800a160:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800a162:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a164:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a168:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a16c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a16e:	429a      	cmp	r2, r3
 800a170:	d302      	bcc.n	800a178 <xQueueGenericSendFromISR+0xbc>
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	2b02      	cmp	r3, #2
 800a176:	d12f      	bne.n	800a1d8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a17a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a17e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a186:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a188:	683a      	ldr	r2, [r7, #0]
 800a18a:	68b9      	ldr	r1, [r7, #8]
 800a18c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a18e:	f000 f911 	bl	800a3b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a192:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a19a:	d112      	bne.n	800a1c2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a19e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d016      	beq.n	800a1d2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a6:	3324      	adds	r3, #36	; 0x24
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f000 fec3 	bl	800af34 <xTaskRemoveFromEventList>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d00e      	beq.n	800a1d2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d00b      	beq.n	800a1d2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2201      	movs	r2, #1
 800a1be:	601a      	str	r2, [r3, #0]
 800a1c0:	e007      	b.n	800a1d2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a1c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a1c6:	3301      	adds	r3, #1
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	b25a      	sxtb	r2, r3
 800a1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a1d6:	e001      	b.n	800a1dc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1de:	617b      	str	r3, [r7, #20]
	__asm volatile
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	f383 8811 	msr	BASEPRI, r3
}
 800a1e6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a1e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3740      	adds	r7, #64	; 0x40
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
	...

0800a1f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b08c      	sub	sp, #48	; 0x30
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	60f8      	str	r0, [r7, #12]
 800a1fc:	60b9      	str	r1, [r7, #8]
 800a1fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a200:	2300      	movs	r3, #0
 800a202:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d10a      	bne.n	800a224 <xQueueReceive+0x30>
	__asm volatile
 800a20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a212:	f383 8811 	msr	BASEPRI, r3
 800a216:	f3bf 8f6f 	isb	sy
 800a21a:	f3bf 8f4f 	dsb	sy
 800a21e:	623b      	str	r3, [r7, #32]
}
 800a220:	bf00      	nop
 800a222:	e7fe      	b.n	800a222 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d103      	bne.n	800a232 <xQueueReceive+0x3e>
 800a22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a22c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d101      	bne.n	800a236 <xQueueReceive+0x42>
 800a232:	2301      	movs	r3, #1
 800a234:	e000      	b.n	800a238 <xQueueReceive+0x44>
 800a236:	2300      	movs	r3, #0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d10a      	bne.n	800a252 <xQueueReceive+0x5e>
	__asm volatile
 800a23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a240:	f383 8811 	msr	BASEPRI, r3
 800a244:	f3bf 8f6f 	isb	sy
 800a248:	f3bf 8f4f 	dsb	sy
 800a24c:	61fb      	str	r3, [r7, #28]
}
 800a24e:	bf00      	nop
 800a250:	e7fe      	b.n	800a250 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a252:	f001 f831 	bl	800b2b8 <xTaskGetSchedulerState>
 800a256:	4603      	mov	r3, r0
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d102      	bne.n	800a262 <xQueueReceive+0x6e>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d101      	bne.n	800a266 <xQueueReceive+0x72>
 800a262:	2301      	movs	r3, #1
 800a264:	e000      	b.n	800a268 <xQueueReceive+0x74>
 800a266:	2300      	movs	r3, #0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d10a      	bne.n	800a282 <xQueueReceive+0x8e>
	__asm volatile
 800a26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a270:	f383 8811 	msr	BASEPRI, r3
 800a274:	f3bf 8f6f 	isb	sy
 800a278:	f3bf 8f4f 	dsb	sy
 800a27c:	61bb      	str	r3, [r7, #24]
}
 800a27e:	bf00      	nop
 800a280:	e7fe      	b.n	800a280 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a282:	f7ff fbf7 	bl	8009a74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a28a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d01f      	beq.n	800a2d2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a292:	68b9      	ldr	r1, [r7, #8]
 800a294:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a296:	f000 f8f7 	bl	800a488 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29c:	1e5a      	subs	r2, r3, #1
 800a29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a4:	691b      	ldr	r3, [r3, #16]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d00f      	beq.n	800a2ca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ac:	3310      	adds	r3, #16
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f000 fe40 	bl	800af34 <xTaskRemoveFromEventList>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d007      	beq.n	800a2ca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a2ba:	4b3d      	ldr	r3, [pc, #244]	; (800a3b0 <xQueueReceive+0x1bc>)
 800a2bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2c0:	601a      	str	r2, [r3, #0]
 800a2c2:	f3bf 8f4f 	dsb	sy
 800a2c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a2ca:	f7ff fc03 	bl	8009ad4 <vPortExitCritical>
				return pdPASS;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	e069      	b.n	800a3a6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d103      	bne.n	800a2e0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a2d8:	f7ff fbfc 	bl	8009ad4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	e062      	b.n	800a3a6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d106      	bne.n	800a2f4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a2e6:	f107 0310 	add.w	r3, r7, #16
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f000 fe86 	bl	800affc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a2f4:	f7ff fbee 	bl	8009ad4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a2f8:	f000 fbf2 	bl	800aae0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a2fc:	f7ff fbba 	bl	8009a74 <vPortEnterCritical>
 800a300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a302:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a306:	b25b      	sxtb	r3, r3
 800a308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a30c:	d103      	bne.n	800a316 <xQueueReceive+0x122>
 800a30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a310:	2200      	movs	r2, #0
 800a312:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a318:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a31c:	b25b      	sxtb	r3, r3
 800a31e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a322:	d103      	bne.n	800a32c <xQueueReceive+0x138>
 800a324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a326:	2200      	movs	r2, #0
 800a328:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a32c:	f7ff fbd2 	bl	8009ad4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a330:	1d3a      	adds	r2, r7, #4
 800a332:	f107 0310 	add.w	r3, r7, #16
 800a336:	4611      	mov	r1, r2
 800a338:	4618      	mov	r0, r3
 800a33a:	f000 fe75 	bl	800b028 <xTaskCheckForTimeOut>
 800a33e:	4603      	mov	r3, r0
 800a340:	2b00      	cmp	r3, #0
 800a342:	d123      	bne.n	800a38c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a344:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a346:	f000 f917 	bl	800a578 <prvIsQueueEmpty>
 800a34a:	4603      	mov	r3, r0
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d017      	beq.n	800a380 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a352:	3324      	adds	r3, #36	; 0x24
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	4611      	mov	r1, r2
 800a358:	4618      	mov	r0, r3
 800a35a:	f000 fd9b 	bl	800ae94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a35e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a360:	f000 f8b8 	bl	800a4d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a364:	f000 fbca 	bl	800aafc <xTaskResumeAll>
 800a368:	4603      	mov	r3, r0
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d189      	bne.n	800a282 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a36e:	4b10      	ldr	r3, [pc, #64]	; (800a3b0 <xQueueReceive+0x1bc>)
 800a370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a374:	601a      	str	r2, [r3, #0]
 800a376:	f3bf 8f4f 	dsb	sy
 800a37a:	f3bf 8f6f 	isb	sy
 800a37e:	e780      	b.n	800a282 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a380:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a382:	f000 f8a7 	bl	800a4d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a386:	f000 fbb9 	bl	800aafc <xTaskResumeAll>
 800a38a:	e77a      	b.n	800a282 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a38c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a38e:	f000 f8a1 	bl	800a4d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a392:	f000 fbb3 	bl	800aafc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a396:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a398:	f000 f8ee 	bl	800a578 <prvIsQueueEmpty>
 800a39c:	4603      	mov	r3, r0
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	f43f af6f 	beq.w	800a282 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a3a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3730      	adds	r7, #48	; 0x30
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}
 800a3ae:	bf00      	nop
 800a3b0:	e000ed04 	.word	0xe000ed04

0800a3b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b086      	sub	sp, #24
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	60f8      	str	r0, [r7, #12]
 800a3bc:	60b9      	str	r1, [r7, #8]
 800a3be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d10d      	bne.n	800a3ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d14d      	bne.n	800a476 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	689b      	ldr	r3, [r3, #8]
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f000 ff88 	bl	800b2f4 <xTaskPriorityDisinherit>
 800a3e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	609a      	str	r2, [r3, #8]
 800a3ec:	e043      	b.n	800a476 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d119      	bne.n	800a428 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	6858      	ldr	r0, [r3, #4]
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3fc:	461a      	mov	r2, r3
 800a3fe:	68b9      	ldr	r1, [r7, #8]
 800a400:	f001 fcab 	bl	800bd5a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	685a      	ldr	r2, [r3, #4]
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a40c:	441a      	add	r2, r3
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	685a      	ldr	r2, [r3, #4]
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	689b      	ldr	r3, [r3, #8]
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d32b      	bcc.n	800a476 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681a      	ldr	r2, [r3, #0]
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	605a      	str	r2, [r3, #4]
 800a426:	e026      	b.n	800a476 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	68d8      	ldr	r0, [r3, #12]
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a430:	461a      	mov	r2, r3
 800a432:	68b9      	ldr	r1, [r7, #8]
 800a434:	f001 fc91 	bl	800bd5a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	68da      	ldr	r2, [r3, #12]
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a440:	425b      	negs	r3, r3
 800a442:	441a      	add	r2, r3
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	68da      	ldr	r2, [r3, #12]
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	429a      	cmp	r2, r3
 800a452:	d207      	bcs.n	800a464 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	689a      	ldr	r2, [r3, #8]
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a45c:	425b      	negs	r3, r3
 800a45e:	441a      	add	r2, r3
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2b02      	cmp	r3, #2
 800a468:	d105      	bne.n	800a476 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d002      	beq.n	800a476 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	3b01      	subs	r3, #1
 800a474:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	1c5a      	adds	r2, r3, #1
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a47e:	697b      	ldr	r3, [r7, #20]
}
 800a480:	4618      	mov	r0, r3
 800a482:	3718      	adds	r7, #24
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a496:	2b00      	cmp	r3, #0
 800a498:	d018      	beq.n	800a4cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	68da      	ldr	r2, [r3, #12]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4a2:	441a      	add	r2, r3
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	68da      	ldr	r2, [r3, #12]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	689b      	ldr	r3, [r3, #8]
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d303      	bcc.n	800a4bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681a      	ldr	r2, [r3, #0]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	68d9      	ldr	r1, [r3, #12]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	6838      	ldr	r0, [r7, #0]
 800a4c8:	f001 fc47 	bl	800bd5a <memcpy>
	}
}
 800a4cc:	bf00      	nop
 800a4ce:	3708      	adds	r7, #8
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b084      	sub	sp, #16
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a4dc:	f7ff faca 	bl	8009a74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a4e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a4e8:	e011      	b.n	800a50e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d012      	beq.n	800a518 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	3324      	adds	r3, #36	; 0x24
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f000 fd1c 	bl	800af34 <xTaskRemoveFromEventList>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d001      	beq.n	800a506 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a502:	f000 fdf3 	bl	800b0ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a506:	7bfb      	ldrb	r3, [r7, #15]
 800a508:	3b01      	subs	r3, #1
 800a50a:	b2db      	uxtb	r3, r3
 800a50c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a50e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a512:	2b00      	cmp	r3, #0
 800a514:	dce9      	bgt.n	800a4ea <prvUnlockQueue+0x16>
 800a516:	e000      	b.n	800a51a <prvUnlockQueue+0x46>
					break;
 800a518:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	22ff      	movs	r2, #255	; 0xff
 800a51e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a522:	f7ff fad7 	bl	8009ad4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a526:	f7ff faa5 	bl	8009a74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a530:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a532:	e011      	b.n	800a558 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	691b      	ldr	r3, [r3, #16]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d012      	beq.n	800a562 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	3310      	adds	r3, #16
 800a540:	4618      	mov	r0, r3
 800a542:	f000 fcf7 	bl	800af34 <xTaskRemoveFromEventList>
 800a546:	4603      	mov	r3, r0
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d001      	beq.n	800a550 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a54c:	f000 fdce 	bl	800b0ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a550:	7bbb      	ldrb	r3, [r7, #14]
 800a552:	3b01      	subs	r3, #1
 800a554:	b2db      	uxtb	r3, r3
 800a556:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a558:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	dce9      	bgt.n	800a534 <prvUnlockQueue+0x60>
 800a560:	e000      	b.n	800a564 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a562:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	22ff      	movs	r2, #255	; 0xff
 800a568:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a56c:	f7ff fab2 	bl	8009ad4 <vPortExitCritical>
}
 800a570:	bf00      	nop
 800a572:	3710      	adds	r7, #16
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b084      	sub	sp, #16
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a580:	f7ff fa78 	bl	8009a74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d102      	bne.n	800a592 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a58c:	2301      	movs	r3, #1
 800a58e:	60fb      	str	r3, [r7, #12]
 800a590:	e001      	b.n	800a596 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a592:	2300      	movs	r3, #0
 800a594:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a596:	f7ff fa9d 	bl	8009ad4 <vPortExitCritical>

	return xReturn;
 800a59a:	68fb      	ldr	r3, [r7, #12]
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3710      	adds	r7, #16
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}

0800a5a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b084      	sub	sp, #16
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a5ac:	f7ff fa62 	bl	8009a74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d102      	bne.n	800a5c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	60fb      	str	r3, [r7, #12]
 800a5c0:	e001      	b.n	800a5c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a5c6:	f7ff fa85 	bl	8009ad4 <vPortExitCritical>

	return xReturn;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3710      	adds	r7, #16
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b085      	sub	sp, #20
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a5de:	2300      	movs	r3, #0
 800a5e0:	60fb      	str	r3, [r7, #12]
 800a5e2:	e014      	b.n	800a60e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a5e4:	4a0f      	ldr	r2, [pc, #60]	; (800a624 <vQueueAddToRegistry+0x50>)
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d10b      	bne.n	800a608 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a5f0:	490c      	ldr	r1, [pc, #48]	; (800a624 <vQueueAddToRegistry+0x50>)
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	683a      	ldr	r2, [r7, #0]
 800a5f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a5fa:	4a0a      	ldr	r2, [pc, #40]	; (800a624 <vQueueAddToRegistry+0x50>)
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	00db      	lsls	r3, r3, #3
 800a600:	4413      	add	r3, r2
 800a602:	687a      	ldr	r2, [r7, #4]
 800a604:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a606:	e006      	b.n	800a616 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	3301      	adds	r3, #1
 800a60c:	60fb      	str	r3, [r7, #12]
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2b07      	cmp	r3, #7
 800a612:	d9e7      	bls.n	800a5e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a614:	bf00      	nop
 800a616:	bf00      	nop
 800a618:	3714      	adds	r7, #20
 800a61a:	46bd      	mov	sp, r7
 800a61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a620:	4770      	bx	lr
 800a622:	bf00      	nop
 800a624:	24004904 	.word	0x24004904

0800a628 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b086      	sub	sp, #24
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	60f8      	str	r0, [r7, #12]
 800a630:	60b9      	str	r1, [r7, #8]
 800a632:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a638:	f7ff fa1c 	bl	8009a74 <vPortEnterCritical>
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a642:	b25b      	sxtb	r3, r3
 800a644:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a648:	d103      	bne.n	800a652 <vQueueWaitForMessageRestricted+0x2a>
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	2200      	movs	r2, #0
 800a64e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a658:	b25b      	sxtb	r3, r3
 800a65a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a65e:	d103      	bne.n	800a668 <vQueueWaitForMessageRestricted+0x40>
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	2200      	movs	r2, #0
 800a664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a668:	f7ff fa34 	bl	8009ad4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a670:	2b00      	cmp	r3, #0
 800a672:	d106      	bne.n	800a682 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	3324      	adds	r3, #36	; 0x24
 800a678:	687a      	ldr	r2, [r7, #4]
 800a67a:	68b9      	ldr	r1, [r7, #8]
 800a67c:	4618      	mov	r0, r3
 800a67e:	f000 fc2d 	bl	800aedc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a682:	6978      	ldr	r0, [r7, #20]
 800a684:	f7ff ff26 	bl	800a4d4 <prvUnlockQueue>
	}
 800a688:	bf00      	nop
 800a68a:	3718      	adds	r7, #24
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}

0800a690 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a690:	b580      	push	{r7, lr}
 800a692:	b08e      	sub	sp, #56	; 0x38
 800a694:	af04      	add	r7, sp, #16
 800a696:	60f8      	str	r0, [r7, #12]
 800a698:	60b9      	str	r1, [r7, #8]
 800a69a:	607a      	str	r2, [r7, #4]
 800a69c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a69e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d10a      	bne.n	800a6ba <xTaskCreateStatic+0x2a>
	__asm volatile
 800a6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a8:	f383 8811 	msr	BASEPRI, r3
 800a6ac:	f3bf 8f6f 	isb	sy
 800a6b0:	f3bf 8f4f 	dsb	sy
 800a6b4:	623b      	str	r3, [r7, #32]
}
 800a6b6:	bf00      	nop
 800a6b8:	e7fe      	b.n	800a6b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d10a      	bne.n	800a6d6 <xTaskCreateStatic+0x46>
	__asm volatile
 800a6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c4:	f383 8811 	msr	BASEPRI, r3
 800a6c8:	f3bf 8f6f 	isb	sy
 800a6cc:	f3bf 8f4f 	dsb	sy
 800a6d0:	61fb      	str	r3, [r7, #28]
}
 800a6d2:	bf00      	nop
 800a6d4:	e7fe      	b.n	800a6d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a6d6:	23bc      	movs	r3, #188	; 0xbc
 800a6d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	2bbc      	cmp	r3, #188	; 0xbc
 800a6de:	d00a      	beq.n	800a6f6 <xTaskCreateStatic+0x66>
	__asm volatile
 800a6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e4:	f383 8811 	msr	BASEPRI, r3
 800a6e8:	f3bf 8f6f 	isb	sy
 800a6ec:	f3bf 8f4f 	dsb	sy
 800a6f0:	61bb      	str	r3, [r7, #24]
}
 800a6f2:	bf00      	nop
 800a6f4:	e7fe      	b.n	800a6f4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a6f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d01e      	beq.n	800a73c <xTaskCreateStatic+0xac>
 800a6fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a700:	2b00      	cmp	r3, #0
 800a702:	d01b      	beq.n	800a73c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a706:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a70a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a70c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a710:	2202      	movs	r2, #2
 800a712:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a716:	2300      	movs	r3, #0
 800a718:	9303      	str	r3, [sp, #12]
 800a71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71c:	9302      	str	r3, [sp, #8]
 800a71e:	f107 0314 	add.w	r3, r7, #20
 800a722:	9301      	str	r3, [sp, #4]
 800a724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a726:	9300      	str	r3, [sp, #0]
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	687a      	ldr	r2, [r7, #4]
 800a72c:	68b9      	ldr	r1, [r7, #8]
 800a72e:	68f8      	ldr	r0, [r7, #12]
 800a730:	f000 f850 	bl	800a7d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a734:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a736:	f000 f8f3 	bl	800a920 <prvAddNewTaskToReadyList>
 800a73a:	e001      	b.n	800a740 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a73c:	2300      	movs	r3, #0
 800a73e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a740:	697b      	ldr	r3, [r7, #20]
	}
 800a742:	4618      	mov	r0, r3
 800a744:	3728      	adds	r7, #40	; 0x28
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}

0800a74a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a74a:	b580      	push	{r7, lr}
 800a74c:	b08c      	sub	sp, #48	; 0x30
 800a74e:	af04      	add	r7, sp, #16
 800a750:	60f8      	str	r0, [r7, #12]
 800a752:	60b9      	str	r1, [r7, #8]
 800a754:	603b      	str	r3, [r7, #0]
 800a756:	4613      	mov	r3, r2
 800a758:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a75a:	88fb      	ldrh	r3, [r7, #6]
 800a75c:	009b      	lsls	r3, r3, #2
 800a75e:	4618      	mov	r0, r3
 800a760:	f7fe fdbe 	bl	80092e0 <pvPortMalloc>
 800a764:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d00e      	beq.n	800a78a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a76c:	20bc      	movs	r0, #188	; 0xbc
 800a76e:	f7fe fdb7 	bl	80092e0 <pvPortMalloc>
 800a772:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a774:	69fb      	ldr	r3, [r7, #28]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d003      	beq.n	800a782 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a77a:	69fb      	ldr	r3, [r7, #28]
 800a77c:	697a      	ldr	r2, [r7, #20]
 800a77e:	631a      	str	r2, [r3, #48]	; 0x30
 800a780:	e005      	b.n	800a78e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a782:	6978      	ldr	r0, [r7, #20]
 800a784:	f7fe fe78 	bl	8009478 <vPortFree>
 800a788:	e001      	b.n	800a78e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a78a:	2300      	movs	r3, #0
 800a78c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a78e:	69fb      	ldr	r3, [r7, #28]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d017      	beq.n	800a7c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a794:	69fb      	ldr	r3, [r7, #28]
 800a796:	2200      	movs	r2, #0
 800a798:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a79c:	88fa      	ldrh	r2, [r7, #6]
 800a79e:	2300      	movs	r3, #0
 800a7a0:	9303      	str	r3, [sp, #12]
 800a7a2:	69fb      	ldr	r3, [r7, #28]
 800a7a4:	9302      	str	r3, [sp, #8]
 800a7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7a8:	9301      	str	r3, [sp, #4]
 800a7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ac:	9300      	str	r3, [sp, #0]
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	68b9      	ldr	r1, [r7, #8]
 800a7b2:	68f8      	ldr	r0, [r7, #12]
 800a7b4:	f000 f80e 	bl	800a7d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a7b8:	69f8      	ldr	r0, [r7, #28]
 800a7ba:	f000 f8b1 	bl	800a920 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a7be:	2301      	movs	r3, #1
 800a7c0:	61bb      	str	r3, [r7, #24]
 800a7c2:	e002      	b.n	800a7ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a7c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a7c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a7ca:	69bb      	ldr	r3, [r7, #24]
	}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3720      	adds	r7, #32
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b088      	sub	sp, #32
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	607a      	str	r2, [r7, #4]
 800a7e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	009b      	lsls	r3, r3, #2
 800a7ea:	461a      	mov	r2, r3
 800a7ec:	21a5      	movs	r1, #165	; 0xa5
 800a7ee:	f001 fac2 	bl	800bd76 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7f6:	6879      	ldr	r1, [r7, #4]
 800a7f8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800a7fc:	440b      	add	r3, r1
 800a7fe:	009b      	lsls	r3, r3, #2
 800a800:	4413      	add	r3, r2
 800a802:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a804:	69bb      	ldr	r3, [r7, #24]
 800a806:	f023 0307 	bic.w	r3, r3, #7
 800a80a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a80c:	69bb      	ldr	r3, [r7, #24]
 800a80e:	f003 0307 	and.w	r3, r3, #7
 800a812:	2b00      	cmp	r3, #0
 800a814:	d00a      	beq.n	800a82c <prvInitialiseNewTask+0x58>
	__asm volatile
 800a816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a81a:	f383 8811 	msr	BASEPRI, r3
 800a81e:	f3bf 8f6f 	isb	sy
 800a822:	f3bf 8f4f 	dsb	sy
 800a826:	617b      	str	r3, [r7, #20]
}
 800a828:	bf00      	nop
 800a82a:	e7fe      	b.n	800a82a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d01f      	beq.n	800a872 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a832:	2300      	movs	r3, #0
 800a834:	61fb      	str	r3, [r7, #28]
 800a836:	e012      	b.n	800a85e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a838:	68ba      	ldr	r2, [r7, #8]
 800a83a:	69fb      	ldr	r3, [r7, #28]
 800a83c:	4413      	add	r3, r2
 800a83e:	7819      	ldrb	r1, [r3, #0]
 800a840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a842:	69fb      	ldr	r3, [r7, #28]
 800a844:	4413      	add	r3, r2
 800a846:	3334      	adds	r3, #52	; 0x34
 800a848:	460a      	mov	r2, r1
 800a84a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a84c:	68ba      	ldr	r2, [r7, #8]
 800a84e:	69fb      	ldr	r3, [r7, #28]
 800a850:	4413      	add	r3, r2
 800a852:	781b      	ldrb	r3, [r3, #0]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d006      	beq.n	800a866 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a858:	69fb      	ldr	r3, [r7, #28]
 800a85a:	3301      	adds	r3, #1
 800a85c:	61fb      	str	r3, [r7, #28]
 800a85e:	69fb      	ldr	r3, [r7, #28]
 800a860:	2b0f      	cmp	r3, #15
 800a862:	d9e9      	bls.n	800a838 <prvInitialiseNewTask+0x64>
 800a864:	e000      	b.n	800a868 <prvInitialiseNewTask+0x94>
			{
				break;
 800a866:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a86a:	2200      	movs	r2, #0
 800a86c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a870:	e003      	b.n	800a87a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a874:	2200      	movs	r2, #0
 800a876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a87c:	2b37      	cmp	r3, #55	; 0x37
 800a87e:	d901      	bls.n	800a884 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a880:	2337      	movs	r3, #55	; 0x37
 800a882:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a886:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a888:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a88c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a88e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a892:	2200      	movs	r2, #0
 800a894:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a898:	3304      	adds	r3, #4
 800a89a:	4618      	mov	r0, r3
 800a89c:	f7fe ff2a 	bl	80096f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a8a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a2:	3318      	adds	r3, #24
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f7fe ff25 	bl	80096f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a8c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d2:	3354      	adds	r3, #84	; 0x54
 800a8d4:	2260      	movs	r2, #96	; 0x60
 800a8d6:	2100      	movs	r1, #0
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f001 fa4c 	bl	800bd76 <memset>
 800a8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e0:	4a0c      	ldr	r2, [pc, #48]	; (800a914 <prvInitialiseNewTask+0x140>)
 800a8e2:	659a      	str	r2, [r3, #88]	; 0x58
 800a8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e6:	4a0c      	ldr	r2, [pc, #48]	; (800a918 <prvInitialiseNewTask+0x144>)
 800a8e8:	65da      	str	r2, [r3, #92]	; 0x5c
 800a8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ec:	4a0b      	ldr	r2, [pc, #44]	; (800a91c <prvInitialiseNewTask+0x148>)
 800a8ee:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a8f0:	683a      	ldr	r2, [r7, #0]
 800a8f2:	68f9      	ldr	r1, [r7, #12]
 800a8f4:	69b8      	ldr	r0, [r7, #24]
 800a8f6:	f7fe ff91 	bl	800981c <pxPortInitialiseStack>
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8fe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a902:	2b00      	cmp	r3, #0
 800a904:	d002      	beq.n	800a90c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a90a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a90c:	bf00      	nop
 800a90e:	3720      	adds	r7, #32
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}
 800a914:	0800d5a4 	.word	0x0800d5a4
 800a918:	0800d5c4 	.word	0x0800d5c4
 800a91c:	0800d584 	.word	0x0800d584

0800a920 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b082      	sub	sp, #8
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a928:	f7ff f8a4 	bl	8009a74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a92c:	4b2d      	ldr	r3, [pc, #180]	; (800a9e4 <prvAddNewTaskToReadyList+0xc4>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	3301      	adds	r3, #1
 800a932:	4a2c      	ldr	r2, [pc, #176]	; (800a9e4 <prvAddNewTaskToReadyList+0xc4>)
 800a934:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a936:	4b2c      	ldr	r3, [pc, #176]	; (800a9e8 <prvAddNewTaskToReadyList+0xc8>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d109      	bne.n	800a952 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a93e:	4a2a      	ldr	r2, [pc, #168]	; (800a9e8 <prvAddNewTaskToReadyList+0xc8>)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a944:	4b27      	ldr	r3, [pc, #156]	; (800a9e4 <prvAddNewTaskToReadyList+0xc4>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	2b01      	cmp	r3, #1
 800a94a:	d110      	bne.n	800a96e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a94c:	f000 fbf2 	bl	800b134 <prvInitialiseTaskLists>
 800a950:	e00d      	b.n	800a96e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a952:	4b26      	ldr	r3, [pc, #152]	; (800a9ec <prvAddNewTaskToReadyList+0xcc>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d109      	bne.n	800a96e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a95a:	4b23      	ldr	r3, [pc, #140]	; (800a9e8 <prvAddNewTaskToReadyList+0xc8>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a964:	429a      	cmp	r2, r3
 800a966:	d802      	bhi.n	800a96e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a968:	4a1f      	ldr	r2, [pc, #124]	; (800a9e8 <prvAddNewTaskToReadyList+0xc8>)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a96e:	4b20      	ldr	r3, [pc, #128]	; (800a9f0 <prvAddNewTaskToReadyList+0xd0>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	3301      	adds	r3, #1
 800a974:	4a1e      	ldr	r2, [pc, #120]	; (800a9f0 <prvAddNewTaskToReadyList+0xd0>)
 800a976:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a978:	4b1d      	ldr	r3, [pc, #116]	; (800a9f0 <prvAddNewTaskToReadyList+0xd0>)
 800a97a:	681a      	ldr	r2, [r3, #0]
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a984:	4b1b      	ldr	r3, [pc, #108]	; (800a9f4 <prvAddNewTaskToReadyList+0xd4>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	429a      	cmp	r2, r3
 800a98a:	d903      	bls.n	800a994 <prvAddNewTaskToReadyList+0x74>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a990:	4a18      	ldr	r2, [pc, #96]	; (800a9f4 <prvAddNewTaskToReadyList+0xd4>)
 800a992:	6013      	str	r3, [r2, #0]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a998:	4613      	mov	r3, r2
 800a99a:	009b      	lsls	r3, r3, #2
 800a99c:	4413      	add	r3, r2
 800a99e:	009b      	lsls	r3, r3, #2
 800a9a0:	4a15      	ldr	r2, [pc, #84]	; (800a9f8 <prvAddNewTaskToReadyList+0xd8>)
 800a9a2:	441a      	add	r2, r3
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	3304      	adds	r3, #4
 800a9a8:	4619      	mov	r1, r3
 800a9aa:	4610      	mov	r0, r2
 800a9ac:	f7fe feaf 	bl	800970e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a9b0:	f7ff f890 	bl	8009ad4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a9b4:	4b0d      	ldr	r3, [pc, #52]	; (800a9ec <prvAddNewTaskToReadyList+0xcc>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d00e      	beq.n	800a9da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a9bc:	4b0a      	ldr	r3, [pc, #40]	; (800a9e8 <prvAddNewTaskToReadyList+0xc8>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d207      	bcs.n	800a9da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a9ca:	4b0c      	ldr	r3, [pc, #48]	; (800a9fc <prvAddNewTaskToReadyList+0xdc>)
 800a9cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9d0:	601a      	str	r2, [r3, #0]
 800a9d2:	f3bf 8f4f 	dsb	sy
 800a9d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a9da:	bf00      	nop
 800a9dc:	3708      	adds	r7, #8
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}
 800a9e2:	bf00      	nop
 800a9e4:	24004e18 	.word	0x24004e18
 800a9e8:	24004944 	.word	0x24004944
 800a9ec:	24004e24 	.word	0x24004e24
 800a9f0:	24004e34 	.word	0x24004e34
 800a9f4:	24004e20 	.word	0x24004e20
 800a9f8:	24004948 	.word	0x24004948
 800a9fc:	e000ed04 	.word	0xe000ed04

0800aa00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b08a      	sub	sp, #40	; 0x28
 800aa04:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800aa06:	2300      	movs	r3, #0
 800aa08:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800aa0e:	463a      	mov	r2, r7
 800aa10:	1d39      	adds	r1, r7, #4
 800aa12:	f107 0308 	add.w	r3, r7, #8
 800aa16:	4618      	mov	r0, r3
 800aa18:	f7fe fc2e 	bl	8009278 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800aa1c:	6839      	ldr	r1, [r7, #0]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	68ba      	ldr	r2, [r7, #8]
 800aa22:	9202      	str	r2, [sp, #8]
 800aa24:	9301      	str	r3, [sp, #4]
 800aa26:	2300      	movs	r3, #0
 800aa28:	9300      	str	r3, [sp, #0]
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	460a      	mov	r2, r1
 800aa2e:	4924      	ldr	r1, [pc, #144]	; (800aac0 <vTaskStartScheduler+0xc0>)
 800aa30:	4824      	ldr	r0, [pc, #144]	; (800aac4 <vTaskStartScheduler+0xc4>)
 800aa32:	f7ff fe2d 	bl	800a690 <xTaskCreateStatic>
 800aa36:	4603      	mov	r3, r0
 800aa38:	4a23      	ldr	r2, [pc, #140]	; (800aac8 <vTaskStartScheduler+0xc8>)
 800aa3a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800aa3c:	4b22      	ldr	r3, [pc, #136]	; (800aac8 <vTaskStartScheduler+0xc8>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d002      	beq.n	800aa4a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aa44:	2301      	movs	r3, #1
 800aa46:	617b      	str	r3, [r7, #20]
 800aa48:	e001      	b.n	800aa4e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	2b01      	cmp	r3, #1
 800aa52:	d102      	bne.n	800aa5a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800aa54:	f000 fd10 	bl	800b478 <xTimerCreateTimerTask>
 800aa58:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	2b01      	cmp	r3, #1
 800aa5e:	d11b      	bne.n	800aa98 <vTaskStartScheduler+0x98>
	__asm volatile
 800aa60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa64:	f383 8811 	msr	BASEPRI, r3
 800aa68:	f3bf 8f6f 	isb	sy
 800aa6c:	f3bf 8f4f 	dsb	sy
 800aa70:	613b      	str	r3, [r7, #16]
}
 800aa72:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800aa74:	4b15      	ldr	r3, [pc, #84]	; (800aacc <vTaskStartScheduler+0xcc>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	3354      	adds	r3, #84	; 0x54
 800aa7a:	4a15      	ldr	r2, [pc, #84]	; (800aad0 <vTaskStartScheduler+0xd0>)
 800aa7c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aa7e:	4b15      	ldr	r3, [pc, #84]	; (800aad4 <vTaskStartScheduler+0xd4>)
 800aa80:	f04f 32ff 	mov.w	r2, #4294967295
 800aa84:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aa86:	4b14      	ldr	r3, [pc, #80]	; (800aad8 <vTaskStartScheduler+0xd8>)
 800aa88:	2201      	movs	r2, #1
 800aa8a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800aa8c:	4b13      	ldr	r3, [pc, #76]	; (800aadc <vTaskStartScheduler+0xdc>)
 800aa8e:	2200      	movs	r2, #0
 800aa90:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aa92:	f7fe ff4d 	bl	8009930 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aa96:	e00e      	b.n	800aab6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa9e:	d10a      	bne.n	800aab6 <vTaskStartScheduler+0xb6>
	__asm volatile
 800aaa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa4:	f383 8811 	msr	BASEPRI, r3
 800aaa8:	f3bf 8f6f 	isb	sy
 800aaac:	f3bf 8f4f 	dsb	sy
 800aab0:	60fb      	str	r3, [r7, #12]
}
 800aab2:	bf00      	nop
 800aab4:	e7fe      	b.n	800aab4 <vTaskStartScheduler+0xb4>
}
 800aab6:	bf00      	nop
 800aab8:	3718      	adds	r7, #24
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}
 800aabe:	bf00      	nop
 800aac0:	0800d500 	.word	0x0800d500
 800aac4:	0800b105 	.word	0x0800b105
 800aac8:	24004e3c 	.word	0x24004e3c
 800aacc:	24004944 	.word	0x24004944
 800aad0:	2400001c 	.word	0x2400001c
 800aad4:	24004e38 	.word	0x24004e38
 800aad8:	24004e24 	.word	0x24004e24
 800aadc:	24004e1c 	.word	0x24004e1c

0800aae0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aae0:	b480      	push	{r7}
 800aae2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800aae4:	4b04      	ldr	r3, [pc, #16]	; (800aaf8 <vTaskSuspendAll+0x18>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	3301      	adds	r3, #1
 800aaea:	4a03      	ldr	r2, [pc, #12]	; (800aaf8 <vTaskSuspendAll+0x18>)
 800aaec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800aaee:	bf00      	nop
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr
 800aaf8:	24004e40 	.word	0x24004e40

0800aafc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b084      	sub	sp, #16
 800ab00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ab02:	2300      	movs	r3, #0
 800ab04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ab06:	2300      	movs	r3, #0
 800ab08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ab0a:	4b42      	ldr	r3, [pc, #264]	; (800ac14 <xTaskResumeAll+0x118>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d10a      	bne.n	800ab28 <xTaskResumeAll+0x2c>
	__asm volatile
 800ab12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab16:	f383 8811 	msr	BASEPRI, r3
 800ab1a:	f3bf 8f6f 	isb	sy
 800ab1e:	f3bf 8f4f 	dsb	sy
 800ab22:	603b      	str	r3, [r7, #0]
}
 800ab24:	bf00      	nop
 800ab26:	e7fe      	b.n	800ab26 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ab28:	f7fe ffa4 	bl	8009a74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ab2c:	4b39      	ldr	r3, [pc, #228]	; (800ac14 <xTaskResumeAll+0x118>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	3b01      	subs	r3, #1
 800ab32:	4a38      	ldr	r2, [pc, #224]	; (800ac14 <xTaskResumeAll+0x118>)
 800ab34:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab36:	4b37      	ldr	r3, [pc, #220]	; (800ac14 <xTaskResumeAll+0x118>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d162      	bne.n	800ac04 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ab3e:	4b36      	ldr	r3, [pc, #216]	; (800ac18 <xTaskResumeAll+0x11c>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d05e      	beq.n	800ac04 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ab46:	e02f      	b.n	800aba8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab48:	4b34      	ldr	r3, [pc, #208]	; (800ac1c <xTaskResumeAll+0x120>)
 800ab4a:	68db      	ldr	r3, [r3, #12]
 800ab4c:	68db      	ldr	r3, [r3, #12]
 800ab4e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	3318      	adds	r3, #24
 800ab54:	4618      	mov	r0, r3
 800ab56:	f7fe fe37 	bl	80097c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	3304      	adds	r3, #4
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7fe fe32 	bl	80097c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab68:	4b2d      	ldr	r3, [pc, #180]	; (800ac20 <xTaskResumeAll+0x124>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	d903      	bls.n	800ab78 <xTaskResumeAll+0x7c>
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab74:	4a2a      	ldr	r2, [pc, #168]	; (800ac20 <xTaskResumeAll+0x124>)
 800ab76:	6013      	str	r3, [r2, #0]
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab7c:	4613      	mov	r3, r2
 800ab7e:	009b      	lsls	r3, r3, #2
 800ab80:	4413      	add	r3, r2
 800ab82:	009b      	lsls	r3, r3, #2
 800ab84:	4a27      	ldr	r2, [pc, #156]	; (800ac24 <xTaskResumeAll+0x128>)
 800ab86:	441a      	add	r2, r3
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	3304      	adds	r3, #4
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	4610      	mov	r0, r2
 800ab90:	f7fe fdbd 	bl	800970e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab98:	4b23      	ldr	r3, [pc, #140]	; (800ac28 <xTaskResumeAll+0x12c>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d302      	bcc.n	800aba8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800aba2:	4b22      	ldr	r3, [pc, #136]	; (800ac2c <xTaskResumeAll+0x130>)
 800aba4:	2201      	movs	r2, #1
 800aba6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aba8:	4b1c      	ldr	r3, [pc, #112]	; (800ac1c <xTaskResumeAll+0x120>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d1cb      	bne.n	800ab48 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d001      	beq.n	800abba <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800abb6:	f000 fb5f 	bl	800b278 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800abba:	4b1d      	ldr	r3, [pc, #116]	; (800ac30 <xTaskResumeAll+0x134>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d010      	beq.n	800abe8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800abc6:	f000 f847 	bl	800ac58 <xTaskIncrementTick>
 800abca:	4603      	mov	r3, r0
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d002      	beq.n	800abd6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800abd0:	4b16      	ldr	r3, [pc, #88]	; (800ac2c <xTaskResumeAll+0x130>)
 800abd2:	2201      	movs	r2, #1
 800abd4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	3b01      	subs	r3, #1
 800abda:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d1f1      	bne.n	800abc6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800abe2:	4b13      	ldr	r3, [pc, #76]	; (800ac30 <xTaskResumeAll+0x134>)
 800abe4:	2200      	movs	r2, #0
 800abe6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800abe8:	4b10      	ldr	r3, [pc, #64]	; (800ac2c <xTaskResumeAll+0x130>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d009      	beq.n	800ac04 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800abf0:	2301      	movs	r3, #1
 800abf2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800abf4:	4b0f      	ldr	r3, [pc, #60]	; (800ac34 <xTaskResumeAll+0x138>)
 800abf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abfa:	601a      	str	r2, [r3, #0]
 800abfc:	f3bf 8f4f 	dsb	sy
 800ac00:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ac04:	f7fe ff66 	bl	8009ad4 <vPortExitCritical>

	return xAlreadyYielded;
 800ac08:	68bb      	ldr	r3, [r7, #8]
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3710      	adds	r7, #16
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}
 800ac12:	bf00      	nop
 800ac14:	24004e40 	.word	0x24004e40
 800ac18:	24004e18 	.word	0x24004e18
 800ac1c:	24004dd8 	.word	0x24004dd8
 800ac20:	24004e20 	.word	0x24004e20
 800ac24:	24004948 	.word	0x24004948
 800ac28:	24004944 	.word	0x24004944
 800ac2c:	24004e2c 	.word	0x24004e2c
 800ac30:	24004e28 	.word	0x24004e28
 800ac34:	e000ed04 	.word	0xe000ed04

0800ac38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b083      	sub	sp, #12
 800ac3c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ac3e:	4b05      	ldr	r3, [pc, #20]	; (800ac54 <xTaskGetTickCount+0x1c>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ac44:	687b      	ldr	r3, [r7, #4]
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	370c      	adds	r7, #12
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac50:	4770      	bx	lr
 800ac52:	bf00      	nop
 800ac54:	24004e1c 	.word	0x24004e1c

0800ac58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b086      	sub	sp, #24
 800ac5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac62:	4b4f      	ldr	r3, [pc, #316]	; (800ada0 <xTaskIncrementTick+0x148>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	f040 808f 	bne.w	800ad8a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ac6c:	4b4d      	ldr	r3, [pc, #308]	; (800ada4 <xTaskIncrementTick+0x14c>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	3301      	adds	r3, #1
 800ac72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ac74:	4a4b      	ldr	r2, [pc, #300]	; (800ada4 <xTaskIncrementTick+0x14c>)
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d120      	bne.n	800acc2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ac80:	4b49      	ldr	r3, [pc, #292]	; (800ada8 <xTaskIncrementTick+0x150>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d00a      	beq.n	800aca0 <xTaskIncrementTick+0x48>
	__asm volatile
 800ac8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac8e:	f383 8811 	msr	BASEPRI, r3
 800ac92:	f3bf 8f6f 	isb	sy
 800ac96:	f3bf 8f4f 	dsb	sy
 800ac9a:	603b      	str	r3, [r7, #0]
}
 800ac9c:	bf00      	nop
 800ac9e:	e7fe      	b.n	800ac9e <xTaskIncrementTick+0x46>
 800aca0:	4b41      	ldr	r3, [pc, #260]	; (800ada8 <xTaskIncrementTick+0x150>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	60fb      	str	r3, [r7, #12]
 800aca6:	4b41      	ldr	r3, [pc, #260]	; (800adac <xTaskIncrementTick+0x154>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4a3f      	ldr	r2, [pc, #252]	; (800ada8 <xTaskIncrementTick+0x150>)
 800acac:	6013      	str	r3, [r2, #0]
 800acae:	4a3f      	ldr	r2, [pc, #252]	; (800adac <xTaskIncrementTick+0x154>)
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	6013      	str	r3, [r2, #0]
 800acb4:	4b3e      	ldr	r3, [pc, #248]	; (800adb0 <xTaskIncrementTick+0x158>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	3301      	adds	r3, #1
 800acba:	4a3d      	ldr	r2, [pc, #244]	; (800adb0 <xTaskIncrementTick+0x158>)
 800acbc:	6013      	str	r3, [r2, #0]
 800acbe:	f000 fadb 	bl	800b278 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800acc2:	4b3c      	ldr	r3, [pc, #240]	; (800adb4 <xTaskIncrementTick+0x15c>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	693a      	ldr	r2, [r7, #16]
 800acc8:	429a      	cmp	r2, r3
 800acca:	d349      	bcc.n	800ad60 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800accc:	4b36      	ldr	r3, [pc, #216]	; (800ada8 <xTaskIncrementTick+0x150>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d104      	bne.n	800ace0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acd6:	4b37      	ldr	r3, [pc, #220]	; (800adb4 <xTaskIncrementTick+0x15c>)
 800acd8:	f04f 32ff 	mov.w	r2, #4294967295
 800acdc:	601a      	str	r2, [r3, #0]
					break;
 800acde:	e03f      	b.n	800ad60 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ace0:	4b31      	ldr	r3, [pc, #196]	; (800ada8 <xTaskIncrementTick+0x150>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	68db      	ldr	r3, [r3, #12]
 800ace6:	68db      	ldr	r3, [r3, #12]
 800ace8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	685b      	ldr	r3, [r3, #4]
 800acee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800acf0:	693a      	ldr	r2, [r7, #16]
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d203      	bcs.n	800ad00 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800acf8:	4a2e      	ldr	r2, [pc, #184]	; (800adb4 <xTaskIncrementTick+0x15c>)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800acfe:	e02f      	b.n	800ad60 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	3304      	adds	r3, #4
 800ad04:	4618      	mov	r0, r3
 800ad06:	f7fe fd5f 	bl	80097c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d004      	beq.n	800ad1c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	3318      	adds	r3, #24
 800ad16:	4618      	mov	r0, r3
 800ad18:	f7fe fd56 	bl	80097c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad20:	4b25      	ldr	r3, [pc, #148]	; (800adb8 <xTaskIncrementTick+0x160>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d903      	bls.n	800ad30 <xTaskIncrementTick+0xd8>
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad2c:	4a22      	ldr	r2, [pc, #136]	; (800adb8 <xTaskIncrementTick+0x160>)
 800ad2e:	6013      	str	r3, [r2, #0]
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad34:	4613      	mov	r3, r2
 800ad36:	009b      	lsls	r3, r3, #2
 800ad38:	4413      	add	r3, r2
 800ad3a:	009b      	lsls	r3, r3, #2
 800ad3c:	4a1f      	ldr	r2, [pc, #124]	; (800adbc <xTaskIncrementTick+0x164>)
 800ad3e:	441a      	add	r2, r3
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	3304      	adds	r3, #4
 800ad44:	4619      	mov	r1, r3
 800ad46:	4610      	mov	r0, r2
 800ad48:	f7fe fce1 	bl	800970e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad50:	4b1b      	ldr	r3, [pc, #108]	; (800adc0 <xTaskIncrementTick+0x168>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d3b8      	bcc.n	800accc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad5e:	e7b5      	b.n	800accc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ad60:	4b17      	ldr	r3, [pc, #92]	; (800adc0 <xTaskIncrementTick+0x168>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad66:	4915      	ldr	r1, [pc, #84]	; (800adbc <xTaskIncrementTick+0x164>)
 800ad68:	4613      	mov	r3, r2
 800ad6a:	009b      	lsls	r3, r3, #2
 800ad6c:	4413      	add	r3, r2
 800ad6e:	009b      	lsls	r3, r3, #2
 800ad70:	440b      	add	r3, r1
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	d901      	bls.n	800ad7c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ad78:	2301      	movs	r3, #1
 800ad7a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ad7c:	4b11      	ldr	r3, [pc, #68]	; (800adc4 <xTaskIncrementTick+0x16c>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d007      	beq.n	800ad94 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ad84:	2301      	movs	r3, #1
 800ad86:	617b      	str	r3, [r7, #20]
 800ad88:	e004      	b.n	800ad94 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ad8a:	4b0f      	ldr	r3, [pc, #60]	; (800adc8 <xTaskIncrementTick+0x170>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	3301      	adds	r3, #1
 800ad90:	4a0d      	ldr	r2, [pc, #52]	; (800adc8 <xTaskIncrementTick+0x170>)
 800ad92:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ad94:	697b      	ldr	r3, [r7, #20]
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3718      	adds	r7, #24
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}
 800ad9e:	bf00      	nop
 800ada0:	24004e40 	.word	0x24004e40
 800ada4:	24004e1c 	.word	0x24004e1c
 800ada8:	24004dd0 	.word	0x24004dd0
 800adac:	24004dd4 	.word	0x24004dd4
 800adb0:	24004e30 	.word	0x24004e30
 800adb4:	24004e38 	.word	0x24004e38
 800adb8:	24004e20 	.word	0x24004e20
 800adbc:	24004948 	.word	0x24004948
 800adc0:	24004944 	.word	0x24004944
 800adc4:	24004e2c 	.word	0x24004e2c
 800adc8:	24004e28 	.word	0x24004e28

0800adcc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800adcc:	b480      	push	{r7}
 800adce:	b085      	sub	sp, #20
 800add0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800add2:	4b2a      	ldr	r3, [pc, #168]	; (800ae7c <vTaskSwitchContext+0xb0>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d003      	beq.n	800ade2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800adda:	4b29      	ldr	r3, [pc, #164]	; (800ae80 <vTaskSwitchContext+0xb4>)
 800addc:	2201      	movs	r2, #1
 800adde:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ade0:	e046      	b.n	800ae70 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800ade2:	4b27      	ldr	r3, [pc, #156]	; (800ae80 <vTaskSwitchContext+0xb4>)
 800ade4:	2200      	movs	r2, #0
 800ade6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ade8:	4b26      	ldr	r3, [pc, #152]	; (800ae84 <vTaskSwitchContext+0xb8>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	60fb      	str	r3, [r7, #12]
 800adee:	e010      	b.n	800ae12 <vTaskSwitchContext+0x46>
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d10a      	bne.n	800ae0c <vTaskSwitchContext+0x40>
	__asm volatile
 800adf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adfa:	f383 8811 	msr	BASEPRI, r3
 800adfe:	f3bf 8f6f 	isb	sy
 800ae02:	f3bf 8f4f 	dsb	sy
 800ae06:	607b      	str	r3, [r7, #4]
}
 800ae08:	bf00      	nop
 800ae0a:	e7fe      	b.n	800ae0a <vTaskSwitchContext+0x3e>
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	3b01      	subs	r3, #1
 800ae10:	60fb      	str	r3, [r7, #12]
 800ae12:	491d      	ldr	r1, [pc, #116]	; (800ae88 <vTaskSwitchContext+0xbc>)
 800ae14:	68fa      	ldr	r2, [r7, #12]
 800ae16:	4613      	mov	r3, r2
 800ae18:	009b      	lsls	r3, r3, #2
 800ae1a:	4413      	add	r3, r2
 800ae1c:	009b      	lsls	r3, r3, #2
 800ae1e:	440b      	add	r3, r1
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d0e4      	beq.n	800adf0 <vTaskSwitchContext+0x24>
 800ae26:	68fa      	ldr	r2, [r7, #12]
 800ae28:	4613      	mov	r3, r2
 800ae2a:	009b      	lsls	r3, r3, #2
 800ae2c:	4413      	add	r3, r2
 800ae2e:	009b      	lsls	r3, r3, #2
 800ae30:	4a15      	ldr	r2, [pc, #84]	; (800ae88 <vTaskSwitchContext+0xbc>)
 800ae32:	4413      	add	r3, r2
 800ae34:	60bb      	str	r3, [r7, #8]
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	685a      	ldr	r2, [r3, #4]
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	605a      	str	r2, [r3, #4]
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	685a      	ldr	r2, [r3, #4]
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	3308      	adds	r3, #8
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	d104      	bne.n	800ae56 <vTaskSwitchContext+0x8a>
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	685a      	ldr	r2, [r3, #4]
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	605a      	str	r2, [r3, #4]
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	685b      	ldr	r3, [r3, #4]
 800ae5a:	68db      	ldr	r3, [r3, #12]
 800ae5c:	4a0b      	ldr	r2, [pc, #44]	; (800ae8c <vTaskSwitchContext+0xc0>)
 800ae5e:	6013      	str	r3, [r2, #0]
 800ae60:	4a08      	ldr	r2, [pc, #32]	; (800ae84 <vTaskSwitchContext+0xb8>)
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ae66:	4b09      	ldr	r3, [pc, #36]	; (800ae8c <vTaskSwitchContext+0xc0>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	3354      	adds	r3, #84	; 0x54
 800ae6c:	4a08      	ldr	r2, [pc, #32]	; (800ae90 <vTaskSwitchContext+0xc4>)
 800ae6e:	6013      	str	r3, [r2, #0]
}
 800ae70:	bf00      	nop
 800ae72:	3714      	adds	r7, #20
 800ae74:	46bd      	mov	sp, r7
 800ae76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7a:	4770      	bx	lr
 800ae7c:	24004e40 	.word	0x24004e40
 800ae80:	24004e2c 	.word	0x24004e2c
 800ae84:	24004e20 	.word	0x24004e20
 800ae88:	24004948 	.word	0x24004948
 800ae8c:	24004944 	.word	0x24004944
 800ae90:	2400001c 	.word	0x2400001c

0800ae94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b084      	sub	sp, #16
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d10a      	bne.n	800aeba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800aea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea8:	f383 8811 	msr	BASEPRI, r3
 800aeac:	f3bf 8f6f 	isb	sy
 800aeb0:	f3bf 8f4f 	dsb	sy
 800aeb4:	60fb      	str	r3, [r7, #12]
}
 800aeb6:	bf00      	nop
 800aeb8:	e7fe      	b.n	800aeb8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aeba:	4b07      	ldr	r3, [pc, #28]	; (800aed8 <vTaskPlaceOnEventList+0x44>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	3318      	adds	r3, #24
 800aec0:	4619      	mov	r1, r3
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f7fe fc47 	bl	8009756 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aec8:	2101      	movs	r1, #1
 800aeca:	6838      	ldr	r0, [r7, #0]
 800aecc:	f000 fa80 	bl	800b3d0 <prvAddCurrentTaskToDelayedList>
}
 800aed0:	bf00      	nop
 800aed2:	3710      	adds	r7, #16
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}
 800aed8:	24004944 	.word	0x24004944

0800aedc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b086      	sub	sp, #24
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	60f8      	str	r0, [r7, #12]
 800aee4:	60b9      	str	r1, [r7, #8]
 800aee6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d10a      	bne.n	800af04 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800aeee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef2:	f383 8811 	msr	BASEPRI, r3
 800aef6:	f3bf 8f6f 	isb	sy
 800aefa:	f3bf 8f4f 	dsb	sy
 800aefe:	617b      	str	r3, [r7, #20]
}
 800af00:	bf00      	nop
 800af02:	e7fe      	b.n	800af02 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800af04:	4b0a      	ldr	r3, [pc, #40]	; (800af30 <vTaskPlaceOnEventListRestricted+0x54>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	3318      	adds	r3, #24
 800af0a:	4619      	mov	r1, r3
 800af0c:	68f8      	ldr	r0, [r7, #12]
 800af0e:	f7fe fbfe 	bl	800970e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d002      	beq.n	800af1e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800af18:	f04f 33ff 	mov.w	r3, #4294967295
 800af1c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800af1e:	6879      	ldr	r1, [r7, #4]
 800af20:	68b8      	ldr	r0, [r7, #8]
 800af22:	f000 fa55 	bl	800b3d0 <prvAddCurrentTaskToDelayedList>
	}
 800af26:	bf00      	nop
 800af28:	3718      	adds	r7, #24
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}
 800af2e:	bf00      	nop
 800af30:	24004944 	.word	0x24004944

0800af34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b086      	sub	sp, #24
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	68db      	ldr	r3, [r3, #12]
 800af40:	68db      	ldr	r3, [r3, #12]
 800af42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800af44:	693b      	ldr	r3, [r7, #16]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d10a      	bne.n	800af60 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800af4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af4e:	f383 8811 	msr	BASEPRI, r3
 800af52:	f3bf 8f6f 	isb	sy
 800af56:	f3bf 8f4f 	dsb	sy
 800af5a:	60fb      	str	r3, [r7, #12]
}
 800af5c:	bf00      	nop
 800af5e:	e7fe      	b.n	800af5e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	3318      	adds	r3, #24
 800af64:	4618      	mov	r0, r3
 800af66:	f7fe fc2f 	bl	80097c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af6a:	4b1e      	ldr	r3, [pc, #120]	; (800afe4 <xTaskRemoveFromEventList+0xb0>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d11d      	bne.n	800afae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	3304      	adds	r3, #4
 800af76:	4618      	mov	r0, r3
 800af78:	f7fe fc26 	bl	80097c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800af7c:	693b      	ldr	r3, [r7, #16]
 800af7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af80:	4b19      	ldr	r3, [pc, #100]	; (800afe8 <xTaskRemoveFromEventList+0xb4>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	429a      	cmp	r2, r3
 800af86:	d903      	bls.n	800af90 <xTaskRemoveFromEventList+0x5c>
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af8c:	4a16      	ldr	r2, [pc, #88]	; (800afe8 <xTaskRemoveFromEventList+0xb4>)
 800af8e:	6013      	str	r3, [r2, #0]
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af94:	4613      	mov	r3, r2
 800af96:	009b      	lsls	r3, r3, #2
 800af98:	4413      	add	r3, r2
 800af9a:	009b      	lsls	r3, r3, #2
 800af9c:	4a13      	ldr	r2, [pc, #76]	; (800afec <xTaskRemoveFromEventList+0xb8>)
 800af9e:	441a      	add	r2, r3
 800afa0:	693b      	ldr	r3, [r7, #16]
 800afa2:	3304      	adds	r3, #4
 800afa4:	4619      	mov	r1, r3
 800afa6:	4610      	mov	r0, r2
 800afa8:	f7fe fbb1 	bl	800970e <vListInsertEnd>
 800afac:	e005      	b.n	800afba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	3318      	adds	r3, #24
 800afb2:	4619      	mov	r1, r3
 800afb4:	480e      	ldr	r0, [pc, #56]	; (800aff0 <xTaskRemoveFromEventList+0xbc>)
 800afb6:	f7fe fbaa 	bl	800970e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afbe:	4b0d      	ldr	r3, [pc, #52]	; (800aff4 <xTaskRemoveFromEventList+0xc0>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d905      	bls.n	800afd4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800afc8:	2301      	movs	r3, #1
 800afca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800afcc:	4b0a      	ldr	r3, [pc, #40]	; (800aff8 <xTaskRemoveFromEventList+0xc4>)
 800afce:	2201      	movs	r2, #1
 800afd0:	601a      	str	r2, [r3, #0]
 800afd2:	e001      	b.n	800afd8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800afd4:	2300      	movs	r3, #0
 800afd6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800afd8:	697b      	ldr	r3, [r7, #20]
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3718      	adds	r7, #24
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop
 800afe4:	24004e40 	.word	0x24004e40
 800afe8:	24004e20 	.word	0x24004e20
 800afec:	24004948 	.word	0x24004948
 800aff0:	24004dd8 	.word	0x24004dd8
 800aff4:	24004944 	.word	0x24004944
 800aff8:	24004e2c 	.word	0x24004e2c

0800affc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800affc:	b480      	push	{r7}
 800affe:	b083      	sub	sp, #12
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b004:	4b06      	ldr	r3, [pc, #24]	; (800b020 <vTaskInternalSetTimeOutState+0x24>)
 800b006:	681a      	ldr	r2, [r3, #0]
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b00c:	4b05      	ldr	r3, [pc, #20]	; (800b024 <vTaskInternalSetTimeOutState+0x28>)
 800b00e:	681a      	ldr	r2, [r3, #0]
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	605a      	str	r2, [r3, #4]
}
 800b014:	bf00      	nop
 800b016:	370c      	adds	r7, #12
 800b018:	46bd      	mov	sp, r7
 800b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01e:	4770      	bx	lr
 800b020:	24004e30 	.word	0x24004e30
 800b024:	24004e1c 	.word	0x24004e1c

0800b028 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b088      	sub	sp, #32
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
 800b030:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d10a      	bne.n	800b04e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b03c:	f383 8811 	msr	BASEPRI, r3
 800b040:	f3bf 8f6f 	isb	sy
 800b044:	f3bf 8f4f 	dsb	sy
 800b048:	613b      	str	r3, [r7, #16]
}
 800b04a:	bf00      	nop
 800b04c:	e7fe      	b.n	800b04c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d10a      	bne.n	800b06a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b054:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b058:	f383 8811 	msr	BASEPRI, r3
 800b05c:	f3bf 8f6f 	isb	sy
 800b060:	f3bf 8f4f 	dsb	sy
 800b064:	60fb      	str	r3, [r7, #12]
}
 800b066:	bf00      	nop
 800b068:	e7fe      	b.n	800b068 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b06a:	f7fe fd03 	bl	8009a74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b06e:	4b1d      	ldr	r3, [pc, #116]	; (800b0e4 <xTaskCheckForTimeOut+0xbc>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	685b      	ldr	r3, [r3, #4]
 800b078:	69ba      	ldr	r2, [r7, #24]
 800b07a:	1ad3      	subs	r3, r2, r3
 800b07c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b086:	d102      	bne.n	800b08e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b088:	2300      	movs	r3, #0
 800b08a:	61fb      	str	r3, [r7, #28]
 800b08c:	e023      	b.n	800b0d6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681a      	ldr	r2, [r3, #0]
 800b092:	4b15      	ldr	r3, [pc, #84]	; (800b0e8 <xTaskCheckForTimeOut+0xc0>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	429a      	cmp	r2, r3
 800b098:	d007      	beq.n	800b0aa <xTaskCheckForTimeOut+0x82>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	69ba      	ldr	r2, [r7, #24]
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d302      	bcc.n	800b0aa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	61fb      	str	r3, [r7, #28]
 800b0a8:	e015      	b.n	800b0d6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	697a      	ldr	r2, [r7, #20]
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d20b      	bcs.n	800b0cc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	681a      	ldr	r2, [r3, #0]
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	1ad2      	subs	r2, r2, r3
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f7ff ff9b 	bl	800affc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	61fb      	str	r3, [r7, #28]
 800b0ca:	e004      	b.n	800b0d6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b0d6:	f7fe fcfd 	bl	8009ad4 <vPortExitCritical>

	return xReturn;
 800b0da:	69fb      	ldr	r3, [r7, #28]
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3720      	adds	r7, #32
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}
 800b0e4:	24004e1c 	.word	0x24004e1c
 800b0e8:	24004e30 	.word	0x24004e30

0800b0ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b0f0:	4b03      	ldr	r3, [pc, #12]	; (800b100 <vTaskMissedYield+0x14>)
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	601a      	str	r2, [r3, #0]
}
 800b0f6:	bf00      	nop
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr
 800b100:	24004e2c 	.word	0x24004e2c

0800b104 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b082      	sub	sp, #8
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b10c:	f000 f852 	bl	800b1b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b110:	4b06      	ldr	r3, [pc, #24]	; (800b12c <prvIdleTask+0x28>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	2b01      	cmp	r3, #1
 800b116:	d9f9      	bls.n	800b10c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b118:	4b05      	ldr	r3, [pc, #20]	; (800b130 <prvIdleTask+0x2c>)
 800b11a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b11e:	601a      	str	r2, [r3, #0]
 800b120:	f3bf 8f4f 	dsb	sy
 800b124:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b128:	e7f0      	b.n	800b10c <prvIdleTask+0x8>
 800b12a:	bf00      	nop
 800b12c:	24004948 	.word	0x24004948
 800b130:	e000ed04 	.word	0xe000ed04

0800b134 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b082      	sub	sp, #8
 800b138:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b13a:	2300      	movs	r3, #0
 800b13c:	607b      	str	r3, [r7, #4]
 800b13e:	e00c      	b.n	800b15a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b140:	687a      	ldr	r2, [r7, #4]
 800b142:	4613      	mov	r3, r2
 800b144:	009b      	lsls	r3, r3, #2
 800b146:	4413      	add	r3, r2
 800b148:	009b      	lsls	r3, r3, #2
 800b14a:	4a12      	ldr	r2, [pc, #72]	; (800b194 <prvInitialiseTaskLists+0x60>)
 800b14c:	4413      	add	r3, r2
 800b14e:	4618      	mov	r0, r3
 800b150:	f7fe fab0 	bl	80096b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	3301      	adds	r3, #1
 800b158:	607b      	str	r3, [r7, #4]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2b37      	cmp	r3, #55	; 0x37
 800b15e:	d9ef      	bls.n	800b140 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b160:	480d      	ldr	r0, [pc, #52]	; (800b198 <prvInitialiseTaskLists+0x64>)
 800b162:	f7fe faa7 	bl	80096b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b166:	480d      	ldr	r0, [pc, #52]	; (800b19c <prvInitialiseTaskLists+0x68>)
 800b168:	f7fe faa4 	bl	80096b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b16c:	480c      	ldr	r0, [pc, #48]	; (800b1a0 <prvInitialiseTaskLists+0x6c>)
 800b16e:	f7fe faa1 	bl	80096b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b172:	480c      	ldr	r0, [pc, #48]	; (800b1a4 <prvInitialiseTaskLists+0x70>)
 800b174:	f7fe fa9e 	bl	80096b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b178:	480b      	ldr	r0, [pc, #44]	; (800b1a8 <prvInitialiseTaskLists+0x74>)
 800b17a:	f7fe fa9b 	bl	80096b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b17e:	4b0b      	ldr	r3, [pc, #44]	; (800b1ac <prvInitialiseTaskLists+0x78>)
 800b180:	4a05      	ldr	r2, [pc, #20]	; (800b198 <prvInitialiseTaskLists+0x64>)
 800b182:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b184:	4b0a      	ldr	r3, [pc, #40]	; (800b1b0 <prvInitialiseTaskLists+0x7c>)
 800b186:	4a05      	ldr	r2, [pc, #20]	; (800b19c <prvInitialiseTaskLists+0x68>)
 800b188:	601a      	str	r2, [r3, #0]
}
 800b18a:	bf00      	nop
 800b18c:	3708      	adds	r7, #8
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
 800b192:	bf00      	nop
 800b194:	24004948 	.word	0x24004948
 800b198:	24004da8 	.word	0x24004da8
 800b19c:	24004dbc 	.word	0x24004dbc
 800b1a0:	24004dd8 	.word	0x24004dd8
 800b1a4:	24004dec 	.word	0x24004dec
 800b1a8:	24004e04 	.word	0x24004e04
 800b1ac:	24004dd0 	.word	0x24004dd0
 800b1b0:	24004dd4 	.word	0x24004dd4

0800b1b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b082      	sub	sp, #8
 800b1b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b1ba:	e019      	b.n	800b1f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b1bc:	f7fe fc5a 	bl	8009a74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1c0:	4b10      	ldr	r3, [pc, #64]	; (800b204 <prvCheckTasksWaitingTermination+0x50>)
 800b1c2:	68db      	ldr	r3, [r3, #12]
 800b1c4:	68db      	ldr	r3, [r3, #12]
 800b1c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	3304      	adds	r3, #4
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f7fe fafb 	bl	80097c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b1d2:	4b0d      	ldr	r3, [pc, #52]	; (800b208 <prvCheckTasksWaitingTermination+0x54>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	3b01      	subs	r3, #1
 800b1d8:	4a0b      	ldr	r2, [pc, #44]	; (800b208 <prvCheckTasksWaitingTermination+0x54>)
 800b1da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b1dc:	4b0b      	ldr	r3, [pc, #44]	; (800b20c <prvCheckTasksWaitingTermination+0x58>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	3b01      	subs	r3, #1
 800b1e2:	4a0a      	ldr	r2, [pc, #40]	; (800b20c <prvCheckTasksWaitingTermination+0x58>)
 800b1e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b1e6:	f7fe fc75 	bl	8009ad4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f000 f810 	bl	800b210 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b1f0:	4b06      	ldr	r3, [pc, #24]	; (800b20c <prvCheckTasksWaitingTermination+0x58>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d1e1      	bne.n	800b1bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b1f8:	bf00      	nop
 800b1fa:	bf00      	nop
 800b1fc:	3708      	adds	r7, #8
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
 800b202:	bf00      	nop
 800b204:	24004dec 	.word	0x24004dec
 800b208:	24004e18 	.word	0x24004e18
 800b20c:	24004e00 	.word	0x24004e00

0800b210 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b210:	b580      	push	{r7, lr}
 800b212:	b084      	sub	sp, #16
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	3354      	adds	r3, #84	; 0x54
 800b21c:	4618      	mov	r0, r3
 800b21e:	f000 fe6d 	bl	800befc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d108      	bne.n	800b23e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b230:	4618      	mov	r0, r3
 800b232:	f7fe f921 	bl	8009478 <vPortFree>
				vPortFree( pxTCB );
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f7fe f91e 	bl	8009478 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b23c:	e018      	b.n	800b270 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b244:	2b01      	cmp	r3, #1
 800b246:	d103      	bne.n	800b250 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f7fe f915 	bl	8009478 <vPortFree>
	}
 800b24e:	e00f      	b.n	800b270 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b256:	2b02      	cmp	r3, #2
 800b258:	d00a      	beq.n	800b270 <prvDeleteTCB+0x60>
	__asm volatile
 800b25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b25e:	f383 8811 	msr	BASEPRI, r3
 800b262:	f3bf 8f6f 	isb	sy
 800b266:	f3bf 8f4f 	dsb	sy
 800b26a:	60fb      	str	r3, [r7, #12]
}
 800b26c:	bf00      	nop
 800b26e:	e7fe      	b.n	800b26e <prvDeleteTCB+0x5e>
	}
 800b270:	bf00      	nop
 800b272:	3710      	adds	r7, #16
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}

0800b278 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b278:	b480      	push	{r7}
 800b27a:	b083      	sub	sp, #12
 800b27c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b27e:	4b0c      	ldr	r3, [pc, #48]	; (800b2b0 <prvResetNextTaskUnblockTime+0x38>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d104      	bne.n	800b292 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b288:	4b0a      	ldr	r3, [pc, #40]	; (800b2b4 <prvResetNextTaskUnblockTime+0x3c>)
 800b28a:	f04f 32ff 	mov.w	r2, #4294967295
 800b28e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b290:	e008      	b.n	800b2a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b292:	4b07      	ldr	r3, [pc, #28]	; (800b2b0 <prvResetNextTaskUnblockTime+0x38>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	68db      	ldr	r3, [r3, #12]
 800b298:	68db      	ldr	r3, [r3, #12]
 800b29a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	4a04      	ldr	r2, [pc, #16]	; (800b2b4 <prvResetNextTaskUnblockTime+0x3c>)
 800b2a2:	6013      	str	r3, [r2, #0]
}
 800b2a4:	bf00      	nop
 800b2a6:	370c      	adds	r7, #12
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr
 800b2b0:	24004dd0 	.word	0x24004dd0
 800b2b4:	24004e38 	.word	0x24004e38

0800b2b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b083      	sub	sp, #12
 800b2bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b2be:	4b0b      	ldr	r3, [pc, #44]	; (800b2ec <xTaskGetSchedulerState+0x34>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d102      	bne.n	800b2cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	607b      	str	r3, [r7, #4]
 800b2ca:	e008      	b.n	800b2de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2cc:	4b08      	ldr	r3, [pc, #32]	; (800b2f0 <xTaskGetSchedulerState+0x38>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d102      	bne.n	800b2da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b2d4:	2302      	movs	r3, #2
 800b2d6:	607b      	str	r3, [r7, #4]
 800b2d8:	e001      	b.n	800b2de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b2de:	687b      	ldr	r3, [r7, #4]
	}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	370c      	adds	r7, #12
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr
 800b2ec:	24004e24 	.word	0x24004e24
 800b2f0:	24004e40 	.word	0x24004e40

0800b2f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b086      	sub	sp, #24
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b300:	2300      	movs	r3, #0
 800b302:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d056      	beq.n	800b3b8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b30a:	4b2e      	ldr	r3, [pc, #184]	; (800b3c4 <xTaskPriorityDisinherit+0xd0>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	693a      	ldr	r2, [r7, #16]
 800b310:	429a      	cmp	r2, r3
 800b312:	d00a      	beq.n	800b32a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b318:	f383 8811 	msr	BASEPRI, r3
 800b31c:	f3bf 8f6f 	isb	sy
 800b320:	f3bf 8f4f 	dsb	sy
 800b324:	60fb      	str	r3, [r7, #12]
}
 800b326:	bf00      	nop
 800b328:	e7fe      	b.n	800b328 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d10a      	bne.n	800b348 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b336:	f383 8811 	msr	BASEPRI, r3
 800b33a:	f3bf 8f6f 	isb	sy
 800b33e:	f3bf 8f4f 	dsb	sy
 800b342:	60bb      	str	r3, [r7, #8]
}
 800b344:	bf00      	nop
 800b346:	e7fe      	b.n	800b346 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b34c:	1e5a      	subs	r2, r3, #1
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b352:	693b      	ldr	r3, [r7, #16]
 800b354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b356:	693b      	ldr	r3, [r7, #16]
 800b358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b35a:	429a      	cmp	r2, r3
 800b35c:	d02c      	beq.n	800b3b8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b362:	2b00      	cmp	r3, #0
 800b364:	d128      	bne.n	800b3b8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	3304      	adds	r3, #4
 800b36a:	4618      	mov	r0, r3
 800b36c:	f7fe fa2c 	bl	80097c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b378:	693b      	ldr	r3, [r7, #16]
 800b37a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b37c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b388:	4b0f      	ldr	r3, [pc, #60]	; (800b3c8 <xTaskPriorityDisinherit+0xd4>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	429a      	cmp	r2, r3
 800b38e:	d903      	bls.n	800b398 <xTaskPriorityDisinherit+0xa4>
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b394:	4a0c      	ldr	r2, [pc, #48]	; (800b3c8 <xTaskPriorityDisinherit+0xd4>)
 800b396:	6013      	str	r3, [r2, #0]
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b39c:	4613      	mov	r3, r2
 800b39e:	009b      	lsls	r3, r3, #2
 800b3a0:	4413      	add	r3, r2
 800b3a2:	009b      	lsls	r3, r3, #2
 800b3a4:	4a09      	ldr	r2, [pc, #36]	; (800b3cc <xTaskPriorityDisinherit+0xd8>)
 800b3a6:	441a      	add	r2, r3
 800b3a8:	693b      	ldr	r3, [r7, #16]
 800b3aa:	3304      	adds	r3, #4
 800b3ac:	4619      	mov	r1, r3
 800b3ae:	4610      	mov	r0, r2
 800b3b0:	f7fe f9ad 	bl	800970e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b3b8:	697b      	ldr	r3, [r7, #20]
	}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3718      	adds	r7, #24
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}
 800b3c2:	bf00      	nop
 800b3c4:	24004944 	.word	0x24004944
 800b3c8:	24004e20 	.word	0x24004e20
 800b3cc:	24004948 	.word	0x24004948

0800b3d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b084      	sub	sp, #16
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b3da:	4b21      	ldr	r3, [pc, #132]	; (800b460 <prvAddCurrentTaskToDelayedList+0x90>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b3e0:	4b20      	ldr	r3, [pc, #128]	; (800b464 <prvAddCurrentTaskToDelayedList+0x94>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	3304      	adds	r3, #4
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f7fe f9ee 	bl	80097c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3f2:	d10a      	bne.n	800b40a <prvAddCurrentTaskToDelayedList+0x3a>
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d007      	beq.n	800b40a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b3fa:	4b1a      	ldr	r3, [pc, #104]	; (800b464 <prvAddCurrentTaskToDelayedList+0x94>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	3304      	adds	r3, #4
 800b400:	4619      	mov	r1, r3
 800b402:	4819      	ldr	r0, [pc, #100]	; (800b468 <prvAddCurrentTaskToDelayedList+0x98>)
 800b404:	f7fe f983 	bl	800970e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b408:	e026      	b.n	800b458 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b40a:	68fa      	ldr	r2, [r7, #12]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	4413      	add	r3, r2
 800b410:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b412:	4b14      	ldr	r3, [pc, #80]	; (800b464 <prvAddCurrentTaskToDelayedList+0x94>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	68ba      	ldr	r2, [r7, #8]
 800b418:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b41a:	68ba      	ldr	r2, [r7, #8]
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	429a      	cmp	r2, r3
 800b420:	d209      	bcs.n	800b436 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b422:	4b12      	ldr	r3, [pc, #72]	; (800b46c <prvAddCurrentTaskToDelayedList+0x9c>)
 800b424:	681a      	ldr	r2, [r3, #0]
 800b426:	4b0f      	ldr	r3, [pc, #60]	; (800b464 <prvAddCurrentTaskToDelayedList+0x94>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	3304      	adds	r3, #4
 800b42c:	4619      	mov	r1, r3
 800b42e:	4610      	mov	r0, r2
 800b430:	f7fe f991 	bl	8009756 <vListInsert>
}
 800b434:	e010      	b.n	800b458 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b436:	4b0e      	ldr	r3, [pc, #56]	; (800b470 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b438:	681a      	ldr	r2, [r3, #0]
 800b43a:	4b0a      	ldr	r3, [pc, #40]	; (800b464 <prvAddCurrentTaskToDelayedList+0x94>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	3304      	adds	r3, #4
 800b440:	4619      	mov	r1, r3
 800b442:	4610      	mov	r0, r2
 800b444:	f7fe f987 	bl	8009756 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b448:	4b0a      	ldr	r3, [pc, #40]	; (800b474 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	68ba      	ldr	r2, [r7, #8]
 800b44e:	429a      	cmp	r2, r3
 800b450:	d202      	bcs.n	800b458 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b452:	4a08      	ldr	r2, [pc, #32]	; (800b474 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	6013      	str	r3, [r2, #0]
}
 800b458:	bf00      	nop
 800b45a:	3710      	adds	r7, #16
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}
 800b460:	24004e1c 	.word	0x24004e1c
 800b464:	24004944 	.word	0x24004944
 800b468:	24004e04 	.word	0x24004e04
 800b46c:	24004dd4 	.word	0x24004dd4
 800b470:	24004dd0 	.word	0x24004dd0
 800b474:	24004e38 	.word	0x24004e38

0800b478 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b08a      	sub	sp, #40	; 0x28
 800b47c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b47e:	2300      	movs	r3, #0
 800b480:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b482:	f000 fb07 	bl	800ba94 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b486:	4b1c      	ldr	r3, [pc, #112]	; (800b4f8 <xTimerCreateTimerTask+0x80>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d021      	beq.n	800b4d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b48e:	2300      	movs	r3, #0
 800b490:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b492:	2300      	movs	r3, #0
 800b494:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b496:	1d3a      	adds	r2, r7, #4
 800b498:	f107 0108 	add.w	r1, r7, #8
 800b49c:	f107 030c 	add.w	r3, r7, #12
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f7fd ff03 	bl	80092ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b4a6:	6879      	ldr	r1, [r7, #4]
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	68fa      	ldr	r2, [r7, #12]
 800b4ac:	9202      	str	r2, [sp, #8]
 800b4ae:	9301      	str	r3, [sp, #4]
 800b4b0:	2302      	movs	r3, #2
 800b4b2:	9300      	str	r3, [sp, #0]
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	460a      	mov	r2, r1
 800b4b8:	4910      	ldr	r1, [pc, #64]	; (800b4fc <xTimerCreateTimerTask+0x84>)
 800b4ba:	4811      	ldr	r0, [pc, #68]	; (800b500 <xTimerCreateTimerTask+0x88>)
 800b4bc:	f7ff f8e8 	bl	800a690 <xTaskCreateStatic>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	4a10      	ldr	r2, [pc, #64]	; (800b504 <xTimerCreateTimerTask+0x8c>)
 800b4c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b4c6:	4b0f      	ldr	r3, [pc, #60]	; (800b504 <xTimerCreateTimerTask+0x8c>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d001      	beq.n	800b4d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d10a      	bne.n	800b4ee <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4dc:	f383 8811 	msr	BASEPRI, r3
 800b4e0:	f3bf 8f6f 	isb	sy
 800b4e4:	f3bf 8f4f 	dsb	sy
 800b4e8:	613b      	str	r3, [r7, #16]
}
 800b4ea:	bf00      	nop
 800b4ec:	e7fe      	b.n	800b4ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b4ee:	697b      	ldr	r3, [r7, #20]
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3718      	adds	r7, #24
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}
 800b4f8:	24004e74 	.word	0x24004e74
 800b4fc:	0800d508 	.word	0x0800d508
 800b500:	0800b63d 	.word	0x0800b63d
 800b504:	24004e78 	.word	0x24004e78

0800b508 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b08a      	sub	sp, #40	; 0x28
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	60f8      	str	r0, [r7, #12]
 800b510:	60b9      	str	r1, [r7, #8]
 800b512:	607a      	str	r2, [r7, #4]
 800b514:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b516:	2300      	movs	r3, #0
 800b518:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d10a      	bne.n	800b536 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b524:	f383 8811 	msr	BASEPRI, r3
 800b528:	f3bf 8f6f 	isb	sy
 800b52c:	f3bf 8f4f 	dsb	sy
 800b530:	623b      	str	r3, [r7, #32]
}
 800b532:	bf00      	nop
 800b534:	e7fe      	b.n	800b534 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b536:	4b1a      	ldr	r3, [pc, #104]	; (800b5a0 <xTimerGenericCommand+0x98>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d02a      	beq.n	800b594 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	2b05      	cmp	r3, #5
 800b54e:	dc18      	bgt.n	800b582 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b550:	f7ff feb2 	bl	800b2b8 <xTaskGetSchedulerState>
 800b554:	4603      	mov	r3, r0
 800b556:	2b02      	cmp	r3, #2
 800b558:	d109      	bne.n	800b56e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b55a:	4b11      	ldr	r3, [pc, #68]	; (800b5a0 <xTimerGenericCommand+0x98>)
 800b55c:	6818      	ldr	r0, [r3, #0]
 800b55e:	f107 0110 	add.w	r1, r7, #16
 800b562:	2300      	movs	r3, #0
 800b564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b566:	f7fe fcab 	bl	8009ec0 <xQueueGenericSend>
 800b56a:	6278      	str	r0, [r7, #36]	; 0x24
 800b56c:	e012      	b.n	800b594 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b56e:	4b0c      	ldr	r3, [pc, #48]	; (800b5a0 <xTimerGenericCommand+0x98>)
 800b570:	6818      	ldr	r0, [r3, #0]
 800b572:	f107 0110 	add.w	r1, r7, #16
 800b576:	2300      	movs	r3, #0
 800b578:	2200      	movs	r2, #0
 800b57a:	f7fe fca1 	bl	8009ec0 <xQueueGenericSend>
 800b57e:	6278      	str	r0, [r7, #36]	; 0x24
 800b580:	e008      	b.n	800b594 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b582:	4b07      	ldr	r3, [pc, #28]	; (800b5a0 <xTimerGenericCommand+0x98>)
 800b584:	6818      	ldr	r0, [r3, #0]
 800b586:	f107 0110 	add.w	r1, r7, #16
 800b58a:	2300      	movs	r3, #0
 800b58c:	683a      	ldr	r2, [r7, #0]
 800b58e:	f7fe fd95 	bl	800a0bc <xQueueGenericSendFromISR>
 800b592:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b596:	4618      	mov	r0, r3
 800b598:	3728      	adds	r7, #40	; 0x28
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}
 800b59e:	bf00      	nop
 800b5a0:	24004e74 	.word	0x24004e74

0800b5a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b088      	sub	sp, #32
 800b5a8:	af02      	add	r7, sp, #8
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5ae:	4b22      	ldr	r3, [pc, #136]	; (800b638 <prvProcessExpiredTimer+0x94>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	68db      	ldr	r3, [r3, #12]
 800b5b4:	68db      	ldr	r3, [r3, #12]
 800b5b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	3304      	adds	r3, #4
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f7fe f903 	bl	80097c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b5c8:	f003 0304 	and.w	r3, r3, #4
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d022      	beq.n	800b616 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b5d0:	697b      	ldr	r3, [r7, #20]
 800b5d2:	699a      	ldr	r2, [r3, #24]
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	18d1      	adds	r1, r2, r3
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	683a      	ldr	r2, [r7, #0]
 800b5dc:	6978      	ldr	r0, [r7, #20]
 800b5de:	f000 f8d1 	bl	800b784 <prvInsertTimerInActiveList>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d01f      	beq.n	800b628 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	9300      	str	r3, [sp, #0]
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	687a      	ldr	r2, [r7, #4]
 800b5f0:	2100      	movs	r1, #0
 800b5f2:	6978      	ldr	r0, [r7, #20]
 800b5f4:	f7ff ff88 	bl	800b508 <xTimerGenericCommand>
 800b5f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d113      	bne.n	800b628 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b604:	f383 8811 	msr	BASEPRI, r3
 800b608:	f3bf 8f6f 	isb	sy
 800b60c:	f3bf 8f4f 	dsb	sy
 800b610:	60fb      	str	r3, [r7, #12]
}
 800b612:	bf00      	nop
 800b614:	e7fe      	b.n	800b614 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b61c:	f023 0301 	bic.w	r3, r3, #1
 800b620:	b2da      	uxtb	r2, r3
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	6a1b      	ldr	r3, [r3, #32]
 800b62c:	6978      	ldr	r0, [r7, #20]
 800b62e:	4798      	blx	r3
}
 800b630:	bf00      	nop
 800b632:	3718      	adds	r7, #24
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}
 800b638:	24004e6c 	.word	0x24004e6c

0800b63c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b084      	sub	sp, #16
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b644:	f107 0308 	add.w	r3, r7, #8
 800b648:	4618      	mov	r0, r3
 800b64a:	f000 f857 	bl	800b6fc <prvGetNextExpireTime>
 800b64e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	4619      	mov	r1, r3
 800b654:	68f8      	ldr	r0, [r7, #12]
 800b656:	f000 f803 	bl	800b660 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b65a:	f000 f8d5 	bl	800b808 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b65e:	e7f1      	b.n	800b644 <prvTimerTask+0x8>

0800b660 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b084      	sub	sp, #16
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b66a:	f7ff fa39 	bl	800aae0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b66e:	f107 0308 	add.w	r3, r7, #8
 800b672:	4618      	mov	r0, r3
 800b674:	f000 f866 	bl	800b744 <prvSampleTimeNow>
 800b678:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d130      	bne.n	800b6e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d10a      	bne.n	800b69c <prvProcessTimerOrBlockTask+0x3c>
 800b686:	687a      	ldr	r2, [r7, #4]
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	429a      	cmp	r2, r3
 800b68c:	d806      	bhi.n	800b69c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b68e:	f7ff fa35 	bl	800aafc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b692:	68f9      	ldr	r1, [r7, #12]
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f7ff ff85 	bl	800b5a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b69a:	e024      	b.n	800b6e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d008      	beq.n	800b6b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b6a2:	4b13      	ldr	r3, [pc, #76]	; (800b6f0 <prvProcessTimerOrBlockTask+0x90>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d101      	bne.n	800b6b0 <prvProcessTimerOrBlockTask+0x50>
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	e000      	b.n	800b6b2 <prvProcessTimerOrBlockTask+0x52>
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b6b4:	4b0f      	ldr	r3, [pc, #60]	; (800b6f4 <prvProcessTimerOrBlockTask+0x94>)
 800b6b6:	6818      	ldr	r0, [r3, #0]
 800b6b8:	687a      	ldr	r2, [r7, #4]
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	1ad3      	subs	r3, r2, r3
 800b6be:	683a      	ldr	r2, [r7, #0]
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	f7fe ffb1 	bl	800a628 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b6c6:	f7ff fa19 	bl	800aafc <xTaskResumeAll>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d10a      	bne.n	800b6e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b6d0:	4b09      	ldr	r3, [pc, #36]	; (800b6f8 <prvProcessTimerOrBlockTask+0x98>)
 800b6d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6d6:	601a      	str	r2, [r3, #0]
 800b6d8:	f3bf 8f4f 	dsb	sy
 800b6dc:	f3bf 8f6f 	isb	sy
}
 800b6e0:	e001      	b.n	800b6e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b6e2:	f7ff fa0b 	bl	800aafc <xTaskResumeAll>
}
 800b6e6:	bf00      	nop
 800b6e8:	3710      	adds	r7, #16
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
 800b6ee:	bf00      	nop
 800b6f0:	24004e70 	.word	0x24004e70
 800b6f4:	24004e74 	.word	0x24004e74
 800b6f8:	e000ed04 	.word	0xe000ed04

0800b6fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b085      	sub	sp, #20
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b704:	4b0e      	ldr	r3, [pc, #56]	; (800b740 <prvGetNextExpireTime+0x44>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d101      	bne.n	800b712 <prvGetNextExpireTime+0x16>
 800b70e:	2201      	movs	r2, #1
 800b710:	e000      	b.n	800b714 <prvGetNextExpireTime+0x18>
 800b712:	2200      	movs	r2, #0
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d105      	bne.n	800b72c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b720:	4b07      	ldr	r3, [pc, #28]	; (800b740 <prvGetNextExpireTime+0x44>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	68db      	ldr	r3, [r3, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	60fb      	str	r3, [r7, #12]
 800b72a:	e001      	b.n	800b730 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b72c:	2300      	movs	r3, #0
 800b72e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b730:	68fb      	ldr	r3, [r7, #12]
}
 800b732:	4618      	mov	r0, r3
 800b734:	3714      	adds	r7, #20
 800b736:	46bd      	mov	sp, r7
 800b738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73c:	4770      	bx	lr
 800b73e:	bf00      	nop
 800b740:	24004e6c 	.word	0x24004e6c

0800b744 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b084      	sub	sp, #16
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b74c:	f7ff fa74 	bl	800ac38 <xTaskGetTickCount>
 800b750:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b752:	4b0b      	ldr	r3, [pc, #44]	; (800b780 <prvSampleTimeNow+0x3c>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	68fa      	ldr	r2, [r7, #12]
 800b758:	429a      	cmp	r2, r3
 800b75a:	d205      	bcs.n	800b768 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b75c:	f000 f936 	bl	800b9cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2201      	movs	r2, #1
 800b764:	601a      	str	r2, [r3, #0]
 800b766:	e002      	b.n	800b76e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2200      	movs	r2, #0
 800b76c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b76e:	4a04      	ldr	r2, [pc, #16]	; (800b780 <prvSampleTimeNow+0x3c>)
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b774:	68fb      	ldr	r3, [r7, #12]
}
 800b776:	4618      	mov	r0, r3
 800b778:	3710      	adds	r7, #16
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}
 800b77e:	bf00      	nop
 800b780:	24004e7c 	.word	0x24004e7c

0800b784 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b086      	sub	sp, #24
 800b788:	af00      	add	r7, sp, #0
 800b78a:	60f8      	str	r0, [r7, #12]
 800b78c:	60b9      	str	r1, [r7, #8]
 800b78e:	607a      	str	r2, [r7, #4]
 800b790:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b792:	2300      	movs	r3, #0
 800b794:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	68ba      	ldr	r2, [r7, #8]
 800b79a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	68fa      	ldr	r2, [r7, #12]
 800b7a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b7a2:	68ba      	ldr	r2, [r7, #8]
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	d812      	bhi.n	800b7d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7aa:	687a      	ldr	r2, [r7, #4]
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	1ad2      	subs	r2, r2, r3
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	699b      	ldr	r3, [r3, #24]
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d302      	bcc.n	800b7be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	617b      	str	r3, [r7, #20]
 800b7bc:	e01b      	b.n	800b7f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b7be:	4b10      	ldr	r3, [pc, #64]	; (800b800 <prvInsertTimerInActiveList+0x7c>)
 800b7c0:	681a      	ldr	r2, [r3, #0]
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	3304      	adds	r3, #4
 800b7c6:	4619      	mov	r1, r3
 800b7c8:	4610      	mov	r0, r2
 800b7ca:	f7fd ffc4 	bl	8009756 <vListInsert>
 800b7ce:	e012      	b.n	800b7f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b7d0:	687a      	ldr	r2, [r7, #4]
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	d206      	bcs.n	800b7e6 <prvInsertTimerInActiveList+0x62>
 800b7d8:	68ba      	ldr	r2, [r7, #8]
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	429a      	cmp	r2, r3
 800b7de:	d302      	bcc.n	800b7e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	617b      	str	r3, [r7, #20]
 800b7e4:	e007      	b.n	800b7f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b7e6:	4b07      	ldr	r3, [pc, #28]	; (800b804 <prvInsertTimerInActiveList+0x80>)
 800b7e8:	681a      	ldr	r2, [r3, #0]
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	3304      	adds	r3, #4
 800b7ee:	4619      	mov	r1, r3
 800b7f0:	4610      	mov	r0, r2
 800b7f2:	f7fd ffb0 	bl	8009756 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b7f6:	697b      	ldr	r3, [r7, #20]
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3718      	adds	r7, #24
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}
 800b800:	24004e70 	.word	0x24004e70
 800b804:	24004e6c 	.word	0x24004e6c

0800b808 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b08e      	sub	sp, #56	; 0x38
 800b80c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b80e:	e0ca      	b.n	800b9a6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2b00      	cmp	r3, #0
 800b814:	da18      	bge.n	800b848 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b816:	1d3b      	adds	r3, r7, #4
 800b818:	3304      	adds	r3, #4
 800b81a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d10a      	bne.n	800b838 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b826:	f383 8811 	msr	BASEPRI, r3
 800b82a:	f3bf 8f6f 	isb	sy
 800b82e:	f3bf 8f4f 	dsb	sy
 800b832:	61fb      	str	r3, [r7, #28]
}
 800b834:	bf00      	nop
 800b836:	e7fe      	b.n	800b836 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b83e:	6850      	ldr	r0, [r2, #4]
 800b840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b842:	6892      	ldr	r2, [r2, #8]
 800b844:	4611      	mov	r1, r2
 800b846:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	f2c0 80aa 	blt.w	800b9a4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b856:	695b      	ldr	r3, [r3, #20]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d004      	beq.n	800b866 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b85e:	3304      	adds	r3, #4
 800b860:	4618      	mov	r0, r3
 800b862:	f7fd ffb1 	bl	80097c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b866:	463b      	mov	r3, r7
 800b868:	4618      	mov	r0, r3
 800b86a:	f7ff ff6b 	bl	800b744 <prvSampleTimeNow>
 800b86e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2b09      	cmp	r3, #9
 800b874:	f200 8097 	bhi.w	800b9a6 <prvProcessReceivedCommands+0x19e>
 800b878:	a201      	add	r2, pc, #4	; (adr r2, 800b880 <prvProcessReceivedCommands+0x78>)
 800b87a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b87e:	bf00      	nop
 800b880:	0800b8a9 	.word	0x0800b8a9
 800b884:	0800b8a9 	.word	0x0800b8a9
 800b888:	0800b8a9 	.word	0x0800b8a9
 800b88c:	0800b91d 	.word	0x0800b91d
 800b890:	0800b931 	.word	0x0800b931
 800b894:	0800b97b 	.word	0x0800b97b
 800b898:	0800b8a9 	.word	0x0800b8a9
 800b89c:	0800b8a9 	.word	0x0800b8a9
 800b8a0:	0800b91d 	.word	0x0800b91d
 800b8a4:	0800b931 	.word	0x0800b931
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8ae:	f043 0301 	orr.w	r3, r3, #1
 800b8b2:	b2da      	uxtb	r2, r3
 800b8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b8ba:	68ba      	ldr	r2, [r7, #8]
 800b8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8be:	699b      	ldr	r3, [r3, #24]
 800b8c0:	18d1      	adds	r1, r2, r3
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8c8:	f7ff ff5c 	bl	800b784 <prvInsertTimerInActiveList>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d069      	beq.n	800b9a6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d4:	6a1b      	ldr	r3, [r3, #32]
 800b8d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8e0:	f003 0304 	and.w	r3, r3, #4
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d05e      	beq.n	800b9a6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b8e8:	68ba      	ldr	r2, [r7, #8]
 800b8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ec:	699b      	ldr	r3, [r3, #24]
 800b8ee:	441a      	add	r2, r3
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	9300      	str	r3, [sp, #0]
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	2100      	movs	r1, #0
 800b8f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8fa:	f7ff fe05 	bl	800b508 <xTimerGenericCommand>
 800b8fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b900:	6a3b      	ldr	r3, [r7, #32]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d14f      	bne.n	800b9a6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b90a:	f383 8811 	msr	BASEPRI, r3
 800b90e:	f3bf 8f6f 	isb	sy
 800b912:	f3bf 8f4f 	dsb	sy
 800b916:	61bb      	str	r3, [r7, #24]
}
 800b918:	bf00      	nop
 800b91a:	e7fe      	b.n	800b91a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b91e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b922:	f023 0301 	bic.w	r3, r3, #1
 800b926:	b2da      	uxtb	r2, r3
 800b928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b92a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b92e:	e03a      	b.n	800b9a6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b932:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b936:	f043 0301 	orr.w	r3, r3, #1
 800b93a:	b2da      	uxtb	r2, r3
 800b93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b93e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b942:	68ba      	ldr	r2, [r7, #8]
 800b944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b946:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b94a:	699b      	ldr	r3, [r3, #24]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d10a      	bne.n	800b966 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b954:	f383 8811 	msr	BASEPRI, r3
 800b958:	f3bf 8f6f 	isb	sy
 800b95c:	f3bf 8f4f 	dsb	sy
 800b960:	617b      	str	r3, [r7, #20]
}
 800b962:	bf00      	nop
 800b964:	e7fe      	b.n	800b964 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b968:	699a      	ldr	r2, [r3, #24]
 800b96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96c:	18d1      	adds	r1, r2, r3
 800b96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b972:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b974:	f7ff ff06 	bl	800b784 <prvInsertTimerInActiveList>
					break;
 800b978:	e015      	b.n	800b9a6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b97c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b980:	f003 0302 	and.w	r3, r3, #2
 800b984:	2b00      	cmp	r3, #0
 800b986:	d103      	bne.n	800b990 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b988:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b98a:	f7fd fd75 	bl	8009478 <vPortFree>
 800b98e:	e00a      	b.n	800b9a6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b992:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b996:	f023 0301 	bic.w	r3, r3, #1
 800b99a:	b2da      	uxtb	r2, r3
 800b99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b99e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b9a2:	e000      	b.n	800b9a6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b9a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b9a6:	4b08      	ldr	r3, [pc, #32]	; (800b9c8 <prvProcessReceivedCommands+0x1c0>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	1d39      	adds	r1, r7, #4
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f7fe fc20 	bl	800a1f4 <xQueueReceive>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	f47f af2a 	bne.w	800b810 <prvProcessReceivedCommands+0x8>
	}
}
 800b9bc:	bf00      	nop
 800b9be:	bf00      	nop
 800b9c0:	3730      	adds	r7, #48	; 0x30
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}
 800b9c6:	bf00      	nop
 800b9c8:	24004e74 	.word	0x24004e74

0800b9cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b088      	sub	sp, #32
 800b9d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b9d2:	e048      	b.n	800ba66 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b9d4:	4b2d      	ldr	r3, [pc, #180]	; (800ba8c <prvSwitchTimerLists+0xc0>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	68db      	ldr	r3, [r3, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9de:	4b2b      	ldr	r3, [pc, #172]	; (800ba8c <prvSwitchTimerLists+0xc0>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	68db      	ldr	r3, [r3, #12]
 800b9e4:	68db      	ldr	r3, [r3, #12]
 800b9e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	3304      	adds	r3, #4
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f7fd feeb 	bl	80097c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	6a1b      	ldr	r3, [r3, #32]
 800b9f6:	68f8      	ldr	r0, [r7, #12]
 800b9f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba00:	f003 0304 	and.w	r3, r3, #4
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d02e      	beq.n	800ba66 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	699b      	ldr	r3, [r3, #24]
 800ba0c:	693a      	ldr	r2, [r7, #16]
 800ba0e:	4413      	add	r3, r2
 800ba10:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ba12:	68ba      	ldr	r2, [r7, #8]
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d90e      	bls.n	800ba38 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	68ba      	ldr	r2, [r7, #8]
 800ba1e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	68fa      	ldr	r2, [r7, #12]
 800ba24:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ba26:	4b19      	ldr	r3, [pc, #100]	; (800ba8c <prvSwitchTimerLists+0xc0>)
 800ba28:	681a      	ldr	r2, [r3, #0]
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	3304      	adds	r3, #4
 800ba2e:	4619      	mov	r1, r3
 800ba30:	4610      	mov	r0, r2
 800ba32:	f7fd fe90 	bl	8009756 <vListInsert>
 800ba36:	e016      	b.n	800ba66 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ba38:	2300      	movs	r3, #0
 800ba3a:	9300      	str	r3, [sp, #0]
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	693a      	ldr	r2, [r7, #16]
 800ba40:	2100      	movs	r1, #0
 800ba42:	68f8      	ldr	r0, [r7, #12]
 800ba44:	f7ff fd60 	bl	800b508 <xTimerGenericCommand>
 800ba48:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d10a      	bne.n	800ba66 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ba50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba54:	f383 8811 	msr	BASEPRI, r3
 800ba58:	f3bf 8f6f 	isb	sy
 800ba5c:	f3bf 8f4f 	dsb	sy
 800ba60:	603b      	str	r3, [r7, #0]
}
 800ba62:	bf00      	nop
 800ba64:	e7fe      	b.n	800ba64 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ba66:	4b09      	ldr	r3, [pc, #36]	; (800ba8c <prvSwitchTimerLists+0xc0>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d1b1      	bne.n	800b9d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ba70:	4b06      	ldr	r3, [pc, #24]	; (800ba8c <prvSwitchTimerLists+0xc0>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ba76:	4b06      	ldr	r3, [pc, #24]	; (800ba90 <prvSwitchTimerLists+0xc4>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	4a04      	ldr	r2, [pc, #16]	; (800ba8c <prvSwitchTimerLists+0xc0>)
 800ba7c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ba7e:	4a04      	ldr	r2, [pc, #16]	; (800ba90 <prvSwitchTimerLists+0xc4>)
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	6013      	str	r3, [r2, #0]
}
 800ba84:	bf00      	nop
 800ba86:	3718      	adds	r7, #24
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}
 800ba8c:	24004e6c 	.word	0x24004e6c
 800ba90:	24004e70 	.word	0x24004e70

0800ba94 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b082      	sub	sp, #8
 800ba98:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ba9a:	f7fd ffeb 	bl	8009a74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ba9e:	4b15      	ldr	r3, [pc, #84]	; (800baf4 <prvCheckForValidListAndQueue+0x60>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d120      	bne.n	800bae8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800baa6:	4814      	ldr	r0, [pc, #80]	; (800baf8 <prvCheckForValidListAndQueue+0x64>)
 800baa8:	f7fd fe04 	bl	80096b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800baac:	4813      	ldr	r0, [pc, #76]	; (800bafc <prvCheckForValidListAndQueue+0x68>)
 800baae:	f7fd fe01 	bl	80096b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bab2:	4b13      	ldr	r3, [pc, #76]	; (800bb00 <prvCheckForValidListAndQueue+0x6c>)
 800bab4:	4a10      	ldr	r2, [pc, #64]	; (800baf8 <prvCheckForValidListAndQueue+0x64>)
 800bab6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bab8:	4b12      	ldr	r3, [pc, #72]	; (800bb04 <prvCheckForValidListAndQueue+0x70>)
 800baba:	4a10      	ldr	r2, [pc, #64]	; (800bafc <prvCheckForValidListAndQueue+0x68>)
 800babc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800babe:	2300      	movs	r3, #0
 800bac0:	9300      	str	r3, [sp, #0]
 800bac2:	4b11      	ldr	r3, [pc, #68]	; (800bb08 <prvCheckForValidListAndQueue+0x74>)
 800bac4:	4a11      	ldr	r2, [pc, #68]	; (800bb0c <prvCheckForValidListAndQueue+0x78>)
 800bac6:	2110      	movs	r1, #16
 800bac8:	200a      	movs	r0, #10
 800baca:	f7fe f95d 	bl	8009d88 <xQueueGenericCreateStatic>
 800bace:	4603      	mov	r3, r0
 800bad0:	4a08      	ldr	r2, [pc, #32]	; (800baf4 <prvCheckForValidListAndQueue+0x60>)
 800bad2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bad4:	4b07      	ldr	r3, [pc, #28]	; (800baf4 <prvCheckForValidListAndQueue+0x60>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d005      	beq.n	800bae8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800badc:	4b05      	ldr	r3, [pc, #20]	; (800baf4 <prvCheckForValidListAndQueue+0x60>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	490b      	ldr	r1, [pc, #44]	; (800bb10 <prvCheckForValidListAndQueue+0x7c>)
 800bae2:	4618      	mov	r0, r3
 800bae4:	f7fe fd76 	bl	800a5d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bae8:	f7fd fff4 	bl	8009ad4 <vPortExitCritical>
}
 800baec:	bf00      	nop
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}
 800baf2:	bf00      	nop
 800baf4:	24004e74 	.word	0x24004e74
 800baf8:	24004e44 	.word	0x24004e44
 800bafc:	24004e58 	.word	0x24004e58
 800bb00:	24004e6c 	.word	0x24004e6c
 800bb04:	24004e70 	.word	0x24004e70
 800bb08:	24004f20 	.word	0x24004f20
 800bb0c:	24004e80 	.word	0x24004e80
 800bb10:	0800d510 	.word	0x0800d510

0800bb14 <__errno>:
 800bb14:	4b01      	ldr	r3, [pc, #4]	; (800bb1c <__errno+0x8>)
 800bb16:	6818      	ldr	r0, [r3, #0]
 800bb18:	4770      	bx	lr
 800bb1a:	bf00      	nop
 800bb1c:	2400001c 	.word	0x2400001c

0800bb20 <std>:
 800bb20:	2300      	movs	r3, #0
 800bb22:	b510      	push	{r4, lr}
 800bb24:	4604      	mov	r4, r0
 800bb26:	e9c0 3300 	strd	r3, r3, [r0]
 800bb2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb2e:	6083      	str	r3, [r0, #8]
 800bb30:	8181      	strh	r1, [r0, #12]
 800bb32:	6643      	str	r3, [r0, #100]	; 0x64
 800bb34:	81c2      	strh	r2, [r0, #14]
 800bb36:	6183      	str	r3, [r0, #24]
 800bb38:	4619      	mov	r1, r3
 800bb3a:	2208      	movs	r2, #8
 800bb3c:	305c      	adds	r0, #92	; 0x5c
 800bb3e:	f000 f91a 	bl	800bd76 <memset>
 800bb42:	4b05      	ldr	r3, [pc, #20]	; (800bb58 <std+0x38>)
 800bb44:	6263      	str	r3, [r4, #36]	; 0x24
 800bb46:	4b05      	ldr	r3, [pc, #20]	; (800bb5c <std+0x3c>)
 800bb48:	62a3      	str	r3, [r4, #40]	; 0x28
 800bb4a:	4b05      	ldr	r3, [pc, #20]	; (800bb60 <std+0x40>)
 800bb4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bb4e:	4b05      	ldr	r3, [pc, #20]	; (800bb64 <std+0x44>)
 800bb50:	6224      	str	r4, [r4, #32]
 800bb52:	6323      	str	r3, [r4, #48]	; 0x30
 800bb54:	bd10      	pop	{r4, pc}
 800bb56:	bf00      	nop
 800bb58:	0800c015 	.word	0x0800c015
 800bb5c:	0800c037 	.word	0x0800c037
 800bb60:	0800c06f 	.word	0x0800c06f
 800bb64:	0800c093 	.word	0x0800c093

0800bb68 <_cleanup_r>:
 800bb68:	4901      	ldr	r1, [pc, #4]	; (800bb70 <_cleanup_r+0x8>)
 800bb6a:	f000 b8af 	b.w	800bccc <_fwalk_reent>
 800bb6e:	bf00      	nop
 800bb70:	0800c1ed 	.word	0x0800c1ed

0800bb74 <__sfmoreglue>:
 800bb74:	b570      	push	{r4, r5, r6, lr}
 800bb76:	2268      	movs	r2, #104	; 0x68
 800bb78:	1e4d      	subs	r5, r1, #1
 800bb7a:	4355      	muls	r5, r2
 800bb7c:	460e      	mov	r6, r1
 800bb7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bb82:	f000 f921 	bl	800bdc8 <_malloc_r>
 800bb86:	4604      	mov	r4, r0
 800bb88:	b140      	cbz	r0, 800bb9c <__sfmoreglue+0x28>
 800bb8a:	2100      	movs	r1, #0
 800bb8c:	e9c0 1600 	strd	r1, r6, [r0]
 800bb90:	300c      	adds	r0, #12
 800bb92:	60a0      	str	r0, [r4, #8]
 800bb94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bb98:	f000 f8ed 	bl	800bd76 <memset>
 800bb9c:	4620      	mov	r0, r4
 800bb9e:	bd70      	pop	{r4, r5, r6, pc}

0800bba0 <__sfp_lock_acquire>:
 800bba0:	4801      	ldr	r0, [pc, #4]	; (800bba8 <__sfp_lock_acquire+0x8>)
 800bba2:	f000 b8d8 	b.w	800bd56 <__retarget_lock_acquire_recursive>
 800bba6:	bf00      	nop
 800bba8:	24004f71 	.word	0x24004f71

0800bbac <__sfp_lock_release>:
 800bbac:	4801      	ldr	r0, [pc, #4]	; (800bbb4 <__sfp_lock_release+0x8>)
 800bbae:	f000 b8d3 	b.w	800bd58 <__retarget_lock_release_recursive>
 800bbb2:	bf00      	nop
 800bbb4:	24004f71 	.word	0x24004f71

0800bbb8 <__sinit_lock_acquire>:
 800bbb8:	4801      	ldr	r0, [pc, #4]	; (800bbc0 <__sinit_lock_acquire+0x8>)
 800bbba:	f000 b8cc 	b.w	800bd56 <__retarget_lock_acquire_recursive>
 800bbbe:	bf00      	nop
 800bbc0:	24004f72 	.word	0x24004f72

0800bbc4 <__sinit_lock_release>:
 800bbc4:	4801      	ldr	r0, [pc, #4]	; (800bbcc <__sinit_lock_release+0x8>)
 800bbc6:	f000 b8c7 	b.w	800bd58 <__retarget_lock_release_recursive>
 800bbca:	bf00      	nop
 800bbcc:	24004f72 	.word	0x24004f72

0800bbd0 <__sinit>:
 800bbd0:	b510      	push	{r4, lr}
 800bbd2:	4604      	mov	r4, r0
 800bbd4:	f7ff fff0 	bl	800bbb8 <__sinit_lock_acquire>
 800bbd8:	69a3      	ldr	r3, [r4, #24]
 800bbda:	b11b      	cbz	r3, 800bbe4 <__sinit+0x14>
 800bbdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbe0:	f7ff bff0 	b.w	800bbc4 <__sinit_lock_release>
 800bbe4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bbe8:	6523      	str	r3, [r4, #80]	; 0x50
 800bbea:	4b13      	ldr	r3, [pc, #76]	; (800bc38 <__sinit+0x68>)
 800bbec:	4a13      	ldr	r2, [pc, #76]	; (800bc3c <__sinit+0x6c>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	62a2      	str	r2, [r4, #40]	; 0x28
 800bbf2:	42a3      	cmp	r3, r4
 800bbf4:	bf04      	itt	eq
 800bbf6:	2301      	moveq	r3, #1
 800bbf8:	61a3      	streq	r3, [r4, #24]
 800bbfa:	4620      	mov	r0, r4
 800bbfc:	f000 f820 	bl	800bc40 <__sfp>
 800bc00:	6060      	str	r0, [r4, #4]
 800bc02:	4620      	mov	r0, r4
 800bc04:	f000 f81c 	bl	800bc40 <__sfp>
 800bc08:	60a0      	str	r0, [r4, #8]
 800bc0a:	4620      	mov	r0, r4
 800bc0c:	f000 f818 	bl	800bc40 <__sfp>
 800bc10:	2200      	movs	r2, #0
 800bc12:	60e0      	str	r0, [r4, #12]
 800bc14:	2104      	movs	r1, #4
 800bc16:	6860      	ldr	r0, [r4, #4]
 800bc18:	f7ff ff82 	bl	800bb20 <std>
 800bc1c:	68a0      	ldr	r0, [r4, #8]
 800bc1e:	2201      	movs	r2, #1
 800bc20:	2109      	movs	r1, #9
 800bc22:	f7ff ff7d 	bl	800bb20 <std>
 800bc26:	68e0      	ldr	r0, [r4, #12]
 800bc28:	2202      	movs	r2, #2
 800bc2a:	2112      	movs	r1, #18
 800bc2c:	f7ff ff78 	bl	800bb20 <std>
 800bc30:	2301      	movs	r3, #1
 800bc32:	61a3      	str	r3, [r4, #24]
 800bc34:	e7d2      	b.n	800bbdc <__sinit+0xc>
 800bc36:	bf00      	nop
 800bc38:	0800d5e4 	.word	0x0800d5e4
 800bc3c:	0800bb69 	.word	0x0800bb69

0800bc40 <__sfp>:
 800bc40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc42:	4607      	mov	r7, r0
 800bc44:	f7ff ffac 	bl	800bba0 <__sfp_lock_acquire>
 800bc48:	4b1e      	ldr	r3, [pc, #120]	; (800bcc4 <__sfp+0x84>)
 800bc4a:	681e      	ldr	r6, [r3, #0]
 800bc4c:	69b3      	ldr	r3, [r6, #24]
 800bc4e:	b913      	cbnz	r3, 800bc56 <__sfp+0x16>
 800bc50:	4630      	mov	r0, r6
 800bc52:	f7ff ffbd 	bl	800bbd0 <__sinit>
 800bc56:	3648      	adds	r6, #72	; 0x48
 800bc58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bc5c:	3b01      	subs	r3, #1
 800bc5e:	d503      	bpl.n	800bc68 <__sfp+0x28>
 800bc60:	6833      	ldr	r3, [r6, #0]
 800bc62:	b30b      	cbz	r3, 800bca8 <__sfp+0x68>
 800bc64:	6836      	ldr	r6, [r6, #0]
 800bc66:	e7f7      	b.n	800bc58 <__sfp+0x18>
 800bc68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bc6c:	b9d5      	cbnz	r5, 800bca4 <__sfp+0x64>
 800bc6e:	4b16      	ldr	r3, [pc, #88]	; (800bcc8 <__sfp+0x88>)
 800bc70:	60e3      	str	r3, [r4, #12]
 800bc72:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bc76:	6665      	str	r5, [r4, #100]	; 0x64
 800bc78:	f000 f86c 	bl	800bd54 <__retarget_lock_init_recursive>
 800bc7c:	f7ff ff96 	bl	800bbac <__sfp_lock_release>
 800bc80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bc84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bc88:	6025      	str	r5, [r4, #0]
 800bc8a:	61a5      	str	r5, [r4, #24]
 800bc8c:	2208      	movs	r2, #8
 800bc8e:	4629      	mov	r1, r5
 800bc90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bc94:	f000 f86f 	bl	800bd76 <memset>
 800bc98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bc9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bca0:	4620      	mov	r0, r4
 800bca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bca4:	3468      	adds	r4, #104	; 0x68
 800bca6:	e7d9      	b.n	800bc5c <__sfp+0x1c>
 800bca8:	2104      	movs	r1, #4
 800bcaa:	4638      	mov	r0, r7
 800bcac:	f7ff ff62 	bl	800bb74 <__sfmoreglue>
 800bcb0:	4604      	mov	r4, r0
 800bcb2:	6030      	str	r0, [r6, #0]
 800bcb4:	2800      	cmp	r0, #0
 800bcb6:	d1d5      	bne.n	800bc64 <__sfp+0x24>
 800bcb8:	f7ff ff78 	bl	800bbac <__sfp_lock_release>
 800bcbc:	230c      	movs	r3, #12
 800bcbe:	603b      	str	r3, [r7, #0]
 800bcc0:	e7ee      	b.n	800bca0 <__sfp+0x60>
 800bcc2:	bf00      	nop
 800bcc4:	0800d5e4 	.word	0x0800d5e4
 800bcc8:	ffff0001 	.word	0xffff0001

0800bccc <_fwalk_reent>:
 800bccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcd0:	4606      	mov	r6, r0
 800bcd2:	4688      	mov	r8, r1
 800bcd4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bcd8:	2700      	movs	r7, #0
 800bcda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bcde:	f1b9 0901 	subs.w	r9, r9, #1
 800bce2:	d505      	bpl.n	800bcf0 <_fwalk_reent+0x24>
 800bce4:	6824      	ldr	r4, [r4, #0]
 800bce6:	2c00      	cmp	r4, #0
 800bce8:	d1f7      	bne.n	800bcda <_fwalk_reent+0xe>
 800bcea:	4638      	mov	r0, r7
 800bcec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcf0:	89ab      	ldrh	r3, [r5, #12]
 800bcf2:	2b01      	cmp	r3, #1
 800bcf4:	d907      	bls.n	800bd06 <_fwalk_reent+0x3a>
 800bcf6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bcfa:	3301      	adds	r3, #1
 800bcfc:	d003      	beq.n	800bd06 <_fwalk_reent+0x3a>
 800bcfe:	4629      	mov	r1, r5
 800bd00:	4630      	mov	r0, r6
 800bd02:	47c0      	blx	r8
 800bd04:	4307      	orrs	r7, r0
 800bd06:	3568      	adds	r5, #104	; 0x68
 800bd08:	e7e9      	b.n	800bcde <_fwalk_reent+0x12>
	...

0800bd0c <__libc_init_array>:
 800bd0c:	b570      	push	{r4, r5, r6, lr}
 800bd0e:	4d0d      	ldr	r5, [pc, #52]	; (800bd44 <__libc_init_array+0x38>)
 800bd10:	4c0d      	ldr	r4, [pc, #52]	; (800bd48 <__libc_init_array+0x3c>)
 800bd12:	1b64      	subs	r4, r4, r5
 800bd14:	10a4      	asrs	r4, r4, #2
 800bd16:	2600      	movs	r6, #0
 800bd18:	42a6      	cmp	r6, r4
 800bd1a:	d109      	bne.n	800bd30 <__libc_init_array+0x24>
 800bd1c:	4d0b      	ldr	r5, [pc, #44]	; (800bd4c <__libc_init_array+0x40>)
 800bd1e:	4c0c      	ldr	r4, [pc, #48]	; (800bd50 <__libc_init_array+0x44>)
 800bd20:	f001 f900 	bl	800cf24 <_init>
 800bd24:	1b64      	subs	r4, r4, r5
 800bd26:	10a4      	asrs	r4, r4, #2
 800bd28:	2600      	movs	r6, #0
 800bd2a:	42a6      	cmp	r6, r4
 800bd2c:	d105      	bne.n	800bd3a <__libc_init_array+0x2e>
 800bd2e:	bd70      	pop	{r4, r5, r6, pc}
 800bd30:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd34:	4798      	blx	r3
 800bd36:	3601      	adds	r6, #1
 800bd38:	e7ee      	b.n	800bd18 <__libc_init_array+0xc>
 800bd3a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd3e:	4798      	blx	r3
 800bd40:	3601      	adds	r6, #1
 800bd42:	e7f2      	b.n	800bd2a <__libc_init_array+0x1e>
 800bd44:	0800d624 	.word	0x0800d624
 800bd48:	0800d624 	.word	0x0800d624
 800bd4c:	0800d624 	.word	0x0800d624
 800bd50:	0800d628 	.word	0x0800d628

0800bd54 <__retarget_lock_init_recursive>:
 800bd54:	4770      	bx	lr

0800bd56 <__retarget_lock_acquire_recursive>:
 800bd56:	4770      	bx	lr

0800bd58 <__retarget_lock_release_recursive>:
 800bd58:	4770      	bx	lr

0800bd5a <memcpy>:
 800bd5a:	440a      	add	r2, r1
 800bd5c:	4291      	cmp	r1, r2
 800bd5e:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd62:	d100      	bne.n	800bd66 <memcpy+0xc>
 800bd64:	4770      	bx	lr
 800bd66:	b510      	push	{r4, lr}
 800bd68:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd70:	4291      	cmp	r1, r2
 800bd72:	d1f9      	bne.n	800bd68 <memcpy+0xe>
 800bd74:	bd10      	pop	{r4, pc}

0800bd76 <memset>:
 800bd76:	4402      	add	r2, r0
 800bd78:	4603      	mov	r3, r0
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d100      	bne.n	800bd80 <memset+0xa>
 800bd7e:	4770      	bx	lr
 800bd80:	f803 1b01 	strb.w	r1, [r3], #1
 800bd84:	e7f9      	b.n	800bd7a <memset+0x4>
	...

0800bd88 <sbrk_aligned>:
 800bd88:	b570      	push	{r4, r5, r6, lr}
 800bd8a:	4e0e      	ldr	r6, [pc, #56]	; (800bdc4 <sbrk_aligned+0x3c>)
 800bd8c:	460c      	mov	r4, r1
 800bd8e:	6831      	ldr	r1, [r6, #0]
 800bd90:	4605      	mov	r5, r0
 800bd92:	b911      	cbnz	r1, 800bd9a <sbrk_aligned+0x12>
 800bd94:	f000 f90e 	bl	800bfb4 <_sbrk_r>
 800bd98:	6030      	str	r0, [r6, #0]
 800bd9a:	4621      	mov	r1, r4
 800bd9c:	4628      	mov	r0, r5
 800bd9e:	f000 f909 	bl	800bfb4 <_sbrk_r>
 800bda2:	1c43      	adds	r3, r0, #1
 800bda4:	d00a      	beq.n	800bdbc <sbrk_aligned+0x34>
 800bda6:	1cc4      	adds	r4, r0, #3
 800bda8:	f024 0403 	bic.w	r4, r4, #3
 800bdac:	42a0      	cmp	r0, r4
 800bdae:	d007      	beq.n	800bdc0 <sbrk_aligned+0x38>
 800bdb0:	1a21      	subs	r1, r4, r0
 800bdb2:	4628      	mov	r0, r5
 800bdb4:	f000 f8fe 	bl	800bfb4 <_sbrk_r>
 800bdb8:	3001      	adds	r0, #1
 800bdba:	d101      	bne.n	800bdc0 <sbrk_aligned+0x38>
 800bdbc:	f04f 34ff 	mov.w	r4, #4294967295
 800bdc0:	4620      	mov	r0, r4
 800bdc2:	bd70      	pop	{r4, r5, r6, pc}
 800bdc4:	24004f78 	.word	0x24004f78

0800bdc8 <_malloc_r>:
 800bdc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdcc:	1ccd      	adds	r5, r1, #3
 800bdce:	f025 0503 	bic.w	r5, r5, #3
 800bdd2:	3508      	adds	r5, #8
 800bdd4:	2d0c      	cmp	r5, #12
 800bdd6:	bf38      	it	cc
 800bdd8:	250c      	movcc	r5, #12
 800bdda:	2d00      	cmp	r5, #0
 800bddc:	4607      	mov	r7, r0
 800bdde:	db01      	blt.n	800bde4 <_malloc_r+0x1c>
 800bde0:	42a9      	cmp	r1, r5
 800bde2:	d905      	bls.n	800bdf0 <_malloc_r+0x28>
 800bde4:	230c      	movs	r3, #12
 800bde6:	603b      	str	r3, [r7, #0]
 800bde8:	2600      	movs	r6, #0
 800bdea:	4630      	mov	r0, r6
 800bdec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdf0:	4e2e      	ldr	r6, [pc, #184]	; (800beac <_malloc_r+0xe4>)
 800bdf2:	f000 fa49 	bl	800c288 <__malloc_lock>
 800bdf6:	6833      	ldr	r3, [r6, #0]
 800bdf8:	461c      	mov	r4, r3
 800bdfa:	bb34      	cbnz	r4, 800be4a <_malloc_r+0x82>
 800bdfc:	4629      	mov	r1, r5
 800bdfe:	4638      	mov	r0, r7
 800be00:	f7ff ffc2 	bl	800bd88 <sbrk_aligned>
 800be04:	1c43      	adds	r3, r0, #1
 800be06:	4604      	mov	r4, r0
 800be08:	d14d      	bne.n	800bea6 <_malloc_r+0xde>
 800be0a:	6834      	ldr	r4, [r6, #0]
 800be0c:	4626      	mov	r6, r4
 800be0e:	2e00      	cmp	r6, #0
 800be10:	d140      	bne.n	800be94 <_malloc_r+0xcc>
 800be12:	6823      	ldr	r3, [r4, #0]
 800be14:	4631      	mov	r1, r6
 800be16:	4638      	mov	r0, r7
 800be18:	eb04 0803 	add.w	r8, r4, r3
 800be1c:	f000 f8ca 	bl	800bfb4 <_sbrk_r>
 800be20:	4580      	cmp	r8, r0
 800be22:	d13a      	bne.n	800be9a <_malloc_r+0xd2>
 800be24:	6821      	ldr	r1, [r4, #0]
 800be26:	3503      	adds	r5, #3
 800be28:	1a6d      	subs	r5, r5, r1
 800be2a:	f025 0503 	bic.w	r5, r5, #3
 800be2e:	3508      	adds	r5, #8
 800be30:	2d0c      	cmp	r5, #12
 800be32:	bf38      	it	cc
 800be34:	250c      	movcc	r5, #12
 800be36:	4629      	mov	r1, r5
 800be38:	4638      	mov	r0, r7
 800be3a:	f7ff ffa5 	bl	800bd88 <sbrk_aligned>
 800be3e:	3001      	adds	r0, #1
 800be40:	d02b      	beq.n	800be9a <_malloc_r+0xd2>
 800be42:	6823      	ldr	r3, [r4, #0]
 800be44:	442b      	add	r3, r5
 800be46:	6023      	str	r3, [r4, #0]
 800be48:	e00e      	b.n	800be68 <_malloc_r+0xa0>
 800be4a:	6822      	ldr	r2, [r4, #0]
 800be4c:	1b52      	subs	r2, r2, r5
 800be4e:	d41e      	bmi.n	800be8e <_malloc_r+0xc6>
 800be50:	2a0b      	cmp	r2, #11
 800be52:	d916      	bls.n	800be82 <_malloc_r+0xba>
 800be54:	1961      	adds	r1, r4, r5
 800be56:	42a3      	cmp	r3, r4
 800be58:	6025      	str	r5, [r4, #0]
 800be5a:	bf18      	it	ne
 800be5c:	6059      	strne	r1, [r3, #4]
 800be5e:	6863      	ldr	r3, [r4, #4]
 800be60:	bf08      	it	eq
 800be62:	6031      	streq	r1, [r6, #0]
 800be64:	5162      	str	r2, [r4, r5]
 800be66:	604b      	str	r3, [r1, #4]
 800be68:	4638      	mov	r0, r7
 800be6a:	f104 060b 	add.w	r6, r4, #11
 800be6e:	f000 fa11 	bl	800c294 <__malloc_unlock>
 800be72:	f026 0607 	bic.w	r6, r6, #7
 800be76:	1d23      	adds	r3, r4, #4
 800be78:	1af2      	subs	r2, r6, r3
 800be7a:	d0b6      	beq.n	800bdea <_malloc_r+0x22>
 800be7c:	1b9b      	subs	r3, r3, r6
 800be7e:	50a3      	str	r3, [r4, r2]
 800be80:	e7b3      	b.n	800bdea <_malloc_r+0x22>
 800be82:	6862      	ldr	r2, [r4, #4]
 800be84:	42a3      	cmp	r3, r4
 800be86:	bf0c      	ite	eq
 800be88:	6032      	streq	r2, [r6, #0]
 800be8a:	605a      	strne	r2, [r3, #4]
 800be8c:	e7ec      	b.n	800be68 <_malloc_r+0xa0>
 800be8e:	4623      	mov	r3, r4
 800be90:	6864      	ldr	r4, [r4, #4]
 800be92:	e7b2      	b.n	800bdfa <_malloc_r+0x32>
 800be94:	4634      	mov	r4, r6
 800be96:	6876      	ldr	r6, [r6, #4]
 800be98:	e7b9      	b.n	800be0e <_malloc_r+0x46>
 800be9a:	230c      	movs	r3, #12
 800be9c:	603b      	str	r3, [r7, #0]
 800be9e:	4638      	mov	r0, r7
 800bea0:	f000 f9f8 	bl	800c294 <__malloc_unlock>
 800bea4:	e7a1      	b.n	800bdea <_malloc_r+0x22>
 800bea6:	6025      	str	r5, [r4, #0]
 800bea8:	e7de      	b.n	800be68 <_malloc_r+0xa0>
 800beaa:	bf00      	nop
 800beac:	24004f74 	.word	0x24004f74

0800beb0 <iprintf>:
 800beb0:	b40f      	push	{r0, r1, r2, r3}
 800beb2:	4b0a      	ldr	r3, [pc, #40]	; (800bedc <iprintf+0x2c>)
 800beb4:	b513      	push	{r0, r1, r4, lr}
 800beb6:	681c      	ldr	r4, [r3, #0]
 800beb8:	b124      	cbz	r4, 800bec4 <iprintf+0x14>
 800beba:	69a3      	ldr	r3, [r4, #24]
 800bebc:	b913      	cbnz	r3, 800bec4 <iprintf+0x14>
 800bebe:	4620      	mov	r0, r4
 800bec0:	f7ff fe86 	bl	800bbd0 <__sinit>
 800bec4:	ab05      	add	r3, sp, #20
 800bec6:	9a04      	ldr	r2, [sp, #16]
 800bec8:	68a1      	ldr	r1, [r4, #8]
 800beca:	9301      	str	r3, [sp, #4]
 800becc:	4620      	mov	r0, r4
 800bece:	f000 fbb9 	bl	800c644 <_vfiprintf_r>
 800bed2:	b002      	add	sp, #8
 800bed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bed8:	b004      	add	sp, #16
 800beda:	4770      	bx	lr
 800bedc:	2400001c 	.word	0x2400001c

0800bee0 <cleanup_glue>:
 800bee0:	b538      	push	{r3, r4, r5, lr}
 800bee2:	460c      	mov	r4, r1
 800bee4:	6809      	ldr	r1, [r1, #0]
 800bee6:	4605      	mov	r5, r0
 800bee8:	b109      	cbz	r1, 800beee <cleanup_glue+0xe>
 800beea:	f7ff fff9 	bl	800bee0 <cleanup_glue>
 800beee:	4621      	mov	r1, r4
 800bef0:	4628      	mov	r0, r5
 800bef2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bef6:	f000 b9d3 	b.w	800c2a0 <_free_r>
	...

0800befc <_reclaim_reent>:
 800befc:	4b2c      	ldr	r3, [pc, #176]	; (800bfb0 <_reclaim_reent+0xb4>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	4283      	cmp	r3, r0
 800bf02:	b570      	push	{r4, r5, r6, lr}
 800bf04:	4604      	mov	r4, r0
 800bf06:	d051      	beq.n	800bfac <_reclaim_reent+0xb0>
 800bf08:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bf0a:	b143      	cbz	r3, 800bf1e <_reclaim_reent+0x22>
 800bf0c:	68db      	ldr	r3, [r3, #12]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d14a      	bne.n	800bfa8 <_reclaim_reent+0xac>
 800bf12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf14:	6819      	ldr	r1, [r3, #0]
 800bf16:	b111      	cbz	r1, 800bf1e <_reclaim_reent+0x22>
 800bf18:	4620      	mov	r0, r4
 800bf1a:	f000 f9c1 	bl	800c2a0 <_free_r>
 800bf1e:	6961      	ldr	r1, [r4, #20]
 800bf20:	b111      	cbz	r1, 800bf28 <_reclaim_reent+0x2c>
 800bf22:	4620      	mov	r0, r4
 800bf24:	f000 f9bc 	bl	800c2a0 <_free_r>
 800bf28:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bf2a:	b111      	cbz	r1, 800bf32 <_reclaim_reent+0x36>
 800bf2c:	4620      	mov	r0, r4
 800bf2e:	f000 f9b7 	bl	800c2a0 <_free_r>
 800bf32:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bf34:	b111      	cbz	r1, 800bf3c <_reclaim_reent+0x40>
 800bf36:	4620      	mov	r0, r4
 800bf38:	f000 f9b2 	bl	800c2a0 <_free_r>
 800bf3c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bf3e:	b111      	cbz	r1, 800bf46 <_reclaim_reent+0x4a>
 800bf40:	4620      	mov	r0, r4
 800bf42:	f000 f9ad 	bl	800c2a0 <_free_r>
 800bf46:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bf48:	b111      	cbz	r1, 800bf50 <_reclaim_reent+0x54>
 800bf4a:	4620      	mov	r0, r4
 800bf4c:	f000 f9a8 	bl	800c2a0 <_free_r>
 800bf50:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800bf52:	b111      	cbz	r1, 800bf5a <_reclaim_reent+0x5e>
 800bf54:	4620      	mov	r0, r4
 800bf56:	f000 f9a3 	bl	800c2a0 <_free_r>
 800bf5a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800bf5c:	b111      	cbz	r1, 800bf64 <_reclaim_reent+0x68>
 800bf5e:	4620      	mov	r0, r4
 800bf60:	f000 f99e 	bl	800c2a0 <_free_r>
 800bf64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf66:	b111      	cbz	r1, 800bf6e <_reclaim_reent+0x72>
 800bf68:	4620      	mov	r0, r4
 800bf6a:	f000 f999 	bl	800c2a0 <_free_r>
 800bf6e:	69a3      	ldr	r3, [r4, #24]
 800bf70:	b1e3      	cbz	r3, 800bfac <_reclaim_reent+0xb0>
 800bf72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bf74:	4620      	mov	r0, r4
 800bf76:	4798      	blx	r3
 800bf78:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bf7a:	b1b9      	cbz	r1, 800bfac <_reclaim_reent+0xb0>
 800bf7c:	4620      	mov	r0, r4
 800bf7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bf82:	f7ff bfad 	b.w	800bee0 <cleanup_glue>
 800bf86:	5949      	ldr	r1, [r1, r5]
 800bf88:	b941      	cbnz	r1, 800bf9c <_reclaim_reent+0xa0>
 800bf8a:	3504      	adds	r5, #4
 800bf8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf8e:	2d80      	cmp	r5, #128	; 0x80
 800bf90:	68d9      	ldr	r1, [r3, #12]
 800bf92:	d1f8      	bne.n	800bf86 <_reclaim_reent+0x8a>
 800bf94:	4620      	mov	r0, r4
 800bf96:	f000 f983 	bl	800c2a0 <_free_r>
 800bf9a:	e7ba      	b.n	800bf12 <_reclaim_reent+0x16>
 800bf9c:	680e      	ldr	r6, [r1, #0]
 800bf9e:	4620      	mov	r0, r4
 800bfa0:	f000 f97e 	bl	800c2a0 <_free_r>
 800bfa4:	4631      	mov	r1, r6
 800bfa6:	e7ef      	b.n	800bf88 <_reclaim_reent+0x8c>
 800bfa8:	2500      	movs	r5, #0
 800bfaa:	e7ef      	b.n	800bf8c <_reclaim_reent+0x90>
 800bfac:	bd70      	pop	{r4, r5, r6, pc}
 800bfae:	bf00      	nop
 800bfb0:	2400001c 	.word	0x2400001c

0800bfb4 <_sbrk_r>:
 800bfb4:	b538      	push	{r3, r4, r5, lr}
 800bfb6:	4d06      	ldr	r5, [pc, #24]	; (800bfd0 <_sbrk_r+0x1c>)
 800bfb8:	2300      	movs	r3, #0
 800bfba:	4604      	mov	r4, r0
 800bfbc:	4608      	mov	r0, r1
 800bfbe:	602b      	str	r3, [r5, #0]
 800bfc0:	f7f6 fc5a 	bl	8002878 <_sbrk>
 800bfc4:	1c43      	adds	r3, r0, #1
 800bfc6:	d102      	bne.n	800bfce <_sbrk_r+0x1a>
 800bfc8:	682b      	ldr	r3, [r5, #0]
 800bfca:	b103      	cbz	r3, 800bfce <_sbrk_r+0x1a>
 800bfcc:	6023      	str	r3, [r4, #0]
 800bfce:	bd38      	pop	{r3, r4, r5, pc}
 800bfd0:	24004f7c 	.word	0x24004f7c

0800bfd4 <siprintf>:
 800bfd4:	b40e      	push	{r1, r2, r3}
 800bfd6:	b500      	push	{lr}
 800bfd8:	b09c      	sub	sp, #112	; 0x70
 800bfda:	ab1d      	add	r3, sp, #116	; 0x74
 800bfdc:	9002      	str	r0, [sp, #8]
 800bfde:	9006      	str	r0, [sp, #24]
 800bfe0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bfe4:	4809      	ldr	r0, [pc, #36]	; (800c00c <siprintf+0x38>)
 800bfe6:	9107      	str	r1, [sp, #28]
 800bfe8:	9104      	str	r1, [sp, #16]
 800bfea:	4909      	ldr	r1, [pc, #36]	; (800c010 <siprintf+0x3c>)
 800bfec:	f853 2b04 	ldr.w	r2, [r3], #4
 800bff0:	9105      	str	r1, [sp, #20]
 800bff2:	6800      	ldr	r0, [r0, #0]
 800bff4:	9301      	str	r3, [sp, #4]
 800bff6:	a902      	add	r1, sp, #8
 800bff8:	f000 f9fa 	bl	800c3f0 <_svfiprintf_r>
 800bffc:	9b02      	ldr	r3, [sp, #8]
 800bffe:	2200      	movs	r2, #0
 800c000:	701a      	strb	r2, [r3, #0]
 800c002:	b01c      	add	sp, #112	; 0x70
 800c004:	f85d eb04 	ldr.w	lr, [sp], #4
 800c008:	b003      	add	sp, #12
 800c00a:	4770      	bx	lr
 800c00c:	2400001c 	.word	0x2400001c
 800c010:	ffff0208 	.word	0xffff0208

0800c014 <__sread>:
 800c014:	b510      	push	{r4, lr}
 800c016:	460c      	mov	r4, r1
 800c018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c01c:	f000 fdd6 	bl	800cbcc <_read_r>
 800c020:	2800      	cmp	r0, #0
 800c022:	bfab      	itete	ge
 800c024:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c026:	89a3      	ldrhlt	r3, [r4, #12]
 800c028:	181b      	addge	r3, r3, r0
 800c02a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c02e:	bfac      	ite	ge
 800c030:	6563      	strge	r3, [r4, #84]	; 0x54
 800c032:	81a3      	strhlt	r3, [r4, #12]
 800c034:	bd10      	pop	{r4, pc}

0800c036 <__swrite>:
 800c036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c03a:	461f      	mov	r7, r3
 800c03c:	898b      	ldrh	r3, [r1, #12]
 800c03e:	05db      	lsls	r3, r3, #23
 800c040:	4605      	mov	r5, r0
 800c042:	460c      	mov	r4, r1
 800c044:	4616      	mov	r6, r2
 800c046:	d505      	bpl.n	800c054 <__swrite+0x1e>
 800c048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c04c:	2302      	movs	r3, #2
 800c04e:	2200      	movs	r2, #0
 800c050:	f000 f908 	bl	800c264 <_lseek_r>
 800c054:	89a3      	ldrh	r3, [r4, #12]
 800c056:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c05a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c05e:	81a3      	strh	r3, [r4, #12]
 800c060:	4632      	mov	r2, r6
 800c062:	463b      	mov	r3, r7
 800c064:	4628      	mov	r0, r5
 800c066:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c06a:	f000 b817 	b.w	800c09c <_write_r>

0800c06e <__sseek>:
 800c06e:	b510      	push	{r4, lr}
 800c070:	460c      	mov	r4, r1
 800c072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c076:	f000 f8f5 	bl	800c264 <_lseek_r>
 800c07a:	1c43      	adds	r3, r0, #1
 800c07c:	89a3      	ldrh	r3, [r4, #12]
 800c07e:	bf15      	itete	ne
 800c080:	6560      	strne	r0, [r4, #84]	; 0x54
 800c082:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c086:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c08a:	81a3      	strheq	r3, [r4, #12]
 800c08c:	bf18      	it	ne
 800c08e:	81a3      	strhne	r3, [r4, #12]
 800c090:	bd10      	pop	{r4, pc}

0800c092 <__sclose>:
 800c092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c096:	f000 b813 	b.w	800c0c0 <_close_r>
	...

0800c09c <_write_r>:
 800c09c:	b538      	push	{r3, r4, r5, lr}
 800c09e:	4d07      	ldr	r5, [pc, #28]	; (800c0bc <_write_r+0x20>)
 800c0a0:	4604      	mov	r4, r0
 800c0a2:	4608      	mov	r0, r1
 800c0a4:	4611      	mov	r1, r2
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	602a      	str	r2, [r5, #0]
 800c0aa:	461a      	mov	r2, r3
 800c0ac:	f7f6 fb93 	bl	80027d6 <_write>
 800c0b0:	1c43      	adds	r3, r0, #1
 800c0b2:	d102      	bne.n	800c0ba <_write_r+0x1e>
 800c0b4:	682b      	ldr	r3, [r5, #0]
 800c0b6:	b103      	cbz	r3, 800c0ba <_write_r+0x1e>
 800c0b8:	6023      	str	r3, [r4, #0]
 800c0ba:	bd38      	pop	{r3, r4, r5, pc}
 800c0bc:	24004f7c 	.word	0x24004f7c

0800c0c0 <_close_r>:
 800c0c0:	b538      	push	{r3, r4, r5, lr}
 800c0c2:	4d06      	ldr	r5, [pc, #24]	; (800c0dc <_close_r+0x1c>)
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	4604      	mov	r4, r0
 800c0c8:	4608      	mov	r0, r1
 800c0ca:	602b      	str	r3, [r5, #0]
 800c0cc:	f7f6 fb9f 	bl	800280e <_close>
 800c0d0:	1c43      	adds	r3, r0, #1
 800c0d2:	d102      	bne.n	800c0da <_close_r+0x1a>
 800c0d4:	682b      	ldr	r3, [r5, #0]
 800c0d6:	b103      	cbz	r3, 800c0da <_close_r+0x1a>
 800c0d8:	6023      	str	r3, [r4, #0]
 800c0da:	bd38      	pop	{r3, r4, r5, pc}
 800c0dc:	24004f7c 	.word	0x24004f7c

0800c0e0 <__sflush_r>:
 800c0e0:	898a      	ldrh	r2, [r1, #12]
 800c0e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0e6:	4605      	mov	r5, r0
 800c0e8:	0710      	lsls	r0, r2, #28
 800c0ea:	460c      	mov	r4, r1
 800c0ec:	d458      	bmi.n	800c1a0 <__sflush_r+0xc0>
 800c0ee:	684b      	ldr	r3, [r1, #4]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	dc05      	bgt.n	800c100 <__sflush_r+0x20>
 800c0f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	dc02      	bgt.n	800c100 <__sflush_r+0x20>
 800c0fa:	2000      	movs	r0, #0
 800c0fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c100:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c102:	2e00      	cmp	r6, #0
 800c104:	d0f9      	beq.n	800c0fa <__sflush_r+0x1a>
 800c106:	2300      	movs	r3, #0
 800c108:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c10c:	682f      	ldr	r7, [r5, #0]
 800c10e:	602b      	str	r3, [r5, #0]
 800c110:	d032      	beq.n	800c178 <__sflush_r+0x98>
 800c112:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c114:	89a3      	ldrh	r3, [r4, #12]
 800c116:	075a      	lsls	r2, r3, #29
 800c118:	d505      	bpl.n	800c126 <__sflush_r+0x46>
 800c11a:	6863      	ldr	r3, [r4, #4]
 800c11c:	1ac0      	subs	r0, r0, r3
 800c11e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c120:	b10b      	cbz	r3, 800c126 <__sflush_r+0x46>
 800c122:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c124:	1ac0      	subs	r0, r0, r3
 800c126:	2300      	movs	r3, #0
 800c128:	4602      	mov	r2, r0
 800c12a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c12c:	6a21      	ldr	r1, [r4, #32]
 800c12e:	4628      	mov	r0, r5
 800c130:	47b0      	blx	r6
 800c132:	1c43      	adds	r3, r0, #1
 800c134:	89a3      	ldrh	r3, [r4, #12]
 800c136:	d106      	bne.n	800c146 <__sflush_r+0x66>
 800c138:	6829      	ldr	r1, [r5, #0]
 800c13a:	291d      	cmp	r1, #29
 800c13c:	d82c      	bhi.n	800c198 <__sflush_r+0xb8>
 800c13e:	4a2a      	ldr	r2, [pc, #168]	; (800c1e8 <__sflush_r+0x108>)
 800c140:	40ca      	lsrs	r2, r1
 800c142:	07d6      	lsls	r6, r2, #31
 800c144:	d528      	bpl.n	800c198 <__sflush_r+0xb8>
 800c146:	2200      	movs	r2, #0
 800c148:	6062      	str	r2, [r4, #4]
 800c14a:	04d9      	lsls	r1, r3, #19
 800c14c:	6922      	ldr	r2, [r4, #16]
 800c14e:	6022      	str	r2, [r4, #0]
 800c150:	d504      	bpl.n	800c15c <__sflush_r+0x7c>
 800c152:	1c42      	adds	r2, r0, #1
 800c154:	d101      	bne.n	800c15a <__sflush_r+0x7a>
 800c156:	682b      	ldr	r3, [r5, #0]
 800c158:	b903      	cbnz	r3, 800c15c <__sflush_r+0x7c>
 800c15a:	6560      	str	r0, [r4, #84]	; 0x54
 800c15c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c15e:	602f      	str	r7, [r5, #0]
 800c160:	2900      	cmp	r1, #0
 800c162:	d0ca      	beq.n	800c0fa <__sflush_r+0x1a>
 800c164:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c168:	4299      	cmp	r1, r3
 800c16a:	d002      	beq.n	800c172 <__sflush_r+0x92>
 800c16c:	4628      	mov	r0, r5
 800c16e:	f000 f897 	bl	800c2a0 <_free_r>
 800c172:	2000      	movs	r0, #0
 800c174:	6360      	str	r0, [r4, #52]	; 0x34
 800c176:	e7c1      	b.n	800c0fc <__sflush_r+0x1c>
 800c178:	6a21      	ldr	r1, [r4, #32]
 800c17a:	2301      	movs	r3, #1
 800c17c:	4628      	mov	r0, r5
 800c17e:	47b0      	blx	r6
 800c180:	1c41      	adds	r1, r0, #1
 800c182:	d1c7      	bne.n	800c114 <__sflush_r+0x34>
 800c184:	682b      	ldr	r3, [r5, #0]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d0c4      	beq.n	800c114 <__sflush_r+0x34>
 800c18a:	2b1d      	cmp	r3, #29
 800c18c:	d001      	beq.n	800c192 <__sflush_r+0xb2>
 800c18e:	2b16      	cmp	r3, #22
 800c190:	d101      	bne.n	800c196 <__sflush_r+0xb6>
 800c192:	602f      	str	r7, [r5, #0]
 800c194:	e7b1      	b.n	800c0fa <__sflush_r+0x1a>
 800c196:	89a3      	ldrh	r3, [r4, #12]
 800c198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c19c:	81a3      	strh	r3, [r4, #12]
 800c19e:	e7ad      	b.n	800c0fc <__sflush_r+0x1c>
 800c1a0:	690f      	ldr	r7, [r1, #16]
 800c1a2:	2f00      	cmp	r7, #0
 800c1a4:	d0a9      	beq.n	800c0fa <__sflush_r+0x1a>
 800c1a6:	0793      	lsls	r3, r2, #30
 800c1a8:	680e      	ldr	r6, [r1, #0]
 800c1aa:	bf08      	it	eq
 800c1ac:	694b      	ldreq	r3, [r1, #20]
 800c1ae:	600f      	str	r7, [r1, #0]
 800c1b0:	bf18      	it	ne
 800c1b2:	2300      	movne	r3, #0
 800c1b4:	eba6 0807 	sub.w	r8, r6, r7
 800c1b8:	608b      	str	r3, [r1, #8]
 800c1ba:	f1b8 0f00 	cmp.w	r8, #0
 800c1be:	dd9c      	ble.n	800c0fa <__sflush_r+0x1a>
 800c1c0:	6a21      	ldr	r1, [r4, #32]
 800c1c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c1c4:	4643      	mov	r3, r8
 800c1c6:	463a      	mov	r2, r7
 800c1c8:	4628      	mov	r0, r5
 800c1ca:	47b0      	blx	r6
 800c1cc:	2800      	cmp	r0, #0
 800c1ce:	dc06      	bgt.n	800c1de <__sflush_r+0xfe>
 800c1d0:	89a3      	ldrh	r3, [r4, #12]
 800c1d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1d6:	81a3      	strh	r3, [r4, #12]
 800c1d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c1dc:	e78e      	b.n	800c0fc <__sflush_r+0x1c>
 800c1de:	4407      	add	r7, r0
 800c1e0:	eba8 0800 	sub.w	r8, r8, r0
 800c1e4:	e7e9      	b.n	800c1ba <__sflush_r+0xda>
 800c1e6:	bf00      	nop
 800c1e8:	20400001 	.word	0x20400001

0800c1ec <_fflush_r>:
 800c1ec:	b538      	push	{r3, r4, r5, lr}
 800c1ee:	690b      	ldr	r3, [r1, #16]
 800c1f0:	4605      	mov	r5, r0
 800c1f2:	460c      	mov	r4, r1
 800c1f4:	b913      	cbnz	r3, 800c1fc <_fflush_r+0x10>
 800c1f6:	2500      	movs	r5, #0
 800c1f8:	4628      	mov	r0, r5
 800c1fa:	bd38      	pop	{r3, r4, r5, pc}
 800c1fc:	b118      	cbz	r0, 800c206 <_fflush_r+0x1a>
 800c1fe:	6983      	ldr	r3, [r0, #24]
 800c200:	b90b      	cbnz	r3, 800c206 <_fflush_r+0x1a>
 800c202:	f7ff fce5 	bl	800bbd0 <__sinit>
 800c206:	4b14      	ldr	r3, [pc, #80]	; (800c258 <_fflush_r+0x6c>)
 800c208:	429c      	cmp	r4, r3
 800c20a:	d11b      	bne.n	800c244 <_fflush_r+0x58>
 800c20c:	686c      	ldr	r4, [r5, #4]
 800c20e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d0ef      	beq.n	800c1f6 <_fflush_r+0xa>
 800c216:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c218:	07d0      	lsls	r0, r2, #31
 800c21a:	d404      	bmi.n	800c226 <_fflush_r+0x3a>
 800c21c:	0599      	lsls	r1, r3, #22
 800c21e:	d402      	bmi.n	800c226 <_fflush_r+0x3a>
 800c220:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c222:	f7ff fd98 	bl	800bd56 <__retarget_lock_acquire_recursive>
 800c226:	4628      	mov	r0, r5
 800c228:	4621      	mov	r1, r4
 800c22a:	f7ff ff59 	bl	800c0e0 <__sflush_r>
 800c22e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c230:	07da      	lsls	r2, r3, #31
 800c232:	4605      	mov	r5, r0
 800c234:	d4e0      	bmi.n	800c1f8 <_fflush_r+0xc>
 800c236:	89a3      	ldrh	r3, [r4, #12]
 800c238:	059b      	lsls	r3, r3, #22
 800c23a:	d4dd      	bmi.n	800c1f8 <_fflush_r+0xc>
 800c23c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c23e:	f7ff fd8b 	bl	800bd58 <__retarget_lock_release_recursive>
 800c242:	e7d9      	b.n	800c1f8 <_fflush_r+0xc>
 800c244:	4b05      	ldr	r3, [pc, #20]	; (800c25c <_fflush_r+0x70>)
 800c246:	429c      	cmp	r4, r3
 800c248:	d101      	bne.n	800c24e <_fflush_r+0x62>
 800c24a:	68ac      	ldr	r4, [r5, #8]
 800c24c:	e7df      	b.n	800c20e <_fflush_r+0x22>
 800c24e:	4b04      	ldr	r3, [pc, #16]	; (800c260 <_fflush_r+0x74>)
 800c250:	429c      	cmp	r4, r3
 800c252:	bf08      	it	eq
 800c254:	68ec      	ldreq	r4, [r5, #12]
 800c256:	e7da      	b.n	800c20e <_fflush_r+0x22>
 800c258:	0800d5a4 	.word	0x0800d5a4
 800c25c:	0800d5c4 	.word	0x0800d5c4
 800c260:	0800d584 	.word	0x0800d584

0800c264 <_lseek_r>:
 800c264:	b538      	push	{r3, r4, r5, lr}
 800c266:	4d07      	ldr	r5, [pc, #28]	; (800c284 <_lseek_r+0x20>)
 800c268:	4604      	mov	r4, r0
 800c26a:	4608      	mov	r0, r1
 800c26c:	4611      	mov	r1, r2
 800c26e:	2200      	movs	r2, #0
 800c270:	602a      	str	r2, [r5, #0]
 800c272:	461a      	mov	r2, r3
 800c274:	f7f6 faf2 	bl	800285c <_lseek>
 800c278:	1c43      	adds	r3, r0, #1
 800c27a:	d102      	bne.n	800c282 <_lseek_r+0x1e>
 800c27c:	682b      	ldr	r3, [r5, #0]
 800c27e:	b103      	cbz	r3, 800c282 <_lseek_r+0x1e>
 800c280:	6023      	str	r3, [r4, #0]
 800c282:	bd38      	pop	{r3, r4, r5, pc}
 800c284:	24004f7c 	.word	0x24004f7c

0800c288 <__malloc_lock>:
 800c288:	4801      	ldr	r0, [pc, #4]	; (800c290 <__malloc_lock+0x8>)
 800c28a:	f7ff bd64 	b.w	800bd56 <__retarget_lock_acquire_recursive>
 800c28e:	bf00      	nop
 800c290:	24004f70 	.word	0x24004f70

0800c294 <__malloc_unlock>:
 800c294:	4801      	ldr	r0, [pc, #4]	; (800c29c <__malloc_unlock+0x8>)
 800c296:	f7ff bd5f 	b.w	800bd58 <__retarget_lock_release_recursive>
 800c29a:	bf00      	nop
 800c29c:	24004f70 	.word	0x24004f70

0800c2a0 <_free_r>:
 800c2a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c2a2:	2900      	cmp	r1, #0
 800c2a4:	d044      	beq.n	800c330 <_free_r+0x90>
 800c2a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2aa:	9001      	str	r0, [sp, #4]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	f1a1 0404 	sub.w	r4, r1, #4
 800c2b2:	bfb8      	it	lt
 800c2b4:	18e4      	addlt	r4, r4, r3
 800c2b6:	f7ff ffe7 	bl	800c288 <__malloc_lock>
 800c2ba:	4a1e      	ldr	r2, [pc, #120]	; (800c334 <_free_r+0x94>)
 800c2bc:	9801      	ldr	r0, [sp, #4]
 800c2be:	6813      	ldr	r3, [r2, #0]
 800c2c0:	b933      	cbnz	r3, 800c2d0 <_free_r+0x30>
 800c2c2:	6063      	str	r3, [r4, #4]
 800c2c4:	6014      	str	r4, [r2, #0]
 800c2c6:	b003      	add	sp, #12
 800c2c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c2cc:	f7ff bfe2 	b.w	800c294 <__malloc_unlock>
 800c2d0:	42a3      	cmp	r3, r4
 800c2d2:	d908      	bls.n	800c2e6 <_free_r+0x46>
 800c2d4:	6825      	ldr	r5, [r4, #0]
 800c2d6:	1961      	adds	r1, r4, r5
 800c2d8:	428b      	cmp	r3, r1
 800c2da:	bf01      	itttt	eq
 800c2dc:	6819      	ldreq	r1, [r3, #0]
 800c2de:	685b      	ldreq	r3, [r3, #4]
 800c2e0:	1949      	addeq	r1, r1, r5
 800c2e2:	6021      	streq	r1, [r4, #0]
 800c2e4:	e7ed      	b.n	800c2c2 <_free_r+0x22>
 800c2e6:	461a      	mov	r2, r3
 800c2e8:	685b      	ldr	r3, [r3, #4]
 800c2ea:	b10b      	cbz	r3, 800c2f0 <_free_r+0x50>
 800c2ec:	42a3      	cmp	r3, r4
 800c2ee:	d9fa      	bls.n	800c2e6 <_free_r+0x46>
 800c2f0:	6811      	ldr	r1, [r2, #0]
 800c2f2:	1855      	adds	r5, r2, r1
 800c2f4:	42a5      	cmp	r5, r4
 800c2f6:	d10b      	bne.n	800c310 <_free_r+0x70>
 800c2f8:	6824      	ldr	r4, [r4, #0]
 800c2fa:	4421      	add	r1, r4
 800c2fc:	1854      	adds	r4, r2, r1
 800c2fe:	42a3      	cmp	r3, r4
 800c300:	6011      	str	r1, [r2, #0]
 800c302:	d1e0      	bne.n	800c2c6 <_free_r+0x26>
 800c304:	681c      	ldr	r4, [r3, #0]
 800c306:	685b      	ldr	r3, [r3, #4]
 800c308:	6053      	str	r3, [r2, #4]
 800c30a:	4421      	add	r1, r4
 800c30c:	6011      	str	r1, [r2, #0]
 800c30e:	e7da      	b.n	800c2c6 <_free_r+0x26>
 800c310:	d902      	bls.n	800c318 <_free_r+0x78>
 800c312:	230c      	movs	r3, #12
 800c314:	6003      	str	r3, [r0, #0]
 800c316:	e7d6      	b.n	800c2c6 <_free_r+0x26>
 800c318:	6825      	ldr	r5, [r4, #0]
 800c31a:	1961      	adds	r1, r4, r5
 800c31c:	428b      	cmp	r3, r1
 800c31e:	bf04      	itt	eq
 800c320:	6819      	ldreq	r1, [r3, #0]
 800c322:	685b      	ldreq	r3, [r3, #4]
 800c324:	6063      	str	r3, [r4, #4]
 800c326:	bf04      	itt	eq
 800c328:	1949      	addeq	r1, r1, r5
 800c32a:	6021      	streq	r1, [r4, #0]
 800c32c:	6054      	str	r4, [r2, #4]
 800c32e:	e7ca      	b.n	800c2c6 <_free_r+0x26>
 800c330:	b003      	add	sp, #12
 800c332:	bd30      	pop	{r4, r5, pc}
 800c334:	24004f74 	.word	0x24004f74

0800c338 <__ssputs_r>:
 800c338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c33c:	688e      	ldr	r6, [r1, #8]
 800c33e:	429e      	cmp	r6, r3
 800c340:	4682      	mov	sl, r0
 800c342:	460c      	mov	r4, r1
 800c344:	4690      	mov	r8, r2
 800c346:	461f      	mov	r7, r3
 800c348:	d838      	bhi.n	800c3bc <__ssputs_r+0x84>
 800c34a:	898a      	ldrh	r2, [r1, #12]
 800c34c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c350:	d032      	beq.n	800c3b8 <__ssputs_r+0x80>
 800c352:	6825      	ldr	r5, [r4, #0]
 800c354:	6909      	ldr	r1, [r1, #16]
 800c356:	eba5 0901 	sub.w	r9, r5, r1
 800c35a:	6965      	ldr	r5, [r4, #20]
 800c35c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c360:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c364:	3301      	adds	r3, #1
 800c366:	444b      	add	r3, r9
 800c368:	106d      	asrs	r5, r5, #1
 800c36a:	429d      	cmp	r5, r3
 800c36c:	bf38      	it	cc
 800c36e:	461d      	movcc	r5, r3
 800c370:	0553      	lsls	r3, r2, #21
 800c372:	d531      	bpl.n	800c3d8 <__ssputs_r+0xa0>
 800c374:	4629      	mov	r1, r5
 800c376:	f7ff fd27 	bl	800bdc8 <_malloc_r>
 800c37a:	4606      	mov	r6, r0
 800c37c:	b950      	cbnz	r0, 800c394 <__ssputs_r+0x5c>
 800c37e:	230c      	movs	r3, #12
 800c380:	f8ca 3000 	str.w	r3, [sl]
 800c384:	89a3      	ldrh	r3, [r4, #12]
 800c386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c38a:	81a3      	strh	r3, [r4, #12]
 800c38c:	f04f 30ff 	mov.w	r0, #4294967295
 800c390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c394:	6921      	ldr	r1, [r4, #16]
 800c396:	464a      	mov	r2, r9
 800c398:	f7ff fcdf 	bl	800bd5a <memcpy>
 800c39c:	89a3      	ldrh	r3, [r4, #12]
 800c39e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c3a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3a6:	81a3      	strh	r3, [r4, #12]
 800c3a8:	6126      	str	r6, [r4, #16]
 800c3aa:	6165      	str	r5, [r4, #20]
 800c3ac:	444e      	add	r6, r9
 800c3ae:	eba5 0509 	sub.w	r5, r5, r9
 800c3b2:	6026      	str	r6, [r4, #0]
 800c3b4:	60a5      	str	r5, [r4, #8]
 800c3b6:	463e      	mov	r6, r7
 800c3b8:	42be      	cmp	r6, r7
 800c3ba:	d900      	bls.n	800c3be <__ssputs_r+0x86>
 800c3bc:	463e      	mov	r6, r7
 800c3be:	6820      	ldr	r0, [r4, #0]
 800c3c0:	4632      	mov	r2, r6
 800c3c2:	4641      	mov	r1, r8
 800c3c4:	f000 fd3a 	bl	800ce3c <memmove>
 800c3c8:	68a3      	ldr	r3, [r4, #8]
 800c3ca:	1b9b      	subs	r3, r3, r6
 800c3cc:	60a3      	str	r3, [r4, #8]
 800c3ce:	6823      	ldr	r3, [r4, #0]
 800c3d0:	4433      	add	r3, r6
 800c3d2:	6023      	str	r3, [r4, #0]
 800c3d4:	2000      	movs	r0, #0
 800c3d6:	e7db      	b.n	800c390 <__ssputs_r+0x58>
 800c3d8:	462a      	mov	r2, r5
 800c3da:	f000 fd49 	bl	800ce70 <_realloc_r>
 800c3de:	4606      	mov	r6, r0
 800c3e0:	2800      	cmp	r0, #0
 800c3e2:	d1e1      	bne.n	800c3a8 <__ssputs_r+0x70>
 800c3e4:	6921      	ldr	r1, [r4, #16]
 800c3e6:	4650      	mov	r0, sl
 800c3e8:	f7ff ff5a 	bl	800c2a0 <_free_r>
 800c3ec:	e7c7      	b.n	800c37e <__ssputs_r+0x46>
	...

0800c3f0 <_svfiprintf_r>:
 800c3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3f4:	4698      	mov	r8, r3
 800c3f6:	898b      	ldrh	r3, [r1, #12]
 800c3f8:	061b      	lsls	r3, r3, #24
 800c3fa:	b09d      	sub	sp, #116	; 0x74
 800c3fc:	4607      	mov	r7, r0
 800c3fe:	460d      	mov	r5, r1
 800c400:	4614      	mov	r4, r2
 800c402:	d50e      	bpl.n	800c422 <_svfiprintf_r+0x32>
 800c404:	690b      	ldr	r3, [r1, #16]
 800c406:	b963      	cbnz	r3, 800c422 <_svfiprintf_r+0x32>
 800c408:	2140      	movs	r1, #64	; 0x40
 800c40a:	f7ff fcdd 	bl	800bdc8 <_malloc_r>
 800c40e:	6028      	str	r0, [r5, #0]
 800c410:	6128      	str	r0, [r5, #16]
 800c412:	b920      	cbnz	r0, 800c41e <_svfiprintf_r+0x2e>
 800c414:	230c      	movs	r3, #12
 800c416:	603b      	str	r3, [r7, #0]
 800c418:	f04f 30ff 	mov.w	r0, #4294967295
 800c41c:	e0d1      	b.n	800c5c2 <_svfiprintf_r+0x1d2>
 800c41e:	2340      	movs	r3, #64	; 0x40
 800c420:	616b      	str	r3, [r5, #20]
 800c422:	2300      	movs	r3, #0
 800c424:	9309      	str	r3, [sp, #36]	; 0x24
 800c426:	2320      	movs	r3, #32
 800c428:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c42c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c430:	2330      	movs	r3, #48	; 0x30
 800c432:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c5dc <_svfiprintf_r+0x1ec>
 800c436:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c43a:	f04f 0901 	mov.w	r9, #1
 800c43e:	4623      	mov	r3, r4
 800c440:	469a      	mov	sl, r3
 800c442:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c446:	b10a      	cbz	r2, 800c44c <_svfiprintf_r+0x5c>
 800c448:	2a25      	cmp	r2, #37	; 0x25
 800c44a:	d1f9      	bne.n	800c440 <_svfiprintf_r+0x50>
 800c44c:	ebba 0b04 	subs.w	fp, sl, r4
 800c450:	d00b      	beq.n	800c46a <_svfiprintf_r+0x7a>
 800c452:	465b      	mov	r3, fp
 800c454:	4622      	mov	r2, r4
 800c456:	4629      	mov	r1, r5
 800c458:	4638      	mov	r0, r7
 800c45a:	f7ff ff6d 	bl	800c338 <__ssputs_r>
 800c45e:	3001      	adds	r0, #1
 800c460:	f000 80aa 	beq.w	800c5b8 <_svfiprintf_r+0x1c8>
 800c464:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c466:	445a      	add	r2, fp
 800c468:	9209      	str	r2, [sp, #36]	; 0x24
 800c46a:	f89a 3000 	ldrb.w	r3, [sl]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	f000 80a2 	beq.w	800c5b8 <_svfiprintf_r+0x1c8>
 800c474:	2300      	movs	r3, #0
 800c476:	f04f 32ff 	mov.w	r2, #4294967295
 800c47a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c47e:	f10a 0a01 	add.w	sl, sl, #1
 800c482:	9304      	str	r3, [sp, #16]
 800c484:	9307      	str	r3, [sp, #28]
 800c486:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c48a:	931a      	str	r3, [sp, #104]	; 0x68
 800c48c:	4654      	mov	r4, sl
 800c48e:	2205      	movs	r2, #5
 800c490:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c494:	4851      	ldr	r0, [pc, #324]	; (800c5dc <_svfiprintf_r+0x1ec>)
 800c496:	f7f3 ff2b 	bl	80002f0 <memchr>
 800c49a:	9a04      	ldr	r2, [sp, #16]
 800c49c:	b9d8      	cbnz	r0, 800c4d6 <_svfiprintf_r+0xe6>
 800c49e:	06d0      	lsls	r0, r2, #27
 800c4a0:	bf44      	itt	mi
 800c4a2:	2320      	movmi	r3, #32
 800c4a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4a8:	0711      	lsls	r1, r2, #28
 800c4aa:	bf44      	itt	mi
 800c4ac:	232b      	movmi	r3, #43	; 0x2b
 800c4ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4b2:	f89a 3000 	ldrb.w	r3, [sl]
 800c4b6:	2b2a      	cmp	r3, #42	; 0x2a
 800c4b8:	d015      	beq.n	800c4e6 <_svfiprintf_r+0xf6>
 800c4ba:	9a07      	ldr	r2, [sp, #28]
 800c4bc:	4654      	mov	r4, sl
 800c4be:	2000      	movs	r0, #0
 800c4c0:	f04f 0c0a 	mov.w	ip, #10
 800c4c4:	4621      	mov	r1, r4
 800c4c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4ca:	3b30      	subs	r3, #48	; 0x30
 800c4cc:	2b09      	cmp	r3, #9
 800c4ce:	d94e      	bls.n	800c56e <_svfiprintf_r+0x17e>
 800c4d0:	b1b0      	cbz	r0, 800c500 <_svfiprintf_r+0x110>
 800c4d2:	9207      	str	r2, [sp, #28]
 800c4d4:	e014      	b.n	800c500 <_svfiprintf_r+0x110>
 800c4d6:	eba0 0308 	sub.w	r3, r0, r8
 800c4da:	fa09 f303 	lsl.w	r3, r9, r3
 800c4de:	4313      	orrs	r3, r2
 800c4e0:	9304      	str	r3, [sp, #16]
 800c4e2:	46a2      	mov	sl, r4
 800c4e4:	e7d2      	b.n	800c48c <_svfiprintf_r+0x9c>
 800c4e6:	9b03      	ldr	r3, [sp, #12]
 800c4e8:	1d19      	adds	r1, r3, #4
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	9103      	str	r1, [sp, #12]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	bfbb      	ittet	lt
 800c4f2:	425b      	neglt	r3, r3
 800c4f4:	f042 0202 	orrlt.w	r2, r2, #2
 800c4f8:	9307      	strge	r3, [sp, #28]
 800c4fa:	9307      	strlt	r3, [sp, #28]
 800c4fc:	bfb8      	it	lt
 800c4fe:	9204      	strlt	r2, [sp, #16]
 800c500:	7823      	ldrb	r3, [r4, #0]
 800c502:	2b2e      	cmp	r3, #46	; 0x2e
 800c504:	d10c      	bne.n	800c520 <_svfiprintf_r+0x130>
 800c506:	7863      	ldrb	r3, [r4, #1]
 800c508:	2b2a      	cmp	r3, #42	; 0x2a
 800c50a:	d135      	bne.n	800c578 <_svfiprintf_r+0x188>
 800c50c:	9b03      	ldr	r3, [sp, #12]
 800c50e:	1d1a      	adds	r2, r3, #4
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	9203      	str	r2, [sp, #12]
 800c514:	2b00      	cmp	r3, #0
 800c516:	bfb8      	it	lt
 800c518:	f04f 33ff 	movlt.w	r3, #4294967295
 800c51c:	3402      	adds	r4, #2
 800c51e:	9305      	str	r3, [sp, #20]
 800c520:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c5ec <_svfiprintf_r+0x1fc>
 800c524:	7821      	ldrb	r1, [r4, #0]
 800c526:	2203      	movs	r2, #3
 800c528:	4650      	mov	r0, sl
 800c52a:	f7f3 fee1 	bl	80002f0 <memchr>
 800c52e:	b140      	cbz	r0, 800c542 <_svfiprintf_r+0x152>
 800c530:	2340      	movs	r3, #64	; 0x40
 800c532:	eba0 000a 	sub.w	r0, r0, sl
 800c536:	fa03 f000 	lsl.w	r0, r3, r0
 800c53a:	9b04      	ldr	r3, [sp, #16]
 800c53c:	4303      	orrs	r3, r0
 800c53e:	3401      	adds	r4, #1
 800c540:	9304      	str	r3, [sp, #16]
 800c542:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c546:	4826      	ldr	r0, [pc, #152]	; (800c5e0 <_svfiprintf_r+0x1f0>)
 800c548:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c54c:	2206      	movs	r2, #6
 800c54e:	f7f3 fecf 	bl	80002f0 <memchr>
 800c552:	2800      	cmp	r0, #0
 800c554:	d038      	beq.n	800c5c8 <_svfiprintf_r+0x1d8>
 800c556:	4b23      	ldr	r3, [pc, #140]	; (800c5e4 <_svfiprintf_r+0x1f4>)
 800c558:	bb1b      	cbnz	r3, 800c5a2 <_svfiprintf_r+0x1b2>
 800c55a:	9b03      	ldr	r3, [sp, #12]
 800c55c:	3307      	adds	r3, #7
 800c55e:	f023 0307 	bic.w	r3, r3, #7
 800c562:	3308      	adds	r3, #8
 800c564:	9303      	str	r3, [sp, #12]
 800c566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c568:	4433      	add	r3, r6
 800c56a:	9309      	str	r3, [sp, #36]	; 0x24
 800c56c:	e767      	b.n	800c43e <_svfiprintf_r+0x4e>
 800c56e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c572:	460c      	mov	r4, r1
 800c574:	2001      	movs	r0, #1
 800c576:	e7a5      	b.n	800c4c4 <_svfiprintf_r+0xd4>
 800c578:	2300      	movs	r3, #0
 800c57a:	3401      	adds	r4, #1
 800c57c:	9305      	str	r3, [sp, #20]
 800c57e:	4619      	mov	r1, r3
 800c580:	f04f 0c0a 	mov.w	ip, #10
 800c584:	4620      	mov	r0, r4
 800c586:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c58a:	3a30      	subs	r2, #48	; 0x30
 800c58c:	2a09      	cmp	r2, #9
 800c58e:	d903      	bls.n	800c598 <_svfiprintf_r+0x1a8>
 800c590:	2b00      	cmp	r3, #0
 800c592:	d0c5      	beq.n	800c520 <_svfiprintf_r+0x130>
 800c594:	9105      	str	r1, [sp, #20]
 800c596:	e7c3      	b.n	800c520 <_svfiprintf_r+0x130>
 800c598:	fb0c 2101 	mla	r1, ip, r1, r2
 800c59c:	4604      	mov	r4, r0
 800c59e:	2301      	movs	r3, #1
 800c5a0:	e7f0      	b.n	800c584 <_svfiprintf_r+0x194>
 800c5a2:	ab03      	add	r3, sp, #12
 800c5a4:	9300      	str	r3, [sp, #0]
 800c5a6:	462a      	mov	r2, r5
 800c5a8:	4b0f      	ldr	r3, [pc, #60]	; (800c5e8 <_svfiprintf_r+0x1f8>)
 800c5aa:	a904      	add	r1, sp, #16
 800c5ac:	4638      	mov	r0, r7
 800c5ae:	f3af 8000 	nop.w
 800c5b2:	1c42      	adds	r2, r0, #1
 800c5b4:	4606      	mov	r6, r0
 800c5b6:	d1d6      	bne.n	800c566 <_svfiprintf_r+0x176>
 800c5b8:	89ab      	ldrh	r3, [r5, #12]
 800c5ba:	065b      	lsls	r3, r3, #25
 800c5bc:	f53f af2c 	bmi.w	800c418 <_svfiprintf_r+0x28>
 800c5c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c5c2:	b01d      	add	sp, #116	; 0x74
 800c5c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5c8:	ab03      	add	r3, sp, #12
 800c5ca:	9300      	str	r3, [sp, #0]
 800c5cc:	462a      	mov	r2, r5
 800c5ce:	4b06      	ldr	r3, [pc, #24]	; (800c5e8 <_svfiprintf_r+0x1f8>)
 800c5d0:	a904      	add	r1, sp, #16
 800c5d2:	4638      	mov	r0, r7
 800c5d4:	f000 f9d4 	bl	800c980 <_printf_i>
 800c5d8:	e7eb      	b.n	800c5b2 <_svfiprintf_r+0x1c2>
 800c5da:	bf00      	nop
 800c5dc:	0800d5e8 	.word	0x0800d5e8
 800c5e0:	0800d5f2 	.word	0x0800d5f2
 800c5e4:	00000000 	.word	0x00000000
 800c5e8:	0800c339 	.word	0x0800c339
 800c5ec:	0800d5ee 	.word	0x0800d5ee

0800c5f0 <__sfputc_r>:
 800c5f0:	6893      	ldr	r3, [r2, #8]
 800c5f2:	3b01      	subs	r3, #1
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	b410      	push	{r4}
 800c5f8:	6093      	str	r3, [r2, #8]
 800c5fa:	da08      	bge.n	800c60e <__sfputc_r+0x1e>
 800c5fc:	6994      	ldr	r4, [r2, #24]
 800c5fe:	42a3      	cmp	r3, r4
 800c600:	db01      	blt.n	800c606 <__sfputc_r+0x16>
 800c602:	290a      	cmp	r1, #10
 800c604:	d103      	bne.n	800c60e <__sfputc_r+0x1e>
 800c606:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c60a:	f000 baf1 	b.w	800cbf0 <__swbuf_r>
 800c60e:	6813      	ldr	r3, [r2, #0]
 800c610:	1c58      	adds	r0, r3, #1
 800c612:	6010      	str	r0, [r2, #0]
 800c614:	7019      	strb	r1, [r3, #0]
 800c616:	4608      	mov	r0, r1
 800c618:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c61c:	4770      	bx	lr

0800c61e <__sfputs_r>:
 800c61e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c620:	4606      	mov	r6, r0
 800c622:	460f      	mov	r7, r1
 800c624:	4614      	mov	r4, r2
 800c626:	18d5      	adds	r5, r2, r3
 800c628:	42ac      	cmp	r4, r5
 800c62a:	d101      	bne.n	800c630 <__sfputs_r+0x12>
 800c62c:	2000      	movs	r0, #0
 800c62e:	e007      	b.n	800c640 <__sfputs_r+0x22>
 800c630:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c634:	463a      	mov	r2, r7
 800c636:	4630      	mov	r0, r6
 800c638:	f7ff ffda 	bl	800c5f0 <__sfputc_r>
 800c63c:	1c43      	adds	r3, r0, #1
 800c63e:	d1f3      	bne.n	800c628 <__sfputs_r+0xa>
 800c640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c644 <_vfiprintf_r>:
 800c644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c648:	460d      	mov	r5, r1
 800c64a:	b09d      	sub	sp, #116	; 0x74
 800c64c:	4614      	mov	r4, r2
 800c64e:	4698      	mov	r8, r3
 800c650:	4606      	mov	r6, r0
 800c652:	b118      	cbz	r0, 800c65c <_vfiprintf_r+0x18>
 800c654:	6983      	ldr	r3, [r0, #24]
 800c656:	b90b      	cbnz	r3, 800c65c <_vfiprintf_r+0x18>
 800c658:	f7ff faba 	bl	800bbd0 <__sinit>
 800c65c:	4b89      	ldr	r3, [pc, #548]	; (800c884 <_vfiprintf_r+0x240>)
 800c65e:	429d      	cmp	r5, r3
 800c660:	d11b      	bne.n	800c69a <_vfiprintf_r+0x56>
 800c662:	6875      	ldr	r5, [r6, #4]
 800c664:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c666:	07d9      	lsls	r1, r3, #31
 800c668:	d405      	bmi.n	800c676 <_vfiprintf_r+0x32>
 800c66a:	89ab      	ldrh	r3, [r5, #12]
 800c66c:	059a      	lsls	r2, r3, #22
 800c66e:	d402      	bmi.n	800c676 <_vfiprintf_r+0x32>
 800c670:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c672:	f7ff fb70 	bl	800bd56 <__retarget_lock_acquire_recursive>
 800c676:	89ab      	ldrh	r3, [r5, #12]
 800c678:	071b      	lsls	r3, r3, #28
 800c67a:	d501      	bpl.n	800c680 <_vfiprintf_r+0x3c>
 800c67c:	692b      	ldr	r3, [r5, #16]
 800c67e:	b9eb      	cbnz	r3, 800c6bc <_vfiprintf_r+0x78>
 800c680:	4629      	mov	r1, r5
 800c682:	4630      	mov	r0, r6
 800c684:	f000 fb06 	bl	800cc94 <__swsetup_r>
 800c688:	b1c0      	cbz	r0, 800c6bc <_vfiprintf_r+0x78>
 800c68a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c68c:	07dc      	lsls	r4, r3, #31
 800c68e:	d50e      	bpl.n	800c6ae <_vfiprintf_r+0x6a>
 800c690:	f04f 30ff 	mov.w	r0, #4294967295
 800c694:	b01d      	add	sp, #116	; 0x74
 800c696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c69a:	4b7b      	ldr	r3, [pc, #492]	; (800c888 <_vfiprintf_r+0x244>)
 800c69c:	429d      	cmp	r5, r3
 800c69e:	d101      	bne.n	800c6a4 <_vfiprintf_r+0x60>
 800c6a0:	68b5      	ldr	r5, [r6, #8]
 800c6a2:	e7df      	b.n	800c664 <_vfiprintf_r+0x20>
 800c6a4:	4b79      	ldr	r3, [pc, #484]	; (800c88c <_vfiprintf_r+0x248>)
 800c6a6:	429d      	cmp	r5, r3
 800c6a8:	bf08      	it	eq
 800c6aa:	68f5      	ldreq	r5, [r6, #12]
 800c6ac:	e7da      	b.n	800c664 <_vfiprintf_r+0x20>
 800c6ae:	89ab      	ldrh	r3, [r5, #12]
 800c6b0:	0598      	lsls	r0, r3, #22
 800c6b2:	d4ed      	bmi.n	800c690 <_vfiprintf_r+0x4c>
 800c6b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6b6:	f7ff fb4f 	bl	800bd58 <__retarget_lock_release_recursive>
 800c6ba:	e7e9      	b.n	800c690 <_vfiprintf_r+0x4c>
 800c6bc:	2300      	movs	r3, #0
 800c6be:	9309      	str	r3, [sp, #36]	; 0x24
 800c6c0:	2320      	movs	r3, #32
 800c6c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c6c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6ca:	2330      	movs	r3, #48	; 0x30
 800c6cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c890 <_vfiprintf_r+0x24c>
 800c6d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c6d4:	f04f 0901 	mov.w	r9, #1
 800c6d8:	4623      	mov	r3, r4
 800c6da:	469a      	mov	sl, r3
 800c6dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6e0:	b10a      	cbz	r2, 800c6e6 <_vfiprintf_r+0xa2>
 800c6e2:	2a25      	cmp	r2, #37	; 0x25
 800c6e4:	d1f9      	bne.n	800c6da <_vfiprintf_r+0x96>
 800c6e6:	ebba 0b04 	subs.w	fp, sl, r4
 800c6ea:	d00b      	beq.n	800c704 <_vfiprintf_r+0xc0>
 800c6ec:	465b      	mov	r3, fp
 800c6ee:	4622      	mov	r2, r4
 800c6f0:	4629      	mov	r1, r5
 800c6f2:	4630      	mov	r0, r6
 800c6f4:	f7ff ff93 	bl	800c61e <__sfputs_r>
 800c6f8:	3001      	adds	r0, #1
 800c6fa:	f000 80aa 	beq.w	800c852 <_vfiprintf_r+0x20e>
 800c6fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c700:	445a      	add	r2, fp
 800c702:	9209      	str	r2, [sp, #36]	; 0x24
 800c704:	f89a 3000 	ldrb.w	r3, [sl]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	f000 80a2 	beq.w	800c852 <_vfiprintf_r+0x20e>
 800c70e:	2300      	movs	r3, #0
 800c710:	f04f 32ff 	mov.w	r2, #4294967295
 800c714:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c718:	f10a 0a01 	add.w	sl, sl, #1
 800c71c:	9304      	str	r3, [sp, #16]
 800c71e:	9307      	str	r3, [sp, #28]
 800c720:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c724:	931a      	str	r3, [sp, #104]	; 0x68
 800c726:	4654      	mov	r4, sl
 800c728:	2205      	movs	r2, #5
 800c72a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c72e:	4858      	ldr	r0, [pc, #352]	; (800c890 <_vfiprintf_r+0x24c>)
 800c730:	f7f3 fdde 	bl	80002f0 <memchr>
 800c734:	9a04      	ldr	r2, [sp, #16]
 800c736:	b9d8      	cbnz	r0, 800c770 <_vfiprintf_r+0x12c>
 800c738:	06d1      	lsls	r1, r2, #27
 800c73a:	bf44      	itt	mi
 800c73c:	2320      	movmi	r3, #32
 800c73e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c742:	0713      	lsls	r3, r2, #28
 800c744:	bf44      	itt	mi
 800c746:	232b      	movmi	r3, #43	; 0x2b
 800c748:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c74c:	f89a 3000 	ldrb.w	r3, [sl]
 800c750:	2b2a      	cmp	r3, #42	; 0x2a
 800c752:	d015      	beq.n	800c780 <_vfiprintf_r+0x13c>
 800c754:	9a07      	ldr	r2, [sp, #28]
 800c756:	4654      	mov	r4, sl
 800c758:	2000      	movs	r0, #0
 800c75a:	f04f 0c0a 	mov.w	ip, #10
 800c75e:	4621      	mov	r1, r4
 800c760:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c764:	3b30      	subs	r3, #48	; 0x30
 800c766:	2b09      	cmp	r3, #9
 800c768:	d94e      	bls.n	800c808 <_vfiprintf_r+0x1c4>
 800c76a:	b1b0      	cbz	r0, 800c79a <_vfiprintf_r+0x156>
 800c76c:	9207      	str	r2, [sp, #28]
 800c76e:	e014      	b.n	800c79a <_vfiprintf_r+0x156>
 800c770:	eba0 0308 	sub.w	r3, r0, r8
 800c774:	fa09 f303 	lsl.w	r3, r9, r3
 800c778:	4313      	orrs	r3, r2
 800c77a:	9304      	str	r3, [sp, #16]
 800c77c:	46a2      	mov	sl, r4
 800c77e:	e7d2      	b.n	800c726 <_vfiprintf_r+0xe2>
 800c780:	9b03      	ldr	r3, [sp, #12]
 800c782:	1d19      	adds	r1, r3, #4
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	9103      	str	r1, [sp, #12]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	bfbb      	ittet	lt
 800c78c:	425b      	neglt	r3, r3
 800c78e:	f042 0202 	orrlt.w	r2, r2, #2
 800c792:	9307      	strge	r3, [sp, #28]
 800c794:	9307      	strlt	r3, [sp, #28]
 800c796:	bfb8      	it	lt
 800c798:	9204      	strlt	r2, [sp, #16]
 800c79a:	7823      	ldrb	r3, [r4, #0]
 800c79c:	2b2e      	cmp	r3, #46	; 0x2e
 800c79e:	d10c      	bne.n	800c7ba <_vfiprintf_r+0x176>
 800c7a0:	7863      	ldrb	r3, [r4, #1]
 800c7a2:	2b2a      	cmp	r3, #42	; 0x2a
 800c7a4:	d135      	bne.n	800c812 <_vfiprintf_r+0x1ce>
 800c7a6:	9b03      	ldr	r3, [sp, #12]
 800c7a8:	1d1a      	adds	r2, r3, #4
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	9203      	str	r2, [sp, #12]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	bfb8      	it	lt
 800c7b2:	f04f 33ff 	movlt.w	r3, #4294967295
 800c7b6:	3402      	adds	r4, #2
 800c7b8:	9305      	str	r3, [sp, #20]
 800c7ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c8a0 <_vfiprintf_r+0x25c>
 800c7be:	7821      	ldrb	r1, [r4, #0]
 800c7c0:	2203      	movs	r2, #3
 800c7c2:	4650      	mov	r0, sl
 800c7c4:	f7f3 fd94 	bl	80002f0 <memchr>
 800c7c8:	b140      	cbz	r0, 800c7dc <_vfiprintf_r+0x198>
 800c7ca:	2340      	movs	r3, #64	; 0x40
 800c7cc:	eba0 000a 	sub.w	r0, r0, sl
 800c7d0:	fa03 f000 	lsl.w	r0, r3, r0
 800c7d4:	9b04      	ldr	r3, [sp, #16]
 800c7d6:	4303      	orrs	r3, r0
 800c7d8:	3401      	adds	r4, #1
 800c7da:	9304      	str	r3, [sp, #16]
 800c7dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7e0:	482c      	ldr	r0, [pc, #176]	; (800c894 <_vfiprintf_r+0x250>)
 800c7e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c7e6:	2206      	movs	r2, #6
 800c7e8:	f7f3 fd82 	bl	80002f0 <memchr>
 800c7ec:	2800      	cmp	r0, #0
 800c7ee:	d03f      	beq.n	800c870 <_vfiprintf_r+0x22c>
 800c7f0:	4b29      	ldr	r3, [pc, #164]	; (800c898 <_vfiprintf_r+0x254>)
 800c7f2:	bb1b      	cbnz	r3, 800c83c <_vfiprintf_r+0x1f8>
 800c7f4:	9b03      	ldr	r3, [sp, #12]
 800c7f6:	3307      	adds	r3, #7
 800c7f8:	f023 0307 	bic.w	r3, r3, #7
 800c7fc:	3308      	adds	r3, #8
 800c7fe:	9303      	str	r3, [sp, #12]
 800c800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c802:	443b      	add	r3, r7
 800c804:	9309      	str	r3, [sp, #36]	; 0x24
 800c806:	e767      	b.n	800c6d8 <_vfiprintf_r+0x94>
 800c808:	fb0c 3202 	mla	r2, ip, r2, r3
 800c80c:	460c      	mov	r4, r1
 800c80e:	2001      	movs	r0, #1
 800c810:	e7a5      	b.n	800c75e <_vfiprintf_r+0x11a>
 800c812:	2300      	movs	r3, #0
 800c814:	3401      	adds	r4, #1
 800c816:	9305      	str	r3, [sp, #20]
 800c818:	4619      	mov	r1, r3
 800c81a:	f04f 0c0a 	mov.w	ip, #10
 800c81e:	4620      	mov	r0, r4
 800c820:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c824:	3a30      	subs	r2, #48	; 0x30
 800c826:	2a09      	cmp	r2, #9
 800c828:	d903      	bls.n	800c832 <_vfiprintf_r+0x1ee>
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d0c5      	beq.n	800c7ba <_vfiprintf_r+0x176>
 800c82e:	9105      	str	r1, [sp, #20]
 800c830:	e7c3      	b.n	800c7ba <_vfiprintf_r+0x176>
 800c832:	fb0c 2101 	mla	r1, ip, r1, r2
 800c836:	4604      	mov	r4, r0
 800c838:	2301      	movs	r3, #1
 800c83a:	e7f0      	b.n	800c81e <_vfiprintf_r+0x1da>
 800c83c:	ab03      	add	r3, sp, #12
 800c83e:	9300      	str	r3, [sp, #0]
 800c840:	462a      	mov	r2, r5
 800c842:	4b16      	ldr	r3, [pc, #88]	; (800c89c <_vfiprintf_r+0x258>)
 800c844:	a904      	add	r1, sp, #16
 800c846:	4630      	mov	r0, r6
 800c848:	f3af 8000 	nop.w
 800c84c:	4607      	mov	r7, r0
 800c84e:	1c78      	adds	r0, r7, #1
 800c850:	d1d6      	bne.n	800c800 <_vfiprintf_r+0x1bc>
 800c852:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c854:	07d9      	lsls	r1, r3, #31
 800c856:	d405      	bmi.n	800c864 <_vfiprintf_r+0x220>
 800c858:	89ab      	ldrh	r3, [r5, #12]
 800c85a:	059a      	lsls	r2, r3, #22
 800c85c:	d402      	bmi.n	800c864 <_vfiprintf_r+0x220>
 800c85e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c860:	f7ff fa7a 	bl	800bd58 <__retarget_lock_release_recursive>
 800c864:	89ab      	ldrh	r3, [r5, #12]
 800c866:	065b      	lsls	r3, r3, #25
 800c868:	f53f af12 	bmi.w	800c690 <_vfiprintf_r+0x4c>
 800c86c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c86e:	e711      	b.n	800c694 <_vfiprintf_r+0x50>
 800c870:	ab03      	add	r3, sp, #12
 800c872:	9300      	str	r3, [sp, #0]
 800c874:	462a      	mov	r2, r5
 800c876:	4b09      	ldr	r3, [pc, #36]	; (800c89c <_vfiprintf_r+0x258>)
 800c878:	a904      	add	r1, sp, #16
 800c87a:	4630      	mov	r0, r6
 800c87c:	f000 f880 	bl	800c980 <_printf_i>
 800c880:	e7e4      	b.n	800c84c <_vfiprintf_r+0x208>
 800c882:	bf00      	nop
 800c884:	0800d5a4 	.word	0x0800d5a4
 800c888:	0800d5c4 	.word	0x0800d5c4
 800c88c:	0800d584 	.word	0x0800d584
 800c890:	0800d5e8 	.word	0x0800d5e8
 800c894:	0800d5f2 	.word	0x0800d5f2
 800c898:	00000000 	.word	0x00000000
 800c89c:	0800c61f 	.word	0x0800c61f
 800c8a0:	0800d5ee 	.word	0x0800d5ee

0800c8a4 <_printf_common>:
 800c8a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8a8:	4616      	mov	r6, r2
 800c8aa:	4699      	mov	r9, r3
 800c8ac:	688a      	ldr	r2, [r1, #8]
 800c8ae:	690b      	ldr	r3, [r1, #16]
 800c8b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	bfb8      	it	lt
 800c8b8:	4613      	movlt	r3, r2
 800c8ba:	6033      	str	r3, [r6, #0]
 800c8bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c8c0:	4607      	mov	r7, r0
 800c8c2:	460c      	mov	r4, r1
 800c8c4:	b10a      	cbz	r2, 800c8ca <_printf_common+0x26>
 800c8c6:	3301      	adds	r3, #1
 800c8c8:	6033      	str	r3, [r6, #0]
 800c8ca:	6823      	ldr	r3, [r4, #0]
 800c8cc:	0699      	lsls	r1, r3, #26
 800c8ce:	bf42      	ittt	mi
 800c8d0:	6833      	ldrmi	r3, [r6, #0]
 800c8d2:	3302      	addmi	r3, #2
 800c8d4:	6033      	strmi	r3, [r6, #0]
 800c8d6:	6825      	ldr	r5, [r4, #0]
 800c8d8:	f015 0506 	ands.w	r5, r5, #6
 800c8dc:	d106      	bne.n	800c8ec <_printf_common+0x48>
 800c8de:	f104 0a19 	add.w	sl, r4, #25
 800c8e2:	68e3      	ldr	r3, [r4, #12]
 800c8e4:	6832      	ldr	r2, [r6, #0]
 800c8e6:	1a9b      	subs	r3, r3, r2
 800c8e8:	42ab      	cmp	r3, r5
 800c8ea:	dc26      	bgt.n	800c93a <_printf_common+0x96>
 800c8ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c8f0:	1e13      	subs	r3, r2, #0
 800c8f2:	6822      	ldr	r2, [r4, #0]
 800c8f4:	bf18      	it	ne
 800c8f6:	2301      	movne	r3, #1
 800c8f8:	0692      	lsls	r2, r2, #26
 800c8fa:	d42b      	bmi.n	800c954 <_printf_common+0xb0>
 800c8fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c900:	4649      	mov	r1, r9
 800c902:	4638      	mov	r0, r7
 800c904:	47c0      	blx	r8
 800c906:	3001      	adds	r0, #1
 800c908:	d01e      	beq.n	800c948 <_printf_common+0xa4>
 800c90a:	6823      	ldr	r3, [r4, #0]
 800c90c:	68e5      	ldr	r5, [r4, #12]
 800c90e:	6832      	ldr	r2, [r6, #0]
 800c910:	f003 0306 	and.w	r3, r3, #6
 800c914:	2b04      	cmp	r3, #4
 800c916:	bf08      	it	eq
 800c918:	1aad      	subeq	r5, r5, r2
 800c91a:	68a3      	ldr	r3, [r4, #8]
 800c91c:	6922      	ldr	r2, [r4, #16]
 800c91e:	bf0c      	ite	eq
 800c920:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c924:	2500      	movne	r5, #0
 800c926:	4293      	cmp	r3, r2
 800c928:	bfc4      	itt	gt
 800c92a:	1a9b      	subgt	r3, r3, r2
 800c92c:	18ed      	addgt	r5, r5, r3
 800c92e:	2600      	movs	r6, #0
 800c930:	341a      	adds	r4, #26
 800c932:	42b5      	cmp	r5, r6
 800c934:	d11a      	bne.n	800c96c <_printf_common+0xc8>
 800c936:	2000      	movs	r0, #0
 800c938:	e008      	b.n	800c94c <_printf_common+0xa8>
 800c93a:	2301      	movs	r3, #1
 800c93c:	4652      	mov	r2, sl
 800c93e:	4649      	mov	r1, r9
 800c940:	4638      	mov	r0, r7
 800c942:	47c0      	blx	r8
 800c944:	3001      	adds	r0, #1
 800c946:	d103      	bne.n	800c950 <_printf_common+0xac>
 800c948:	f04f 30ff 	mov.w	r0, #4294967295
 800c94c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c950:	3501      	adds	r5, #1
 800c952:	e7c6      	b.n	800c8e2 <_printf_common+0x3e>
 800c954:	18e1      	adds	r1, r4, r3
 800c956:	1c5a      	adds	r2, r3, #1
 800c958:	2030      	movs	r0, #48	; 0x30
 800c95a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c95e:	4422      	add	r2, r4
 800c960:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c964:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c968:	3302      	adds	r3, #2
 800c96a:	e7c7      	b.n	800c8fc <_printf_common+0x58>
 800c96c:	2301      	movs	r3, #1
 800c96e:	4622      	mov	r2, r4
 800c970:	4649      	mov	r1, r9
 800c972:	4638      	mov	r0, r7
 800c974:	47c0      	blx	r8
 800c976:	3001      	adds	r0, #1
 800c978:	d0e6      	beq.n	800c948 <_printf_common+0xa4>
 800c97a:	3601      	adds	r6, #1
 800c97c:	e7d9      	b.n	800c932 <_printf_common+0x8e>
	...

0800c980 <_printf_i>:
 800c980:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c984:	7e0f      	ldrb	r7, [r1, #24]
 800c986:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c988:	2f78      	cmp	r7, #120	; 0x78
 800c98a:	4691      	mov	r9, r2
 800c98c:	4680      	mov	r8, r0
 800c98e:	460c      	mov	r4, r1
 800c990:	469a      	mov	sl, r3
 800c992:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c996:	d807      	bhi.n	800c9a8 <_printf_i+0x28>
 800c998:	2f62      	cmp	r7, #98	; 0x62
 800c99a:	d80a      	bhi.n	800c9b2 <_printf_i+0x32>
 800c99c:	2f00      	cmp	r7, #0
 800c99e:	f000 80d8 	beq.w	800cb52 <_printf_i+0x1d2>
 800c9a2:	2f58      	cmp	r7, #88	; 0x58
 800c9a4:	f000 80a3 	beq.w	800caee <_printf_i+0x16e>
 800c9a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c9ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c9b0:	e03a      	b.n	800ca28 <_printf_i+0xa8>
 800c9b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c9b6:	2b15      	cmp	r3, #21
 800c9b8:	d8f6      	bhi.n	800c9a8 <_printf_i+0x28>
 800c9ba:	a101      	add	r1, pc, #4	; (adr r1, 800c9c0 <_printf_i+0x40>)
 800c9bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c9c0:	0800ca19 	.word	0x0800ca19
 800c9c4:	0800ca2d 	.word	0x0800ca2d
 800c9c8:	0800c9a9 	.word	0x0800c9a9
 800c9cc:	0800c9a9 	.word	0x0800c9a9
 800c9d0:	0800c9a9 	.word	0x0800c9a9
 800c9d4:	0800c9a9 	.word	0x0800c9a9
 800c9d8:	0800ca2d 	.word	0x0800ca2d
 800c9dc:	0800c9a9 	.word	0x0800c9a9
 800c9e0:	0800c9a9 	.word	0x0800c9a9
 800c9e4:	0800c9a9 	.word	0x0800c9a9
 800c9e8:	0800c9a9 	.word	0x0800c9a9
 800c9ec:	0800cb39 	.word	0x0800cb39
 800c9f0:	0800ca5d 	.word	0x0800ca5d
 800c9f4:	0800cb1b 	.word	0x0800cb1b
 800c9f8:	0800c9a9 	.word	0x0800c9a9
 800c9fc:	0800c9a9 	.word	0x0800c9a9
 800ca00:	0800cb5b 	.word	0x0800cb5b
 800ca04:	0800c9a9 	.word	0x0800c9a9
 800ca08:	0800ca5d 	.word	0x0800ca5d
 800ca0c:	0800c9a9 	.word	0x0800c9a9
 800ca10:	0800c9a9 	.word	0x0800c9a9
 800ca14:	0800cb23 	.word	0x0800cb23
 800ca18:	682b      	ldr	r3, [r5, #0]
 800ca1a:	1d1a      	adds	r2, r3, #4
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	602a      	str	r2, [r5, #0]
 800ca20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ca28:	2301      	movs	r3, #1
 800ca2a:	e0a3      	b.n	800cb74 <_printf_i+0x1f4>
 800ca2c:	6820      	ldr	r0, [r4, #0]
 800ca2e:	6829      	ldr	r1, [r5, #0]
 800ca30:	0606      	lsls	r6, r0, #24
 800ca32:	f101 0304 	add.w	r3, r1, #4
 800ca36:	d50a      	bpl.n	800ca4e <_printf_i+0xce>
 800ca38:	680e      	ldr	r6, [r1, #0]
 800ca3a:	602b      	str	r3, [r5, #0]
 800ca3c:	2e00      	cmp	r6, #0
 800ca3e:	da03      	bge.n	800ca48 <_printf_i+0xc8>
 800ca40:	232d      	movs	r3, #45	; 0x2d
 800ca42:	4276      	negs	r6, r6
 800ca44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca48:	485e      	ldr	r0, [pc, #376]	; (800cbc4 <_printf_i+0x244>)
 800ca4a:	230a      	movs	r3, #10
 800ca4c:	e019      	b.n	800ca82 <_printf_i+0x102>
 800ca4e:	680e      	ldr	r6, [r1, #0]
 800ca50:	602b      	str	r3, [r5, #0]
 800ca52:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ca56:	bf18      	it	ne
 800ca58:	b236      	sxthne	r6, r6
 800ca5a:	e7ef      	b.n	800ca3c <_printf_i+0xbc>
 800ca5c:	682b      	ldr	r3, [r5, #0]
 800ca5e:	6820      	ldr	r0, [r4, #0]
 800ca60:	1d19      	adds	r1, r3, #4
 800ca62:	6029      	str	r1, [r5, #0]
 800ca64:	0601      	lsls	r1, r0, #24
 800ca66:	d501      	bpl.n	800ca6c <_printf_i+0xec>
 800ca68:	681e      	ldr	r6, [r3, #0]
 800ca6a:	e002      	b.n	800ca72 <_printf_i+0xf2>
 800ca6c:	0646      	lsls	r6, r0, #25
 800ca6e:	d5fb      	bpl.n	800ca68 <_printf_i+0xe8>
 800ca70:	881e      	ldrh	r6, [r3, #0]
 800ca72:	4854      	ldr	r0, [pc, #336]	; (800cbc4 <_printf_i+0x244>)
 800ca74:	2f6f      	cmp	r7, #111	; 0x6f
 800ca76:	bf0c      	ite	eq
 800ca78:	2308      	moveq	r3, #8
 800ca7a:	230a      	movne	r3, #10
 800ca7c:	2100      	movs	r1, #0
 800ca7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ca82:	6865      	ldr	r5, [r4, #4]
 800ca84:	60a5      	str	r5, [r4, #8]
 800ca86:	2d00      	cmp	r5, #0
 800ca88:	bfa2      	ittt	ge
 800ca8a:	6821      	ldrge	r1, [r4, #0]
 800ca8c:	f021 0104 	bicge.w	r1, r1, #4
 800ca90:	6021      	strge	r1, [r4, #0]
 800ca92:	b90e      	cbnz	r6, 800ca98 <_printf_i+0x118>
 800ca94:	2d00      	cmp	r5, #0
 800ca96:	d04d      	beq.n	800cb34 <_printf_i+0x1b4>
 800ca98:	4615      	mov	r5, r2
 800ca9a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ca9e:	fb03 6711 	mls	r7, r3, r1, r6
 800caa2:	5dc7      	ldrb	r7, [r0, r7]
 800caa4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800caa8:	4637      	mov	r7, r6
 800caaa:	42bb      	cmp	r3, r7
 800caac:	460e      	mov	r6, r1
 800caae:	d9f4      	bls.n	800ca9a <_printf_i+0x11a>
 800cab0:	2b08      	cmp	r3, #8
 800cab2:	d10b      	bne.n	800cacc <_printf_i+0x14c>
 800cab4:	6823      	ldr	r3, [r4, #0]
 800cab6:	07de      	lsls	r6, r3, #31
 800cab8:	d508      	bpl.n	800cacc <_printf_i+0x14c>
 800caba:	6923      	ldr	r3, [r4, #16]
 800cabc:	6861      	ldr	r1, [r4, #4]
 800cabe:	4299      	cmp	r1, r3
 800cac0:	bfde      	ittt	le
 800cac2:	2330      	movle	r3, #48	; 0x30
 800cac4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cac8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cacc:	1b52      	subs	r2, r2, r5
 800cace:	6122      	str	r2, [r4, #16]
 800cad0:	f8cd a000 	str.w	sl, [sp]
 800cad4:	464b      	mov	r3, r9
 800cad6:	aa03      	add	r2, sp, #12
 800cad8:	4621      	mov	r1, r4
 800cada:	4640      	mov	r0, r8
 800cadc:	f7ff fee2 	bl	800c8a4 <_printf_common>
 800cae0:	3001      	adds	r0, #1
 800cae2:	d14c      	bne.n	800cb7e <_printf_i+0x1fe>
 800cae4:	f04f 30ff 	mov.w	r0, #4294967295
 800cae8:	b004      	add	sp, #16
 800caea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caee:	4835      	ldr	r0, [pc, #212]	; (800cbc4 <_printf_i+0x244>)
 800caf0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800caf4:	6829      	ldr	r1, [r5, #0]
 800caf6:	6823      	ldr	r3, [r4, #0]
 800caf8:	f851 6b04 	ldr.w	r6, [r1], #4
 800cafc:	6029      	str	r1, [r5, #0]
 800cafe:	061d      	lsls	r5, r3, #24
 800cb00:	d514      	bpl.n	800cb2c <_printf_i+0x1ac>
 800cb02:	07df      	lsls	r7, r3, #31
 800cb04:	bf44      	itt	mi
 800cb06:	f043 0320 	orrmi.w	r3, r3, #32
 800cb0a:	6023      	strmi	r3, [r4, #0]
 800cb0c:	b91e      	cbnz	r6, 800cb16 <_printf_i+0x196>
 800cb0e:	6823      	ldr	r3, [r4, #0]
 800cb10:	f023 0320 	bic.w	r3, r3, #32
 800cb14:	6023      	str	r3, [r4, #0]
 800cb16:	2310      	movs	r3, #16
 800cb18:	e7b0      	b.n	800ca7c <_printf_i+0xfc>
 800cb1a:	6823      	ldr	r3, [r4, #0]
 800cb1c:	f043 0320 	orr.w	r3, r3, #32
 800cb20:	6023      	str	r3, [r4, #0]
 800cb22:	2378      	movs	r3, #120	; 0x78
 800cb24:	4828      	ldr	r0, [pc, #160]	; (800cbc8 <_printf_i+0x248>)
 800cb26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cb2a:	e7e3      	b.n	800caf4 <_printf_i+0x174>
 800cb2c:	0659      	lsls	r1, r3, #25
 800cb2e:	bf48      	it	mi
 800cb30:	b2b6      	uxthmi	r6, r6
 800cb32:	e7e6      	b.n	800cb02 <_printf_i+0x182>
 800cb34:	4615      	mov	r5, r2
 800cb36:	e7bb      	b.n	800cab0 <_printf_i+0x130>
 800cb38:	682b      	ldr	r3, [r5, #0]
 800cb3a:	6826      	ldr	r6, [r4, #0]
 800cb3c:	6961      	ldr	r1, [r4, #20]
 800cb3e:	1d18      	adds	r0, r3, #4
 800cb40:	6028      	str	r0, [r5, #0]
 800cb42:	0635      	lsls	r5, r6, #24
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	d501      	bpl.n	800cb4c <_printf_i+0x1cc>
 800cb48:	6019      	str	r1, [r3, #0]
 800cb4a:	e002      	b.n	800cb52 <_printf_i+0x1d2>
 800cb4c:	0670      	lsls	r0, r6, #25
 800cb4e:	d5fb      	bpl.n	800cb48 <_printf_i+0x1c8>
 800cb50:	8019      	strh	r1, [r3, #0]
 800cb52:	2300      	movs	r3, #0
 800cb54:	6123      	str	r3, [r4, #16]
 800cb56:	4615      	mov	r5, r2
 800cb58:	e7ba      	b.n	800cad0 <_printf_i+0x150>
 800cb5a:	682b      	ldr	r3, [r5, #0]
 800cb5c:	1d1a      	adds	r2, r3, #4
 800cb5e:	602a      	str	r2, [r5, #0]
 800cb60:	681d      	ldr	r5, [r3, #0]
 800cb62:	6862      	ldr	r2, [r4, #4]
 800cb64:	2100      	movs	r1, #0
 800cb66:	4628      	mov	r0, r5
 800cb68:	f7f3 fbc2 	bl	80002f0 <memchr>
 800cb6c:	b108      	cbz	r0, 800cb72 <_printf_i+0x1f2>
 800cb6e:	1b40      	subs	r0, r0, r5
 800cb70:	6060      	str	r0, [r4, #4]
 800cb72:	6863      	ldr	r3, [r4, #4]
 800cb74:	6123      	str	r3, [r4, #16]
 800cb76:	2300      	movs	r3, #0
 800cb78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb7c:	e7a8      	b.n	800cad0 <_printf_i+0x150>
 800cb7e:	6923      	ldr	r3, [r4, #16]
 800cb80:	462a      	mov	r2, r5
 800cb82:	4649      	mov	r1, r9
 800cb84:	4640      	mov	r0, r8
 800cb86:	47d0      	blx	sl
 800cb88:	3001      	adds	r0, #1
 800cb8a:	d0ab      	beq.n	800cae4 <_printf_i+0x164>
 800cb8c:	6823      	ldr	r3, [r4, #0]
 800cb8e:	079b      	lsls	r3, r3, #30
 800cb90:	d413      	bmi.n	800cbba <_printf_i+0x23a>
 800cb92:	68e0      	ldr	r0, [r4, #12]
 800cb94:	9b03      	ldr	r3, [sp, #12]
 800cb96:	4298      	cmp	r0, r3
 800cb98:	bfb8      	it	lt
 800cb9a:	4618      	movlt	r0, r3
 800cb9c:	e7a4      	b.n	800cae8 <_printf_i+0x168>
 800cb9e:	2301      	movs	r3, #1
 800cba0:	4632      	mov	r2, r6
 800cba2:	4649      	mov	r1, r9
 800cba4:	4640      	mov	r0, r8
 800cba6:	47d0      	blx	sl
 800cba8:	3001      	adds	r0, #1
 800cbaa:	d09b      	beq.n	800cae4 <_printf_i+0x164>
 800cbac:	3501      	adds	r5, #1
 800cbae:	68e3      	ldr	r3, [r4, #12]
 800cbb0:	9903      	ldr	r1, [sp, #12]
 800cbb2:	1a5b      	subs	r3, r3, r1
 800cbb4:	42ab      	cmp	r3, r5
 800cbb6:	dcf2      	bgt.n	800cb9e <_printf_i+0x21e>
 800cbb8:	e7eb      	b.n	800cb92 <_printf_i+0x212>
 800cbba:	2500      	movs	r5, #0
 800cbbc:	f104 0619 	add.w	r6, r4, #25
 800cbc0:	e7f5      	b.n	800cbae <_printf_i+0x22e>
 800cbc2:	bf00      	nop
 800cbc4:	0800d5f9 	.word	0x0800d5f9
 800cbc8:	0800d60a 	.word	0x0800d60a

0800cbcc <_read_r>:
 800cbcc:	b538      	push	{r3, r4, r5, lr}
 800cbce:	4d07      	ldr	r5, [pc, #28]	; (800cbec <_read_r+0x20>)
 800cbd0:	4604      	mov	r4, r0
 800cbd2:	4608      	mov	r0, r1
 800cbd4:	4611      	mov	r1, r2
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	602a      	str	r2, [r5, #0]
 800cbda:	461a      	mov	r2, r3
 800cbdc:	f7f5 fdde 	bl	800279c <_read>
 800cbe0:	1c43      	adds	r3, r0, #1
 800cbe2:	d102      	bne.n	800cbea <_read_r+0x1e>
 800cbe4:	682b      	ldr	r3, [r5, #0]
 800cbe6:	b103      	cbz	r3, 800cbea <_read_r+0x1e>
 800cbe8:	6023      	str	r3, [r4, #0]
 800cbea:	bd38      	pop	{r3, r4, r5, pc}
 800cbec:	24004f7c 	.word	0x24004f7c

0800cbf0 <__swbuf_r>:
 800cbf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbf2:	460e      	mov	r6, r1
 800cbf4:	4614      	mov	r4, r2
 800cbf6:	4605      	mov	r5, r0
 800cbf8:	b118      	cbz	r0, 800cc02 <__swbuf_r+0x12>
 800cbfa:	6983      	ldr	r3, [r0, #24]
 800cbfc:	b90b      	cbnz	r3, 800cc02 <__swbuf_r+0x12>
 800cbfe:	f7fe ffe7 	bl	800bbd0 <__sinit>
 800cc02:	4b21      	ldr	r3, [pc, #132]	; (800cc88 <__swbuf_r+0x98>)
 800cc04:	429c      	cmp	r4, r3
 800cc06:	d12b      	bne.n	800cc60 <__swbuf_r+0x70>
 800cc08:	686c      	ldr	r4, [r5, #4]
 800cc0a:	69a3      	ldr	r3, [r4, #24]
 800cc0c:	60a3      	str	r3, [r4, #8]
 800cc0e:	89a3      	ldrh	r3, [r4, #12]
 800cc10:	071a      	lsls	r2, r3, #28
 800cc12:	d52f      	bpl.n	800cc74 <__swbuf_r+0x84>
 800cc14:	6923      	ldr	r3, [r4, #16]
 800cc16:	b36b      	cbz	r3, 800cc74 <__swbuf_r+0x84>
 800cc18:	6923      	ldr	r3, [r4, #16]
 800cc1a:	6820      	ldr	r0, [r4, #0]
 800cc1c:	1ac0      	subs	r0, r0, r3
 800cc1e:	6963      	ldr	r3, [r4, #20]
 800cc20:	b2f6      	uxtb	r6, r6
 800cc22:	4283      	cmp	r3, r0
 800cc24:	4637      	mov	r7, r6
 800cc26:	dc04      	bgt.n	800cc32 <__swbuf_r+0x42>
 800cc28:	4621      	mov	r1, r4
 800cc2a:	4628      	mov	r0, r5
 800cc2c:	f7ff fade 	bl	800c1ec <_fflush_r>
 800cc30:	bb30      	cbnz	r0, 800cc80 <__swbuf_r+0x90>
 800cc32:	68a3      	ldr	r3, [r4, #8]
 800cc34:	3b01      	subs	r3, #1
 800cc36:	60a3      	str	r3, [r4, #8]
 800cc38:	6823      	ldr	r3, [r4, #0]
 800cc3a:	1c5a      	adds	r2, r3, #1
 800cc3c:	6022      	str	r2, [r4, #0]
 800cc3e:	701e      	strb	r6, [r3, #0]
 800cc40:	6963      	ldr	r3, [r4, #20]
 800cc42:	3001      	adds	r0, #1
 800cc44:	4283      	cmp	r3, r0
 800cc46:	d004      	beq.n	800cc52 <__swbuf_r+0x62>
 800cc48:	89a3      	ldrh	r3, [r4, #12]
 800cc4a:	07db      	lsls	r3, r3, #31
 800cc4c:	d506      	bpl.n	800cc5c <__swbuf_r+0x6c>
 800cc4e:	2e0a      	cmp	r6, #10
 800cc50:	d104      	bne.n	800cc5c <__swbuf_r+0x6c>
 800cc52:	4621      	mov	r1, r4
 800cc54:	4628      	mov	r0, r5
 800cc56:	f7ff fac9 	bl	800c1ec <_fflush_r>
 800cc5a:	b988      	cbnz	r0, 800cc80 <__swbuf_r+0x90>
 800cc5c:	4638      	mov	r0, r7
 800cc5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc60:	4b0a      	ldr	r3, [pc, #40]	; (800cc8c <__swbuf_r+0x9c>)
 800cc62:	429c      	cmp	r4, r3
 800cc64:	d101      	bne.n	800cc6a <__swbuf_r+0x7a>
 800cc66:	68ac      	ldr	r4, [r5, #8]
 800cc68:	e7cf      	b.n	800cc0a <__swbuf_r+0x1a>
 800cc6a:	4b09      	ldr	r3, [pc, #36]	; (800cc90 <__swbuf_r+0xa0>)
 800cc6c:	429c      	cmp	r4, r3
 800cc6e:	bf08      	it	eq
 800cc70:	68ec      	ldreq	r4, [r5, #12]
 800cc72:	e7ca      	b.n	800cc0a <__swbuf_r+0x1a>
 800cc74:	4621      	mov	r1, r4
 800cc76:	4628      	mov	r0, r5
 800cc78:	f000 f80c 	bl	800cc94 <__swsetup_r>
 800cc7c:	2800      	cmp	r0, #0
 800cc7e:	d0cb      	beq.n	800cc18 <__swbuf_r+0x28>
 800cc80:	f04f 37ff 	mov.w	r7, #4294967295
 800cc84:	e7ea      	b.n	800cc5c <__swbuf_r+0x6c>
 800cc86:	bf00      	nop
 800cc88:	0800d5a4 	.word	0x0800d5a4
 800cc8c:	0800d5c4 	.word	0x0800d5c4
 800cc90:	0800d584 	.word	0x0800d584

0800cc94 <__swsetup_r>:
 800cc94:	4b32      	ldr	r3, [pc, #200]	; (800cd60 <__swsetup_r+0xcc>)
 800cc96:	b570      	push	{r4, r5, r6, lr}
 800cc98:	681d      	ldr	r5, [r3, #0]
 800cc9a:	4606      	mov	r6, r0
 800cc9c:	460c      	mov	r4, r1
 800cc9e:	b125      	cbz	r5, 800ccaa <__swsetup_r+0x16>
 800cca0:	69ab      	ldr	r3, [r5, #24]
 800cca2:	b913      	cbnz	r3, 800ccaa <__swsetup_r+0x16>
 800cca4:	4628      	mov	r0, r5
 800cca6:	f7fe ff93 	bl	800bbd0 <__sinit>
 800ccaa:	4b2e      	ldr	r3, [pc, #184]	; (800cd64 <__swsetup_r+0xd0>)
 800ccac:	429c      	cmp	r4, r3
 800ccae:	d10f      	bne.n	800ccd0 <__swsetup_r+0x3c>
 800ccb0:	686c      	ldr	r4, [r5, #4]
 800ccb2:	89a3      	ldrh	r3, [r4, #12]
 800ccb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ccb8:	0719      	lsls	r1, r3, #28
 800ccba:	d42c      	bmi.n	800cd16 <__swsetup_r+0x82>
 800ccbc:	06dd      	lsls	r5, r3, #27
 800ccbe:	d411      	bmi.n	800cce4 <__swsetup_r+0x50>
 800ccc0:	2309      	movs	r3, #9
 800ccc2:	6033      	str	r3, [r6, #0]
 800ccc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ccc8:	81a3      	strh	r3, [r4, #12]
 800ccca:	f04f 30ff 	mov.w	r0, #4294967295
 800ccce:	e03e      	b.n	800cd4e <__swsetup_r+0xba>
 800ccd0:	4b25      	ldr	r3, [pc, #148]	; (800cd68 <__swsetup_r+0xd4>)
 800ccd2:	429c      	cmp	r4, r3
 800ccd4:	d101      	bne.n	800ccda <__swsetup_r+0x46>
 800ccd6:	68ac      	ldr	r4, [r5, #8]
 800ccd8:	e7eb      	b.n	800ccb2 <__swsetup_r+0x1e>
 800ccda:	4b24      	ldr	r3, [pc, #144]	; (800cd6c <__swsetup_r+0xd8>)
 800ccdc:	429c      	cmp	r4, r3
 800ccde:	bf08      	it	eq
 800cce0:	68ec      	ldreq	r4, [r5, #12]
 800cce2:	e7e6      	b.n	800ccb2 <__swsetup_r+0x1e>
 800cce4:	0758      	lsls	r0, r3, #29
 800cce6:	d512      	bpl.n	800cd0e <__swsetup_r+0x7a>
 800cce8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ccea:	b141      	cbz	r1, 800ccfe <__swsetup_r+0x6a>
 800ccec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ccf0:	4299      	cmp	r1, r3
 800ccf2:	d002      	beq.n	800ccfa <__swsetup_r+0x66>
 800ccf4:	4630      	mov	r0, r6
 800ccf6:	f7ff fad3 	bl	800c2a0 <_free_r>
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	6363      	str	r3, [r4, #52]	; 0x34
 800ccfe:	89a3      	ldrh	r3, [r4, #12]
 800cd00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cd04:	81a3      	strh	r3, [r4, #12]
 800cd06:	2300      	movs	r3, #0
 800cd08:	6063      	str	r3, [r4, #4]
 800cd0a:	6923      	ldr	r3, [r4, #16]
 800cd0c:	6023      	str	r3, [r4, #0]
 800cd0e:	89a3      	ldrh	r3, [r4, #12]
 800cd10:	f043 0308 	orr.w	r3, r3, #8
 800cd14:	81a3      	strh	r3, [r4, #12]
 800cd16:	6923      	ldr	r3, [r4, #16]
 800cd18:	b94b      	cbnz	r3, 800cd2e <__swsetup_r+0x9a>
 800cd1a:	89a3      	ldrh	r3, [r4, #12]
 800cd1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cd20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd24:	d003      	beq.n	800cd2e <__swsetup_r+0x9a>
 800cd26:	4621      	mov	r1, r4
 800cd28:	4630      	mov	r0, r6
 800cd2a:	f000 f847 	bl	800cdbc <__smakebuf_r>
 800cd2e:	89a0      	ldrh	r0, [r4, #12]
 800cd30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd34:	f010 0301 	ands.w	r3, r0, #1
 800cd38:	d00a      	beq.n	800cd50 <__swsetup_r+0xbc>
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	60a3      	str	r3, [r4, #8]
 800cd3e:	6963      	ldr	r3, [r4, #20]
 800cd40:	425b      	negs	r3, r3
 800cd42:	61a3      	str	r3, [r4, #24]
 800cd44:	6923      	ldr	r3, [r4, #16]
 800cd46:	b943      	cbnz	r3, 800cd5a <__swsetup_r+0xc6>
 800cd48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cd4c:	d1ba      	bne.n	800ccc4 <__swsetup_r+0x30>
 800cd4e:	bd70      	pop	{r4, r5, r6, pc}
 800cd50:	0781      	lsls	r1, r0, #30
 800cd52:	bf58      	it	pl
 800cd54:	6963      	ldrpl	r3, [r4, #20]
 800cd56:	60a3      	str	r3, [r4, #8]
 800cd58:	e7f4      	b.n	800cd44 <__swsetup_r+0xb0>
 800cd5a:	2000      	movs	r0, #0
 800cd5c:	e7f7      	b.n	800cd4e <__swsetup_r+0xba>
 800cd5e:	bf00      	nop
 800cd60:	2400001c 	.word	0x2400001c
 800cd64:	0800d5a4 	.word	0x0800d5a4
 800cd68:	0800d5c4 	.word	0x0800d5c4
 800cd6c:	0800d584 	.word	0x0800d584

0800cd70 <__swhatbuf_r>:
 800cd70:	b570      	push	{r4, r5, r6, lr}
 800cd72:	460e      	mov	r6, r1
 800cd74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd78:	2900      	cmp	r1, #0
 800cd7a:	b096      	sub	sp, #88	; 0x58
 800cd7c:	4614      	mov	r4, r2
 800cd7e:	461d      	mov	r5, r3
 800cd80:	da08      	bge.n	800cd94 <__swhatbuf_r+0x24>
 800cd82:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cd86:	2200      	movs	r2, #0
 800cd88:	602a      	str	r2, [r5, #0]
 800cd8a:	061a      	lsls	r2, r3, #24
 800cd8c:	d410      	bmi.n	800cdb0 <__swhatbuf_r+0x40>
 800cd8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd92:	e00e      	b.n	800cdb2 <__swhatbuf_r+0x42>
 800cd94:	466a      	mov	r2, sp
 800cd96:	f000 f89b 	bl	800ced0 <_fstat_r>
 800cd9a:	2800      	cmp	r0, #0
 800cd9c:	dbf1      	blt.n	800cd82 <__swhatbuf_r+0x12>
 800cd9e:	9a01      	ldr	r2, [sp, #4]
 800cda0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cda4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cda8:	425a      	negs	r2, r3
 800cdaa:	415a      	adcs	r2, r3
 800cdac:	602a      	str	r2, [r5, #0]
 800cdae:	e7ee      	b.n	800cd8e <__swhatbuf_r+0x1e>
 800cdb0:	2340      	movs	r3, #64	; 0x40
 800cdb2:	2000      	movs	r0, #0
 800cdb4:	6023      	str	r3, [r4, #0]
 800cdb6:	b016      	add	sp, #88	; 0x58
 800cdb8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cdbc <__smakebuf_r>:
 800cdbc:	898b      	ldrh	r3, [r1, #12]
 800cdbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cdc0:	079d      	lsls	r5, r3, #30
 800cdc2:	4606      	mov	r6, r0
 800cdc4:	460c      	mov	r4, r1
 800cdc6:	d507      	bpl.n	800cdd8 <__smakebuf_r+0x1c>
 800cdc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cdcc:	6023      	str	r3, [r4, #0]
 800cdce:	6123      	str	r3, [r4, #16]
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	6163      	str	r3, [r4, #20]
 800cdd4:	b002      	add	sp, #8
 800cdd6:	bd70      	pop	{r4, r5, r6, pc}
 800cdd8:	ab01      	add	r3, sp, #4
 800cdda:	466a      	mov	r2, sp
 800cddc:	f7ff ffc8 	bl	800cd70 <__swhatbuf_r>
 800cde0:	9900      	ldr	r1, [sp, #0]
 800cde2:	4605      	mov	r5, r0
 800cde4:	4630      	mov	r0, r6
 800cde6:	f7fe ffef 	bl	800bdc8 <_malloc_r>
 800cdea:	b948      	cbnz	r0, 800ce00 <__smakebuf_r+0x44>
 800cdec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdf0:	059a      	lsls	r2, r3, #22
 800cdf2:	d4ef      	bmi.n	800cdd4 <__smakebuf_r+0x18>
 800cdf4:	f023 0303 	bic.w	r3, r3, #3
 800cdf8:	f043 0302 	orr.w	r3, r3, #2
 800cdfc:	81a3      	strh	r3, [r4, #12]
 800cdfe:	e7e3      	b.n	800cdc8 <__smakebuf_r+0xc>
 800ce00:	4b0d      	ldr	r3, [pc, #52]	; (800ce38 <__smakebuf_r+0x7c>)
 800ce02:	62b3      	str	r3, [r6, #40]	; 0x28
 800ce04:	89a3      	ldrh	r3, [r4, #12]
 800ce06:	6020      	str	r0, [r4, #0]
 800ce08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce0c:	81a3      	strh	r3, [r4, #12]
 800ce0e:	9b00      	ldr	r3, [sp, #0]
 800ce10:	6163      	str	r3, [r4, #20]
 800ce12:	9b01      	ldr	r3, [sp, #4]
 800ce14:	6120      	str	r0, [r4, #16]
 800ce16:	b15b      	cbz	r3, 800ce30 <__smakebuf_r+0x74>
 800ce18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce1c:	4630      	mov	r0, r6
 800ce1e:	f000 f869 	bl	800cef4 <_isatty_r>
 800ce22:	b128      	cbz	r0, 800ce30 <__smakebuf_r+0x74>
 800ce24:	89a3      	ldrh	r3, [r4, #12]
 800ce26:	f023 0303 	bic.w	r3, r3, #3
 800ce2a:	f043 0301 	orr.w	r3, r3, #1
 800ce2e:	81a3      	strh	r3, [r4, #12]
 800ce30:	89a0      	ldrh	r0, [r4, #12]
 800ce32:	4305      	orrs	r5, r0
 800ce34:	81a5      	strh	r5, [r4, #12]
 800ce36:	e7cd      	b.n	800cdd4 <__smakebuf_r+0x18>
 800ce38:	0800bb69 	.word	0x0800bb69

0800ce3c <memmove>:
 800ce3c:	4288      	cmp	r0, r1
 800ce3e:	b510      	push	{r4, lr}
 800ce40:	eb01 0402 	add.w	r4, r1, r2
 800ce44:	d902      	bls.n	800ce4c <memmove+0x10>
 800ce46:	4284      	cmp	r4, r0
 800ce48:	4623      	mov	r3, r4
 800ce4a:	d807      	bhi.n	800ce5c <memmove+0x20>
 800ce4c:	1e43      	subs	r3, r0, #1
 800ce4e:	42a1      	cmp	r1, r4
 800ce50:	d008      	beq.n	800ce64 <memmove+0x28>
 800ce52:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce56:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce5a:	e7f8      	b.n	800ce4e <memmove+0x12>
 800ce5c:	4402      	add	r2, r0
 800ce5e:	4601      	mov	r1, r0
 800ce60:	428a      	cmp	r2, r1
 800ce62:	d100      	bne.n	800ce66 <memmove+0x2a>
 800ce64:	bd10      	pop	{r4, pc}
 800ce66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce6e:	e7f7      	b.n	800ce60 <memmove+0x24>

0800ce70 <_realloc_r>:
 800ce70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce74:	4680      	mov	r8, r0
 800ce76:	4614      	mov	r4, r2
 800ce78:	460e      	mov	r6, r1
 800ce7a:	b921      	cbnz	r1, 800ce86 <_realloc_r+0x16>
 800ce7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce80:	4611      	mov	r1, r2
 800ce82:	f7fe bfa1 	b.w	800bdc8 <_malloc_r>
 800ce86:	b92a      	cbnz	r2, 800ce94 <_realloc_r+0x24>
 800ce88:	f7ff fa0a 	bl	800c2a0 <_free_r>
 800ce8c:	4625      	mov	r5, r4
 800ce8e:	4628      	mov	r0, r5
 800ce90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce94:	f000 f83e 	bl	800cf14 <_malloc_usable_size_r>
 800ce98:	4284      	cmp	r4, r0
 800ce9a:	4607      	mov	r7, r0
 800ce9c:	d802      	bhi.n	800cea4 <_realloc_r+0x34>
 800ce9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cea2:	d812      	bhi.n	800ceca <_realloc_r+0x5a>
 800cea4:	4621      	mov	r1, r4
 800cea6:	4640      	mov	r0, r8
 800cea8:	f7fe ff8e 	bl	800bdc8 <_malloc_r>
 800ceac:	4605      	mov	r5, r0
 800ceae:	2800      	cmp	r0, #0
 800ceb0:	d0ed      	beq.n	800ce8e <_realloc_r+0x1e>
 800ceb2:	42bc      	cmp	r4, r7
 800ceb4:	4622      	mov	r2, r4
 800ceb6:	4631      	mov	r1, r6
 800ceb8:	bf28      	it	cs
 800ceba:	463a      	movcs	r2, r7
 800cebc:	f7fe ff4d 	bl	800bd5a <memcpy>
 800cec0:	4631      	mov	r1, r6
 800cec2:	4640      	mov	r0, r8
 800cec4:	f7ff f9ec 	bl	800c2a0 <_free_r>
 800cec8:	e7e1      	b.n	800ce8e <_realloc_r+0x1e>
 800ceca:	4635      	mov	r5, r6
 800cecc:	e7df      	b.n	800ce8e <_realloc_r+0x1e>
	...

0800ced0 <_fstat_r>:
 800ced0:	b538      	push	{r3, r4, r5, lr}
 800ced2:	4d07      	ldr	r5, [pc, #28]	; (800cef0 <_fstat_r+0x20>)
 800ced4:	2300      	movs	r3, #0
 800ced6:	4604      	mov	r4, r0
 800ced8:	4608      	mov	r0, r1
 800ceda:	4611      	mov	r1, r2
 800cedc:	602b      	str	r3, [r5, #0]
 800cede:	f7f5 fca2 	bl	8002826 <_fstat>
 800cee2:	1c43      	adds	r3, r0, #1
 800cee4:	d102      	bne.n	800ceec <_fstat_r+0x1c>
 800cee6:	682b      	ldr	r3, [r5, #0]
 800cee8:	b103      	cbz	r3, 800ceec <_fstat_r+0x1c>
 800ceea:	6023      	str	r3, [r4, #0]
 800ceec:	bd38      	pop	{r3, r4, r5, pc}
 800ceee:	bf00      	nop
 800cef0:	24004f7c 	.word	0x24004f7c

0800cef4 <_isatty_r>:
 800cef4:	b538      	push	{r3, r4, r5, lr}
 800cef6:	4d06      	ldr	r5, [pc, #24]	; (800cf10 <_isatty_r+0x1c>)
 800cef8:	2300      	movs	r3, #0
 800cefa:	4604      	mov	r4, r0
 800cefc:	4608      	mov	r0, r1
 800cefe:	602b      	str	r3, [r5, #0]
 800cf00:	f7f5 fca1 	bl	8002846 <_isatty>
 800cf04:	1c43      	adds	r3, r0, #1
 800cf06:	d102      	bne.n	800cf0e <_isatty_r+0x1a>
 800cf08:	682b      	ldr	r3, [r5, #0]
 800cf0a:	b103      	cbz	r3, 800cf0e <_isatty_r+0x1a>
 800cf0c:	6023      	str	r3, [r4, #0]
 800cf0e:	bd38      	pop	{r3, r4, r5, pc}
 800cf10:	24004f7c 	.word	0x24004f7c

0800cf14 <_malloc_usable_size_r>:
 800cf14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf18:	1f18      	subs	r0, r3, #4
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	bfbc      	itt	lt
 800cf1e:	580b      	ldrlt	r3, [r1, r0]
 800cf20:	18c0      	addlt	r0, r0, r3
 800cf22:	4770      	bx	lr

0800cf24 <_init>:
 800cf24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf26:	bf00      	nop
 800cf28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf2a:	bc08      	pop	{r3}
 800cf2c:	469e      	mov	lr, r3
 800cf2e:	4770      	bx	lr

0800cf30 <_fini>:
 800cf30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf32:	bf00      	nop
 800cf34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf36:	bc08      	pop	{r3}
 800cf38:	469e      	mov	lr, r3
 800cf3a:	4770      	bx	lr
