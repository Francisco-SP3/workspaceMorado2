
tractorDeere_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ccc0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e8  0800cf60  0800cf60  0001cf60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d648  0800d648  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800d648  0800d648  0001d648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d650  0800d650  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d650  0800d650  0001d650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d654  0800d654  0001d654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  24000000  0800d658  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e78  24000080  0800d6d8  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24004ef8  0800d6d8  00024ef8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b0e6  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004810  00000000  00000000  0004b194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002080  00000000  00000000  0004f9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ed8  00000000  00000000  00051a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ee33  00000000  00000000  00053900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024d73  00000000  00000000  00092733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019f7d8  00000000  00000000  000b74a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00256c7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009544  00000000  00000000  00256cd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000080 	.word	0x24000080
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800cf48 	.word	0x0800cf48

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000084 	.word	0x24000084
 80002dc:	0800cf48 	.word	0x0800cf48

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <NRF24_DelayMicroSeconds+0x3c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a0b      	ldr	r2, [pc, #44]	; (8000800 <NRF24_DelayMicroSeconds+0x40>)
 80007d2:	fba2 2303 	umull	r2, r3, r2, r3
 80007d6:	0c9a      	lsrs	r2, r3, #18
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	fb02 f303 	mul.w	r3, r2, r3
 80007de:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80007e0:	bf00      	nop
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	1e5a      	subs	r2, r3, #1
 80007e6:	60fa      	str	r2, [r7, #12]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1fa      	bne.n	80007e2 <NRF24_DelayMicroSeconds+0x22>
}
 80007ec:	bf00      	nop
 80007ee:	bf00      	nop
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	24000000 	.word	0x24000000
 8000800:	165e9f81 	.word	0x165e9f81

08000804 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d008      	beq.n	8000824 <NRF24_csn+0x20>
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <NRF24_csn+0x38>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <NRF24_csn+0x3c>)
 8000818:	8811      	ldrh	r1, [r2, #0]
 800081a:	2201      	movs	r2, #1
 800081c:	4618      	mov	r0, r3
 800081e:	f002 fe55 	bl	80034cc <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000822:	e007      	b.n	8000834 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <NRF24_csn+0x38>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a05      	ldr	r2, [pc, #20]	; (8000840 <NRF24_csn+0x3c>)
 800082a:	8811      	ldrh	r1, [r2, #0]
 800082c:	2200      	movs	r2, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f002 fe4c 	bl	80034cc <HAL_GPIO_WritePin>
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	240000ac 	.word	0x240000ac
 8000840:	240000b0 	.word	0x240000b0

08000844 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d008      	beq.n	8000864 <NRF24_ce+0x20>
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <NRF24_ce+0x38>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <NRF24_ce+0x3c>)
 8000858:	8811      	ldrh	r1, [r2, #0]
 800085a:	2201      	movs	r2, #1
 800085c:	4618      	mov	r0, r3
 800085e:	f002 fe35 	bl	80034cc <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000862:	e007      	b.n	8000874 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <NRF24_ce+0x38>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a05      	ldr	r2, [pc, #20]	; (8000880 <NRF24_ce+0x3c>)
 800086a:	8811      	ldrh	r1, [r2, #0]
 800086c:	2200      	movs	r2, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f002 fe2c 	bl	80034cc <HAL_GPIO_WritePin>
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	240000ac 	.word	0x240000ac
 8000880:	240000b2 	.word	0x240000b2

08000884 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff ffb8 	bl	8000804 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	f003 031f 	and.w	r3, r3, #31
 800089a:	b2db      	uxtb	r3, r3
 800089c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800089e:	f107 010c 	add.w	r1, r7, #12
 80008a2:	2364      	movs	r3, #100	; 0x64
 80008a4:	2201      	movs	r2, #1
 80008a6:	480a      	ldr	r0, [pc, #40]	; (80008d0 <NRF24_read_register+0x4c>)
 80008a8:	f005 fb1c 	bl	8005ee4 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	1c59      	adds	r1, r3, #1
 80008b2:	2364      	movs	r3, #100	; 0x64
 80008b4:	2201      	movs	r2, #1
 80008b6:	4806      	ldr	r0, [pc, #24]	; (80008d0 <NRF24_read_register+0x4c>)
 80008b8:	f005 fd06 	bl	80062c8 <HAL_SPI_Receive>
	retData = spiBuf[1];
 80008bc:	7b7b      	ldrb	r3, [r7, #13]
 80008be:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 80008c0:	2001      	movs	r0, #1
 80008c2:	f7ff ff9f 	bl	8000804 <NRF24_csn>
	return retData;
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	240000b4 	.word	0x240000b4

080008d4 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	6039      	str	r1, [r7, #0]
 80008de:	71fb      	strb	r3, [r7, #7]
 80008e0:	4613      	mov	r3, r2
 80008e2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80008e4:	2000      	movs	r0, #0
 80008e6:	f7ff ff8d 	bl	8000804 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	f003 031f 	and.w	r3, r3, #31
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80008f4:	f107 010c 	add.w	r1, r7, #12
 80008f8:	2364      	movs	r3, #100	; 0x64
 80008fa:	2201      	movs	r2, #1
 80008fc:	4808      	ldr	r0, [pc, #32]	; (8000920 <NRF24_read_registerN+0x4c>)
 80008fe:	f005 faf1 	bl	8005ee4 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000902:	79bb      	ldrb	r3, [r7, #6]
 8000904:	b29a      	uxth	r2, r3
 8000906:	2364      	movs	r3, #100	; 0x64
 8000908:	6839      	ldr	r1, [r7, #0]
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <NRF24_read_registerN+0x4c>)
 800090c:	f005 fcdc 	bl	80062c8 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000910:	2001      	movs	r0, #1
 8000912:	f7ff ff77 	bl	8000804 <NRF24_csn>
}
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	240000b4 	.word	0x240000b4

08000924 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	460a      	mov	r2, r1
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	4613      	mov	r3, r2
 8000932:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000934:	2000      	movs	r0, #0
 8000936:	f7ff ff65 	bl	8000804 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	f043 0320 	orr.w	r3, r3, #32
 8000940:	b2db      	uxtb	r3, r3
 8000942:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000944:	79bb      	ldrb	r3, [r7, #6]
 8000946:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000948:	f107 010c 	add.w	r1, r7, #12
 800094c:	2364      	movs	r3, #100	; 0x64
 800094e:	2202      	movs	r2, #2
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <NRF24_write_register+0x40>)
 8000952:	f005 fac7 	bl	8005ee4 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000956:	2001      	movs	r0, #1
 8000958:	f7ff ff54 	bl	8000804 <NRF24_csn>
}
 800095c:	bf00      	nop
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	240000b4 	.word	0x240000b4

08000968 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	6039      	str	r1, [r7, #0]
 8000972:	71fb      	strb	r3, [r7, #7]
 8000974:	4613      	mov	r3, r2
 8000976:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000978:	2000      	movs	r0, #0
 800097a:	f7ff ff43 	bl	8000804 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	f043 0320 	orr.w	r3, r3, #32
 8000984:	b2db      	uxtb	r3, r3
 8000986:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000988:	f107 010c 	add.w	r1, r7, #12
 800098c:	2364      	movs	r3, #100	; 0x64
 800098e:	2201      	movs	r2, #1
 8000990:	4808      	ldr	r0, [pc, #32]	; (80009b4 <NRF24_write_registerN+0x4c>)
 8000992:	f005 faa7 	bl	8005ee4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000996:	79bb      	ldrb	r3, [r7, #6]
 8000998:	b29a      	uxth	r2, r3
 800099a:	2364      	movs	r3, #100	; 0x64
 800099c:	6839      	ldr	r1, [r7, #0]
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <NRF24_write_registerN+0x4c>)
 80009a0:	f005 faa0 	bl	8005ee4 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80009a4:	2001      	movs	r0, #1
 80009a6:	f7ff ff2d 	bl	8000804 <NRF24_csn>
}
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	240000b4 	.word	0x240000b4

080009b8 <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	460b      	mov	r3, r1
 80009c2:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 80009c4:	f000 fa0a 	bl	8000ddc <NRF24_getPayloadSize>
 80009c8:	4603      	mov	r3, r0
 80009ca:	461a      	mov	r2, r3
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d303      	bcc.n	80009da <NRF24_read_payload+0x22>
 80009d2:	f000 fa03 	bl	8000ddc <NRF24_getPayloadSize>
 80009d6:	4603      	mov	r3, r0
 80009d8:	e000      	b.n	80009dc <NRF24_read_payload+0x24>
 80009da:	78fb      	ldrb	r3, [r7, #3]
 80009dc:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80009de:	2000      	movs	r0, #0
 80009e0:	f7ff ff10 	bl	8000804 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 80009e4:	2361      	movs	r3, #97	; 0x61
 80009e6:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 80009e8:	f107 010e 	add.w	r1, r7, #14
 80009ec:	2364      	movs	r3, #100	; 0x64
 80009ee:	2201      	movs	r2, #1
 80009f0:	4808      	ldr	r0, [pc, #32]	; (8000a14 <NRF24_read_payload+0x5c>)
 80009f2:	f005 fa77 	bl	8005ee4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	2364      	movs	r3, #100	; 0x64
 80009fc:	6879      	ldr	r1, [r7, #4]
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <NRF24_read_payload+0x5c>)
 8000a00:	f005 fc62 	bl	80062c8 <HAL_SPI_Receive>
	NRF24_csn(1);
 8000a04:	2001      	movs	r0, #1
 8000a06:	f7ff fefd 	bl	8000804 <NRF24_csn>
}
 8000a0a:	bf00      	nop
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	240000b4 	.word	0x240000b4

08000a18 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000a1c:	21ff      	movs	r1, #255	; 0xff
 8000a1e:	20e1      	movs	r0, #225	; 0xe1
 8000a20:	f7ff ff80 	bl	8000924 <NRF24_write_register>
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000a2c:	21ff      	movs	r1, #255	; 0xff
 8000a2e:	20e2      	movs	r0, #226	; 0xe2
 8000a30:	f7ff ff78 	bl	8000924 <NRF24_write_register>
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8000a3e:	2007      	movs	r0, #7
 8000a40:	f7ff ff20 	bl	8000884 <NRF24_read_register>
 8000a44:	4603      	mov	r3, r0
 8000a46:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000a48:	79fb      	ldrb	r3, [r7, #7]
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000a54:	b082      	sub	sp, #8
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b084      	sub	sp, #16
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	61fb      	str	r3, [r7, #28]
 8000a60:	460b      	mov	r3, r1
 8000a62:	807b      	strh	r3, [r7, #2]
 8000a64:	4613      	mov	r3, r2
 8000a66:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000a68:	4b66      	ldr	r3, [pc, #408]	; (8000c04 <NRF24_begin+0x1b0>)
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	2288      	movs	r2, #136	; 0x88
 8000a72:	4619      	mov	r1, r3
 8000a74:	f00b f90d 	bl	800bc92 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000a78:	4a63      	ldr	r2, [pc, #396]	; (8000c08 <NRF24_begin+0x1b4>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000a7e:	4a63      	ldr	r2, [pc, #396]	; (8000c0c <NRF24_begin+0x1b8>)
 8000a80:	887b      	ldrh	r3, [r7, #2]
 8000a82:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000a84:	4a62      	ldr	r2, [pc, #392]	; (8000c10 <NRF24_begin+0x1bc>)
 8000a86:	883b      	ldrh	r3, [r7, #0]
 8000a88:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	f7ff feba 	bl	8000804 <NRF24_csn>
	NRF24_ce(0);
 8000a90:	2000      	movs	r0, #0
 8000a92:	f7ff fed7 	bl	8000844 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000a96:	2005      	movs	r0, #5
 8000a98:	f001 fef4 	bl	8002884 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000a9c:	2108      	movs	r1, #8
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f7ff ff40 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000aa4:	213f      	movs	r1, #63	; 0x3f
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f7ff ff3c 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000aac:	2103      	movs	r1, #3
 8000aae:	2002      	movs	r0, #2
 8000ab0:	f7ff ff38 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000ab4:	2103      	movs	r1, #3
 8000ab6:	2003      	movs	r0, #3
 8000ab8:	f7ff ff34 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000abc:	2103      	movs	r1, #3
 8000abe:	2004      	movs	r0, #4
 8000ac0:	f7ff ff30 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000ac4:	2102      	movs	r1, #2
 8000ac6:	2005      	movs	r0, #5
 8000ac8:	f7ff ff2c 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000acc:	210f      	movs	r1, #15
 8000ace:	2006      	movs	r0, #6
 8000ad0:	f7ff ff28 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000ad4:	210e      	movs	r1, #14
 8000ad6:	2007      	movs	r0, #7
 8000ad8:	f7ff ff24 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000adc:	2100      	movs	r1, #0
 8000ade:	2008      	movs	r0, #8
 8000ae0:	f7ff ff20 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2009      	movs	r0, #9
 8000ae8:	f7ff ff1c 	bl	8000924 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000aec:	23e7      	movs	r3, #231	; 0xe7
 8000aee:	733b      	strb	r3, [r7, #12]
 8000af0:	23e7      	movs	r3, #231	; 0xe7
 8000af2:	72fb      	strb	r3, [r7, #11]
 8000af4:	23e7      	movs	r3, #231	; 0xe7
 8000af6:	72bb      	strb	r3, [r7, #10]
 8000af8:	23e7      	movs	r3, #231	; 0xe7
 8000afa:	727b      	strb	r3, [r7, #9]
 8000afc:	23e7      	movs	r3, #231	; 0xe7
 8000afe:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	2205      	movs	r2, #5
 8000b06:	4619      	mov	r1, r3
 8000b08:	200a      	movs	r0, #10
 8000b0a:	f7ff ff2d 	bl	8000968 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 8000b0e:	23c2      	movs	r3, #194	; 0xc2
 8000b10:	733b      	strb	r3, [r7, #12]
 8000b12:	23c2      	movs	r3, #194	; 0xc2
 8000b14:	72fb      	strb	r3, [r7, #11]
 8000b16:	23c2      	movs	r3, #194	; 0xc2
 8000b18:	72bb      	strb	r3, [r7, #10]
 8000b1a:	23c2      	movs	r3, #194	; 0xc2
 8000b1c:	727b      	strb	r3, [r7, #9]
 8000b1e:	23c2      	movs	r3, #194	; 0xc2
 8000b20:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000b22:	f107 0308 	add.w	r3, r7, #8
 8000b26:	2205      	movs	r2, #5
 8000b28:	4619      	mov	r1, r3
 8000b2a:	200b      	movs	r0, #11
 8000b2c:	f7ff ff1c 	bl	8000968 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000b30:	21c3      	movs	r1, #195	; 0xc3
 8000b32:	200c      	movs	r0, #12
 8000b34:	f7ff fef6 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000b38:	21c4      	movs	r1, #196	; 0xc4
 8000b3a:	200d      	movs	r0, #13
 8000b3c:	f7ff fef2 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000b40:	21c5      	movs	r1, #197	; 0xc5
 8000b42:	200e      	movs	r0, #14
 8000b44:	f7ff feee 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000b48:	21c6      	movs	r1, #198	; 0xc6
 8000b4a:	200f      	movs	r0, #15
 8000b4c:	f7ff feea 	bl	8000924 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000b50:	23e7      	movs	r3, #231	; 0xe7
 8000b52:	733b      	strb	r3, [r7, #12]
 8000b54:	23e7      	movs	r3, #231	; 0xe7
 8000b56:	72fb      	strb	r3, [r7, #11]
 8000b58:	23e7      	movs	r3, #231	; 0xe7
 8000b5a:	72bb      	strb	r3, [r7, #10]
 8000b5c:	23e7      	movs	r3, #231	; 0xe7
 8000b5e:	727b      	strb	r3, [r7, #9]
 8000b60:	23e7      	movs	r3, #231	; 0xe7
 8000b62:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000b64:	f107 0308 	add.w	r3, r7, #8
 8000b68:	2205      	movs	r2, #5
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	2010      	movs	r0, #16
 8000b6e:	f7ff fefb 	bl	8000968 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000b72:	2100      	movs	r1, #0
 8000b74:	2011      	movs	r0, #17
 8000b76:	f7ff fed5 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2012      	movs	r0, #18
 8000b7e:	f7ff fed1 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000b82:	2100      	movs	r1, #0
 8000b84:	2013      	movs	r0, #19
 8000b86:	f7ff fecd 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2014      	movs	r0, #20
 8000b8e:	f7ff fec9 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000b92:	2100      	movs	r1, #0
 8000b94:	2015      	movs	r0, #21
 8000b96:	f7ff fec5 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	2016      	movs	r0, #22
 8000b9e:	f7ff fec1 	bl	8000924 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8000ba2:	f000 fa7d 	bl	80010a0 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	201c      	movs	r0, #28
 8000baa:	f7ff febb 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000bae:	2100      	movs	r1, #0
 8000bb0:	201d      	movs	r0, #29
 8000bb2:	f7ff feb7 	bl	8000924 <NRF24_write_register>
	printRadioSettings();
 8000bb6:	f000 fa8d 	bl	80010d4 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000bba:	210f      	movs	r1, #15
 8000bbc:	200f      	movs	r0, #15
 8000bbe:	f000 f8c5 	bl	8000d4c <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000bc2:	2003      	movs	r0, #3
 8000bc4:	f000 f97d 	bl	8000ec2 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f000 f9b3 	bl	8000f34 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000bce:	2002      	movs	r0, #2
 8000bd0:	f000 f9f6 	bl	8000fc0 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000bd4:	f000 f948 	bl	8000e68 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000bd8:	2020      	movs	r0, #32
 8000bda:	f000 f8e7 	bl	8000dac <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 8000bde:	f000 fa56 	bl	800108e <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000be2:	204c      	movs	r0, #76	; 0x4c
 8000be4:	f000 f8cd 	bl	8000d82 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000be8:	f7ff ff16 	bl	8000a18 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000bec:	f7ff ff1c 	bl	8000a28 <NRF24_flush_rx>

	NRF24_powerDown();
 8000bf0:	f000 fa0e 	bl	8001010 <NRF24_powerDown>

}
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bfe:	b002      	add	sp, #8
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	240000b4 	.word	0x240000b4
 8000c08:	240000ac 	.word	0x240000ac
 8000c0c:	240000b0 	.word	0x240000b0
 8000c10:	240000b2 	.word	0x240000b2

08000c14 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f7ff fe33 	bl	8000884 <NRF24_read_register>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	f043 0303 	orr.w	r3, r3, #3
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	4619      	mov	r1, r3
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f7ff fe7b 	bl	8000924 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <NRF24_startListening+0x48>)
 8000c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	d004      	beq.n	8000c42 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8000c38:	2205      	movs	r2, #5
 8000c3a:	4908      	ldr	r1, [pc, #32]	; (8000c5c <NRF24_startListening+0x48>)
 8000c3c:	200a      	movs	r0, #10
 8000c3e:	f7ff fe93 	bl	8000968 <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 8000c42:	f7ff fee9 	bl	8000a18 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000c46:	f7ff feef 	bl	8000a28 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f7ff fdfa 	bl	8000844 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8000c50:	2096      	movs	r0, #150	; 0x96
 8000c52:	f7ff fdb5 	bl	80007c0 <NRF24_DelayMicroSeconds>
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	240000a0 	.word	0x240000a0

08000c60 <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000c64:	2000      	movs	r0, #0
 8000c66:	f000 f9e2 	bl	800102e <NRF24_availablePipe>
 8000c6a:	4603      	mov	r3, r0
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8000c7c:	78fb      	ldrb	r3, [r7, #3]
 8000c7e:	4619      	mov	r1, r3
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff fe99 	bl	80009b8 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8000c86:	2017      	movs	r0, #23
 8000c88:	f7ff fdfc 	bl	8000884 <NRF24_read_register>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8000c94:	f7ff fec8 	bl	8000a28 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8000c98:	f000 f8ac 	bl	8000df4 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	bf14      	ite	ne
 8000ca2:	2301      	movne	r3, #1
 8000ca4:	2300      	moveq	r3, #0
 8000ca6:	b2db      	uxtb	r3, r3
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4601      	mov	r1, r0
 8000cb8:	e9c7 2300 	strd	r2, r3, [r7]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d104      	bne.n	8000cd0 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8000cc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000cca:	491c      	ldr	r1, [pc, #112]	; (8000d3c <NRF24_openReadingPipe+0x8c>)
 8000ccc:	e9c1 2300 	strd	r2, r3, [r1]

	if(number <= 6)
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d82d      	bhi.n	8000d32 <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d808      	bhi.n	8000cee <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	4a18      	ldr	r2, [pc, #96]	; (8000d40 <NRF24_openReadingPipe+0x90>)
 8000ce0:	5cd3      	ldrb	r3, [r2, r3]
 8000ce2:	4639      	mov	r1, r7
 8000ce4:	2205      	movs	r2, #5
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fe3e 	bl	8000968 <NRF24_write_registerN>
 8000cec:	e007      	b.n	8000cfe <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
 8000cf0:	4a13      	ldr	r2, [pc, #76]	; (8000d40 <NRF24_openReadingPipe+0x90>)
 8000cf2:	5cd3      	ldrb	r3, [r2, r3]
 8000cf4:	4639      	mov	r1, r7
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fe35 	bl	8000968 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	4a10      	ldr	r2, [pc, #64]	; (8000d44 <NRF24_openReadingPipe+0x94>)
 8000d02:	5cd3      	ldrb	r3, [r2, r3]
 8000d04:	4a10      	ldr	r2, [pc, #64]	; (8000d48 <NRF24_openReadingPipe+0x98>)
 8000d06:	7812      	ldrb	r2, [r2, #0]
 8000d08:	4611      	mov	r1, r2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fe0a 	bl	8000924 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8000d10:	2002      	movs	r0, #2
 8000d12:	f7ff fdb7 	bl	8000884 <NRF24_read_register>
 8000d16:	4603      	mov	r3, r0
 8000d18:	b25a      	sxtb	r2, r3
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	b25b      	sxtb	r3, r3
 8000d24:	4313      	orrs	r3, r2
 8000d26:	b25b      	sxtb	r3, r3
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	2002      	movs	r0, #2
 8000d2e:	f7ff fdf9 	bl	8000924 <NRF24_write_register>
	}

}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	240000a0 	.word	0x240000a0
 8000d40:	0800d554 	.word	0x0800d554
 8000d44:	0800d55c 	.word	0x0800d55c
 8000d48:	240000a8 	.word	0x240000a8

08000d4c <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	460a      	mov	r2, r1
 8000d56:	71fb      	strb	r3, [r7, #7]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	011b      	lsls	r3, r3, #4
 8000d60:	b25a      	sxtb	r2, r3
 8000d62:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	b25b      	sxtb	r3, r3
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	4619      	mov	r1, r3
 8000d74:	2004      	movs	r0, #4
 8000d76:	f7ff fdd5 	bl	8000924 <NRF24_write_register>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b084      	sub	sp, #16
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000d8c:	237f      	movs	r3, #127	; 0x7f
 8000d8e:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000d90:	7bfa      	ldrb	r2, [r7, #15]
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	4293      	cmp	r3, r2
 8000d96:	bf28      	it	cs
 8000d98:	4613      	movcs	r3, r2
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	2005      	movs	r0, #5
 8000da0:	f7ff fdc0 	bl	8000924 <NRF24_write_register>
}
 8000da4:	bf00      	nop
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000db6:	2320      	movs	r3, #32
 8000db8:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000dba:	7bfa      	ldrb	r2, [r7, #15]
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	bf28      	it	cs
 8000dc2:	4613      	movcs	r3, r2
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <NRF24_setPayloadSize+0x2c>)
 8000dc8:	701a      	strb	r2, [r3, #0]
}
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	240000a8 	.word	0x240000a8

08000ddc <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
	return payload_size;
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <NRF24_getPayloadSize+0x14>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	240000a8 	.word	0x240000a8

08000df4 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000df8:	2060      	movs	r0, #96	; 0x60
 8000dfa:	f7ff fd43 	bl	8000884 <NRF24_read_register>
 8000dfe:	4603      	mov	r3, r0
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <NRF24_enableDynamicPayloads>:
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
}
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000e08:	201d      	movs	r0, #29
 8000e0a:	f7ff fd3b 	bl	8000884 <NRF24_read_register>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	f043 0304 	orr.w	r3, r3, #4
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	4619      	mov	r1, r3
 8000e18:	201d      	movs	r0, #29
 8000e1a:	f7ff fd83 	bl	8000924 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8000e1e:	201d      	movs	r0, #29
 8000e20:	f7ff fd30 	bl	8000884 <NRF24_read_register>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d10c      	bne.n	8000e44 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8000e2a:	f000 f939 	bl	80010a0 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000e2e:	201d      	movs	r0, #29
 8000e30:	f7ff fd28 	bl	8000884 <NRF24_read_register>
 8000e34:	4603      	mov	r3, r0
 8000e36:	f043 0304 	orr.w	r3, r3, #4
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	201d      	movs	r0, #29
 8000e40:	f7ff fd70 	bl	8000924 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8000e44:	201c      	movs	r0, #28
 8000e46:	f7ff fd1d 	bl	8000884 <NRF24_read_register>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	4619      	mov	r1, r3
 8000e54:	201c      	movs	r0, #28
 8000e56:	f7ff fd65 	bl	8000924 <NRF24_write_register>
  dynamic_payloads_enabled = true;
 8000e5a:	4b02      	ldr	r3, [pc, #8]	; (8000e64 <NRF24_enableDynamicPayloads+0x60>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	701a      	strb	r2, [r3, #0]

}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	240000a9 	.word	0x240000a9

08000e68 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000e6c:	201d      	movs	r0, #29
 8000e6e:	f7ff fd09 	bl	8000884 <NRF24_read_register>
 8000e72:	4603      	mov	r3, r0
 8000e74:	f023 0304 	bic.w	r3, r3, #4
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	201d      	movs	r0, #29
 8000e7e:	f7ff fd51 	bl	8000924 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8000e82:	2100      	movs	r1, #0
 8000e84:	201c      	movs	r0, #28
 8000e86:	f7ff fd4d 	bl	8000924 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000e8a:	4b02      	ldr	r3, [pc, #8]	; (8000e94 <NRF24_disableDynamicPayloads+0x2c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	701a      	strb	r2, [r3, #0]
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	240000a9 	.word	0x240000a9

08000e98 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d004      	beq.n	8000eb2 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000ea8:	213f      	movs	r1, #63	; 0x3f
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f7ff fd3a 	bl	8000924 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000eb0:	e003      	b.n	8000eba <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	f7ff fd35 	bl	8000924 <NRF24_write_register>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b084      	sub	sp, #16
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	4603      	mov	r3, r0
 8000eca:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000ecc:	2006      	movs	r0, #6
 8000ece:	f7ff fcd9 	bl	8000884 <NRF24_read_register>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000ed6:	7bfb      	ldrb	r3, [r7, #15]
 8000ed8:	f023 0306 	bic.w	r3, r3, #6
 8000edc:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	2b03      	cmp	r3, #3
 8000ee2:	d104      	bne.n	8000eee <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
 8000ee6:	f043 0306 	orr.w	r3, r3, #6
 8000eea:	73fb      	strb	r3, [r7, #15]
 8000eec:	e019      	b.n	8000f22 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d104      	bne.n	8000efe <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
 8000ef6:	f043 0304 	orr.w	r3, r3, #4
 8000efa:	73fb      	strb	r3, [r7, #15]
 8000efc:	e011      	b.n	8000f22 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d104      	bne.n	8000f0e <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	f043 0302 	orr.w	r3, r3, #2
 8000f0a:	73fb      	strb	r3, [r7, #15]
 8000f0c:	e009      	b.n	8000f22 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d006      	beq.n	8000f22 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	2b04      	cmp	r3, #4
 8000f18:	d103      	bne.n	8000f22 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	f043 0306 	orr.w	r3, r3, #6
 8000f20:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	4619      	mov	r1, r3
 8000f26:	2006      	movs	r0, #6
 8000f28:	f7ff fcfc 	bl	8000924 <NRF24_write_register>
}
 8000f2c:	bf00      	nop
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000f42:	2006      	movs	r0, #6
 8000f44:	f7ff fc9e 	bl	8000884 <NRF24_read_register>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <NRF24_setDataRate+0x88>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000f52:	7bbb      	ldrb	r3, [r7, #14]
 8000f54:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000f58:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d107      	bne.n	8000f70 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000f60:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <NRF24_setDataRate+0x88>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000f66:	7bbb      	ldrb	r3, [r7, #14]
 8000f68:	f043 0320 	orr.w	r3, r3, #32
 8000f6c:	73bb      	strb	r3, [r7, #14]
 8000f6e:	e00d      	b.n	8000f8c <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d107      	bne.n	8000f86 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <NRF24_setDataRate+0x88>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000f7c:	7bbb      	ldrb	r3, [r7, #14]
 8000f7e:	f043 0308 	orr.w	r3, r3, #8
 8000f82:	73bb      	strb	r3, [r7, #14]
 8000f84:	e002      	b.n	8000f8c <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000f86:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <NRF24_setDataRate+0x88>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000f8c:	7bbb      	ldrb	r3, [r7, #14]
 8000f8e:	4619      	mov	r1, r3
 8000f90:	2006      	movs	r0, #6
 8000f92:	f7ff fcc7 	bl	8000924 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000f96:	2006      	movs	r0, #6
 8000f98:	f7ff fc74 	bl	8000884 <NRF24_read_register>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	7bbb      	ldrb	r3, [r7, #14]
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d102      	bne.n	8000fac <NRF24_setDataRate+0x78>
  {
    result = true;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	73fb      	strb	r3, [r7, #15]
 8000faa:	e002      	b.n	8000fb2 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000fac:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <NRF24_setDataRate+0x88>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	240000aa 	.word	0x240000aa

08000fc0 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f7ff fc5a 	bl	8000884 <NRF24_read_register>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	f023 030c 	bic.w	r3, r3, #12
 8000fd6:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d00f      	beq.n	8000ffe <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d104      	bne.n	8000fee <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	f043 0308 	orr.w	r3, r3, #8
 8000fea:	73fb      	strb	r3, [r7, #15]
 8000fec:	e007      	b.n	8000ffe <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	f043 0308 	orr.w	r3, r3, #8
 8000ff4:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	f043 0304 	orr.w	r3, r3, #4
 8000ffc:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	4619      	mov	r1, r3
 8001002:	2000      	movs	r0, #0
 8001004:	f7ff fc8e 	bl	8000924 <NRF24_write_register>
}
 8001008:	bf00      	nop
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8001014:	2000      	movs	r0, #0
 8001016:	f7ff fc35 	bl	8000884 <NRF24_read_register>
 800101a:	4603      	mov	r3, r0
 800101c:	f023 0302 	bic.w	r3, r3, #2
 8001020:	b2db      	uxtb	r3, r3
 8001022:	4619      	mov	r1, r3
 8001024:	2000      	movs	r0, #0
 8001026:	f7ff fc7d 	bl	8000924 <NRF24_write_register>
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}

0800102e <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b084      	sub	sp, #16
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001036:	f7ff fcff 	bl	8000a38 <NRF24_get_status>
 800103a:	4603      	mov	r3, r0
 800103c:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001044:	2b00      	cmp	r3, #0
 8001046:	bf14      	ite	ne
 8001048:	2301      	movne	r3, #1
 800104a:	2300      	moveq	r3, #0
 800104c:	73bb      	strb	r3, [r7, #14]

  if (result)
 800104e:	7bbb      	ldrb	r3, [r7, #14]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d017      	beq.n	8001084 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d007      	beq.n	800106a <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	085b      	lsrs	r3, r3, #1
 800105e:	b2db      	uxtb	r3, r3
 8001060:	f003 0307 	and.w	r3, r3, #7
 8001064:	b2da      	uxtb	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 800106a:	2140      	movs	r1, #64	; 0x40
 800106c:	2007      	movs	r0, #7
 800106e:	f7ff fc59 	bl	8000924 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	f003 0320 	and.w	r3, r3, #32
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 800107c:	2120      	movs	r1, #32
 800107e:	2007      	movs	r0, #7
 8001080:	f7ff fc50 	bl	8000924 <NRF24_write_register>
    }
  }
  return result;
 8001084:	7bbb      	ldrb	r3, [r7, #14]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001092:	2170      	movs	r1, #112	; 0x70
 8001094:	2007      	movs	r0, #7
 8001096:	f7ff fc45 	bl	8000924 <NRF24_write_register>
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80010a6:	2000      	movs	r0, #0
 80010a8:	f7ff fbac 	bl	8000804 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 80010ac:	2350      	movs	r3, #80	; 0x50
 80010ae:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 80010b0:	2373      	movs	r3, #115	; 0x73
 80010b2:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 80010b4:	1d39      	adds	r1, r7, #4
 80010b6:	2364      	movs	r3, #100	; 0x64
 80010b8:	2202      	movs	r2, #2
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <NRF24_ACTIVATE_cmd+0x30>)
 80010bc:	f004 ff12 	bl	8005ee4 <HAL_SPI_Transmit>
	NRF24_csn(1);
 80010c0:	2001      	movs	r0, #1
 80010c2:	f7ff fb9f 	bl	8000804 <NRF24_csn>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	240000b4 	.word	0x240000b4

080010d4 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 80010d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010d6:	b0a1      	sub	sp, #132	; 0x84
 80010d8:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80010da:	f107 0308 	add.w	r3, r7, #8
 80010de:	49c3      	ldr	r1, [pc, #780]	; (80013ec <printRadioSettings+0x318>)
 80010e0:	4618      	mov	r0, r3
 80010e2:	f00a ff89 	bl	800bff8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010e6:	f107 0308 	add.w	r3, r7, #8
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff f8f8 	bl	80002e0 <strlen>
 80010f0:	4603      	mov	r3, r0
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	f107 0108 	add.w	r1, r7, #8
 80010f8:	230a      	movs	r3, #10
 80010fa:	48bd      	ldr	r0, [pc, #756]	; (80013f0 <printRadioSettings+0x31c>)
 80010fc:	f006 fe2f 	bl	8007d5e <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8001100:	2000      	movs	r0, #0
 8001102:	f7ff fbbf 	bl	8000884 <NRF24_read_register>
 8001106:	4603      	mov	r3, r0
 8001108:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 800110c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001110:	f003 0308 	and.w	r3, r3, #8
 8001114:	2b00      	cmp	r3, #0
 8001116:	d013      	beq.n	8001140 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8001118:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800111c:	f003 0304 	and.w	r3, r3, #4
 8001120:	2b00      	cmp	r3, #0
 8001122:	d006      	beq.n	8001132 <printRadioSettings+0x5e>
 8001124:	f107 0308 	add.w	r3, r7, #8
 8001128:	49b2      	ldr	r1, [pc, #712]	; (80013f4 <printRadioSettings+0x320>)
 800112a:	4618      	mov	r0, r3
 800112c:	f00a ff64 	bl	800bff8 <siprintf>
 8001130:	e00c      	b.n	800114c <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	49b0      	ldr	r1, [pc, #704]	; (80013f8 <printRadioSettings+0x324>)
 8001138:	4618      	mov	r0, r3
 800113a:	f00a ff5d 	bl	800bff8 <siprintf>
 800113e:	e005      	b.n	800114c <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8001140:	f107 0308 	add.w	r3, r7, #8
 8001144:	49ad      	ldr	r1, [pc, #692]	; (80013fc <printRadioSettings+0x328>)
 8001146:	4618      	mov	r0, r3
 8001148:	f00a ff56 	bl	800bff8 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800114c:	f107 0308 	add.w	r3, r7, #8
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff f8c5 	bl	80002e0 <strlen>
 8001156:	4603      	mov	r3, r0
 8001158:	b29a      	uxth	r2, r3
 800115a:	f107 0108 	add.w	r1, r7, #8
 800115e:	230a      	movs	r3, #10
 8001160:	48a3      	ldr	r0, [pc, #652]	; (80013f0 <printRadioSettings+0x31c>)
 8001162:	f006 fdfc 	bl	8007d5e <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8001166:	2001      	movs	r0, #1
 8001168:	f7ff fb8c 	bl	8000884 <NRF24_read_register>
 800116c:	4603      	mov	r3, r0
 800116e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001172:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001176:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800117a:	2b00      	cmp	r3, #0
 800117c:	bfcc      	ite	gt
 800117e:	2301      	movgt	r3, #1
 8001180:	2300      	movle	r3, #0
 8001182:	b2db      	uxtb	r3, r3
 8001184:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001186:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800118a:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800118e:	2b00      	cmp	r3, #0
 8001190:	bfcc      	ite	gt
 8001192:	2301      	movgt	r3, #1
 8001194:	2300      	movle	r3, #0
 8001196:	b2db      	uxtb	r3, r3
 8001198:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800119a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800119e:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	bfcc      	ite	gt
 80011a6:	2301      	movgt	r3, #1
 80011a8:	2300      	movle	r3, #0
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011ae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011b2:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	bfcc      	ite	gt
 80011ba:	2301      	movgt	r3, #1
 80011bc:	2300      	movle	r3, #0
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011c2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011c6:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	bfcc      	ite	gt
 80011ce:	2301      	movgt	r3, #1
 80011d0:	2300      	movle	r3, #0
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011da:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011de:	2b00      	cmp	r3, #0
 80011e0:	bfcc      	ite	gt
 80011e2:	2301      	movgt	r3, #1
 80011e4:	2300      	movle	r3, #0
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	f107 0008 	add.w	r0, r7, #8
 80011ec:	9303      	str	r3, [sp, #12]
 80011ee:	9402      	str	r4, [sp, #8]
 80011f0:	9101      	str	r1, [sp, #4]
 80011f2:	9200      	str	r2, [sp, #0]
 80011f4:	4633      	mov	r3, r6
 80011f6:	462a      	mov	r2, r5
 80011f8:	4981      	ldr	r1, [pc, #516]	; (8001400 <printRadioSettings+0x32c>)
 80011fa:	f00a fefd 	bl	800bff8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011fe:	f107 0308 	add.w	r3, r7, #8
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff f86c 	bl	80002e0 <strlen>
 8001208:	4603      	mov	r3, r0
 800120a:	b29a      	uxth	r2, r3
 800120c:	f107 0108 	add.w	r1, r7, #8
 8001210:	230a      	movs	r3, #10
 8001212:	4877      	ldr	r0, [pc, #476]	; (80013f0 <printRadioSettings+0x31c>)
 8001214:	f006 fda3 	bl	8007d5e <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8001218:	2002      	movs	r0, #2
 800121a:	f7ff fb33 	bl	8000884 <NRF24_read_register>
 800121e:	4603      	mov	r3, r0
 8001220:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001224:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001228:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800122c:	2b00      	cmp	r3, #0
 800122e:	bfcc      	ite	gt
 8001230:	2301      	movgt	r3, #1
 8001232:	2300      	movle	r3, #0
 8001234:	b2db      	uxtb	r3, r3
 8001236:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001238:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800123c:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001240:	2b00      	cmp	r3, #0
 8001242:	bfcc      	ite	gt
 8001244:	2301      	movgt	r3, #1
 8001246:	2300      	movle	r3, #0
 8001248:	b2db      	uxtb	r3, r3
 800124a:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800124c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001250:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001254:	2b00      	cmp	r3, #0
 8001256:	bfcc      	ite	gt
 8001258:	2301      	movgt	r3, #1
 800125a:	2300      	movle	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001260:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001264:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001268:	2b00      	cmp	r3, #0
 800126a:	bfcc      	ite	gt
 800126c:	2301      	movgt	r3, #1
 800126e:	2300      	movle	r3, #0
 8001270:	b2db      	uxtb	r3, r3
 8001272:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001274:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001278:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800127c:	2b00      	cmp	r3, #0
 800127e:	bfcc      	ite	gt
 8001280:	2301      	movgt	r3, #1
 8001282:	2300      	movle	r3, #0
 8001284:	b2db      	uxtb	r3, r3
 8001286:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001288:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800128c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001290:	2b00      	cmp	r3, #0
 8001292:	bfcc      	ite	gt
 8001294:	2301      	movgt	r3, #1
 8001296:	2300      	movle	r3, #0
 8001298:	b2db      	uxtb	r3, r3
 800129a:	f107 0008 	add.w	r0, r7, #8
 800129e:	9303      	str	r3, [sp, #12]
 80012a0:	9402      	str	r4, [sp, #8]
 80012a2:	9101      	str	r1, [sp, #4]
 80012a4:	9200      	str	r2, [sp, #0]
 80012a6:	4633      	mov	r3, r6
 80012a8:	462a      	mov	r2, r5
 80012aa:	4956      	ldr	r1, [pc, #344]	; (8001404 <printRadioSettings+0x330>)
 80012ac:	f00a fea4 	bl	800bff8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012b0:	f107 0308 	add.w	r3, r7, #8
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff f813 	bl	80002e0 <strlen>
 80012ba:	4603      	mov	r3, r0
 80012bc:	b29a      	uxth	r2, r3
 80012be:	f107 0108 	add.w	r1, r7, #8
 80012c2:	230a      	movs	r3, #10
 80012c4:	484a      	ldr	r0, [pc, #296]	; (80013f0 <printRadioSettings+0x31c>)
 80012c6:	f006 fd4a 	bl	8007d5e <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 80012ca:	2003      	movs	r0, #3
 80012cc:	f7ff fada 	bl	8000884 <NRF24_read_register>
 80012d0:	4603      	mov	r3, r0
 80012d2:	f003 0303 	and.w	r3, r3, #3
 80012d6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 80012da:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012de:	3302      	adds	r3, #2
 80012e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 80012e4:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80012e8:	f107 0308 	add.w	r3, r7, #8
 80012ec:	4946      	ldr	r1, [pc, #280]	; (8001408 <printRadioSettings+0x334>)
 80012ee:	4618      	mov	r0, r3
 80012f0:	f00a fe82 	bl	800bff8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012f4:	f107 0308 	add.w	r3, r7, #8
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7fe fff1 	bl	80002e0 <strlen>
 80012fe:	4603      	mov	r3, r0
 8001300:	b29a      	uxth	r2, r3
 8001302:	f107 0108 	add.w	r1, r7, #8
 8001306:	230a      	movs	r3, #10
 8001308:	4839      	ldr	r0, [pc, #228]	; (80013f0 <printRadioSettings+0x31c>)
 800130a:	f006 fd28 	bl	8007d5e <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 800130e:	2005      	movs	r0, #5
 8001310:	f7ff fab8 	bl	8000884 <NRF24_read_register>
 8001314:	4603      	mov	r3, r0
 8001316:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 800131a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800131e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001322:	f107 0308 	add.w	r3, r7, #8
 8001326:	4939      	ldr	r1, [pc, #228]	; (800140c <printRadioSettings+0x338>)
 8001328:	4618      	mov	r0, r3
 800132a:	f00a fe65 	bl	800bff8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800132e:	f107 0308 	add.w	r3, r7, #8
 8001332:	4618      	mov	r0, r3
 8001334:	f7fe ffd4 	bl	80002e0 <strlen>
 8001338:	4603      	mov	r3, r0
 800133a:	b29a      	uxth	r2, r3
 800133c:	f107 0108 	add.w	r1, r7, #8
 8001340:	230a      	movs	r3, #10
 8001342:	482b      	ldr	r0, [pc, #172]	; (80013f0 <printRadioSettings+0x31c>)
 8001344:	f006 fd0b 	bl	8007d5e <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001348:	2006      	movs	r0, #6
 800134a:	f7ff fa9b 	bl	8000884 <NRF24_read_register>
 800134e:	4603      	mov	r3, r0
 8001350:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8001354:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001358:	f003 0308 	and.w	r3, r3, #8
 800135c:	2b00      	cmp	r3, #0
 800135e:	d006      	beq.n	800136e <printRadioSettings+0x29a>
 8001360:	f107 0308 	add.w	r3, r7, #8
 8001364:	492a      	ldr	r1, [pc, #168]	; (8001410 <printRadioSettings+0x33c>)
 8001366:	4618      	mov	r0, r3
 8001368:	f00a fe46 	bl	800bff8 <siprintf>
 800136c:	e005      	b.n	800137a <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 800136e:	f107 0308 	add.w	r3, r7, #8
 8001372:	4928      	ldr	r1, [pc, #160]	; (8001414 <printRadioSettings+0x340>)
 8001374:	4618      	mov	r0, r3
 8001376:	f00a fe3f 	bl	800bff8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800137a:	f107 0308 	add.w	r3, r7, #8
 800137e:	4618      	mov	r0, r3
 8001380:	f7fe ffae 	bl	80002e0 <strlen>
 8001384:	4603      	mov	r3, r0
 8001386:	b29a      	uxth	r2, r3
 8001388:	f107 0108 	add.w	r1, r7, #8
 800138c:	230a      	movs	r3, #10
 800138e:	4818      	ldr	r0, [pc, #96]	; (80013f0 <printRadioSettings+0x31c>)
 8001390:	f006 fce5 	bl	8007d5e <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8001394:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001398:	f003 0306 	and.w	r3, r3, #6
 800139c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 80013a0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013a4:	085b      	lsrs	r3, r3, #1
 80013a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 80013aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d106      	bne.n	80013c0 <printRadioSettings+0x2ec>
 80013b2:	f107 0308 	add.w	r3, r7, #8
 80013b6:	4918      	ldr	r1, [pc, #96]	; (8001418 <printRadioSettings+0x344>)
 80013b8:	4618      	mov	r0, r3
 80013ba:	f00a fe1d 	bl	800bff8 <siprintf>
 80013be:	e03b      	b.n	8001438 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 80013c0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d106      	bne.n	80013d6 <printRadioSettings+0x302>
 80013c8:	f107 0308 	add.w	r3, r7, #8
 80013cc:	4913      	ldr	r1, [pc, #76]	; (800141c <printRadioSettings+0x348>)
 80013ce:	4618      	mov	r0, r3
 80013d0:	f00a fe12 	bl	800bff8 <siprintf>
 80013d4:	e030      	b.n	8001438 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 80013d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d122      	bne.n	8001424 <printRadioSettings+0x350>
 80013de:	f107 0308 	add.w	r3, r7, #8
 80013e2:	490f      	ldr	r1, [pc, #60]	; (8001420 <printRadioSettings+0x34c>)
 80013e4:	4618      	mov	r0, r3
 80013e6:	f00a fe07 	bl	800bff8 <siprintf>
 80013ea:	e025      	b.n	8001438 <printRadioSettings+0x364>
 80013ec:	0800cf60 	.word	0x0800cf60
 80013f0:	2400013c 	.word	0x2400013c
 80013f4:	0800cf94 	.word	0x0800cf94
 80013f8:	0800cfb0 	.word	0x0800cfb0
 80013fc:	0800cfcc 	.word	0x0800cfcc
 8001400:	0800cfe0 	.word	0x0800cfe0
 8001404:	0800d024 	.word	0x0800d024
 8001408:	0800d070 	.word	0x0800d070
 800140c:	0800d08c 	.word	0x0800d08c
 8001410:	0800d0a0 	.word	0x0800d0a0
 8001414:	0800d0b8 	.word	0x0800d0b8
 8001418:	0800d0d0 	.word	0x0800d0d0
 800141c:	0800d0e4 	.word	0x0800d0e4
 8001420:	0800d0f8 	.word	0x0800d0f8
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001424:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001428:	2b03      	cmp	r3, #3
 800142a:	d105      	bne.n	8001438 <printRadioSettings+0x364>
 800142c:	f107 0308 	add.w	r3, r7, #8
 8001430:	49d7      	ldr	r1, [pc, #860]	; (8001790 <printRadioSettings+0x6bc>)
 8001432:	4618      	mov	r0, r3
 8001434:	f00a fde0 	bl	800bff8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001438:	f107 0308 	add.w	r3, r7, #8
 800143c:	4618      	mov	r0, r3
 800143e:	f7fe ff4f 	bl	80002e0 <strlen>
 8001442:	4603      	mov	r3, r0
 8001444:	b29a      	uxth	r2, r3
 8001446:	f107 0108 	add.w	r1, r7, #8
 800144a:	230a      	movs	r3, #10
 800144c:	48d1      	ldr	r0, [pc, #836]	; (8001794 <printRadioSettings+0x6c0>)
 800144e:	f006 fc86 	bl	8007d5e <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001452:	463b      	mov	r3, r7
 8001454:	2205      	movs	r2, #5
 8001456:	4619      	mov	r1, r3
 8001458:	200a      	movs	r0, #10
 800145a:	f7ff fa3b 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800145e:	793b      	ldrb	r3, [r7, #4]
 8001460:	461c      	mov	r4, r3
 8001462:	78fb      	ldrb	r3, [r7, #3]
 8001464:	461d      	mov	r5, r3
 8001466:	78bb      	ldrb	r3, [r7, #2]
 8001468:	787a      	ldrb	r2, [r7, #1]
 800146a:	7839      	ldrb	r1, [r7, #0]
 800146c:	f107 0008 	add.w	r0, r7, #8
 8001470:	9102      	str	r1, [sp, #8]
 8001472:	9201      	str	r2, [sp, #4]
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	462b      	mov	r3, r5
 8001478:	4622      	mov	r2, r4
 800147a:	49c7      	ldr	r1, [pc, #796]	; (8001798 <printRadioSettings+0x6c4>)
 800147c:	f00a fdbc 	bl	800bff8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001480:	f107 0308 	add.w	r3, r7, #8
 8001484:	4618      	mov	r0, r3
 8001486:	f7fe ff2b 	bl	80002e0 <strlen>
 800148a:	4603      	mov	r3, r0
 800148c:	b29a      	uxth	r2, r3
 800148e:	f107 0108 	add.w	r1, r7, #8
 8001492:	230a      	movs	r3, #10
 8001494:	48bf      	ldr	r0, [pc, #764]	; (8001794 <printRadioSettings+0x6c0>)
 8001496:	f006 fc62 	bl	8007d5e <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 800149a:	463b      	mov	r3, r7
 800149c:	2205      	movs	r2, #5
 800149e:	4619      	mov	r1, r3
 80014a0:	200b      	movs	r0, #11
 80014a2:	f7ff fa17 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80014a6:	793b      	ldrb	r3, [r7, #4]
 80014a8:	461c      	mov	r4, r3
 80014aa:	78fb      	ldrb	r3, [r7, #3]
 80014ac:	461d      	mov	r5, r3
 80014ae:	78bb      	ldrb	r3, [r7, #2]
 80014b0:	787a      	ldrb	r2, [r7, #1]
 80014b2:	7839      	ldrb	r1, [r7, #0]
 80014b4:	f107 0008 	add.w	r0, r7, #8
 80014b8:	9102      	str	r1, [sp, #8]
 80014ba:	9201      	str	r2, [sp, #4]
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	462b      	mov	r3, r5
 80014c0:	4622      	mov	r2, r4
 80014c2:	49b6      	ldr	r1, [pc, #728]	; (800179c <printRadioSettings+0x6c8>)
 80014c4:	f00a fd98 	bl	800bff8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014c8:	f107 0308 	add.w	r3, r7, #8
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7fe ff07 	bl	80002e0 <strlen>
 80014d2:	4603      	mov	r3, r0
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	f107 0108 	add.w	r1, r7, #8
 80014da:	230a      	movs	r3, #10
 80014dc:	48ad      	ldr	r0, [pc, #692]	; (8001794 <printRadioSettings+0x6c0>)
 80014de:	f006 fc3e 	bl	8007d5e <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 80014e2:	463b      	mov	r3, r7
 80014e4:	2201      	movs	r2, #1
 80014e6:	4619      	mov	r1, r3
 80014e8:	200c      	movs	r0, #12
 80014ea:	f7ff f9f3 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80014ee:	783b      	ldrb	r3, [r7, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	f107 0308 	add.w	r3, r7, #8
 80014f6:	49aa      	ldr	r1, [pc, #680]	; (80017a0 <printRadioSettings+0x6cc>)
 80014f8:	4618      	mov	r0, r3
 80014fa:	f00a fd7d 	bl	800bff8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014fe:	f107 0308 	add.w	r3, r7, #8
 8001502:	4618      	mov	r0, r3
 8001504:	f7fe feec 	bl	80002e0 <strlen>
 8001508:	4603      	mov	r3, r0
 800150a:	b29a      	uxth	r2, r3
 800150c:	f107 0108 	add.w	r1, r7, #8
 8001510:	230a      	movs	r3, #10
 8001512:	48a0      	ldr	r0, [pc, #640]	; (8001794 <printRadioSettings+0x6c0>)
 8001514:	f006 fc23 	bl	8007d5e <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8001518:	463b      	mov	r3, r7
 800151a:	2201      	movs	r2, #1
 800151c:	4619      	mov	r1, r3
 800151e:	200d      	movs	r0, #13
 8001520:	f7ff f9d8 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001524:	783b      	ldrb	r3, [r7, #0]
 8001526:	461a      	mov	r2, r3
 8001528:	f107 0308 	add.w	r3, r7, #8
 800152c:	499d      	ldr	r1, [pc, #628]	; (80017a4 <printRadioSettings+0x6d0>)
 800152e:	4618      	mov	r0, r3
 8001530:	f00a fd62 	bl	800bff8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001534:	f107 0308 	add.w	r3, r7, #8
 8001538:	4618      	mov	r0, r3
 800153a:	f7fe fed1 	bl	80002e0 <strlen>
 800153e:	4603      	mov	r3, r0
 8001540:	b29a      	uxth	r2, r3
 8001542:	f107 0108 	add.w	r1, r7, #8
 8001546:	230a      	movs	r3, #10
 8001548:	4892      	ldr	r0, [pc, #584]	; (8001794 <printRadioSettings+0x6c0>)
 800154a:	f006 fc08 	bl	8007d5e <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 800154e:	463b      	mov	r3, r7
 8001550:	2201      	movs	r2, #1
 8001552:	4619      	mov	r1, r3
 8001554:	200e      	movs	r0, #14
 8001556:	f7ff f9bd 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800155a:	783b      	ldrb	r3, [r7, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	f107 0308 	add.w	r3, r7, #8
 8001562:	4991      	ldr	r1, [pc, #580]	; (80017a8 <printRadioSettings+0x6d4>)
 8001564:	4618      	mov	r0, r3
 8001566:	f00a fd47 	bl	800bff8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800156a:	f107 0308 	add.w	r3, r7, #8
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe feb6 	bl	80002e0 <strlen>
 8001574:	4603      	mov	r3, r0
 8001576:	b29a      	uxth	r2, r3
 8001578:	f107 0108 	add.w	r1, r7, #8
 800157c:	230a      	movs	r3, #10
 800157e:	4885      	ldr	r0, [pc, #532]	; (8001794 <printRadioSettings+0x6c0>)
 8001580:	f006 fbed 	bl	8007d5e <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001584:	463b      	mov	r3, r7
 8001586:	2201      	movs	r2, #1
 8001588:	4619      	mov	r1, r3
 800158a:	200f      	movs	r0, #15
 800158c:	f7ff f9a2 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001590:	783b      	ldrb	r3, [r7, #0]
 8001592:	461a      	mov	r2, r3
 8001594:	f107 0308 	add.w	r3, r7, #8
 8001598:	4984      	ldr	r1, [pc, #528]	; (80017ac <printRadioSettings+0x6d8>)
 800159a:	4618      	mov	r0, r3
 800159c:	f00a fd2c 	bl	800bff8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015a0:	f107 0308 	add.w	r3, r7, #8
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7fe fe9b 	bl	80002e0 <strlen>
 80015aa:	4603      	mov	r3, r0
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	f107 0108 	add.w	r1, r7, #8
 80015b2:	230a      	movs	r3, #10
 80015b4:	4877      	ldr	r0, [pc, #476]	; (8001794 <printRadioSettings+0x6c0>)
 80015b6:	f006 fbd2 	bl	8007d5e <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 80015ba:	463b      	mov	r3, r7
 80015bc:	2205      	movs	r2, #5
 80015be:	4619      	mov	r1, r3
 80015c0:	2010      	movs	r0, #16
 80015c2:	f7ff f987 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80015c6:	793b      	ldrb	r3, [r7, #4]
 80015c8:	461c      	mov	r4, r3
 80015ca:	78fb      	ldrb	r3, [r7, #3]
 80015cc:	461d      	mov	r5, r3
 80015ce:	78bb      	ldrb	r3, [r7, #2]
 80015d0:	787a      	ldrb	r2, [r7, #1]
 80015d2:	7839      	ldrb	r1, [r7, #0]
 80015d4:	f107 0008 	add.w	r0, r7, #8
 80015d8:	9102      	str	r1, [sp, #8]
 80015da:	9201      	str	r2, [sp, #4]
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	462b      	mov	r3, r5
 80015e0:	4622      	mov	r2, r4
 80015e2:	4973      	ldr	r1, [pc, #460]	; (80017b0 <printRadioSettings+0x6dc>)
 80015e4:	f00a fd08 	bl	800bff8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015e8:	f107 0308 	add.w	r3, r7, #8
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe fe77 	bl	80002e0 <strlen>
 80015f2:	4603      	mov	r3, r0
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	f107 0108 	add.w	r1, r7, #8
 80015fa:	230a      	movs	r3, #10
 80015fc:	4865      	ldr	r0, [pc, #404]	; (8001794 <printRadioSettings+0x6c0>)
 80015fe:	f006 fbae 	bl	8007d5e <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8001602:	2011      	movs	r0, #17
 8001604:	f7ff f93e 	bl	8000884 <NRF24_read_register>
 8001608:	4603      	mov	r3, r0
 800160a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800160e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001612:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001616:	f107 0308 	add.w	r3, r7, #8
 800161a:	4966      	ldr	r1, [pc, #408]	; (80017b4 <printRadioSettings+0x6e0>)
 800161c:	4618      	mov	r0, r3
 800161e:	f00a fceb 	bl	800bff8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001622:	f107 0308 	add.w	r3, r7, #8
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe fe5a 	bl	80002e0 <strlen>
 800162c:	4603      	mov	r3, r0
 800162e:	b29a      	uxth	r2, r3
 8001630:	f107 0108 	add.w	r1, r7, #8
 8001634:	230a      	movs	r3, #10
 8001636:	4857      	ldr	r0, [pc, #348]	; (8001794 <printRadioSettings+0x6c0>)
 8001638:	f006 fb91 	bl	8007d5e <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 800163c:	2012      	movs	r0, #18
 800163e:	f7ff f921 	bl	8000884 <NRF24_read_register>
 8001642:	4603      	mov	r3, r0
 8001644:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001648:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800164c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001650:	f107 0308 	add.w	r3, r7, #8
 8001654:	4958      	ldr	r1, [pc, #352]	; (80017b8 <printRadioSettings+0x6e4>)
 8001656:	4618      	mov	r0, r3
 8001658:	f00a fcce 	bl	800bff8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800165c:	f107 0308 	add.w	r3, r7, #8
 8001660:	4618      	mov	r0, r3
 8001662:	f7fe fe3d 	bl	80002e0 <strlen>
 8001666:	4603      	mov	r3, r0
 8001668:	b29a      	uxth	r2, r3
 800166a:	f107 0108 	add.w	r1, r7, #8
 800166e:	230a      	movs	r3, #10
 8001670:	4848      	ldr	r0, [pc, #288]	; (8001794 <printRadioSettings+0x6c0>)
 8001672:	f006 fb74 	bl	8007d5e <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 8001676:	2013      	movs	r0, #19
 8001678:	f7ff f904 	bl	8000884 <NRF24_read_register>
 800167c:	4603      	mov	r3, r0
 800167e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001682:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001686:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800168a:	f107 0308 	add.w	r3, r7, #8
 800168e:	494b      	ldr	r1, [pc, #300]	; (80017bc <printRadioSettings+0x6e8>)
 8001690:	4618      	mov	r0, r3
 8001692:	f00a fcb1 	bl	800bff8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001696:	f107 0308 	add.w	r3, r7, #8
 800169a:	4618      	mov	r0, r3
 800169c:	f7fe fe20 	bl	80002e0 <strlen>
 80016a0:	4603      	mov	r3, r0
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	f107 0108 	add.w	r1, r7, #8
 80016a8:	230a      	movs	r3, #10
 80016aa:	483a      	ldr	r0, [pc, #232]	; (8001794 <printRadioSettings+0x6c0>)
 80016ac:	f006 fb57 	bl	8007d5e <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 80016b0:	2014      	movs	r0, #20
 80016b2:	f7ff f8e7 	bl	8000884 <NRF24_read_register>
 80016b6:	4603      	mov	r3, r0
 80016b8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80016bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016c4:	f107 0308 	add.w	r3, r7, #8
 80016c8:	493d      	ldr	r1, [pc, #244]	; (80017c0 <printRadioSettings+0x6ec>)
 80016ca:	4618      	mov	r0, r3
 80016cc:	f00a fc94 	bl	800bff8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016d0:	f107 0308 	add.w	r3, r7, #8
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe fe03 	bl	80002e0 <strlen>
 80016da:	4603      	mov	r3, r0
 80016dc:	b29a      	uxth	r2, r3
 80016de:	f107 0108 	add.w	r1, r7, #8
 80016e2:	230a      	movs	r3, #10
 80016e4:	482b      	ldr	r0, [pc, #172]	; (8001794 <printRadioSettings+0x6c0>)
 80016e6:	f006 fb3a 	bl	8007d5e <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 80016ea:	2015      	movs	r0, #21
 80016ec:	f7ff f8ca 	bl	8000884 <NRF24_read_register>
 80016f0:	4603      	mov	r3, r0
 80016f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80016f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016fe:	f107 0308 	add.w	r3, r7, #8
 8001702:	4930      	ldr	r1, [pc, #192]	; (80017c4 <printRadioSettings+0x6f0>)
 8001704:	4618      	mov	r0, r3
 8001706:	f00a fc77 	bl	800bff8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800170a:	f107 0308 	add.w	r3, r7, #8
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe fde6 	bl	80002e0 <strlen>
 8001714:	4603      	mov	r3, r0
 8001716:	b29a      	uxth	r2, r3
 8001718:	f107 0108 	add.w	r1, r7, #8
 800171c:	230a      	movs	r3, #10
 800171e:	481d      	ldr	r0, [pc, #116]	; (8001794 <printRadioSettings+0x6c0>)
 8001720:	f006 fb1d 	bl	8007d5e <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 8001724:	2016      	movs	r0, #22
 8001726:	f7ff f8ad 	bl	8000884 <NRF24_read_register>
 800172a:	4603      	mov	r3, r0
 800172c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001730:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001734:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001738:	f107 0308 	add.w	r3, r7, #8
 800173c:	4922      	ldr	r1, [pc, #136]	; (80017c8 <printRadioSettings+0x6f4>)
 800173e:	4618      	mov	r0, r3
 8001740:	f00a fc5a 	bl	800bff8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001744:	f107 0308 	add.w	r3, r7, #8
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe fdc9 	bl	80002e0 <strlen>
 800174e:	4603      	mov	r3, r0
 8001750:	b29a      	uxth	r2, r3
 8001752:	f107 0108 	add.w	r1, r7, #8
 8001756:	230a      	movs	r3, #10
 8001758:	480e      	ldr	r0, [pc, #56]	; (8001794 <printRadioSettings+0x6c0>)
 800175a:	f006 fb00 	bl	8007d5e <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 800175e:	201c      	movs	r0, #28
 8001760:	f7ff f890 	bl	8000884 <NRF24_read_register>
 8001764:	4603      	mov	r3, r0
 8001766:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800176a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800176e:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001772:	2b00      	cmp	r3, #0
 8001774:	bfcc      	ite	gt
 8001776:	2301      	movgt	r3, #1
 8001778:	2300      	movle	r3, #0
 800177a:	b2db      	uxtb	r3, r3
 800177c:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800177e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001782:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001786:	2b00      	cmp	r3, #0
 8001788:	bfcc      	ite	gt
 800178a:	2301      	movgt	r3, #1
 800178c:	2300      	movle	r3, #0
 800178e:	e01d      	b.n	80017cc <printRadioSettings+0x6f8>
 8001790:	0800d10c 	.word	0x0800d10c
 8001794:	2400013c 	.word	0x2400013c
 8001798:	0800d120 	.word	0x0800d120
 800179c:	0800d150 	.word	0x0800d150
 80017a0:	0800d180 	.word	0x0800d180
 80017a4:	0800d1a8 	.word	0x0800d1a8
 80017a8:	0800d1d0 	.word	0x0800d1d0
 80017ac:	0800d1f8 	.word	0x0800d1f8
 80017b0:	0800d220 	.word	0x0800d220
 80017b4:	0800d24c 	.word	0x0800d24c
 80017b8:	0800d268 	.word	0x0800d268
 80017bc:	0800d284 	.word	0x0800d284
 80017c0:	0800d2a0 	.word	0x0800d2a0
 80017c4:	0800d2bc 	.word	0x0800d2bc
 80017c8:	0800d2d8 	.word	0x0800d2d8
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017d0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017d4:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017d8:	2b00      	cmp	r3, #0
 80017da:	bfcc      	ite	gt
 80017dc:	2301      	movgt	r3, #1
 80017de:	2300      	movle	r3, #0
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017e4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017e8:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	bfcc      	ite	gt
 80017f0:	2301      	movgt	r3, #1
 80017f2:	2300      	movle	r3, #0
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017fc:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001800:	2b00      	cmp	r3, #0
 8001802:	bfcc      	ite	gt
 8001804:	2301      	movgt	r3, #1
 8001806:	2300      	movle	r3, #0
 8001808:	b2db      	uxtb	r3, r3
 800180a:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800180c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001810:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001814:	2b00      	cmp	r3, #0
 8001816:	bfcc      	ite	gt
 8001818:	2301      	movgt	r3, #1
 800181a:	2300      	movle	r3, #0
 800181c:	b2db      	uxtb	r3, r3
 800181e:	f107 0008 	add.w	r0, r7, #8
 8001822:	9303      	str	r3, [sp, #12]
 8001824:	9402      	str	r4, [sp, #8]
 8001826:	9101      	str	r1, [sp, #4]
 8001828:	9200      	str	r2, [sp, #0]
 800182a:	4633      	mov	r3, r6
 800182c:	462a      	mov	r2, r5
 800182e:	4936      	ldr	r1, [pc, #216]	; (8001908 <printRadioSettings+0x834>)
 8001830:	f00a fbe2 	bl	800bff8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001834:	f107 0308 	add.w	r3, r7, #8
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fd51 	bl	80002e0 <strlen>
 800183e:	4603      	mov	r3, r0
 8001840:	b29a      	uxth	r2, r3
 8001842:	f107 0108 	add.w	r1, r7, #8
 8001846:	230a      	movs	r3, #10
 8001848:	4830      	ldr	r0, [pc, #192]	; (800190c <printRadioSettings+0x838>)
 800184a:	f006 fa88 	bl	8007d5e <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 800184e:	201d      	movs	r0, #29
 8001850:	f7ff f818 	bl	8000884 <NRF24_read_register>
 8001854:	4603      	mov	r3, r0
 8001856:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 800185a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800185e:	f003 0304 	and.w	r3, r3, #4
 8001862:	2b00      	cmp	r3, #0
 8001864:	d006      	beq.n	8001874 <printRadioSettings+0x7a0>
 8001866:	f107 0308 	add.w	r3, r7, #8
 800186a:	4929      	ldr	r1, [pc, #164]	; (8001910 <printRadioSettings+0x83c>)
 800186c:	4618      	mov	r0, r3
 800186e:	f00a fbc3 	bl	800bff8 <siprintf>
 8001872:	e005      	b.n	8001880 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001874:	f107 0308 	add.w	r3, r7, #8
 8001878:	4926      	ldr	r1, [pc, #152]	; (8001914 <printRadioSettings+0x840>)
 800187a:	4618      	mov	r0, r3
 800187c:	f00a fbbc 	bl	800bff8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001880:	f107 0308 	add.w	r3, r7, #8
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fd2b 	bl	80002e0 <strlen>
 800188a:	4603      	mov	r3, r0
 800188c:	b29a      	uxth	r2, r3
 800188e:	f107 0108 	add.w	r1, r7, #8
 8001892:	230a      	movs	r3, #10
 8001894:	481d      	ldr	r0, [pc, #116]	; (800190c <printRadioSettings+0x838>)
 8001896:	f006 fa62 	bl	8007d5e <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 800189a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d006      	beq.n	80018b4 <printRadioSettings+0x7e0>
 80018a6:	f107 0308 	add.w	r3, r7, #8
 80018aa:	491b      	ldr	r1, [pc, #108]	; (8001918 <printRadioSettings+0x844>)
 80018ac:	4618      	mov	r0, r3
 80018ae:	f00a fba3 	bl	800bff8 <siprintf>
 80018b2:	e005      	b.n	80018c0 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 80018b4:	f107 0308 	add.w	r3, r7, #8
 80018b8:	4918      	ldr	r1, [pc, #96]	; (800191c <printRadioSettings+0x848>)
 80018ba:	4618      	mov	r0, r3
 80018bc:	f00a fb9c 	bl	800bff8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018c0:	f107 0308 	add.w	r3, r7, #8
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7fe fd0b 	bl	80002e0 <strlen>
 80018ca:	4603      	mov	r3, r0
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	f107 0108 	add.w	r1, r7, #8
 80018d2:	230a      	movs	r3, #10
 80018d4:	480d      	ldr	r0, [pc, #52]	; (800190c <printRadioSettings+0x838>)
 80018d6:	f006 fa42 	bl	8007d5e <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80018da:	f107 0308 	add.w	r3, r7, #8
 80018de:	4910      	ldr	r1, [pc, #64]	; (8001920 <printRadioSettings+0x84c>)
 80018e0:	4618      	mov	r0, r3
 80018e2:	f00a fb89 	bl	800bff8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018e6:	f107 0308 	add.w	r3, r7, #8
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fcf8 	bl	80002e0 <strlen>
 80018f0:	4603      	mov	r3, r0
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	f107 0108 	add.w	r1, r7, #8
 80018f8:	230a      	movs	r3, #10
 80018fa:	4804      	ldr	r0, [pc, #16]	; (800190c <printRadioSettings+0x838>)
 80018fc:	f006 fa2f 	bl	8007d5e <HAL_UART_Transmit>
}
 8001900:	bf00      	nop
 8001902:	3774      	adds	r7, #116	; 0x74
 8001904:	46bd      	mov	sp, r7
 8001906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001908:	0800d2f4 	.word	0x0800d2f4
 800190c:	2400013c 	.word	0x2400013c
 8001910:	0800d340 	.word	0x0800d340
 8001914:	0800d358 	.word	0x0800d358
 8001918:	0800d370 	.word	0x0800d370
 800191c:	0800d38c 	.word	0x0800d38c
 8001920:	0800cf60 	.word	0x0800cf60

08001924 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8001924:	b084      	sub	sp, #16
 8001926:	b580      	push	{r7, lr}
 8001928:	af00      	add	r7, sp, #0
 800192a:	f107 0c08 	add.w	ip, r7, #8
 800192e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8001932:	4b07      	ldr	r3, [pc, #28]	; (8001950 <nrf24_DebugUART_Init+0x2c>)
 8001934:	4618      	mov	r0, r3
 8001936:	f107 0308 	add.w	r3, r7, #8
 800193a:	2290      	movs	r2, #144	; 0x90
 800193c:	4619      	mov	r1, r3
 800193e:	f00a f9a8 	bl	800bc92 <memcpy>
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800194a:	b004      	add	sp, #16
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	2400013c 	.word	0x2400013c

08001954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001954:	b590      	push	{r4, r7, lr}
 8001956:	b0a5      	sub	sp, #148	; 0x94
 8001958:	af22      	add	r7, sp, #136	; 0x88
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800195a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800195e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001960:	bf00      	nop
 8001962:	4b56      	ldr	r3, [pc, #344]	; (8001abc <main+0x168>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d004      	beq.n	8001978 <main+0x24>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	1e5a      	subs	r2, r3, #1
 8001972:	607a      	str	r2, [r7, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	dcf4      	bgt.n	8001962 <main+0xe>
  if ( timeout < 0 )
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	da01      	bge.n	8001982 <main+0x2e>
  {
  Error_Handler();
 800197e:	f000 fbc7 	bl	8002110 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001982:	f000 ff23 	bl	80027cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001986:	f000 f8ad 	bl	8001ae4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800198a:	4b4c      	ldr	r3, [pc, #304]	; (8001abc <main+0x168>)
 800198c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001990:	4a4a      	ldr	r2, [pc, #296]	; (8001abc <main+0x168>)
 8001992:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001996:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800199a:	4b48      	ldr	r3, [pc, #288]	; (8001abc <main+0x168>)
 800199c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a4:	603b      	str	r3, [r7, #0]
 80019a6:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80019a8:	2000      	movs	r0, #0
 80019aa:	f001 fda9 	bl	8003500 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80019ae:	2100      	movs	r1, #0
 80019b0:	2000      	movs	r0, #0
 80019b2:	f001 fdbf 	bl	8003534 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80019b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019ba:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80019bc:	bf00      	nop
 80019be:	4b3f      	ldr	r3, [pc, #252]	; (8001abc <main+0x168>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d104      	bne.n	80019d4 <main+0x80>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	1e5a      	subs	r2, r3, #1
 80019ce:	607a      	str	r2, [r7, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	dcf4      	bgt.n	80019be <main+0x6a>
if ( timeout < 0 )
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	da01      	bge.n	80019de <main+0x8a>
{
Error_Handler();
 80019da:	f000 fb99 	bl	8002110 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019de:	f000 faa3 	bl	8001f28 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80019e2:	f000 f8fd 	bl	8001be0 <MX_FDCAN1_Init>
  MX_USART3_UART_Init();
 80019e6:	f000 fa53 	bl	8001e90 <MX_USART3_UART_Init>
  MX_SPI4_Init();
 80019ea:	f000 f95d 	bl	8001ca8 <MX_SPI4_Init>
  MX_TIM13_Init();
 80019ee:	f000 f9b3 	bl	8001d58 <MX_TIM13_Init>
  MX_TIM14_Init();
 80019f2:	f000 f9ff 	bl	8001df4 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim14,TIM_CHANNEL_1);
 80019f6:	2100      	movs	r1, #0
 80019f8:	4831      	ldr	r0, [pc, #196]	; (8001ac0 <main+0x16c>)
 80019fa:	f005 fa43 	bl	8006e84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim13,TIM_CHANNEL_1);
 80019fe:	2100      	movs	r1, #0
 8001a00:	4830      	ldr	r0, [pc, #192]	; (8001ac4 <main+0x170>)
 8001a02:	f005 fa3f 	bl	8006e84 <HAL_TIM_PWM_Start>
  //*
	// NRF24 inicialization
	NRF24_begin(GPIOE, GPIO_PIN_3, GPIO_PIN_10, hspi4);
 8001a06:	4c30      	ldr	r4, [pc, #192]	; (8001ac8 <main+0x174>)
 8001a08:	4668      	mov	r0, sp
 8001a0a:	1d23      	adds	r3, r4, #4
 8001a0c:	2284      	movs	r2, #132	; 0x84
 8001a0e:	4619      	mov	r1, r3
 8001a10:	f00a f93f 	bl	800bc92 <memcpy>
 8001a14:	6823      	ldr	r3, [r4, #0]
 8001a16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a1a:	2108      	movs	r1, #8
 8001a1c:	482b      	ldr	r0, [pc, #172]	; (8001acc <main+0x178>)
 8001a1e:	f7ff f819 	bl	8000a54 <NRF24_begin>
	osDelay(10);
 8001a22:	200a      	movs	r0, #10
 8001a24:	f007 fb72 	bl	800910c <osDelay>
	nrf24_DebugUART_Init(huart3);
 8001a28:	4c29      	ldr	r4, [pc, #164]	; (8001ad0 <main+0x17c>)
 8001a2a:	4668      	mov	r0, sp
 8001a2c:	f104 0310 	add.w	r3, r4, #16
 8001a30:	2280      	movs	r2, #128	; 0x80
 8001a32:	4619      	mov	r1, r3
 8001a34:	f00a f92d 	bl	800bc92 <memcpy>
 8001a38:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a3c:	f7ff ff72 	bl	8001924 <nrf24_DebugUART_Init>

	// NRF24 setup to read
	NRF24_setAutoAck(false);
 8001a40:	2000      	movs	r0, #0
 8001a42:	f7ff fa29 	bl	8000e98 <NRF24_setAutoAck>
	osDelay(10);
 8001a46:	200a      	movs	r0, #10
 8001a48:	f007 fb60 	bl	800910c <osDelay>
	NRF24_setChannel(52);
 8001a4c:	2034      	movs	r0, #52	; 0x34
 8001a4e:	f7ff f998 	bl	8000d82 <NRF24_setChannel>
	osDelay(10);
 8001a52:	200a      	movs	r0, #10
 8001a54:	f007 fb5a 	bl	800910c <osDelay>
	NRF24_setPayloadSize(32);
 8001a58:	2020      	movs	r0, #32
 8001a5a:	f7ff f9a7 	bl	8000dac <NRF24_setPayloadSize>
	osDelay(10);
 8001a5e:	200a      	movs	r0, #10
 8001a60:	f007 fb54 	bl	800910c <osDelay>
	NRF24_setDataRate(RF24_2MBPS);
 8001a64:	2001      	movs	r0, #1
 8001a66:	f7ff fa65 	bl	8000f34 <NRF24_setDataRate>
	osDelay(10);
 8001a6a:	200a      	movs	r0, #10
 8001a6c:	f007 fb4e 	bl	800910c <osDelay>
	NRF24_openReadingPipe(0, RxpipeAddrs);
 8001a70:	4b18      	ldr	r3, [pc, #96]	; (8001ad4 <main+0x180>)
 8001a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a76:	2000      	movs	r0, #0
 8001a78:	f7ff f91a 	bl	8000cb0 <NRF24_openReadingPipe>
	osDelay(10);
 8001a7c:	200a      	movs	r0, #10
 8001a7e:	f007 fb45 	bl	800910c <osDelay>
	NRF24_enableDynamicPayloads();
 8001a82:	f7ff f9bf 	bl	8000e04 <NRF24_enableDynamicPayloads>
	osDelay(10);
 8001a86:	200a      	movs	r0, #10
 8001a88:	f007 fb40 	bl	800910c <osDelay>
	printRadioSettings();
 8001a8c:	f7ff fb22 	bl	80010d4 <printRadioSettings>
	osDelay(10);
 8001a90:	200a      	movs	r0, #10
 8001a92:	f007 fb3b 	bl	800910c <osDelay>
	NRF24_startListening();
 8001a96:	f7ff f8bd 	bl	8000c14 <NRF24_startListening>
	osDelay(10);
 8001a9a:	200a      	movs	r0, #10
 8001a9c:	f007 fb36 	bl	800910c <osDelay>
  //

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001aa0:	f007 fa58 	bl	8008f54 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001aa4:	4a0c      	ldr	r2, [pc, #48]	; (8001ad8 <main+0x184>)
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	480c      	ldr	r0, [pc, #48]	; (8001adc <main+0x188>)
 8001aaa:	f007 fa9d 	bl	8008fe8 <osThreadNew>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	4a0b      	ldr	r2, [pc, #44]	; (8001ae0 <main+0x18c>)
 8001ab2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001ab4:	f007 fa72 	bl	8008f9c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <main+0x164>
 8001aba:	bf00      	nop
 8001abc:	58024400 	.word	0x58024400
 8001ac0:	24000340 	.word	0x24000340
 8001ac4:	240002f4 	.word	0x240002f4
 8001ac8:	2400026c 	.word	0x2400026c
 8001acc:	58021000 	.word	0x58021000
 8001ad0:	2400038c 	.word	0x2400038c
 8001ad4:	24000008 	.word	0x24000008
 8001ad8:	0800d564 	.word	0x0800d564
 8001adc:	08002079 	.word	0x08002079
 8001ae0:	2400041c 	.word	0x2400041c

08001ae4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b09c      	sub	sp, #112	; 0x70
 8001ae8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aee:	224c      	movs	r2, #76	; 0x4c
 8001af0:	2100      	movs	r1, #0
 8001af2:	4618      	mov	r0, r3
 8001af4:	f00a f8db 	bl	800bcae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001af8:	1d3b      	adds	r3, r7, #4
 8001afa:	2220      	movs	r2, #32
 8001afc:	2100      	movs	r1, #0
 8001afe:	4618      	mov	r0, r3
 8001b00:	f00a f8d5 	bl	800bcae <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001b04:	2004      	movs	r0, #4
 8001b06:	f001 fd29 	bl	800355c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	603b      	str	r3, [r7, #0]
 8001b0e:	4b32      	ldr	r3, [pc, #200]	; (8001bd8 <SystemClock_Config+0xf4>)
 8001b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b12:	4a31      	ldr	r2, [pc, #196]	; (8001bd8 <SystemClock_Config+0xf4>)
 8001b14:	f023 0301 	bic.w	r3, r3, #1
 8001b18:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001b1a:	4b2f      	ldr	r3, [pc, #188]	; (8001bd8 <SystemClock_Config+0xf4>)
 8001b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	603b      	str	r3, [r7, #0]
 8001b24:	4b2d      	ldr	r3, [pc, #180]	; (8001bdc <SystemClock_Config+0xf8>)
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b2c:	4a2b      	ldr	r2, [pc, #172]	; (8001bdc <SystemClock_Config+0xf8>)
 8001b2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b32:	6193      	str	r3, [r2, #24]
 8001b34:	4b29      	ldr	r3, [pc, #164]	; (8001bdc <SystemClock_Config+0xf8>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b3c:	603b      	str	r3, [r7, #0]
 8001b3e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001b40:	bf00      	nop
 8001b42:	4b26      	ldr	r3, [pc, #152]	; (8001bdc <SystemClock_Config+0xf8>)
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b4e:	d1f8      	bne.n	8001b42 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b50:	2301      	movs	r3, #1
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001b54:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001b58:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001b62:	2301      	movs	r3, #1
 8001b64:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8001b66:	2312      	movs	r3, #18
 8001b68:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b72:	2302      	movs	r3, #2
 8001b74:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001b76:	230c      	movs	r3, #12
 8001b78:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8001b7e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b82:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f001 fd41 	bl	8003610 <HAL_RCC_OscConfig>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001b94:	f000 fabc 	bl	8002110 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b98:	233f      	movs	r3, #63	; 0x3f
 8001b9a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001bac:	2340      	movs	r3, #64	; 0x40
 8001bae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001bb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bb4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001bba:	1d3b      	adds	r3, r7, #4
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f002 f954 	bl	8003e6c <HAL_RCC_ClockConfig>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <SystemClock_Config+0xea>
  {
    Error_Handler();
 8001bca:	f000 faa1 	bl	8002110 <Error_Handler>
  }
}
 8001bce:	bf00      	nop
 8001bd0:	3770      	adds	r7, #112	; 0x70
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	58000400 	.word	0x58000400
 8001bdc:	58024800 	.word	0x58024800

08001be0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001be4:	4b2e      	ldr	r3, [pc, #184]	; (8001ca0 <MX_FDCAN1_Init+0xc0>)
 8001be6:	4a2f      	ldr	r2, [pc, #188]	; (8001ca4 <MX_FDCAN1_Init+0xc4>)
 8001be8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001bea:	4b2d      	ldr	r3, [pc, #180]	; (8001ca0 <MX_FDCAN1_Init+0xc0>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001bf0:	4b2b      	ldr	r3, [pc, #172]	; (8001ca0 <MX_FDCAN1_Init+0xc0>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001bf6:	4b2a      	ldr	r3, [pc, #168]	; (8001ca0 <MX_FDCAN1_Init+0xc0>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001bfc:	4b28      	ldr	r3, [pc, #160]	; (8001ca0 <MX_FDCAN1_Init+0xc0>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001c02:	4b27      	ldr	r3, [pc, #156]	; (8001ca0 <MX_FDCAN1_Init+0xc0>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8001c08:	4b25      	ldr	r3, [pc, #148]	; (8001ca0 <MX_FDCAN1_Init+0xc0>)
 8001c0a:	2210      	movs	r2, #16
 8001c0c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001c0e:	4b24      	ldr	r3, [pc, #144]	; (8001ca0 <MX_FDCAN1_Init+0xc0>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001c14:	4b22      	ldr	r3, [pc, #136]	; (8001ca0 <MX_FDCAN1_Init+0xc0>)
 8001c16:	2202      	movs	r2, #2
 8001c18:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001c1a:	4b21      	ldr	r3, [pc, #132]	; (8001ca0 <MX_FDCAN1_Init+0xc0>)
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001c20:	4b1f      	ldr	r3, [pc, #124]	; (8001ca0 <MX_FDCAN1_Init+0xc0>)
 8001c22:	2201      	movs	r2, #1
 8001c24:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001c26:	4b1e      	ldr	r3, [pc, #120]	; (8001ca0 <MX_FDCAN1_Init+0xc0>)
 8001c28:	2201      	movs	r2, #1
 8001c2a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001c2c:	4b1c      	ldr	r3, [pc, #112]	; (8001ca0 <MX_FDCAN1_Init+0xc0>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001c32:	4b1b      	ldr	r3, [pc, #108]	; (8001ca0 <MX_FDCAN1_Init+0xc0>)
 8001c34:	2201      	movs	r2, #1
 8001c36:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001c38:	4b19      	ldr	r3, [pc, #100]	; (8001ca0 <MX_FDCAN1_Init+0xc0>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8001c3e:	4b18      	ldr	r3, [pc, #96]	; (8001ca0 <MX_FDCAN1_Init+0xc0>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001c44:	4b16      	ldr	r3, [pc, #88]	; (8001ca0 <MX_FDCAN1_Init+0xc0>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8001c4a:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <MX_FDCAN1_Init+0xc0>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001c50:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <MX_FDCAN1_Init+0xc0>)
 8001c52:	2204      	movs	r2, #4
 8001c54:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001c56:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <MX_FDCAN1_Init+0xc0>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001c5c:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <MX_FDCAN1_Init+0xc0>)
 8001c5e:	2204      	movs	r2, #4
 8001c60:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001c62:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <MX_FDCAN1_Init+0xc0>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001c68:	4b0d      	ldr	r3, [pc, #52]	; (8001ca0 <MX_FDCAN1_Init+0xc0>)
 8001c6a:	2204      	movs	r2, #4
 8001c6c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001c6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <MX_FDCAN1_Init+0xc0>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001c74:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <MX_FDCAN1_Init+0xc0>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8001c7a:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <MX_FDCAN1_Init+0xc0>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001c80:	4b07      	ldr	r3, [pc, #28]	; (8001ca0 <MX_FDCAN1_Init+0xc0>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001c86:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <MX_FDCAN1_Init+0xc0>)
 8001c88:	2204      	movs	r2, #4
 8001c8a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001c8c:	4804      	ldr	r0, [pc, #16]	; (8001ca0 <MX_FDCAN1_Init+0xc0>)
 8001c8e:	f000 ff09 	bl	8002aa4 <HAL_FDCAN_Init>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8001c98:	f000 fa3a 	bl	8002110 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001c9c:	bf00      	nop
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	240001cc 	.word	0x240001cc
 8001ca4:	4000a000 	.word	0x4000a000

08001ca8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001cac:	4b28      	ldr	r3, [pc, #160]	; (8001d50 <MX_SPI4_Init+0xa8>)
 8001cae:	4a29      	ldr	r2, [pc, #164]	; (8001d54 <MX_SPI4_Init+0xac>)
 8001cb0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001cb2:	4b27      	ldr	r3, [pc, #156]	; (8001d50 <MX_SPI4_Init+0xa8>)
 8001cb4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001cb8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001cba:	4b25      	ldr	r3, [pc, #148]	; (8001d50 <MX_SPI4_Init+0xa8>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cc0:	4b23      	ldr	r3, [pc, #140]	; (8001d50 <MX_SPI4_Init+0xa8>)
 8001cc2:	2207      	movs	r2, #7
 8001cc4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001cc6:	4b22      	ldr	r3, [pc, #136]	; (8001d50 <MX_SPI4_Init+0xa8>)
 8001cc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ccc:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001cce:	4b20      	ldr	r3, [pc, #128]	; (8001d50 <MX_SPI4_Init+0xa8>)
 8001cd0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001cd4:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001cd6:	4b1e      	ldr	r3, [pc, #120]	; (8001d50 <MX_SPI4_Init+0xa8>)
 8001cd8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001cdc:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001cde:	4b1c      	ldr	r3, [pc, #112]	; (8001d50 <MX_SPI4_Init+0xa8>)
 8001ce0:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001ce4:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ce6:	4b1a      	ldr	r3, [pc, #104]	; (8001d50 <MX_SPI4_Init+0xa8>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cec:	4b18      	ldr	r3, [pc, #96]	; (8001d50 <MX_SPI4_Init+0xa8>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cf2:	4b17      	ldr	r3, [pc, #92]	; (8001d50 <MX_SPI4_Init+0xa8>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001cf8:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <MX_SPI4_Init+0xa8>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001cfe:	4b14      	ldr	r3, [pc, #80]	; (8001d50 <MX_SPI4_Init+0xa8>)
 8001d00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d04:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001d06:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <MX_SPI4_Init+0xa8>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001d0c:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <MX_SPI4_Init+0xa8>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001d12:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <MX_SPI4_Init+0xa8>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001d18:	4b0d      	ldr	r3, [pc, #52]	; (8001d50 <MX_SPI4_Init+0xa8>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001d1e:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <MX_SPI4_Init+0xa8>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001d24:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <MX_SPI4_Init+0xa8>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001d2a:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <MX_SPI4_Init+0xa8>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001d30:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <MX_SPI4_Init+0xa8>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001d36:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <MX_SPI4_Init+0xa8>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001d3c:	4804      	ldr	r0, [pc, #16]	; (8001d50 <MX_SPI4_Init+0xa8>)
 8001d3e:	f003 ffcb 	bl	8005cd8 <HAL_SPI_Init>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_SPI4_Init+0xa4>
  {
    Error_Handler();
 8001d48:	f000 f9e2 	bl	8002110 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001d4c:	bf00      	nop
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	2400026c 	.word	0x2400026c
 8001d54:	40013400 	.word	0x40013400

08001d58 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b088      	sub	sp, #32
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d5e:	1d3b      	adds	r3, r7, #4
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
 8001d6c:	615a      	str	r2, [r3, #20]
 8001d6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001d70:	4b1e      	ldr	r3, [pc, #120]	; (8001dec <MX_TIM13_Init+0x94>)
 8001d72:	4a1f      	ldr	r2, [pc, #124]	; (8001df0 <MX_TIM13_Init+0x98>)
 8001d74:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 22;
 8001d76:	4b1d      	ldr	r3, [pc, #116]	; (8001dec <MX_TIM13_Init+0x94>)
 8001d78:	2216      	movs	r2, #22
 8001d7a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d7c:	4b1b      	ldr	r3, [pc, #108]	; (8001dec <MX_TIM13_Init+0x94>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8001d82:	4b1a      	ldr	r3, [pc, #104]	; (8001dec <MX_TIM13_Init+0x94>)
 8001d84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d88:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d8a:	4b18      	ldr	r3, [pc, #96]	; (8001dec <MX_TIM13_Init+0x94>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d90:	4b16      	ldr	r3, [pc, #88]	; (8001dec <MX_TIM13_Init+0x94>)
 8001d92:	2280      	movs	r2, #128	; 0x80
 8001d94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001d96:	4815      	ldr	r0, [pc, #84]	; (8001dec <MX_TIM13_Init+0x94>)
 8001d98:	f004 ff43 	bl	8006c22 <HAL_TIM_Base_Init>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001da2:	f000 f9b5 	bl	8002110 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001da6:	4811      	ldr	r0, [pc, #68]	; (8001dec <MX_TIM13_Init+0x94>)
 8001da8:	f005 f80a 	bl	8006dc0 <HAL_TIM_PWM_Init>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001db2:	f000 f9ad 	bl	8002110 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001db6:	2360      	movs	r3, #96	; 0x60
 8001db8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dc6:	1d3b      	adds	r3, r7, #4
 8001dc8:	2200      	movs	r2, #0
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4807      	ldr	r0, [pc, #28]	; (8001dec <MX_TIM13_Init+0x94>)
 8001dce:	f005 fa87 	bl	80072e0 <HAL_TIM_PWM_ConfigChannel>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001dd8:	f000 f99a 	bl	8002110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001ddc:	4803      	ldr	r0, [pc, #12]	; (8001dec <MX_TIM13_Init+0x94>)
 8001dde:	f000 fad1 	bl	8002384 <HAL_TIM_MspPostInit>

}
 8001de2:	bf00      	nop
 8001de4:	3720      	adds	r7, #32
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	240002f4 	.word	0x240002f4
 8001df0:	40001c00 	.word	0x40001c00

08001df4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b088      	sub	sp, #32
 8001df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dfa:	1d3b      	adds	r3, r7, #4
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
 8001e06:	611a      	str	r2, [r3, #16]
 8001e08:	615a      	str	r2, [r3, #20]
 8001e0a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001e0c:	4b1e      	ldr	r3, [pc, #120]	; (8001e88 <MX_TIM14_Init+0x94>)
 8001e0e:	4a1f      	ldr	r2, [pc, #124]	; (8001e8c <MX_TIM14_Init+0x98>)
 8001e10:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 22;
 8001e12:	4b1d      	ldr	r3, [pc, #116]	; (8001e88 <MX_TIM14_Init+0x94>)
 8001e14:	2216      	movs	r2, #22
 8001e16:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e18:	4b1b      	ldr	r3, [pc, #108]	; (8001e88 <MX_TIM14_Init+0x94>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001e1e:	4b1a      	ldr	r3, [pc, #104]	; (8001e88 <MX_TIM14_Init+0x94>)
 8001e20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e24:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e26:	4b18      	ldr	r3, [pc, #96]	; (8001e88 <MX_TIM14_Init+0x94>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e2c:	4b16      	ldr	r3, [pc, #88]	; (8001e88 <MX_TIM14_Init+0x94>)
 8001e2e:	2280      	movs	r2, #128	; 0x80
 8001e30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001e32:	4815      	ldr	r0, [pc, #84]	; (8001e88 <MX_TIM14_Init+0x94>)
 8001e34:	f004 fef5 	bl	8006c22 <HAL_TIM_Base_Init>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8001e3e:	f000 f967 	bl	8002110 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001e42:	4811      	ldr	r0, [pc, #68]	; (8001e88 <MX_TIM14_Init+0x94>)
 8001e44:	f004 ffbc 	bl	8006dc0 <HAL_TIM_PWM_Init>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8001e4e:	f000 f95f 	bl	8002110 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e52:	2360      	movs	r3, #96	; 0x60
 8001e54:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e62:	1d3b      	adds	r3, r7, #4
 8001e64:	2200      	movs	r2, #0
 8001e66:	4619      	mov	r1, r3
 8001e68:	4807      	ldr	r0, [pc, #28]	; (8001e88 <MX_TIM14_Init+0x94>)
 8001e6a:	f005 fa39 	bl	80072e0 <HAL_TIM_PWM_ConfigChannel>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001e74:	f000 f94c 	bl	8002110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001e78:	4803      	ldr	r0, [pc, #12]	; (8001e88 <MX_TIM14_Init+0x94>)
 8001e7a:	f000 fa83 	bl	8002384 <HAL_TIM_MspPostInit>

}
 8001e7e:	bf00      	nop
 8001e80:	3720      	adds	r7, #32
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	24000340 	.word	0x24000340
 8001e8c:	40002000 	.word	0x40002000

08001e90 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e94:	4b22      	ldr	r3, [pc, #136]	; (8001f20 <MX_USART3_UART_Init+0x90>)
 8001e96:	4a23      	ldr	r2, [pc, #140]	; (8001f24 <MX_USART3_UART_Init+0x94>)
 8001e98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e9a:	4b21      	ldr	r3, [pc, #132]	; (8001f20 <MX_USART3_UART_Init+0x90>)
 8001e9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ea0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ea2:	4b1f      	ldr	r3, [pc, #124]	; (8001f20 <MX_USART3_UART_Init+0x90>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ea8:	4b1d      	ldr	r3, [pc, #116]	; (8001f20 <MX_USART3_UART_Init+0x90>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001eae:	4b1c      	ldr	r3, [pc, #112]	; (8001f20 <MX_USART3_UART_Init+0x90>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <MX_USART3_UART_Init+0x90>)
 8001eb6:	220c      	movs	r2, #12
 8001eb8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eba:	4b19      	ldr	r3, [pc, #100]	; (8001f20 <MX_USART3_UART_Init+0x90>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ec0:	4b17      	ldr	r3, [pc, #92]	; (8001f20 <MX_USART3_UART_Init+0x90>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ec6:	4b16      	ldr	r3, [pc, #88]	; (8001f20 <MX_USART3_UART_Init+0x90>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ecc:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <MX_USART3_UART_Init+0x90>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ed2:	4b13      	ldr	r3, [pc, #76]	; (8001f20 <MX_USART3_UART_Init+0x90>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ed8:	4811      	ldr	r0, [pc, #68]	; (8001f20 <MX_USART3_UART_Init+0x90>)
 8001eda:	f005 fef0 	bl	8007cbe <HAL_UART_Init>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001ee4:	f000 f914 	bl	8002110 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ee8:	2100      	movs	r1, #0
 8001eea:	480d      	ldr	r0, [pc, #52]	; (8001f20 <MX_USART3_UART_Init+0x90>)
 8001eec:	f006 ff24 	bl	8008d38 <HAL_UARTEx_SetTxFifoThreshold>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001ef6:	f000 f90b 	bl	8002110 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001efa:	2100      	movs	r1, #0
 8001efc:	4808      	ldr	r0, [pc, #32]	; (8001f20 <MX_USART3_UART_Init+0x90>)
 8001efe:	f006 ff59 	bl	8008db4 <HAL_UARTEx_SetRxFifoThreshold>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001f08:	f000 f902 	bl	8002110 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001f0c:	4804      	ldr	r0, [pc, #16]	; (8001f20 <MX_USART3_UART_Init+0x90>)
 8001f0e:	f006 feda 	bl	8008cc6 <HAL_UARTEx_DisableFifoMode>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001f18:	f000 f8fa 	bl	8002110 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	2400038c 	.word	0x2400038c
 8001f24:	40004800 	.word	0x40004800

08001f28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08c      	sub	sp, #48	; 0x30
 8001f2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2e:	f107 031c 	add.w	r3, r7, #28
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	605a      	str	r2, [r3, #4]
 8001f38:	609a      	str	r2, [r3, #8]
 8001f3a:	60da      	str	r2, [r3, #12]
 8001f3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f3e:	4b4a      	ldr	r3, [pc, #296]	; (8002068 <MX_GPIO_Init+0x140>)
 8001f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f44:	4a48      	ldr	r2, [pc, #288]	; (8002068 <MX_GPIO_Init+0x140>)
 8001f46:	f043 0310 	orr.w	r3, r3, #16
 8001f4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f4e:	4b46      	ldr	r3, [pc, #280]	; (8002068 <MX_GPIO_Init+0x140>)
 8001f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f54:	f003 0310 	and.w	r3, r3, #16
 8001f58:	61bb      	str	r3, [r7, #24]
 8001f5a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f5c:	4b42      	ldr	r3, [pc, #264]	; (8002068 <MX_GPIO_Init+0x140>)
 8001f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f62:	4a41      	ldr	r2, [pc, #260]	; (8002068 <MX_GPIO_Init+0x140>)
 8001f64:	f043 0304 	orr.w	r3, r3, #4
 8001f68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f6c:	4b3e      	ldr	r3, [pc, #248]	; (8002068 <MX_GPIO_Init+0x140>)
 8001f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f72:	f003 0304 	and.w	r3, r3, #4
 8001f76:	617b      	str	r3, [r7, #20]
 8001f78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f7a:	4b3b      	ldr	r3, [pc, #236]	; (8002068 <MX_GPIO_Init+0x140>)
 8001f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f80:	4a39      	ldr	r2, [pc, #228]	; (8002068 <MX_GPIO_Init+0x140>)
 8001f82:	f043 0320 	orr.w	r3, r3, #32
 8001f86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f8a:	4b37      	ldr	r3, [pc, #220]	; (8002068 <MX_GPIO_Init+0x140>)
 8001f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f90:	f003 0320 	and.w	r3, r3, #32
 8001f94:	613b      	str	r3, [r7, #16]
 8001f96:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f98:	4b33      	ldr	r3, [pc, #204]	; (8002068 <MX_GPIO_Init+0x140>)
 8001f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f9e:	4a32      	ldr	r2, [pc, #200]	; (8002068 <MX_GPIO_Init+0x140>)
 8001fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fa4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fa8:	4b2f      	ldr	r3, [pc, #188]	; (8002068 <MX_GPIO_Init+0x140>)
 8001faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb6:	4b2c      	ldr	r3, [pc, #176]	; (8002068 <MX_GPIO_Init+0x140>)
 8001fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fbc:	4a2a      	ldr	r2, [pc, #168]	; (8002068 <MX_GPIO_Init+0x140>)
 8001fbe:	f043 0302 	orr.w	r3, r3, #2
 8001fc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fc6:	4b28      	ldr	r3, [pc, #160]	; (8002068 <MX_GPIO_Init+0x140>)
 8001fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fd4:	4b24      	ldr	r3, [pc, #144]	; (8002068 <MX_GPIO_Init+0x140>)
 8001fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fda:	4a23      	ldr	r2, [pc, #140]	; (8002068 <MX_GPIO_Init+0x140>)
 8001fdc:	f043 0308 	orr.w	r3, r3, #8
 8001fe0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fe4:	4b20      	ldr	r3, [pc, #128]	; (8002068 <MX_GPIO_Init+0x140>)
 8001fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fea:	f003 0308 	and.w	r3, r3, #8
 8001fee:	607b      	str	r3, [r7, #4]
 8001ff0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_W_Pin|CS_I_Pin|CE_W_Pin, GPIO_PIN_RESET);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8001ff8:	481c      	ldr	r0, [pc, #112]	; (800206c <MX_GPIO_Init+0x144>)
 8001ffa:	f001 fa67 	bl	80034cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001ffe:	2200      	movs	r2, #0
 8002000:	f244 0101 	movw	r1, #16385	; 0x4001
 8002004:	481a      	ldr	r0, [pc, #104]	; (8002070 <MX_GPIO_Init+0x148>)
 8002006:	f001 fa61 	bl	80034cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_W_Pin CS_I_Pin CE_W_Pin */
  GPIO_InitStruct.Pin = CS_W_Pin|CS_I_Pin|CE_W_Pin;
 800200a:	f44f 6383 	mov.w	r3, #1048	; 0x418
 800200e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002010:	2301      	movs	r3, #1
 8002012:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002018:	2300      	movs	r3, #0
 800201a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800201c:	f107 031c 	add.w	r3, r7, #28
 8002020:	4619      	mov	r1, r3
 8002022:	4812      	ldr	r0, [pc, #72]	; (800206c <MX_GPIO_Init+0x144>)
 8002024:	f001 f8a2 	bl	800316c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002028:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800202c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800202e:	2300      	movs	r3, #0
 8002030:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002032:	2300      	movs	r3, #0
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002036:	f107 031c 	add.w	r3, r7, #28
 800203a:	4619      	mov	r1, r3
 800203c:	480d      	ldr	r0, [pc, #52]	; (8002074 <MX_GPIO_Init+0x14c>)
 800203e:	f001 f895 	bl	800316c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8002042:	f244 0301 	movw	r3, #16385	; 0x4001
 8002046:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002048:	2301      	movs	r3, #1
 800204a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002050:	2300      	movs	r3, #0
 8002052:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002054:	f107 031c 	add.w	r3, r7, #28
 8002058:	4619      	mov	r1, r3
 800205a:	4805      	ldr	r0, [pc, #20]	; (8002070 <MX_GPIO_Init+0x148>)
 800205c:	f001 f886 	bl	800316c <HAL_GPIO_Init>

}
 8002060:	bf00      	nop
 8002062:	3730      	adds	r7, #48	; 0x30
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	58024400 	.word	0x58024400
 800206c:	58021000 	.word	0x58021000
 8002070:	58020400 	.word	0x58020400
 8002074:	58020800 	.word	0x58020800

08002078 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800207a:	b087      	sub	sp, #28
 800207c:	af04      	add	r7, sp, #16
 800207e:	6078      	str	r0, [r7, #4]
    //osDelay(1000);
    //printf("After\n\r");
    */
		// NRF24

	  	printf("hola \r\n");
 8002080:	4817      	ldr	r0, [pc, #92]	; (80020e0 <StartDefaultTask+0x68>)
 8002082:	f009 ff37 	bl	800bef4 <puts>
	  	 osDelay(1000);
 8002086:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800208a:	f007 f83f 	bl	800910c <osDelay>

	    if(NRF24_available()){
 800208e:	f7fe fde7 	bl	8000c60 <NRF24_available>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0f3      	beq.n	8002080 <StartDefaultTask+0x8>
		  NRF24_read(myRxData, 32);
 8002098:	2120      	movs	r1, #32
 800209a:	4812      	ldr	r0, [pc, #72]	; (80020e4 <StartDefaultTask+0x6c>)
 800209c:	f7fe fde8 	bl	8000c70 <NRF24_read>
		  printf("Coordinates: %d %d %d %d %d %d %d \r\n", myRxData[0],myRxData[1],myRxData[2],myRxData[3],myRxData[4],myRxData[5],myRxData[6]);
 80020a0:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <StartDefaultTask+0x6c>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	461c      	mov	r4, r3
 80020a6:	4b0f      	ldr	r3, [pc, #60]	; (80020e4 <StartDefaultTask+0x6c>)
 80020a8:	785b      	ldrb	r3, [r3, #1]
 80020aa:	461d      	mov	r5, r3
 80020ac:	4b0d      	ldr	r3, [pc, #52]	; (80020e4 <StartDefaultTask+0x6c>)
 80020ae:	789b      	ldrb	r3, [r3, #2]
 80020b0:	461e      	mov	r6, r3
 80020b2:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <StartDefaultTask+0x6c>)
 80020b4:	78db      	ldrb	r3, [r3, #3]
 80020b6:	461a      	mov	r2, r3
 80020b8:	4b0a      	ldr	r3, [pc, #40]	; (80020e4 <StartDefaultTask+0x6c>)
 80020ba:	791b      	ldrb	r3, [r3, #4]
 80020bc:	4619      	mov	r1, r3
 80020be:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <StartDefaultTask+0x6c>)
 80020c0:	795b      	ldrb	r3, [r3, #5]
 80020c2:	4618      	mov	r0, r3
 80020c4:	4b07      	ldr	r3, [pc, #28]	; (80020e4 <StartDefaultTask+0x6c>)
 80020c6:	799b      	ldrb	r3, [r3, #6]
 80020c8:	9303      	str	r3, [sp, #12]
 80020ca:	9002      	str	r0, [sp, #8]
 80020cc:	9101      	str	r1, [sp, #4]
 80020ce:	9200      	str	r2, [sp, #0]
 80020d0:	4633      	mov	r3, r6
 80020d2:	462a      	mov	r2, r5
 80020d4:	4621      	mov	r1, r4
 80020d6:	4804      	ldr	r0, [pc, #16]	; (80020e8 <StartDefaultTask+0x70>)
 80020d8:	f009 fe86 	bl	800bde8 <iprintf>
	  	printf("hola \r\n");
 80020dc:	e7d0      	b.n	8002080 <StartDefaultTask+0x8>
 80020de:	bf00      	nop
 80020e0:	0800d4b0 	.word	0x0800d4b0
 80020e4:	24000420 	.word	0x24000420
 80020e8:	0800d4b8 	.word	0x0800d4b8

080020ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a04      	ldr	r2, [pc, #16]	; (800210c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d101      	bne.n	8002102 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80020fe:	f000 fba1 	bl	8002844 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40001400 	.word	0x40001400

08002110 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002114:	b672      	cpsid	i
}
 8002116:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002118:	e7fe      	b.n	8002118 <Error_Handler+0x8>
	...

0800211c <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002124:	1d39      	adds	r1, r7, #4
 8002126:	f04f 33ff 	mov.w	r3, #4294967295
 800212a:	2201      	movs	r2, #1
 800212c:	4803      	ldr	r0, [pc, #12]	; (800213c <__io_putchar+0x20>)
 800212e:	f005 fe16 	bl	8007d5e <HAL_UART_Transmit>
  return ch;
 8002132:	687b      	ldr	r3, [r7, #4]
}
 8002134:	4618      	mov	r0, r3
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	2400038c 	.word	0x2400038c

08002140 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002146:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <HAL_MspInit+0x38>)
 8002148:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800214c:	4a0a      	ldr	r2, [pc, #40]	; (8002178 <HAL_MspInit+0x38>)
 800214e:	f043 0302 	orr.w	r3, r3, #2
 8002152:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002156:	4b08      	ldr	r3, [pc, #32]	; (8002178 <HAL_MspInit+0x38>)
 8002158:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	607b      	str	r3, [r7, #4]
 8002162:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002164:	2200      	movs	r2, #0
 8002166:	210f      	movs	r1, #15
 8002168:	f06f 0001 	mvn.w	r0, #1
 800216c:	f000 fc72 	bl	8002a54 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002170:	bf00      	nop
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	58024400 	.word	0x58024400

0800217c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b0b8      	sub	sp, #224	; 0xe0
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002184:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	609a      	str	r2, [r3, #8]
 8002190:	60da      	str	r2, [r3, #12]
 8002192:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002194:	f107 0310 	add.w	r3, r7, #16
 8002198:	22bc      	movs	r2, #188	; 0xbc
 800219a:	2100      	movs	r1, #0
 800219c:	4618      	mov	r0, r3
 800219e:	f009 fd86 	bl	800bcae <memset>
  if(hfdcan->Instance==FDCAN1)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a25      	ldr	r2, [pc, #148]	; (800223c <HAL_FDCAN_MspInit+0xc0>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d142      	bne.n	8002232 <HAL_FDCAN_MspInit+0xb6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80021ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021b0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80021b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80021b6:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021b8:	f107 0310 	add.w	r3, r7, #16
 80021bc:	4618      	mov	r0, r3
 80021be:	f002 fa23 	bl	8004608 <HAL_RCCEx_PeriphCLKConfig>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80021c8:	f7ff ffa2 	bl	8002110 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80021cc:	4b1c      	ldr	r3, [pc, #112]	; (8002240 <HAL_FDCAN_MspInit+0xc4>)
 80021ce:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80021d2:	4a1b      	ldr	r2, [pc, #108]	; (8002240 <HAL_FDCAN_MspInit+0xc4>)
 80021d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d8:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80021dc:	4b18      	ldr	r3, [pc, #96]	; (8002240 <HAL_FDCAN_MspInit+0xc4>)
 80021de:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80021e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021ea:	4b15      	ldr	r3, [pc, #84]	; (8002240 <HAL_FDCAN_MspInit+0xc4>)
 80021ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021f0:	4a13      	ldr	r2, [pc, #76]	; (8002240 <HAL_FDCAN_MspInit+0xc4>)
 80021f2:	f043 0308 	orr.w	r3, r3, #8
 80021f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021fa:	4b11      	ldr	r3, [pc, #68]	; (8002240 <HAL_FDCAN_MspInit+0xc4>)
 80021fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002200:	f003 0308 	and.w	r3, r3, #8
 8002204:	60bb      	str	r3, [r7, #8]
 8002206:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002208:	2303      	movs	r3, #3
 800220a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220e:	2302      	movs	r3, #2
 8002210:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002214:	2300      	movs	r3, #0
 8002216:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221a:	2300      	movs	r3, #0
 800221c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002220:	2309      	movs	r3, #9
 8002222:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002226:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800222a:	4619      	mov	r1, r3
 800222c:	4805      	ldr	r0, [pc, #20]	; (8002244 <HAL_FDCAN_MspInit+0xc8>)
 800222e:	f000 ff9d 	bl	800316c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8002232:	bf00      	nop
 8002234:	37e0      	adds	r7, #224	; 0xe0
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	4000a000 	.word	0x4000a000
 8002240:	58024400 	.word	0x58024400
 8002244:	58020c00 	.word	0x58020c00

08002248 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b0b8      	sub	sp, #224	; 0xe0
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002250:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]
 800225e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002260:	f107 0310 	add.w	r3, r7, #16
 8002264:	22bc      	movs	r2, #188	; 0xbc
 8002266:	2100      	movs	r1, #0
 8002268:	4618      	mov	r0, r3
 800226a:	f009 fd20 	bl	800bcae <memset>
  if(hspi->Instance==SPI4)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a24      	ldr	r2, [pc, #144]	; (8002304 <HAL_SPI_MspInit+0xbc>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d141      	bne.n	80022fc <HAL_SPI_MspInit+0xb4>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8002278:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800227c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800227e:	2300      	movs	r3, #0
 8002280:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002282:	f107 0310 	add.w	r3, r7, #16
 8002286:	4618      	mov	r0, r3
 8002288:	f002 f9be 	bl	8004608 <HAL_RCCEx_PeriphCLKConfig>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8002292:	f7ff ff3d 	bl	8002110 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002296:	4b1c      	ldr	r3, [pc, #112]	; (8002308 <HAL_SPI_MspInit+0xc0>)
 8002298:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800229c:	4a1a      	ldr	r2, [pc, #104]	; (8002308 <HAL_SPI_MspInit+0xc0>)
 800229e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80022a6:	4b18      	ldr	r3, [pc, #96]	; (8002308 <HAL_SPI_MspInit+0xc0>)
 80022a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022b4:	4b14      	ldr	r3, [pc, #80]	; (8002308 <HAL_SPI_MspInit+0xc0>)
 80022b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ba:	4a13      	ldr	r2, [pc, #76]	; (8002308 <HAL_SPI_MspInit+0xc0>)
 80022bc:	f043 0310 	orr.w	r3, r3, #16
 80022c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022c4:	4b10      	ldr	r3, [pc, #64]	; (8002308 <HAL_SPI_MspInit+0xc0>)
 80022c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ca:	f003 0310 	and.w	r3, r3, #16
 80022ce:	60bb      	str	r3, [r7, #8]
 80022d0:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80022d2:	2364      	movs	r3, #100	; 0x64
 80022d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d8:	2302      	movs	r3, #2
 80022da:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e4:	2300      	movs	r3, #0
 80022e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80022ea:	2305      	movs	r3, #5
 80022ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80022f4:	4619      	mov	r1, r3
 80022f6:	4805      	ldr	r0, [pc, #20]	; (800230c <HAL_SPI_MspInit+0xc4>)
 80022f8:	f000 ff38 	bl	800316c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80022fc:	bf00      	nop
 80022fe:	37e0      	adds	r7, #224	; 0xe0
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40013400 	.word	0x40013400
 8002308:	58024400 	.word	0x58024400
 800230c:	58021000 	.word	0x58021000

08002310 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a16      	ldr	r2, [pc, #88]	; (8002378 <HAL_TIM_Base_MspInit+0x68>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d10f      	bne.n	8002342 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002322:	4b16      	ldr	r3, [pc, #88]	; (800237c <HAL_TIM_Base_MspInit+0x6c>)
 8002324:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002328:	4a14      	ldr	r2, [pc, #80]	; (800237c <HAL_TIM_Base_MspInit+0x6c>)
 800232a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800232e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002332:	4b12      	ldr	r3, [pc, #72]	; (800237c <HAL_TIM_Base_MspInit+0x6c>)
 8002334:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002340:	e013      	b.n	800236a <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM14)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a0e      	ldr	r2, [pc, #56]	; (8002380 <HAL_TIM_Base_MspInit+0x70>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d10e      	bne.n	800236a <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800234c:	4b0b      	ldr	r3, [pc, #44]	; (800237c <HAL_TIM_Base_MspInit+0x6c>)
 800234e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002352:	4a0a      	ldr	r2, [pc, #40]	; (800237c <HAL_TIM_Base_MspInit+0x6c>)
 8002354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002358:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800235c:	4b07      	ldr	r3, [pc, #28]	; (800237c <HAL_TIM_Base_MspInit+0x6c>)
 800235e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002366:	60bb      	str	r3, [r7, #8]
 8002368:	68bb      	ldr	r3, [r7, #8]
}
 800236a:	bf00      	nop
 800236c:	3714      	adds	r7, #20
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	40001c00 	.word	0x40001c00
 800237c:	58024400 	.word	0x58024400
 8002380:	40002000 	.word	0x40002000

08002384 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b08a      	sub	sp, #40	; 0x28
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800238c:	f107 0314 	add.w	r3, r7, #20
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	609a      	str	r2, [r3, #8]
 8002398:	60da      	str	r2, [r3, #12]
 800239a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a26      	ldr	r2, [pc, #152]	; (800243c <HAL_TIM_MspPostInit+0xb8>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d120      	bne.n	80023e8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80023a6:	4b26      	ldr	r3, [pc, #152]	; (8002440 <HAL_TIM_MspPostInit+0xbc>)
 80023a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ac:	4a24      	ldr	r2, [pc, #144]	; (8002440 <HAL_TIM_MspPostInit+0xbc>)
 80023ae:	f043 0320 	orr.w	r3, r3, #32
 80023b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023b6:	4b22      	ldr	r3, [pc, #136]	; (8002440 <HAL_TIM_MspPostInit+0xbc>)
 80023b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023bc:	f003 0320 	and.w	r3, r3, #32
 80023c0:	613b      	str	r3, [r7, #16]
 80023c2:	693b      	ldr	r3, [r7, #16]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80023c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ca:	2302      	movs	r3, #2
 80023cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d2:	2300      	movs	r3, #0
 80023d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80023d6:	2309      	movs	r3, #9
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80023da:	f107 0314 	add.w	r3, r7, #20
 80023de:	4619      	mov	r1, r3
 80023e0:	4818      	ldr	r0, [pc, #96]	; (8002444 <HAL_TIM_MspPostInit+0xc0>)
 80023e2:	f000 fec3 	bl	800316c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 80023e6:	e024      	b.n	8002432 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM14)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a16      	ldr	r2, [pc, #88]	; (8002448 <HAL_TIM_MspPostInit+0xc4>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d11f      	bne.n	8002432 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80023f2:	4b13      	ldr	r3, [pc, #76]	; (8002440 <HAL_TIM_MspPostInit+0xbc>)
 80023f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023f8:	4a11      	ldr	r2, [pc, #68]	; (8002440 <HAL_TIM_MspPostInit+0xbc>)
 80023fa:	f043 0320 	orr.w	r3, r3, #32
 80023fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002402:	4b0f      	ldr	r3, [pc, #60]	; (8002440 <HAL_TIM_MspPostInit+0xbc>)
 8002404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002408:	f003 0320 	and.w	r3, r3, #32
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002410:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002416:	2302      	movs	r3, #2
 8002418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241a:	2300      	movs	r3, #0
 800241c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241e:	2300      	movs	r3, #0
 8002420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8002422:	2309      	movs	r3, #9
 8002424:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002426:	f107 0314 	add.w	r3, r7, #20
 800242a:	4619      	mov	r1, r3
 800242c:	4805      	ldr	r0, [pc, #20]	; (8002444 <HAL_TIM_MspPostInit+0xc0>)
 800242e:	f000 fe9d 	bl	800316c <HAL_GPIO_Init>
}
 8002432:	bf00      	nop
 8002434:	3728      	adds	r7, #40	; 0x28
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40001c00 	.word	0x40001c00
 8002440:	58024400 	.word	0x58024400
 8002444:	58021400 	.word	0x58021400
 8002448:	40002000 	.word	0x40002000

0800244c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b0b8      	sub	sp, #224	; 0xe0
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002454:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	605a      	str	r2, [r3, #4]
 800245e:	609a      	str	r2, [r3, #8]
 8002460:	60da      	str	r2, [r3, #12]
 8002462:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002464:	f107 0310 	add.w	r3, r7, #16
 8002468:	22bc      	movs	r2, #188	; 0xbc
 800246a:	2100      	movs	r1, #0
 800246c:	4618      	mov	r0, r3
 800246e:	f009 fc1e 	bl	800bcae <memset>
  if(huart->Instance==USART3)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a25      	ldr	r2, [pc, #148]	; (800250c <HAL_UART_MspInit+0xc0>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d142      	bne.n	8002502 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800247c:	2302      	movs	r3, #2
 800247e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002480:	2300      	movs	r3, #0
 8002482:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002486:	f107 0310 	add.w	r3, r7, #16
 800248a:	4618      	mov	r0, r3
 800248c:	f002 f8bc 	bl	8004608 <HAL_RCCEx_PeriphCLKConfig>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002496:	f7ff fe3b 	bl	8002110 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800249a:	4b1d      	ldr	r3, [pc, #116]	; (8002510 <HAL_UART_MspInit+0xc4>)
 800249c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024a0:	4a1b      	ldr	r2, [pc, #108]	; (8002510 <HAL_UART_MspInit+0xc4>)
 80024a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024a6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80024aa:	4b19      	ldr	r3, [pc, #100]	; (8002510 <HAL_UART_MspInit+0xc4>)
 80024ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024b8:	4b15      	ldr	r3, [pc, #84]	; (8002510 <HAL_UART_MspInit+0xc4>)
 80024ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024be:	4a14      	ldr	r2, [pc, #80]	; (8002510 <HAL_UART_MspInit+0xc4>)
 80024c0:	f043 0308 	orr.w	r3, r3, #8
 80024c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024c8:	4b11      	ldr	r3, [pc, #68]	; (8002510 <HAL_UART_MspInit+0xc4>)
 80024ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80024d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024de:	2302      	movs	r3, #2
 80024e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ea:	2300      	movs	r3, #0
 80024ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024f0:	2307      	movs	r3, #7
 80024f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024f6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80024fa:	4619      	mov	r1, r3
 80024fc:	4805      	ldr	r0, [pc, #20]	; (8002514 <HAL_UART_MspInit+0xc8>)
 80024fe:	f000 fe35 	bl	800316c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002502:	bf00      	nop
 8002504:	37e0      	adds	r7, #224	; 0xe0
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40004800 	.word	0x40004800
 8002510:	58024400 	.word	0x58024400
 8002514:	58020c00 	.word	0x58020c00

08002518 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b090      	sub	sp, #64	; 0x40
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b0f      	cmp	r3, #15
 8002524:	d827      	bhi.n	8002576 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 8002526:	2200      	movs	r2, #0
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	2037      	movs	r0, #55	; 0x37
 800252c:	f000 fa92 	bl	8002a54 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002530:	2037      	movs	r0, #55	; 0x37
 8002532:	f000 faa9 	bl	8002a88 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002536:	4a29      	ldr	r2, [pc, #164]	; (80025dc <HAL_InitTick+0xc4>)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 800253c:	4b28      	ldr	r3, [pc, #160]	; (80025e0 <HAL_InitTick+0xc8>)
 800253e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002542:	4a27      	ldr	r2, [pc, #156]	; (80025e0 <HAL_InitTick+0xc8>)
 8002544:	f043 0320 	orr.w	r3, r3, #32
 8002548:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800254c:	4b24      	ldr	r3, [pc, #144]	; (80025e0 <HAL_InitTick+0xc8>)
 800254e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002552:	f003 0320 	and.w	r3, r3, #32
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800255a:	f107 0210 	add.w	r2, r7, #16
 800255e:	f107 0314 	add.w	r3, r7, #20
 8002562:	4611      	mov	r1, r2
 8002564:	4618      	mov	r0, r3
 8002566:	f002 f80d 	bl	8004584 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800256a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800256c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800256e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002570:	2b00      	cmp	r3, #0
 8002572:	d106      	bne.n	8002582 <HAL_InitTick+0x6a>
 8002574:	e001      	b.n	800257a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e02b      	b.n	80025d2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800257a:	f001 ffd7 	bl	800452c <HAL_RCC_GetPCLK1Freq>
 800257e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002580:	e004      	b.n	800258c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002582:	f001 ffd3 	bl	800452c <HAL_RCC_GetPCLK1Freq>
 8002586:	4603      	mov	r3, r0
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800258c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800258e:	4a15      	ldr	r2, [pc, #84]	; (80025e4 <HAL_InitTick+0xcc>)
 8002590:	fba2 2303 	umull	r2, r3, r2, r3
 8002594:	0c9b      	lsrs	r3, r3, #18
 8002596:	3b01      	subs	r3, #1
 8002598:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800259a:	4b13      	ldr	r3, [pc, #76]	; (80025e8 <HAL_InitTick+0xd0>)
 800259c:	4a13      	ldr	r2, [pc, #76]	; (80025ec <HAL_InitTick+0xd4>)
 800259e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80025a0:	4b11      	ldr	r3, [pc, #68]	; (80025e8 <HAL_InitTick+0xd0>)
 80025a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025a6:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80025a8:	4a0f      	ldr	r2, [pc, #60]	; (80025e8 <HAL_InitTick+0xd0>)
 80025aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ac:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80025ae:	4b0e      	ldr	r3, [pc, #56]	; (80025e8 <HAL_InitTick+0xd0>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025b4:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <HAL_InitTick+0xd0>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 80025ba:	480b      	ldr	r0, [pc, #44]	; (80025e8 <HAL_InitTick+0xd0>)
 80025bc:	f004 fb31 	bl	8006c22 <HAL_TIM_Base_Init>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d104      	bne.n	80025d0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 80025c6:	4808      	ldr	r0, [pc, #32]	; (80025e8 <HAL_InitTick+0xd0>)
 80025c8:	f004 fb82 	bl	8006cd0 <HAL_TIM_Base_Start_IT>
 80025cc:	4603      	mov	r3, r0
 80025ce:	e000      	b.n	80025d2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3740      	adds	r7, #64	; 0x40
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	24000010 	.word	0x24000010
 80025e0:	58024400 	.word	0x58024400
 80025e4:	431bde83 	.word	0x431bde83
 80025e8:	24000484 	.word	0x24000484
 80025ec:	40001400 	.word	0x40001400

080025f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025f4:	e7fe      	b.n	80025f4 <NMI_Handler+0x4>

080025f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025f6:	b480      	push	{r7}
 80025f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025fa:	e7fe      	b.n	80025fa <HardFault_Handler+0x4>

080025fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002600:	e7fe      	b.n	8002600 <MemManage_Handler+0x4>

08002602 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002602:	b480      	push	{r7}
 8002604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002606:	e7fe      	b.n	8002606 <BusFault_Handler+0x4>

08002608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800260c:	e7fe      	b.n	800260c <UsageFault_Handler+0x4>

0800260e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800260e:	b480      	push	{r7}
 8002610:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002612:	bf00      	nop
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002620:	4802      	ldr	r0, [pc, #8]	; (800262c <TIM7_IRQHandler+0x10>)
 8002622:	f004 fd3d 	bl	80070a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002626:	bf00      	nop
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	24000484 	.word	0x24000484

08002630 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800263c:	2300      	movs	r3, #0
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	e00a      	b.n	8002658 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002642:	f3af 8000 	nop.w
 8002646:	4601      	mov	r1, r0
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	1c5a      	adds	r2, r3, #1
 800264c:	60ba      	str	r2, [r7, #8]
 800264e:	b2ca      	uxtb	r2, r1
 8002650:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	3301      	adds	r3, #1
 8002656:	617b      	str	r3, [r7, #20]
 8002658:	697a      	ldr	r2, [r7, #20]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	429a      	cmp	r2, r3
 800265e:	dbf0      	blt.n	8002642 <_read+0x12>
	}

return len;
 8002660:	687b      	ldr	r3, [r7, #4]
}
 8002662:	4618      	mov	r0, r3
 8002664:	3718      	adds	r7, #24
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b086      	sub	sp, #24
 800266e:	af00      	add	r7, sp, #0
 8002670:	60f8      	str	r0, [r7, #12]
 8002672:	60b9      	str	r1, [r7, #8]
 8002674:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002676:	2300      	movs	r3, #0
 8002678:	617b      	str	r3, [r7, #20]
 800267a:	e009      	b.n	8002690 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	1c5a      	adds	r2, r3, #1
 8002680:	60ba      	str	r2, [r7, #8]
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff fd49 	bl	800211c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	3301      	adds	r3, #1
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	429a      	cmp	r2, r3
 8002696:	dbf1      	blt.n	800267c <_write+0x12>
	}
	return len;
 8002698:	687b      	ldr	r3, [r7, #4]
}
 800269a:	4618      	mov	r0, r3
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <_close>:

int _close(int file)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
	return -1;
 80026aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
 80026c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026ca:	605a      	str	r2, [r3, #4]
	return 0;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <_isatty>:

int _isatty(int file)
{
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
	return 1;
 80026e2:	2301      	movs	r3, #1
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
	return 0;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3714      	adds	r7, #20
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
	...

0800270c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002714:	4a14      	ldr	r2, [pc, #80]	; (8002768 <_sbrk+0x5c>)
 8002716:	4b15      	ldr	r3, [pc, #84]	; (800276c <_sbrk+0x60>)
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002720:	4b13      	ldr	r3, [pc, #76]	; (8002770 <_sbrk+0x64>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d102      	bne.n	800272e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002728:	4b11      	ldr	r3, [pc, #68]	; (8002770 <_sbrk+0x64>)
 800272a:	4a12      	ldr	r2, [pc, #72]	; (8002774 <_sbrk+0x68>)
 800272c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800272e:	4b10      	ldr	r3, [pc, #64]	; (8002770 <_sbrk+0x64>)
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4413      	add	r3, r2
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	429a      	cmp	r2, r3
 800273a:	d207      	bcs.n	800274c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800273c:	f009 f986 	bl	800ba4c <__errno>
 8002740:	4603      	mov	r3, r0
 8002742:	220c      	movs	r2, #12
 8002744:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002746:	f04f 33ff 	mov.w	r3, #4294967295
 800274a:	e009      	b.n	8002760 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800274c:	4b08      	ldr	r3, [pc, #32]	; (8002770 <_sbrk+0x64>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002752:	4b07      	ldr	r3, [pc, #28]	; (8002770 <_sbrk+0x64>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4413      	add	r3, r2
 800275a:	4a05      	ldr	r2, [pc, #20]	; (8002770 <_sbrk+0x64>)
 800275c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800275e:	68fb      	ldr	r3, [r7, #12]
}
 8002760:	4618      	mov	r0, r3
 8002762:	3718      	adds	r7, #24
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	24080000 	.word	0x24080000
 800276c:	00000400 	.word	0x00000400
 8002770:	240004d0 	.word	0x240004d0
 8002774:	24004ef8 	.word	0x24004ef8

08002778 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002778:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800277c:	f7fd ff8a 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002780:	480c      	ldr	r0, [pc, #48]	; (80027b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002782:	490d      	ldr	r1, [pc, #52]	; (80027b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002784:	4a0d      	ldr	r2, [pc, #52]	; (80027bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002786:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002788:	e002      	b.n	8002790 <LoopCopyDataInit>

0800278a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800278a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800278c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800278e:	3304      	adds	r3, #4

08002790 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002790:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002792:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002794:	d3f9      	bcc.n	800278a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002796:	4a0a      	ldr	r2, [pc, #40]	; (80027c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002798:	4c0a      	ldr	r4, [pc, #40]	; (80027c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800279a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800279c:	e001      	b.n	80027a2 <LoopFillZerobss>

0800279e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800279e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027a0:	3204      	adds	r2, #4

080027a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027a4:	d3fb      	bcc.n	800279e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027a6:	f009 fa4d 	bl	800bc44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027aa:	f7ff f8d3 	bl	8001954 <main>
  bx  lr
 80027ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027b0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80027b4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80027b8:	24000080 	.word	0x24000080
  ldr r2, =_sidata
 80027bc:	0800d658 	.word	0x0800d658
  ldr r2, =_sbss
 80027c0:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 80027c4:	24004ef8 	.word	0x24004ef8

080027c8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027c8:	e7fe      	b.n	80027c8 <ADC3_IRQHandler>
	...

080027cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027d2:	2003      	movs	r0, #3
 80027d4:	f000 f933 	bl	8002a3e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80027d8:	f001 fcfe 	bl	80041d8 <HAL_RCC_GetSysClockFreq>
 80027dc:	4602      	mov	r2, r0
 80027de:	4b15      	ldr	r3, [pc, #84]	; (8002834 <HAL_Init+0x68>)
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	0a1b      	lsrs	r3, r3, #8
 80027e4:	f003 030f 	and.w	r3, r3, #15
 80027e8:	4913      	ldr	r1, [pc, #76]	; (8002838 <HAL_Init+0x6c>)
 80027ea:	5ccb      	ldrb	r3, [r1, r3]
 80027ec:	f003 031f 	and.w	r3, r3, #31
 80027f0:	fa22 f303 	lsr.w	r3, r2, r3
 80027f4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027f6:	4b0f      	ldr	r3, [pc, #60]	; (8002834 <HAL_Init+0x68>)
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	f003 030f 	and.w	r3, r3, #15
 80027fe:	4a0e      	ldr	r2, [pc, #56]	; (8002838 <HAL_Init+0x6c>)
 8002800:	5cd3      	ldrb	r3, [r2, r3]
 8002802:	f003 031f 	and.w	r3, r3, #31
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	fa22 f303 	lsr.w	r3, r2, r3
 800280c:	4a0b      	ldr	r2, [pc, #44]	; (800283c <HAL_Init+0x70>)
 800280e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002810:	4a0b      	ldr	r2, [pc, #44]	; (8002840 <HAL_Init+0x74>)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002816:	200f      	movs	r0, #15
 8002818:	f7ff fe7e 	bl	8002518 <HAL_InitTick>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e002      	b.n	800282c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002826:	f7ff fc8b 	bl	8002140 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	58024400 	.word	0x58024400
 8002838:	0800d544 	.word	0x0800d544
 800283c:	24000004 	.word	0x24000004
 8002840:	24000000 	.word	0x24000000

08002844 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002848:	4b06      	ldr	r3, [pc, #24]	; (8002864 <HAL_IncTick+0x20>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	461a      	mov	r2, r3
 800284e:	4b06      	ldr	r3, [pc, #24]	; (8002868 <HAL_IncTick+0x24>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4413      	add	r3, r2
 8002854:	4a04      	ldr	r2, [pc, #16]	; (8002868 <HAL_IncTick+0x24>)
 8002856:	6013      	str	r3, [r2, #0]
}
 8002858:	bf00      	nop
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	24000014 	.word	0x24000014
 8002868:	240004d4 	.word	0x240004d4

0800286c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  return uwTick;
 8002870:	4b03      	ldr	r3, [pc, #12]	; (8002880 <HAL_GetTick+0x14>)
 8002872:	681b      	ldr	r3, [r3, #0]
}
 8002874:	4618      	mov	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	240004d4 	.word	0x240004d4

08002884 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800288c:	f7ff ffee 	bl	800286c <HAL_GetTick>
 8002890:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800289c:	d005      	beq.n	80028aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800289e:	4b0a      	ldr	r3, [pc, #40]	; (80028c8 <HAL_Delay+0x44>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	461a      	mov	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	4413      	add	r3, r2
 80028a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028aa:	bf00      	nop
 80028ac:	f7ff ffde 	bl	800286c <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d8f7      	bhi.n	80028ac <HAL_Delay+0x28>
  {
  }
}
 80028bc:	bf00      	nop
 80028be:	bf00      	nop
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	24000014 	.word	0x24000014

080028cc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80028d0:	4b03      	ldr	r3, [pc, #12]	; (80028e0 <HAL_GetREVID+0x14>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	0c1b      	lsrs	r3, r3, #16
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	5c001000 	.word	0x5c001000

080028e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028f4:	4b0b      	ldr	r3, [pc, #44]	; (8002924 <__NVIC_SetPriorityGrouping+0x40>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002900:	4013      	ands	r3, r2
 8002902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800290c:	4b06      	ldr	r3, [pc, #24]	; (8002928 <__NVIC_SetPriorityGrouping+0x44>)
 800290e:	4313      	orrs	r3, r2
 8002910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002912:	4a04      	ldr	r2, [pc, #16]	; (8002924 <__NVIC_SetPriorityGrouping+0x40>)
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	60d3      	str	r3, [r2, #12]
}
 8002918:	bf00      	nop
 800291a:	3714      	adds	r7, #20
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	e000ed00 	.word	0xe000ed00
 8002928:	05fa0000 	.word	0x05fa0000

0800292c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002930:	4b04      	ldr	r3, [pc, #16]	; (8002944 <__NVIC_GetPriorityGrouping+0x18>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	0a1b      	lsrs	r3, r3, #8
 8002936:	f003 0307 	and.w	r3, r3, #7
}
 800293a:	4618      	mov	r0, r3
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	e000ed00 	.word	0xe000ed00

08002948 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002952:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002956:	2b00      	cmp	r3, #0
 8002958:	db0b      	blt.n	8002972 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800295a:	88fb      	ldrh	r3, [r7, #6]
 800295c:	f003 021f 	and.w	r2, r3, #31
 8002960:	4907      	ldr	r1, [pc, #28]	; (8002980 <__NVIC_EnableIRQ+0x38>)
 8002962:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002966:	095b      	lsrs	r3, r3, #5
 8002968:	2001      	movs	r0, #1
 800296a:	fa00 f202 	lsl.w	r2, r0, r2
 800296e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	e000e100 	.word	0xe000e100

08002984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	6039      	str	r1, [r7, #0]
 800298e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002990:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002994:	2b00      	cmp	r3, #0
 8002996:	db0a      	blt.n	80029ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	b2da      	uxtb	r2, r3
 800299c:	490c      	ldr	r1, [pc, #48]	; (80029d0 <__NVIC_SetPriority+0x4c>)
 800299e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029a2:	0112      	lsls	r2, r2, #4
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	440b      	add	r3, r1
 80029a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029ac:	e00a      	b.n	80029c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	4908      	ldr	r1, [pc, #32]	; (80029d4 <__NVIC_SetPriority+0x50>)
 80029b4:	88fb      	ldrh	r3, [r7, #6]
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	3b04      	subs	r3, #4
 80029bc:	0112      	lsls	r2, r2, #4
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	440b      	add	r3, r1
 80029c2:	761a      	strb	r2, [r3, #24]
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	e000e100 	.word	0xe000e100
 80029d4:	e000ed00 	.word	0xe000ed00

080029d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029d8:	b480      	push	{r7}
 80029da:	b089      	sub	sp, #36	; 0x24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	f1c3 0307 	rsb	r3, r3, #7
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	bf28      	it	cs
 80029f6:	2304      	movcs	r3, #4
 80029f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	3304      	adds	r3, #4
 80029fe:	2b06      	cmp	r3, #6
 8002a00:	d902      	bls.n	8002a08 <NVIC_EncodePriority+0x30>
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	3b03      	subs	r3, #3
 8002a06:	e000      	b.n	8002a0a <NVIC_EncodePriority+0x32>
 8002a08:	2300      	movs	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43da      	mvns	r2, r3
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	401a      	ands	r2, r3
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a20:	f04f 31ff 	mov.w	r1, #4294967295
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2a:	43d9      	mvns	r1, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a30:	4313      	orrs	r3, r2
         );
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3724      	adds	r7, #36	; 0x24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b082      	sub	sp, #8
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7ff ff4c 	bl	80028e4 <__NVIC_SetPriorityGrouping>
}
 8002a4c:	bf00      	nop
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
 8002a60:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a62:	f7ff ff63 	bl	800292c <__NVIC_GetPriorityGrouping>
 8002a66:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	68b9      	ldr	r1, [r7, #8]
 8002a6c:	6978      	ldr	r0, [r7, #20]
 8002a6e:	f7ff ffb3 	bl	80029d8 <NVIC_EncodePriority>
 8002a72:	4602      	mov	r2, r0
 8002a74:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a78:	4611      	mov	r1, r2
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff ff82 	bl	8002984 <__NVIC_SetPriority>
}
 8002a80:	bf00      	nop
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff ff56 	bl	8002948 <__NVIC_EnableIRQ>
}
 8002a9c:	bf00      	nop
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b098      	sub	sp, #96	; 0x60
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8002aac:	4a84      	ldr	r2, [pc, #528]	; (8002cc0 <HAL_FDCAN_Init+0x21c>)
 8002aae:	f107 030c 	add.w	r3, r7, #12
 8002ab2:	4611      	mov	r1, r2
 8002ab4:	224c      	movs	r2, #76	; 0x4c
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f009 f8eb 	bl	800bc92 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e1c6      	b.n	8002e54 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a7e      	ldr	r2, [pc, #504]	; (8002cc4 <HAL_FDCAN_Init+0x220>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d106      	bne.n	8002ade <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002ad8:	461a      	mov	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d106      	bne.n	8002af8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7ff fb42 	bl	800217c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	699a      	ldr	r2, [r3, #24]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 0210 	bic.w	r2, r2, #16
 8002b06:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b08:	f7ff feb0 	bl	800286c <HAL_GetTick>
 8002b0c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002b0e:	e014      	b.n	8002b3a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002b10:	f7ff feac 	bl	800286c <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b0a      	cmp	r3, #10
 8002b1c:	d90d      	bls.n	8002b3a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b24:	f043 0201 	orr.w	r2, r3, #1
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2203      	movs	r2, #3
 8002b32:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e18c      	b.n	8002e54 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	f003 0308 	and.w	r3, r3, #8
 8002b44:	2b08      	cmp	r3, #8
 8002b46:	d0e3      	beq.n	8002b10 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	699a      	ldr	r2, [r3, #24]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 0201 	orr.w	r2, r2, #1
 8002b56:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b58:	f7ff fe88 	bl	800286c <HAL_GetTick>
 8002b5c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002b5e:	e014      	b.n	8002b8a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002b60:	f7ff fe84 	bl	800286c <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b0a      	cmp	r3, #10
 8002b6c:	d90d      	bls.n	8002b8a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b74:	f043 0201 	orr.w	r2, r3, #1
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2203      	movs	r2, #3
 8002b82:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e164      	b.n	8002e54 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0e3      	beq.n	8002b60 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	699a      	ldr	r2, [r3, #24]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0202 	orr.w	r2, r2, #2
 8002ba6:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	7c1b      	ldrb	r3, [r3, #16]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d108      	bne.n	8002bc2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	699a      	ldr	r2, [r3, #24]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bbe:	619a      	str	r2, [r3, #24]
 8002bc0:	e007      	b.n	8002bd2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	699a      	ldr	r2, [r3, #24]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bd0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	7c5b      	ldrb	r3, [r3, #17]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d108      	bne.n	8002bec <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	699a      	ldr	r2, [r3, #24]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002be8:	619a      	str	r2, [r3, #24]
 8002bea:	e007      	b.n	8002bfc <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	699a      	ldr	r2, [r3, #24]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002bfa:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	7c9b      	ldrb	r3, [r3, #18]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d108      	bne.n	8002c16 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	699a      	ldr	r2, [r3, #24]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c12:	619a      	str	r2, [r3, #24]
 8002c14:	e007      	b.n	8002c26 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	699a      	ldr	r2, [r3, #24]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c24:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	699a      	ldr	r2, [r3, #24]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002c4a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	691a      	ldr	r2, [r3, #16]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 0210 	bic.w	r2, r2, #16
 8002c5a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d108      	bne.n	8002c76 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699a      	ldr	r2, [r3, #24]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f042 0204 	orr.w	r2, r2, #4
 8002c72:	619a      	str	r2, [r3, #24]
 8002c74:	e030      	b.n	8002cd8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d02c      	beq.n	8002cd8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d020      	beq.n	8002cc8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	699a      	ldr	r2, [r3, #24]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c94:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	691a      	ldr	r2, [r3, #16]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f042 0210 	orr.w	r2, r2, #16
 8002ca4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	2b03      	cmp	r3, #3
 8002cac:	d114      	bne.n	8002cd8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	699a      	ldr	r2, [r3, #24]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f042 0220 	orr.w	r2, r2, #32
 8002cbc:	619a      	str	r2, [r3, #24]
 8002cbe:	e00b      	b.n	8002cd8 <HAL_FDCAN_Init+0x234>
 8002cc0:	0800d4e0 	.word	0x0800d4e0
 8002cc4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699a      	ldr	r2, [r3, #24]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 0220 	orr.w	r2, r2, #32
 8002cd6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002ce8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002cf0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002d00:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002d02:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d0c:	d115      	bne.n	8002d3a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d12:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002d1c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	3b01      	subs	r3, #1
 8002d24:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8002d26:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8002d36:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002d38:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00a      	beq.n	8002d58 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d60:	4413      	add	r3, r2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d011      	beq.n	8002d8a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002d6e:	f023 0107 	bic.w	r1, r3, #7
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	3360      	adds	r3, #96	; 0x60
 8002d7a:	443b      	add	r3, r7
 8002d7c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	430a      	orrs	r2, r1
 8002d86:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d011      	beq.n	8002db6 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002d9a:	f023 0107 	bic.w	r1, r3, #7
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	3360      	adds	r3, #96	; 0x60
 8002da6:	443b      	add	r3, r7
 8002da8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d012      	beq.n	8002de4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002dc6:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	3360      	adds	r3, #96	; 0x60
 8002dd2:	443b      	add	r3, r7
 8002dd4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002dd8:	011a      	lsls	r2, r3, #4
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d012      	beq.n	8002e12 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002df4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	3360      	adds	r3, #96	; 0x60
 8002e00:	443b      	add	r3, r7
 8002e02:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002e06:	021a      	lsls	r2, r3, #8
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a11      	ldr	r2, [pc, #68]	; (8002e5c <HAL_FDCAN_Init+0x3b8>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d107      	bne.n	8002e2c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	689a      	ldr	r2, [r3, #8]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f022 0203 	bic.w	r2, r2, #3
 8002e2a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 f80b 	bl	8002e60 <FDCAN_CalcultateRamBlockAddresses>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8002e50:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3760      	adds	r7, #96	; 0x60
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	4000a000 	.word	0x4000a000

08002e60 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e6c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002e76:	4ba7      	ldr	r3, [pc, #668]	; (8003114 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002e78:	4013      	ands	r3, r2
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	0091      	lsls	r1, r2, #2
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	6812      	ldr	r2, [r2, #0]
 8002e82:	430b      	orrs	r3, r1
 8002e84:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e90:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e98:	041a      	lsls	r2, r3, #16
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea8:	68ba      	ldr	r2, [r7, #8]
 8002eaa:	4413      	add	r3, r2
 8002eac:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002eb6:	4b97      	ldr	r3, [pc, #604]	; (8003114 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002eb8:	4013      	ands	r3, r2
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	0091      	lsls	r1, r2, #2
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6812      	ldr	r2, [r2, #0]
 8002ec2:	430b      	orrs	r3, r1
 8002ec4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed0:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed8:	041a      	lsls	r2, r3, #16
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	68ba      	ldr	r2, [r7, #8]
 8002eec:	4413      	add	r3, r2
 8002eee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002ef8:	4b86      	ldr	r3, [pc, #536]	; (8003114 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002efa:	4013      	ands	r3, r2
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	0091      	lsls	r1, r2, #2
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6812      	ldr	r2, [r2, #0]
 8002f04:	430b      	orrs	r3, r1
 8002f06:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002f12:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	041a      	lsls	r2, r3, #16
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	430a      	orrs	r2, r1
 8002f22:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002f2e:	fb02 f303 	mul.w	r3, r2, r3
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	4413      	add	r3, r2
 8002f36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002f40:	4b74      	ldr	r3, [pc, #464]	; (8003114 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002f42:	4013      	ands	r3, r2
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	0091      	lsls	r1, r2, #2
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6812      	ldr	r2, [r2, #0]
 8002f4c:	430b      	orrs	r3, r1
 8002f4e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f5a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f62:	041a      	lsls	r2, r3, #16
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002f76:	fb02 f303 	mul.w	r3, r2, r3
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8002f88:	4b62      	ldr	r3, [pc, #392]	; (8003114 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	0091      	lsls	r1, r2, #2
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6812      	ldr	r2, [r2, #0]
 8002f94:	430b      	orrs	r3, r1
 8002f96:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002fa2:	fb02 f303 	mul.w	r3, r2, r3
 8002fa6:	68ba      	ldr	r2, [r7, #8]
 8002fa8:	4413      	add	r3, r2
 8002faa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002fb4:	4b57      	ldr	r3, [pc, #348]	; (8003114 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	0091      	lsls	r1, r2, #2
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	6812      	ldr	r2, [r2, #0]
 8002fc0:	430b      	orrs	r3, r1
 8002fc2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fce:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd6:	041a      	lsls	r2, r3, #16
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	4413      	add	r3, r2
 8002fec:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002ff6:	4b47      	ldr	r3, [pc, #284]	; (8003114 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	0091      	lsls	r1, r2, #2
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6812      	ldr	r2, [r2, #0]
 8003002:	430b      	orrs	r3, r1
 8003004:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003010:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003018:	041a      	lsls	r2, r3, #16
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800302c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003034:	061a      	lsls	r2, r3, #24
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	430a      	orrs	r2, r1
 800303c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003044:	4b34      	ldr	r3, [pc, #208]	; (8003118 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8003046:	4413      	add	r3, r2
 8003048:	009a      	lsls	r2, r3, #2
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	441a      	add	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	441a      	add	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800307a:	fb01 f303 	mul.w	r3, r1, r3
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	441a      	add	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8003092:	fb01 f303 	mul.w	r3, r1, r3
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	441a      	add	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80030aa:	fb01 f303 	mul.w	r3, r1, r3
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	441a      	add	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	441a      	add	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80030da:	fb01 f303 	mul.w	r3, r1, r3
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	441a      	add	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80030f6:	fb01 f303 	mul.w	r3, r1, r3
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	441a      	add	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310a:	4a04      	ldr	r2, [pc, #16]	; (800311c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d915      	bls.n	800313c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003110:	e006      	b.n	8003120 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8003112:	bf00      	nop
 8003114:	ffff0003 	.word	0xffff0003
 8003118:	10002b00 	.word	0x10002b00
 800311c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003126:	f043 0220 	orr.w	r2, r3, #32
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2203      	movs	r2, #3
 8003134:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e010      	b.n	800315e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	e005      	b.n	8003150 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	3304      	adds	r3, #4
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	429a      	cmp	r2, r3
 800315a:	d3f3      	bcc.n	8003144 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3714      	adds	r7, #20
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop

0800316c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800316c:	b480      	push	{r7}
 800316e:	b089      	sub	sp, #36	; 0x24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003176:	2300      	movs	r3, #0
 8003178:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800317a:	4b89      	ldr	r3, [pc, #548]	; (80033a0 <HAL_GPIO_Init+0x234>)
 800317c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800317e:	e194      	b.n	80034aa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	2101      	movs	r1, #1
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	fa01 f303 	lsl.w	r3, r1, r3
 800318c:	4013      	ands	r3, r2
 800318e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	2b00      	cmp	r3, #0
 8003194:	f000 8186 	beq.w	80034a4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f003 0303 	and.w	r3, r3, #3
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d005      	beq.n	80031b0 <HAL_GPIO_Init+0x44>
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f003 0303 	and.w	r3, r3, #3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d130      	bne.n	8003212 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	2203      	movs	r2, #3
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	43db      	mvns	r3, r3
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	4013      	ands	r3, r2
 80031c6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	68da      	ldr	r2, [r3, #12]
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031e6:	2201      	movs	r2, #1
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	43db      	mvns	r3, r3
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	4013      	ands	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	091b      	lsrs	r3, r3, #4
 80031fc:	f003 0201 	and.w	r2, r3, #1
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	4313      	orrs	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f003 0303 	and.w	r3, r3, #3
 800321a:	2b03      	cmp	r3, #3
 800321c:	d017      	beq.n	800324e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	2203      	movs	r2, #3
 800322a:	fa02 f303 	lsl.w	r3, r2, r3
 800322e:	43db      	mvns	r3, r3
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	4013      	ands	r3, r2
 8003234:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	689a      	ldr	r2, [r3, #8]
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4313      	orrs	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f003 0303 	and.w	r3, r3, #3
 8003256:	2b02      	cmp	r3, #2
 8003258:	d123      	bne.n	80032a2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	08da      	lsrs	r2, r3, #3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	3208      	adds	r2, #8
 8003262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003266:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	220f      	movs	r2, #15
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	43db      	mvns	r3, r3
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	4013      	ands	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	691a      	ldr	r2, [r3, #16]
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	f003 0307 	and.w	r3, r3, #7
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	fa02 f303 	lsl.w	r3, r2, r3
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	4313      	orrs	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	08da      	lsrs	r2, r3, #3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3208      	adds	r2, #8
 800329c:	69b9      	ldr	r1, [r7, #24]
 800329e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	2203      	movs	r2, #3
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	43db      	mvns	r3, r3
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	4013      	ands	r3, r2
 80032b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f003 0203 	and.w	r2, r3, #3
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 80e0 	beq.w	80034a4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032e4:	4b2f      	ldr	r3, [pc, #188]	; (80033a4 <HAL_GPIO_Init+0x238>)
 80032e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80032ea:	4a2e      	ldr	r2, [pc, #184]	; (80033a4 <HAL_GPIO_Init+0x238>)
 80032ec:	f043 0302 	orr.w	r3, r3, #2
 80032f0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80032f4:	4b2b      	ldr	r3, [pc, #172]	; (80033a4 <HAL_GPIO_Init+0x238>)
 80032f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003302:	4a29      	ldr	r2, [pc, #164]	; (80033a8 <HAL_GPIO_Init+0x23c>)
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	089b      	lsrs	r3, r3, #2
 8003308:	3302      	adds	r3, #2
 800330a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800330e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	f003 0303 	and.w	r3, r3, #3
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	220f      	movs	r2, #15
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	43db      	mvns	r3, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	4013      	ands	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a20      	ldr	r2, [pc, #128]	; (80033ac <HAL_GPIO_Init+0x240>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d052      	beq.n	80033d4 <HAL_GPIO_Init+0x268>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a1f      	ldr	r2, [pc, #124]	; (80033b0 <HAL_GPIO_Init+0x244>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d031      	beq.n	800339a <HAL_GPIO_Init+0x22e>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a1e      	ldr	r2, [pc, #120]	; (80033b4 <HAL_GPIO_Init+0x248>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d02b      	beq.n	8003396 <HAL_GPIO_Init+0x22a>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a1d      	ldr	r2, [pc, #116]	; (80033b8 <HAL_GPIO_Init+0x24c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d025      	beq.n	8003392 <HAL_GPIO_Init+0x226>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a1c      	ldr	r2, [pc, #112]	; (80033bc <HAL_GPIO_Init+0x250>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d01f      	beq.n	800338e <HAL_GPIO_Init+0x222>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a1b      	ldr	r2, [pc, #108]	; (80033c0 <HAL_GPIO_Init+0x254>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d019      	beq.n	800338a <HAL_GPIO_Init+0x21e>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a1a      	ldr	r2, [pc, #104]	; (80033c4 <HAL_GPIO_Init+0x258>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d013      	beq.n	8003386 <HAL_GPIO_Init+0x21a>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a19      	ldr	r2, [pc, #100]	; (80033c8 <HAL_GPIO_Init+0x25c>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d00d      	beq.n	8003382 <HAL_GPIO_Init+0x216>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a18      	ldr	r2, [pc, #96]	; (80033cc <HAL_GPIO_Init+0x260>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d007      	beq.n	800337e <HAL_GPIO_Init+0x212>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a17      	ldr	r2, [pc, #92]	; (80033d0 <HAL_GPIO_Init+0x264>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d101      	bne.n	800337a <HAL_GPIO_Init+0x20e>
 8003376:	2309      	movs	r3, #9
 8003378:	e02d      	b.n	80033d6 <HAL_GPIO_Init+0x26a>
 800337a:	230a      	movs	r3, #10
 800337c:	e02b      	b.n	80033d6 <HAL_GPIO_Init+0x26a>
 800337e:	2308      	movs	r3, #8
 8003380:	e029      	b.n	80033d6 <HAL_GPIO_Init+0x26a>
 8003382:	2307      	movs	r3, #7
 8003384:	e027      	b.n	80033d6 <HAL_GPIO_Init+0x26a>
 8003386:	2306      	movs	r3, #6
 8003388:	e025      	b.n	80033d6 <HAL_GPIO_Init+0x26a>
 800338a:	2305      	movs	r3, #5
 800338c:	e023      	b.n	80033d6 <HAL_GPIO_Init+0x26a>
 800338e:	2304      	movs	r3, #4
 8003390:	e021      	b.n	80033d6 <HAL_GPIO_Init+0x26a>
 8003392:	2303      	movs	r3, #3
 8003394:	e01f      	b.n	80033d6 <HAL_GPIO_Init+0x26a>
 8003396:	2302      	movs	r3, #2
 8003398:	e01d      	b.n	80033d6 <HAL_GPIO_Init+0x26a>
 800339a:	2301      	movs	r3, #1
 800339c:	e01b      	b.n	80033d6 <HAL_GPIO_Init+0x26a>
 800339e:	bf00      	nop
 80033a0:	58000080 	.word	0x58000080
 80033a4:	58024400 	.word	0x58024400
 80033a8:	58000400 	.word	0x58000400
 80033ac:	58020000 	.word	0x58020000
 80033b0:	58020400 	.word	0x58020400
 80033b4:	58020800 	.word	0x58020800
 80033b8:	58020c00 	.word	0x58020c00
 80033bc:	58021000 	.word	0x58021000
 80033c0:	58021400 	.word	0x58021400
 80033c4:	58021800 	.word	0x58021800
 80033c8:	58021c00 	.word	0x58021c00
 80033cc:	58022000 	.word	0x58022000
 80033d0:	58022400 	.word	0x58022400
 80033d4:	2300      	movs	r3, #0
 80033d6:	69fa      	ldr	r2, [r7, #28]
 80033d8:	f002 0203 	and.w	r2, r2, #3
 80033dc:	0092      	lsls	r2, r2, #2
 80033de:	4093      	lsls	r3, r2
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033e6:	4938      	ldr	r1, [pc, #224]	; (80034c8 <HAL_GPIO_Init+0x35c>)
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	089b      	lsrs	r3, r3, #2
 80033ec:	3302      	adds	r3, #2
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	43db      	mvns	r3, r3
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	4013      	ands	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	4313      	orrs	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800341a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003422:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	43db      	mvns	r3, r3
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	4013      	ands	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d003      	beq.n	8003448 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	4313      	orrs	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003448:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	43db      	mvns	r3, r3
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	4013      	ands	r3, r2
 800345e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d003      	beq.n	8003474 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	4313      	orrs	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	43db      	mvns	r3, r3
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	4013      	ands	r3, r2
 8003488:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d003      	beq.n	800349e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	4313      	orrs	r3, r2
 800349c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	3301      	adds	r3, #1
 80034a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	fa22 f303 	lsr.w	r3, r2, r3
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f47f ae63 	bne.w	8003180 <HAL_GPIO_Init+0x14>
  }
}
 80034ba:	bf00      	nop
 80034bc:	bf00      	nop
 80034be:	3724      	adds	r7, #36	; 0x24
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr
 80034c8:	58000400 	.word	0x58000400

080034cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	460b      	mov	r3, r1
 80034d6:	807b      	strh	r3, [r7, #2]
 80034d8:	4613      	mov	r3, r2
 80034da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034dc:	787b      	ldrb	r3, [r7, #1]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034e2:	887a      	ldrh	r2, [r7, #2]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80034e8:	e003      	b.n	80034f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80034ea:	887b      	ldrh	r3, [r7, #2]
 80034ec:	041a      	lsls	r2, r3, #16
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	619a      	str	r2, [r3, #24]
}
 80034f2:	bf00      	nop
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
	...

08003500 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003508:	4a08      	ldr	r2, [pc, #32]	; (800352c <HAL_HSEM_FastTake+0x2c>)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	3320      	adds	r3, #32
 800350e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003512:	4a07      	ldr	r2, [pc, #28]	; (8003530 <HAL_HSEM_FastTake+0x30>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d101      	bne.n	800351c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003518:	2300      	movs	r3, #0
 800351a:	e000      	b.n	800351e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
}
 800351e:	4618      	mov	r0, r3
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	58026400 	.word	0x58026400
 8003530:	80000300 	.word	0x80000300

08003534 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800353e:	4906      	ldr	r1, [pc, #24]	; (8003558 <HAL_HSEM_Release+0x24>)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	58026400 	.word	0x58026400

0800355c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003564:	4b29      	ldr	r3, [pc, #164]	; (800360c <HAL_PWREx_ConfigSupply+0xb0>)
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f003 0307 	and.w	r3, r3, #7
 800356c:	2b06      	cmp	r3, #6
 800356e:	d00a      	beq.n	8003586 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003570:	4b26      	ldr	r3, [pc, #152]	; (800360c <HAL_PWREx_ConfigSupply+0xb0>)
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	429a      	cmp	r2, r3
 800357c:	d001      	beq.n	8003582 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e040      	b.n	8003604 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003582:	2300      	movs	r3, #0
 8003584:	e03e      	b.n	8003604 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003586:	4b21      	ldr	r3, [pc, #132]	; (800360c <HAL_PWREx_ConfigSupply+0xb0>)
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800358e:	491f      	ldr	r1, [pc, #124]	; (800360c <HAL_PWREx_ConfigSupply+0xb0>)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4313      	orrs	r3, r2
 8003594:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003596:	f7ff f969 	bl	800286c <HAL_GetTick>
 800359a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800359c:	e009      	b.n	80035b2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800359e:	f7ff f965 	bl	800286c <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035ac:	d901      	bls.n	80035b2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e028      	b.n	8003604 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80035b2:	4b16      	ldr	r3, [pc, #88]	; (800360c <HAL_PWREx_ConfigSupply+0xb0>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035be:	d1ee      	bne.n	800359e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b1e      	cmp	r3, #30
 80035c4:	d008      	beq.n	80035d8 <HAL_PWREx_ConfigSupply+0x7c>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b2e      	cmp	r3, #46	; 0x2e
 80035ca:	d005      	beq.n	80035d8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b1d      	cmp	r3, #29
 80035d0:	d002      	beq.n	80035d8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b2d      	cmp	r3, #45	; 0x2d
 80035d6:	d114      	bne.n	8003602 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80035d8:	f7ff f948 	bl	800286c <HAL_GetTick>
 80035dc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80035de:	e009      	b.n	80035f4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80035e0:	f7ff f944 	bl	800286c <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035ee:	d901      	bls.n	80035f4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e007      	b.n	8003604 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80035f4:	4b05      	ldr	r3, [pc, #20]	; (800360c <HAL_PWREx_ConfigSupply+0xb0>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003600:	d1ee      	bne.n	80035e0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	58024800 	.word	0x58024800

08003610 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b08c      	sub	sp, #48	; 0x30
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d102      	bne.n	8003624 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	f000 bc1d 	b.w	8003e5e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 8087 	beq.w	8003740 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003632:	4b99      	ldr	r3, [pc, #612]	; (8003898 <HAL_RCC_OscConfig+0x288>)
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800363a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800363c:	4b96      	ldr	r3, [pc, #600]	; (8003898 <HAL_RCC_OscConfig+0x288>)
 800363e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003640:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003644:	2b10      	cmp	r3, #16
 8003646:	d007      	beq.n	8003658 <HAL_RCC_OscConfig+0x48>
 8003648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800364a:	2b18      	cmp	r3, #24
 800364c:	d110      	bne.n	8003670 <HAL_RCC_OscConfig+0x60>
 800364e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003650:	f003 0303 	and.w	r3, r3, #3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d10b      	bne.n	8003670 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003658:	4b8f      	ldr	r3, [pc, #572]	; (8003898 <HAL_RCC_OscConfig+0x288>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d06c      	beq.n	800373e <HAL_RCC_OscConfig+0x12e>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d168      	bne.n	800373e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e3f6      	b.n	8003e5e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003678:	d106      	bne.n	8003688 <HAL_RCC_OscConfig+0x78>
 800367a:	4b87      	ldr	r3, [pc, #540]	; (8003898 <HAL_RCC_OscConfig+0x288>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a86      	ldr	r2, [pc, #536]	; (8003898 <HAL_RCC_OscConfig+0x288>)
 8003680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003684:	6013      	str	r3, [r2, #0]
 8003686:	e02e      	b.n	80036e6 <HAL_RCC_OscConfig+0xd6>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10c      	bne.n	80036aa <HAL_RCC_OscConfig+0x9a>
 8003690:	4b81      	ldr	r3, [pc, #516]	; (8003898 <HAL_RCC_OscConfig+0x288>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a80      	ldr	r2, [pc, #512]	; (8003898 <HAL_RCC_OscConfig+0x288>)
 8003696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800369a:	6013      	str	r3, [r2, #0]
 800369c:	4b7e      	ldr	r3, [pc, #504]	; (8003898 <HAL_RCC_OscConfig+0x288>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a7d      	ldr	r2, [pc, #500]	; (8003898 <HAL_RCC_OscConfig+0x288>)
 80036a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036a6:	6013      	str	r3, [r2, #0]
 80036a8:	e01d      	b.n	80036e6 <HAL_RCC_OscConfig+0xd6>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036b2:	d10c      	bne.n	80036ce <HAL_RCC_OscConfig+0xbe>
 80036b4:	4b78      	ldr	r3, [pc, #480]	; (8003898 <HAL_RCC_OscConfig+0x288>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a77      	ldr	r2, [pc, #476]	; (8003898 <HAL_RCC_OscConfig+0x288>)
 80036ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036be:	6013      	str	r3, [r2, #0]
 80036c0:	4b75      	ldr	r3, [pc, #468]	; (8003898 <HAL_RCC_OscConfig+0x288>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a74      	ldr	r2, [pc, #464]	; (8003898 <HAL_RCC_OscConfig+0x288>)
 80036c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ca:	6013      	str	r3, [r2, #0]
 80036cc:	e00b      	b.n	80036e6 <HAL_RCC_OscConfig+0xd6>
 80036ce:	4b72      	ldr	r3, [pc, #456]	; (8003898 <HAL_RCC_OscConfig+0x288>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a71      	ldr	r2, [pc, #452]	; (8003898 <HAL_RCC_OscConfig+0x288>)
 80036d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036d8:	6013      	str	r3, [r2, #0]
 80036da:	4b6f      	ldr	r3, [pc, #444]	; (8003898 <HAL_RCC_OscConfig+0x288>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a6e      	ldr	r2, [pc, #440]	; (8003898 <HAL_RCC_OscConfig+0x288>)
 80036e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036e4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d013      	beq.n	8003716 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ee:	f7ff f8bd 	bl	800286c <HAL_GetTick>
 80036f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036f4:	e008      	b.n	8003708 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036f6:	f7ff f8b9 	bl	800286c <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b64      	cmp	r3, #100	; 0x64
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e3aa      	b.n	8003e5e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003708:	4b63      	ldr	r3, [pc, #396]	; (8003898 <HAL_RCC_OscConfig+0x288>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d0f0      	beq.n	80036f6 <HAL_RCC_OscConfig+0xe6>
 8003714:	e014      	b.n	8003740 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003716:	f7ff f8a9 	bl	800286c <HAL_GetTick>
 800371a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800371c:	e008      	b.n	8003730 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800371e:	f7ff f8a5 	bl	800286c <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b64      	cmp	r3, #100	; 0x64
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e396      	b.n	8003e5e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003730:	4b59      	ldr	r3, [pc, #356]	; (8003898 <HAL_RCC_OscConfig+0x288>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1f0      	bne.n	800371e <HAL_RCC_OscConfig+0x10e>
 800373c:	e000      	b.n	8003740 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800373e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	f000 80cb 	beq.w	80038e4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800374e:	4b52      	ldr	r3, [pc, #328]	; (8003898 <HAL_RCC_OscConfig+0x288>)
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003756:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003758:	4b4f      	ldr	r3, [pc, #316]	; (8003898 <HAL_RCC_OscConfig+0x288>)
 800375a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d007      	beq.n	8003774 <HAL_RCC_OscConfig+0x164>
 8003764:	6a3b      	ldr	r3, [r7, #32]
 8003766:	2b18      	cmp	r3, #24
 8003768:	d156      	bne.n	8003818 <HAL_RCC_OscConfig+0x208>
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	f003 0303 	and.w	r3, r3, #3
 8003770:	2b00      	cmp	r3, #0
 8003772:	d151      	bne.n	8003818 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003774:	4b48      	ldr	r3, [pc, #288]	; (8003898 <HAL_RCC_OscConfig+0x288>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b00      	cmp	r3, #0
 800377e:	d005      	beq.n	800378c <HAL_RCC_OscConfig+0x17c>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d101      	bne.n	800378c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e368      	b.n	8003e5e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800378c:	4b42      	ldr	r3, [pc, #264]	; (8003898 <HAL_RCC_OscConfig+0x288>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f023 0219 	bic.w	r2, r3, #25
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	493f      	ldr	r1, [pc, #252]	; (8003898 <HAL_RCC_OscConfig+0x288>)
 800379a:	4313      	orrs	r3, r2
 800379c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800379e:	f7ff f865 	bl	800286c <HAL_GetTick>
 80037a2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037a4:	e008      	b.n	80037b8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037a6:	f7ff f861 	bl	800286c <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e352      	b.n	8003e5e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037b8:	4b37      	ldr	r3, [pc, #220]	; (8003898 <HAL_RCC_OscConfig+0x288>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0f0      	beq.n	80037a6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c4:	f7ff f882 	bl	80028cc <HAL_GetREVID>
 80037c8:	4603      	mov	r3, r0
 80037ca:	f241 0203 	movw	r2, #4099	; 0x1003
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d817      	bhi.n	8003802 <HAL_RCC_OscConfig+0x1f2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	2b40      	cmp	r3, #64	; 0x40
 80037d8:	d108      	bne.n	80037ec <HAL_RCC_OscConfig+0x1dc>
 80037da:	4b2f      	ldr	r3, [pc, #188]	; (8003898 <HAL_RCC_OscConfig+0x288>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80037e2:	4a2d      	ldr	r2, [pc, #180]	; (8003898 <HAL_RCC_OscConfig+0x288>)
 80037e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037e8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037ea:	e07b      	b.n	80038e4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ec:	4b2a      	ldr	r3, [pc, #168]	; (8003898 <HAL_RCC_OscConfig+0x288>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	031b      	lsls	r3, r3, #12
 80037fa:	4927      	ldr	r1, [pc, #156]	; (8003898 <HAL_RCC_OscConfig+0x288>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003800:	e070      	b.n	80038e4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003802:	4b25      	ldr	r3, [pc, #148]	; (8003898 <HAL_RCC_OscConfig+0x288>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	061b      	lsls	r3, r3, #24
 8003810:	4921      	ldr	r1, [pc, #132]	; (8003898 <HAL_RCC_OscConfig+0x288>)
 8003812:	4313      	orrs	r3, r2
 8003814:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003816:	e065      	b.n	80038e4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d048      	beq.n	80038b2 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003820:	4b1d      	ldr	r3, [pc, #116]	; (8003898 <HAL_RCC_OscConfig+0x288>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f023 0219 	bic.w	r2, r3, #25
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	491a      	ldr	r1, [pc, #104]	; (8003898 <HAL_RCC_OscConfig+0x288>)
 800382e:	4313      	orrs	r3, r2
 8003830:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003832:	f7ff f81b 	bl	800286c <HAL_GetTick>
 8003836:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003838:	e008      	b.n	800384c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800383a:	f7ff f817 	bl	800286c <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d901      	bls.n	800384c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e308      	b.n	8003e5e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800384c:	4b12      	ldr	r3, [pc, #72]	; (8003898 <HAL_RCC_OscConfig+0x288>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0f0      	beq.n	800383a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003858:	f7ff f838 	bl	80028cc <HAL_GetREVID>
 800385c:	4603      	mov	r3, r0
 800385e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003862:	4293      	cmp	r3, r2
 8003864:	d81a      	bhi.n	800389c <HAL_RCC_OscConfig+0x28c>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	2b40      	cmp	r3, #64	; 0x40
 800386c:	d108      	bne.n	8003880 <HAL_RCC_OscConfig+0x270>
 800386e:	4b0a      	ldr	r3, [pc, #40]	; (8003898 <HAL_RCC_OscConfig+0x288>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003876:	4a08      	ldr	r2, [pc, #32]	; (8003898 <HAL_RCC_OscConfig+0x288>)
 8003878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800387c:	6053      	str	r3, [r2, #4]
 800387e:	e031      	b.n	80038e4 <HAL_RCC_OscConfig+0x2d4>
 8003880:	4b05      	ldr	r3, [pc, #20]	; (8003898 <HAL_RCC_OscConfig+0x288>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	031b      	lsls	r3, r3, #12
 800388e:	4902      	ldr	r1, [pc, #8]	; (8003898 <HAL_RCC_OscConfig+0x288>)
 8003890:	4313      	orrs	r3, r2
 8003892:	604b      	str	r3, [r1, #4]
 8003894:	e026      	b.n	80038e4 <HAL_RCC_OscConfig+0x2d4>
 8003896:	bf00      	nop
 8003898:	58024400 	.word	0x58024400
 800389c:	4b9a      	ldr	r3, [pc, #616]	; (8003b08 <HAL_RCC_OscConfig+0x4f8>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	061b      	lsls	r3, r3, #24
 80038aa:	4997      	ldr	r1, [pc, #604]	; (8003b08 <HAL_RCC_OscConfig+0x4f8>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	604b      	str	r3, [r1, #4]
 80038b0:	e018      	b.n	80038e4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038b2:	4b95      	ldr	r3, [pc, #596]	; (8003b08 <HAL_RCC_OscConfig+0x4f8>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a94      	ldr	r2, [pc, #592]	; (8003b08 <HAL_RCC_OscConfig+0x4f8>)
 80038b8:	f023 0301 	bic.w	r3, r3, #1
 80038bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038be:	f7fe ffd5 	bl	800286c <HAL_GetTick>
 80038c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80038c4:	e008      	b.n	80038d8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038c6:	f7fe ffd1 	bl	800286c <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e2c2      	b.n	8003e5e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80038d8:	4b8b      	ldr	r3, [pc, #556]	; (8003b08 <HAL_RCC_OscConfig+0x4f8>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1f0      	bne.n	80038c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0310 	and.w	r3, r3, #16
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 80a9 	beq.w	8003a44 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038f2:	4b85      	ldr	r3, [pc, #532]	; (8003b08 <HAL_RCC_OscConfig+0x4f8>)
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038fa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038fc:	4b82      	ldr	r3, [pc, #520]	; (8003b08 <HAL_RCC_OscConfig+0x4f8>)
 80038fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003900:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	2b08      	cmp	r3, #8
 8003906:	d007      	beq.n	8003918 <HAL_RCC_OscConfig+0x308>
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	2b18      	cmp	r3, #24
 800390c:	d13a      	bne.n	8003984 <HAL_RCC_OscConfig+0x374>
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	f003 0303 	and.w	r3, r3, #3
 8003914:	2b01      	cmp	r3, #1
 8003916:	d135      	bne.n	8003984 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003918:	4b7b      	ldr	r3, [pc, #492]	; (8003b08 <HAL_RCC_OscConfig+0x4f8>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003920:	2b00      	cmp	r3, #0
 8003922:	d005      	beq.n	8003930 <HAL_RCC_OscConfig+0x320>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	69db      	ldr	r3, [r3, #28]
 8003928:	2b80      	cmp	r3, #128	; 0x80
 800392a:	d001      	beq.n	8003930 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e296      	b.n	8003e5e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003930:	f7fe ffcc 	bl	80028cc <HAL_GetREVID>
 8003934:	4603      	mov	r3, r0
 8003936:	f241 0203 	movw	r2, #4099	; 0x1003
 800393a:	4293      	cmp	r3, r2
 800393c:	d817      	bhi.n	800396e <HAL_RCC_OscConfig+0x35e>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	2b20      	cmp	r3, #32
 8003944:	d108      	bne.n	8003958 <HAL_RCC_OscConfig+0x348>
 8003946:	4b70      	ldr	r3, [pc, #448]	; (8003b08 <HAL_RCC_OscConfig+0x4f8>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800394e:	4a6e      	ldr	r2, [pc, #440]	; (8003b08 <HAL_RCC_OscConfig+0x4f8>)
 8003950:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003954:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003956:	e075      	b.n	8003a44 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003958:	4b6b      	ldr	r3, [pc, #428]	; (8003b08 <HAL_RCC_OscConfig+0x4f8>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	069b      	lsls	r3, r3, #26
 8003966:	4968      	ldr	r1, [pc, #416]	; (8003b08 <HAL_RCC_OscConfig+0x4f8>)
 8003968:	4313      	orrs	r3, r2
 800396a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800396c:	e06a      	b.n	8003a44 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800396e:	4b66      	ldr	r3, [pc, #408]	; (8003b08 <HAL_RCC_OscConfig+0x4f8>)
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	061b      	lsls	r3, r3, #24
 800397c:	4962      	ldr	r1, [pc, #392]	; (8003b08 <HAL_RCC_OscConfig+0x4f8>)
 800397e:	4313      	orrs	r3, r2
 8003980:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003982:	e05f      	b.n	8003a44 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	69db      	ldr	r3, [r3, #28]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d042      	beq.n	8003a12 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800398c:	4b5e      	ldr	r3, [pc, #376]	; (8003b08 <HAL_RCC_OscConfig+0x4f8>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a5d      	ldr	r2, [pc, #372]	; (8003b08 <HAL_RCC_OscConfig+0x4f8>)
 8003992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003996:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003998:	f7fe ff68 	bl	800286c <HAL_GetTick>
 800399c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80039a0:	f7fe ff64 	bl	800286c <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e255      	b.n	8003e5e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039b2:	4b55      	ldr	r3, [pc, #340]	; (8003b08 <HAL_RCC_OscConfig+0x4f8>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d0f0      	beq.n	80039a0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039be:	f7fe ff85 	bl	80028cc <HAL_GetREVID>
 80039c2:	4603      	mov	r3, r0
 80039c4:	f241 0203 	movw	r2, #4099	; 0x1003
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d817      	bhi.n	80039fc <HAL_RCC_OscConfig+0x3ec>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	2b20      	cmp	r3, #32
 80039d2:	d108      	bne.n	80039e6 <HAL_RCC_OscConfig+0x3d6>
 80039d4:	4b4c      	ldr	r3, [pc, #304]	; (8003b08 <HAL_RCC_OscConfig+0x4f8>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80039dc:	4a4a      	ldr	r2, [pc, #296]	; (8003b08 <HAL_RCC_OscConfig+0x4f8>)
 80039de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80039e2:	6053      	str	r3, [r2, #4]
 80039e4:	e02e      	b.n	8003a44 <HAL_RCC_OscConfig+0x434>
 80039e6:	4b48      	ldr	r3, [pc, #288]	; (8003b08 <HAL_RCC_OscConfig+0x4f8>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	069b      	lsls	r3, r3, #26
 80039f4:	4944      	ldr	r1, [pc, #272]	; (8003b08 <HAL_RCC_OscConfig+0x4f8>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	604b      	str	r3, [r1, #4]
 80039fa:	e023      	b.n	8003a44 <HAL_RCC_OscConfig+0x434>
 80039fc:	4b42      	ldr	r3, [pc, #264]	; (8003b08 <HAL_RCC_OscConfig+0x4f8>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	061b      	lsls	r3, r3, #24
 8003a0a:	493f      	ldr	r1, [pc, #252]	; (8003b08 <HAL_RCC_OscConfig+0x4f8>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	60cb      	str	r3, [r1, #12]
 8003a10:	e018      	b.n	8003a44 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003a12:	4b3d      	ldr	r3, [pc, #244]	; (8003b08 <HAL_RCC_OscConfig+0x4f8>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a3c      	ldr	r2, [pc, #240]	; (8003b08 <HAL_RCC_OscConfig+0x4f8>)
 8003a18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1e:	f7fe ff25 	bl	800286c <HAL_GetTick>
 8003a22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a24:	e008      	b.n	8003a38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003a26:	f7fe ff21 	bl	800286c <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d901      	bls.n	8003a38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e212      	b.n	8003e5e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a38:	4b33      	ldr	r3, [pc, #204]	; (8003b08 <HAL_RCC_OscConfig+0x4f8>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1f0      	bne.n	8003a26 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0308 	and.w	r3, r3, #8
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d036      	beq.n	8003abe <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d019      	beq.n	8003a8c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a58:	4b2b      	ldr	r3, [pc, #172]	; (8003b08 <HAL_RCC_OscConfig+0x4f8>)
 8003a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a5c:	4a2a      	ldr	r2, [pc, #168]	; (8003b08 <HAL_RCC_OscConfig+0x4f8>)
 8003a5e:	f043 0301 	orr.w	r3, r3, #1
 8003a62:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a64:	f7fe ff02 	bl	800286c <HAL_GetTick>
 8003a68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a6a:	e008      	b.n	8003a7e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a6c:	f7fe fefe 	bl	800286c <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e1ef      	b.n	8003e5e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a7e:	4b22      	ldr	r3, [pc, #136]	; (8003b08 <HAL_RCC_OscConfig+0x4f8>)
 8003a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d0f0      	beq.n	8003a6c <HAL_RCC_OscConfig+0x45c>
 8003a8a:	e018      	b.n	8003abe <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a8c:	4b1e      	ldr	r3, [pc, #120]	; (8003b08 <HAL_RCC_OscConfig+0x4f8>)
 8003a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a90:	4a1d      	ldr	r2, [pc, #116]	; (8003b08 <HAL_RCC_OscConfig+0x4f8>)
 8003a92:	f023 0301 	bic.w	r3, r3, #1
 8003a96:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a98:	f7fe fee8 	bl	800286c <HAL_GetTick>
 8003a9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aa0:	f7fe fee4 	bl	800286c <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e1d5      	b.n	8003e5e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ab2:	4b15      	ldr	r3, [pc, #84]	; (8003b08 <HAL_RCC_OscConfig+0x4f8>)
 8003ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1f0      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0320 	and.w	r3, r3, #32
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d039      	beq.n	8003b3e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d01c      	beq.n	8003b0c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ad2:	4b0d      	ldr	r3, [pc, #52]	; (8003b08 <HAL_RCC_OscConfig+0x4f8>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a0c      	ldr	r2, [pc, #48]	; (8003b08 <HAL_RCC_OscConfig+0x4f8>)
 8003ad8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003adc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003ade:	f7fe fec5 	bl	800286c <HAL_GetTick>
 8003ae2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ae4:	e008      	b.n	8003af8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003ae6:	f7fe fec1 	bl	800286c <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e1b2      	b.n	8003e5e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003af8:	4b03      	ldr	r3, [pc, #12]	; (8003b08 <HAL_RCC_OscConfig+0x4f8>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0f0      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x4d6>
 8003b04:	e01b      	b.n	8003b3e <HAL_RCC_OscConfig+0x52e>
 8003b06:	bf00      	nop
 8003b08:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b0c:	4b9b      	ldr	r3, [pc, #620]	; (8003d7c <HAL_RCC_OscConfig+0x76c>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a9a      	ldr	r2, [pc, #616]	; (8003d7c <HAL_RCC_OscConfig+0x76c>)
 8003b12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b16:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b18:	f7fe fea8 	bl	800286c <HAL_GetTick>
 8003b1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b1e:	e008      	b.n	8003b32 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003b20:	f7fe fea4 	bl	800286c <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e195      	b.n	8003e5e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b32:	4b92      	ldr	r3, [pc, #584]	; (8003d7c <HAL_RCC_OscConfig+0x76c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1f0      	bne.n	8003b20 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0304 	and.w	r3, r3, #4
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 8081 	beq.w	8003c4e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b4c:	4b8c      	ldr	r3, [pc, #560]	; (8003d80 <HAL_RCC_OscConfig+0x770>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a8b      	ldr	r2, [pc, #556]	; (8003d80 <HAL_RCC_OscConfig+0x770>)
 8003b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b58:	f7fe fe88 	bl	800286c <HAL_GetTick>
 8003b5c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003b60:	f7fe fe84 	bl	800286c <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b64      	cmp	r3, #100	; 0x64
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e175      	b.n	8003e5e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b72:	4b83      	ldr	r3, [pc, #524]	; (8003d80 <HAL_RCC_OscConfig+0x770>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0f0      	beq.n	8003b60 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d106      	bne.n	8003b94 <HAL_RCC_OscConfig+0x584>
 8003b86:	4b7d      	ldr	r3, [pc, #500]	; (8003d7c <HAL_RCC_OscConfig+0x76c>)
 8003b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8a:	4a7c      	ldr	r2, [pc, #496]	; (8003d7c <HAL_RCC_OscConfig+0x76c>)
 8003b8c:	f043 0301 	orr.w	r3, r3, #1
 8003b90:	6713      	str	r3, [r2, #112]	; 0x70
 8003b92:	e02d      	b.n	8003bf0 <HAL_RCC_OscConfig+0x5e0>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10c      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x5a6>
 8003b9c:	4b77      	ldr	r3, [pc, #476]	; (8003d7c <HAL_RCC_OscConfig+0x76c>)
 8003b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba0:	4a76      	ldr	r2, [pc, #472]	; (8003d7c <HAL_RCC_OscConfig+0x76c>)
 8003ba2:	f023 0301 	bic.w	r3, r3, #1
 8003ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ba8:	4b74      	ldr	r3, [pc, #464]	; (8003d7c <HAL_RCC_OscConfig+0x76c>)
 8003baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bac:	4a73      	ldr	r2, [pc, #460]	; (8003d7c <HAL_RCC_OscConfig+0x76c>)
 8003bae:	f023 0304 	bic.w	r3, r3, #4
 8003bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8003bb4:	e01c      	b.n	8003bf0 <HAL_RCC_OscConfig+0x5e0>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	2b05      	cmp	r3, #5
 8003bbc:	d10c      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x5c8>
 8003bbe:	4b6f      	ldr	r3, [pc, #444]	; (8003d7c <HAL_RCC_OscConfig+0x76c>)
 8003bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc2:	4a6e      	ldr	r2, [pc, #440]	; (8003d7c <HAL_RCC_OscConfig+0x76c>)
 8003bc4:	f043 0304 	orr.w	r3, r3, #4
 8003bc8:	6713      	str	r3, [r2, #112]	; 0x70
 8003bca:	4b6c      	ldr	r3, [pc, #432]	; (8003d7c <HAL_RCC_OscConfig+0x76c>)
 8003bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bce:	4a6b      	ldr	r2, [pc, #428]	; (8003d7c <HAL_RCC_OscConfig+0x76c>)
 8003bd0:	f043 0301 	orr.w	r3, r3, #1
 8003bd4:	6713      	str	r3, [r2, #112]	; 0x70
 8003bd6:	e00b      	b.n	8003bf0 <HAL_RCC_OscConfig+0x5e0>
 8003bd8:	4b68      	ldr	r3, [pc, #416]	; (8003d7c <HAL_RCC_OscConfig+0x76c>)
 8003bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bdc:	4a67      	ldr	r2, [pc, #412]	; (8003d7c <HAL_RCC_OscConfig+0x76c>)
 8003bde:	f023 0301 	bic.w	r3, r3, #1
 8003be2:	6713      	str	r3, [r2, #112]	; 0x70
 8003be4:	4b65      	ldr	r3, [pc, #404]	; (8003d7c <HAL_RCC_OscConfig+0x76c>)
 8003be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be8:	4a64      	ldr	r2, [pc, #400]	; (8003d7c <HAL_RCC_OscConfig+0x76c>)
 8003bea:	f023 0304 	bic.w	r3, r3, #4
 8003bee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d015      	beq.n	8003c24 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf8:	f7fe fe38 	bl	800286c <HAL_GetTick>
 8003bfc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bfe:	e00a      	b.n	8003c16 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c00:	f7fe fe34 	bl	800286c <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e123      	b.n	8003e5e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c16:	4b59      	ldr	r3, [pc, #356]	; (8003d7c <HAL_RCC_OscConfig+0x76c>)
 8003c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0ee      	beq.n	8003c00 <HAL_RCC_OscConfig+0x5f0>
 8003c22:	e014      	b.n	8003c4e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c24:	f7fe fe22 	bl	800286c <HAL_GetTick>
 8003c28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c2a:	e00a      	b.n	8003c42 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c2c:	f7fe fe1e 	bl	800286c <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e10d      	b.n	8003e5e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c42:	4b4e      	ldr	r3, [pc, #312]	; (8003d7c <HAL_RCC_OscConfig+0x76c>)
 8003c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1ee      	bne.n	8003c2c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f000 8102 	beq.w	8003e5c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003c58:	4b48      	ldr	r3, [pc, #288]	; (8003d7c <HAL_RCC_OscConfig+0x76c>)
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c60:	2b18      	cmp	r3, #24
 8003c62:	f000 80bd 	beq.w	8003de0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	f040 809e 	bne.w	8003dac <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c70:	4b42      	ldr	r3, [pc, #264]	; (8003d7c <HAL_RCC_OscConfig+0x76c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a41      	ldr	r2, [pc, #260]	; (8003d7c <HAL_RCC_OscConfig+0x76c>)
 8003c76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7c:	f7fe fdf6 	bl	800286c <HAL_GetTick>
 8003c80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c84:	f7fe fdf2 	bl	800286c <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e0e3      	b.n	8003e5e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c96:	4b39      	ldr	r3, [pc, #228]	; (8003d7c <HAL_RCC_OscConfig+0x76c>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f0      	bne.n	8003c84 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ca2:	4b36      	ldr	r3, [pc, #216]	; (8003d7c <HAL_RCC_OscConfig+0x76c>)
 8003ca4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ca6:	4b37      	ldr	r3, [pc, #220]	; (8003d84 <HAL_RCC_OscConfig+0x774>)
 8003ca8:	4013      	ands	r3, r2
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003cb2:	0112      	lsls	r2, r2, #4
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	4931      	ldr	r1, [pc, #196]	; (8003d7c <HAL_RCC_OscConfig+0x76c>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	628b      	str	r3, [r1, #40]	; 0x28
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	025b      	lsls	r3, r3, #9
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	041b      	lsls	r3, r3, #16
 8003cda:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	061b      	lsls	r3, r3, #24
 8003ce8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003cec:	4923      	ldr	r1, [pc, #140]	; (8003d7c <HAL_RCC_OscConfig+0x76c>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003cf2:	4b22      	ldr	r3, [pc, #136]	; (8003d7c <HAL_RCC_OscConfig+0x76c>)
 8003cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf6:	4a21      	ldr	r2, [pc, #132]	; (8003d7c <HAL_RCC_OscConfig+0x76c>)
 8003cf8:	f023 0301 	bic.w	r3, r3, #1
 8003cfc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003cfe:	4b1f      	ldr	r3, [pc, #124]	; (8003d7c <HAL_RCC_OscConfig+0x76c>)
 8003d00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d02:	4b21      	ldr	r3, [pc, #132]	; (8003d88 <HAL_RCC_OscConfig+0x778>)
 8003d04:	4013      	ands	r3, r2
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003d0a:	00d2      	lsls	r2, r2, #3
 8003d0c:	491b      	ldr	r1, [pc, #108]	; (8003d7c <HAL_RCC_OscConfig+0x76c>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003d12:	4b1a      	ldr	r3, [pc, #104]	; (8003d7c <HAL_RCC_OscConfig+0x76c>)
 8003d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d16:	f023 020c 	bic.w	r2, r3, #12
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1e:	4917      	ldr	r1, [pc, #92]	; (8003d7c <HAL_RCC_OscConfig+0x76c>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003d24:	4b15      	ldr	r3, [pc, #84]	; (8003d7c <HAL_RCC_OscConfig+0x76c>)
 8003d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d28:	f023 0202 	bic.w	r2, r3, #2
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d30:	4912      	ldr	r1, [pc, #72]	; (8003d7c <HAL_RCC_OscConfig+0x76c>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003d36:	4b11      	ldr	r3, [pc, #68]	; (8003d7c <HAL_RCC_OscConfig+0x76c>)
 8003d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3a:	4a10      	ldr	r2, [pc, #64]	; (8003d7c <HAL_RCC_OscConfig+0x76c>)
 8003d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d42:	4b0e      	ldr	r3, [pc, #56]	; (8003d7c <HAL_RCC_OscConfig+0x76c>)
 8003d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d46:	4a0d      	ldr	r2, [pc, #52]	; (8003d7c <HAL_RCC_OscConfig+0x76c>)
 8003d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003d4e:	4b0b      	ldr	r3, [pc, #44]	; (8003d7c <HAL_RCC_OscConfig+0x76c>)
 8003d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d52:	4a0a      	ldr	r2, [pc, #40]	; (8003d7c <HAL_RCC_OscConfig+0x76c>)
 8003d54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003d5a:	4b08      	ldr	r3, [pc, #32]	; (8003d7c <HAL_RCC_OscConfig+0x76c>)
 8003d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5e:	4a07      	ldr	r2, [pc, #28]	; (8003d7c <HAL_RCC_OscConfig+0x76c>)
 8003d60:	f043 0301 	orr.w	r3, r3, #1
 8003d64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d66:	4b05      	ldr	r3, [pc, #20]	; (8003d7c <HAL_RCC_OscConfig+0x76c>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a04      	ldr	r2, [pc, #16]	; (8003d7c <HAL_RCC_OscConfig+0x76c>)
 8003d6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d72:	f7fe fd7b 	bl	800286c <HAL_GetTick>
 8003d76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d78:	e011      	b.n	8003d9e <HAL_RCC_OscConfig+0x78e>
 8003d7a:	bf00      	nop
 8003d7c:	58024400 	.word	0x58024400
 8003d80:	58024800 	.word	0x58024800
 8003d84:	fffffc0c 	.word	0xfffffc0c
 8003d88:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d8c:	f7fe fd6e 	bl	800286c <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e05f      	b.n	8003e5e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d9e:	4b32      	ldr	r3, [pc, #200]	; (8003e68 <HAL_RCC_OscConfig+0x858>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d0f0      	beq.n	8003d8c <HAL_RCC_OscConfig+0x77c>
 8003daa:	e057      	b.n	8003e5c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dac:	4b2e      	ldr	r3, [pc, #184]	; (8003e68 <HAL_RCC_OscConfig+0x858>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a2d      	ldr	r2, [pc, #180]	; (8003e68 <HAL_RCC_OscConfig+0x858>)
 8003db2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003db6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db8:	f7fe fd58 	bl	800286c <HAL_GetTick>
 8003dbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003dbe:	e008      	b.n	8003dd2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dc0:	f7fe fd54 	bl	800286c <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e045      	b.n	8003e5e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003dd2:	4b25      	ldr	r3, [pc, #148]	; (8003e68 <HAL_RCC_OscConfig+0x858>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1f0      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x7b0>
 8003dde:	e03d      	b.n	8003e5c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003de0:	4b21      	ldr	r3, [pc, #132]	; (8003e68 <HAL_RCC_OscConfig+0x858>)
 8003de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003de6:	4b20      	ldr	r3, [pc, #128]	; (8003e68 <HAL_RCC_OscConfig+0x858>)
 8003de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dea:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d031      	beq.n	8003e58 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	f003 0203 	and.w	r2, r3, #3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d12a      	bne.n	8003e58 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	091b      	lsrs	r3, r3, #4
 8003e06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d122      	bne.n	8003e58 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d11a      	bne.n	8003e58 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	0a5b      	lsrs	r3, r3, #9
 8003e26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e2e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d111      	bne.n	8003e58 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	0c1b      	lsrs	r3, r3, #16
 8003e38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e40:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d108      	bne.n	8003e58 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	0e1b      	lsrs	r3, r3, #24
 8003e4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e52:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d001      	beq.n	8003e5c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e000      	b.n	8003e5e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3730      	adds	r7, #48	; 0x30
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	58024400 	.word	0x58024400

08003e6c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d101      	bne.n	8003e80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e19c      	b.n	80041ba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e80:	4b8a      	ldr	r3, [pc, #552]	; (80040ac <HAL_RCC_ClockConfig+0x240>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 030f 	and.w	r3, r3, #15
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d910      	bls.n	8003eb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e8e:	4b87      	ldr	r3, [pc, #540]	; (80040ac <HAL_RCC_ClockConfig+0x240>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f023 020f 	bic.w	r2, r3, #15
 8003e96:	4985      	ldr	r1, [pc, #532]	; (80040ac <HAL_RCC_ClockConfig+0x240>)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e9e:	4b83      	ldr	r3, [pc, #524]	; (80040ac <HAL_RCC_ClockConfig+0x240>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 030f 	and.w	r3, r3, #15
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d001      	beq.n	8003eb0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e184      	b.n	80041ba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d010      	beq.n	8003ede <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	691a      	ldr	r2, [r3, #16]
 8003ec0:	4b7b      	ldr	r3, [pc, #492]	; (80040b0 <HAL_RCC_ClockConfig+0x244>)
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d908      	bls.n	8003ede <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003ecc:	4b78      	ldr	r3, [pc, #480]	; (80040b0 <HAL_RCC_ClockConfig+0x244>)
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	4975      	ldr	r1, [pc, #468]	; (80040b0 <HAL_RCC_ClockConfig+0x244>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0308 	and.w	r3, r3, #8
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d010      	beq.n	8003f0c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	695a      	ldr	r2, [r3, #20]
 8003eee:	4b70      	ldr	r3, [pc, #448]	; (80040b0 <HAL_RCC_ClockConfig+0x244>)
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d908      	bls.n	8003f0c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003efa:	4b6d      	ldr	r3, [pc, #436]	; (80040b0 <HAL_RCC_ClockConfig+0x244>)
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	496a      	ldr	r1, [pc, #424]	; (80040b0 <HAL_RCC_ClockConfig+0x244>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0310 	and.w	r3, r3, #16
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d010      	beq.n	8003f3a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	699a      	ldr	r2, [r3, #24]
 8003f1c:	4b64      	ldr	r3, [pc, #400]	; (80040b0 <HAL_RCC_ClockConfig+0x244>)
 8003f1e:	69db      	ldr	r3, [r3, #28]
 8003f20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d908      	bls.n	8003f3a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003f28:	4b61      	ldr	r3, [pc, #388]	; (80040b0 <HAL_RCC_ClockConfig+0x244>)
 8003f2a:	69db      	ldr	r3, [r3, #28]
 8003f2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	495e      	ldr	r1, [pc, #376]	; (80040b0 <HAL_RCC_ClockConfig+0x244>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0320 	and.w	r3, r3, #32
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d010      	beq.n	8003f68 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69da      	ldr	r2, [r3, #28]
 8003f4a:	4b59      	ldr	r3, [pc, #356]	; (80040b0 <HAL_RCC_ClockConfig+0x244>)
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d908      	bls.n	8003f68 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003f56:	4b56      	ldr	r3, [pc, #344]	; (80040b0 <HAL_RCC_ClockConfig+0x244>)
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	4953      	ldr	r1, [pc, #332]	; (80040b0 <HAL_RCC_ClockConfig+0x244>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d010      	beq.n	8003f96 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68da      	ldr	r2, [r3, #12]
 8003f78:	4b4d      	ldr	r3, [pc, #308]	; (80040b0 <HAL_RCC_ClockConfig+0x244>)
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	f003 030f 	and.w	r3, r3, #15
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d908      	bls.n	8003f96 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f84:	4b4a      	ldr	r3, [pc, #296]	; (80040b0 <HAL_RCC_ClockConfig+0x244>)
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	f023 020f 	bic.w	r2, r3, #15
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	4947      	ldr	r1, [pc, #284]	; (80040b0 <HAL_RCC_ClockConfig+0x244>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d055      	beq.n	800404e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003fa2:	4b43      	ldr	r3, [pc, #268]	; (80040b0 <HAL_RCC_ClockConfig+0x244>)
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	4940      	ldr	r1, [pc, #256]	; (80040b0 <HAL_RCC_ClockConfig+0x244>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d107      	bne.n	8003fcc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fbc:	4b3c      	ldr	r3, [pc, #240]	; (80040b0 <HAL_RCC_ClockConfig+0x244>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d121      	bne.n	800400c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e0f6      	b.n	80041ba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	2b03      	cmp	r3, #3
 8003fd2:	d107      	bne.n	8003fe4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fd4:	4b36      	ldr	r3, [pc, #216]	; (80040b0 <HAL_RCC_ClockConfig+0x244>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d115      	bne.n	800400c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e0ea      	b.n	80041ba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d107      	bne.n	8003ffc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003fec:	4b30      	ldr	r3, [pc, #192]	; (80040b0 <HAL_RCC_ClockConfig+0x244>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d109      	bne.n	800400c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e0de      	b.n	80041ba <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ffc:	4b2c      	ldr	r3, [pc, #176]	; (80040b0 <HAL_RCC_ClockConfig+0x244>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e0d6      	b.n	80041ba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800400c:	4b28      	ldr	r3, [pc, #160]	; (80040b0 <HAL_RCC_ClockConfig+0x244>)
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	f023 0207 	bic.w	r2, r3, #7
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	4925      	ldr	r1, [pc, #148]	; (80040b0 <HAL_RCC_ClockConfig+0x244>)
 800401a:	4313      	orrs	r3, r2
 800401c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800401e:	f7fe fc25 	bl	800286c <HAL_GetTick>
 8004022:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004024:	e00a      	b.n	800403c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004026:	f7fe fc21 	bl	800286c <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	f241 3288 	movw	r2, #5000	; 0x1388
 8004034:	4293      	cmp	r3, r2
 8004036:	d901      	bls.n	800403c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e0be      	b.n	80041ba <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800403c:	4b1c      	ldr	r3, [pc, #112]	; (80040b0 <HAL_RCC_ClockConfig+0x244>)
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	429a      	cmp	r2, r3
 800404c:	d1eb      	bne.n	8004026 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d010      	beq.n	800407c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68da      	ldr	r2, [r3, #12]
 800405e:	4b14      	ldr	r3, [pc, #80]	; (80040b0 <HAL_RCC_ClockConfig+0x244>)
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	f003 030f 	and.w	r3, r3, #15
 8004066:	429a      	cmp	r2, r3
 8004068:	d208      	bcs.n	800407c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800406a:	4b11      	ldr	r3, [pc, #68]	; (80040b0 <HAL_RCC_ClockConfig+0x244>)
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	f023 020f 	bic.w	r2, r3, #15
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	490e      	ldr	r1, [pc, #56]	; (80040b0 <HAL_RCC_ClockConfig+0x244>)
 8004078:	4313      	orrs	r3, r2
 800407a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800407c:	4b0b      	ldr	r3, [pc, #44]	; (80040ac <HAL_RCC_ClockConfig+0x240>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 030f 	and.w	r3, r3, #15
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	429a      	cmp	r2, r3
 8004088:	d214      	bcs.n	80040b4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800408a:	4b08      	ldr	r3, [pc, #32]	; (80040ac <HAL_RCC_ClockConfig+0x240>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f023 020f 	bic.w	r2, r3, #15
 8004092:	4906      	ldr	r1, [pc, #24]	; (80040ac <HAL_RCC_ClockConfig+0x240>)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	4313      	orrs	r3, r2
 8004098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800409a:	4b04      	ldr	r3, [pc, #16]	; (80040ac <HAL_RCC_ClockConfig+0x240>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 030f 	and.w	r3, r3, #15
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d005      	beq.n	80040b4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e086      	b.n	80041ba <HAL_RCC_ClockConfig+0x34e>
 80040ac:	52002000 	.word	0x52002000
 80040b0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d010      	beq.n	80040e2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	691a      	ldr	r2, [r3, #16]
 80040c4:	4b3f      	ldr	r3, [pc, #252]	; (80041c4 <HAL_RCC_ClockConfig+0x358>)
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d208      	bcs.n	80040e2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80040d0:	4b3c      	ldr	r3, [pc, #240]	; (80041c4 <HAL_RCC_ClockConfig+0x358>)
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	4939      	ldr	r1, [pc, #228]	; (80041c4 <HAL_RCC_ClockConfig+0x358>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0308 	and.w	r3, r3, #8
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d010      	beq.n	8004110 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	695a      	ldr	r2, [r3, #20]
 80040f2:	4b34      	ldr	r3, [pc, #208]	; (80041c4 <HAL_RCC_ClockConfig+0x358>)
 80040f4:	69db      	ldr	r3, [r3, #28]
 80040f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d208      	bcs.n	8004110 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80040fe:	4b31      	ldr	r3, [pc, #196]	; (80041c4 <HAL_RCC_ClockConfig+0x358>)
 8004100:	69db      	ldr	r3, [r3, #28]
 8004102:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	492e      	ldr	r1, [pc, #184]	; (80041c4 <HAL_RCC_ClockConfig+0x358>)
 800410c:	4313      	orrs	r3, r2
 800410e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0310 	and.w	r3, r3, #16
 8004118:	2b00      	cmp	r3, #0
 800411a:	d010      	beq.n	800413e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	699a      	ldr	r2, [r3, #24]
 8004120:	4b28      	ldr	r3, [pc, #160]	; (80041c4 <HAL_RCC_ClockConfig+0x358>)
 8004122:	69db      	ldr	r3, [r3, #28]
 8004124:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004128:	429a      	cmp	r2, r3
 800412a:	d208      	bcs.n	800413e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800412c:	4b25      	ldr	r3, [pc, #148]	; (80041c4 <HAL_RCC_ClockConfig+0x358>)
 800412e:	69db      	ldr	r3, [r3, #28]
 8004130:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	4922      	ldr	r1, [pc, #136]	; (80041c4 <HAL_RCC_ClockConfig+0x358>)
 800413a:	4313      	orrs	r3, r2
 800413c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0320 	and.w	r3, r3, #32
 8004146:	2b00      	cmp	r3, #0
 8004148:	d010      	beq.n	800416c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	69da      	ldr	r2, [r3, #28]
 800414e:	4b1d      	ldr	r3, [pc, #116]	; (80041c4 <HAL_RCC_ClockConfig+0x358>)
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004156:	429a      	cmp	r2, r3
 8004158:	d208      	bcs.n	800416c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800415a:	4b1a      	ldr	r3, [pc, #104]	; (80041c4 <HAL_RCC_ClockConfig+0x358>)
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	4917      	ldr	r1, [pc, #92]	; (80041c4 <HAL_RCC_ClockConfig+0x358>)
 8004168:	4313      	orrs	r3, r2
 800416a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800416c:	f000 f834 	bl	80041d8 <HAL_RCC_GetSysClockFreq>
 8004170:	4602      	mov	r2, r0
 8004172:	4b14      	ldr	r3, [pc, #80]	; (80041c4 <HAL_RCC_ClockConfig+0x358>)
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	0a1b      	lsrs	r3, r3, #8
 8004178:	f003 030f 	and.w	r3, r3, #15
 800417c:	4912      	ldr	r1, [pc, #72]	; (80041c8 <HAL_RCC_ClockConfig+0x35c>)
 800417e:	5ccb      	ldrb	r3, [r1, r3]
 8004180:	f003 031f 	and.w	r3, r3, #31
 8004184:	fa22 f303 	lsr.w	r3, r2, r3
 8004188:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800418a:	4b0e      	ldr	r3, [pc, #56]	; (80041c4 <HAL_RCC_ClockConfig+0x358>)
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	f003 030f 	and.w	r3, r3, #15
 8004192:	4a0d      	ldr	r2, [pc, #52]	; (80041c8 <HAL_RCC_ClockConfig+0x35c>)
 8004194:	5cd3      	ldrb	r3, [r2, r3]
 8004196:	f003 031f 	and.w	r3, r3, #31
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	fa22 f303 	lsr.w	r3, r2, r3
 80041a0:	4a0a      	ldr	r2, [pc, #40]	; (80041cc <HAL_RCC_ClockConfig+0x360>)
 80041a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80041a4:	4a0a      	ldr	r2, [pc, #40]	; (80041d0 <HAL_RCC_ClockConfig+0x364>)
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80041aa:	4b0a      	ldr	r3, [pc, #40]	; (80041d4 <HAL_RCC_ClockConfig+0x368>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7fe f9b2 	bl	8002518 <HAL_InitTick>
 80041b4:	4603      	mov	r3, r0
 80041b6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80041b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3718      	adds	r7, #24
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	58024400 	.word	0x58024400
 80041c8:	0800d544 	.word	0x0800d544
 80041cc:	24000004 	.word	0x24000004
 80041d0:	24000000 	.word	0x24000000
 80041d4:	24000010 	.word	0x24000010

080041d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041d8:	b480      	push	{r7}
 80041da:	b089      	sub	sp, #36	; 0x24
 80041dc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041de:	4bb3      	ldr	r3, [pc, #716]	; (80044ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041e6:	2b18      	cmp	r3, #24
 80041e8:	f200 8155 	bhi.w	8004496 <HAL_RCC_GetSysClockFreq+0x2be>
 80041ec:	a201      	add	r2, pc, #4	; (adr r2, 80041f4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80041ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f2:	bf00      	nop
 80041f4:	08004259 	.word	0x08004259
 80041f8:	08004497 	.word	0x08004497
 80041fc:	08004497 	.word	0x08004497
 8004200:	08004497 	.word	0x08004497
 8004204:	08004497 	.word	0x08004497
 8004208:	08004497 	.word	0x08004497
 800420c:	08004497 	.word	0x08004497
 8004210:	08004497 	.word	0x08004497
 8004214:	0800427f 	.word	0x0800427f
 8004218:	08004497 	.word	0x08004497
 800421c:	08004497 	.word	0x08004497
 8004220:	08004497 	.word	0x08004497
 8004224:	08004497 	.word	0x08004497
 8004228:	08004497 	.word	0x08004497
 800422c:	08004497 	.word	0x08004497
 8004230:	08004497 	.word	0x08004497
 8004234:	08004285 	.word	0x08004285
 8004238:	08004497 	.word	0x08004497
 800423c:	08004497 	.word	0x08004497
 8004240:	08004497 	.word	0x08004497
 8004244:	08004497 	.word	0x08004497
 8004248:	08004497 	.word	0x08004497
 800424c:	08004497 	.word	0x08004497
 8004250:	08004497 	.word	0x08004497
 8004254:	0800428b 	.word	0x0800428b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004258:	4b94      	ldr	r3, [pc, #592]	; (80044ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0320 	and.w	r3, r3, #32
 8004260:	2b00      	cmp	r3, #0
 8004262:	d009      	beq.n	8004278 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004264:	4b91      	ldr	r3, [pc, #580]	; (80044ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	08db      	lsrs	r3, r3, #3
 800426a:	f003 0303 	and.w	r3, r3, #3
 800426e:	4a90      	ldr	r2, [pc, #576]	; (80044b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004270:	fa22 f303 	lsr.w	r3, r2, r3
 8004274:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004276:	e111      	b.n	800449c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004278:	4b8d      	ldr	r3, [pc, #564]	; (80044b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800427a:	61bb      	str	r3, [r7, #24]
    break;
 800427c:	e10e      	b.n	800449c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800427e:	4b8d      	ldr	r3, [pc, #564]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004280:	61bb      	str	r3, [r7, #24]
    break;
 8004282:	e10b      	b.n	800449c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004284:	4b8c      	ldr	r3, [pc, #560]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004286:	61bb      	str	r3, [r7, #24]
    break;
 8004288:	e108      	b.n	800449c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800428a:	4b88      	ldr	r3, [pc, #544]	; (80044ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800428c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428e:	f003 0303 	and.w	r3, r3, #3
 8004292:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004294:	4b85      	ldr	r3, [pc, #532]	; (80044ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004298:	091b      	lsrs	r3, r3, #4
 800429a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800429e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80042a0:	4b82      	ldr	r3, [pc, #520]	; (80044ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80042aa:	4b80      	ldr	r3, [pc, #512]	; (80044ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ae:	08db      	lsrs	r3, r3, #3
 80042b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	fb02 f303 	mul.w	r3, r2, r3
 80042ba:	ee07 3a90 	vmov	s15, r3
 80042be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042c2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 80e1 	beq.w	8004490 <HAL_RCC_GetSysClockFreq+0x2b8>
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	f000 8083 	beq.w	80043dc <HAL_RCC_GetSysClockFreq+0x204>
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	2b02      	cmp	r3, #2
 80042da:	f200 80a1 	bhi.w	8004420 <HAL_RCC_GetSysClockFreq+0x248>
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d003      	beq.n	80042ec <HAL_RCC_GetSysClockFreq+0x114>
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d056      	beq.n	8004398 <HAL_RCC_GetSysClockFreq+0x1c0>
 80042ea:	e099      	b.n	8004420 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042ec:	4b6f      	ldr	r3, [pc, #444]	; (80044ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0320 	and.w	r3, r3, #32
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d02d      	beq.n	8004354 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80042f8:	4b6c      	ldr	r3, [pc, #432]	; (80044ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	08db      	lsrs	r3, r3, #3
 80042fe:	f003 0303 	and.w	r3, r3, #3
 8004302:	4a6b      	ldr	r2, [pc, #428]	; (80044b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004304:	fa22 f303 	lsr.w	r3, r2, r3
 8004308:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	ee07 3a90 	vmov	s15, r3
 8004310:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	ee07 3a90 	vmov	s15, r3
 800431a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800431e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004322:	4b62      	ldr	r3, [pc, #392]	; (80044ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800432a:	ee07 3a90 	vmov	s15, r3
 800432e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004332:	ed97 6a02 	vldr	s12, [r7, #8]
 8004336:	eddf 5a61 	vldr	s11, [pc, #388]	; 80044bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800433a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800433e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004342:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800434a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800434e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004352:	e087      	b.n	8004464 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	ee07 3a90 	vmov	s15, r3
 800435a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800435e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80044c0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004366:	4b51      	ldr	r3, [pc, #324]	; (80044ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800436e:	ee07 3a90 	vmov	s15, r3
 8004372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004376:	ed97 6a02 	vldr	s12, [r7, #8]
 800437a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80044bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800437e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004386:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800438a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800438e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004392:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004396:	e065      	b.n	8004464 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	ee07 3a90 	vmov	s15, r3
 800439e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043a2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80044c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80043a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043aa:	4b40      	ldr	r3, [pc, #256]	; (80044ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043b2:	ee07 3a90 	vmov	s15, r3
 80043b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80043be:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80044bc <HAL_RCC_GetSysClockFreq+0x2e4>
 80043c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043da:	e043      	b.n	8004464 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	ee07 3a90 	vmov	s15, r3
 80043e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043e6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80044c8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80043ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ee:	4b2f      	ldr	r3, [pc, #188]	; (80044ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043f6:	ee07 3a90 	vmov	s15, r3
 80043fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004402:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80044bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800440a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800440e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800441a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800441e:	e021      	b.n	8004464 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	ee07 3a90 	vmov	s15, r3
 8004426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800442a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80044c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800442e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004432:	4b1e      	ldr	r3, [pc, #120]	; (80044ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800443a:	ee07 3a90 	vmov	s15, r3
 800443e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004442:	ed97 6a02 	vldr	s12, [r7, #8]
 8004446:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80044bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800444a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800444e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004452:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800445a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800445e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004462:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004464:	4b11      	ldr	r3, [pc, #68]	; (80044ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004468:	0a5b      	lsrs	r3, r3, #9
 800446a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800446e:	3301      	adds	r3, #1
 8004470:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	ee07 3a90 	vmov	s15, r3
 8004478:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800447c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004480:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004484:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004488:	ee17 3a90 	vmov	r3, s15
 800448c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800448e:	e005      	b.n	800449c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004490:	2300      	movs	r3, #0
 8004492:	61bb      	str	r3, [r7, #24]
    break;
 8004494:	e002      	b.n	800449c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004496:	4b07      	ldr	r3, [pc, #28]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004498:	61bb      	str	r3, [r7, #24]
    break;
 800449a:	bf00      	nop
  }

  return sysclockfreq;
 800449c:	69bb      	ldr	r3, [r7, #24]
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3724      	adds	r7, #36	; 0x24
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	58024400 	.word	0x58024400
 80044b0:	03d09000 	.word	0x03d09000
 80044b4:	003d0900 	.word	0x003d0900
 80044b8:	007a1200 	.word	0x007a1200
 80044bc:	46000000 	.word	0x46000000
 80044c0:	4c742400 	.word	0x4c742400
 80044c4:	4a742400 	.word	0x4a742400
 80044c8:	4af42400 	.word	0x4af42400

080044cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80044d2:	f7ff fe81 	bl	80041d8 <HAL_RCC_GetSysClockFreq>
 80044d6:	4602      	mov	r2, r0
 80044d8:	4b10      	ldr	r3, [pc, #64]	; (800451c <HAL_RCC_GetHCLKFreq+0x50>)
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	0a1b      	lsrs	r3, r3, #8
 80044de:	f003 030f 	and.w	r3, r3, #15
 80044e2:	490f      	ldr	r1, [pc, #60]	; (8004520 <HAL_RCC_GetHCLKFreq+0x54>)
 80044e4:	5ccb      	ldrb	r3, [r1, r3]
 80044e6:	f003 031f 	and.w	r3, r3, #31
 80044ea:	fa22 f303 	lsr.w	r3, r2, r3
 80044ee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80044f0:	4b0a      	ldr	r3, [pc, #40]	; (800451c <HAL_RCC_GetHCLKFreq+0x50>)
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	f003 030f 	and.w	r3, r3, #15
 80044f8:	4a09      	ldr	r2, [pc, #36]	; (8004520 <HAL_RCC_GetHCLKFreq+0x54>)
 80044fa:	5cd3      	ldrb	r3, [r2, r3]
 80044fc:	f003 031f 	and.w	r3, r3, #31
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	fa22 f303 	lsr.w	r3, r2, r3
 8004506:	4a07      	ldr	r2, [pc, #28]	; (8004524 <HAL_RCC_GetHCLKFreq+0x58>)
 8004508:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800450a:	4a07      	ldr	r2, [pc, #28]	; (8004528 <HAL_RCC_GetHCLKFreq+0x5c>)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004510:	4b04      	ldr	r3, [pc, #16]	; (8004524 <HAL_RCC_GetHCLKFreq+0x58>)
 8004512:	681b      	ldr	r3, [r3, #0]
}
 8004514:	4618      	mov	r0, r3
 8004516:	3708      	adds	r7, #8
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	58024400 	.word	0x58024400
 8004520:	0800d544 	.word	0x0800d544
 8004524:	24000004 	.word	0x24000004
 8004528:	24000000 	.word	0x24000000

0800452c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004530:	f7ff ffcc 	bl	80044cc <HAL_RCC_GetHCLKFreq>
 8004534:	4602      	mov	r2, r0
 8004536:	4b06      	ldr	r3, [pc, #24]	; (8004550 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	091b      	lsrs	r3, r3, #4
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	4904      	ldr	r1, [pc, #16]	; (8004554 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004542:	5ccb      	ldrb	r3, [r1, r3]
 8004544:	f003 031f 	and.w	r3, r3, #31
 8004548:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800454c:	4618      	mov	r0, r3
 800454e:	bd80      	pop	{r7, pc}
 8004550:	58024400 	.word	0x58024400
 8004554:	0800d544 	.word	0x0800d544

08004558 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800455c:	f7ff ffb6 	bl	80044cc <HAL_RCC_GetHCLKFreq>
 8004560:	4602      	mov	r2, r0
 8004562:	4b06      	ldr	r3, [pc, #24]	; (800457c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	0a1b      	lsrs	r3, r3, #8
 8004568:	f003 0307 	and.w	r3, r3, #7
 800456c:	4904      	ldr	r1, [pc, #16]	; (8004580 <HAL_RCC_GetPCLK2Freq+0x28>)
 800456e:	5ccb      	ldrb	r3, [r1, r3]
 8004570:	f003 031f 	and.w	r3, r3, #31
 8004574:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004578:	4618      	mov	r0, r3
 800457a:	bd80      	pop	{r7, pc}
 800457c:	58024400 	.word	0x58024400
 8004580:	0800d544 	.word	0x0800d544

08004584 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	223f      	movs	r2, #63	; 0x3f
 8004592:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004594:	4b1a      	ldr	r3, [pc, #104]	; (8004600 <HAL_RCC_GetClockConfig+0x7c>)
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	f003 0207 	and.w	r2, r3, #7
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80045a0:	4b17      	ldr	r3, [pc, #92]	; (8004600 <HAL_RCC_GetClockConfig+0x7c>)
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80045ac:	4b14      	ldr	r3, [pc, #80]	; (8004600 <HAL_RCC_GetClockConfig+0x7c>)
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	f003 020f 	and.w	r2, r3, #15
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80045b8:	4b11      	ldr	r3, [pc, #68]	; (8004600 <HAL_RCC_GetClockConfig+0x7c>)
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80045c4:	4b0e      	ldr	r3, [pc, #56]	; (8004600 <HAL_RCC_GetClockConfig+0x7c>)
 80045c6:	69db      	ldr	r3, [r3, #28]
 80045c8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80045d0:	4b0b      	ldr	r3, [pc, #44]	; (8004600 <HAL_RCC_GetClockConfig+0x7c>)
 80045d2:	69db      	ldr	r3, [r3, #28]
 80045d4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80045dc:	4b08      	ldr	r3, [pc, #32]	; (8004600 <HAL_RCC_GetClockConfig+0x7c>)
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80045e8:	4b06      	ldr	r3, [pc, #24]	; (8004604 <HAL_RCC_GetClockConfig+0x80>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 020f 	and.w	r2, r3, #15
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	601a      	str	r2, [r3, #0]
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr
 8004600:	58024400 	.word	0x58024400
 8004604:	52002000 	.word	0x52002000

08004608 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004610:	2300      	movs	r3, #0
 8004612:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004614:	2300      	movs	r3, #0
 8004616:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d03f      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004628:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800462c:	d02a      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800462e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004632:	d824      	bhi.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004634:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004638:	d018      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800463a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800463e:	d81e      	bhi.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004640:	2b00      	cmp	r3, #0
 8004642:	d003      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004644:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004648:	d007      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800464a:	e018      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800464c:	4ba3      	ldr	r3, [pc, #652]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800464e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004650:	4aa2      	ldr	r2, [pc, #648]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004656:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004658:	e015      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	3304      	adds	r3, #4
 800465e:	2102      	movs	r1, #2
 8004660:	4618      	mov	r0, r3
 8004662:	f001 f9d5 	bl	8005a10 <RCCEx_PLL2_Config>
 8004666:	4603      	mov	r3, r0
 8004668:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800466a:	e00c      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	3324      	adds	r3, #36	; 0x24
 8004670:	2102      	movs	r1, #2
 8004672:	4618      	mov	r0, r3
 8004674:	f001 fa7e 	bl	8005b74 <RCCEx_PLL3_Config>
 8004678:	4603      	mov	r3, r0
 800467a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800467c:	e003      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	75fb      	strb	r3, [r7, #23]
      break;
 8004682:	e000      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004684:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004686:	7dfb      	ldrb	r3, [r7, #23]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d109      	bne.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800468c:	4b93      	ldr	r3, [pc, #588]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800468e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004690:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004698:	4990      	ldr	r1, [pc, #576]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800469a:	4313      	orrs	r3, r2
 800469c:	650b      	str	r3, [r1, #80]	; 0x50
 800469e:	e001      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a0:	7dfb      	ldrb	r3, [r7, #23]
 80046a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d03d      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b4:	2b04      	cmp	r3, #4
 80046b6:	d826      	bhi.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80046b8:	a201      	add	r2, pc, #4	; (adr r2, 80046c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80046ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046be:	bf00      	nop
 80046c0:	080046d5 	.word	0x080046d5
 80046c4:	080046e3 	.word	0x080046e3
 80046c8:	080046f5 	.word	0x080046f5
 80046cc:	0800470d 	.word	0x0800470d
 80046d0:	0800470d 	.word	0x0800470d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046d4:	4b81      	ldr	r3, [pc, #516]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80046d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d8:	4a80      	ldr	r2, [pc, #512]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80046da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80046e0:	e015      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	3304      	adds	r3, #4
 80046e6:	2100      	movs	r1, #0
 80046e8:	4618      	mov	r0, r3
 80046ea:	f001 f991 	bl	8005a10 <RCCEx_PLL2_Config>
 80046ee:	4603      	mov	r3, r0
 80046f0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80046f2:	e00c      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	3324      	adds	r3, #36	; 0x24
 80046f8:	2100      	movs	r1, #0
 80046fa:	4618      	mov	r0, r3
 80046fc:	f001 fa3a 	bl	8005b74 <RCCEx_PLL3_Config>
 8004700:	4603      	mov	r3, r0
 8004702:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004704:	e003      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	75fb      	strb	r3, [r7, #23]
      break;
 800470a:	e000      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800470c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800470e:	7dfb      	ldrb	r3, [r7, #23]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d109      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004714:	4b71      	ldr	r3, [pc, #452]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004718:	f023 0207 	bic.w	r2, r3, #7
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004720:	496e      	ldr	r1, [pc, #440]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004722:	4313      	orrs	r3, r2
 8004724:	650b      	str	r3, [r1, #80]	; 0x50
 8004726:	e001      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004728:	7dfb      	ldrb	r3, [r7, #23]
 800472a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004734:	2b00      	cmp	r3, #0
 8004736:	d042      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004740:	d02b      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004746:	d825      	bhi.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004748:	2bc0      	cmp	r3, #192	; 0xc0
 800474a:	d028      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800474c:	2bc0      	cmp	r3, #192	; 0xc0
 800474e:	d821      	bhi.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004750:	2b80      	cmp	r3, #128	; 0x80
 8004752:	d016      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004754:	2b80      	cmp	r3, #128	; 0x80
 8004756:	d81d      	bhi.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004758:	2b00      	cmp	r3, #0
 800475a:	d002      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800475c:	2b40      	cmp	r3, #64	; 0x40
 800475e:	d007      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004760:	e018      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004762:	4b5e      	ldr	r3, [pc, #376]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004766:	4a5d      	ldr	r2, [pc, #372]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800476c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800476e:	e017      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	3304      	adds	r3, #4
 8004774:	2100      	movs	r1, #0
 8004776:	4618      	mov	r0, r3
 8004778:	f001 f94a 	bl	8005a10 <RCCEx_PLL2_Config>
 800477c:	4603      	mov	r3, r0
 800477e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004780:	e00e      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	3324      	adds	r3, #36	; 0x24
 8004786:	2100      	movs	r1, #0
 8004788:	4618      	mov	r0, r3
 800478a:	f001 f9f3 	bl	8005b74 <RCCEx_PLL3_Config>
 800478e:	4603      	mov	r3, r0
 8004790:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004792:	e005      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	75fb      	strb	r3, [r7, #23]
      break;
 8004798:	e002      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800479a:	bf00      	nop
 800479c:	e000      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800479e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047a0:	7dfb      	ldrb	r3, [r7, #23]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d109      	bne.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80047a6:	4b4d      	ldr	r3, [pc, #308]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80047a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047aa:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b2:	494a      	ldr	r1, [pc, #296]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	650b      	str	r3, [r1, #80]	; 0x50
 80047b8:	e001      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ba:	7dfb      	ldrb	r3, [r7, #23]
 80047bc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d049      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80047d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80047d4:	d030      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80047d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80047da:	d82a      	bhi.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80047dc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80047e0:	d02c      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80047e2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80047e6:	d824      	bhi.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80047e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047ec:	d018      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80047ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047f2:	d81e      	bhi.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d003      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80047f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047fc:	d007      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x206>
 80047fe:	e018      	b.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004800:	4b36      	ldr	r3, [pc, #216]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004804:	4a35      	ldr	r2, [pc, #212]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004806:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800480a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800480c:	e017      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	3304      	adds	r3, #4
 8004812:	2100      	movs	r1, #0
 8004814:	4618      	mov	r0, r3
 8004816:	f001 f8fb 	bl	8005a10 <RCCEx_PLL2_Config>
 800481a:	4603      	mov	r3, r0
 800481c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800481e:	e00e      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	3324      	adds	r3, #36	; 0x24
 8004824:	2100      	movs	r1, #0
 8004826:	4618      	mov	r0, r3
 8004828:	f001 f9a4 	bl	8005b74 <RCCEx_PLL3_Config>
 800482c:	4603      	mov	r3, r0
 800482e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004830:	e005      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	75fb      	strb	r3, [r7, #23]
      break;
 8004836:	e002      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004838:	bf00      	nop
 800483a:	e000      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800483c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800483e:	7dfb      	ldrb	r3, [r7, #23]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d10a      	bne.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004844:	4b25      	ldr	r3, [pc, #148]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004848:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004852:	4922      	ldr	r1, [pc, #136]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004854:	4313      	orrs	r3, r2
 8004856:	658b      	str	r3, [r1, #88]	; 0x58
 8004858:	e001      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800485a:	7dfb      	ldrb	r3, [r7, #23]
 800485c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004866:	2b00      	cmp	r3, #0
 8004868:	d04b      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004870:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004874:	d030      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004876:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800487a:	d82a      	bhi.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800487c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004880:	d02e      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8004882:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004886:	d824      	bhi.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004888:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800488c:	d018      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800488e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004892:	d81e      	bhi.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004894:	2b00      	cmp	r3, #0
 8004896:	d003      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004898:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800489c:	d007      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800489e:	e018      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048a0:	4b0e      	ldr	r3, [pc, #56]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80048a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a4:	4a0d      	ldr	r2, [pc, #52]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80048a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80048ac:	e019      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	3304      	adds	r3, #4
 80048b2:	2100      	movs	r1, #0
 80048b4:	4618      	mov	r0, r3
 80048b6:	f001 f8ab 	bl	8005a10 <RCCEx_PLL2_Config>
 80048ba:	4603      	mov	r3, r0
 80048bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80048be:	e010      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	3324      	adds	r3, #36	; 0x24
 80048c4:	2100      	movs	r1, #0
 80048c6:	4618      	mov	r0, r3
 80048c8:	f001 f954 	bl	8005b74 <RCCEx_PLL3_Config>
 80048cc:	4603      	mov	r3, r0
 80048ce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80048d0:	e007      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	75fb      	strb	r3, [r7, #23]
      break;
 80048d6:	e004      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80048d8:	bf00      	nop
 80048da:	e002      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80048dc:	58024400 	.word	0x58024400
      break;
 80048e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048e2:	7dfb      	ldrb	r3, [r7, #23]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10a      	bne.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80048e8:	4b99      	ldr	r3, [pc, #612]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80048ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ec:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80048f6:	4996      	ldr	r1, [pc, #600]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	658b      	str	r3, [r1, #88]	; 0x58
 80048fc:	e001      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048fe:	7dfb      	ldrb	r3, [r7, #23]
 8004900:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d032      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004912:	2b30      	cmp	r3, #48	; 0x30
 8004914:	d01c      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004916:	2b30      	cmp	r3, #48	; 0x30
 8004918:	d817      	bhi.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800491a:	2b20      	cmp	r3, #32
 800491c:	d00c      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800491e:	2b20      	cmp	r3, #32
 8004920:	d813      	bhi.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004922:	2b00      	cmp	r3, #0
 8004924:	d016      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004926:	2b10      	cmp	r3, #16
 8004928:	d10f      	bne.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800492a:	4b89      	ldr	r3, [pc, #548]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800492c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492e:	4a88      	ldr	r2, [pc, #544]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004934:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004936:	e00e      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	3304      	adds	r3, #4
 800493c:	2102      	movs	r1, #2
 800493e:	4618      	mov	r0, r3
 8004940:	f001 f866 	bl	8005a10 <RCCEx_PLL2_Config>
 8004944:	4603      	mov	r3, r0
 8004946:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004948:	e005      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	75fb      	strb	r3, [r7, #23]
      break;
 800494e:	e002      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004950:	bf00      	nop
 8004952:	e000      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004954:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004956:	7dfb      	ldrb	r3, [r7, #23]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d109      	bne.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800495c:	4b7c      	ldr	r3, [pc, #496]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800495e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004960:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004968:	4979      	ldr	r1, [pc, #484]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800496a:	4313      	orrs	r3, r2
 800496c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800496e:	e001      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004970:	7dfb      	ldrb	r3, [r7, #23]
 8004972:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d047      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004984:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004988:	d030      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800498a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800498e:	d82a      	bhi.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004990:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004994:	d02c      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004996:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800499a:	d824      	bhi.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800499c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049a0:	d018      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80049a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049a6:	d81e      	bhi.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d003      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80049ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049b0:	d007      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80049b2:	e018      	b.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049b4:	4b66      	ldr	r3, [pc, #408]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80049b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b8:	4a65      	ldr	r2, [pc, #404]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80049ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80049c0:	e017      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	3304      	adds	r3, #4
 80049c6:	2100      	movs	r1, #0
 80049c8:	4618      	mov	r0, r3
 80049ca:	f001 f821 	bl	8005a10 <RCCEx_PLL2_Config>
 80049ce:	4603      	mov	r3, r0
 80049d0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80049d2:	e00e      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	3324      	adds	r3, #36	; 0x24
 80049d8:	2100      	movs	r1, #0
 80049da:	4618      	mov	r0, r3
 80049dc:	f001 f8ca 	bl	8005b74 <RCCEx_PLL3_Config>
 80049e0:	4603      	mov	r3, r0
 80049e2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80049e4:	e005      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	75fb      	strb	r3, [r7, #23]
      break;
 80049ea:	e002      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80049ec:	bf00      	nop
 80049ee:	e000      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80049f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049f2:	7dfb      	ldrb	r3, [r7, #23]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d109      	bne.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80049f8:	4b55      	ldr	r3, [pc, #340]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80049fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049fc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a04:	4952      	ldr	r1, [pc, #328]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	650b      	str	r3, [r1, #80]	; 0x50
 8004a0a:	e001      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a0c:	7dfb      	ldrb	r3, [r7, #23]
 8004a0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d049      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a24:	d02e      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004a26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a2a:	d828      	bhi.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004a2c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a30:	d02a      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8004a32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a36:	d822      	bhi.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004a38:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a3c:	d026      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x484>
 8004a3e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a42:	d81c      	bhi.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004a44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a48:	d010      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x464>
 8004a4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a4e:	d816      	bhi.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d01d      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a58:	d111      	bne.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	3304      	adds	r3, #4
 8004a5e:	2101      	movs	r1, #1
 8004a60:	4618      	mov	r0, r3
 8004a62:	f000 ffd5 	bl	8005a10 <RCCEx_PLL2_Config>
 8004a66:	4603      	mov	r3, r0
 8004a68:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004a6a:	e012      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	3324      	adds	r3, #36	; 0x24
 8004a70:	2101      	movs	r1, #1
 8004a72:	4618      	mov	r0, r3
 8004a74:	f001 f87e 	bl	8005b74 <RCCEx_PLL3_Config>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004a7c:	e009      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	75fb      	strb	r3, [r7, #23]
      break;
 8004a82:	e006      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004a84:	bf00      	nop
 8004a86:	e004      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004a88:	bf00      	nop
 8004a8a:	e002      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004a8c:	bf00      	nop
 8004a8e:	e000      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004a90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a92:	7dfb      	ldrb	r3, [r7, #23]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d109      	bne.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004a98:	4b2d      	ldr	r3, [pc, #180]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a9c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aa4:	492a      	ldr	r1, [pc, #168]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	650b      	str	r3, [r1, #80]	; 0x50
 8004aaa:	e001      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aac:	7dfb      	ldrb	r3, [r7, #23]
 8004aae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d04d      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004ac2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ac6:	d02e      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004ac8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004acc:	d828      	bhi.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ad2:	d02a      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ad8:	d822      	bhi.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004ada:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ade:	d026      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8004ae0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ae4:	d81c      	bhi.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004ae6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aea:	d010      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004aec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004af0:	d816      	bhi.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d01d      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004af6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004afa:	d111      	bne.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	3304      	adds	r3, #4
 8004b00:	2101      	movs	r1, #1
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 ff84 	bl	8005a10 <RCCEx_PLL2_Config>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004b0c:	e012      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	3324      	adds	r3, #36	; 0x24
 8004b12:	2101      	movs	r1, #1
 8004b14:	4618      	mov	r0, r3
 8004b16:	f001 f82d 	bl	8005b74 <RCCEx_PLL3_Config>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004b1e:	e009      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	75fb      	strb	r3, [r7, #23]
      break;
 8004b24:	e006      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004b26:	bf00      	nop
 8004b28:	e004      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004b2a:	bf00      	nop
 8004b2c:	e002      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004b2e:	bf00      	nop
 8004b30:	e000      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004b32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b34:	7dfb      	ldrb	r3, [r7, #23]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10c      	bne.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004b3a:	4b05      	ldr	r3, [pc, #20]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b3e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004b48:	4901      	ldr	r1, [pc, #4]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	658b      	str	r3, [r1, #88]	; 0x58
 8004b4e:	e003      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004b50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b54:	7dfb      	ldrb	r3, [r7, #23]
 8004b56:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d02f      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b6c:	d00e      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x584>
 8004b6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b72:	d814      	bhi.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d015      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8004b78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b7c:	d10f      	bne.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b7e:	4baf      	ldr	r3, [pc, #700]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b82:	4aae      	ldr	r2, [pc, #696]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004b8a:	e00c      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	3304      	adds	r3, #4
 8004b90:	2101      	movs	r1, #1
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 ff3c 	bl	8005a10 <RCCEx_PLL2_Config>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004b9c:	e003      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	75fb      	strb	r3, [r7, #23]
      break;
 8004ba2:	e000      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8004ba4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ba6:	7dfb      	ldrb	r3, [r7, #23]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d109      	bne.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004bac:	4ba3      	ldr	r3, [pc, #652]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bb0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bb8:	49a0      	ldr	r1, [pc, #640]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	650b      	str	r3, [r1, #80]	; 0x50
 8004bbe:	e001      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bc0:	7dfb      	ldrb	r3, [r7, #23]
 8004bc2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d032      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd4:	2b03      	cmp	r3, #3
 8004bd6:	d81b      	bhi.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004bd8:	a201      	add	r2, pc, #4	; (adr r2, 8004be0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8004bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bde:	bf00      	nop
 8004be0:	08004c17 	.word	0x08004c17
 8004be4:	08004bf1 	.word	0x08004bf1
 8004be8:	08004bff 	.word	0x08004bff
 8004bec:	08004c17 	.word	0x08004c17
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bf0:	4b92      	ldr	r3, [pc, #584]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf4:	4a91      	ldr	r2, [pc, #580]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004bf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bfa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004bfc:	e00c      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	3304      	adds	r3, #4
 8004c02:	2102      	movs	r1, #2
 8004c04:	4618      	mov	r0, r3
 8004c06:	f000 ff03 	bl	8005a10 <RCCEx_PLL2_Config>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004c0e:	e003      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	75fb      	strb	r3, [r7, #23]
      break;
 8004c14:	e000      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004c16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c18:	7dfb      	ldrb	r3, [r7, #23]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d109      	bne.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004c1e:	4b87      	ldr	r3, [pc, #540]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c22:	f023 0203 	bic.w	r2, r3, #3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c2a:	4984      	ldr	r1, [pc, #528]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004c30:	e001      	b.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c32:	7dfb      	ldrb	r3, [r7, #23]
 8004c34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f000 8086 	beq.w	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c44:	4b7e      	ldr	r3, [pc, #504]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a7d      	ldr	r2, [pc, #500]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c50:	f7fd fe0c 	bl	800286c <HAL_GetTick>
 8004c54:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c56:	e009      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c58:	f7fd fe08 	bl	800286c <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b64      	cmp	r3, #100	; 0x64
 8004c64:	d902      	bls.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	75fb      	strb	r3, [r7, #23]
        break;
 8004c6a:	e005      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c6c:	4b74      	ldr	r3, [pc, #464]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d0ef      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004c78:	7dfb      	ldrb	r3, [r7, #23]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d166      	bne.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004c7e:	4b6f      	ldr	r3, [pc, #444]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c88:	4053      	eors	r3, r2
 8004c8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d013      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c92:	4b6a      	ldr	r3, [pc, #424]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c9a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c9c:	4b67      	ldr	r3, [pc, #412]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca0:	4a66      	ldr	r2, [pc, #408]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ca6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ca8:	4b64      	ldr	r3, [pc, #400]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cac:	4a63      	ldr	r2, [pc, #396]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004cae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cb2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004cb4:	4a61      	ldr	r2, [pc, #388]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004cc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cc4:	d115      	bne.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc6:	f7fd fdd1 	bl	800286c <HAL_GetTick>
 8004cca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ccc:	e00b      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cce:	f7fd fdcd 	bl	800286c <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d902      	bls.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	75fb      	strb	r3, [r7, #23]
            break;
 8004ce4:	e005      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ce6:	4b55      	ldr	r3, [pc, #340]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d0ed      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004cf2:	7dfb      	ldrb	r3, [r7, #23]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d126      	bne.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d06:	d10d      	bne.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004d08:	4b4c      	ldr	r3, [pc, #304]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d16:	0919      	lsrs	r1, r3, #4
 8004d18:	4b4a      	ldr	r3, [pc, #296]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8004d1a:	400b      	ands	r3, r1
 8004d1c:	4947      	ldr	r1, [pc, #284]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	610b      	str	r3, [r1, #16]
 8004d22:	e005      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004d24:	4b45      	ldr	r3, [pc, #276]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	4a44      	ldr	r2, [pc, #272]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d2a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004d2e:	6113      	str	r3, [r2, #16]
 8004d30:	4b42      	ldr	r3, [pc, #264]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d3e:	493f      	ldr	r1, [pc, #252]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	670b      	str	r3, [r1, #112]	; 0x70
 8004d44:	e004      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d46:	7dfb      	ldrb	r3, [r7, #23]
 8004d48:	75bb      	strb	r3, [r7, #22]
 8004d4a:	e001      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d4c:	7dfb      	ldrb	r3, [r7, #23]
 8004d4e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0301 	and.w	r3, r3, #1
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f000 8085 	beq.w	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d62:	2b28      	cmp	r3, #40	; 0x28
 8004d64:	d866      	bhi.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004d66:	a201      	add	r2, pc, #4	; (adr r2, 8004d6c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d6c:	08004e49 	.word	0x08004e49
 8004d70:	08004e35 	.word	0x08004e35
 8004d74:	08004e35 	.word	0x08004e35
 8004d78:	08004e35 	.word	0x08004e35
 8004d7c:	08004e35 	.word	0x08004e35
 8004d80:	08004e35 	.word	0x08004e35
 8004d84:	08004e35 	.word	0x08004e35
 8004d88:	08004e35 	.word	0x08004e35
 8004d8c:	08004e11 	.word	0x08004e11
 8004d90:	08004e35 	.word	0x08004e35
 8004d94:	08004e35 	.word	0x08004e35
 8004d98:	08004e35 	.word	0x08004e35
 8004d9c:	08004e35 	.word	0x08004e35
 8004da0:	08004e35 	.word	0x08004e35
 8004da4:	08004e35 	.word	0x08004e35
 8004da8:	08004e35 	.word	0x08004e35
 8004dac:	08004e23 	.word	0x08004e23
 8004db0:	08004e35 	.word	0x08004e35
 8004db4:	08004e35 	.word	0x08004e35
 8004db8:	08004e35 	.word	0x08004e35
 8004dbc:	08004e35 	.word	0x08004e35
 8004dc0:	08004e35 	.word	0x08004e35
 8004dc4:	08004e35 	.word	0x08004e35
 8004dc8:	08004e35 	.word	0x08004e35
 8004dcc:	08004e49 	.word	0x08004e49
 8004dd0:	08004e35 	.word	0x08004e35
 8004dd4:	08004e35 	.word	0x08004e35
 8004dd8:	08004e35 	.word	0x08004e35
 8004ddc:	08004e35 	.word	0x08004e35
 8004de0:	08004e35 	.word	0x08004e35
 8004de4:	08004e35 	.word	0x08004e35
 8004de8:	08004e35 	.word	0x08004e35
 8004dec:	08004e49 	.word	0x08004e49
 8004df0:	08004e35 	.word	0x08004e35
 8004df4:	08004e35 	.word	0x08004e35
 8004df8:	08004e35 	.word	0x08004e35
 8004dfc:	08004e35 	.word	0x08004e35
 8004e00:	08004e35 	.word	0x08004e35
 8004e04:	08004e35 	.word	0x08004e35
 8004e08:	08004e35 	.word	0x08004e35
 8004e0c:	08004e49 	.word	0x08004e49
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	3304      	adds	r3, #4
 8004e14:	2101      	movs	r1, #1
 8004e16:	4618      	mov	r0, r3
 8004e18:	f000 fdfa 	bl	8005a10 <RCCEx_PLL2_Config>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004e20:	e013      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	3324      	adds	r3, #36	; 0x24
 8004e26:	2101      	movs	r1, #1
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f000 fea3 	bl	8005b74 <RCCEx_PLL3_Config>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004e32:	e00a      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	75fb      	strb	r3, [r7, #23]
      break;
 8004e38:	e007      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004e3a:	bf00      	nop
 8004e3c:	58024400 	.word	0x58024400
 8004e40:	58024800 	.word	0x58024800
 8004e44:	00ffffcf 	.word	0x00ffffcf
      break;
 8004e48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e4a:	7dfb      	ldrb	r3, [r7, #23]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d109      	bne.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004e50:	4b96      	ldr	r3, [pc, #600]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e54:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e5c:	4993      	ldr	r1, [pc, #588]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	654b      	str	r3, [r1, #84]	; 0x54
 8004e62:	e001      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e64:	7dfb      	ldrb	r3, [r7, #23]
 8004e66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d038      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e78:	2b05      	cmp	r3, #5
 8004e7a:	d821      	bhi.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004e7c:	a201      	add	r2, pc, #4	; (adr r2, 8004e84 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8004e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e82:	bf00      	nop
 8004e84:	08004ec7 	.word	0x08004ec7
 8004e88:	08004e9d 	.word	0x08004e9d
 8004e8c:	08004eaf 	.word	0x08004eaf
 8004e90:	08004ec7 	.word	0x08004ec7
 8004e94:	08004ec7 	.word	0x08004ec7
 8004e98:	08004ec7 	.word	0x08004ec7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	3304      	adds	r3, #4
 8004ea0:	2101      	movs	r1, #1
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f000 fdb4 	bl	8005a10 <RCCEx_PLL2_Config>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004eac:	e00c      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	3324      	adds	r3, #36	; 0x24
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f000 fe5d 	bl	8005b74 <RCCEx_PLL3_Config>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004ebe:	e003      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ec4:	e000      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8004ec6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ec8:	7dfb      	ldrb	r3, [r7, #23]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d109      	bne.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004ece:	4b77      	ldr	r3, [pc, #476]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed2:	f023 0207 	bic.w	r2, r3, #7
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eda:	4974      	ldr	r1, [pc, #464]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	654b      	str	r3, [r1, #84]	; 0x54
 8004ee0:	e001      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee2:	7dfb      	ldrb	r3, [r7, #23]
 8004ee4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0304 	and.w	r3, r3, #4
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d03a      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef8:	2b05      	cmp	r3, #5
 8004efa:	d821      	bhi.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004efc:	a201      	add	r2, pc, #4	; (adr r2, 8004f04 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8004efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f02:	bf00      	nop
 8004f04:	08004f47 	.word	0x08004f47
 8004f08:	08004f1d 	.word	0x08004f1d
 8004f0c:	08004f2f 	.word	0x08004f2f
 8004f10:	08004f47 	.word	0x08004f47
 8004f14:	08004f47 	.word	0x08004f47
 8004f18:	08004f47 	.word	0x08004f47
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	3304      	adds	r3, #4
 8004f20:	2101      	movs	r1, #1
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 fd74 	bl	8005a10 <RCCEx_PLL2_Config>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004f2c:	e00c      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	3324      	adds	r3, #36	; 0x24
 8004f32:	2101      	movs	r1, #1
 8004f34:	4618      	mov	r0, r3
 8004f36:	f000 fe1d 	bl	8005b74 <RCCEx_PLL3_Config>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004f3e:	e003      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	75fb      	strb	r3, [r7, #23]
      break;
 8004f44:	e000      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8004f46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f48:	7dfb      	ldrb	r3, [r7, #23]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10a      	bne.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f4e:	4b57      	ldr	r3, [pc, #348]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f52:	f023 0207 	bic.w	r2, r3, #7
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f5c:	4953      	ldr	r1, [pc, #332]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	658b      	str	r3, [r1, #88]	; 0x58
 8004f62:	e001      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f64:	7dfb      	ldrb	r3, [r7, #23]
 8004f66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0320 	and.w	r3, r3, #32
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d04b      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f7e:	d02e      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004f80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f84:	d828      	bhi.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f8a:	d02a      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f90:	d822      	bhi.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004f92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f96:	d026      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004f98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f9c:	d81c      	bhi.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004f9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fa2:	d010      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8004fa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fa8:	d816      	bhi.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d01d      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8004fae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fb2:	d111      	bne.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	3304      	adds	r3, #4
 8004fb8:	2100      	movs	r1, #0
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 fd28 	bl	8005a10 <RCCEx_PLL2_Config>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004fc4:	e012      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	3324      	adds	r3, #36	; 0x24
 8004fca:	2102      	movs	r1, #2
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f000 fdd1 	bl	8005b74 <RCCEx_PLL3_Config>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004fd6:	e009      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	75fb      	strb	r3, [r7, #23]
      break;
 8004fdc:	e006      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004fde:	bf00      	nop
 8004fe0:	e004      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004fe2:	bf00      	nop
 8004fe4:	e002      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004fe6:	bf00      	nop
 8004fe8:	e000      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004fea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fec:	7dfb      	ldrb	r3, [r7, #23]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10a      	bne.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ff2:	4b2e      	ldr	r3, [pc, #184]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005000:	492a      	ldr	r1, [pc, #168]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005002:	4313      	orrs	r3, r2
 8005004:	654b      	str	r3, [r1, #84]	; 0x54
 8005006:	e001      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005008:	7dfb      	ldrb	r3, [r7, #23]
 800500a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005014:	2b00      	cmp	r3, #0
 8005016:	d04d      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800501e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005022:	d02e      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005024:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005028:	d828      	bhi.n	800507c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800502a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800502e:	d02a      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005034:	d822      	bhi.n	800507c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005036:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800503a:	d026      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800503c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005040:	d81c      	bhi.n	800507c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005042:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005046:	d010      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8005048:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800504c:	d816      	bhi.n	800507c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800504e:	2b00      	cmp	r3, #0
 8005050:	d01d      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8005052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005056:	d111      	bne.n	800507c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	3304      	adds	r3, #4
 800505c:	2100      	movs	r1, #0
 800505e:	4618      	mov	r0, r3
 8005060:	f000 fcd6 	bl	8005a10 <RCCEx_PLL2_Config>
 8005064:	4603      	mov	r3, r0
 8005066:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005068:	e012      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	3324      	adds	r3, #36	; 0x24
 800506e:	2102      	movs	r1, #2
 8005070:	4618      	mov	r0, r3
 8005072:	f000 fd7f 	bl	8005b74 <RCCEx_PLL3_Config>
 8005076:	4603      	mov	r3, r0
 8005078:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800507a:	e009      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	75fb      	strb	r3, [r7, #23]
      break;
 8005080:	e006      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005082:	bf00      	nop
 8005084:	e004      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005086:	bf00      	nop
 8005088:	e002      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800508a:	bf00      	nop
 800508c:	e000      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800508e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005090:	7dfb      	ldrb	r3, [r7, #23]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10c      	bne.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005096:	4b05      	ldr	r3, [pc, #20]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800509a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050a4:	4901      	ldr	r1, [pc, #4]	; (80050ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	658b      	str	r3, [r1, #88]	; 0x58
 80050aa:	e003      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80050ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050b0:	7dfb      	ldrb	r3, [r7, #23]
 80050b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d04b      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050c6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80050ca:	d02e      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80050cc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80050d0:	d828      	bhi.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80050d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050d6:	d02a      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80050d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050dc:	d822      	bhi.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80050de:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80050e2:	d026      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80050e4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80050e8:	d81c      	bhi.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80050ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050ee:	d010      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80050f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050f4:	d816      	bhi.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d01d      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80050fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050fe:	d111      	bne.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	3304      	adds	r3, #4
 8005104:	2100      	movs	r1, #0
 8005106:	4618      	mov	r0, r3
 8005108:	f000 fc82 	bl	8005a10 <RCCEx_PLL2_Config>
 800510c:	4603      	mov	r3, r0
 800510e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005110:	e012      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	3324      	adds	r3, #36	; 0x24
 8005116:	2102      	movs	r1, #2
 8005118:	4618      	mov	r0, r3
 800511a:	f000 fd2b 	bl	8005b74 <RCCEx_PLL3_Config>
 800511e:	4603      	mov	r3, r0
 8005120:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005122:	e009      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	75fb      	strb	r3, [r7, #23]
      break;
 8005128:	e006      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800512a:	bf00      	nop
 800512c:	e004      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800512e:	bf00      	nop
 8005130:	e002      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005132:	bf00      	nop
 8005134:	e000      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005136:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005138:	7dfb      	ldrb	r3, [r7, #23]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10a      	bne.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800513e:	4b9d      	ldr	r3, [pc, #628]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005142:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800514c:	4999      	ldr	r1, [pc, #612]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800514e:	4313      	orrs	r3, r2
 8005150:	658b      	str	r3, [r1, #88]	; 0x58
 8005152:	e001      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005154:	7dfb      	ldrb	r3, [r7, #23]
 8005156:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0308 	and.w	r3, r3, #8
 8005160:	2b00      	cmp	r3, #0
 8005162:	d01a      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800516a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800516e:	d10a      	bne.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	3324      	adds	r3, #36	; 0x24
 8005174:	2102      	movs	r1, #2
 8005176:	4618      	mov	r0, r3
 8005178:	f000 fcfc 	bl	8005b74 <RCCEx_PLL3_Config>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d001      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005186:	4b8b      	ldr	r3, [pc, #556]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800518a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005194:	4987      	ldr	r1, [pc, #540]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005196:	4313      	orrs	r3, r2
 8005198:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0310 	and.w	r3, r3, #16
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d01a      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051b0:	d10a      	bne.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	3324      	adds	r3, #36	; 0x24
 80051b6:	2102      	movs	r1, #2
 80051b8:	4618      	mov	r0, r3
 80051ba:	f000 fcdb 	bl	8005b74 <RCCEx_PLL3_Config>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d001      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80051c8:	4b7a      	ldr	r3, [pc, #488]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80051ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051d6:	4977      	ldr	r1, [pc, #476]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d034      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80051ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051f2:	d01d      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80051f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051f8:	d817      	bhi.n	800522a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d003      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80051fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005202:	d009      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005204:	e011      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	3304      	adds	r3, #4
 800520a:	2100      	movs	r1, #0
 800520c:	4618      	mov	r0, r3
 800520e:	f000 fbff 	bl	8005a10 <RCCEx_PLL2_Config>
 8005212:	4603      	mov	r3, r0
 8005214:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005216:	e00c      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	3324      	adds	r3, #36	; 0x24
 800521c:	2102      	movs	r1, #2
 800521e:	4618      	mov	r0, r3
 8005220:	f000 fca8 	bl	8005b74 <RCCEx_PLL3_Config>
 8005224:	4603      	mov	r3, r0
 8005226:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005228:	e003      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	75fb      	strb	r3, [r7, #23]
      break;
 800522e:	e000      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8005230:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005232:	7dfb      	ldrb	r3, [r7, #23]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d10a      	bne.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005238:	4b5e      	ldr	r3, [pc, #376]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800523a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800523c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005246:	495b      	ldr	r1, [pc, #364]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005248:	4313      	orrs	r3, r2
 800524a:	658b      	str	r3, [r1, #88]	; 0x58
 800524c:	e001      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800524e:	7dfb      	ldrb	r3, [r7, #23]
 8005250:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d033      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005264:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005268:	d01c      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800526a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800526e:	d816      	bhi.n	800529e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005270:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005274:	d003      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8005276:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800527a:	d007      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800527c:	e00f      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800527e:	4b4d      	ldr	r3, [pc, #308]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005282:	4a4c      	ldr	r2, [pc, #304]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005288:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800528a:	e00c      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	3324      	adds	r3, #36	; 0x24
 8005290:	2101      	movs	r1, #1
 8005292:	4618      	mov	r0, r3
 8005294:	f000 fc6e 	bl	8005b74 <RCCEx_PLL3_Config>
 8005298:	4603      	mov	r3, r0
 800529a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800529c:	e003      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	75fb      	strb	r3, [r7, #23]
      break;
 80052a2:	e000      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80052a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052a6:	7dfb      	ldrb	r3, [r7, #23]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d10a      	bne.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052ac:	4b41      	ldr	r3, [pc, #260]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80052ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052ba:	493e      	ldr	r1, [pc, #248]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	654b      	str	r3, [r1, #84]	; 0x54
 80052c0:	e001      	b.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052c2:	7dfb      	ldrb	r3, [r7, #23]
 80052c4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d029      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d003      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80052da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052de:	d007      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80052e0:	e00f      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052e2:	4b34      	ldr	r3, [pc, #208]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80052e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e6:	4a33      	ldr	r2, [pc, #204]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80052e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80052ee:	e00b      	b.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	3304      	adds	r3, #4
 80052f4:	2102      	movs	r1, #2
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 fb8a 	bl	8005a10 <RCCEx_PLL2_Config>
 80052fc:	4603      	mov	r3, r0
 80052fe:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005300:	e002      	b.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	75fb      	strb	r3, [r7, #23]
      break;
 8005306:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005308:	7dfb      	ldrb	r3, [r7, #23]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d109      	bne.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800530e:	4b29      	ldr	r3, [pc, #164]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005312:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800531a:	4926      	ldr	r1, [pc, #152]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800531c:	4313      	orrs	r3, r2
 800531e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005320:	e001      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005322:	7dfb      	ldrb	r3, [r7, #23]
 8005324:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00a      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	3324      	adds	r3, #36	; 0x24
 8005336:	2102      	movs	r1, #2
 8005338:	4618      	mov	r0, r3
 800533a:	f000 fc1b 	bl	8005b74 <RCCEx_PLL3_Config>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d001      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d033      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005358:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800535c:	d017      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800535e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005362:	d811      	bhi.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005368:	d013      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800536a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800536e:	d80b      	bhi.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005370:	2b00      	cmp	r3, #0
 8005372:	d010      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8005374:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005378:	d106      	bne.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800537a:	4b0e      	ldr	r3, [pc, #56]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800537c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537e:	4a0d      	ldr	r2, [pc, #52]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005384:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005386:	e007      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	75fb      	strb	r3, [r7, #23]
      break;
 800538c:	e004      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800538e:	bf00      	nop
 8005390:	e002      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005392:	bf00      	nop
 8005394:	e000      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005396:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005398:	7dfb      	ldrb	r3, [r7, #23]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10c      	bne.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800539e:	4b05      	ldr	r3, [pc, #20]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80053a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053aa:	4902      	ldr	r1, [pc, #8]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	654b      	str	r3, [r1, #84]	; 0x54
 80053b0:	e004      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80053b2:	bf00      	nop
 80053b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b8:	7dfb      	ldrb	r3, [r7, #23]
 80053ba:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d008      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80053c8:	4b31      	ldr	r3, [pc, #196]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80053ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d4:	492e      	ldr	r1, [pc, #184]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d009      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80053e6:	4b2a      	ldr	r3, [pc, #168]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80053f4:	4926      	ldr	r1, [pc, #152]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d008      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005406:	4b22      	ldr	r3, [pc, #136]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800540a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005412:	491f      	ldr	r1, [pc, #124]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005414:	4313      	orrs	r3, r2
 8005416:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00d      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005424:	4b1a      	ldr	r3, [pc, #104]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	4a19      	ldr	r2, [pc, #100]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800542a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800542e:	6113      	str	r3, [r2, #16]
 8005430:	4b17      	ldr	r3, [pc, #92]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005432:	691a      	ldr	r2, [r3, #16]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800543a:	4915      	ldr	r1, [pc, #84]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800543c:	4313      	orrs	r3, r2
 800543e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	da08      	bge.n	800545a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005448:	4b11      	ldr	r3, [pc, #68]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800544a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800544c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005454:	490e      	ldr	r1, [pc, #56]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005456:	4313      	orrs	r3, r2
 8005458:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d009      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005466:	4b0a      	ldr	r3, [pc, #40]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800546a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005474:	4906      	ldr	r1, [pc, #24]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005476:	4313      	orrs	r3, r2
 8005478:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800547a:	7dbb      	ldrb	r3, [r7, #22]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d101      	bne.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8005480:	2300      	movs	r3, #0
 8005482:	e000      	b.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
}
 8005486:	4618      	mov	r0, r3
 8005488:	3718      	adds	r7, #24
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	58024400 	.word	0x58024400

08005494 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005498:	f7ff f818 	bl	80044cc <HAL_RCC_GetHCLKFreq>
 800549c:	4602      	mov	r2, r0
 800549e:	4b06      	ldr	r3, [pc, #24]	; (80054b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80054a0:	6a1b      	ldr	r3, [r3, #32]
 80054a2:	091b      	lsrs	r3, r3, #4
 80054a4:	f003 0307 	and.w	r3, r3, #7
 80054a8:	4904      	ldr	r1, [pc, #16]	; (80054bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80054aa:	5ccb      	ldrb	r3, [r1, r3]
 80054ac:	f003 031f 	and.w	r3, r3, #31
 80054b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	58024400 	.word	0x58024400
 80054bc:	0800d544 	.word	0x0800d544

080054c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b089      	sub	sp, #36	; 0x24
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80054c8:	4ba1      	ldr	r3, [pc, #644]	; (8005750 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054cc:	f003 0303 	and.w	r3, r3, #3
 80054d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80054d2:	4b9f      	ldr	r3, [pc, #636]	; (8005750 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d6:	0b1b      	lsrs	r3, r3, #12
 80054d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80054de:	4b9c      	ldr	r3, [pc, #624]	; (8005750 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e2:	091b      	lsrs	r3, r3, #4
 80054e4:	f003 0301 	and.w	r3, r3, #1
 80054e8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80054ea:	4b99      	ldr	r3, [pc, #612]	; (8005750 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ee:	08db      	lsrs	r3, r3, #3
 80054f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	fb02 f303 	mul.w	r3, r2, r3
 80054fa:	ee07 3a90 	vmov	s15, r3
 80054fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005502:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	2b00      	cmp	r3, #0
 800550a:	f000 8111 	beq.w	8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	2b02      	cmp	r3, #2
 8005512:	f000 8083 	beq.w	800561c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	2b02      	cmp	r3, #2
 800551a:	f200 80a1 	bhi.w	8005660 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d003      	beq.n	800552c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	2b01      	cmp	r3, #1
 8005528:	d056      	beq.n	80055d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800552a:	e099      	b.n	8005660 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800552c:	4b88      	ldr	r3, [pc, #544]	; (8005750 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0320 	and.w	r3, r3, #32
 8005534:	2b00      	cmp	r3, #0
 8005536:	d02d      	beq.n	8005594 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005538:	4b85      	ldr	r3, [pc, #532]	; (8005750 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	08db      	lsrs	r3, r3, #3
 800553e:	f003 0303 	and.w	r3, r3, #3
 8005542:	4a84      	ldr	r2, [pc, #528]	; (8005754 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005544:	fa22 f303 	lsr.w	r3, r2, r3
 8005548:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	ee07 3a90 	vmov	s15, r3
 8005550:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	ee07 3a90 	vmov	s15, r3
 800555a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800555e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005562:	4b7b      	ldr	r3, [pc, #492]	; (8005750 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800556a:	ee07 3a90 	vmov	s15, r3
 800556e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005572:	ed97 6a03 	vldr	s12, [r7, #12]
 8005576:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005758 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800557a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800557e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005582:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800558a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800558e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005592:	e087      	b.n	80056a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	ee07 3a90 	vmov	s15, r3
 800559a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800559e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800575c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80055a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055a6:	4b6a      	ldr	r3, [pc, #424]	; (8005750 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ae:	ee07 3a90 	vmov	s15, r3
 80055b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80055ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005758 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80055d6:	e065      	b.n	80056a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	ee07 3a90 	vmov	s15, r3
 80055de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005760 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80055e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055ea:	4b59      	ldr	r3, [pc, #356]	; (8005750 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055f2:	ee07 3a90 	vmov	s15, r3
 80055f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80055fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005758 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800560a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800560e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005616:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800561a:	e043      	b.n	80056a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	ee07 3a90 	vmov	s15, r3
 8005622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005626:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005764 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800562a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800562e:	4b48      	ldr	r3, [pc, #288]	; (8005750 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005636:	ee07 3a90 	vmov	s15, r3
 800563a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800563e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005642:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005758 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800564a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800564e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800565a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800565e:	e021      	b.n	80056a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	ee07 3a90 	vmov	s15, r3
 8005666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800566a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005760 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800566e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005672:	4b37      	ldr	r3, [pc, #220]	; (8005750 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800567a:	ee07 3a90 	vmov	s15, r3
 800567e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005682:	ed97 6a03 	vldr	s12, [r7, #12]
 8005686:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005758 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800568a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800568e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005692:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800569a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800569e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056a2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80056a4:	4b2a      	ldr	r3, [pc, #168]	; (8005750 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a8:	0a5b      	lsrs	r3, r3, #9
 80056aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056ae:	ee07 3a90 	vmov	s15, r3
 80056b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056be:	edd7 6a07 	vldr	s13, [r7, #28]
 80056c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056ca:	ee17 2a90 	vmov	r2, s15
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80056d2:	4b1f      	ldr	r3, [pc, #124]	; (8005750 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d6:	0c1b      	lsrs	r3, r3, #16
 80056d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056dc:	ee07 3a90 	vmov	s15, r3
 80056e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80056f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056f8:	ee17 2a90 	vmov	r2, s15
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005700:	4b13      	ldr	r3, [pc, #76]	; (8005750 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005704:	0e1b      	lsrs	r3, r3, #24
 8005706:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800570a:	ee07 3a90 	vmov	s15, r3
 800570e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005712:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005716:	ee37 7a87 	vadd.f32	s14, s15, s14
 800571a:	edd7 6a07 	vldr	s13, [r7, #28]
 800571e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005722:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005726:	ee17 2a90 	vmov	r2, s15
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800572e:	e008      	b.n	8005742 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	609a      	str	r2, [r3, #8]
}
 8005742:	bf00      	nop
 8005744:	3724      	adds	r7, #36	; 0x24
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	58024400 	.word	0x58024400
 8005754:	03d09000 	.word	0x03d09000
 8005758:	46000000 	.word	0x46000000
 800575c:	4c742400 	.word	0x4c742400
 8005760:	4a742400 	.word	0x4a742400
 8005764:	4af42400 	.word	0x4af42400

08005768 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005768:	b480      	push	{r7}
 800576a:	b089      	sub	sp, #36	; 0x24
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005770:	4ba1      	ldr	r3, [pc, #644]	; (80059f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005774:	f003 0303 	and.w	r3, r3, #3
 8005778:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800577a:	4b9f      	ldr	r3, [pc, #636]	; (80059f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800577c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577e:	0d1b      	lsrs	r3, r3, #20
 8005780:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005784:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005786:	4b9c      	ldr	r3, [pc, #624]	; (80059f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578a:	0a1b      	lsrs	r3, r3, #8
 800578c:	f003 0301 	and.w	r3, r3, #1
 8005790:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005792:	4b99      	ldr	r3, [pc, #612]	; (80059f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005796:	08db      	lsrs	r3, r3, #3
 8005798:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	fb02 f303 	mul.w	r3, r2, r3
 80057a2:	ee07 3a90 	vmov	s15, r3
 80057a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	f000 8111 	beq.w	80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	f000 8083 	beq.w	80058c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	2b02      	cmp	r3, #2
 80057c2:	f200 80a1 	bhi.w	8005908 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d003      	beq.n	80057d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d056      	beq.n	8005880 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80057d2:	e099      	b.n	8005908 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057d4:	4b88      	ldr	r3, [pc, #544]	; (80059f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0320 	and.w	r3, r3, #32
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d02d      	beq.n	800583c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80057e0:	4b85      	ldr	r3, [pc, #532]	; (80059f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	08db      	lsrs	r3, r3, #3
 80057e6:	f003 0303 	and.w	r3, r3, #3
 80057ea:	4a84      	ldr	r2, [pc, #528]	; (80059fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80057ec:	fa22 f303 	lsr.w	r3, r2, r3
 80057f0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	ee07 3a90 	vmov	s15, r3
 80057f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	ee07 3a90 	vmov	s15, r3
 8005802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800580a:	4b7b      	ldr	r3, [pc, #492]	; (80059f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800580c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005812:	ee07 3a90 	vmov	s15, r3
 8005816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800581a:	ed97 6a03 	vldr	s12, [r7, #12]
 800581e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005a00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800582a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800582e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005836:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800583a:	e087      	b.n	800594c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	ee07 3a90 	vmov	s15, r3
 8005842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005846:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005a04 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800584a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800584e:	4b6a      	ldr	r3, [pc, #424]	; (80059f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005856:	ee07 3a90 	vmov	s15, r3
 800585a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800585e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005862:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005a00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800586a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800586e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800587a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800587e:	e065      	b.n	800594c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	ee07 3a90 	vmov	s15, r3
 8005886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800588a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005a08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800588e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005892:	4b59      	ldr	r3, [pc, #356]	; (80059f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800589a:	ee07 3a90 	vmov	s15, r3
 800589e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80058a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005a00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80058aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058c2:	e043      	b.n	800594c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	ee07 3a90 	vmov	s15, r3
 80058ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80058d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058d6:	4b48      	ldr	r3, [pc, #288]	; (80059f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058de:	ee07 3a90 	vmov	s15, r3
 80058e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80058ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005a00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80058ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005902:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005906:	e021      	b.n	800594c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	ee07 3a90 	vmov	s15, r3
 800590e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005912:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005a08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800591a:	4b37      	ldr	r3, [pc, #220]	; (80059f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800591c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005922:	ee07 3a90 	vmov	s15, r3
 8005926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800592a:	ed97 6a03 	vldr	s12, [r7, #12]
 800592e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005a00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800593a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800593e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005946:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800594a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800594c:	4b2a      	ldr	r3, [pc, #168]	; (80059f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800594e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005950:	0a5b      	lsrs	r3, r3, #9
 8005952:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005956:	ee07 3a90 	vmov	s15, r3
 800595a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800595e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005962:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005966:	edd7 6a07 	vldr	s13, [r7, #28]
 800596a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800596e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005972:	ee17 2a90 	vmov	r2, s15
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800597a:	4b1f      	ldr	r3, [pc, #124]	; (80059f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800597c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597e:	0c1b      	lsrs	r3, r3, #16
 8005980:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005984:	ee07 3a90 	vmov	s15, r3
 8005988:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800598c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005990:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005994:	edd7 6a07 	vldr	s13, [r7, #28]
 8005998:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800599c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059a0:	ee17 2a90 	vmov	r2, s15
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80059a8:	4b13      	ldr	r3, [pc, #76]	; (80059f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ac:	0e1b      	lsrs	r3, r3, #24
 80059ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059b2:	ee07 3a90 	vmov	s15, r3
 80059b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80059c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059ce:	ee17 2a90 	vmov	r2, s15
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80059d6:	e008      	b.n	80059ea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	609a      	str	r2, [r3, #8]
}
 80059ea:	bf00      	nop
 80059ec:	3724      	adds	r7, #36	; 0x24
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	58024400 	.word	0x58024400
 80059fc:	03d09000 	.word	0x03d09000
 8005a00:	46000000 	.word	0x46000000
 8005a04:	4c742400 	.word	0x4c742400
 8005a08:	4a742400 	.word	0x4a742400
 8005a0c:	4af42400 	.word	0x4af42400

08005a10 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005a1e:	4b53      	ldr	r3, [pc, #332]	; (8005b6c <RCCEx_PLL2_Config+0x15c>)
 8005a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a22:	f003 0303 	and.w	r3, r3, #3
 8005a26:	2b03      	cmp	r3, #3
 8005a28:	d101      	bne.n	8005a2e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e099      	b.n	8005b62 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005a2e:	4b4f      	ldr	r3, [pc, #316]	; (8005b6c <RCCEx_PLL2_Config+0x15c>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a4e      	ldr	r2, [pc, #312]	; (8005b6c <RCCEx_PLL2_Config+0x15c>)
 8005a34:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a3a:	f7fc ff17 	bl	800286c <HAL_GetTick>
 8005a3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a40:	e008      	b.n	8005a54 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005a42:	f7fc ff13 	bl	800286c <HAL_GetTick>
 8005a46:	4602      	mov	r2, r0
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d901      	bls.n	8005a54 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005a50:	2303      	movs	r3, #3
 8005a52:	e086      	b.n	8005b62 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a54:	4b45      	ldr	r3, [pc, #276]	; (8005b6c <RCCEx_PLL2_Config+0x15c>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1f0      	bne.n	8005a42 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005a60:	4b42      	ldr	r3, [pc, #264]	; (8005b6c <RCCEx_PLL2_Config+0x15c>)
 8005a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a64:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	031b      	lsls	r3, r3, #12
 8005a6e:	493f      	ldr	r1, [pc, #252]	; (8005b6c <RCCEx_PLL2_Config+0x15c>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	628b      	str	r3, [r1, #40]	; 0x28
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	3b01      	subs	r3, #1
 8005a84:	025b      	lsls	r3, r3, #9
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	431a      	orrs	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	041b      	lsls	r3, r3, #16
 8005a92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a96:	431a      	orrs	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	061b      	lsls	r3, r3, #24
 8005aa0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005aa4:	4931      	ldr	r1, [pc, #196]	; (8005b6c <RCCEx_PLL2_Config+0x15c>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005aaa:	4b30      	ldr	r3, [pc, #192]	; (8005b6c <RCCEx_PLL2_Config+0x15c>)
 8005aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	492d      	ldr	r1, [pc, #180]	; (8005b6c <RCCEx_PLL2_Config+0x15c>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005abc:	4b2b      	ldr	r3, [pc, #172]	; (8005b6c <RCCEx_PLL2_Config+0x15c>)
 8005abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac0:	f023 0220 	bic.w	r2, r3, #32
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	699b      	ldr	r3, [r3, #24]
 8005ac8:	4928      	ldr	r1, [pc, #160]	; (8005b6c <RCCEx_PLL2_Config+0x15c>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005ace:	4b27      	ldr	r3, [pc, #156]	; (8005b6c <RCCEx_PLL2_Config+0x15c>)
 8005ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad2:	4a26      	ldr	r2, [pc, #152]	; (8005b6c <RCCEx_PLL2_Config+0x15c>)
 8005ad4:	f023 0310 	bic.w	r3, r3, #16
 8005ad8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005ada:	4b24      	ldr	r3, [pc, #144]	; (8005b6c <RCCEx_PLL2_Config+0x15c>)
 8005adc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ade:	4b24      	ldr	r3, [pc, #144]	; (8005b70 <RCCEx_PLL2_Config+0x160>)
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	69d2      	ldr	r2, [r2, #28]
 8005ae6:	00d2      	lsls	r2, r2, #3
 8005ae8:	4920      	ldr	r1, [pc, #128]	; (8005b6c <RCCEx_PLL2_Config+0x15c>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005aee:	4b1f      	ldr	r3, [pc, #124]	; (8005b6c <RCCEx_PLL2_Config+0x15c>)
 8005af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af2:	4a1e      	ldr	r2, [pc, #120]	; (8005b6c <RCCEx_PLL2_Config+0x15c>)
 8005af4:	f043 0310 	orr.w	r3, r3, #16
 8005af8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d106      	bne.n	8005b0e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005b00:	4b1a      	ldr	r3, [pc, #104]	; (8005b6c <RCCEx_PLL2_Config+0x15c>)
 8005b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b04:	4a19      	ldr	r2, [pc, #100]	; (8005b6c <RCCEx_PLL2_Config+0x15c>)
 8005b06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b0c:	e00f      	b.n	8005b2e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d106      	bne.n	8005b22 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005b14:	4b15      	ldr	r3, [pc, #84]	; (8005b6c <RCCEx_PLL2_Config+0x15c>)
 8005b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b18:	4a14      	ldr	r2, [pc, #80]	; (8005b6c <RCCEx_PLL2_Config+0x15c>)
 8005b1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b20:	e005      	b.n	8005b2e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005b22:	4b12      	ldr	r3, [pc, #72]	; (8005b6c <RCCEx_PLL2_Config+0x15c>)
 8005b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b26:	4a11      	ldr	r2, [pc, #68]	; (8005b6c <RCCEx_PLL2_Config+0x15c>)
 8005b28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b2c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005b2e:	4b0f      	ldr	r3, [pc, #60]	; (8005b6c <RCCEx_PLL2_Config+0x15c>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a0e      	ldr	r2, [pc, #56]	; (8005b6c <RCCEx_PLL2_Config+0x15c>)
 8005b34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b3a:	f7fc fe97 	bl	800286c <HAL_GetTick>
 8005b3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b40:	e008      	b.n	8005b54 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005b42:	f7fc fe93 	bl	800286c <HAL_GetTick>
 8005b46:	4602      	mov	r2, r0
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d901      	bls.n	8005b54 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e006      	b.n	8005b62 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b54:	4b05      	ldr	r3, [pc, #20]	; (8005b6c <RCCEx_PLL2_Config+0x15c>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d0f0      	beq.n	8005b42 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	58024400 	.word	0x58024400
 8005b70:	ffff0007 	.word	0xffff0007

08005b74 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005b82:	4b53      	ldr	r3, [pc, #332]	; (8005cd0 <RCCEx_PLL3_Config+0x15c>)
 8005b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b86:	f003 0303 	and.w	r3, r3, #3
 8005b8a:	2b03      	cmp	r3, #3
 8005b8c:	d101      	bne.n	8005b92 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e099      	b.n	8005cc6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005b92:	4b4f      	ldr	r3, [pc, #316]	; (8005cd0 <RCCEx_PLL3_Config+0x15c>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a4e      	ldr	r2, [pc, #312]	; (8005cd0 <RCCEx_PLL3_Config+0x15c>)
 8005b98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b9e:	f7fc fe65 	bl	800286c <HAL_GetTick>
 8005ba2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005ba4:	e008      	b.n	8005bb8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005ba6:	f7fc fe61 	bl	800286c <HAL_GetTick>
 8005baa:	4602      	mov	r2, r0
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d901      	bls.n	8005bb8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e086      	b.n	8005cc6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005bb8:	4b45      	ldr	r3, [pc, #276]	; (8005cd0 <RCCEx_PLL3_Config+0x15c>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1f0      	bne.n	8005ba6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005bc4:	4b42      	ldr	r3, [pc, #264]	; (8005cd0 <RCCEx_PLL3_Config+0x15c>)
 8005bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	051b      	lsls	r3, r3, #20
 8005bd2:	493f      	ldr	r1, [pc, #252]	; (8005cd0 <RCCEx_PLL3_Config+0x15c>)
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	628b      	str	r3, [r1, #40]	; 0x28
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	3b01      	subs	r3, #1
 8005be8:	025b      	lsls	r3, r3, #9
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	431a      	orrs	r2, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	041b      	lsls	r3, r3, #16
 8005bf6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	3b01      	subs	r3, #1
 8005c02:	061b      	lsls	r3, r3, #24
 8005c04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005c08:	4931      	ldr	r1, [pc, #196]	; (8005cd0 <RCCEx_PLL3_Config+0x15c>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005c0e:	4b30      	ldr	r3, [pc, #192]	; (8005cd0 <RCCEx_PLL3_Config+0x15c>)
 8005c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c12:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	492d      	ldr	r1, [pc, #180]	; (8005cd0 <RCCEx_PLL3_Config+0x15c>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005c20:	4b2b      	ldr	r3, [pc, #172]	; (8005cd0 <RCCEx_PLL3_Config+0x15c>)
 8005c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c24:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	699b      	ldr	r3, [r3, #24]
 8005c2c:	4928      	ldr	r1, [pc, #160]	; (8005cd0 <RCCEx_PLL3_Config+0x15c>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005c32:	4b27      	ldr	r3, [pc, #156]	; (8005cd0 <RCCEx_PLL3_Config+0x15c>)
 8005c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c36:	4a26      	ldr	r2, [pc, #152]	; (8005cd0 <RCCEx_PLL3_Config+0x15c>)
 8005c38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005c3e:	4b24      	ldr	r3, [pc, #144]	; (8005cd0 <RCCEx_PLL3_Config+0x15c>)
 8005c40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c42:	4b24      	ldr	r3, [pc, #144]	; (8005cd4 <RCCEx_PLL3_Config+0x160>)
 8005c44:	4013      	ands	r3, r2
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	69d2      	ldr	r2, [r2, #28]
 8005c4a:	00d2      	lsls	r2, r2, #3
 8005c4c:	4920      	ldr	r1, [pc, #128]	; (8005cd0 <RCCEx_PLL3_Config+0x15c>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005c52:	4b1f      	ldr	r3, [pc, #124]	; (8005cd0 <RCCEx_PLL3_Config+0x15c>)
 8005c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c56:	4a1e      	ldr	r2, [pc, #120]	; (8005cd0 <RCCEx_PLL3_Config+0x15c>)
 8005c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d106      	bne.n	8005c72 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005c64:	4b1a      	ldr	r3, [pc, #104]	; (8005cd0 <RCCEx_PLL3_Config+0x15c>)
 8005c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c68:	4a19      	ldr	r2, [pc, #100]	; (8005cd0 <RCCEx_PLL3_Config+0x15c>)
 8005c6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005c6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005c70:	e00f      	b.n	8005c92 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d106      	bne.n	8005c86 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005c78:	4b15      	ldr	r3, [pc, #84]	; (8005cd0 <RCCEx_PLL3_Config+0x15c>)
 8005c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7c:	4a14      	ldr	r2, [pc, #80]	; (8005cd0 <RCCEx_PLL3_Config+0x15c>)
 8005c7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005c82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005c84:	e005      	b.n	8005c92 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005c86:	4b12      	ldr	r3, [pc, #72]	; (8005cd0 <RCCEx_PLL3_Config+0x15c>)
 8005c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8a:	4a11      	ldr	r2, [pc, #68]	; (8005cd0 <RCCEx_PLL3_Config+0x15c>)
 8005c8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c90:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005c92:	4b0f      	ldr	r3, [pc, #60]	; (8005cd0 <RCCEx_PLL3_Config+0x15c>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a0e      	ldr	r2, [pc, #56]	; (8005cd0 <RCCEx_PLL3_Config+0x15c>)
 8005c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c9e:	f7fc fde5 	bl	800286c <HAL_GetTick>
 8005ca2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ca4:	e008      	b.n	8005cb8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005ca6:	f7fc fde1 	bl	800286c <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d901      	bls.n	8005cb8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e006      	b.n	8005cc6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005cb8:	4b05      	ldr	r3, [pc, #20]	; (8005cd0 <RCCEx_PLL3_Config+0x15c>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d0f0      	beq.n	8005ca6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	58024400 	.word	0x58024400
 8005cd4:	ffff0007 	.word	0xffff0007

08005cd8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d101      	bne.n	8005cea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e0f1      	b.n	8005ece <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a78      	ldr	r2, [pc, #480]	; (8005ed8 <HAL_SPI_Init+0x200>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d00f      	beq.n	8005d1a <HAL_SPI_Init+0x42>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a77      	ldr	r2, [pc, #476]	; (8005edc <HAL_SPI_Init+0x204>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d00a      	beq.n	8005d1a <HAL_SPI_Init+0x42>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a75      	ldr	r2, [pc, #468]	; (8005ee0 <HAL_SPI_Init+0x208>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d005      	beq.n	8005d1a <HAL_SPI_Init+0x42>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	2b0f      	cmp	r3, #15
 8005d14:	d901      	bls.n	8005d1a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e0d9      	b.n	8005ece <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 ff66 	bl	8006bec <SPI_GetPacketSize>
 8005d20:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a6c      	ldr	r2, [pc, #432]	; (8005ed8 <HAL_SPI_Init+0x200>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d00c      	beq.n	8005d46 <HAL_SPI_Init+0x6e>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a6a      	ldr	r2, [pc, #424]	; (8005edc <HAL_SPI_Init+0x204>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d007      	beq.n	8005d46 <HAL_SPI_Init+0x6e>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a69      	ldr	r2, [pc, #420]	; (8005ee0 <HAL_SPI_Init+0x208>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d002      	beq.n	8005d46 <HAL_SPI_Init+0x6e>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2b08      	cmp	r3, #8
 8005d44:	d811      	bhi.n	8005d6a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005d4a:	4a63      	ldr	r2, [pc, #396]	; (8005ed8 <HAL_SPI_Init+0x200>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d009      	beq.n	8005d64 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a61      	ldr	r2, [pc, #388]	; (8005edc <HAL_SPI_Init+0x204>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d004      	beq.n	8005d64 <HAL_SPI_Init+0x8c>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a60      	ldr	r2, [pc, #384]	; (8005ee0 <HAL_SPI_Init+0x208>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d104      	bne.n	8005d6e <HAL_SPI_Init+0x96>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2b10      	cmp	r3, #16
 8005d68:	d901      	bls.n	8005d6e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e0af      	b.n	8005ece <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d106      	bne.n	8005d88 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f7fc fa60 	bl	8002248 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2202      	movs	r2, #2
 8005d8c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 0201 	bic.w	r2, r2, #1
 8005d9e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8005daa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005db4:	d119      	bne.n	8005dea <HAL_SPI_Init+0x112>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dbe:	d103      	bne.n	8005dc8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d008      	beq.n	8005dda <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10c      	bne.n	8005dea <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005dd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dd8:	d107      	bne.n	8005dea <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005de8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	69da      	ldr	r2, [r3, #28]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df2:	431a      	orrs	r2, r3
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	431a      	orrs	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dfc:	ea42 0103 	orr.w	r1, r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	68da      	ldr	r2, [r3, #12]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	430a      	orrs	r2, r1
 8005e0a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e14:	431a      	orrs	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1a:	431a      	orrs	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	699b      	ldr	r3, [r3, #24]
 8005e20:	431a      	orrs	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	431a      	orrs	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	695b      	ldr	r3, [r3, #20]
 8005e2c:	431a      	orrs	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	431a      	orrs	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	431a      	orrs	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e3e:	431a      	orrs	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	431a      	orrs	r2, r3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e4a:	ea42 0103 	orr.w	r1, r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	430a      	orrs	r2, r1
 8005e58:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d113      	bne.n	8005e8a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e74:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e88:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f022 0201 	bic.w	r2, r2, #1
 8005e98:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00a      	beq.n	8005ebc <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	40013000 	.word	0x40013000
 8005edc:	40003800 	.word	0x40003800
 8005ee0:	40003c00 	.word	0x40003c00

08005ee4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b08a      	sub	sp, #40	; 0x28
 8005ee8:	af02      	add	r7, sp, #8
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	603b      	str	r3, [r7, #0]
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	3320      	adds	r3, #32
 8005efa:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005efc:	2300      	movs	r3, #0
 8005efe:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d101      	bne.n	8005f0e <HAL_SPI_Transmit+0x2a>
 8005f0a:	2302      	movs	r3, #2
 8005f0c:	e1d7      	b.n	80062be <HAL_SPI_Transmit+0x3da>
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f16:	f7fc fca9 	bl	800286c <HAL_GetTick>
 8005f1a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d007      	beq.n	8005f38 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8005f28:	2302      	movs	r3, #2
 8005f2a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005f34:	7efb      	ldrb	r3, [r7, #27]
 8005f36:	e1c2      	b.n	80062be <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d002      	beq.n	8005f44 <HAL_SPI_Transmit+0x60>
 8005f3e:	88fb      	ldrh	r3, [r7, #6]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d107      	bne.n	8005f54 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005f50:	7efb      	ldrb	r3, [r7, #27]
 8005f52:	e1b4      	b.n	80062be <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2203      	movs	r2, #3
 8005f58:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	68ba      	ldr	r2, [r7, #8]
 8005f68:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	88fa      	ldrh	r2, [r7, #6]
 8005f6e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	88fa      	ldrh	r2, [r7, #6]
 8005f76:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005fa4:	d107      	bne.n	8005fb6 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	685a      	ldr	r2, [r3, #4]
 8005fbc:	4b96      	ldr	r3, [pc, #600]	; (8006218 <HAL_SPI_Transmit+0x334>)
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	88f9      	ldrh	r1, [r7, #6]
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	6812      	ldr	r2, [r2, #0]
 8005fc6:	430b      	orrs	r3, r1
 8005fc8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f042 0201 	orr.w	r2, r2, #1
 8005fd8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fe2:	d107      	bne.n	8005ff4 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ff2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	2b0f      	cmp	r3, #15
 8005ffa:	d947      	bls.n	800608c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005ffc:	e03f      	b.n	800607e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	695b      	ldr	r3, [r3, #20]
 8006004:	f003 0302 	and.w	r3, r3, #2
 8006008:	2b02      	cmp	r3, #2
 800600a:	d114      	bne.n	8006036 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	6812      	ldr	r2, [r2, #0]
 8006016:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800601c:	1d1a      	adds	r2, r3, #4
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006028:	b29b      	uxth	r3, r3
 800602a:	3b01      	subs	r3, #1
 800602c:	b29a      	uxth	r2, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006034:	e023      	b.n	800607e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006036:	f7fc fc19 	bl	800286c <HAL_GetTick>
 800603a:	4602      	mov	r2, r0
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	429a      	cmp	r2, r3
 8006044:	d803      	bhi.n	800604e <HAL_SPI_Transmit+0x16a>
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800604c:	d102      	bne.n	8006054 <HAL_SPI_Transmit+0x170>
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d114      	bne.n	800607e <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	f000 fcfb 	bl	8006a50 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006068:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800607a:	2303      	movs	r3, #3
 800607c:	e11f      	b.n	80062be <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006084:	b29b      	uxth	r3, r3
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1b9      	bne.n	8005ffe <HAL_SPI_Transmit+0x11a>
 800608a:	e0f2      	b.n	8006272 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	2b07      	cmp	r3, #7
 8006092:	f240 80e7 	bls.w	8006264 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006096:	e05d      	b.n	8006154 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	f003 0302 	and.w	r3, r3, #2
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d132      	bne.n	800610c <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d918      	bls.n	80060e4 <HAL_SPI_Transmit+0x200>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d014      	beq.n	80060e4 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	6812      	ldr	r2, [r2, #0]
 80060c4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060ca:	1d1a      	adds	r2, r3, #4
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	3b02      	subs	r3, #2
 80060da:	b29a      	uxth	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80060e2:	e037      	b.n	8006154 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060e8:	881a      	ldrh	r2, [r3, #0]
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060f2:	1c9a      	adds	r2, r3, #2
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80060fe:	b29b      	uxth	r3, r3
 8006100:	3b01      	subs	r3, #1
 8006102:	b29a      	uxth	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800610a:	e023      	b.n	8006154 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800610c:	f7fc fbae 	bl	800286c <HAL_GetTick>
 8006110:	4602      	mov	r2, r0
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	683a      	ldr	r2, [r7, #0]
 8006118:	429a      	cmp	r2, r3
 800611a:	d803      	bhi.n	8006124 <HAL_SPI_Transmit+0x240>
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006122:	d102      	bne.n	800612a <HAL_SPI_Transmit+0x246>
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d114      	bne.n	8006154 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f000 fc90 	bl	8006a50 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800613e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	e0b4      	b.n	80062be <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800615a:	b29b      	uxth	r3, r3
 800615c:	2b00      	cmp	r3, #0
 800615e:	d19b      	bne.n	8006098 <HAL_SPI_Transmit+0x1b4>
 8006160:	e087      	b.n	8006272 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	f003 0302 	and.w	r3, r3, #2
 800616c:	2b02      	cmp	r3, #2
 800616e:	d155      	bne.n	800621c <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006176:	b29b      	uxth	r3, r3
 8006178:	2b03      	cmp	r3, #3
 800617a:	d918      	bls.n	80061ae <HAL_SPI_Transmit+0x2ca>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006180:	2b40      	cmp	r3, #64	; 0x40
 8006182:	d914      	bls.n	80061ae <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	6812      	ldr	r2, [r2, #0]
 800618e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006194:	1d1a      	adds	r2, r3, #4
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	3b04      	subs	r3, #4
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80061ac:	e05a      	b.n	8006264 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d917      	bls.n	80061ea <HAL_SPI_Transmit+0x306>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d013      	beq.n	80061ea <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061c6:	881a      	ldrh	r2, [r3, #0]
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061d0:	1c9a      	adds	r2, r3, #2
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80061dc:	b29b      	uxth	r3, r3
 80061de:	3b02      	subs	r3, #2
 80061e0:	b29a      	uxth	r2, r3
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80061e8:	e03c      	b.n	8006264 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	3320      	adds	r3, #32
 80061f4:	7812      	ldrb	r2, [r2, #0]
 80061f6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061fc:	1c5a      	adds	r2, r3, #1
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006208:	b29b      	uxth	r3, r3
 800620a:	3b01      	subs	r3, #1
 800620c:	b29a      	uxth	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006214:	e026      	b.n	8006264 <HAL_SPI_Transmit+0x380>
 8006216:	bf00      	nop
 8006218:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800621c:	f7fc fb26 	bl	800286c <HAL_GetTick>
 8006220:	4602      	mov	r2, r0
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	683a      	ldr	r2, [r7, #0]
 8006228:	429a      	cmp	r2, r3
 800622a:	d803      	bhi.n	8006234 <HAL_SPI_Transmit+0x350>
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006232:	d102      	bne.n	800623a <HAL_SPI_Transmit+0x356>
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d114      	bne.n	8006264 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	f000 fc08 	bl	8006a50 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800624e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006260:	2303      	movs	r3, #3
 8006262:	e02c      	b.n	80062be <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800626a:	b29b      	uxth	r3, r3
 800626c:	2b00      	cmp	r3, #0
 800626e:	f47f af78 	bne.w	8006162 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	2200      	movs	r2, #0
 800627a:	2108      	movs	r1, #8
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f000 fc87 	bl	8006b90 <SPI_WaitOnFlagUntilTimeout>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d007      	beq.n	8006298 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800628e:	f043 0220 	orr.w	r2, r3, #32
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f000 fbd9 	bl	8006a50 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2201      	movs	r2, #1
 80062aa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d001      	beq.n	80062bc <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e000      	b.n	80062be <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 80062bc:	7efb      	ldrb	r3, [r7, #27]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3720      	adds	r7, #32
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop

080062c8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b08a      	sub	sp, #40	; 0x28
 80062cc:	af02      	add	r7, sp, #8
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	603b      	str	r3, [r7, #0]
 80062d4:	4613      	mov	r3, r2
 80062d6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80062d8:	2300      	movs	r3, #0
 80062da:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	3330      	adds	r3, #48	; 0x30
 80062e2:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062ec:	d112      	bne.n	8006314 <HAL_SPI_Receive+0x4c>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10e      	bne.n	8006314 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2204      	movs	r2, #4
 80062fa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80062fe:	88fa      	ldrh	r2, [r7, #6]
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	9300      	str	r3, [sp, #0]
 8006304:	4613      	mov	r3, r2
 8006306:	68ba      	ldr	r2, [r7, #8]
 8006308:	68b9      	ldr	r1, [r7, #8]
 800630a:	68f8      	ldr	r0, [r7, #12]
 800630c:	f000 f978 	bl	8006600 <HAL_SPI_TransmitReceive>
 8006310:	4603      	mov	r3, r0
 8006312:	e16f      	b.n	80065f4 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800631a:	2b01      	cmp	r3, #1
 800631c:	d101      	bne.n	8006322 <HAL_SPI_Receive+0x5a>
 800631e:	2302      	movs	r3, #2
 8006320:	e168      	b.n	80065f4 <HAL_SPI_Receive+0x32c>
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2201      	movs	r2, #1
 8006326:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800632a:	f7fc fa9f 	bl	800286c <HAL_GetTick>
 800632e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006336:	b2db      	uxtb	r3, r3
 8006338:	2b01      	cmp	r3, #1
 800633a:	d007      	beq.n	800634c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800633c:	2302      	movs	r3, #2
 800633e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006348:	7ffb      	ldrb	r3, [r7, #31]
 800634a:	e153      	b.n	80065f4 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d002      	beq.n	8006358 <HAL_SPI_Receive+0x90>
 8006352:	88fb      	ldrh	r3, [r7, #6]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d107      	bne.n	8006368 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2200      	movs	r2, #0
 8006360:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006364:	7ffb      	ldrb	r3, [r7, #31]
 8006366:	e145      	b.n	80065f4 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2204      	movs	r2, #4
 800636c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2200      	movs	r2, #0
 8006374:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	68ba      	ldr	r2, [r7, #8]
 800637c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	88fa      	ldrh	r2, [r7, #6]
 8006382:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	88fa      	ldrh	r2, [r7, #6]
 800638a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2200      	movs	r2, #0
 80063ae:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80063b8:	d107      	bne.n	80063ca <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	685a      	ldr	r2, [r3, #4]
 80063d0:	4b8a      	ldr	r3, [pc, #552]	; (80065fc <HAL_SPI_Receive+0x334>)
 80063d2:	4013      	ands	r3, r2
 80063d4:	88f9      	ldrh	r1, [r7, #6]
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	6812      	ldr	r2, [r2, #0]
 80063da:	430b      	orrs	r3, r1
 80063dc:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f042 0201 	orr.w	r2, r2, #1
 80063ec:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063f6:	d107      	bne.n	8006408 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006406:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	2b0f      	cmp	r3, #15
 800640e:	d948      	bls.n	80064a2 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006410:	e040      	b.n	8006494 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	695a      	ldr	r2, [r3, #20]
 8006418:	f248 0308 	movw	r3, #32776	; 0x8008
 800641c:	4013      	ands	r3, r2
 800641e:	2b00      	cmp	r3, #0
 8006420:	d014      	beq.n	800644c <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800642a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800642c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006432:	1d1a      	adds	r2, r3, #4
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800643e:	b29b      	uxth	r3, r3
 8006440:	3b01      	subs	r3, #1
 8006442:	b29a      	uxth	r2, r3
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800644a:	e023      	b.n	8006494 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800644c:	f7fc fa0e 	bl	800286c <HAL_GetTick>
 8006450:	4602      	mov	r2, r0
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	683a      	ldr	r2, [r7, #0]
 8006458:	429a      	cmp	r2, r3
 800645a:	d803      	bhi.n	8006464 <HAL_SPI_Receive+0x19c>
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006462:	d102      	bne.n	800646a <HAL_SPI_Receive+0x1a2>
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d114      	bne.n	8006494 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f000 faf0 	bl	8006a50 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800647e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006490:	2303      	movs	r3, #3
 8006492:	e0af      	b.n	80065f4 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800649a:	b29b      	uxth	r3, r3
 800649c:	2b00      	cmp	r3, #0
 800649e:	d1b8      	bne.n	8006412 <HAL_SPI_Receive+0x14a>
 80064a0:	e095      	b.n	80065ce <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	2b07      	cmp	r3, #7
 80064a8:	f240 808b 	bls.w	80065c2 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80064ac:	e03f      	b.n	800652e <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	695b      	ldr	r3, [r3, #20]
 80064b4:	f003 0301 	and.w	r3, r3, #1
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d114      	bne.n	80064e6 <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064c0:	69ba      	ldr	r2, [r7, #24]
 80064c2:	8812      	ldrh	r2, [r2, #0]
 80064c4:	b292      	uxth	r2, r2
 80064c6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064cc:	1c9a      	adds	r2, r3, #2
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80064d8:	b29b      	uxth	r3, r3
 80064da:	3b01      	subs	r3, #1
 80064dc:	b29a      	uxth	r2, r3
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80064e4:	e023      	b.n	800652e <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064e6:	f7fc f9c1 	bl	800286c <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	683a      	ldr	r2, [r7, #0]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d803      	bhi.n	80064fe <HAL_SPI_Receive+0x236>
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064fc:	d102      	bne.n	8006504 <HAL_SPI_Receive+0x23c>
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d114      	bne.n	800652e <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006504:	68f8      	ldr	r0, [r7, #12]
 8006506:	f000 faa3 	bl	8006a50 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006518:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2201      	movs	r2, #1
 8006526:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e062      	b.n	80065f4 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006534:	b29b      	uxth	r3, r3
 8006536:	2b00      	cmp	r3, #0
 8006538:	d1b9      	bne.n	80064ae <HAL_SPI_Receive+0x1e6>
 800653a:	e048      	b.n	80065ce <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	2b01      	cmp	r3, #1
 8006548:	d117      	bne.n	800657a <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006556:	7812      	ldrb	r2, [r2, #0]
 8006558:	b2d2      	uxtb	r2, r2
 800655a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006560:	1c5a      	adds	r2, r3, #1
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800656c:	b29b      	uxth	r3, r3
 800656e:	3b01      	subs	r3, #1
 8006570:	b29a      	uxth	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006578:	e023      	b.n	80065c2 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800657a:	f7fc f977 	bl	800286c <HAL_GetTick>
 800657e:	4602      	mov	r2, r0
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	683a      	ldr	r2, [r7, #0]
 8006586:	429a      	cmp	r2, r3
 8006588:	d803      	bhi.n	8006592 <HAL_SPI_Receive+0x2ca>
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006590:	d102      	bne.n	8006598 <HAL_SPI_Receive+0x2d0>
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d114      	bne.n	80065c2 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006598:	68f8      	ldr	r0, [r7, #12]
 800659a:	f000 fa59 	bl	8006a50 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2201      	movs	r2, #1
 80065ba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e018      	b.n	80065f4 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1b6      	bne.n	800653c <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f000 fa3e 	bl	8006a50 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d001      	beq.n	80065f2 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e000      	b.n	80065f4 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 80065f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3720      	adds	r7, #32
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	ffff0000 	.word	0xffff0000

08006600 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b08e      	sub	sp, #56	; 0x38
 8006604:	af02      	add	r7, sp, #8
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
 800660c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800660e:	2300      	movs	r3, #0
 8006610:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	3320      	adds	r3, #32
 800661a:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	3330      	adds	r3, #48	; 0x30
 8006622:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800662a:	2b01      	cmp	r3, #1
 800662c:	d101      	bne.n	8006632 <HAL_SPI_TransmitReceive+0x32>
 800662e:	2302      	movs	r3, #2
 8006630:	e209      	b.n	8006a46 <HAL_SPI_TransmitReceive+0x446>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2201      	movs	r2, #1
 8006636:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800663a:	f7fc f917 	bl	800286c <HAL_GetTick>
 800663e:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8006640:	887b      	ldrh	r3, [r7, #2]
 8006642:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8006644:	887b      	ldrh	r3, [r7, #2]
 8006646:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800664e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006656:	7efb      	ldrb	r3, [r7, #27]
 8006658:	2b01      	cmp	r3, #1
 800665a:	d014      	beq.n	8006686 <HAL_SPI_TransmitReceive+0x86>
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006662:	d106      	bne.n	8006672 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8006668:	2b00      	cmp	r3, #0
 800666a:	d102      	bne.n	8006672 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800666c:	7efb      	ldrb	r3, [r7, #27]
 800666e:	2b04      	cmp	r3, #4
 8006670:	d009      	beq.n	8006686 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8006672:	2302      	movs	r3, #2
 8006674:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006680:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006684:	e1df      	b.n	8006a46 <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d005      	beq.n	8006698 <HAL_SPI_TransmitReceive+0x98>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d002      	beq.n	8006698 <HAL_SPI_TransmitReceive+0x98>
 8006692:	887b      	ldrh	r3, [r7, #2]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d109      	bne.n	80066ac <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80066a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80066aa:	e1cc      	b.n	8006a46 <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	2b04      	cmp	r3, #4
 80066b6:	d003      	beq.n	80066c0 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2205      	movs	r2, #5
 80066bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	887a      	ldrh	r2, [r7, #2]
 80066d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	887a      	ldrh	r2, [r7, #2]
 80066da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	68ba      	ldr	r2, [r7, #8]
 80066e2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	887a      	ldrh	r2, [r7, #2]
 80066e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	887a      	ldrh	r2, [r7, #2]
 80066f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2200      	movs	r2, #0
 80066f8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	685a      	ldr	r2, [r3, #4]
 8006706:	4b82      	ldr	r3, [pc, #520]	; (8006910 <HAL_SPI_TransmitReceive+0x310>)
 8006708:	4013      	ands	r3, r2
 800670a:	8879      	ldrh	r1, [r7, #2]
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	6812      	ldr	r2, [r2, #0]
 8006710:	430b      	orrs	r3, r1
 8006712:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f042 0201 	orr.w	r2, r2, #1
 8006722:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800672c:	d107      	bne.n	800673e <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800673c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	2b0f      	cmp	r3, #15
 8006744:	d970      	bls.n	8006828 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006746:	e068      	b.n	800681a <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	f003 0302 	and.w	r3, r3, #2
 8006752:	2b02      	cmp	r3, #2
 8006754:	d11a      	bne.n	800678c <HAL_SPI_TransmitReceive+0x18c>
 8006756:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006758:	2b00      	cmp	r3, #0
 800675a:	d017      	beq.n	800678c <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	6812      	ldr	r2, [r2, #0]
 8006766:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800676c:	1d1a      	adds	r2, r3, #4
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006778:	b29b      	uxth	r3, r3
 800677a:	3b01      	subs	r3, #1
 800677c:	b29a      	uxth	r2, r3
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800678a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	695a      	ldr	r2, [r3, #20]
 8006792:	f248 0308 	movw	r3, #32776	; 0x8008
 8006796:	4013      	ands	r3, r2
 8006798:	2b00      	cmp	r3, #0
 800679a:	d01a      	beq.n	80067d2 <HAL_SPI_TransmitReceive+0x1d2>
 800679c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d017      	beq.n	80067d2 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067aa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80067ac:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067b2:	1d1a      	adds	r2, r3, #4
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80067be:	b29b      	uxth	r3, r3
 80067c0:	3b01      	subs	r3, #1
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80067d0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067d2:	f7fc f84b 	bl	800286c <HAL_GetTick>
 80067d6:	4602      	mov	r2, r0
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	1ad3      	subs	r3, r2, r3
 80067dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067de:	429a      	cmp	r2, r3
 80067e0:	d803      	bhi.n	80067ea <HAL_SPI_TransmitReceive+0x1ea>
 80067e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e8:	d102      	bne.n	80067f0 <HAL_SPI_TransmitReceive+0x1f0>
 80067ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d114      	bne.n	800681a <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f000 f92d 	bl	8006a50 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006804:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e115      	b.n	8006a46 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800681a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800681c:	2b00      	cmp	r3, #0
 800681e:	d193      	bne.n	8006748 <HAL_SPI_TransmitReceive+0x148>
 8006820:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006822:	2b00      	cmp	r3, #0
 8006824:	d190      	bne.n	8006748 <HAL_SPI_TransmitReceive+0x148>
 8006826:	e0e7      	b.n	80069f8 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	2b07      	cmp	r3, #7
 800682e:	f240 80dd 	bls.w	80069ec <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006832:	e066      	b.n	8006902 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	695b      	ldr	r3, [r3, #20]
 800683a:	f003 0302 	and.w	r3, r3, #2
 800683e:	2b02      	cmp	r3, #2
 8006840:	d119      	bne.n	8006876 <HAL_SPI_TransmitReceive+0x276>
 8006842:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006844:	2b00      	cmp	r3, #0
 8006846:	d016      	beq.n	8006876 <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800684c:	881a      	ldrh	r2, [r3, #0]
 800684e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006850:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006856:	1c9a      	adds	r2, r3, #2
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006862:	b29b      	uxth	r3, r3
 8006864:	3b01      	subs	r3, #1
 8006866:	b29a      	uxth	r2, r3
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006874:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	695b      	ldr	r3, [r3, #20]
 800687c:	f003 0301 	and.w	r3, r3, #1
 8006880:	2b01      	cmp	r3, #1
 8006882:	d11a      	bne.n	80068ba <HAL_SPI_TransmitReceive+0x2ba>
 8006884:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006886:	2b00      	cmp	r3, #0
 8006888:	d017      	beq.n	80068ba <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800688e:	6a3a      	ldr	r2, [r7, #32]
 8006890:	8812      	ldrh	r2, [r2, #0]
 8006892:	b292      	uxth	r2, r2
 8006894:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800689a:	1c9a      	adds	r2, r3, #2
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	3b01      	subs	r3, #1
 80068aa:	b29a      	uxth	r2, r3
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80068b8:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068ba:	f7fb ffd7 	bl	800286c <HAL_GetTick>
 80068be:	4602      	mov	r2, r0
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d803      	bhi.n	80068d2 <HAL_SPI_TransmitReceive+0x2d2>
 80068ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d0:	d102      	bne.n	80068d8 <HAL_SPI_TransmitReceive+0x2d8>
 80068d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d114      	bne.n	8006902 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80068d8:	68f8      	ldr	r0, [r7, #12]
 80068da:	f000 f8b9 	bl	8006a50 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2201      	movs	r2, #1
 80068fa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80068fe:	2303      	movs	r3, #3
 8006900:	e0a1      	b.n	8006a46 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006902:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006904:	2b00      	cmp	r3, #0
 8006906:	d195      	bne.n	8006834 <HAL_SPI_TransmitReceive+0x234>
 8006908:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800690a:	2b00      	cmp	r3, #0
 800690c:	d192      	bne.n	8006834 <HAL_SPI_TransmitReceive+0x234>
 800690e:	e073      	b.n	80069f8 <HAL_SPI_TransmitReceive+0x3f8>
 8006910:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	695b      	ldr	r3, [r3, #20]
 800691a:	f003 0302 	and.w	r3, r3, #2
 800691e:	2b02      	cmp	r3, #2
 8006920:	d11b      	bne.n	800695a <HAL_SPI_TransmitReceive+0x35a>
 8006922:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006924:	2b00      	cmp	r3, #0
 8006926:	d018      	beq.n	800695a <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	3320      	adds	r3, #32
 8006932:	7812      	ldrb	r2, [r2, #0]
 8006934:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800693a:	1c5a      	adds	r2, r3, #1
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006946:	b29b      	uxth	r3, r3
 8006948:	3b01      	subs	r3, #1
 800694a:	b29a      	uxth	r2, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006958:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	695b      	ldr	r3, [r3, #20]
 8006960:	f003 0301 	and.w	r3, r3, #1
 8006964:	2b01      	cmp	r3, #1
 8006966:	d11d      	bne.n	80069a4 <HAL_SPI_TransmitReceive+0x3a4>
 8006968:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800696a:	2b00      	cmp	r3, #0
 800696c:	d01a      	beq.n	80069a4 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800697a:	7812      	ldrb	r2, [r2, #0]
 800697c:	b2d2      	uxtb	r2, r2
 800697e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006984:	1c5a      	adds	r2, r3, #1
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006990:	b29b      	uxth	r3, r3
 8006992:	3b01      	subs	r3, #1
 8006994:	b29a      	uxth	r2, r3
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80069a2:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069a4:	f7fb ff62 	bl	800286c <HAL_GetTick>
 80069a8:	4602      	mov	r2, r0
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d803      	bhi.n	80069bc <HAL_SPI_TransmitReceive+0x3bc>
 80069b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ba:	d102      	bne.n	80069c2 <HAL_SPI_TransmitReceive+0x3c2>
 80069bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d114      	bne.n	80069ec <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	f000 f844 	bl	8006a50 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80069e8:	2303      	movs	r3, #3
 80069ea:	e02c      	b.n	8006a46 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80069ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d190      	bne.n	8006914 <HAL_SPI_TransmitReceive+0x314>
 80069f2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d18d      	bne.n	8006914 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80069f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069fa:	9300      	str	r3, [sp, #0]
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	2200      	movs	r2, #0
 8006a00:	2108      	movs	r1, #8
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f000 f8c4 	bl	8006b90 <SPI_WaitOnFlagUntilTimeout>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d007      	beq.n	8006a1e <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a14:	f043 0220 	orr.w	r2, r3, #32
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006a1e:	68f8      	ldr	r0, [r7, #12]
 8006a20:	f000 f816 	bl	8006a50 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d001      	beq.n	8006a42 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e001      	b.n	8006a46 <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 8006a42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3730      	adds	r7, #48	; 0x30
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop

08006a50 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	695b      	ldr	r3, [r3, #20]
 8006a5e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	699a      	ldr	r2, [r3, #24]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f042 0208 	orr.w	r2, r2, #8
 8006a6e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	699a      	ldr	r2, [r3, #24]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f042 0210 	orr.w	r2, r2, #16
 8006a7e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f022 0201 	bic.w	r2, r2, #1
 8006a8e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	6919      	ldr	r1, [r3, #16]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	4b3c      	ldr	r3, [pc, #240]	; (8006b8c <SPI_CloseTransfer+0x13c>)
 8006a9c:	400b      	ands	r3, r1
 8006a9e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	689a      	ldr	r2, [r3, #8]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006aae:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	2b04      	cmp	r3, #4
 8006aba:	d014      	beq.n	8006ae6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f003 0320 	and.w	r3, r3, #32
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00f      	beq.n	8006ae6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006acc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	699a      	ldr	r2, [r3, #24]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f042 0220 	orr.w	r2, r2, #32
 8006ae4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	2b03      	cmp	r3, #3
 8006af0:	d014      	beq.n	8006b1c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00f      	beq.n	8006b1c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b02:	f043 0204 	orr.w	r2, r3, #4
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	699a      	ldr	r2, [r3, #24]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b1a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00f      	beq.n	8006b46 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b2c:	f043 0201 	orr.w	r2, r3, #1
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	699a      	ldr	r2, [r3, #24]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b44:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00f      	beq.n	8006b70 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b56:	f043 0208 	orr.w	r2, r3, #8
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	699a      	ldr	r2, [r3, #24]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b6e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8006b80:	bf00      	nop
 8006b82:	3714      	adds	r7, #20
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr
 8006b8c:	fffffc90 	.word	0xfffffc90

08006b90 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	603b      	str	r3, [r7, #0]
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006ba0:	e010      	b.n	8006bc4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ba2:	f7fb fe63 	bl	800286c <HAL_GetTick>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	1ad3      	subs	r3, r2, r3
 8006bac:	69ba      	ldr	r2, [r7, #24]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d803      	bhi.n	8006bba <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb8:	d102      	bne.n	8006bc0 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d101      	bne.n	8006bc4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e00f      	b.n	8006be4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	695a      	ldr	r2, [r3, #20]
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	4013      	ands	r3, r2
 8006bce:	68ba      	ldr	r2, [r7, #8]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	bf0c      	ite	eq
 8006bd4:	2301      	moveq	r3, #1
 8006bd6:	2300      	movne	r3, #0
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	461a      	mov	r2, r3
 8006bdc:	79fb      	ldrb	r3, [r7, #7]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d0df      	beq.n	8006ba2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3710      	adds	r7, #16
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bf8:	095b      	lsrs	r3, r3, #5
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	3301      	adds	r3, #1
 8006c04:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	3307      	adds	r3, #7
 8006c0a:	08db      	lsrs	r3, r3, #3
 8006c0c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	fb02 f303 	mul.w	r3, r2, r3
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3714      	adds	r7, #20
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr

08006c22 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b082      	sub	sp, #8
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d101      	bne.n	8006c34 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e049      	b.n	8006cc8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d106      	bne.n	8006c4e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f7fb fb61 	bl	8002310 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2202      	movs	r2, #2
 8006c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	3304      	adds	r3, #4
 8006c5e:	4619      	mov	r1, r3
 8006c60:	4610      	mov	r0, r2
 8006c62:	f000 fc79 	bl	8007558 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2201      	movs	r2, #1
 8006c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2201      	movs	r2, #1
 8006c82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2201      	movs	r2, #1
 8006c92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3708      	adds	r7, #8
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d001      	beq.n	8006ce8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e054      	b.n	8006d92 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2202      	movs	r2, #2
 8006cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68da      	ldr	r2, [r3, #12]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f042 0201 	orr.w	r2, r2, #1
 8006cfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a26      	ldr	r2, [pc, #152]	; (8006da0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d022      	beq.n	8006d50 <HAL_TIM_Base_Start_IT+0x80>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d12:	d01d      	beq.n	8006d50 <HAL_TIM_Base_Start_IT+0x80>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a22      	ldr	r2, [pc, #136]	; (8006da4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d018      	beq.n	8006d50 <HAL_TIM_Base_Start_IT+0x80>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a21      	ldr	r2, [pc, #132]	; (8006da8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d013      	beq.n	8006d50 <HAL_TIM_Base_Start_IT+0x80>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a1f      	ldr	r2, [pc, #124]	; (8006dac <HAL_TIM_Base_Start_IT+0xdc>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d00e      	beq.n	8006d50 <HAL_TIM_Base_Start_IT+0x80>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a1e      	ldr	r2, [pc, #120]	; (8006db0 <HAL_TIM_Base_Start_IT+0xe0>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d009      	beq.n	8006d50 <HAL_TIM_Base_Start_IT+0x80>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a1c      	ldr	r2, [pc, #112]	; (8006db4 <HAL_TIM_Base_Start_IT+0xe4>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d004      	beq.n	8006d50 <HAL_TIM_Base_Start_IT+0x80>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a1b      	ldr	r2, [pc, #108]	; (8006db8 <HAL_TIM_Base_Start_IT+0xe8>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d115      	bne.n	8006d7c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	689a      	ldr	r2, [r3, #8]
 8006d56:	4b19      	ldr	r3, [pc, #100]	; (8006dbc <HAL_TIM_Base_Start_IT+0xec>)
 8006d58:	4013      	ands	r3, r2
 8006d5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2b06      	cmp	r3, #6
 8006d60:	d015      	beq.n	8006d8e <HAL_TIM_Base_Start_IT+0xbe>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d68:	d011      	beq.n	8006d8e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f042 0201 	orr.w	r2, r2, #1
 8006d78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d7a:	e008      	b.n	8006d8e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f042 0201 	orr.w	r2, r2, #1
 8006d8a:	601a      	str	r2, [r3, #0]
 8006d8c:	e000      	b.n	8006d90 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3714      	adds	r7, #20
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
 8006d9e:	bf00      	nop
 8006da0:	40010000 	.word	0x40010000
 8006da4:	40000400 	.word	0x40000400
 8006da8:	40000800 	.word	0x40000800
 8006dac:	40000c00 	.word	0x40000c00
 8006db0:	40010400 	.word	0x40010400
 8006db4:	40001800 	.word	0x40001800
 8006db8:	40014000 	.word	0x40014000
 8006dbc:	00010007 	.word	0x00010007

08006dc0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d101      	bne.n	8006dd2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e049      	b.n	8006e66 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d106      	bne.n	8006dec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 f841 	bl	8006e6e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2202      	movs	r2, #2
 8006df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	3304      	adds	r3, #4
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	4610      	mov	r0, r2
 8006e00:	f000 fbaa 	bl	8007558 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3708      	adds	r7, #8
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b083      	sub	sp, #12
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006e76:	bf00      	nop
 8006e78:	370c      	adds	r7, #12
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr
	...

08006e84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d109      	bne.n	8006ea8 <HAL_TIM_PWM_Start+0x24>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	bf14      	ite	ne
 8006ea0:	2301      	movne	r3, #1
 8006ea2:	2300      	moveq	r3, #0
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	e03c      	b.n	8006f22 <HAL_TIM_PWM_Start+0x9e>
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	2b04      	cmp	r3, #4
 8006eac:	d109      	bne.n	8006ec2 <HAL_TIM_PWM_Start+0x3e>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	bf14      	ite	ne
 8006eba:	2301      	movne	r3, #1
 8006ebc:	2300      	moveq	r3, #0
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	e02f      	b.n	8006f22 <HAL_TIM_PWM_Start+0x9e>
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	2b08      	cmp	r3, #8
 8006ec6:	d109      	bne.n	8006edc <HAL_TIM_PWM_Start+0x58>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	bf14      	ite	ne
 8006ed4:	2301      	movne	r3, #1
 8006ed6:	2300      	moveq	r3, #0
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	e022      	b.n	8006f22 <HAL_TIM_PWM_Start+0x9e>
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	2b0c      	cmp	r3, #12
 8006ee0:	d109      	bne.n	8006ef6 <HAL_TIM_PWM_Start+0x72>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	bf14      	ite	ne
 8006eee:	2301      	movne	r3, #1
 8006ef0:	2300      	moveq	r3, #0
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	e015      	b.n	8006f22 <HAL_TIM_PWM_Start+0x9e>
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	2b10      	cmp	r3, #16
 8006efa:	d109      	bne.n	8006f10 <HAL_TIM_PWM_Start+0x8c>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	bf14      	ite	ne
 8006f08:	2301      	movne	r3, #1
 8006f0a:	2300      	moveq	r3, #0
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	e008      	b.n	8006f22 <HAL_TIM_PWM_Start+0x9e>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	bf14      	ite	ne
 8006f1c:	2301      	movne	r3, #1
 8006f1e:	2300      	moveq	r3, #0
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d001      	beq.n	8006f2a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e0a1      	b.n	800706e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d104      	bne.n	8006f3a <HAL_TIM_PWM_Start+0xb6>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2202      	movs	r2, #2
 8006f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f38:	e023      	b.n	8006f82 <HAL_TIM_PWM_Start+0xfe>
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	2b04      	cmp	r3, #4
 8006f3e:	d104      	bne.n	8006f4a <HAL_TIM_PWM_Start+0xc6>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2202      	movs	r2, #2
 8006f44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f48:	e01b      	b.n	8006f82 <HAL_TIM_PWM_Start+0xfe>
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	2b08      	cmp	r3, #8
 8006f4e:	d104      	bne.n	8006f5a <HAL_TIM_PWM_Start+0xd6>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2202      	movs	r2, #2
 8006f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f58:	e013      	b.n	8006f82 <HAL_TIM_PWM_Start+0xfe>
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	2b0c      	cmp	r3, #12
 8006f5e:	d104      	bne.n	8006f6a <HAL_TIM_PWM_Start+0xe6>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2202      	movs	r2, #2
 8006f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f68:	e00b      	b.n	8006f82 <HAL_TIM_PWM_Start+0xfe>
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	2b10      	cmp	r3, #16
 8006f6e:	d104      	bne.n	8006f7a <HAL_TIM_PWM_Start+0xf6>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2202      	movs	r2, #2
 8006f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f78:	e003      	b.n	8006f82 <HAL_TIM_PWM_Start+0xfe>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2202      	movs	r2, #2
 8006f7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2201      	movs	r2, #1
 8006f88:	6839      	ldr	r1, [r7, #0]
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f000 fe54 	bl	8007c38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a38      	ldr	r2, [pc, #224]	; (8007078 <HAL_TIM_PWM_Start+0x1f4>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d013      	beq.n	8006fc2 <HAL_TIM_PWM_Start+0x13e>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a37      	ldr	r2, [pc, #220]	; (800707c <HAL_TIM_PWM_Start+0x1f8>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d00e      	beq.n	8006fc2 <HAL_TIM_PWM_Start+0x13e>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a35      	ldr	r2, [pc, #212]	; (8007080 <HAL_TIM_PWM_Start+0x1fc>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d009      	beq.n	8006fc2 <HAL_TIM_PWM_Start+0x13e>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a34      	ldr	r2, [pc, #208]	; (8007084 <HAL_TIM_PWM_Start+0x200>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d004      	beq.n	8006fc2 <HAL_TIM_PWM_Start+0x13e>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a32      	ldr	r2, [pc, #200]	; (8007088 <HAL_TIM_PWM_Start+0x204>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d101      	bne.n	8006fc6 <HAL_TIM_PWM_Start+0x142>
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e000      	b.n	8006fc8 <HAL_TIM_PWM_Start+0x144>
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d007      	beq.n	8006fdc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006fda:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a25      	ldr	r2, [pc, #148]	; (8007078 <HAL_TIM_PWM_Start+0x1f4>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d022      	beq.n	800702c <HAL_TIM_PWM_Start+0x1a8>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fee:	d01d      	beq.n	800702c <HAL_TIM_PWM_Start+0x1a8>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a25      	ldr	r2, [pc, #148]	; (800708c <HAL_TIM_PWM_Start+0x208>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d018      	beq.n	800702c <HAL_TIM_PWM_Start+0x1a8>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a24      	ldr	r2, [pc, #144]	; (8007090 <HAL_TIM_PWM_Start+0x20c>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d013      	beq.n	800702c <HAL_TIM_PWM_Start+0x1a8>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a22      	ldr	r2, [pc, #136]	; (8007094 <HAL_TIM_PWM_Start+0x210>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d00e      	beq.n	800702c <HAL_TIM_PWM_Start+0x1a8>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a1a      	ldr	r2, [pc, #104]	; (800707c <HAL_TIM_PWM_Start+0x1f8>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d009      	beq.n	800702c <HAL_TIM_PWM_Start+0x1a8>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a1e      	ldr	r2, [pc, #120]	; (8007098 <HAL_TIM_PWM_Start+0x214>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d004      	beq.n	800702c <HAL_TIM_PWM_Start+0x1a8>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a16      	ldr	r2, [pc, #88]	; (8007080 <HAL_TIM_PWM_Start+0x1fc>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d115      	bne.n	8007058 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	689a      	ldr	r2, [r3, #8]
 8007032:	4b1a      	ldr	r3, [pc, #104]	; (800709c <HAL_TIM_PWM_Start+0x218>)
 8007034:	4013      	ands	r3, r2
 8007036:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2b06      	cmp	r3, #6
 800703c:	d015      	beq.n	800706a <HAL_TIM_PWM_Start+0x1e6>
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007044:	d011      	beq.n	800706a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f042 0201 	orr.w	r2, r2, #1
 8007054:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007056:	e008      	b.n	800706a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f042 0201 	orr.w	r2, r2, #1
 8007066:	601a      	str	r2, [r3, #0]
 8007068:	e000      	b.n	800706c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800706a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3710      	adds	r7, #16
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	40010000 	.word	0x40010000
 800707c:	40010400 	.word	0x40010400
 8007080:	40014000 	.word	0x40014000
 8007084:	40014400 	.word	0x40014400
 8007088:	40014800 	.word	0x40014800
 800708c:	40000400 	.word	0x40000400
 8007090:	40000800 	.word	0x40000800
 8007094:	40000c00 	.word	0x40000c00
 8007098:	40001800 	.word	0x40001800
 800709c:	00010007 	.word	0x00010007

080070a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	f003 0302 	and.w	r3, r3, #2
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d122      	bne.n	80070fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	f003 0302 	and.w	r3, r3, #2
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d11b      	bne.n	80070fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f06f 0202 	mvn.w	r2, #2
 80070cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2201      	movs	r2, #1
 80070d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	699b      	ldr	r3, [r3, #24]
 80070da:	f003 0303 	and.w	r3, r3, #3
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d003      	beq.n	80070ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 fa1a 	bl	800751c <HAL_TIM_IC_CaptureCallback>
 80070e8:	e005      	b.n	80070f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 fa0c 	bl	8007508 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 fa1d 	bl	8007530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	f003 0304 	and.w	r3, r3, #4
 8007106:	2b04      	cmp	r3, #4
 8007108:	d122      	bne.n	8007150 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	f003 0304 	and.w	r3, r3, #4
 8007114:	2b04      	cmp	r3, #4
 8007116:	d11b      	bne.n	8007150 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f06f 0204 	mvn.w	r2, #4
 8007120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2202      	movs	r2, #2
 8007126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	699b      	ldr	r3, [r3, #24]
 800712e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007132:	2b00      	cmp	r3, #0
 8007134:	d003      	beq.n	800713e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 f9f0 	bl	800751c <HAL_TIM_IC_CaptureCallback>
 800713c:	e005      	b.n	800714a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 f9e2 	bl	8007508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 f9f3 	bl	8007530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	f003 0308 	and.w	r3, r3, #8
 800715a:	2b08      	cmp	r3, #8
 800715c:	d122      	bne.n	80071a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	f003 0308 	and.w	r3, r3, #8
 8007168:	2b08      	cmp	r3, #8
 800716a:	d11b      	bne.n	80071a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f06f 0208 	mvn.w	r2, #8
 8007174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2204      	movs	r2, #4
 800717a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	69db      	ldr	r3, [r3, #28]
 8007182:	f003 0303 	and.w	r3, r3, #3
 8007186:	2b00      	cmp	r3, #0
 8007188:	d003      	beq.n	8007192 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 f9c6 	bl	800751c <HAL_TIM_IC_CaptureCallback>
 8007190:	e005      	b.n	800719e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 f9b8 	bl	8007508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 f9c9 	bl	8007530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	f003 0310 	and.w	r3, r3, #16
 80071ae:	2b10      	cmp	r3, #16
 80071b0:	d122      	bne.n	80071f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	f003 0310 	and.w	r3, r3, #16
 80071bc:	2b10      	cmp	r3, #16
 80071be:	d11b      	bne.n	80071f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f06f 0210 	mvn.w	r2, #16
 80071c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2208      	movs	r2, #8
 80071ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	69db      	ldr	r3, [r3, #28]
 80071d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d003      	beq.n	80071e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f99c 	bl	800751c <HAL_TIM_IC_CaptureCallback>
 80071e4:	e005      	b.n	80071f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 f98e 	bl	8007508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 f99f 	bl	8007530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	f003 0301 	and.w	r3, r3, #1
 8007202:	2b01      	cmp	r3, #1
 8007204:	d10e      	bne.n	8007224 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	f003 0301 	and.w	r3, r3, #1
 8007210:	2b01      	cmp	r3, #1
 8007212:	d107      	bne.n	8007224 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f06f 0201 	mvn.w	r2, #1
 800721c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f7fa ff64 	bl	80020ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800722e:	2b80      	cmp	r3, #128	; 0x80
 8007230:	d10e      	bne.n	8007250 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800723c:	2b80      	cmp	r3, #128	; 0x80
 800723e:	d107      	bne.n	8007250 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 fd23 	bl	8007c96 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800725a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800725e:	d10e      	bne.n	800727e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800726a:	2b80      	cmp	r3, #128	; 0x80
 800726c:	d107      	bne.n	800727e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007276:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 fd16 	bl	8007caa <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007288:	2b40      	cmp	r3, #64	; 0x40
 800728a:	d10e      	bne.n	80072aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007296:	2b40      	cmp	r3, #64	; 0x40
 8007298:	d107      	bne.n	80072aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80072a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 f94d 	bl	8007544 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	691b      	ldr	r3, [r3, #16]
 80072b0:	f003 0320 	and.w	r3, r3, #32
 80072b4:	2b20      	cmp	r3, #32
 80072b6:	d10e      	bne.n	80072d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	f003 0320 	and.w	r3, r3, #32
 80072c2:	2b20      	cmp	r3, #32
 80072c4:	d107      	bne.n	80072d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f06f 0220 	mvn.w	r2, #32
 80072ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 fcd6 	bl	8007c82 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80072d6:	bf00      	nop
 80072d8:	3708      	adds	r7, #8
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
	...

080072e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b086      	sub	sp, #24
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072ec:	2300      	movs	r3, #0
 80072ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d101      	bne.n	80072fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80072fa:	2302      	movs	r3, #2
 80072fc:	e0ff      	b.n	80074fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2201      	movs	r2, #1
 8007302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2b14      	cmp	r3, #20
 800730a:	f200 80f0 	bhi.w	80074ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800730e:	a201      	add	r2, pc, #4	; (adr r2, 8007314 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007314:	08007369 	.word	0x08007369
 8007318:	080074ef 	.word	0x080074ef
 800731c:	080074ef 	.word	0x080074ef
 8007320:	080074ef 	.word	0x080074ef
 8007324:	080073a9 	.word	0x080073a9
 8007328:	080074ef 	.word	0x080074ef
 800732c:	080074ef 	.word	0x080074ef
 8007330:	080074ef 	.word	0x080074ef
 8007334:	080073eb 	.word	0x080073eb
 8007338:	080074ef 	.word	0x080074ef
 800733c:	080074ef 	.word	0x080074ef
 8007340:	080074ef 	.word	0x080074ef
 8007344:	0800742b 	.word	0x0800742b
 8007348:	080074ef 	.word	0x080074ef
 800734c:	080074ef 	.word	0x080074ef
 8007350:	080074ef 	.word	0x080074ef
 8007354:	0800746d 	.word	0x0800746d
 8007358:	080074ef 	.word	0x080074ef
 800735c:	080074ef 	.word	0x080074ef
 8007360:	080074ef 	.word	0x080074ef
 8007364:	080074ad 	.word	0x080074ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	68b9      	ldr	r1, [r7, #8]
 800736e:	4618      	mov	r0, r3
 8007370:	f000 f98c 	bl	800768c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	699a      	ldr	r2, [r3, #24]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f042 0208 	orr.w	r2, r2, #8
 8007382:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	699a      	ldr	r2, [r3, #24]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f022 0204 	bic.w	r2, r2, #4
 8007392:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	6999      	ldr	r1, [r3, #24]
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	691a      	ldr	r2, [r3, #16]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	430a      	orrs	r2, r1
 80073a4:	619a      	str	r2, [r3, #24]
      break;
 80073a6:	e0a5      	b.n	80074f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68b9      	ldr	r1, [r7, #8]
 80073ae:	4618      	mov	r0, r3
 80073b0:	f000 f9fc 	bl	80077ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	699a      	ldr	r2, [r3, #24]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	699a      	ldr	r2, [r3, #24]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	6999      	ldr	r1, [r3, #24]
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	021a      	lsls	r2, r3, #8
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	430a      	orrs	r2, r1
 80073e6:	619a      	str	r2, [r3, #24]
      break;
 80073e8:	e084      	b.n	80074f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68b9      	ldr	r1, [r7, #8]
 80073f0:	4618      	mov	r0, r3
 80073f2:	f000 fa65 	bl	80078c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	69da      	ldr	r2, [r3, #28]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f042 0208 	orr.w	r2, r2, #8
 8007404:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	69da      	ldr	r2, [r3, #28]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f022 0204 	bic.w	r2, r2, #4
 8007414:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	69d9      	ldr	r1, [r3, #28]
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	691a      	ldr	r2, [r3, #16]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	430a      	orrs	r2, r1
 8007426:	61da      	str	r2, [r3, #28]
      break;
 8007428:	e064      	b.n	80074f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68b9      	ldr	r1, [r7, #8]
 8007430:	4618      	mov	r0, r3
 8007432:	f000 facd 	bl	80079d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	69da      	ldr	r2, [r3, #28]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007444:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	69da      	ldr	r2, [r3, #28]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007454:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	69d9      	ldr	r1, [r3, #28]
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	691b      	ldr	r3, [r3, #16]
 8007460:	021a      	lsls	r2, r3, #8
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	430a      	orrs	r2, r1
 8007468:	61da      	str	r2, [r3, #28]
      break;
 800746a:	e043      	b.n	80074f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68b9      	ldr	r1, [r7, #8]
 8007472:	4618      	mov	r0, r3
 8007474:	f000 fb16 	bl	8007aa4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f042 0208 	orr.w	r2, r2, #8
 8007486:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f022 0204 	bic.w	r2, r2, #4
 8007496:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	691a      	ldr	r2, [r3, #16]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	430a      	orrs	r2, r1
 80074a8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80074aa:	e023      	b.n	80074f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68b9      	ldr	r1, [r7, #8]
 80074b2:	4618      	mov	r0, r3
 80074b4:	f000 fb5a 	bl	8007b6c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	021a      	lsls	r2, r3, #8
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	430a      	orrs	r2, r1
 80074ea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80074ec:	e002      	b.n	80074f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	75fb      	strb	r3, [r7, #23]
      break;
 80074f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2200      	movs	r2, #0
 80074f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80074fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3718      	adds	r7, #24
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop

08007508 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007510:	bf00      	nop
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007524:	bf00      	nop
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007538:	bf00      	nop
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800754c:	bf00      	nop
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007558:	b480      	push	{r7}
 800755a:	b085      	sub	sp, #20
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a40      	ldr	r2, [pc, #256]	; (800766c <TIM_Base_SetConfig+0x114>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d013      	beq.n	8007598 <TIM_Base_SetConfig+0x40>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007576:	d00f      	beq.n	8007598 <TIM_Base_SetConfig+0x40>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a3d      	ldr	r2, [pc, #244]	; (8007670 <TIM_Base_SetConfig+0x118>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d00b      	beq.n	8007598 <TIM_Base_SetConfig+0x40>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a3c      	ldr	r2, [pc, #240]	; (8007674 <TIM_Base_SetConfig+0x11c>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d007      	beq.n	8007598 <TIM_Base_SetConfig+0x40>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a3b      	ldr	r2, [pc, #236]	; (8007678 <TIM_Base_SetConfig+0x120>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d003      	beq.n	8007598 <TIM_Base_SetConfig+0x40>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	4a3a      	ldr	r2, [pc, #232]	; (800767c <TIM_Base_SetConfig+0x124>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d108      	bne.n	80075aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800759e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a2f      	ldr	r2, [pc, #188]	; (800766c <TIM_Base_SetConfig+0x114>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d01f      	beq.n	80075f2 <TIM_Base_SetConfig+0x9a>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075b8:	d01b      	beq.n	80075f2 <TIM_Base_SetConfig+0x9a>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a2c      	ldr	r2, [pc, #176]	; (8007670 <TIM_Base_SetConfig+0x118>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d017      	beq.n	80075f2 <TIM_Base_SetConfig+0x9a>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a2b      	ldr	r2, [pc, #172]	; (8007674 <TIM_Base_SetConfig+0x11c>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d013      	beq.n	80075f2 <TIM_Base_SetConfig+0x9a>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a2a      	ldr	r2, [pc, #168]	; (8007678 <TIM_Base_SetConfig+0x120>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d00f      	beq.n	80075f2 <TIM_Base_SetConfig+0x9a>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a29      	ldr	r2, [pc, #164]	; (800767c <TIM_Base_SetConfig+0x124>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d00b      	beq.n	80075f2 <TIM_Base_SetConfig+0x9a>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a28      	ldr	r2, [pc, #160]	; (8007680 <TIM_Base_SetConfig+0x128>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d007      	beq.n	80075f2 <TIM_Base_SetConfig+0x9a>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a27      	ldr	r2, [pc, #156]	; (8007684 <TIM_Base_SetConfig+0x12c>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d003      	beq.n	80075f2 <TIM_Base_SetConfig+0x9a>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a26      	ldr	r2, [pc, #152]	; (8007688 <TIM_Base_SetConfig+0x130>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d108      	bne.n	8007604 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	68fa      	ldr	r2, [r7, #12]
 8007600:	4313      	orrs	r3, r2
 8007602:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	695b      	ldr	r3, [r3, #20]
 800760e:	4313      	orrs	r3, r2
 8007610:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	68fa      	ldr	r2, [r7, #12]
 8007616:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	689a      	ldr	r2, [r3, #8]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a10      	ldr	r2, [pc, #64]	; (800766c <TIM_Base_SetConfig+0x114>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d00f      	beq.n	8007650 <TIM_Base_SetConfig+0xf8>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a12      	ldr	r2, [pc, #72]	; (800767c <TIM_Base_SetConfig+0x124>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d00b      	beq.n	8007650 <TIM_Base_SetConfig+0xf8>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4a11      	ldr	r2, [pc, #68]	; (8007680 <TIM_Base_SetConfig+0x128>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d007      	beq.n	8007650 <TIM_Base_SetConfig+0xf8>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a10      	ldr	r2, [pc, #64]	; (8007684 <TIM_Base_SetConfig+0x12c>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d003      	beq.n	8007650 <TIM_Base_SetConfig+0xf8>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a0f      	ldr	r2, [pc, #60]	; (8007688 <TIM_Base_SetConfig+0x130>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d103      	bne.n	8007658 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	691a      	ldr	r2, [r3, #16]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	615a      	str	r2, [r3, #20]
}
 800765e:	bf00      	nop
 8007660:	3714      	adds	r7, #20
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop
 800766c:	40010000 	.word	0x40010000
 8007670:	40000400 	.word	0x40000400
 8007674:	40000800 	.word	0x40000800
 8007678:	40000c00 	.word	0x40000c00
 800767c:	40010400 	.word	0x40010400
 8007680:	40014000 	.word	0x40014000
 8007684:	40014400 	.word	0x40014400
 8007688:	40014800 	.word	0x40014800

0800768c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800768c:	b480      	push	{r7}
 800768e:	b087      	sub	sp, #28
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a1b      	ldr	r3, [r3, #32]
 800769a:	f023 0201 	bic.w	r2, r3, #1
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a1b      	ldr	r3, [r3, #32]
 80076a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	699b      	ldr	r3, [r3, #24]
 80076b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80076b4:	68fa      	ldr	r2, [r7, #12]
 80076b6:	4b37      	ldr	r3, [pc, #220]	; (8007794 <TIM_OC1_SetConfig+0x108>)
 80076b8:	4013      	ands	r3, r2
 80076ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f023 0303 	bic.w	r3, r3, #3
 80076c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	f023 0302 	bic.w	r3, r3, #2
 80076d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	697a      	ldr	r2, [r7, #20]
 80076dc:	4313      	orrs	r3, r2
 80076de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a2d      	ldr	r2, [pc, #180]	; (8007798 <TIM_OC1_SetConfig+0x10c>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d00f      	beq.n	8007708 <TIM_OC1_SetConfig+0x7c>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a2c      	ldr	r2, [pc, #176]	; (800779c <TIM_OC1_SetConfig+0x110>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d00b      	beq.n	8007708 <TIM_OC1_SetConfig+0x7c>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a2b      	ldr	r2, [pc, #172]	; (80077a0 <TIM_OC1_SetConfig+0x114>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d007      	beq.n	8007708 <TIM_OC1_SetConfig+0x7c>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a2a      	ldr	r2, [pc, #168]	; (80077a4 <TIM_OC1_SetConfig+0x118>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d003      	beq.n	8007708 <TIM_OC1_SetConfig+0x7c>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a29      	ldr	r2, [pc, #164]	; (80077a8 <TIM_OC1_SetConfig+0x11c>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d10c      	bne.n	8007722 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	f023 0308 	bic.w	r3, r3, #8
 800770e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	697a      	ldr	r2, [r7, #20]
 8007716:	4313      	orrs	r3, r2
 8007718:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	f023 0304 	bic.w	r3, r3, #4
 8007720:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a1c      	ldr	r2, [pc, #112]	; (8007798 <TIM_OC1_SetConfig+0x10c>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d00f      	beq.n	800774a <TIM_OC1_SetConfig+0xbe>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a1b      	ldr	r2, [pc, #108]	; (800779c <TIM_OC1_SetConfig+0x110>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d00b      	beq.n	800774a <TIM_OC1_SetConfig+0xbe>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4a1a      	ldr	r2, [pc, #104]	; (80077a0 <TIM_OC1_SetConfig+0x114>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d007      	beq.n	800774a <TIM_OC1_SetConfig+0xbe>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4a19      	ldr	r2, [pc, #100]	; (80077a4 <TIM_OC1_SetConfig+0x118>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d003      	beq.n	800774a <TIM_OC1_SetConfig+0xbe>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a18      	ldr	r2, [pc, #96]	; (80077a8 <TIM_OC1_SetConfig+0x11c>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d111      	bne.n	800776e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007750:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007758:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	695b      	ldr	r3, [r3, #20]
 800775e:	693a      	ldr	r2, [r7, #16]
 8007760:	4313      	orrs	r3, r2
 8007762:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	699b      	ldr	r3, [r3, #24]
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	4313      	orrs	r3, r2
 800776c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	693a      	ldr	r2, [r7, #16]
 8007772:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	685a      	ldr	r2, [r3, #4]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	697a      	ldr	r2, [r7, #20]
 8007786:	621a      	str	r2, [r3, #32]
}
 8007788:	bf00      	nop
 800778a:	371c      	adds	r7, #28
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr
 8007794:	fffeff8f 	.word	0xfffeff8f
 8007798:	40010000 	.word	0x40010000
 800779c:	40010400 	.word	0x40010400
 80077a0:	40014000 	.word	0x40014000
 80077a4:	40014400 	.word	0x40014400
 80077a8:	40014800 	.word	0x40014800

080077ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b087      	sub	sp, #28
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6a1b      	ldr	r3, [r3, #32]
 80077ba:	f023 0210 	bic.w	r2, r3, #16
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a1b      	ldr	r3, [r3, #32]
 80077c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	699b      	ldr	r3, [r3, #24]
 80077d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	4b34      	ldr	r3, [pc, #208]	; (80078a8 <TIM_OC2_SetConfig+0xfc>)
 80077d8:	4013      	ands	r3, r2
 80077da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	021b      	lsls	r3, r3, #8
 80077ea:	68fa      	ldr	r2, [r7, #12]
 80077ec:	4313      	orrs	r3, r2
 80077ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	f023 0320 	bic.w	r3, r3, #32
 80077f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	011b      	lsls	r3, r3, #4
 80077fe:	697a      	ldr	r2, [r7, #20]
 8007800:	4313      	orrs	r3, r2
 8007802:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	4a29      	ldr	r2, [pc, #164]	; (80078ac <TIM_OC2_SetConfig+0x100>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d003      	beq.n	8007814 <TIM_OC2_SetConfig+0x68>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	4a28      	ldr	r2, [pc, #160]	; (80078b0 <TIM_OC2_SetConfig+0x104>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d10d      	bne.n	8007830 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800781a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	011b      	lsls	r3, r3, #4
 8007822:	697a      	ldr	r2, [r7, #20]
 8007824:	4313      	orrs	r3, r2
 8007826:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800782e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	4a1e      	ldr	r2, [pc, #120]	; (80078ac <TIM_OC2_SetConfig+0x100>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d00f      	beq.n	8007858 <TIM_OC2_SetConfig+0xac>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	4a1d      	ldr	r2, [pc, #116]	; (80078b0 <TIM_OC2_SetConfig+0x104>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d00b      	beq.n	8007858 <TIM_OC2_SetConfig+0xac>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	4a1c      	ldr	r2, [pc, #112]	; (80078b4 <TIM_OC2_SetConfig+0x108>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d007      	beq.n	8007858 <TIM_OC2_SetConfig+0xac>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	4a1b      	ldr	r2, [pc, #108]	; (80078b8 <TIM_OC2_SetConfig+0x10c>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d003      	beq.n	8007858 <TIM_OC2_SetConfig+0xac>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	4a1a      	ldr	r2, [pc, #104]	; (80078bc <TIM_OC2_SetConfig+0x110>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d113      	bne.n	8007880 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800785e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007866:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	695b      	ldr	r3, [r3, #20]
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	693a      	ldr	r2, [r7, #16]
 8007870:	4313      	orrs	r3, r2
 8007872:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	699b      	ldr	r3, [r3, #24]
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	693a      	ldr	r2, [r7, #16]
 800787c:	4313      	orrs	r3, r2
 800787e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	693a      	ldr	r2, [r7, #16]
 8007884:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	685a      	ldr	r2, [r3, #4]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	697a      	ldr	r2, [r7, #20]
 8007898:	621a      	str	r2, [r3, #32]
}
 800789a:	bf00      	nop
 800789c:	371c      	adds	r7, #28
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop
 80078a8:	feff8fff 	.word	0xfeff8fff
 80078ac:	40010000 	.word	0x40010000
 80078b0:	40010400 	.word	0x40010400
 80078b4:	40014000 	.word	0x40014000
 80078b8:	40014400 	.word	0x40014400
 80078bc:	40014800 	.word	0x40014800

080078c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b087      	sub	sp, #28
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6a1b      	ldr	r3, [r3, #32]
 80078ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a1b      	ldr	r3, [r3, #32]
 80078da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	69db      	ldr	r3, [r3, #28]
 80078e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80078e8:	68fa      	ldr	r2, [r7, #12]
 80078ea:	4b33      	ldr	r3, [pc, #204]	; (80079b8 <TIM_OC3_SetConfig+0xf8>)
 80078ec:	4013      	ands	r3, r2
 80078ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f023 0303 	bic.w	r3, r3, #3
 80078f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	4313      	orrs	r3, r2
 8007900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	021b      	lsls	r3, r3, #8
 8007910:	697a      	ldr	r2, [r7, #20]
 8007912:	4313      	orrs	r3, r2
 8007914:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4a28      	ldr	r2, [pc, #160]	; (80079bc <TIM_OC3_SetConfig+0xfc>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d003      	beq.n	8007926 <TIM_OC3_SetConfig+0x66>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4a27      	ldr	r2, [pc, #156]	; (80079c0 <TIM_OC3_SetConfig+0x100>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d10d      	bne.n	8007942 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800792c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	68db      	ldr	r3, [r3, #12]
 8007932:	021b      	lsls	r3, r3, #8
 8007934:	697a      	ldr	r2, [r7, #20]
 8007936:	4313      	orrs	r3, r2
 8007938:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007940:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a1d      	ldr	r2, [pc, #116]	; (80079bc <TIM_OC3_SetConfig+0xfc>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d00f      	beq.n	800796a <TIM_OC3_SetConfig+0xaa>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a1c      	ldr	r2, [pc, #112]	; (80079c0 <TIM_OC3_SetConfig+0x100>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d00b      	beq.n	800796a <TIM_OC3_SetConfig+0xaa>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a1b      	ldr	r2, [pc, #108]	; (80079c4 <TIM_OC3_SetConfig+0x104>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d007      	beq.n	800796a <TIM_OC3_SetConfig+0xaa>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a1a      	ldr	r2, [pc, #104]	; (80079c8 <TIM_OC3_SetConfig+0x108>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d003      	beq.n	800796a <TIM_OC3_SetConfig+0xaa>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a19      	ldr	r2, [pc, #100]	; (80079cc <TIM_OC3_SetConfig+0x10c>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d113      	bne.n	8007992 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007970:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007978:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	695b      	ldr	r3, [r3, #20]
 800797e:	011b      	lsls	r3, r3, #4
 8007980:	693a      	ldr	r2, [r7, #16]
 8007982:	4313      	orrs	r3, r2
 8007984:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	699b      	ldr	r3, [r3, #24]
 800798a:	011b      	lsls	r3, r3, #4
 800798c:	693a      	ldr	r2, [r7, #16]
 800798e:	4313      	orrs	r3, r2
 8007990:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	693a      	ldr	r2, [r7, #16]
 8007996:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	68fa      	ldr	r2, [r7, #12]
 800799c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	685a      	ldr	r2, [r3, #4]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	697a      	ldr	r2, [r7, #20]
 80079aa:	621a      	str	r2, [r3, #32]
}
 80079ac:	bf00      	nop
 80079ae:	371c      	adds	r7, #28
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr
 80079b8:	fffeff8f 	.word	0xfffeff8f
 80079bc:	40010000 	.word	0x40010000
 80079c0:	40010400 	.word	0x40010400
 80079c4:	40014000 	.word	0x40014000
 80079c8:	40014400 	.word	0x40014400
 80079cc:	40014800 	.word	0x40014800

080079d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b087      	sub	sp, #28
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6a1b      	ldr	r3, [r3, #32]
 80079de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a1b      	ldr	r3, [r3, #32]
 80079ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	69db      	ldr	r3, [r3, #28]
 80079f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80079f8:	68fa      	ldr	r2, [r7, #12]
 80079fa:	4b24      	ldr	r3, [pc, #144]	; (8007a8c <TIM_OC4_SetConfig+0xbc>)
 80079fc:	4013      	ands	r3, r2
 80079fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	021b      	lsls	r3, r3, #8
 8007a0e:	68fa      	ldr	r2, [r7, #12]
 8007a10:	4313      	orrs	r3, r2
 8007a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	031b      	lsls	r3, r3, #12
 8007a22:	693a      	ldr	r2, [r7, #16]
 8007a24:	4313      	orrs	r3, r2
 8007a26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4a19      	ldr	r2, [pc, #100]	; (8007a90 <TIM_OC4_SetConfig+0xc0>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d00f      	beq.n	8007a50 <TIM_OC4_SetConfig+0x80>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	4a18      	ldr	r2, [pc, #96]	; (8007a94 <TIM_OC4_SetConfig+0xc4>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d00b      	beq.n	8007a50 <TIM_OC4_SetConfig+0x80>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	4a17      	ldr	r2, [pc, #92]	; (8007a98 <TIM_OC4_SetConfig+0xc8>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d007      	beq.n	8007a50 <TIM_OC4_SetConfig+0x80>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	4a16      	ldr	r2, [pc, #88]	; (8007a9c <TIM_OC4_SetConfig+0xcc>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d003      	beq.n	8007a50 <TIM_OC4_SetConfig+0x80>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	4a15      	ldr	r2, [pc, #84]	; (8007aa0 <TIM_OC4_SetConfig+0xd0>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d109      	bne.n	8007a64 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	695b      	ldr	r3, [r3, #20]
 8007a5c:	019b      	lsls	r3, r3, #6
 8007a5e:	697a      	ldr	r2, [r7, #20]
 8007a60:	4313      	orrs	r3, r2
 8007a62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	685a      	ldr	r2, [r3, #4]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	693a      	ldr	r2, [r7, #16]
 8007a7c:	621a      	str	r2, [r3, #32]
}
 8007a7e:	bf00      	nop
 8007a80:	371c      	adds	r7, #28
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr
 8007a8a:	bf00      	nop
 8007a8c:	feff8fff 	.word	0xfeff8fff
 8007a90:	40010000 	.word	0x40010000
 8007a94:	40010400 	.word	0x40010400
 8007a98:	40014000 	.word	0x40014000
 8007a9c:	40014400 	.word	0x40014400
 8007aa0:	40014800 	.word	0x40014800

08007aa4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b087      	sub	sp, #28
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6a1b      	ldr	r3, [r3, #32]
 8007ab2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a1b      	ldr	r3, [r3, #32]
 8007abe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	4b21      	ldr	r3, [pc, #132]	; (8007b54 <TIM_OC5_SetConfig+0xb0>)
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68fa      	ldr	r2, [r7, #12]
 8007ada:	4313      	orrs	r3, r2
 8007adc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007ae4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	041b      	lsls	r3, r3, #16
 8007aec:	693a      	ldr	r2, [r7, #16]
 8007aee:	4313      	orrs	r3, r2
 8007af0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4a18      	ldr	r2, [pc, #96]	; (8007b58 <TIM_OC5_SetConfig+0xb4>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d00f      	beq.n	8007b1a <TIM_OC5_SetConfig+0x76>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a17      	ldr	r2, [pc, #92]	; (8007b5c <TIM_OC5_SetConfig+0xb8>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d00b      	beq.n	8007b1a <TIM_OC5_SetConfig+0x76>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a16      	ldr	r2, [pc, #88]	; (8007b60 <TIM_OC5_SetConfig+0xbc>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d007      	beq.n	8007b1a <TIM_OC5_SetConfig+0x76>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4a15      	ldr	r2, [pc, #84]	; (8007b64 <TIM_OC5_SetConfig+0xc0>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d003      	beq.n	8007b1a <TIM_OC5_SetConfig+0x76>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4a14      	ldr	r2, [pc, #80]	; (8007b68 <TIM_OC5_SetConfig+0xc4>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d109      	bne.n	8007b2e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b20:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	695b      	ldr	r3, [r3, #20]
 8007b26:	021b      	lsls	r3, r3, #8
 8007b28:	697a      	ldr	r2, [r7, #20]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	697a      	ldr	r2, [r7, #20]
 8007b32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	68fa      	ldr	r2, [r7, #12]
 8007b38:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	685a      	ldr	r2, [r3, #4]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	693a      	ldr	r2, [r7, #16]
 8007b46:	621a      	str	r2, [r3, #32]
}
 8007b48:	bf00      	nop
 8007b4a:	371c      	adds	r7, #28
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr
 8007b54:	fffeff8f 	.word	0xfffeff8f
 8007b58:	40010000 	.word	0x40010000
 8007b5c:	40010400 	.word	0x40010400
 8007b60:	40014000 	.word	0x40014000
 8007b64:	40014400 	.word	0x40014400
 8007b68:	40014800 	.word	0x40014800

08007b6c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b087      	sub	sp, #28
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a1b      	ldr	r3, [r3, #32]
 8007b7a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a1b      	ldr	r3, [r3, #32]
 8007b86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007b94:	68fa      	ldr	r2, [r7, #12]
 8007b96:	4b22      	ldr	r3, [pc, #136]	; (8007c20 <TIM_OC6_SetConfig+0xb4>)
 8007b98:	4013      	ands	r3, r2
 8007b9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	021b      	lsls	r3, r3, #8
 8007ba2:	68fa      	ldr	r2, [r7, #12]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007bae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	051b      	lsls	r3, r3, #20
 8007bb6:	693a      	ldr	r2, [r7, #16]
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4a19      	ldr	r2, [pc, #100]	; (8007c24 <TIM_OC6_SetConfig+0xb8>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d00f      	beq.n	8007be4 <TIM_OC6_SetConfig+0x78>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a18      	ldr	r2, [pc, #96]	; (8007c28 <TIM_OC6_SetConfig+0xbc>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d00b      	beq.n	8007be4 <TIM_OC6_SetConfig+0x78>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a17      	ldr	r2, [pc, #92]	; (8007c2c <TIM_OC6_SetConfig+0xc0>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d007      	beq.n	8007be4 <TIM_OC6_SetConfig+0x78>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a16      	ldr	r2, [pc, #88]	; (8007c30 <TIM_OC6_SetConfig+0xc4>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d003      	beq.n	8007be4 <TIM_OC6_SetConfig+0x78>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a15      	ldr	r2, [pc, #84]	; (8007c34 <TIM_OC6_SetConfig+0xc8>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d109      	bne.n	8007bf8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007bea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	695b      	ldr	r3, [r3, #20]
 8007bf0:	029b      	lsls	r3, r3, #10
 8007bf2:	697a      	ldr	r2, [r7, #20]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	697a      	ldr	r2, [r7, #20]
 8007bfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	685a      	ldr	r2, [r3, #4]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	693a      	ldr	r2, [r7, #16]
 8007c10:	621a      	str	r2, [r3, #32]
}
 8007c12:	bf00      	nop
 8007c14:	371c      	adds	r7, #28
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop
 8007c20:	feff8fff 	.word	0xfeff8fff
 8007c24:	40010000 	.word	0x40010000
 8007c28:	40010400 	.word	0x40010400
 8007c2c:	40014000 	.word	0x40014000
 8007c30:	40014400 	.word	0x40014400
 8007c34:	40014800 	.word	0x40014800

08007c38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b087      	sub	sp, #28
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	f003 031f 	and.w	r3, r3, #31
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6a1a      	ldr	r2, [r3, #32]
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	43db      	mvns	r3, r3
 8007c5a:	401a      	ands	r2, r3
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6a1a      	ldr	r2, [r3, #32]
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	f003 031f 	and.w	r3, r3, #31
 8007c6a:	6879      	ldr	r1, [r7, #4]
 8007c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c70:	431a      	orrs	r2, r3
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	621a      	str	r2, [r3, #32]
}
 8007c76:	bf00      	nop
 8007c78:	371c      	adds	r7, #28
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr

08007c82 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c82:	b480      	push	{r7}
 8007c84:	b083      	sub	sp, #12
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c8a:	bf00      	nop
 8007c8c:	370c      	adds	r7, #12
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr

08007c96 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c96:	b480      	push	{r7}
 8007c98:	b083      	sub	sp, #12
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c9e:	bf00      	nop
 8007ca0:	370c      	adds	r7, #12
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007caa:	b480      	push	{r7}
 8007cac:	b083      	sub	sp, #12
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007cb2:	bf00      	nop
 8007cb4:	370c      	adds	r7, #12
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr

08007cbe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007cbe:	b580      	push	{r7, lr}
 8007cc0:	b082      	sub	sp, #8
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d101      	bne.n	8007cd0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e042      	b.n	8007d56 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d106      	bne.n	8007ce8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f7fa fbb2 	bl	800244c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2224      	movs	r2, #36	; 0x24
 8007cec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f022 0201 	bic.w	r2, r2, #1
 8007cfe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 f8c3 	bl	8007e8c <UART_SetConfig>
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d101      	bne.n	8007d10 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e022      	b.n	8007d56 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d002      	beq.n	8007d1e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 fe1f 	bl	800895c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	685a      	ldr	r2, [r3, #4]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d2c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	689a      	ldr	r2, [r3, #8]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d3c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f042 0201 	orr.w	r2, r2, #1
 8007d4c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 fea6 	bl	8008aa0 <UART_CheckIdleState>
 8007d54:	4603      	mov	r3, r0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3708      	adds	r7, #8
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b08a      	sub	sp, #40	; 0x28
 8007d62:	af02      	add	r7, sp, #8
 8007d64:	60f8      	str	r0, [r7, #12]
 8007d66:	60b9      	str	r1, [r7, #8]
 8007d68:	603b      	str	r3, [r7, #0]
 8007d6a:	4613      	mov	r3, r2
 8007d6c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d74:	2b20      	cmp	r3, #32
 8007d76:	f040 8083 	bne.w	8007e80 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d002      	beq.n	8007d86 <HAL_UART_Transmit+0x28>
 8007d80:	88fb      	ldrh	r3, [r7, #6]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d101      	bne.n	8007d8a <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	e07b      	b.n	8007e82 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d101      	bne.n	8007d98 <HAL_UART_Transmit+0x3a>
 8007d94:	2302      	movs	r3, #2
 8007d96:	e074      	b.n	8007e82 <HAL_UART_Transmit+0x124>
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2200      	movs	r2, #0
 8007da4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2221      	movs	r2, #33	; 0x21
 8007dac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007db0:	f7fa fd5c 	bl	800286c <HAL_GetTick>
 8007db4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	88fa      	ldrh	r2, [r7, #6]
 8007dba:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	88fa      	ldrh	r2, [r7, #6]
 8007dc2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dce:	d108      	bne.n	8007de2 <HAL_UART_Transmit+0x84>
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	691b      	ldr	r3, [r3, #16]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d104      	bne.n	8007de2 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	61bb      	str	r3, [r7, #24]
 8007de0:	e003      	b.n	8007dea <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007de6:	2300      	movs	r3, #0
 8007de8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007df2:	e02c      	b.n	8007e4e <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	9300      	str	r3, [sp, #0]
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	2180      	movs	r1, #128	; 0x80
 8007dfe:	68f8      	ldr	r0, [r7, #12]
 8007e00:	f000 fe99 	bl	8008b36 <UART_WaitOnFlagUntilTimeout>
 8007e04:	4603      	mov	r3, r0
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d001      	beq.n	8007e0e <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007e0a:	2303      	movs	r3, #3
 8007e0c:	e039      	b.n	8007e82 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d10b      	bne.n	8007e2c <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e14:	69bb      	ldr	r3, [r7, #24]
 8007e16:	881b      	ldrh	r3, [r3, #0]
 8007e18:	461a      	mov	r2, r3
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e22:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007e24:	69bb      	ldr	r3, [r7, #24]
 8007e26:	3302      	adds	r3, #2
 8007e28:	61bb      	str	r3, [r7, #24]
 8007e2a:	e007      	b.n	8007e3c <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	781a      	ldrb	r2, [r3, #0]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007e36:	69fb      	ldr	r3, [r7, #28]
 8007e38:	3301      	adds	r3, #1
 8007e3a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	3b01      	subs	r3, #1
 8007e46:	b29a      	uxth	r2, r3
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d1cc      	bne.n	8007df4 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	9300      	str	r3, [sp, #0]
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	2200      	movs	r2, #0
 8007e62:	2140      	movs	r1, #64	; 0x40
 8007e64:	68f8      	ldr	r0, [r7, #12]
 8007e66:	f000 fe66 	bl	8008b36 <UART_WaitOnFlagUntilTimeout>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d001      	beq.n	8007e74 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007e70:	2303      	movs	r3, #3
 8007e72:	e006      	b.n	8007e82 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2220      	movs	r2, #32
 8007e78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	e000      	b.n	8007e82 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007e80:	2302      	movs	r3, #2
  }
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3720      	adds	r7, #32
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
	...

08007e8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e90:	b092      	sub	sp, #72	; 0x48
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e96:	2300      	movs	r3, #0
 8007e98:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	689a      	ldr	r2, [r3, #8]
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	691b      	ldr	r3, [r3, #16]
 8007ea4:	431a      	orrs	r2, r3
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	695b      	ldr	r3, [r3, #20]
 8007eaa:	431a      	orrs	r2, r3
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	69db      	ldr	r3, [r3, #28]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	4bbe      	ldr	r3, [pc, #760]	; (80081b4 <UART_SetConfig+0x328>)
 8007ebc:	4013      	ands	r3, r2
 8007ebe:	697a      	ldr	r2, [r7, #20]
 8007ec0:	6812      	ldr	r2, [r2, #0]
 8007ec2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ec4:	430b      	orrs	r3, r1
 8007ec6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	68da      	ldr	r2, [r3, #12]
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	430a      	orrs	r2, r1
 8007edc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	699b      	ldr	r3, [r3, #24]
 8007ee2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4ab3      	ldr	r2, [pc, #716]	; (80081b8 <UART_SetConfig+0x32c>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d004      	beq.n	8007ef8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	6a1b      	ldr	r3, [r3, #32]
 8007ef2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	689a      	ldr	r2, [r3, #8]
 8007efe:	4baf      	ldr	r3, [pc, #700]	; (80081bc <UART_SetConfig+0x330>)
 8007f00:	4013      	ands	r3, r2
 8007f02:	697a      	ldr	r2, [r7, #20]
 8007f04:	6812      	ldr	r2, [r2, #0]
 8007f06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007f08:	430b      	orrs	r3, r1
 8007f0a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f12:	f023 010f 	bic.w	r1, r3, #15
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	430a      	orrs	r2, r1
 8007f20:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4aa6      	ldr	r2, [pc, #664]	; (80081c0 <UART_SetConfig+0x334>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d177      	bne.n	800801c <UART_SetConfig+0x190>
 8007f2c:	4ba5      	ldr	r3, [pc, #660]	; (80081c4 <UART_SetConfig+0x338>)
 8007f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f34:	2b28      	cmp	r3, #40	; 0x28
 8007f36:	d86d      	bhi.n	8008014 <UART_SetConfig+0x188>
 8007f38:	a201      	add	r2, pc, #4	; (adr r2, 8007f40 <UART_SetConfig+0xb4>)
 8007f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f3e:	bf00      	nop
 8007f40:	08007fe5 	.word	0x08007fe5
 8007f44:	08008015 	.word	0x08008015
 8007f48:	08008015 	.word	0x08008015
 8007f4c:	08008015 	.word	0x08008015
 8007f50:	08008015 	.word	0x08008015
 8007f54:	08008015 	.word	0x08008015
 8007f58:	08008015 	.word	0x08008015
 8007f5c:	08008015 	.word	0x08008015
 8007f60:	08007fed 	.word	0x08007fed
 8007f64:	08008015 	.word	0x08008015
 8007f68:	08008015 	.word	0x08008015
 8007f6c:	08008015 	.word	0x08008015
 8007f70:	08008015 	.word	0x08008015
 8007f74:	08008015 	.word	0x08008015
 8007f78:	08008015 	.word	0x08008015
 8007f7c:	08008015 	.word	0x08008015
 8007f80:	08007ff5 	.word	0x08007ff5
 8007f84:	08008015 	.word	0x08008015
 8007f88:	08008015 	.word	0x08008015
 8007f8c:	08008015 	.word	0x08008015
 8007f90:	08008015 	.word	0x08008015
 8007f94:	08008015 	.word	0x08008015
 8007f98:	08008015 	.word	0x08008015
 8007f9c:	08008015 	.word	0x08008015
 8007fa0:	08007ffd 	.word	0x08007ffd
 8007fa4:	08008015 	.word	0x08008015
 8007fa8:	08008015 	.word	0x08008015
 8007fac:	08008015 	.word	0x08008015
 8007fb0:	08008015 	.word	0x08008015
 8007fb4:	08008015 	.word	0x08008015
 8007fb8:	08008015 	.word	0x08008015
 8007fbc:	08008015 	.word	0x08008015
 8007fc0:	08008005 	.word	0x08008005
 8007fc4:	08008015 	.word	0x08008015
 8007fc8:	08008015 	.word	0x08008015
 8007fcc:	08008015 	.word	0x08008015
 8007fd0:	08008015 	.word	0x08008015
 8007fd4:	08008015 	.word	0x08008015
 8007fd8:	08008015 	.word	0x08008015
 8007fdc:	08008015 	.word	0x08008015
 8007fe0:	0800800d 	.word	0x0800800d
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fea:	e222      	b.n	8008432 <UART_SetConfig+0x5a6>
 8007fec:	2304      	movs	r3, #4
 8007fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ff2:	e21e      	b.n	8008432 <UART_SetConfig+0x5a6>
 8007ff4:	2308      	movs	r3, #8
 8007ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ffa:	e21a      	b.n	8008432 <UART_SetConfig+0x5a6>
 8007ffc:	2310      	movs	r3, #16
 8007ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008002:	e216      	b.n	8008432 <UART_SetConfig+0x5a6>
 8008004:	2320      	movs	r3, #32
 8008006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800800a:	e212      	b.n	8008432 <UART_SetConfig+0x5a6>
 800800c:	2340      	movs	r3, #64	; 0x40
 800800e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008012:	e20e      	b.n	8008432 <UART_SetConfig+0x5a6>
 8008014:	2380      	movs	r3, #128	; 0x80
 8008016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800801a:	e20a      	b.n	8008432 <UART_SetConfig+0x5a6>
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a69      	ldr	r2, [pc, #420]	; (80081c8 <UART_SetConfig+0x33c>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d130      	bne.n	8008088 <UART_SetConfig+0x1fc>
 8008026:	4b67      	ldr	r3, [pc, #412]	; (80081c4 <UART_SetConfig+0x338>)
 8008028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800802a:	f003 0307 	and.w	r3, r3, #7
 800802e:	2b05      	cmp	r3, #5
 8008030:	d826      	bhi.n	8008080 <UART_SetConfig+0x1f4>
 8008032:	a201      	add	r2, pc, #4	; (adr r2, 8008038 <UART_SetConfig+0x1ac>)
 8008034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008038:	08008051 	.word	0x08008051
 800803c:	08008059 	.word	0x08008059
 8008040:	08008061 	.word	0x08008061
 8008044:	08008069 	.word	0x08008069
 8008048:	08008071 	.word	0x08008071
 800804c:	08008079 	.word	0x08008079
 8008050:	2300      	movs	r3, #0
 8008052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008056:	e1ec      	b.n	8008432 <UART_SetConfig+0x5a6>
 8008058:	2304      	movs	r3, #4
 800805a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800805e:	e1e8      	b.n	8008432 <UART_SetConfig+0x5a6>
 8008060:	2308      	movs	r3, #8
 8008062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008066:	e1e4      	b.n	8008432 <UART_SetConfig+0x5a6>
 8008068:	2310      	movs	r3, #16
 800806a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800806e:	e1e0      	b.n	8008432 <UART_SetConfig+0x5a6>
 8008070:	2320      	movs	r3, #32
 8008072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008076:	e1dc      	b.n	8008432 <UART_SetConfig+0x5a6>
 8008078:	2340      	movs	r3, #64	; 0x40
 800807a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800807e:	e1d8      	b.n	8008432 <UART_SetConfig+0x5a6>
 8008080:	2380      	movs	r3, #128	; 0x80
 8008082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008086:	e1d4      	b.n	8008432 <UART_SetConfig+0x5a6>
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a4f      	ldr	r2, [pc, #316]	; (80081cc <UART_SetConfig+0x340>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d130      	bne.n	80080f4 <UART_SetConfig+0x268>
 8008092:	4b4c      	ldr	r3, [pc, #304]	; (80081c4 <UART_SetConfig+0x338>)
 8008094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008096:	f003 0307 	and.w	r3, r3, #7
 800809a:	2b05      	cmp	r3, #5
 800809c:	d826      	bhi.n	80080ec <UART_SetConfig+0x260>
 800809e:	a201      	add	r2, pc, #4	; (adr r2, 80080a4 <UART_SetConfig+0x218>)
 80080a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a4:	080080bd 	.word	0x080080bd
 80080a8:	080080c5 	.word	0x080080c5
 80080ac:	080080cd 	.word	0x080080cd
 80080b0:	080080d5 	.word	0x080080d5
 80080b4:	080080dd 	.word	0x080080dd
 80080b8:	080080e5 	.word	0x080080e5
 80080bc:	2300      	movs	r3, #0
 80080be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080c2:	e1b6      	b.n	8008432 <UART_SetConfig+0x5a6>
 80080c4:	2304      	movs	r3, #4
 80080c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ca:	e1b2      	b.n	8008432 <UART_SetConfig+0x5a6>
 80080cc:	2308      	movs	r3, #8
 80080ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080d2:	e1ae      	b.n	8008432 <UART_SetConfig+0x5a6>
 80080d4:	2310      	movs	r3, #16
 80080d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080da:	e1aa      	b.n	8008432 <UART_SetConfig+0x5a6>
 80080dc:	2320      	movs	r3, #32
 80080de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080e2:	e1a6      	b.n	8008432 <UART_SetConfig+0x5a6>
 80080e4:	2340      	movs	r3, #64	; 0x40
 80080e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ea:	e1a2      	b.n	8008432 <UART_SetConfig+0x5a6>
 80080ec:	2380      	movs	r3, #128	; 0x80
 80080ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080f2:	e19e      	b.n	8008432 <UART_SetConfig+0x5a6>
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a35      	ldr	r2, [pc, #212]	; (80081d0 <UART_SetConfig+0x344>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d130      	bne.n	8008160 <UART_SetConfig+0x2d4>
 80080fe:	4b31      	ldr	r3, [pc, #196]	; (80081c4 <UART_SetConfig+0x338>)
 8008100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008102:	f003 0307 	and.w	r3, r3, #7
 8008106:	2b05      	cmp	r3, #5
 8008108:	d826      	bhi.n	8008158 <UART_SetConfig+0x2cc>
 800810a:	a201      	add	r2, pc, #4	; (adr r2, 8008110 <UART_SetConfig+0x284>)
 800810c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008110:	08008129 	.word	0x08008129
 8008114:	08008131 	.word	0x08008131
 8008118:	08008139 	.word	0x08008139
 800811c:	08008141 	.word	0x08008141
 8008120:	08008149 	.word	0x08008149
 8008124:	08008151 	.word	0x08008151
 8008128:	2300      	movs	r3, #0
 800812a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800812e:	e180      	b.n	8008432 <UART_SetConfig+0x5a6>
 8008130:	2304      	movs	r3, #4
 8008132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008136:	e17c      	b.n	8008432 <UART_SetConfig+0x5a6>
 8008138:	2308      	movs	r3, #8
 800813a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800813e:	e178      	b.n	8008432 <UART_SetConfig+0x5a6>
 8008140:	2310      	movs	r3, #16
 8008142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008146:	e174      	b.n	8008432 <UART_SetConfig+0x5a6>
 8008148:	2320      	movs	r3, #32
 800814a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800814e:	e170      	b.n	8008432 <UART_SetConfig+0x5a6>
 8008150:	2340      	movs	r3, #64	; 0x40
 8008152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008156:	e16c      	b.n	8008432 <UART_SetConfig+0x5a6>
 8008158:	2380      	movs	r3, #128	; 0x80
 800815a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800815e:	e168      	b.n	8008432 <UART_SetConfig+0x5a6>
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a1b      	ldr	r2, [pc, #108]	; (80081d4 <UART_SetConfig+0x348>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d142      	bne.n	80081f0 <UART_SetConfig+0x364>
 800816a:	4b16      	ldr	r3, [pc, #88]	; (80081c4 <UART_SetConfig+0x338>)
 800816c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800816e:	f003 0307 	and.w	r3, r3, #7
 8008172:	2b05      	cmp	r3, #5
 8008174:	d838      	bhi.n	80081e8 <UART_SetConfig+0x35c>
 8008176:	a201      	add	r2, pc, #4	; (adr r2, 800817c <UART_SetConfig+0x2f0>)
 8008178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800817c:	08008195 	.word	0x08008195
 8008180:	0800819d 	.word	0x0800819d
 8008184:	080081a5 	.word	0x080081a5
 8008188:	080081ad 	.word	0x080081ad
 800818c:	080081d9 	.word	0x080081d9
 8008190:	080081e1 	.word	0x080081e1
 8008194:	2300      	movs	r3, #0
 8008196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800819a:	e14a      	b.n	8008432 <UART_SetConfig+0x5a6>
 800819c:	2304      	movs	r3, #4
 800819e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081a2:	e146      	b.n	8008432 <UART_SetConfig+0x5a6>
 80081a4:	2308      	movs	r3, #8
 80081a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081aa:	e142      	b.n	8008432 <UART_SetConfig+0x5a6>
 80081ac:	2310      	movs	r3, #16
 80081ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081b2:	e13e      	b.n	8008432 <UART_SetConfig+0x5a6>
 80081b4:	cfff69f3 	.word	0xcfff69f3
 80081b8:	58000c00 	.word	0x58000c00
 80081bc:	11fff4ff 	.word	0x11fff4ff
 80081c0:	40011000 	.word	0x40011000
 80081c4:	58024400 	.word	0x58024400
 80081c8:	40004400 	.word	0x40004400
 80081cc:	40004800 	.word	0x40004800
 80081d0:	40004c00 	.word	0x40004c00
 80081d4:	40005000 	.word	0x40005000
 80081d8:	2320      	movs	r3, #32
 80081da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081de:	e128      	b.n	8008432 <UART_SetConfig+0x5a6>
 80081e0:	2340      	movs	r3, #64	; 0x40
 80081e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081e6:	e124      	b.n	8008432 <UART_SetConfig+0x5a6>
 80081e8:	2380      	movs	r3, #128	; 0x80
 80081ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081ee:	e120      	b.n	8008432 <UART_SetConfig+0x5a6>
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4acb      	ldr	r2, [pc, #812]	; (8008524 <UART_SetConfig+0x698>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d176      	bne.n	80082e8 <UART_SetConfig+0x45c>
 80081fa:	4bcb      	ldr	r3, [pc, #812]	; (8008528 <UART_SetConfig+0x69c>)
 80081fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008202:	2b28      	cmp	r3, #40	; 0x28
 8008204:	d86c      	bhi.n	80082e0 <UART_SetConfig+0x454>
 8008206:	a201      	add	r2, pc, #4	; (adr r2, 800820c <UART_SetConfig+0x380>)
 8008208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800820c:	080082b1 	.word	0x080082b1
 8008210:	080082e1 	.word	0x080082e1
 8008214:	080082e1 	.word	0x080082e1
 8008218:	080082e1 	.word	0x080082e1
 800821c:	080082e1 	.word	0x080082e1
 8008220:	080082e1 	.word	0x080082e1
 8008224:	080082e1 	.word	0x080082e1
 8008228:	080082e1 	.word	0x080082e1
 800822c:	080082b9 	.word	0x080082b9
 8008230:	080082e1 	.word	0x080082e1
 8008234:	080082e1 	.word	0x080082e1
 8008238:	080082e1 	.word	0x080082e1
 800823c:	080082e1 	.word	0x080082e1
 8008240:	080082e1 	.word	0x080082e1
 8008244:	080082e1 	.word	0x080082e1
 8008248:	080082e1 	.word	0x080082e1
 800824c:	080082c1 	.word	0x080082c1
 8008250:	080082e1 	.word	0x080082e1
 8008254:	080082e1 	.word	0x080082e1
 8008258:	080082e1 	.word	0x080082e1
 800825c:	080082e1 	.word	0x080082e1
 8008260:	080082e1 	.word	0x080082e1
 8008264:	080082e1 	.word	0x080082e1
 8008268:	080082e1 	.word	0x080082e1
 800826c:	080082c9 	.word	0x080082c9
 8008270:	080082e1 	.word	0x080082e1
 8008274:	080082e1 	.word	0x080082e1
 8008278:	080082e1 	.word	0x080082e1
 800827c:	080082e1 	.word	0x080082e1
 8008280:	080082e1 	.word	0x080082e1
 8008284:	080082e1 	.word	0x080082e1
 8008288:	080082e1 	.word	0x080082e1
 800828c:	080082d1 	.word	0x080082d1
 8008290:	080082e1 	.word	0x080082e1
 8008294:	080082e1 	.word	0x080082e1
 8008298:	080082e1 	.word	0x080082e1
 800829c:	080082e1 	.word	0x080082e1
 80082a0:	080082e1 	.word	0x080082e1
 80082a4:	080082e1 	.word	0x080082e1
 80082a8:	080082e1 	.word	0x080082e1
 80082ac:	080082d9 	.word	0x080082d9
 80082b0:	2301      	movs	r3, #1
 80082b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082b6:	e0bc      	b.n	8008432 <UART_SetConfig+0x5a6>
 80082b8:	2304      	movs	r3, #4
 80082ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082be:	e0b8      	b.n	8008432 <UART_SetConfig+0x5a6>
 80082c0:	2308      	movs	r3, #8
 80082c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082c6:	e0b4      	b.n	8008432 <UART_SetConfig+0x5a6>
 80082c8:	2310      	movs	r3, #16
 80082ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ce:	e0b0      	b.n	8008432 <UART_SetConfig+0x5a6>
 80082d0:	2320      	movs	r3, #32
 80082d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082d6:	e0ac      	b.n	8008432 <UART_SetConfig+0x5a6>
 80082d8:	2340      	movs	r3, #64	; 0x40
 80082da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082de:	e0a8      	b.n	8008432 <UART_SetConfig+0x5a6>
 80082e0:	2380      	movs	r3, #128	; 0x80
 80082e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082e6:	e0a4      	b.n	8008432 <UART_SetConfig+0x5a6>
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a8f      	ldr	r2, [pc, #572]	; (800852c <UART_SetConfig+0x6a0>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d130      	bne.n	8008354 <UART_SetConfig+0x4c8>
 80082f2:	4b8d      	ldr	r3, [pc, #564]	; (8008528 <UART_SetConfig+0x69c>)
 80082f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082f6:	f003 0307 	and.w	r3, r3, #7
 80082fa:	2b05      	cmp	r3, #5
 80082fc:	d826      	bhi.n	800834c <UART_SetConfig+0x4c0>
 80082fe:	a201      	add	r2, pc, #4	; (adr r2, 8008304 <UART_SetConfig+0x478>)
 8008300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008304:	0800831d 	.word	0x0800831d
 8008308:	08008325 	.word	0x08008325
 800830c:	0800832d 	.word	0x0800832d
 8008310:	08008335 	.word	0x08008335
 8008314:	0800833d 	.word	0x0800833d
 8008318:	08008345 	.word	0x08008345
 800831c:	2300      	movs	r3, #0
 800831e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008322:	e086      	b.n	8008432 <UART_SetConfig+0x5a6>
 8008324:	2304      	movs	r3, #4
 8008326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800832a:	e082      	b.n	8008432 <UART_SetConfig+0x5a6>
 800832c:	2308      	movs	r3, #8
 800832e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008332:	e07e      	b.n	8008432 <UART_SetConfig+0x5a6>
 8008334:	2310      	movs	r3, #16
 8008336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800833a:	e07a      	b.n	8008432 <UART_SetConfig+0x5a6>
 800833c:	2320      	movs	r3, #32
 800833e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008342:	e076      	b.n	8008432 <UART_SetConfig+0x5a6>
 8008344:	2340      	movs	r3, #64	; 0x40
 8008346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800834a:	e072      	b.n	8008432 <UART_SetConfig+0x5a6>
 800834c:	2380      	movs	r3, #128	; 0x80
 800834e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008352:	e06e      	b.n	8008432 <UART_SetConfig+0x5a6>
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a75      	ldr	r2, [pc, #468]	; (8008530 <UART_SetConfig+0x6a4>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d130      	bne.n	80083c0 <UART_SetConfig+0x534>
 800835e:	4b72      	ldr	r3, [pc, #456]	; (8008528 <UART_SetConfig+0x69c>)
 8008360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008362:	f003 0307 	and.w	r3, r3, #7
 8008366:	2b05      	cmp	r3, #5
 8008368:	d826      	bhi.n	80083b8 <UART_SetConfig+0x52c>
 800836a:	a201      	add	r2, pc, #4	; (adr r2, 8008370 <UART_SetConfig+0x4e4>)
 800836c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008370:	08008389 	.word	0x08008389
 8008374:	08008391 	.word	0x08008391
 8008378:	08008399 	.word	0x08008399
 800837c:	080083a1 	.word	0x080083a1
 8008380:	080083a9 	.word	0x080083a9
 8008384:	080083b1 	.word	0x080083b1
 8008388:	2300      	movs	r3, #0
 800838a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800838e:	e050      	b.n	8008432 <UART_SetConfig+0x5a6>
 8008390:	2304      	movs	r3, #4
 8008392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008396:	e04c      	b.n	8008432 <UART_SetConfig+0x5a6>
 8008398:	2308      	movs	r3, #8
 800839a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800839e:	e048      	b.n	8008432 <UART_SetConfig+0x5a6>
 80083a0:	2310      	movs	r3, #16
 80083a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083a6:	e044      	b.n	8008432 <UART_SetConfig+0x5a6>
 80083a8:	2320      	movs	r3, #32
 80083aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ae:	e040      	b.n	8008432 <UART_SetConfig+0x5a6>
 80083b0:	2340      	movs	r3, #64	; 0x40
 80083b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083b6:	e03c      	b.n	8008432 <UART_SetConfig+0x5a6>
 80083b8:	2380      	movs	r3, #128	; 0x80
 80083ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083be:	e038      	b.n	8008432 <UART_SetConfig+0x5a6>
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a5b      	ldr	r2, [pc, #364]	; (8008534 <UART_SetConfig+0x6a8>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d130      	bne.n	800842c <UART_SetConfig+0x5a0>
 80083ca:	4b57      	ldr	r3, [pc, #348]	; (8008528 <UART_SetConfig+0x69c>)
 80083cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083ce:	f003 0307 	and.w	r3, r3, #7
 80083d2:	2b05      	cmp	r3, #5
 80083d4:	d826      	bhi.n	8008424 <UART_SetConfig+0x598>
 80083d6:	a201      	add	r2, pc, #4	; (adr r2, 80083dc <UART_SetConfig+0x550>)
 80083d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083dc:	080083f5 	.word	0x080083f5
 80083e0:	080083fd 	.word	0x080083fd
 80083e4:	08008405 	.word	0x08008405
 80083e8:	0800840d 	.word	0x0800840d
 80083ec:	08008415 	.word	0x08008415
 80083f0:	0800841d 	.word	0x0800841d
 80083f4:	2302      	movs	r3, #2
 80083f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083fa:	e01a      	b.n	8008432 <UART_SetConfig+0x5a6>
 80083fc:	2304      	movs	r3, #4
 80083fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008402:	e016      	b.n	8008432 <UART_SetConfig+0x5a6>
 8008404:	2308      	movs	r3, #8
 8008406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800840a:	e012      	b.n	8008432 <UART_SetConfig+0x5a6>
 800840c:	2310      	movs	r3, #16
 800840e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008412:	e00e      	b.n	8008432 <UART_SetConfig+0x5a6>
 8008414:	2320      	movs	r3, #32
 8008416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800841a:	e00a      	b.n	8008432 <UART_SetConfig+0x5a6>
 800841c:	2340      	movs	r3, #64	; 0x40
 800841e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008422:	e006      	b.n	8008432 <UART_SetConfig+0x5a6>
 8008424:	2380      	movs	r3, #128	; 0x80
 8008426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800842a:	e002      	b.n	8008432 <UART_SetConfig+0x5a6>
 800842c:	2380      	movs	r3, #128	; 0x80
 800842e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a3f      	ldr	r2, [pc, #252]	; (8008534 <UART_SetConfig+0x6a8>)
 8008438:	4293      	cmp	r3, r2
 800843a:	f040 80f8 	bne.w	800862e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800843e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008442:	2b20      	cmp	r3, #32
 8008444:	dc46      	bgt.n	80084d4 <UART_SetConfig+0x648>
 8008446:	2b02      	cmp	r3, #2
 8008448:	f2c0 8082 	blt.w	8008550 <UART_SetConfig+0x6c4>
 800844c:	3b02      	subs	r3, #2
 800844e:	2b1e      	cmp	r3, #30
 8008450:	d87e      	bhi.n	8008550 <UART_SetConfig+0x6c4>
 8008452:	a201      	add	r2, pc, #4	; (adr r2, 8008458 <UART_SetConfig+0x5cc>)
 8008454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008458:	080084db 	.word	0x080084db
 800845c:	08008551 	.word	0x08008551
 8008460:	080084e3 	.word	0x080084e3
 8008464:	08008551 	.word	0x08008551
 8008468:	08008551 	.word	0x08008551
 800846c:	08008551 	.word	0x08008551
 8008470:	080084f3 	.word	0x080084f3
 8008474:	08008551 	.word	0x08008551
 8008478:	08008551 	.word	0x08008551
 800847c:	08008551 	.word	0x08008551
 8008480:	08008551 	.word	0x08008551
 8008484:	08008551 	.word	0x08008551
 8008488:	08008551 	.word	0x08008551
 800848c:	08008551 	.word	0x08008551
 8008490:	08008503 	.word	0x08008503
 8008494:	08008551 	.word	0x08008551
 8008498:	08008551 	.word	0x08008551
 800849c:	08008551 	.word	0x08008551
 80084a0:	08008551 	.word	0x08008551
 80084a4:	08008551 	.word	0x08008551
 80084a8:	08008551 	.word	0x08008551
 80084ac:	08008551 	.word	0x08008551
 80084b0:	08008551 	.word	0x08008551
 80084b4:	08008551 	.word	0x08008551
 80084b8:	08008551 	.word	0x08008551
 80084bc:	08008551 	.word	0x08008551
 80084c0:	08008551 	.word	0x08008551
 80084c4:	08008551 	.word	0x08008551
 80084c8:	08008551 	.word	0x08008551
 80084cc:	08008551 	.word	0x08008551
 80084d0:	08008543 	.word	0x08008543
 80084d4:	2b40      	cmp	r3, #64	; 0x40
 80084d6:	d037      	beq.n	8008548 <UART_SetConfig+0x6bc>
 80084d8:	e03a      	b.n	8008550 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80084da:	f7fc ffdb 	bl	8005494 <HAL_RCCEx_GetD3PCLK1Freq>
 80084de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80084e0:	e03c      	b.n	800855c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7fc ffea 	bl	80054c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80084ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084f0:	e034      	b.n	800855c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084f2:	f107 0318 	add.w	r3, r7, #24
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7fd f936 	bl	8005768 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80084fc:	69fb      	ldr	r3, [r7, #28]
 80084fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008500:	e02c      	b.n	800855c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008502:	4b09      	ldr	r3, [pc, #36]	; (8008528 <UART_SetConfig+0x69c>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f003 0320 	and.w	r3, r3, #32
 800850a:	2b00      	cmp	r3, #0
 800850c:	d016      	beq.n	800853c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800850e:	4b06      	ldr	r3, [pc, #24]	; (8008528 <UART_SetConfig+0x69c>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	08db      	lsrs	r3, r3, #3
 8008514:	f003 0303 	and.w	r3, r3, #3
 8008518:	4a07      	ldr	r2, [pc, #28]	; (8008538 <UART_SetConfig+0x6ac>)
 800851a:	fa22 f303 	lsr.w	r3, r2, r3
 800851e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008520:	e01c      	b.n	800855c <UART_SetConfig+0x6d0>
 8008522:	bf00      	nop
 8008524:	40011400 	.word	0x40011400
 8008528:	58024400 	.word	0x58024400
 800852c:	40007800 	.word	0x40007800
 8008530:	40007c00 	.word	0x40007c00
 8008534:	58000c00 	.word	0x58000c00
 8008538:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800853c:	4b9d      	ldr	r3, [pc, #628]	; (80087b4 <UART_SetConfig+0x928>)
 800853e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008540:	e00c      	b.n	800855c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008542:	4b9d      	ldr	r3, [pc, #628]	; (80087b8 <UART_SetConfig+0x92c>)
 8008544:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008546:	e009      	b.n	800855c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008548:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800854c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800854e:	e005      	b.n	800855c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008550:	2300      	movs	r3, #0
 8008552:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008554:	2301      	movs	r3, #1
 8008556:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800855a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800855c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800855e:	2b00      	cmp	r3, #0
 8008560:	f000 81de 	beq.w	8008920 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008568:	4a94      	ldr	r2, [pc, #592]	; (80087bc <UART_SetConfig+0x930>)
 800856a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800856e:	461a      	mov	r2, r3
 8008570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008572:	fbb3 f3f2 	udiv	r3, r3, r2
 8008576:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	685a      	ldr	r2, [r3, #4]
 800857c:	4613      	mov	r3, r2
 800857e:	005b      	lsls	r3, r3, #1
 8008580:	4413      	add	r3, r2
 8008582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008584:	429a      	cmp	r2, r3
 8008586:	d305      	bcc.n	8008594 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800858e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008590:	429a      	cmp	r2, r3
 8008592:	d903      	bls.n	800859c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008594:	2301      	movs	r3, #1
 8008596:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800859a:	e1c1      	b.n	8008920 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800859c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800859e:	2200      	movs	r2, #0
 80085a0:	60bb      	str	r3, [r7, #8]
 80085a2:	60fa      	str	r2, [r7, #12]
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a8:	4a84      	ldr	r2, [pc, #528]	; (80087bc <UART_SetConfig+0x930>)
 80085aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	2200      	movs	r2, #0
 80085b2:	603b      	str	r3, [r7, #0]
 80085b4:	607a      	str	r2, [r7, #4]
 80085b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80085be:	f7f7 fee7 	bl	8000390 <__aeabi_uldivmod>
 80085c2:	4602      	mov	r2, r0
 80085c4:	460b      	mov	r3, r1
 80085c6:	4610      	mov	r0, r2
 80085c8:	4619      	mov	r1, r3
 80085ca:	f04f 0200 	mov.w	r2, #0
 80085ce:	f04f 0300 	mov.w	r3, #0
 80085d2:	020b      	lsls	r3, r1, #8
 80085d4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80085d8:	0202      	lsls	r2, r0, #8
 80085da:	6979      	ldr	r1, [r7, #20]
 80085dc:	6849      	ldr	r1, [r1, #4]
 80085de:	0849      	lsrs	r1, r1, #1
 80085e0:	2000      	movs	r0, #0
 80085e2:	460c      	mov	r4, r1
 80085e4:	4605      	mov	r5, r0
 80085e6:	eb12 0804 	adds.w	r8, r2, r4
 80085ea:	eb43 0905 	adc.w	r9, r3, r5
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	469a      	mov	sl, r3
 80085f6:	4693      	mov	fp, r2
 80085f8:	4652      	mov	r2, sl
 80085fa:	465b      	mov	r3, fp
 80085fc:	4640      	mov	r0, r8
 80085fe:	4649      	mov	r1, r9
 8008600:	f7f7 fec6 	bl	8000390 <__aeabi_uldivmod>
 8008604:	4602      	mov	r2, r0
 8008606:	460b      	mov	r3, r1
 8008608:	4613      	mov	r3, r2
 800860a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800860c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800860e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008612:	d308      	bcc.n	8008626 <UART_SetConfig+0x79a>
 8008614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008616:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800861a:	d204      	bcs.n	8008626 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008622:	60da      	str	r2, [r3, #12]
 8008624:	e17c      	b.n	8008920 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008626:	2301      	movs	r3, #1
 8008628:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800862c:	e178      	b.n	8008920 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	69db      	ldr	r3, [r3, #28]
 8008632:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008636:	f040 80c5 	bne.w	80087c4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800863a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800863e:	2b20      	cmp	r3, #32
 8008640:	dc48      	bgt.n	80086d4 <UART_SetConfig+0x848>
 8008642:	2b00      	cmp	r3, #0
 8008644:	db7b      	blt.n	800873e <UART_SetConfig+0x8b2>
 8008646:	2b20      	cmp	r3, #32
 8008648:	d879      	bhi.n	800873e <UART_SetConfig+0x8b2>
 800864a:	a201      	add	r2, pc, #4	; (adr r2, 8008650 <UART_SetConfig+0x7c4>)
 800864c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008650:	080086db 	.word	0x080086db
 8008654:	080086e3 	.word	0x080086e3
 8008658:	0800873f 	.word	0x0800873f
 800865c:	0800873f 	.word	0x0800873f
 8008660:	080086eb 	.word	0x080086eb
 8008664:	0800873f 	.word	0x0800873f
 8008668:	0800873f 	.word	0x0800873f
 800866c:	0800873f 	.word	0x0800873f
 8008670:	080086fb 	.word	0x080086fb
 8008674:	0800873f 	.word	0x0800873f
 8008678:	0800873f 	.word	0x0800873f
 800867c:	0800873f 	.word	0x0800873f
 8008680:	0800873f 	.word	0x0800873f
 8008684:	0800873f 	.word	0x0800873f
 8008688:	0800873f 	.word	0x0800873f
 800868c:	0800873f 	.word	0x0800873f
 8008690:	0800870b 	.word	0x0800870b
 8008694:	0800873f 	.word	0x0800873f
 8008698:	0800873f 	.word	0x0800873f
 800869c:	0800873f 	.word	0x0800873f
 80086a0:	0800873f 	.word	0x0800873f
 80086a4:	0800873f 	.word	0x0800873f
 80086a8:	0800873f 	.word	0x0800873f
 80086ac:	0800873f 	.word	0x0800873f
 80086b0:	0800873f 	.word	0x0800873f
 80086b4:	0800873f 	.word	0x0800873f
 80086b8:	0800873f 	.word	0x0800873f
 80086bc:	0800873f 	.word	0x0800873f
 80086c0:	0800873f 	.word	0x0800873f
 80086c4:	0800873f 	.word	0x0800873f
 80086c8:	0800873f 	.word	0x0800873f
 80086cc:	0800873f 	.word	0x0800873f
 80086d0:	08008731 	.word	0x08008731
 80086d4:	2b40      	cmp	r3, #64	; 0x40
 80086d6:	d02e      	beq.n	8008736 <UART_SetConfig+0x8aa>
 80086d8:	e031      	b.n	800873e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086da:	f7fb ff27 	bl	800452c <HAL_RCC_GetPCLK1Freq>
 80086de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80086e0:	e033      	b.n	800874a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086e2:	f7fb ff39 	bl	8004558 <HAL_RCC_GetPCLK2Freq>
 80086e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80086e8:	e02f      	b.n	800874a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086ee:	4618      	mov	r0, r3
 80086f0:	f7fc fee6 	bl	80054c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80086f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086f8:	e027      	b.n	800874a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086fa:	f107 0318 	add.w	r3, r7, #24
 80086fe:	4618      	mov	r0, r3
 8008700:	f7fd f832 	bl	8005768 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008704:	69fb      	ldr	r3, [r7, #28]
 8008706:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008708:	e01f      	b.n	800874a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800870a:	4b2d      	ldr	r3, [pc, #180]	; (80087c0 <UART_SetConfig+0x934>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f003 0320 	and.w	r3, r3, #32
 8008712:	2b00      	cmp	r3, #0
 8008714:	d009      	beq.n	800872a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008716:	4b2a      	ldr	r3, [pc, #168]	; (80087c0 <UART_SetConfig+0x934>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	08db      	lsrs	r3, r3, #3
 800871c:	f003 0303 	and.w	r3, r3, #3
 8008720:	4a24      	ldr	r2, [pc, #144]	; (80087b4 <UART_SetConfig+0x928>)
 8008722:	fa22 f303 	lsr.w	r3, r2, r3
 8008726:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008728:	e00f      	b.n	800874a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800872a:	4b22      	ldr	r3, [pc, #136]	; (80087b4 <UART_SetConfig+0x928>)
 800872c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800872e:	e00c      	b.n	800874a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008730:	4b21      	ldr	r3, [pc, #132]	; (80087b8 <UART_SetConfig+0x92c>)
 8008732:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008734:	e009      	b.n	800874a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008736:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800873a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800873c:	e005      	b.n	800874a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800873e:	2300      	movs	r3, #0
 8008740:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008742:	2301      	movs	r3, #1
 8008744:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008748:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800874a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800874c:	2b00      	cmp	r3, #0
 800874e:	f000 80e7 	beq.w	8008920 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008756:	4a19      	ldr	r2, [pc, #100]	; (80087bc <UART_SetConfig+0x930>)
 8008758:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800875c:	461a      	mov	r2, r3
 800875e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008760:	fbb3 f3f2 	udiv	r3, r3, r2
 8008764:	005a      	lsls	r2, r3, #1
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	085b      	lsrs	r3, r3, #1
 800876c:	441a      	add	r2, r3
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	fbb2 f3f3 	udiv	r3, r2, r3
 8008776:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800877a:	2b0f      	cmp	r3, #15
 800877c:	d916      	bls.n	80087ac <UART_SetConfig+0x920>
 800877e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008784:	d212      	bcs.n	80087ac <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008788:	b29b      	uxth	r3, r3
 800878a:	f023 030f 	bic.w	r3, r3, #15
 800878e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008792:	085b      	lsrs	r3, r3, #1
 8008794:	b29b      	uxth	r3, r3
 8008796:	f003 0307 	and.w	r3, r3, #7
 800879a:	b29a      	uxth	r2, r3
 800879c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800879e:	4313      	orrs	r3, r2
 80087a0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80087a8:	60da      	str	r2, [r3, #12]
 80087aa:	e0b9      	b.n	8008920 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80087b2:	e0b5      	b.n	8008920 <UART_SetConfig+0xa94>
 80087b4:	03d09000 	.word	0x03d09000
 80087b8:	003d0900 	.word	0x003d0900
 80087bc:	0800d588 	.word	0x0800d588
 80087c0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80087c4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80087c8:	2b20      	cmp	r3, #32
 80087ca:	dc49      	bgt.n	8008860 <UART_SetConfig+0x9d4>
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	db7c      	blt.n	80088ca <UART_SetConfig+0xa3e>
 80087d0:	2b20      	cmp	r3, #32
 80087d2:	d87a      	bhi.n	80088ca <UART_SetConfig+0xa3e>
 80087d4:	a201      	add	r2, pc, #4	; (adr r2, 80087dc <UART_SetConfig+0x950>)
 80087d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087da:	bf00      	nop
 80087dc:	08008867 	.word	0x08008867
 80087e0:	0800886f 	.word	0x0800886f
 80087e4:	080088cb 	.word	0x080088cb
 80087e8:	080088cb 	.word	0x080088cb
 80087ec:	08008877 	.word	0x08008877
 80087f0:	080088cb 	.word	0x080088cb
 80087f4:	080088cb 	.word	0x080088cb
 80087f8:	080088cb 	.word	0x080088cb
 80087fc:	08008887 	.word	0x08008887
 8008800:	080088cb 	.word	0x080088cb
 8008804:	080088cb 	.word	0x080088cb
 8008808:	080088cb 	.word	0x080088cb
 800880c:	080088cb 	.word	0x080088cb
 8008810:	080088cb 	.word	0x080088cb
 8008814:	080088cb 	.word	0x080088cb
 8008818:	080088cb 	.word	0x080088cb
 800881c:	08008897 	.word	0x08008897
 8008820:	080088cb 	.word	0x080088cb
 8008824:	080088cb 	.word	0x080088cb
 8008828:	080088cb 	.word	0x080088cb
 800882c:	080088cb 	.word	0x080088cb
 8008830:	080088cb 	.word	0x080088cb
 8008834:	080088cb 	.word	0x080088cb
 8008838:	080088cb 	.word	0x080088cb
 800883c:	080088cb 	.word	0x080088cb
 8008840:	080088cb 	.word	0x080088cb
 8008844:	080088cb 	.word	0x080088cb
 8008848:	080088cb 	.word	0x080088cb
 800884c:	080088cb 	.word	0x080088cb
 8008850:	080088cb 	.word	0x080088cb
 8008854:	080088cb 	.word	0x080088cb
 8008858:	080088cb 	.word	0x080088cb
 800885c:	080088bd 	.word	0x080088bd
 8008860:	2b40      	cmp	r3, #64	; 0x40
 8008862:	d02e      	beq.n	80088c2 <UART_SetConfig+0xa36>
 8008864:	e031      	b.n	80088ca <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008866:	f7fb fe61 	bl	800452c <HAL_RCC_GetPCLK1Freq>
 800886a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800886c:	e033      	b.n	80088d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800886e:	f7fb fe73 	bl	8004558 <HAL_RCC_GetPCLK2Freq>
 8008872:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008874:	e02f      	b.n	80088d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008876:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800887a:	4618      	mov	r0, r3
 800887c:	f7fc fe20 	bl	80054c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008882:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008884:	e027      	b.n	80088d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008886:	f107 0318 	add.w	r3, r7, #24
 800888a:	4618      	mov	r0, r3
 800888c:	f7fc ff6c 	bl	8005768 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008894:	e01f      	b.n	80088d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008896:	4b2d      	ldr	r3, [pc, #180]	; (800894c <UART_SetConfig+0xac0>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f003 0320 	and.w	r3, r3, #32
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d009      	beq.n	80088b6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80088a2:	4b2a      	ldr	r3, [pc, #168]	; (800894c <UART_SetConfig+0xac0>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	08db      	lsrs	r3, r3, #3
 80088a8:	f003 0303 	and.w	r3, r3, #3
 80088ac:	4a28      	ldr	r2, [pc, #160]	; (8008950 <UART_SetConfig+0xac4>)
 80088ae:	fa22 f303 	lsr.w	r3, r2, r3
 80088b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80088b4:	e00f      	b.n	80088d6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80088b6:	4b26      	ldr	r3, [pc, #152]	; (8008950 <UART_SetConfig+0xac4>)
 80088b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088ba:	e00c      	b.n	80088d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80088bc:	4b25      	ldr	r3, [pc, #148]	; (8008954 <UART_SetConfig+0xac8>)
 80088be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088c0:	e009      	b.n	80088d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088c8:	e005      	b.n	80088d6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80088ca:	2300      	movs	r3, #0
 80088cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80088ce:	2301      	movs	r3, #1
 80088d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80088d4:	bf00      	nop
    }

    if (pclk != 0U)
 80088d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d021      	beq.n	8008920 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e0:	4a1d      	ldr	r2, [pc, #116]	; (8008958 <UART_SetConfig+0xacc>)
 80088e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088e6:	461a      	mov	r2, r3
 80088e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	085b      	lsrs	r3, r3, #1
 80088f4:	441a      	add	r2, r3
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80088fe:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008902:	2b0f      	cmp	r3, #15
 8008904:	d909      	bls.n	800891a <UART_SetConfig+0xa8e>
 8008906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800890c:	d205      	bcs.n	800891a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800890e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008910:	b29a      	uxth	r2, r3
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	60da      	str	r2, [r3, #12]
 8008918:	e002      	b.n	8008920 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	2201      	movs	r2, #1
 8008924:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	2201      	movs	r2, #1
 800892c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	2200      	movs	r2, #0
 8008934:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	2200      	movs	r2, #0
 800893a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800893c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008940:	4618      	mov	r0, r3
 8008942:	3748      	adds	r7, #72	; 0x48
 8008944:	46bd      	mov	sp, r7
 8008946:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800894a:	bf00      	nop
 800894c:	58024400 	.word	0x58024400
 8008950:	03d09000 	.word	0x03d09000
 8008954:	003d0900 	.word	0x003d0900
 8008958:	0800d588 	.word	0x0800d588

0800895c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008968:	f003 0301 	and.w	r3, r3, #1
 800896c:	2b00      	cmp	r3, #0
 800896e:	d00a      	beq.n	8008986 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	430a      	orrs	r2, r1
 8008984:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800898a:	f003 0302 	and.w	r3, r3, #2
 800898e:	2b00      	cmp	r3, #0
 8008990:	d00a      	beq.n	80089a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	430a      	orrs	r2, r1
 80089a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ac:	f003 0304 	and.w	r3, r3, #4
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d00a      	beq.n	80089ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	430a      	orrs	r2, r1
 80089c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ce:	f003 0308 	and.w	r3, r3, #8
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d00a      	beq.n	80089ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	430a      	orrs	r2, r1
 80089ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f0:	f003 0310 	and.w	r3, r3, #16
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d00a      	beq.n	8008a0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	430a      	orrs	r2, r1
 8008a0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a12:	f003 0320 	and.w	r3, r3, #32
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00a      	beq.n	8008a30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	430a      	orrs	r2, r1
 8008a2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d01a      	beq.n	8008a72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	430a      	orrs	r2, r1
 8008a50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a5a:	d10a      	bne.n	8008a72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	430a      	orrs	r2, r1
 8008a70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00a      	beq.n	8008a94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	430a      	orrs	r2, r1
 8008a92:	605a      	str	r2, [r3, #4]
  }
}
 8008a94:	bf00      	nop
 8008a96:	370c      	adds	r7, #12
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr

08008aa0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b086      	sub	sp, #24
 8008aa4:	af02      	add	r7, sp, #8
 8008aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ab0:	f7f9 fedc 	bl	800286c <HAL_GetTick>
 8008ab4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f003 0308 	and.w	r3, r3, #8
 8008ac0:	2b08      	cmp	r3, #8
 8008ac2:	d10e      	bne.n	8008ae2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ac4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ac8:	9300      	str	r3, [sp, #0]
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2200      	movs	r2, #0
 8008ace:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 f82f 	bl	8008b36 <UART_WaitOnFlagUntilTimeout>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d001      	beq.n	8008ae2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ade:	2303      	movs	r3, #3
 8008ae0:	e025      	b.n	8008b2e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f003 0304 	and.w	r3, r3, #4
 8008aec:	2b04      	cmp	r3, #4
 8008aee:	d10e      	bne.n	8008b0e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008af0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008af4:	9300      	str	r3, [sp, #0]
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2200      	movs	r2, #0
 8008afa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 f819 	bl	8008b36 <UART_WaitOnFlagUntilTimeout>
 8008b04:	4603      	mov	r3, r0
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d001      	beq.n	8008b0e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b0a:	2303      	movs	r3, #3
 8008b0c:	e00f      	b.n	8008b2e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2220      	movs	r2, #32
 8008b12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2220      	movs	r2, #32
 8008b1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2200      	movs	r2, #0
 8008b22:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2200      	movs	r2, #0
 8008b28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3710      	adds	r7, #16
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}

08008b36 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b36:	b580      	push	{r7, lr}
 8008b38:	b09c      	sub	sp, #112	; 0x70
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	60f8      	str	r0, [r7, #12]
 8008b3e:	60b9      	str	r1, [r7, #8]
 8008b40:	603b      	str	r3, [r7, #0]
 8008b42:	4613      	mov	r3, r2
 8008b44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b46:	e0a9      	b.n	8008c9c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b4e:	f000 80a5 	beq.w	8008c9c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b52:	f7f9 fe8b 	bl	800286c <HAL_GetTick>
 8008b56:	4602      	mov	r2, r0
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	1ad3      	subs	r3, r2, r3
 8008b5c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d302      	bcc.n	8008b68 <UART_WaitOnFlagUntilTimeout+0x32>
 8008b62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d140      	bne.n	8008bea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b70:	e853 3f00 	ldrex	r3, [r3]
 8008b74:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008b76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008b7c:	667b      	str	r3, [r7, #100]	; 0x64
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	461a      	mov	r2, r3
 8008b84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b88:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b8a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008b8e:	e841 2300 	strex	r3, r2, [r1]
 8008b92:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008b94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d1e6      	bne.n	8008b68 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	3308      	adds	r3, #8
 8008ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ba4:	e853 3f00 	ldrex	r3, [r3]
 8008ba8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bac:	f023 0301 	bic.w	r3, r3, #1
 8008bb0:	663b      	str	r3, [r7, #96]	; 0x60
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	3308      	adds	r3, #8
 8008bb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008bba:	64ba      	str	r2, [r7, #72]	; 0x48
 8008bbc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bbe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008bc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bc2:	e841 2300 	strex	r3, r2, [r1]
 8008bc6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008bc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d1e5      	bne.n	8008b9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2220      	movs	r2, #32
 8008bd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2220      	movs	r2, #32
 8008bda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2200      	movs	r2, #0
 8008be2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008be6:	2303      	movs	r3, #3
 8008be8:	e069      	b.n	8008cbe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f003 0304 	and.w	r3, r3, #4
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d051      	beq.n	8008c9c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	69db      	ldr	r3, [r3, #28]
 8008bfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c06:	d149      	bne.n	8008c9c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c10:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c1a:	e853 3f00 	ldrex	r3, [r3]
 8008c1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c22:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008c26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c30:	637b      	str	r3, [r7, #52]	; 0x34
 8008c32:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008c36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c38:	e841 2300 	strex	r3, r2, [r1]
 8008c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d1e6      	bne.n	8008c12 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	3308      	adds	r3, #8
 8008c4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	e853 3f00 	ldrex	r3, [r3]
 8008c52:	613b      	str	r3, [r7, #16]
   return(result);
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	f023 0301 	bic.w	r3, r3, #1
 8008c5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	3308      	adds	r3, #8
 8008c62:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008c64:	623a      	str	r2, [r7, #32]
 8008c66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c68:	69f9      	ldr	r1, [r7, #28]
 8008c6a:	6a3a      	ldr	r2, [r7, #32]
 8008c6c:	e841 2300 	strex	r3, r2, [r1]
 8008c70:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c72:	69bb      	ldr	r3, [r7, #24]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d1e5      	bne.n	8008c44 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2220      	movs	r2, #32
 8008c7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2220      	movs	r2, #32
 8008c84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2220      	movs	r2, #32
 8008c8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2200      	movs	r2, #0
 8008c94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008c98:	2303      	movs	r3, #3
 8008c9a:	e010      	b.n	8008cbe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	69da      	ldr	r2, [r3, #28]
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	4013      	ands	r3, r2
 8008ca6:	68ba      	ldr	r2, [r7, #8]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	bf0c      	ite	eq
 8008cac:	2301      	moveq	r3, #1
 8008cae:	2300      	movne	r3, #0
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	79fb      	ldrb	r3, [r7, #7]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	f43f af46 	beq.w	8008b48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008cbc:	2300      	movs	r3, #0
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3770      	adds	r7, #112	; 0x70
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}

08008cc6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008cc6:	b480      	push	{r7}
 8008cc8:	b085      	sub	sp, #20
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d101      	bne.n	8008cdc <HAL_UARTEx_DisableFifoMode+0x16>
 8008cd8:	2302      	movs	r3, #2
 8008cda:	e027      	b.n	8008d2c <HAL_UARTEx_DisableFifoMode+0x66>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2224      	movs	r2, #36	; 0x24
 8008ce8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f022 0201 	bic.w	r2, r2, #1
 8008d02:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008d0a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	68fa      	ldr	r2, [r7, #12]
 8008d18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2220      	movs	r2, #32
 8008d1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2200      	movs	r2, #0
 8008d26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008d2a:	2300      	movs	r3, #0
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3714      	adds	r7, #20
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr

08008d38 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d101      	bne.n	8008d50 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008d4c:	2302      	movs	r3, #2
 8008d4e:	e02d      	b.n	8008dac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2201      	movs	r2, #1
 8008d54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2224      	movs	r2, #36	; 0x24
 8008d5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f022 0201 	bic.w	r2, r2, #1
 8008d76:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	683a      	ldr	r2, [r7, #0]
 8008d88:	430a      	orrs	r2, r1
 8008d8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 f84f 	bl	8008e30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	68fa      	ldr	r2, [r7, #12]
 8008d98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2220      	movs	r2, #32
 8008d9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2200      	movs	r2, #0
 8008da6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008daa:	2300      	movs	r3, #0
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3710      	adds	r7, #16
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d101      	bne.n	8008dcc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008dc8:	2302      	movs	r3, #2
 8008dca:	e02d      	b.n	8008e28 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2224      	movs	r2, #36	; 0x24
 8008dd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f022 0201 	bic.w	r2, r2, #1
 8008df2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	689b      	ldr	r3, [r3, #8]
 8008dfa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	683a      	ldr	r2, [r7, #0]
 8008e04:	430a      	orrs	r2, r1
 8008e06:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f000 f811 	bl	8008e30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	68fa      	ldr	r2, [r7, #12]
 8008e14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2220      	movs	r2, #32
 8008e1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2200      	movs	r2, #0
 8008e22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008e26:	2300      	movs	r3, #0
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3710      	adds	r7, #16
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b085      	sub	sp, #20
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d108      	bne.n	8008e52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2201      	movs	r2, #1
 8008e44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008e50:	e031      	b.n	8008eb6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008e52:	2310      	movs	r3, #16
 8008e54:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008e56:	2310      	movs	r3, #16
 8008e58:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	0e5b      	lsrs	r3, r3, #25
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	f003 0307 	and.w	r3, r3, #7
 8008e68:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	0f5b      	lsrs	r3, r3, #29
 8008e72:	b2db      	uxtb	r3, r3
 8008e74:	f003 0307 	and.w	r3, r3, #7
 8008e78:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e7a:	7bbb      	ldrb	r3, [r7, #14]
 8008e7c:	7b3a      	ldrb	r2, [r7, #12]
 8008e7e:	4911      	ldr	r1, [pc, #68]	; (8008ec4 <UARTEx_SetNbDataToProcess+0x94>)
 8008e80:	5c8a      	ldrb	r2, [r1, r2]
 8008e82:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008e86:	7b3a      	ldrb	r2, [r7, #12]
 8008e88:	490f      	ldr	r1, [pc, #60]	; (8008ec8 <UARTEx_SetNbDataToProcess+0x98>)
 8008e8a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e8c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e90:	b29a      	uxth	r2, r3
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e98:	7bfb      	ldrb	r3, [r7, #15]
 8008e9a:	7b7a      	ldrb	r2, [r7, #13]
 8008e9c:	4909      	ldr	r1, [pc, #36]	; (8008ec4 <UARTEx_SetNbDataToProcess+0x94>)
 8008e9e:	5c8a      	ldrb	r2, [r1, r2]
 8008ea0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008ea4:	7b7a      	ldrb	r2, [r7, #13]
 8008ea6:	4908      	ldr	r1, [pc, #32]	; (8008ec8 <UARTEx_SetNbDataToProcess+0x98>)
 8008ea8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008eaa:	fb93 f3f2 	sdiv	r3, r3, r2
 8008eae:	b29a      	uxth	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008eb6:	bf00      	nop
 8008eb8:	3714      	adds	r7, #20
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec0:	4770      	bx	lr
 8008ec2:	bf00      	nop
 8008ec4:	0800d5a0 	.word	0x0800d5a0
 8008ec8:	0800d5a8 	.word	0x0800d5a8

08008ecc <__NVIC_SetPriority>:
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b083      	sub	sp, #12
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	6039      	str	r1, [r7, #0]
 8008ed6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008ed8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	db0a      	blt.n	8008ef6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	b2da      	uxtb	r2, r3
 8008ee4:	490c      	ldr	r1, [pc, #48]	; (8008f18 <__NVIC_SetPriority+0x4c>)
 8008ee6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008eea:	0112      	lsls	r2, r2, #4
 8008eec:	b2d2      	uxtb	r2, r2
 8008eee:	440b      	add	r3, r1
 8008ef0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008ef4:	e00a      	b.n	8008f0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	b2da      	uxtb	r2, r3
 8008efa:	4908      	ldr	r1, [pc, #32]	; (8008f1c <__NVIC_SetPriority+0x50>)
 8008efc:	88fb      	ldrh	r3, [r7, #6]
 8008efe:	f003 030f 	and.w	r3, r3, #15
 8008f02:	3b04      	subs	r3, #4
 8008f04:	0112      	lsls	r2, r2, #4
 8008f06:	b2d2      	uxtb	r2, r2
 8008f08:	440b      	add	r3, r1
 8008f0a:	761a      	strb	r2, [r3, #24]
}
 8008f0c:	bf00      	nop
 8008f0e:	370c      	adds	r7, #12
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr
 8008f18:	e000e100 	.word	0xe000e100
 8008f1c:	e000ed00 	.word	0xe000ed00

08008f20 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008f20:	b580      	push	{r7, lr}
 8008f22:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008f24:	4b05      	ldr	r3, [pc, #20]	; (8008f3c <SysTick_Handler+0x1c>)
 8008f26:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008f28:	f002 f962 	bl	800b1f0 <xTaskGetSchedulerState>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d001      	beq.n	8008f36 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008f32:	f000 fd99 	bl	8009a68 <xPortSysTickHandler>
  }
}
 8008f36:	bf00      	nop
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	e000e010 	.word	0xe000e010

08008f40 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008f40:	b580      	push	{r7, lr}
 8008f42:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008f44:	2100      	movs	r1, #0
 8008f46:	f06f 0004 	mvn.w	r0, #4
 8008f4a:	f7ff ffbf 	bl	8008ecc <__NVIC_SetPriority>
#endif
}
 8008f4e:	bf00      	nop
 8008f50:	bd80      	pop	{r7, pc}
	...

08008f54 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f5a:	f3ef 8305 	mrs	r3, IPSR
 8008f5e:	603b      	str	r3, [r7, #0]
  return(result);
 8008f60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d003      	beq.n	8008f6e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008f66:	f06f 0305 	mvn.w	r3, #5
 8008f6a:	607b      	str	r3, [r7, #4]
 8008f6c:	e00c      	b.n	8008f88 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008f6e:	4b0a      	ldr	r3, [pc, #40]	; (8008f98 <osKernelInitialize+0x44>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d105      	bne.n	8008f82 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008f76:	4b08      	ldr	r3, [pc, #32]	; (8008f98 <osKernelInitialize+0x44>)
 8008f78:	2201      	movs	r2, #1
 8008f7a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	607b      	str	r3, [r7, #4]
 8008f80:	e002      	b.n	8008f88 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008f82:	f04f 33ff 	mov.w	r3, #4294967295
 8008f86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008f88:	687b      	ldr	r3, [r7, #4]
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	370c      	adds	r7, #12
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr
 8008f96:	bf00      	nop
 8008f98:	240004d8 	.word	0x240004d8

08008f9c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b082      	sub	sp, #8
 8008fa0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fa2:	f3ef 8305 	mrs	r3, IPSR
 8008fa6:	603b      	str	r3, [r7, #0]
  return(result);
 8008fa8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d003      	beq.n	8008fb6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008fae:	f06f 0305 	mvn.w	r3, #5
 8008fb2:	607b      	str	r3, [r7, #4]
 8008fb4:	e010      	b.n	8008fd8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008fb6:	4b0b      	ldr	r3, [pc, #44]	; (8008fe4 <osKernelStart+0x48>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d109      	bne.n	8008fd2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008fbe:	f7ff ffbf 	bl	8008f40 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008fc2:	4b08      	ldr	r3, [pc, #32]	; (8008fe4 <osKernelStart+0x48>)
 8008fc4:	2202      	movs	r2, #2
 8008fc6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008fc8:	f001 fcb6 	bl	800a938 <vTaskStartScheduler>
      stat = osOK;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	607b      	str	r3, [r7, #4]
 8008fd0:	e002      	b.n	8008fd8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8008fd6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008fd8:	687b      	ldr	r3, [r7, #4]
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3708      	adds	r7, #8
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	240004d8 	.word	0x240004d8

08008fe8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b08e      	sub	sp, #56	; 0x38
 8008fec:	af04      	add	r7, sp, #16
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	60b9      	str	r1, [r7, #8]
 8008ff2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ff8:	f3ef 8305 	mrs	r3, IPSR
 8008ffc:	617b      	str	r3, [r7, #20]
  return(result);
 8008ffe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009000:	2b00      	cmp	r3, #0
 8009002:	d17e      	bne.n	8009102 <osThreadNew+0x11a>
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d07b      	beq.n	8009102 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800900a:	2380      	movs	r3, #128	; 0x80
 800900c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800900e:	2318      	movs	r3, #24
 8009010:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009012:	2300      	movs	r3, #0
 8009014:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009016:	f04f 33ff 	mov.w	r3, #4294967295
 800901a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d045      	beq.n	80090ae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d002      	beq.n	8009030 <osThreadNew+0x48>
        name = attr->name;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	699b      	ldr	r3, [r3, #24]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d002      	beq.n	800903e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	699b      	ldr	r3, [r3, #24]
 800903c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d008      	beq.n	8009056 <osThreadNew+0x6e>
 8009044:	69fb      	ldr	r3, [r7, #28]
 8009046:	2b38      	cmp	r3, #56	; 0x38
 8009048:	d805      	bhi.n	8009056 <osThreadNew+0x6e>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	f003 0301 	and.w	r3, r3, #1
 8009052:	2b00      	cmp	r3, #0
 8009054:	d001      	beq.n	800905a <osThreadNew+0x72>
        return (NULL);
 8009056:	2300      	movs	r3, #0
 8009058:	e054      	b.n	8009104 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	695b      	ldr	r3, [r3, #20]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d003      	beq.n	800906a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	695b      	ldr	r3, [r3, #20]
 8009066:	089b      	lsrs	r3, r3, #2
 8009068:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d00e      	beq.n	8009090 <osThreadNew+0xa8>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	68db      	ldr	r3, [r3, #12]
 8009076:	2bbb      	cmp	r3, #187	; 0xbb
 8009078:	d90a      	bls.n	8009090 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800907e:	2b00      	cmp	r3, #0
 8009080:	d006      	beq.n	8009090 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	695b      	ldr	r3, [r3, #20]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d002      	beq.n	8009090 <osThreadNew+0xa8>
        mem = 1;
 800908a:	2301      	movs	r3, #1
 800908c:	61bb      	str	r3, [r7, #24]
 800908e:	e010      	b.n	80090b2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	689b      	ldr	r3, [r3, #8]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d10c      	bne.n	80090b2 <osThreadNew+0xca>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	68db      	ldr	r3, [r3, #12]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d108      	bne.n	80090b2 <osThreadNew+0xca>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	691b      	ldr	r3, [r3, #16]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d104      	bne.n	80090b2 <osThreadNew+0xca>
          mem = 0;
 80090a8:	2300      	movs	r3, #0
 80090aa:	61bb      	str	r3, [r7, #24]
 80090ac:	e001      	b.n	80090b2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80090ae:	2300      	movs	r3, #0
 80090b0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80090b2:	69bb      	ldr	r3, [r7, #24]
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d110      	bne.n	80090da <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80090c0:	9202      	str	r2, [sp, #8]
 80090c2:	9301      	str	r3, [sp, #4]
 80090c4:	69fb      	ldr	r3, [r7, #28]
 80090c6:	9300      	str	r3, [sp, #0]
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	6a3a      	ldr	r2, [r7, #32]
 80090cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80090ce:	68f8      	ldr	r0, [r7, #12]
 80090d0:	f001 fa46 	bl	800a560 <xTaskCreateStatic>
 80090d4:	4603      	mov	r3, r0
 80090d6:	613b      	str	r3, [r7, #16]
 80090d8:	e013      	b.n	8009102 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80090da:	69bb      	ldr	r3, [r7, #24]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d110      	bne.n	8009102 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80090e0:	6a3b      	ldr	r3, [r7, #32]
 80090e2:	b29a      	uxth	r2, r3
 80090e4:	f107 0310 	add.w	r3, r7, #16
 80090e8:	9301      	str	r3, [sp, #4]
 80090ea:	69fb      	ldr	r3, [r7, #28]
 80090ec:	9300      	str	r3, [sp, #0]
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80090f2:	68f8      	ldr	r0, [r7, #12]
 80090f4:	f001 fa91 	bl	800a61a <xTaskCreate>
 80090f8:	4603      	mov	r3, r0
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d001      	beq.n	8009102 <osThreadNew+0x11a>
            hTask = NULL;
 80090fe:	2300      	movs	r3, #0
 8009100:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009102:	693b      	ldr	r3, [r7, #16]
}
 8009104:	4618      	mov	r0, r3
 8009106:	3728      	adds	r7, #40	; 0x28
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009114:	f3ef 8305 	mrs	r3, IPSR
 8009118:	60bb      	str	r3, [r7, #8]
  return(result);
 800911a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800911c:	2b00      	cmp	r3, #0
 800911e:	d003      	beq.n	8009128 <osDelay+0x1c>
    stat = osErrorISR;
 8009120:	f06f 0305 	mvn.w	r3, #5
 8009124:	60fb      	str	r3, [r7, #12]
 8009126:	e007      	b.n	8009138 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009128:	2300      	movs	r3, #0
 800912a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d002      	beq.n	8009138 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f001 fbcc 	bl	800a8d0 <vTaskDelay>
    }
  }

  return (stat);
 8009138:	68fb      	ldr	r3, [r7, #12]
}
 800913a:	4618      	mov	r0, r3
 800913c:	3710      	adds	r7, #16
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
	...

08009144 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009144:	b480      	push	{r7}
 8009146:	b085      	sub	sp, #20
 8009148:	af00      	add	r7, sp, #0
 800914a:	60f8      	str	r0, [r7, #12]
 800914c:	60b9      	str	r1, [r7, #8]
 800914e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	4a07      	ldr	r2, [pc, #28]	; (8009170 <vApplicationGetIdleTaskMemory+0x2c>)
 8009154:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	4a06      	ldr	r2, [pc, #24]	; (8009174 <vApplicationGetIdleTaskMemory+0x30>)
 800915a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2280      	movs	r2, #128	; 0x80
 8009160:	601a      	str	r2, [r3, #0]
}
 8009162:	bf00      	nop
 8009164:	3714      	adds	r7, #20
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr
 800916e:	bf00      	nop
 8009170:	240004dc 	.word	0x240004dc
 8009174:	24000598 	.word	0x24000598

08009178 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009178:	b480      	push	{r7}
 800917a:	b085      	sub	sp, #20
 800917c:	af00      	add	r7, sp, #0
 800917e:	60f8      	str	r0, [r7, #12]
 8009180:	60b9      	str	r1, [r7, #8]
 8009182:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	4a07      	ldr	r2, [pc, #28]	; (80091a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8009188:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	4a06      	ldr	r2, [pc, #24]	; (80091a8 <vApplicationGetTimerTaskMemory+0x30>)
 800918e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009196:	601a      	str	r2, [r3, #0]
}
 8009198:	bf00      	nop
 800919a:	3714      	adds	r7, #20
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr
 80091a4:	24000798 	.word	0x24000798
 80091a8:	24000854 	.word	0x24000854

080091ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b08a      	sub	sp, #40	; 0x28
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80091b4:	2300      	movs	r3, #0
 80091b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80091b8:	f001 fc2e 	bl	800aa18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80091bc:	4b5b      	ldr	r3, [pc, #364]	; (800932c <pvPortMalloc+0x180>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d101      	bne.n	80091c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80091c4:	f000 f920 	bl	8009408 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80091c8:	4b59      	ldr	r3, [pc, #356]	; (8009330 <pvPortMalloc+0x184>)
 80091ca:	681a      	ldr	r2, [r3, #0]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	4013      	ands	r3, r2
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	f040 8093 	bne.w	80092fc <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d01d      	beq.n	8009218 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80091dc:	2208      	movs	r2, #8
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	4413      	add	r3, r2
 80091e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f003 0307 	and.w	r3, r3, #7
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d014      	beq.n	8009218 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f023 0307 	bic.w	r3, r3, #7
 80091f4:	3308      	adds	r3, #8
 80091f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f003 0307 	and.w	r3, r3, #7
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d00a      	beq.n	8009218 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009206:	f383 8811 	msr	BASEPRI, r3
 800920a:	f3bf 8f6f 	isb	sy
 800920e:	f3bf 8f4f 	dsb	sy
 8009212:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009214:	bf00      	nop
 8009216:	e7fe      	b.n	8009216 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d06e      	beq.n	80092fc <pvPortMalloc+0x150>
 800921e:	4b45      	ldr	r3, [pc, #276]	; (8009334 <pvPortMalloc+0x188>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	429a      	cmp	r2, r3
 8009226:	d869      	bhi.n	80092fc <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009228:	4b43      	ldr	r3, [pc, #268]	; (8009338 <pvPortMalloc+0x18c>)
 800922a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800922c:	4b42      	ldr	r3, [pc, #264]	; (8009338 <pvPortMalloc+0x18c>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009232:	e004      	b.n	800923e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009236:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800923e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	429a      	cmp	r2, r3
 8009246:	d903      	bls.n	8009250 <pvPortMalloc+0xa4>
 8009248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d1f1      	bne.n	8009234 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009250:	4b36      	ldr	r3, [pc, #216]	; (800932c <pvPortMalloc+0x180>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009256:	429a      	cmp	r2, r3
 8009258:	d050      	beq.n	80092fc <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800925a:	6a3b      	ldr	r3, [r7, #32]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	2208      	movs	r2, #8
 8009260:	4413      	add	r3, r2
 8009262:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009266:	681a      	ldr	r2, [r3, #0]
 8009268:	6a3b      	ldr	r3, [r7, #32]
 800926a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800926c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926e:	685a      	ldr	r2, [r3, #4]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	1ad2      	subs	r2, r2, r3
 8009274:	2308      	movs	r3, #8
 8009276:	005b      	lsls	r3, r3, #1
 8009278:	429a      	cmp	r2, r3
 800927a:	d91f      	bls.n	80092bc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800927c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	4413      	add	r3, r2
 8009282:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009284:	69bb      	ldr	r3, [r7, #24]
 8009286:	f003 0307 	and.w	r3, r3, #7
 800928a:	2b00      	cmp	r3, #0
 800928c:	d00a      	beq.n	80092a4 <pvPortMalloc+0xf8>
	__asm volatile
 800928e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009292:	f383 8811 	msr	BASEPRI, r3
 8009296:	f3bf 8f6f 	isb	sy
 800929a:	f3bf 8f4f 	dsb	sy
 800929e:	613b      	str	r3, [r7, #16]
}
 80092a0:	bf00      	nop
 80092a2:	e7fe      	b.n	80092a2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80092a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a6:	685a      	ldr	r2, [r3, #4]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	1ad2      	subs	r2, r2, r3
 80092ac:	69bb      	ldr	r3, [r7, #24]
 80092ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80092b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80092b6:	69b8      	ldr	r0, [r7, #24]
 80092b8:	f000 f908 	bl	80094cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80092bc:	4b1d      	ldr	r3, [pc, #116]	; (8009334 <pvPortMalloc+0x188>)
 80092be:	681a      	ldr	r2, [r3, #0]
 80092c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	1ad3      	subs	r3, r2, r3
 80092c6:	4a1b      	ldr	r2, [pc, #108]	; (8009334 <pvPortMalloc+0x188>)
 80092c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80092ca:	4b1a      	ldr	r3, [pc, #104]	; (8009334 <pvPortMalloc+0x188>)
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	4b1b      	ldr	r3, [pc, #108]	; (800933c <pvPortMalloc+0x190>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d203      	bcs.n	80092de <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80092d6:	4b17      	ldr	r3, [pc, #92]	; (8009334 <pvPortMalloc+0x188>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a18      	ldr	r2, [pc, #96]	; (800933c <pvPortMalloc+0x190>)
 80092dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80092de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e0:	685a      	ldr	r2, [r3, #4]
 80092e2:	4b13      	ldr	r3, [pc, #76]	; (8009330 <pvPortMalloc+0x184>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	431a      	orrs	r2, r3
 80092e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80092ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ee:	2200      	movs	r2, #0
 80092f0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80092f2:	4b13      	ldr	r3, [pc, #76]	; (8009340 <pvPortMalloc+0x194>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	3301      	adds	r3, #1
 80092f8:	4a11      	ldr	r2, [pc, #68]	; (8009340 <pvPortMalloc+0x194>)
 80092fa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80092fc:	f001 fb9a 	bl	800aa34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009300:	69fb      	ldr	r3, [r7, #28]
 8009302:	f003 0307 	and.w	r3, r3, #7
 8009306:	2b00      	cmp	r3, #0
 8009308:	d00a      	beq.n	8009320 <pvPortMalloc+0x174>
	__asm volatile
 800930a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930e:	f383 8811 	msr	BASEPRI, r3
 8009312:	f3bf 8f6f 	isb	sy
 8009316:	f3bf 8f4f 	dsb	sy
 800931a:	60fb      	str	r3, [r7, #12]
}
 800931c:	bf00      	nop
 800931e:	e7fe      	b.n	800931e <pvPortMalloc+0x172>
	return pvReturn;
 8009320:	69fb      	ldr	r3, [r7, #28]
}
 8009322:	4618      	mov	r0, r3
 8009324:	3728      	adds	r7, #40	; 0x28
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	2400485c 	.word	0x2400485c
 8009330:	24004870 	.word	0x24004870
 8009334:	24004860 	.word	0x24004860
 8009338:	24004854 	.word	0x24004854
 800933c:	24004864 	.word	0x24004864
 8009340:	24004868 	.word	0x24004868

08009344 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b086      	sub	sp, #24
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d04d      	beq.n	80093f2 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009356:	2308      	movs	r3, #8
 8009358:	425b      	negs	r3, r3
 800935a:	697a      	ldr	r2, [r7, #20]
 800935c:	4413      	add	r3, r2
 800935e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	685a      	ldr	r2, [r3, #4]
 8009368:	4b24      	ldr	r3, [pc, #144]	; (80093fc <vPortFree+0xb8>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4013      	ands	r3, r2
 800936e:	2b00      	cmp	r3, #0
 8009370:	d10a      	bne.n	8009388 <vPortFree+0x44>
	__asm volatile
 8009372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009376:	f383 8811 	msr	BASEPRI, r3
 800937a:	f3bf 8f6f 	isb	sy
 800937e:	f3bf 8f4f 	dsb	sy
 8009382:	60fb      	str	r3, [r7, #12]
}
 8009384:	bf00      	nop
 8009386:	e7fe      	b.n	8009386 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d00a      	beq.n	80093a6 <vPortFree+0x62>
	__asm volatile
 8009390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009394:	f383 8811 	msr	BASEPRI, r3
 8009398:	f3bf 8f6f 	isb	sy
 800939c:	f3bf 8f4f 	dsb	sy
 80093a0:	60bb      	str	r3, [r7, #8]
}
 80093a2:	bf00      	nop
 80093a4:	e7fe      	b.n	80093a4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	685a      	ldr	r2, [r3, #4]
 80093aa:	4b14      	ldr	r3, [pc, #80]	; (80093fc <vPortFree+0xb8>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4013      	ands	r3, r2
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d01e      	beq.n	80093f2 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d11a      	bne.n	80093f2 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	685a      	ldr	r2, [r3, #4]
 80093c0:	4b0e      	ldr	r3, [pc, #56]	; (80093fc <vPortFree+0xb8>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	43db      	mvns	r3, r3
 80093c6:	401a      	ands	r2, r3
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80093cc:	f001 fb24 	bl	800aa18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	685a      	ldr	r2, [r3, #4]
 80093d4:	4b0a      	ldr	r3, [pc, #40]	; (8009400 <vPortFree+0xbc>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4413      	add	r3, r2
 80093da:	4a09      	ldr	r2, [pc, #36]	; (8009400 <vPortFree+0xbc>)
 80093dc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80093de:	6938      	ldr	r0, [r7, #16]
 80093e0:	f000 f874 	bl	80094cc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80093e4:	4b07      	ldr	r3, [pc, #28]	; (8009404 <vPortFree+0xc0>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	3301      	adds	r3, #1
 80093ea:	4a06      	ldr	r2, [pc, #24]	; (8009404 <vPortFree+0xc0>)
 80093ec:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80093ee:	f001 fb21 	bl	800aa34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80093f2:	bf00      	nop
 80093f4:	3718      	adds	r7, #24
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	24004870 	.word	0x24004870
 8009400:	24004860 	.word	0x24004860
 8009404:	2400486c 	.word	0x2400486c

08009408 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009408:	b480      	push	{r7}
 800940a:	b085      	sub	sp, #20
 800940c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800940e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009412:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009414:	4b27      	ldr	r3, [pc, #156]	; (80094b4 <prvHeapInit+0xac>)
 8009416:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f003 0307 	and.w	r3, r3, #7
 800941e:	2b00      	cmp	r3, #0
 8009420:	d00c      	beq.n	800943c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	3307      	adds	r3, #7
 8009426:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f023 0307 	bic.w	r3, r3, #7
 800942e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009430:	68ba      	ldr	r2, [r7, #8]
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	1ad3      	subs	r3, r2, r3
 8009436:	4a1f      	ldr	r2, [pc, #124]	; (80094b4 <prvHeapInit+0xac>)
 8009438:	4413      	add	r3, r2
 800943a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009440:	4a1d      	ldr	r2, [pc, #116]	; (80094b8 <prvHeapInit+0xb0>)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009446:	4b1c      	ldr	r3, [pc, #112]	; (80094b8 <prvHeapInit+0xb0>)
 8009448:	2200      	movs	r2, #0
 800944a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	68ba      	ldr	r2, [r7, #8]
 8009450:	4413      	add	r3, r2
 8009452:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009454:	2208      	movs	r2, #8
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	1a9b      	subs	r3, r3, r2
 800945a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f023 0307 	bic.w	r3, r3, #7
 8009462:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	4a15      	ldr	r2, [pc, #84]	; (80094bc <prvHeapInit+0xb4>)
 8009468:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800946a:	4b14      	ldr	r3, [pc, #80]	; (80094bc <prvHeapInit+0xb4>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	2200      	movs	r2, #0
 8009470:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009472:	4b12      	ldr	r3, [pc, #72]	; (80094bc <prvHeapInit+0xb4>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	2200      	movs	r2, #0
 8009478:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	68fa      	ldr	r2, [r7, #12]
 8009482:	1ad2      	subs	r2, r2, r3
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009488:	4b0c      	ldr	r3, [pc, #48]	; (80094bc <prvHeapInit+0xb4>)
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	4a0a      	ldr	r2, [pc, #40]	; (80094c0 <prvHeapInit+0xb8>)
 8009496:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	4a09      	ldr	r2, [pc, #36]	; (80094c4 <prvHeapInit+0xbc>)
 800949e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80094a0:	4b09      	ldr	r3, [pc, #36]	; (80094c8 <prvHeapInit+0xc0>)
 80094a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80094a6:	601a      	str	r2, [r3, #0]
}
 80094a8:	bf00      	nop
 80094aa:	3714      	adds	r7, #20
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr
 80094b4:	24000c54 	.word	0x24000c54
 80094b8:	24004854 	.word	0x24004854
 80094bc:	2400485c 	.word	0x2400485c
 80094c0:	24004864 	.word	0x24004864
 80094c4:	24004860 	.word	0x24004860
 80094c8:	24004870 	.word	0x24004870

080094cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80094cc:	b480      	push	{r7}
 80094ce:	b085      	sub	sp, #20
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80094d4:	4b28      	ldr	r3, [pc, #160]	; (8009578 <prvInsertBlockIntoFreeList+0xac>)
 80094d6:	60fb      	str	r3, [r7, #12]
 80094d8:	e002      	b.n	80094e0 <prvInsertBlockIntoFreeList+0x14>
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	60fb      	str	r3, [r7, #12]
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d8f7      	bhi.n	80094da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	685b      	ldr	r3, [r3, #4]
 80094f2:	68ba      	ldr	r2, [r7, #8]
 80094f4:	4413      	add	r3, r2
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d108      	bne.n	800950e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	685a      	ldr	r2, [r3, #4]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	441a      	add	r2, r3
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	68ba      	ldr	r2, [r7, #8]
 8009518:	441a      	add	r2, r3
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	429a      	cmp	r2, r3
 8009520:	d118      	bne.n	8009554 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681a      	ldr	r2, [r3, #0]
 8009526:	4b15      	ldr	r3, [pc, #84]	; (800957c <prvInsertBlockIntoFreeList+0xb0>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	429a      	cmp	r2, r3
 800952c:	d00d      	beq.n	800954a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	685a      	ldr	r2, [r3, #4]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	441a      	add	r2, r3
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	601a      	str	r2, [r3, #0]
 8009548:	e008      	b.n	800955c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800954a:	4b0c      	ldr	r3, [pc, #48]	; (800957c <prvInsertBlockIntoFreeList+0xb0>)
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	601a      	str	r2, [r3, #0]
 8009552:	e003      	b.n	800955c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681a      	ldr	r2, [r3, #0]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800955c:	68fa      	ldr	r2, [r7, #12]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	429a      	cmp	r2, r3
 8009562:	d002      	beq.n	800956a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800956a:	bf00      	nop
 800956c:	3714      	adds	r7, #20
 800956e:	46bd      	mov	sp, r7
 8009570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009574:	4770      	bx	lr
 8009576:	bf00      	nop
 8009578:	24004854 	.word	0x24004854
 800957c:	2400485c 	.word	0x2400485c

08009580 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009580:	b480      	push	{r7}
 8009582:	b083      	sub	sp, #12
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f103 0208 	add.w	r2, r3, #8
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f04f 32ff 	mov.w	r2, #4294967295
 8009598:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f103 0208 	add.w	r2, r3, #8
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f103 0208 	add.w	r2, r3, #8
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80095b4:	bf00      	nop
 80095b6:	370c      	adds	r7, #12
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80095ce:	bf00      	nop
 80095d0:	370c      	adds	r7, #12
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr

080095da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80095da:	b480      	push	{r7}
 80095dc:	b085      	sub	sp, #20
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
 80095e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	68fa      	ldr	r2, [r7, #12]
 80095ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	689a      	ldr	r2, [r3, #8]
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	689b      	ldr	r3, [r3, #8]
 80095fc:	683a      	ldr	r2, [r7, #0]
 80095fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	683a      	ldr	r2, [r7, #0]
 8009604:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	687a      	ldr	r2, [r7, #4]
 800960a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	1c5a      	adds	r2, r3, #1
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	601a      	str	r2, [r3, #0]
}
 8009616:	bf00      	nop
 8009618:	3714      	adds	r7, #20
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr

08009622 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009622:	b480      	push	{r7}
 8009624:	b085      	sub	sp, #20
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
 800962a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009638:	d103      	bne.n	8009642 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	691b      	ldr	r3, [r3, #16]
 800963e:	60fb      	str	r3, [r7, #12]
 8009640:	e00c      	b.n	800965c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	3308      	adds	r3, #8
 8009646:	60fb      	str	r3, [r7, #12]
 8009648:	e002      	b.n	8009650 <vListInsert+0x2e>
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	685b      	ldr	r3, [r3, #4]
 800964e:	60fb      	str	r3, [r7, #12]
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	68ba      	ldr	r2, [r7, #8]
 8009658:	429a      	cmp	r2, r3
 800965a:	d2f6      	bcs.n	800964a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	685a      	ldr	r2, [r3, #4]
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	683a      	ldr	r2, [r7, #0]
 800966a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	68fa      	ldr	r2, [r7, #12]
 8009670:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	683a      	ldr	r2, [r7, #0]
 8009676:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	687a      	ldr	r2, [r7, #4]
 800967c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	1c5a      	adds	r2, r3, #1
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	601a      	str	r2, [r3, #0]
}
 8009688:	bf00      	nop
 800968a:	3714      	adds	r7, #20
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009694:	b480      	push	{r7}
 8009696:	b085      	sub	sp, #20
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	691b      	ldr	r3, [r3, #16]
 80096a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	6892      	ldr	r2, [r2, #8]
 80096aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	689b      	ldr	r3, [r3, #8]
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	6852      	ldr	r2, [r2, #4]
 80096b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	687a      	ldr	r2, [r7, #4]
 80096bc:	429a      	cmp	r2, r3
 80096be:	d103      	bne.n	80096c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	689a      	ldr	r2, [r3, #8]
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2200      	movs	r2, #0
 80096cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	1e5a      	subs	r2, r3, #1
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3714      	adds	r7, #20
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	4770      	bx	lr

080096e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80096e8:	b480      	push	{r7}
 80096ea:	b085      	sub	sp, #20
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	60f8      	str	r0, [r7, #12]
 80096f0:	60b9      	str	r1, [r7, #8]
 80096f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	3b04      	subs	r3, #4
 80096f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009700:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	3b04      	subs	r3, #4
 8009706:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	f023 0201 	bic.w	r2, r3, #1
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	3b04      	subs	r3, #4
 8009716:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009718:	4a0c      	ldr	r2, [pc, #48]	; (800974c <pxPortInitialiseStack+0x64>)
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	3b14      	subs	r3, #20
 8009722:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	3b04      	subs	r3, #4
 800972e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f06f 0202 	mvn.w	r2, #2
 8009736:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	3b20      	subs	r3, #32
 800973c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800973e:	68fb      	ldr	r3, [r7, #12]
}
 8009740:	4618      	mov	r0, r3
 8009742:	3714      	adds	r7, #20
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr
 800974c:	08009751 	.word	0x08009751

08009750 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009750:	b480      	push	{r7}
 8009752:	b085      	sub	sp, #20
 8009754:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009756:	2300      	movs	r3, #0
 8009758:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800975a:	4b12      	ldr	r3, [pc, #72]	; (80097a4 <prvTaskExitError+0x54>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009762:	d00a      	beq.n	800977a <prvTaskExitError+0x2a>
	__asm volatile
 8009764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009768:	f383 8811 	msr	BASEPRI, r3
 800976c:	f3bf 8f6f 	isb	sy
 8009770:	f3bf 8f4f 	dsb	sy
 8009774:	60fb      	str	r3, [r7, #12]
}
 8009776:	bf00      	nop
 8009778:	e7fe      	b.n	8009778 <prvTaskExitError+0x28>
	__asm volatile
 800977a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800977e:	f383 8811 	msr	BASEPRI, r3
 8009782:	f3bf 8f6f 	isb	sy
 8009786:	f3bf 8f4f 	dsb	sy
 800978a:	60bb      	str	r3, [r7, #8]
}
 800978c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800978e:	bf00      	nop
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d0fc      	beq.n	8009790 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009796:	bf00      	nop
 8009798:	bf00      	nop
 800979a:	3714      	adds	r7, #20
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr
 80097a4:	24000018 	.word	0x24000018
	...

080097b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80097b0:	4b07      	ldr	r3, [pc, #28]	; (80097d0 <pxCurrentTCBConst2>)
 80097b2:	6819      	ldr	r1, [r3, #0]
 80097b4:	6808      	ldr	r0, [r1, #0]
 80097b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ba:	f380 8809 	msr	PSP, r0
 80097be:	f3bf 8f6f 	isb	sy
 80097c2:	f04f 0000 	mov.w	r0, #0
 80097c6:	f380 8811 	msr	BASEPRI, r0
 80097ca:	4770      	bx	lr
 80097cc:	f3af 8000 	nop.w

080097d0 <pxCurrentTCBConst2>:
 80097d0:	240048bc 	.word	0x240048bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80097d4:	bf00      	nop
 80097d6:	bf00      	nop

080097d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80097d8:	4808      	ldr	r0, [pc, #32]	; (80097fc <prvPortStartFirstTask+0x24>)
 80097da:	6800      	ldr	r0, [r0, #0]
 80097dc:	6800      	ldr	r0, [r0, #0]
 80097de:	f380 8808 	msr	MSP, r0
 80097e2:	f04f 0000 	mov.w	r0, #0
 80097e6:	f380 8814 	msr	CONTROL, r0
 80097ea:	b662      	cpsie	i
 80097ec:	b661      	cpsie	f
 80097ee:	f3bf 8f4f 	dsb	sy
 80097f2:	f3bf 8f6f 	isb	sy
 80097f6:	df00      	svc	0
 80097f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80097fa:	bf00      	nop
 80097fc:	e000ed08 	.word	0xe000ed08

08009800 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b086      	sub	sp, #24
 8009804:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009806:	4b46      	ldr	r3, [pc, #280]	; (8009920 <xPortStartScheduler+0x120>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4a46      	ldr	r2, [pc, #280]	; (8009924 <xPortStartScheduler+0x124>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d10a      	bne.n	8009826 <xPortStartScheduler+0x26>
	__asm volatile
 8009810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009814:	f383 8811 	msr	BASEPRI, r3
 8009818:	f3bf 8f6f 	isb	sy
 800981c:	f3bf 8f4f 	dsb	sy
 8009820:	613b      	str	r3, [r7, #16]
}
 8009822:	bf00      	nop
 8009824:	e7fe      	b.n	8009824 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009826:	4b3e      	ldr	r3, [pc, #248]	; (8009920 <xPortStartScheduler+0x120>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4a3f      	ldr	r2, [pc, #252]	; (8009928 <xPortStartScheduler+0x128>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d10a      	bne.n	8009846 <xPortStartScheduler+0x46>
	__asm volatile
 8009830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009834:	f383 8811 	msr	BASEPRI, r3
 8009838:	f3bf 8f6f 	isb	sy
 800983c:	f3bf 8f4f 	dsb	sy
 8009840:	60fb      	str	r3, [r7, #12]
}
 8009842:	bf00      	nop
 8009844:	e7fe      	b.n	8009844 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009846:	4b39      	ldr	r3, [pc, #228]	; (800992c <xPortStartScheduler+0x12c>)
 8009848:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	781b      	ldrb	r3, [r3, #0]
 800984e:	b2db      	uxtb	r3, r3
 8009850:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	22ff      	movs	r2, #255	; 0xff
 8009856:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	781b      	ldrb	r3, [r3, #0]
 800985c:	b2db      	uxtb	r3, r3
 800985e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009860:	78fb      	ldrb	r3, [r7, #3]
 8009862:	b2db      	uxtb	r3, r3
 8009864:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009868:	b2da      	uxtb	r2, r3
 800986a:	4b31      	ldr	r3, [pc, #196]	; (8009930 <xPortStartScheduler+0x130>)
 800986c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800986e:	4b31      	ldr	r3, [pc, #196]	; (8009934 <xPortStartScheduler+0x134>)
 8009870:	2207      	movs	r2, #7
 8009872:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009874:	e009      	b.n	800988a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009876:	4b2f      	ldr	r3, [pc, #188]	; (8009934 <xPortStartScheduler+0x134>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	3b01      	subs	r3, #1
 800987c:	4a2d      	ldr	r2, [pc, #180]	; (8009934 <xPortStartScheduler+0x134>)
 800987e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009880:	78fb      	ldrb	r3, [r7, #3]
 8009882:	b2db      	uxtb	r3, r3
 8009884:	005b      	lsls	r3, r3, #1
 8009886:	b2db      	uxtb	r3, r3
 8009888:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800988a:	78fb      	ldrb	r3, [r7, #3]
 800988c:	b2db      	uxtb	r3, r3
 800988e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009892:	2b80      	cmp	r3, #128	; 0x80
 8009894:	d0ef      	beq.n	8009876 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009896:	4b27      	ldr	r3, [pc, #156]	; (8009934 <xPortStartScheduler+0x134>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f1c3 0307 	rsb	r3, r3, #7
 800989e:	2b04      	cmp	r3, #4
 80098a0:	d00a      	beq.n	80098b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80098a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a6:	f383 8811 	msr	BASEPRI, r3
 80098aa:	f3bf 8f6f 	isb	sy
 80098ae:	f3bf 8f4f 	dsb	sy
 80098b2:	60bb      	str	r3, [r7, #8]
}
 80098b4:	bf00      	nop
 80098b6:	e7fe      	b.n	80098b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80098b8:	4b1e      	ldr	r3, [pc, #120]	; (8009934 <xPortStartScheduler+0x134>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	021b      	lsls	r3, r3, #8
 80098be:	4a1d      	ldr	r2, [pc, #116]	; (8009934 <xPortStartScheduler+0x134>)
 80098c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80098c2:	4b1c      	ldr	r3, [pc, #112]	; (8009934 <xPortStartScheduler+0x134>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80098ca:	4a1a      	ldr	r2, [pc, #104]	; (8009934 <xPortStartScheduler+0x134>)
 80098cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	b2da      	uxtb	r2, r3
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80098d6:	4b18      	ldr	r3, [pc, #96]	; (8009938 <xPortStartScheduler+0x138>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4a17      	ldr	r2, [pc, #92]	; (8009938 <xPortStartScheduler+0x138>)
 80098dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80098e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80098e2:	4b15      	ldr	r3, [pc, #84]	; (8009938 <xPortStartScheduler+0x138>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4a14      	ldr	r2, [pc, #80]	; (8009938 <xPortStartScheduler+0x138>)
 80098e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80098ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80098ee:	f000 f8dd 	bl	8009aac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80098f2:	4b12      	ldr	r3, [pc, #72]	; (800993c <xPortStartScheduler+0x13c>)
 80098f4:	2200      	movs	r2, #0
 80098f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80098f8:	f000 f8fc 	bl	8009af4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80098fc:	4b10      	ldr	r3, [pc, #64]	; (8009940 <xPortStartScheduler+0x140>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a0f      	ldr	r2, [pc, #60]	; (8009940 <xPortStartScheduler+0x140>)
 8009902:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009906:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009908:	f7ff ff66 	bl	80097d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800990c:	f001 f9fa 	bl	800ad04 <vTaskSwitchContext>
	prvTaskExitError();
 8009910:	f7ff ff1e 	bl	8009750 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009914:	2300      	movs	r3, #0
}
 8009916:	4618      	mov	r0, r3
 8009918:	3718      	adds	r7, #24
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}
 800991e:	bf00      	nop
 8009920:	e000ed00 	.word	0xe000ed00
 8009924:	410fc271 	.word	0x410fc271
 8009928:	410fc270 	.word	0x410fc270
 800992c:	e000e400 	.word	0xe000e400
 8009930:	24004874 	.word	0x24004874
 8009934:	24004878 	.word	0x24004878
 8009938:	e000ed20 	.word	0xe000ed20
 800993c:	24000018 	.word	0x24000018
 8009940:	e000ef34 	.word	0xe000ef34

08009944 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
	__asm volatile
 800994a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800994e:	f383 8811 	msr	BASEPRI, r3
 8009952:	f3bf 8f6f 	isb	sy
 8009956:	f3bf 8f4f 	dsb	sy
 800995a:	607b      	str	r3, [r7, #4]
}
 800995c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800995e:	4b0f      	ldr	r3, [pc, #60]	; (800999c <vPortEnterCritical+0x58>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	3301      	adds	r3, #1
 8009964:	4a0d      	ldr	r2, [pc, #52]	; (800999c <vPortEnterCritical+0x58>)
 8009966:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009968:	4b0c      	ldr	r3, [pc, #48]	; (800999c <vPortEnterCritical+0x58>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	2b01      	cmp	r3, #1
 800996e:	d10f      	bne.n	8009990 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009970:	4b0b      	ldr	r3, [pc, #44]	; (80099a0 <vPortEnterCritical+0x5c>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	b2db      	uxtb	r3, r3
 8009976:	2b00      	cmp	r3, #0
 8009978:	d00a      	beq.n	8009990 <vPortEnterCritical+0x4c>
	__asm volatile
 800997a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997e:	f383 8811 	msr	BASEPRI, r3
 8009982:	f3bf 8f6f 	isb	sy
 8009986:	f3bf 8f4f 	dsb	sy
 800998a:	603b      	str	r3, [r7, #0]
}
 800998c:	bf00      	nop
 800998e:	e7fe      	b.n	800998e <vPortEnterCritical+0x4a>
	}
}
 8009990:	bf00      	nop
 8009992:	370c      	adds	r7, #12
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr
 800999c:	24000018 	.word	0x24000018
 80099a0:	e000ed04 	.word	0xe000ed04

080099a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80099a4:	b480      	push	{r7}
 80099a6:	b083      	sub	sp, #12
 80099a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80099aa:	4b12      	ldr	r3, [pc, #72]	; (80099f4 <vPortExitCritical+0x50>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d10a      	bne.n	80099c8 <vPortExitCritical+0x24>
	__asm volatile
 80099b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b6:	f383 8811 	msr	BASEPRI, r3
 80099ba:	f3bf 8f6f 	isb	sy
 80099be:	f3bf 8f4f 	dsb	sy
 80099c2:	607b      	str	r3, [r7, #4]
}
 80099c4:	bf00      	nop
 80099c6:	e7fe      	b.n	80099c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80099c8:	4b0a      	ldr	r3, [pc, #40]	; (80099f4 <vPortExitCritical+0x50>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	3b01      	subs	r3, #1
 80099ce:	4a09      	ldr	r2, [pc, #36]	; (80099f4 <vPortExitCritical+0x50>)
 80099d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80099d2:	4b08      	ldr	r3, [pc, #32]	; (80099f4 <vPortExitCritical+0x50>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d105      	bne.n	80099e6 <vPortExitCritical+0x42>
 80099da:	2300      	movs	r3, #0
 80099dc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80099e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80099e6:	bf00      	nop
 80099e8:	370c      	adds	r7, #12
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr
 80099f2:	bf00      	nop
 80099f4:	24000018 	.word	0x24000018
	...

08009a00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009a00:	f3ef 8009 	mrs	r0, PSP
 8009a04:	f3bf 8f6f 	isb	sy
 8009a08:	4b15      	ldr	r3, [pc, #84]	; (8009a60 <pxCurrentTCBConst>)
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	f01e 0f10 	tst.w	lr, #16
 8009a10:	bf08      	it	eq
 8009a12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009a16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a1a:	6010      	str	r0, [r2, #0]
 8009a1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009a20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009a24:	f380 8811 	msr	BASEPRI, r0
 8009a28:	f3bf 8f4f 	dsb	sy
 8009a2c:	f3bf 8f6f 	isb	sy
 8009a30:	f001 f968 	bl	800ad04 <vTaskSwitchContext>
 8009a34:	f04f 0000 	mov.w	r0, #0
 8009a38:	f380 8811 	msr	BASEPRI, r0
 8009a3c:	bc09      	pop	{r0, r3}
 8009a3e:	6819      	ldr	r1, [r3, #0]
 8009a40:	6808      	ldr	r0, [r1, #0]
 8009a42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a46:	f01e 0f10 	tst.w	lr, #16
 8009a4a:	bf08      	it	eq
 8009a4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009a50:	f380 8809 	msr	PSP, r0
 8009a54:	f3bf 8f6f 	isb	sy
 8009a58:	4770      	bx	lr
 8009a5a:	bf00      	nop
 8009a5c:	f3af 8000 	nop.w

08009a60 <pxCurrentTCBConst>:
 8009a60:	240048bc 	.word	0x240048bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009a64:	bf00      	nop
 8009a66:	bf00      	nop

08009a68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
	__asm volatile
 8009a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a72:	f383 8811 	msr	BASEPRI, r3
 8009a76:	f3bf 8f6f 	isb	sy
 8009a7a:	f3bf 8f4f 	dsb	sy
 8009a7e:	607b      	str	r3, [r7, #4]
}
 8009a80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009a82:	f001 f885 	bl	800ab90 <xTaskIncrementTick>
 8009a86:	4603      	mov	r3, r0
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d003      	beq.n	8009a94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009a8c:	4b06      	ldr	r3, [pc, #24]	; (8009aa8 <xPortSysTickHandler+0x40>)
 8009a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a92:	601a      	str	r2, [r3, #0]
 8009a94:	2300      	movs	r3, #0
 8009a96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	f383 8811 	msr	BASEPRI, r3
}
 8009a9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009aa0:	bf00      	nop
 8009aa2:	3708      	adds	r7, #8
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}
 8009aa8:	e000ed04 	.word	0xe000ed04

08009aac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009aac:	b480      	push	{r7}
 8009aae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009ab0:	4b0b      	ldr	r3, [pc, #44]	; (8009ae0 <vPortSetupTimerInterrupt+0x34>)
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009ab6:	4b0b      	ldr	r3, [pc, #44]	; (8009ae4 <vPortSetupTimerInterrupt+0x38>)
 8009ab8:	2200      	movs	r2, #0
 8009aba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009abc:	4b0a      	ldr	r3, [pc, #40]	; (8009ae8 <vPortSetupTimerInterrupt+0x3c>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a0a      	ldr	r2, [pc, #40]	; (8009aec <vPortSetupTimerInterrupt+0x40>)
 8009ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ac6:	099b      	lsrs	r3, r3, #6
 8009ac8:	4a09      	ldr	r2, [pc, #36]	; (8009af0 <vPortSetupTimerInterrupt+0x44>)
 8009aca:	3b01      	subs	r3, #1
 8009acc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009ace:	4b04      	ldr	r3, [pc, #16]	; (8009ae0 <vPortSetupTimerInterrupt+0x34>)
 8009ad0:	2207      	movs	r2, #7
 8009ad2:	601a      	str	r2, [r3, #0]
}
 8009ad4:	bf00      	nop
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009adc:	4770      	bx	lr
 8009ade:	bf00      	nop
 8009ae0:	e000e010 	.word	0xe000e010
 8009ae4:	e000e018 	.word	0xe000e018
 8009ae8:	24000000 	.word	0x24000000
 8009aec:	10624dd3 	.word	0x10624dd3
 8009af0:	e000e014 	.word	0xe000e014

08009af4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009af4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009b04 <vPortEnableVFP+0x10>
 8009af8:	6801      	ldr	r1, [r0, #0]
 8009afa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009afe:	6001      	str	r1, [r0, #0]
 8009b00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009b02:	bf00      	nop
 8009b04:	e000ed88 	.word	0xe000ed88

08009b08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009b08:	b480      	push	{r7}
 8009b0a:	b085      	sub	sp, #20
 8009b0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009b0e:	f3ef 8305 	mrs	r3, IPSR
 8009b12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2b0f      	cmp	r3, #15
 8009b18:	d914      	bls.n	8009b44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009b1a:	4a17      	ldr	r2, [pc, #92]	; (8009b78 <vPortValidateInterruptPriority+0x70>)
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	4413      	add	r3, r2
 8009b20:	781b      	ldrb	r3, [r3, #0]
 8009b22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009b24:	4b15      	ldr	r3, [pc, #84]	; (8009b7c <vPortValidateInterruptPriority+0x74>)
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	7afa      	ldrb	r2, [r7, #11]
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d20a      	bcs.n	8009b44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b32:	f383 8811 	msr	BASEPRI, r3
 8009b36:	f3bf 8f6f 	isb	sy
 8009b3a:	f3bf 8f4f 	dsb	sy
 8009b3e:	607b      	str	r3, [r7, #4]
}
 8009b40:	bf00      	nop
 8009b42:	e7fe      	b.n	8009b42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009b44:	4b0e      	ldr	r3, [pc, #56]	; (8009b80 <vPortValidateInterruptPriority+0x78>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009b4c:	4b0d      	ldr	r3, [pc, #52]	; (8009b84 <vPortValidateInterruptPriority+0x7c>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d90a      	bls.n	8009b6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b58:	f383 8811 	msr	BASEPRI, r3
 8009b5c:	f3bf 8f6f 	isb	sy
 8009b60:	f3bf 8f4f 	dsb	sy
 8009b64:	603b      	str	r3, [r7, #0]
}
 8009b66:	bf00      	nop
 8009b68:	e7fe      	b.n	8009b68 <vPortValidateInterruptPriority+0x60>
	}
 8009b6a:	bf00      	nop
 8009b6c:	3714      	adds	r7, #20
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr
 8009b76:	bf00      	nop
 8009b78:	e000e3f0 	.word	0xe000e3f0
 8009b7c:	24004874 	.word	0x24004874
 8009b80:	e000ed0c 	.word	0xe000ed0c
 8009b84:	24004878 	.word	0x24004878

08009b88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b084      	sub	sp, #16
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d10a      	bne.n	8009bb2 <xQueueGenericReset+0x2a>
	__asm volatile
 8009b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba0:	f383 8811 	msr	BASEPRI, r3
 8009ba4:	f3bf 8f6f 	isb	sy
 8009ba8:	f3bf 8f4f 	dsb	sy
 8009bac:	60bb      	str	r3, [r7, #8]
}
 8009bae:	bf00      	nop
 8009bb0:	e7fe      	b.n	8009bb0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009bb2:	f7ff fec7 	bl	8009944 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681a      	ldr	r2, [r3, #0]
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bbe:	68f9      	ldr	r1, [r7, #12]
 8009bc0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009bc2:	fb01 f303 	mul.w	r3, r1, r3
 8009bc6:	441a      	add	r2, r3
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681a      	ldr	r2, [r3, #0]
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009be2:	3b01      	subs	r3, #1
 8009be4:	68f9      	ldr	r1, [r7, #12]
 8009be6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009be8:	fb01 f303 	mul.w	r3, r1, r3
 8009bec:	441a      	add	r2, r3
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	22ff      	movs	r2, #255	; 0xff
 8009bf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	22ff      	movs	r2, #255	; 0xff
 8009bfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d114      	bne.n	8009c32 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	691b      	ldr	r3, [r3, #16]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d01a      	beq.n	8009c46 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	3310      	adds	r3, #16
 8009c14:	4618      	mov	r0, r3
 8009c16:	f001 f929 	bl	800ae6c <xTaskRemoveFromEventList>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d012      	beq.n	8009c46 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009c20:	4b0c      	ldr	r3, [pc, #48]	; (8009c54 <xQueueGenericReset+0xcc>)
 8009c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c26:	601a      	str	r2, [r3, #0]
 8009c28:	f3bf 8f4f 	dsb	sy
 8009c2c:	f3bf 8f6f 	isb	sy
 8009c30:	e009      	b.n	8009c46 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	3310      	adds	r3, #16
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7ff fca2 	bl	8009580 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	3324      	adds	r3, #36	; 0x24
 8009c40:	4618      	mov	r0, r3
 8009c42:	f7ff fc9d 	bl	8009580 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009c46:	f7ff fead 	bl	80099a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009c4a:	2301      	movs	r3, #1
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3710      	adds	r7, #16
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	e000ed04 	.word	0xe000ed04

08009c58 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b08e      	sub	sp, #56	; 0x38
 8009c5c:	af02      	add	r7, sp, #8
 8009c5e:	60f8      	str	r0, [r7, #12]
 8009c60:	60b9      	str	r1, [r7, #8]
 8009c62:	607a      	str	r2, [r7, #4]
 8009c64:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d10a      	bne.n	8009c82 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c70:	f383 8811 	msr	BASEPRI, r3
 8009c74:	f3bf 8f6f 	isb	sy
 8009c78:	f3bf 8f4f 	dsb	sy
 8009c7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009c7e:	bf00      	nop
 8009c80:	e7fe      	b.n	8009c80 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d10a      	bne.n	8009c9e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c8c:	f383 8811 	msr	BASEPRI, r3
 8009c90:	f3bf 8f6f 	isb	sy
 8009c94:	f3bf 8f4f 	dsb	sy
 8009c98:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009c9a:	bf00      	nop
 8009c9c:	e7fe      	b.n	8009c9c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d002      	beq.n	8009caa <xQueueGenericCreateStatic+0x52>
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d001      	beq.n	8009cae <xQueueGenericCreateStatic+0x56>
 8009caa:	2301      	movs	r3, #1
 8009cac:	e000      	b.n	8009cb0 <xQueueGenericCreateStatic+0x58>
 8009cae:	2300      	movs	r3, #0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d10a      	bne.n	8009cca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb8:	f383 8811 	msr	BASEPRI, r3
 8009cbc:	f3bf 8f6f 	isb	sy
 8009cc0:	f3bf 8f4f 	dsb	sy
 8009cc4:	623b      	str	r3, [r7, #32]
}
 8009cc6:	bf00      	nop
 8009cc8:	e7fe      	b.n	8009cc8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d102      	bne.n	8009cd6 <xQueueGenericCreateStatic+0x7e>
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d101      	bne.n	8009cda <xQueueGenericCreateStatic+0x82>
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	e000      	b.n	8009cdc <xQueueGenericCreateStatic+0x84>
 8009cda:	2300      	movs	r3, #0
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d10a      	bne.n	8009cf6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce4:	f383 8811 	msr	BASEPRI, r3
 8009ce8:	f3bf 8f6f 	isb	sy
 8009cec:	f3bf 8f4f 	dsb	sy
 8009cf0:	61fb      	str	r3, [r7, #28]
}
 8009cf2:	bf00      	nop
 8009cf4:	e7fe      	b.n	8009cf4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009cf6:	2350      	movs	r3, #80	; 0x50
 8009cf8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	2b50      	cmp	r3, #80	; 0x50
 8009cfe:	d00a      	beq.n	8009d16 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d04:	f383 8811 	msr	BASEPRI, r3
 8009d08:	f3bf 8f6f 	isb	sy
 8009d0c:	f3bf 8f4f 	dsb	sy
 8009d10:	61bb      	str	r3, [r7, #24]
}
 8009d12:	bf00      	nop
 8009d14:	e7fe      	b.n	8009d14 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009d16:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d00d      	beq.n	8009d3e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d24:	2201      	movs	r2, #1
 8009d26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009d2a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d30:	9300      	str	r3, [sp, #0]
 8009d32:	4613      	mov	r3, r2
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	68b9      	ldr	r1, [r7, #8]
 8009d38:	68f8      	ldr	r0, [r7, #12]
 8009d3a:	f000 f805 	bl	8009d48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3730      	adds	r7, #48	; 0x30
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b084      	sub	sp, #16
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	60f8      	str	r0, [r7, #12]
 8009d50:	60b9      	str	r1, [r7, #8]
 8009d52:	607a      	str	r2, [r7, #4]
 8009d54:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d103      	bne.n	8009d64 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009d5c:	69bb      	ldr	r3, [r7, #24]
 8009d5e:	69ba      	ldr	r2, [r7, #24]
 8009d60:	601a      	str	r2, [r3, #0]
 8009d62:	e002      	b.n	8009d6a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009d64:	69bb      	ldr	r3, [r7, #24]
 8009d66:	687a      	ldr	r2, [r7, #4]
 8009d68:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009d6a:	69bb      	ldr	r3, [r7, #24]
 8009d6c:	68fa      	ldr	r2, [r7, #12]
 8009d6e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009d70:	69bb      	ldr	r3, [r7, #24]
 8009d72:	68ba      	ldr	r2, [r7, #8]
 8009d74:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009d76:	2101      	movs	r1, #1
 8009d78:	69b8      	ldr	r0, [r7, #24]
 8009d7a:	f7ff ff05 	bl	8009b88 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009d7e:	69bb      	ldr	r3, [r7, #24]
 8009d80:	78fa      	ldrb	r2, [r7, #3]
 8009d82:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009d86:	bf00      	nop
 8009d88:	3710      	adds	r7, #16
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}
	...

08009d90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b08e      	sub	sp, #56	; 0x38
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	60f8      	str	r0, [r7, #12]
 8009d98:	60b9      	str	r1, [r7, #8]
 8009d9a:	607a      	str	r2, [r7, #4]
 8009d9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d10a      	bne.n	8009dc2 <xQueueGenericSend+0x32>
	__asm volatile
 8009dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db0:	f383 8811 	msr	BASEPRI, r3
 8009db4:	f3bf 8f6f 	isb	sy
 8009db8:	f3bf 8f4f 	dsb	sy
 8009dbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009dbe:	bf00      	nop
 8009dc0:	e7fe      	b.n	8009dc0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d103      	bne.n	8009dd0 <xQueueGenericSend+0x40>
 8009dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d101      	bne.n	8009dd4 <xQueueGenericSend+0x44>
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	e000      	b.n	8009dd6 <xQueueGenericSend+0x46>
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d10a      	bne.n	8009df0 <xQueueGenericSend+0x60>
	__asm volatile
 8009dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dde:	f383 8811 	msr	BASEPRI, r3
 8009de2:	f3bf 8f6f 	isb	sy
 8009de6:	f3bf 8f4f 	dsb	sy
 8009dea:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009dec:	bf00      	nop
 8009dee:	e7fe      	b.n	8009dee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	2b02      	cmp	r3, #2
 8009df4:	d103      	bne.n	8009dfe <xQueueGenericSend+0x6e>
 8009df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	d101      	bne.n	8009e02 <xQueueGenericSend+0x72>
 8009dfe:	2301      	movs	r3, #1
 8009e00:	e000      	b.n	8009e04 <xQueueGenericSend+0x74>
 8009e02:	2300      	movs	r3, #0
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d10a      	bne.n	8009e1e <xQueueGenericSend+0x8e>
	__asm volatile
 8009e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e0c:	f383 8811 	msr	BASEPRI, r3
 8009e10:	f3bf 8f6f 	isb	sy
 8009e14:	f3bf 8f4f 	dsb	sy
 8009e18:	623b      	str	r3, [r7, #32]
}
 8009e1a:	bf00      	nop
 8009e1c:	e7fe      	b.n	8009e1c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e1e:	f001 f9e7 	bl	800b1f0 <xTaskGetSchedulerState>
 8009e22:	4603      	mov	r3, r0
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d102      	bne.n	8009e2e <xQueueGenericSend+0x9e>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d101      	bne.n	8009e32 <xQueueGenericSend+0xa2>
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e000      	b.n	8009e34 <xQueueGenericSend+0xa4>
 8009e32:	2300      	movs	r3, #0
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d10a      	bne.n	8009e4e <xQueueGenericSend+0xbe>
	__asm volatile
 8009e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e3c:	f383 8811 	msr	BASEPRI, r3
 8009e40:	f3bf 8f6f 	isb	sy
 8009e44:	f3bf 8f4f 	dsb	sy
 8009e48:	61fb      	str	r3, [r7, #28]
}
 8009e4a:	bf00      	nop
 8009e4c:	e7fe      	b.n	8009e4c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009e4e:	f7ff fd79 	bl	8009944 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	d302      	bcc.n	8009e64 <xQueueGenericSend+0xd4>
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	2b02      	cmp	r3, #2
 8009e62:	d129      	bne.n	8009eb8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e64:	683a      	ldr	r2, [r7, #0]
 8009e66:	68b9      	ldr	r1, [r7, #8]
 8009e68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e6a:	f000 fa0b 	bl	800a284 <prvCopyDataToQueue>
 8009e6e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d010      	beq.n	8009e9a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e7a:	3324      	adds	r3, #36	; 0x24
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f000 fff5 	bl	800ae6c <xTaskRemoveFromEventList>
 8009e82:	4603      	mov	r3, r0
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d013      	beq.n	8009eb0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009e88:	4b3f      	ldr	r3, [pc, #252]	; (8009f88 <xQueueGenericSend+0x1f8>)
 8009e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e8e:	601a      	str	r2, [r3, #0]
 8009e90:	f3bf 8f4f 	dsb	sy
 8009e94:	f3bf 8f6f 	isb	sy
 8009e98:	e00a      	b.n	8009eb0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d007      	beq.n	8009eb0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009ea0:	4b39      	ldr	r3, [pc, #228]	; (8009f88 <xQueueGenericSend+0x1f8>)
 8009ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ea6:	601a      	str	r2, [r3, #0]
 8009ea8:	f3bf 8f4f 	dsb	sy
 8009eac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009eb0:	f7ff fd78 	bl	80099a4 <vPortExitCritical>
				return pdPASS;
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	e063      	b.n	8009f80 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d103      	bne.n	8009ec6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009ebe:	f7ff fd71 	bl	80099a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	e05c      	b.n	8009f80 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d106      	bne.n	8009eda <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009ecc:	f107 0314 	add.w	r3, r7, #20
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f001 f82f 	bl	800af34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009eda:	f7ff fd63 	bl	80099a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009ede:	f000 fd9b 	bl	800aa18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009ee2:	f7ff fd2f 	bl	8009944 <vPortEnterCritical>
 8009ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009eec:	b25b      	sxtb	r3, r3
 8009eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ef2:	d103      	bne.n	8009efc <xQueueGenericSend+0x16c>
 8009ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009efe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f02:	b25b      	sxtb	r3, r3
 8009f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f08:	d103      	bne.n	8009f12 <xQueueGenericSend+0x182>
 8009f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f12:	f7ff fd47 	bl	80099a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f16:	1d3a      	adds	r2, r7, #4
 8009f18:	f107 0314 	add.w	r3, r7, #20
 8009f1c:	4611      	mov	r1, r2
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f001 f81e 	bl	800af60 <xTaskCheckForTimeOut>
 8009f24:	4603      	mov	r3, r0
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d124      	bne.n	8009f74 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009f2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f2c:	f000 faa2 	bl	800a474 <prvIsQueueFull>
 8009f30:	4603      	mov	r3, r0
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d018      	beq.n	8009f68 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f38:	3310      	adds	r3, #16
 8009f3a:	687a      	ldr	r2, [r7, #4]
 8009f3c:	4611      	mov	r1, r2
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f000 ff44 	bl	800adcc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009f44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f46:	f000 fa2d 	bl	800a3a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009f4a:	f000 fd73 	bl	800aa34 <xTaskResumeAll>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	f47f af7c 	bne.w	8009e4e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009f56:	4b0c      	ldr	r3, [pc, #48]	; (8009f88 <xQueueGenericSend+0x1f8>)
 8009f58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f5c:	601a      	str	r2, [r3, #0]
 8009f5e:	f3bf 8f4f 	dsb	sy
 8009f62:	f3bf 8f6f 	isb	sy
 8009f66:	e772      	b.n	8009e4e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009f68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f6a:	f000 fa1b 	bl	800a3a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009f6e:	f000 fd61 	bl	800aa34 <xTaskResumeAll>
 8009f72:	e76c      	b.n	8009e4e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009f74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f76:	f000 fa15 	bl	800a3a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009f7a:	f000 fd5b 	bl	800aa34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009f7e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3738      	adds	r7, #56	; 0x38
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}
 8009f88:	e000ed04 	.word	0xe000ed04

08009f8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b090      	sub	sp, #64	; 0x40
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	60b9      	str	r1, [r7, #8]
 8009f96:	607a      	str	r2, [r7, #4]
 8009f98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d10a      	bne.n	8009fba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa8:	f383 8811 	msr	BASEPRI, r3
 8009fac:	f3bf 8f6f 	isb	sy
 8009fb0:	f3bf 8f4f 	dsb	sy
 8009fb4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009fb6:	bf00      	nop
 8009fb8:	e7fe      	b.n	8009fb8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d103      	bne.n	8009fc8 <xQueueGenericSendFromISR+0x3c>
 8009fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d101      	bne.n	8009fcc <xQueueGenericSendFromISR+0x40>
 8009fc8:	2301      	movs	r3, #1
 8009fca:	e000      	b.n	8009fce <xQueueGenericSendFromISR+0x42>
 8009fcc:	2300      	movs	r3, #0
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d10a      	bne.n	8009fe8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd6:	f383 8811 	msr	BASEPRI, r3
 8009fda:	f3bf 8f6f 	isb	sy
 8009fde:	f3bf 8f4f 	dsb	sy
 8009fe2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009fe4:	bf00      	nop
 8009fe6:	e7fe      	b.n	8009fe6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	2b02      	cmp	r3, #2
 8009fec:	d103      	bne.n	8009ff6 <xQueueGenericSendFromISR+0x6a>
 8009fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d101      	bne.n	8009ffa <xQueueGenericSendFromISR+0x6e>
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	e000      	b.n	8009ffc <xQueueGenericSendFromISR+0x70>
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d10a      	bne.n	800a016 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a004:	f383 8811 	msr	BASEPRI, r3
 800a008:	f3bf 8f6f 	isb	sy
 800a00c:	f3bf 8f4f 	dsb	sy
 800a010:	623b      	str	r3, [r7, #32]
}
 800a012:	bf00      	nop
 800a014:	e7fe      	b.n	800a014 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a016:	f7ff fd77 	bl	8009b08 <vPortValidateInterruptPriority>
	__asm volatile
 800a01a:	f3ef 8211 	mrs	r2, BASEPRI
 800a01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a022:	f383 8811 	msr	BASEPRI, r3
 800a026:	f3bf 8f6f 	isb	sy
 800a02a:	f3bf 8f4f 	dsb	sy
 800a02e:	61fa      	str	r2, [r7, #28]
 800a030:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800a032:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a034:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a038:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a03c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a03e:	429a      	cmp	r2, r3
 800a040:	d302      	bcc.n	800a048 <xQueueGenericSendFromISR+0xbc>
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	2b02      	cmp	r3, #2
 800a046:	d12f      	bne.n	800a0a8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a04a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a04e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a056:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a058:	683a      	ldr	r2, [r7, #0]
 800a05a:	68b9      	ldr	r1, [r7, #8]
 800a05c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a05e:	f000 f911 	bl	800a284 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a062:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a06a:	d112      	bne.n	800a092 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a070:	2b00      	cmp	r3, #0
 800a072:	d016      	beq.n	800a0a2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a076:	3324      	adds	r3, #36	; 0x24
 800a078:	4618      	mov	r0, r3
 800a07a:	f000 fef7 	bl	800ae6c <xTaskRemoveFromEventList>
 800a07e:	4603      	mov	r3, r0
 800a080:	2b00      	cmp	r3, #0
 800a082:	d00e      	beq.n	800a0a2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d00b      	beq.n	800a0a2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2201      	movs	r2, #1
 800a08e:	601a      	str	r2, [r3, #0]
 800a090:	e007      	b.n	800a0a2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a092:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a096:	3301      	adds	r3, #1
 800a098:	b2db      	uxtb	r3, r3
 800a09a:	b25a      	sxtb	r2, r3
 800a09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a09e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a0a6:	e001      	b.n	800a0ac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0ae:	617b      	str	r3, [r7, #20]
	__asm volatile
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	f383 8811 	msr	BASEPRI, r3
}
 800a0b6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a0b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3740      	adds	r7, #64	; 0x40
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
	...

0800a0c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b08c      	sub	sp, #48	; 0x30
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	60f8      	str	r0, [r7, #12]
 800a0cc:	60b9      	str	r1, [r7, #8]
 800a0ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d10a      	bne.n	800a0f4 <xQueueReceive+0x30>
	__asm volatile
 800a0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e2:	f383 8811 	msr	BASEPRI, r3
 800a0e6:	f3bf 8f6f 	isb	sy
 800a0ea:	f3bf 8f4f 	dsb	sy
 800a0ee:	623b      	str	r3, [r7, #32]
}
 800a0f0:	bf00      	nop
 800a0f2:	e7fe      	b.n	800a0f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d103      	bne.n	800a102 <xQueueReceive+0x3e>
 800a0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d101      	bne.n	800a106 <xQueueReceive+0x42>
 800a102:	2301      	movs	r3, #1
 800a104:	e000      	b.n	800a108 <xQueueReceive+0x44>
 800a106:	2300      	movs	r3, #0
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d10a      	bne.n	800a122 <xQueueReceive+0x5e>
	__asm volatile
 800a10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a110:	f383 8811 	msr	BASEPRI, r3
 800a114:	f3bf 8f6f 	isb	sy
 800a118:	f3bf 8f4f 	dsb	sy
 800a11c:	61fb      	str	r3, [r7, #28]
}
 800a11e:	bf00      	nop
 800a120:	e7fe      	b.n	800a120 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a122:	f001 f865 	bl	800b1f0 <xTaskGetSchedulerState>
 800a126:	4603      	mov	r3, r0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d102      	bne.n	800a132 <xQueueReceive+0x6e>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d101      	bne.n	800a136 <xQueueReceive+0x72>
 800a132:	2301      	movs	r3, #1
 800a134:	e000      	b.n	800a138 <xQueueReceive+0x74>
 800a136:	2300      	movs	r3, #0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d10a      	bne.n	800a152 <xQueueReceive+0x8e>
	__asm volatile
 800a13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a140:	f383 8811 	msr	BASEPRI, r3
 800a144:	f3bf 8f6f 	isb	sy
 800a148:	f3bf 8f4f 	dsb	sy
 800a14c:	61bb      	str	r3, [r7, #24]
}
 800a14e:	bf00      	nop
 800a150:	e7fe      	b.n	800a150 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a152:	f7ff fbf7 	bl	8009944 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a15a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d01f      	beq.n	800a1a2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a162:	68b9      	ldr	r1, [r7, #8]
 800a164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a166:	f000 f8f7 	bl	800a358 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a16c:	1e5a      	subs	r2, r3, #1
 800a16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a170:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a174:	691b      	ldr	r3, [r3, #16]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d00f      	beq.n	800a19a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a17c:	3310      	adds	r3, #16
 800a17e:	4618      	mov	r0, r3
 800a180:	f000 fe74 	bl	800ae6c <xTaskRemoveFromEventList>
 800a184:	4603      	mov	r3, r0
 800a186:	2b00      	cmp	r3, #0
 800a188:	d007      	beq.n	800a19a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a18a:	4b3d      	ldr	r3, [pc, #244]	; (800a280 <xQueueReceive+0x1bc>)
 800a18c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a190:	601a      	str	r2, [r3, #0]
 800a192:	f3bf 8f4f 	dsb	sy
 800a196:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a19a:	f7ff fc03 	bl	80099a4 <vPortExitCritical>
				return pdPASS;
 800a19e:	2301      	movs	r3, #1
 800a1a0:	e069      	b.n	800a276 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d103      	bne.n	800a1b0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a1a8:	f7ff fbfc 	bl	80099a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	e062      	b.n	800a276 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d106      	bne.n	800a1c4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a1b6:	f107 0310 	add.w	r3, r7, #16
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f000 feba 	bl	800af34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a1c4:	f7ff fbee 	bl	80099a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a1c8:	f000 fc26 	bl	800aa18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a1cc:	f7ff fbba 	bl	8009944 <vPortEnterCritical>
 800a1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1d6:	b25b      	sxtb	r3, r3
 800a1d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1dc:	d103      	bne.n	800a1e6 <xQueueReceive+0x122>
 800a1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1ec:	b25b      	sxtb	r3, r3
 800a1ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1f2:	d103      	bne.n	800a1fc <xQueueReceive+0x138>
 800a1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1fc:	f7ff fbd2 	bl	80099a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a200:	1d3a      	adds	r2, r7, #4
 800a202:	f107 0310 	add.w	r3, r7, #16
 800a206:	4611      	mov	r1, r2
 800a208:	4618      	mov	r0, r3
 800a20a:	f000 fea9 	bl	800af60 <xTaskCheckForTimeOut>
 800a20e:	4603      	mov	r3, r0
 800a210:	2b00      	cmp	r3, #0
 800a212:	d123      	bne.n	800a25c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a216:	f000 f917 	bl	800a448 <prvIsQueueEmpty>
 800a21a:	4603      	mov	r3, r0
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d017      	beq.n	800a250 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a222:	3324      	adds	r3, #36	; 0x24
 800a224:	687a      	ldr	r2, [r7, #4]
 800a226:	4611      	mov	r1, r2
 800a228:	4618      	mov	r0, r3
 800a22a:	f000 fdcf 	bl	800adcc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a22e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a230:	f000 f8b8 	bl	800a3a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a234:	f000 fbfe 	bl	800aa34 <xTaskResumeAll>
 800a238:	4603      	mov	r3, r0
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d189      	bne.n	800a152 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a23e:	4b10      	ldr	r3, [pc, #64]	; (800a280 <xQueueReceive+0x1bc>)
 800a240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a244:	601a      	str	r2, [r3, #0]
 800a246:	f3bf 8f4f 	dsb	sy
 800a24a:	f3bf 8f6f 	isb	sy
 800a24e:	e780      	b.n	800a152 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a250:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a252:	f000 f8a7 	bl	800a3a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a256:	f000 fbed 	bl	800aa34 <xTaskResumeAll>
 800a25a:	e77a      	b.n	800a152 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a25c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a25e:	f000 f8a1 	bl	800a3a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a262:	f000 fbe7 	bl	800aa34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a266:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a268:	f000 f8ee 	bl	800a448 <prvIsQueueEmpty>
 800a26c:	4603      	mov	r3, r0
 800a26e:	2b00      	cmp	r3, #0
 800a270:	f43f af6f 	beq.w	800a152 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a274:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a276:	4618      	mov	r0, r3
 800a278:	3730      	adds	r7, #48	; 0x30
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
 800a27e:	bf00      	nop
 800a280:	e000ed04 	.word	0xe000ed04

0800a284 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b086      	sub	sp, #24
 800a288:	af00      	add	r7, sp, #0
 800a28a:	60f8      	str	r0, [r7, #12]
 800a28c:	60b9      	str	r1, [r7, #8]
 800a28e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a290:	2300      	movs	r3, #0
 800a292:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a298:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d10d      	bne.n	800a2be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d14d      	bne.n	800a346 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	689b      	ldr	r3, [r3, #8]
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f000 ffbc 	bl	800b22c <xTaskPriorityDisinherit>
 800a2b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	609a      	str	r2, [r3, #8]
 800a2bc:	e043      	b.n	800a346 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d119      	bne.n	800a2f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	6858      	ldr	r0, [r3, #4]
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	68b9      	ldr	r1, [r7, #8]
 800a2d0:	f001 fcdf 	bl	800bc92 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	685a      	ldr	r2, [r3, #4]
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2dc:	441a      	add	r2, r3
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	685a      	ldr	r2, [r3, #4]
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	689b      	ldr	r3, [r3, #8]
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d32b      	bcc.n	800a346 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	605a      	str	r2, [r3, #4]
 800a2f6:	e026      	b.n	800a346 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	68d8      	ldr	r0, [r3, #12]
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a300:	461a      	mov	r2, r3
 800a302:	68b9      	ldr	r1, [r7, #8]
 800a304:	f001 fcc5 	bl	800bc92 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	68da      	ldr	r2, [r3, #12]
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a310:	425b      	negs	r3, r3
 800a312:	441a      	add	r2, r3
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	68da      	ldr	r2, [r3, #12]
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	429a      	cmp	r2, r3
 800a322:	d207      	bcs.n	800a334 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	689a      	ldr	r2, [r3, #8]
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a32c:	425b      	negs	r3, r3
 800a32e:	441a      	add	r2, r3
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2b02      	cmp	r3, #2
 800a338:	d105      	bne.n	800a346 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d002      	beq.n	800a346 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	3b01      	subs	r3, #1
 800a344:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	1c5a      	adds	r2, r3, #1
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a34e:	697b      	ldr	r3, [r7, #20]
}
 800a350:	4618      	mov	r0, r3
 800a352:	3718      	adds	r7, #24
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}

0800a358 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b082      	sub	sp, #8
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
 800a360:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a366:	2b00      	cmp	r3, #0
 800a368:	d018      	beq.n	800a39c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	68da      	ldr	r2, [r3, #12]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a372:	441a      	add	r2, r3
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	68da      	ldr	r2, [r3, #12]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	689b      	ldr	r3, [r3, #8]
 800a380:	429a      	cmp	r2, r3
 800a382:	d303      	bcc.n	800a38c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681a      	ldr	r2, [r3, #0]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	68d9      	ldr	r1, [r3, #12]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a394:	461a      	mov	r2, r3
 800a396:	6838      	ldr	r0, [r7, #0]
 800a398:	f001 fc7b 	bl	800bc92 <memcpy>
	}
}
 800a39c:	bf00      	nop
 800a39e:	3708      	adds	r7, #8
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b084      	sub	sp, #16
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a3ac:	f7ff faca 	bl	8009944 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a3b8:	e011      	b.n	800a3de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d012      	beq.n	800a3e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	3324      	adds	r3, #36	; 0x24
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f000 fd50 	bl	800ae6c <xTaskRemoveFromEventList>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d001      	beq.n	800a3d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a3d2:	f000 fe27 	bl	800b024 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a3d6:	7bfb      	ldrb	r3, [r7, #15]
 800a3d8:	3b01      	subs	r3, #1
 800a3da:	b2db      	uxtb	r3, r3
 800a3dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a3de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	dce9      	bgt.n	800a3ba <prvUnlockQueue+0x16>
 800a3e6:	e000      	b.n	800a3ea <prvUnlockQueue+0x46>
					break;
 800a3e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	22ff      	movs	r2, #255	; 0xff
 800a3ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a3f2:	f7ff fad7 	bl	80099a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a3f6:	f7ff faa5 	bl	8009944 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a400:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a402:	e011      	b.n	800a428 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	691b      	ldr	r3, [r3, #16]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d012      	beq.n	800a432 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	3310      	adds	r3, #16
 800a410:	4618      	mov	r0, r3
 800a412:	f000 fd2b 	bl	800ae6c <xTaskRemoveFromEventList>
 800a416:	4603      	mov	r3, r0
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d001      	beq.n	800a420 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a41c:	f000 fe02 	bl	800b024 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a420:	7bbb      	ldrb	r3, [r7, #14]
 800a422:	3b01      	subs	r3, #1
 800a424:	b2db      	uxtb	r3, r3
 800a426:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a428:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	dce9      	bgt.n	800a404 <prvUnlockQueue+0x60>
 800a430:	e000      	b.n	800a434 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a432:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	22ff      	movs	r2, #255	; 0xff
 800a438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a43c:	f7ff fab2 	bl	80099a4 <vPortExitCritical>
}
 800a440:	bf00      	nop
 800a442:	3710      	adds	r7, #16
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b084      	sub	sp, #16
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a450:	f7ff fa78 	bl	8009944 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d102      	bne.n	800a462 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a45c:	2301      	movs	r3, #1
 800a45e:	60fb      	str	r3, [r7, #12]
 800a460:	e001      	b.n	800a466 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a462:	2300      	movs	r3, #0
 800a464:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a466:	f7ff fa9d 	bl	80099a4 <vPortExitCritical>

	return xReturn;
 800a46a:	68fb      	ldr	r3, [r7, #12]
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3710      	adds	r7, #16
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b084      	sub	sp, #16
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a47c:	f7ff fa62 	bl	8009944 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a488:	429a      	cmp	r2, r3
 800a48a:	d102      	bne.n	800a492 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a48c:	2301      	movs	r3, #1
 800a48e:	60fb      	str	r3, [r7, #12]
 800a490:	e001      	b.n	800a496 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a492:	2300      	movs	r3, #0
 800a494:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a496:	f7ff fa85 	bl	80099a4 <vPortExitCritical>

	return xReturn;
 800a49a:	68fb      	ldr	r3, [r7, #12]
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3710      	adds	r7, #16
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}

0800a4a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b085      	sub	sp, #20
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	60fb      	str	r3, [r7, #12]
 800a4b2:	e014      	b.n	800a4de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a4b4:	4a0f      	ldr	r2, [pc, #60]	; (800a4f4 <vQueueAddToRegistry+0x50>)
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d10b      	bne.n	800a4d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a4c0:	490c      	ldr	r1, [pc, #48]	; (800a4f4 <vQueueAddToRegistry+0x50>)
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	683a      	ldr	r2, [r7, #0]
 800a4c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a4ca:	4a0a      	ldr	r2, [pc, #40]	; (800a4f4 <vQueueAddToRegistry+0x50>)
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	00db      	lsls	r3, r3, #3
 800a4d0:	4413      	add	r3, r2
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a4d6:	e006      	b.n	800a4e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	3301      	adds	r3, #1
 800a4dc:	60fb      	str	r3, [r7, #12]
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2b07      	cmp	r3, #7
 800a4e2:	d9e7      	bls.n	800a4b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a4e4:	bf00      	nop
 800a4e6:	bf00      	nop
 800a4e8:	3714      	adds	r7, #20
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f0:	4770      	bx	lr
 800a4f2:	bf00      	nop
 800a4f4:	2400487c 	.word	0x2400487c

0800a4f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b086      	sub	sp, #24
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	60f8      	str	r0, [r7, #12]
 800a500:	60b9      	str	r1, [r7, #8]
 800a502:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a508:	f7ff fa1c 	bl	8009944 <vPortEnterCritical>
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a512:	b25b      	sxtb	r3, r3
 800a514:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a518:	d103      	bne.n	800a522 <vQueueWaitForMessageRestricted+0x2a>
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	2200      	movs	r2, #0
 800a51e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a528:	b25b      	sxtb	r3, r3
 800a52a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a52e:	d103      	bne.n	800a538 <vQueueWaitForMessageRestricted+0x40>
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	2200      	movs	r2, #0
 800a534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a538:	f7ff fa34 	bl	80099a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a540:	2b00      	cmp	r3, #0
 800a542:	d106      	bne.n	800a552 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	3324      	adds	r3, #36	; 0x24
 800a548:	687a      	ldr	r2, [r7, #4]
 800a54a:	68b9      	ldr	r1, [r7, #8]
 800a54c:	4618      	mov	r0, r3
 800a54e:	f000 fc61 	bl	800ae14 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a552:	6978      	ldr	r0, [r7, #20]
 800a554:	f7ff ff26 	bl	800a3a4 <prvUnlockQueue>
	}
 800a558:	bf00      	nop
 800a55a:	3718      	adds	r7, #24
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a560:	b580      	push	{r7, lr}
 800a562:	b08e      	sub	sp, #56	; 0x38
 800a564:	af04      	add	r7, sp, #16
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	60b9      	str	r1, [r7, #8]
 800a56a:	607a      	str	r2, [r7, #4]
 800a56c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a56e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a570:	2b00      	cmp	r3, #0
 800a572:	d10a      	bne.n	800a58a <xTaskCreateStatic+0x2a>
	__asm volatile
 800a574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a578:	f383 8811 	msr	BASEPRI, r3
 800a57c:	f3bf 8f6f 	isb	sy
 800a580:	f3bf 8f4f 	dsb	sy
 800a584:	623b      	str	r3, [r7, #32]
}
 800a586:	bf00      	nop
 800a588:	e7fe      	b.n	800a588 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d10a      	bne.n	800a5a6 <xTaskCreateStatic+0x46>
	__asm volatile
 800a590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a594:	f383 8811 	msr	BASEPRI, r3
 800a598:	f3bf 8f6f 	isb	sy
 800a59c:	f3bf 8f4f 	dsb	sy
 800a5a0:	61fb      	str	r3, [r7, #28]
}
 800a5a2:	bf00      	nop
 800a5a4:	e7fe      	b.n	800a5a4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a5a6:	23bc      	movs	r3, #188	; 0xbc
 800a5a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	2bbc      	cmp	r3, #188	; 0xbc
 800a5ae:	d00a      	beq.n	800a5c6 <xTaskCreateStatic+0x66>
	__asm volatile
 800a5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b4:	f383 8811 	msr	BASEPRI, r3
 800a5b8:	f3bf 8f6f 	isb	sy
 800a5bc:	f3bf 8f4f 	dsb	sy
 800a5c0:	61bb      	str	r3, [r7, #24]
}
 800a5c2:	bf00      	nop
 800a5c4:	e7fe      	b.n	800a5c4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a5c6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d01e      	beq.n	800a60c <xTaskCreateStatic+0xac>
 800a5ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d01b      	beq.n	800a60c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a5dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e0:	2202      	movs	r2, #2
 800a5e2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	9303      	str	r3, [sp, #12]
 800a5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ec:	9302      	str	r3, [sp, #8]
 800a5ee:	f107 0314 	add.w	r3, r7, #20
 800a5f2:	9301      	str	r3, [sp, #4]
 800a5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f6:	9300      	str	r3, [sp, #0]
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	687a      	ldr	r2, [r7, #4]
 800a5fc:	68b9      	ldr	r1, [r7, #8]
 800a5fe:	68f8      	ldr	r0, [r7, #12]
 800a600:	f000 f850 	bl	800a6a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a604:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a606:	f000 f8f3 	bl	800a7f0 <prvAddNewTaskToReadyList>
 800a60a:	e001      	b.n	800a610 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a60c:	2300      	movs	r3, #0
 800a60e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a610:	697b      	ldr	r3, [r7, #20]
	}
 800a612:	4618      	mov	r0, r3
 800a614:	3728      	adds	r7, #40	; 0x28
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}

0800a61a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a61a:	b580      	push	{r7, lr}
 800a61c:	b08c      	sub	sp, #48	; 0x30
 800a61e:	af04      	add	r7, sp, #16
 800a620:	60f8      	str	r0, [r7, #12]
 800a622:	60b9      	str	r1, [r7, #8]
 800a624:	603b      	str	r3, [r7, #0]
 800a626:	4613      	mov	r3, r2
 800a628:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a62a:	88fb      	ldrh	r3, [r7, #6]
 800a62c:	009b      	lsls	r3, r3, #2
 800a62e:	4618      	mov	r0, r3
 800a630:	f7fe fdbc 	bl	80091ac <pvPortMalloc>
 800a634:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d00e      	beq.n	800a65a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a63c:	20bc      	movs	r0, #188	; 0xbc
 800a63e:	f7fe fdb5 	bl	80091ac <pvPortMalloc>
 800a642:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a644:	69fb      	ldr	r3, [r7, #28]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d003      	beq.n	800a652 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a64a:	69fb      	ldr	r3, [r7, #28]
 800a64c:	697a      	ldr	r2, [r7, #20]
 800a64e:	631a      	str	r2, [r3, #48]	; 0x30
 800a650:	e005      	b.n	800a65e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a652:	6978      	ldr	r0, [r7, #20]
 800a654:	f7fe fe76 	bl	8009344 <vPortFree>
 800a658:	e001      	b.n	800a65e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a65a:	2300      	movs	r3, #0
 800a65c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a65e:	69fb      	ldr	r3, [r7, #28]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d017      	beq.n	800a694 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a664:	69fb      	ldr	r3, [r7, #28]
 800a666:	2200      	movs	r2, #0
 800a668:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a66c:	88fa      	ldrh	r2, [r7, #6]
 800a66e:	2300      	movs	r3, #0
 800a670:	9303      	str	r3, [sp, #12]
 800a672:	69fb      	ldr	r3, [r7, #28]
 800a674:	9302      	str	r3, [sp, #8]
 800a676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a678:	9301      	str	r3, [sp, #4]
 800a67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a67c:	9300      	str	r3, [sp, #0]
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	68b9      	ldr	r1, [r7, #8]
 800a682:	68f8      	ldr	r0, [r7, #12]
 800a684:	f000 f80e 	bl	800a6a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a688:	69f8      	ldr	r0, [r7, #28]
 800a68a:	f000 f8b1 	bl	800a7f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a68e:	2301      	movs	r3, #1
 800a690:	61bb      	str	r3, [r7, #24]
 800a692:	e002      	b.n	800a69a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a694:	f04f 33ff 	mov.w	r3, #4294967295
 800a698:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a69a:	69bb      	ldr	r3, [r7, #24]
	}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3720      	adds	r7, #32
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b088      	sub	sp, #32
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	60f8      	str	r0, [r7, #12]
 800a6ac:	60b9      	str	r1, [r7, #8]
 800a6ae:	607a      	str	r2, [r7, #4]
 800a6b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	009b      	lsls	r3, r3, #2
 800a6ba:	461a      	mov	r2, r3
 800a6bc:	21a5      	movs	r1, #165	; 0xa5
 800a6be:	f001 faf6 	bl	800bcae <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a6c6:	6879      	ldr	r1, [r7, #4]
 800a6c8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800a6cc:	440b      	add	r3, r1
 800a6ce:	009b      	lsls	r3, r3, #2
 800a6d0:	4413      	add	r3, r2
 800a6d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a6d4:	69bb      	ldr	r3, [r7, #24]
 800a6d6:	f023 0307 	bic.w	r3, r3, #7
 800a6da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a6dc:	69bb      	ldr	r3, [r7, #24]
 800a6de:	f003 0307 	and.w	r3, r3, #7
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d00a      	beq.n	800a6fc <prvInitialiseNewTask+0x58>
	__asm volatile
 800a6e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ea:	f383 8811 	msr	BASEPRI, r3
 800a6ee:	f3bf 8f6f 	isb	sy
 800a6f2:	f3bf 8f4f 	dsb	sy
 800a6f6:	617b      	str	r3, [r7, #20]
}
 800a6f8:	bf00      	nop
 800a6fa:	e7fe      	b.n	800a6fa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d01f      	beq.n	800a742 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a702:	2300      	movs	r3, #0
 800a704:	61fb      	str	r3, [r7, #28]
 800a706:	e012      	b.n	800a72e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a708:	68ba      	ldr	r2, [r7, #8]
 800a70a:	69fb      	ldr	r3, [r7, #28]
 800a70c:	4413      	add	r3, r2
 800a70e:	7819      	ldrb	r1, [r3, #0]
 800a710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a712:	69fb      	ldr	r3, [r7, #28]
 800a714:	4413      	add	r3, r2
 800a716:	3334      	adds	r3, #52	; 0x34
 800a718:	460a      	mov	r2, r1
 800a71a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a71c:	68ba      	ldr	r2, [r7, #8]
 800a71e:	69fb      	ldr	r3, [r7, #28]
 800a720:	4413      	add	r3, r2
 800a722:	781b      	ldrb	r3, [r3, #0]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d006      	beq.n	800a736 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a728:	69fb      	ldr	r3, [r7, #28]
 800a72a:	3301      	adds	r3, #1
 800a72c:	61fb      	str	r3, [r7, #28]
 800a72e:	69fb      	ldr	r3, [r7, #28]
 800a730:	2b0f      	cmp	r3, #15
 800a732:	d9e9      	bls.n	800a708 <prvInitialiseNewTask+0x64>
 800a734:	e000      	b.n	800a738 <prvInitialiseNewTask+0x94>
			{
				break;
 800a736:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a73a:	2200      	movs	r2, #0
 800a73c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a740:	e003      	b.n	800a74a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a744:	2200      	movs	r2, #0
 800a746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a74c:	2b37      	cmp	r3, #55	; 0x37
 800a74e:	d901      	bls.n	800a754 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a750:	2337      	movs	r3, #55	; 0x37
 800a752:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a756:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a758:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a75c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a75e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a762:	2200      	movs	r2, #0
 800a764:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a768:	3304      	adds	r3, #4
 800a76a:	4618      	mov	r0, r3
 800a76c:	f7fe ff28 	bl	80095c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a772:	3318      	adds	r3, #24
 800a774:	4618      	mov	r0, r3
 800a776:	f7fe ff23 	bl	80095c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a77c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a77e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a782:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a788:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a78c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a78e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a792:	2200      	movs	r2, #0
 800a794:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a79a:	2200      	movs	r2, #0
 800a79c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a2:	3354      	adds	r3, #84	; 0x54
 800a7a4:	2260      	movs	r2, #96	; 0x60
 800a7a6:	2100      	movs	r1, #0
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f001 fa80 	bl	800bcae <memset>
 800a7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b0:	4a0c      	ldr	r2, [pc, #48]	; (800a7e4 <prvInitialiseNewTask+0x140>)
 800a7b2:	659a      	str	r2, [r3, #88]	; 0x58
 800a7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b6:	4a0c      	ldr	r2, [pc, #48]	; (800a7e8 <prvInitialiseNewTask+0x144>)
 800a7b8:	65da      	str	r2, [r3, #92]	; 0x5c
 800a7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7bc:	4a0b      	ldr	r2, [pc, #44]	; (800a7ec <prvInitialiseNewTask+0x148>)
 800a7be:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a7c0:	683a      	ldr	r2, [r7, #0]
 800a7c2:	68f9      	ldr	r1, [r7, #12]
 800a7c4:	69b8      	ldr	r0, [r7, #24]
 800a7c6:	f7fe ff8f 	bl	80096e8 <pxPortInitialiseStack>
 800a7ca:	4602      	mov	r2, r0
 800a7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ce:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d002      	beq.n	800a7dc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7da:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a7dc:	bf00      	nop
 800a7de:	3720      	adds	r7, #32
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}
 800a7e4:	0800d5d0 	.word	0x0800d5d0
 800a7e8:	0800d5f0 	.word	0x0800d5f0
 800a7ec:	0800d5b0 	.word	0x0800d5b0

0800a7f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a7f8:	f7ff f8a4 	bl	8009944 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a7fc:	4b2d      	ldr	r3, [pc, #180]	; (800a8b4 <prvAddNewTaskToReadyList+0xc4>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	3301      	adds	r3, #1
 800a802:	4a2c      	ldr	r2, [pc, #176]	; (800a8b4 <prvAddNewTaskToReadyList+0xc4>)
 800a804:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a806:	4b2c      	ldr	r3, [pc, #176]	; (800a8b8 <prvAddNewTaskToReadyList+0xc8>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d109      	bne.n	800a822 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a80e:	4a2a      	ldr	r2, [pc, #168]	; (800a8b8 <prvAddNewTaskToReadyList+0xc8>)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a814:	4b27      	ldr	r3, [pc, #156]	; (800a8b4 <prvAddNewTaskToReadyList+0xc4>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	2b01      	cmp	r3, #1
 800a81a:	d110      	bne.n	800a83e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a81c:	f000 fc26 	bl	800b06c <prvInitialiseTaskLists>
 800a820:	e00d      	b.n	800a83e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a822:	4b26      	ldr	r3, [pc, #152]	; (800a8bc <prvAddNewTaskToReadyList+0xcc>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d109      	bne.n	800a83e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a82a:	4b23      	ldr	r3, [pc, #140]	; (800a8b8 <prvAddNewTaskToReadyList+0xc8>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a834:	429a      	cmp	r2, r3
 800a836:	d802      	bhi.n	800a83e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a838:	4a1f      	ldr	r2, [pc, #124]	; (800a8b8 <prvAddNewTaskToReadyList+0xc8>)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a83e:	4b20      	ldr	r3, [pc, #128]	; (800a8c0 <prvAddNewTaskToReadyList+0xd0>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	3301      	adds	r3, #1
 800a844:	4a1e      	ldr	r2, [pc, #120]	; (800a8c0 <prvAddNewTaskToReadyList+0xd0>)
 800a846:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a848:	4b1d      	ldr	r3, [pc, #116]	; (800a8c0 <prvAddNewTaskToReadyList+0xd0>)
 800a84a:	681a      	ldr	r2, [r3, #0]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a854:	4b1b      	ldr	r3, [pc, #108]	; (800a8c4 <prvAddNewTaskToReadyList+0xd4>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	429a      	cmp	r2, r3
 800a85a:	d903      	bls.n	800a864 <prvAddNewTaskToReadyList+0x74>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a860:	4a18      	ldr	r2, [pc, #96]	; (800a8c4 <prvAddNewTaskToReadyList+0xd4>)
 800a862:	6013      	str	r3, [r2, #0]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a868:	4613      	mov	r3, r2
 800a86a:	009b      	lsls	r3, r3, #2
 800a86c:	4413      	add	r3, r2
 800a86e:	009b      	lsls	r3, r3, #2
 800a870:	4a15      	ldr	r2, [pc, #84]	; (800a8c8 <prvAddNewTaskToReadyList+0xd8>)
 800a872:	441a      	add	r2, r3
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	3304      	adds	r3, #4
 800a878:	4619      	mov	r1, r3
 800a87a:	4610      	mov	r0, r2
 800a87c:	f7fe fead 	bl	80095da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a880:	f7ff f890 	bl	80099a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a884:	4b0d      	ldr	r3, [pc, #52]	; (800a8bc <prvAddNewTaskToReadyList+0xcc>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d00e      	beq.n	800a8aa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a88c:	4b0a      	ldr	r3, [pc, #40]	; (800a8b8 <prvAddNewTaskToReadyList+0xc8>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a896:	429a      	cmp	r2, r3
 800a898:	d207      	bcs.n	800a8aa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a89a:	4b0c      	ldr	r3, [pc, #48]	; (800a8cc <prvAddNewTaskToReadyList+0xdc>)
 800a89c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8a0:	601a      	str	r2, [r3, #0]
 800a8a2:	f3bf 8f4f 	dsb	sy
 800a8a6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a8aa:	bf00      	nop
 800a8ac:	3708      	adds	r7, #8
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}
 800a8b2:	bf00      	nop
 800a8b4:	24004d90 	.word	0x24004d90
 800a8b8:	240048bc 	.word	0x240048bc
 800a8bc:	24004d9c 	.word	0x24004d9c
 800a8c0:	24004dac 	.word	0x24004dac
 800a8c4:	24004d98 	.word	0x24004d98
 800a8c8:	240048c0 	.word	0x240048c0
 800a8cc:	e000ed04 	.word	0xe000ed04

0800a8d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b084      	sub	sp, #16
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d017      	beq.n	800a912 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a8e2:	4b13      	ldr	r3, [pc, #76]	; (800a930 <vTaskDelay+0x60>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d00a      	beq.n	800a900 <vTaskDelay+0x30>
	__asm volatile
 800a8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ee:	f383 8811 	msr	BASEPRI, r3
 800a8f2:	f3bf 8f6f 	isb	sy
 800a8f6:	f3bf 8f4f 	dsb	sy
 800a8fa:	60bb      	str	r3, [r7, #8]
}
 800a8fc:	bf00      	nop
 800a8fe:	e7fe      	b.n	800a8fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a900:	f000 f88a 	bl	800aa18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a904:	2100      	movs	r1, #0
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f000 fcfe 	bl	800b308 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a90c:	f000 f892 	bl	800aa34 <xTaskResumeAll>
 800a910:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d107      	bne.n	800a928 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a918:	4b06      	ldr	r3, [pc, #24]	; (800a934 <vTaskDelay+0x64>)
 800a91a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a91e:	601a      	str	r2, [r3, #0]
 800a920:	f3bf 8f4f 	dsb	sy
 800a924:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a928:	bf00      	nop
 800a92a:	3710      	adds	r7, #16
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}
 800a930:	24004db8 	.word	0x24004db8
 800a934:	e000ed04 	.word	0xe000ed04

0800a938 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b08a      	sub	sp, #40	; 0x28
 800a93c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a93e:	2300      	movs	r3, #0
 800a940:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a942:	2300      	movs	r3, #0
 800a944:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a946:	463a      	mov	r2, r7
 800a948:	1d39      	adds	r1, r7, #4
 800a94a:	f107 0308 	add.w	r3, r7, #8
 800a94e:	4618      	mov	r0, r3
 800a950:	f7fe fbf8 	bl	8009144 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a954:	6839      	ldr	r1, [r7, #0]
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	68ba      	ldr	r2, [r7, #8]
 800a95a:	9202      	str	r2, [sp, #8]
 800a95c:	9301      	str	r3, [sp, #4]
 800a95e:	2300      	movs	r3, #0
 800a960:	9300      	str	r3, [sp, #0]
 800a962:	2300      	movs	r3, #0
 800a964:	460a      	mov	r2, r1
 800a966:	4924      	ldr	r1, [pc, #144]	; (800a9f8 <vTaskStartScheduler+0xc0>)
 800a968:	4824      	ldr	r0, [pc, #144]	; (800a9fc <vTaskStartScheduler+0xc4>)
 800a96a:	f7ff fdf9 	bl	800a560 <xTaskCreateStatic>
 800a96e:	4603      	mov	r3, r0
 800a970:	4a23      	ldr	r2, [pc, #140]	; (800aa00 <vTaskStartScheduler+0xc8>)
 800a972:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a974:	4b22      	ldr	r3, [pc, #136]	; (800aa00 <vTaskStartScheduler+0xc8>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d002      	beq.n	800a982 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a97c:	2301      	movs	r3, #1
 800a97e:	617b      	str	r3, [r7, #20]
 800a980:	e001      	b.n	800a986 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a982:	2300      	movs	r3, #0
 800a984:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	2b01      	cmp	r3, #1
 800a98a:	d102      	bne.n	800a992 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a98c:	f000 fd10 	bl	800b3b0 <xTimerCreateTimerTask>
 800a990:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	2b01      	cmp	r3, #1
 800a996:	d11b      	bne.n	800a9d0 <vTaskStartScheduler+0x98>
	__asm volatile
 800a998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a99c:	f383 8811 	msr	BASEPRI, r3
 800a9a0:	f3bf 8f6f 	isb	sy
 800a9a4:	f3bf 8f4f 	dsb	sy
 800a9a8:	613b      	str	r3, [r7, #16]
}
 800a9aa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a9ac:	4b15      	ldr	r3, [pc, #84]	; (800aa04 <vTaskStartScheduler+0xcc>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	3354      	adds	r3, #84	; 0x54
 800a9b2:	4a15      	ldr	r2, [pc, #84]	; (800aa08 <vTaskStartScheduler+0xd0>)
 800a9b4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a9b6:	4b15      	ldr	r3, [pc, #84]	; (800aa0c <vTaskStartScheduler+0xd4>)
 800a9b8:	f04f 32ff 	mov.w	r2, #4294967295
 800a9bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a9be:	4b14      	ldr	r3, [pc, #80]	; (800aa10 <vTaskStartScheduler+0xd8>)
 800a9c0:	2201      	movs	r2, #1
 800a9c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a9c4:	4b13      	ldr	r3, [pc, #76]	; (800aa14 <vTaskStartScheduler+0xdc>)
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a9ca:	f7fe ff19 	bl	8009800 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a9ce:	e00e      	b.n	800a9ee <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9d6:	d10a      	bne.n	800a9ee <vTaskStartScheduler+0xb6>
	__asm volatile
 800a9d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9dc:	f383 8811 	msr	BASEPRI, r3
 800a9e0:	f3bf 8f6f 	isb	sy
 800a9e4:	f3bf 8f4f 	dsb	sy
 800a9e8:	60fb      	str	r3, [r7, #12]
}
 800a9ea:	bf00      	nop
 800a9ec:	e7fe      	b.n	800a9ec <vTaskStartScheduler+0xb4>
}
 800a9ee:	bf00      	nop
 800a9f0:	3718      	adds	r7, #24
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
 800a9f6:	bf00      	nop
 800a9f8:	0800d52c 	.word	0x0800d52c
 800a9fc:	0800b03d 	.word	0x0800b03d
 800aa00:	24004db4 	.word	0x24004db4
 800aa04:	240048bc 	.word	0x240048bc
 800aa08:	2400001c 	.word	0x2400001c
 800aa0c:	24004db0 	.word	0x24004db0
 800aa10:	24004d9c 	.word	0x24004d9c
 800aa14:	24004d94 	.word	0x24004d94

0800aa18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aa18:	b480      	push	{r7}
 800aa1a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800aa1c:	4b04      	ldr	r3, [pc, #16]	; (800aa30 <vTaskSuspendAll+0x18>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	3301      	adds	r3, #1
 800aa22:	4a03      	ldr	r2, [pc, #12]	; (800aa30 <vTaskSuspendAll+0x18>)
 800aa24:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800aa26:	bf00      	nop
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2e:	4770      	bx	lr
 800aa30:	24004db8 	.word	0x24004db8

0800aa34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b084      	sub	sp, #16
 800aa38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aa42:	4b42      	ldr	r3, [pc, #264]	; (800ab4c <xTaskResumeAll+0x118>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d10a      	bne.n	800aa60 <xTaskResumeAll+0x2c>
	__asm volatile
 800aa4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa4e:	f383 8811 	msr	BASEPRI, r3
 800aa52:	f3bf 8f6f 	isb	sy
 800aa56:	f3bf 8f4f 	dsb	sy
 800aa5a:	603b      	str	r3, [r7, #0]
}
 800aa5c:	bf00      	nop
 800aa5e:	e7fe      	b.n	800aa5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aa60:	f7fe ff70 	bl	8009944 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aa64:	4b39      	ldr	r3, [pc, #228]	; (800ab4c <xTaskResumeAll+0x118>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	3b01      	subs	r3, #1
 800aa6a:	4a38      	ldr	r2, [pc, #224]	; (800ab4c <xTaskResumeAll+0x118>)
 800aa6c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa6e:	4b37      	ldr	r3, [pc, #220]	; (800ab4c <xTaskResumeAll+0x118>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d162      	bne.n	800ab3c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aa76:	4b36      	ldr	r3, [pc, #216]	; (800ab50 <xTaskResumeAll+0x11c>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d05e      	beq.n	800ab3c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aa7e:	e02f      	b.n	800aae0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa80:	4b34      	ldr	r3, [pc, #208]	; (800ab54 <xTaskResumeAll+0x120>)
 800aa82:	68db      	ldr	r3, [r3, #12]
 800aa84:	68db      	ldr	r3, [r3, #12]
 800aa86:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	3318      	adds	r3, #24
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f7fe fe01 	bl	8009694 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	3304      	adds	r3, #4
 800aa96:	4618      	mov	r0, r3
 800aa98:	f7fe fdfc 	bl	8009694 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaa0:	4b2d      	ldr	r3, [pc, #180]	; (800ab58 <xTaskResumeAll+0x124>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	d903      	bls.n	800aab0 <xTaskResumeAll+0x7c>
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaac:	4a2a      	ldr	r2, [pc, #168]	; (800ab58 <xTaskResumeAll+0x124>)
 800aaae:	6013      	str	r3, [r2, #0]
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aab4:	4613      	mov	r3, r2
 800aab6:	009b      	lsls	r3, r3, #2
 800aab8:	4413      	add	r3, r2
 800aaba:	009b      	lsls	r3, r3, #2
 800aabc:	4a27      	ldr	r2, [pc, #156]	; (800ab5c <xTaskResumeAll+0x128>)
 800aabe:	441a      	add	r2, r3
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	3304      	adds	r3, #4
 800aac4:	4619      	mov	r1, r3
 800aac6:	4610      	mov	r0, r2
 800aac8:	f7fe fd87 	bl	80095da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aad0:	4b23      	ldr	r3, [pc, #140]	; (800ab60 <xTaskResumeAll+0x12c>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d302      	bcc.n	800aae0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800aada:	4b22      	ldr	r3, [pc, #136]	; (800ab64 <xTaskResumeAll+0x130>)
 800aadc:	2201      	movs	r2, #1
 800aade:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aae0:	4b1c      	ldr	r3, [pc, #112]	; (800ab54 <xTaskResumeAll+0x120>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d1cb      	bne.n	800aa80 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d001      	beq.n	800aaf2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aaee:	f000 fb5f 	bl	800b1b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800aaf2:	4b1d      	ldr	r3, [pc, #116]	; (800ab68 <xTaskResumeAll+0x134>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d010      	beq.n	800ab20 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800aafe:	f000 f847 	bl	800ab90 <xTaskIncrementTick>
 800ab02:	4603      	mov	r3, r0
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d002      	beq.n	800ab0e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ab08:	4b16      	ldr	r3, [pc, #88]	; (800ab64 <xTaskResumeAll+0x130>)
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	3b01      	subs	r3, #1
 800ab12:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d1f1      	bne.n	800aafe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ab1a:	4b13      	ldr	r3, [pc, #76]	; (800ab68 <xTaskResumeAll+0x134>)
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ab20:	4b10      	ldr	r3, [pc, #64]	; (800ab64 <xTaskResumeAll+0x130>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d009      	beq.n	800ab3c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ab28:	2301      	movs	r3, #1
 800ab2a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ab2c:	4b0f      	ldr	r3, [pc, #60]	; (800ab6c <xTaskResumeAll+0x138>)
 800ab2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab32:	601a      	str	r2, [r3, #0]
 800ab34:	f3bf 8f4f 	dsb	sy
 800ab38:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ab3c:	f7fe ff32 	bl	80099a4 <vPortExitCritical>

	return xAlreadyYielded;
 800ab40:	68bb      	ldr	r3, [r7, #8]
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3710      	adds	r7, #16
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
 800ab4a:	bf00      	nop
 800ab4c:	24004db8 	.word	0x24004db8
 800ab50:	24004d90 	.word	0x24004d90
 800ab54:	24004d50 	.word	0x24004d50
 800ab58:	24004d98 	.word	0x24004d98
 800ab5c:	240048c0 	.word	0x240048c0
 800ab60:	240048bc 	.word	0x240048bc
 800ab64:	24004da4 	.word	0x24004da4
 800ab68:	24004da0 	.word	0x24004da0
 800ab6c:	e000ed04 	.word	0xe000ed04

0800ab70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ab70:	b480      	push	{r7}
 800ab72:	b083      	sub	sp, #12
 800ab74:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ab76:	4b05      	ldr	r3, [pc, #20]	; (800ab8c <xTaskGetTickCount+0x1c>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ab7c:	687b      	ldr	r3, [r7, #4]
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	370c      	adds	r7, #12
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr
 800ab8a:	bf00      	nop
 800ab8c:	24004d94 	.word	0x24004d94

0800ab90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b086      	sub	sp, #24
 800ab94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ab96:	2300      	movs	r3, #0
 800ab98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab9a:	4b4f      	ldr	r3, [pc, #316]	; (800acd8 <xTaskIncrementTick+0x148>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	f040 808f 	bne.w	800acc2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aba4:	4b4d      	ldr	r3, [pc, #308]	; (800acdc <xTaskIncrementTick+0x14c>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	3301      	adds	r3, #1
 800abaa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800abac:	4a4b      	ldr	r2, [pc, #300]	; (800acdc <xTaskIncrementTick+0x14c>)
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d120      	bne.n	800abfa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800abb8:	4b49      	ldr	r3, [pc, #292]	; (800ace0 <xTaskIncrementTick+0x150>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d00a      	beq.n	800abd8 <xTaskIncrementTick+0x48>
	__asm volatile
 800abc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc6:	f383 8811 	msr	BASEPRI, r3
 800abca:	f3bf 8f6f 	isb	sy
 800abce:	f3bf 8f4f 	dsb	sy
 800abd2:	603b      	str	r3, [r7, #0]
}
 800abd4:	bf00      	nop
 800abd6:	e7fe      	b.n	800abd6 <xTaskIncrementTick+0x46>
 800abd8:	4b41      	ldr	r3, [pc, #260]	; (800ace0 <xTaskIncrementTick+0x150>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	60fb      	str	r3, [r7, #12]
 800abde:	4b41      	ldr	r3, [pc, #260]	; (800ace4 <xTaskIncrementTick+0x154>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	4a3f      	ldr	r2, [pc, #252]	; (800ace0 <xTaskIncrementTick+0x150>)
 800abe4:	6013      	str	r3, [r2, #0]
 800abe6:	4a3f      	ldr	r2, [pc, #252]	; (800ace4 <xTaskIncrementTick+0x154>)
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	6013      	str	r3, [r2, #0]
 800abec:	4b3e      	ldr	r3, [pc, #248]	; (800ace8 <xTaskIncrementTick+0x158>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	3301      	adds	r3, #1
 800abf2:	4a3d      	ldr	r2, [pc, #244]	; (800ace8 <xTaskIncrementTick+0x158>)
 800abf4:	6013      	str	r3, [r2, #0]
 800abf6:	f000 fadb 	bl	800b1b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800abfa:	4b3c      	ldr	r3, [pc, #240]	; (800acec <xTaskIncrementTick+0x15c>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	693a      	ldr	r2, [r7, #16]
 800ac00:	429a      	cmp	r2, r3
 800ac02:	d349      	bcc.n	800ac98 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac04:	4b36      	ldr	r3, [pc, #216]	; (800ace0 <xTaskIncrementTick+0x150>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d104      	bne.n	800ac18 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac0e:	4b37      	ldr	r3, [pc, #220]	; (800acec <xTaskIncrementTick+0x15c>)
 800ac10:	f04f 32ff 	mov.w	r2, #4294967295
 800ac14:	601a      	str	r2, [r3, #0]
					break;
 800ac16:	e03f      	b.n	800ac98 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac18:	4b31      	ldr	r3, [pc, #196]	; (800ace0 <xTaskIncrementTick+0x150>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	68db      	ldr	r3, [r3, #12]
 800ac1e:	68db      	ldr	r3, [r3, #12]
 800ac20:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ac28:	693a      	ldr	r2, [r7, #16]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	d203      	bcs.n	800ac38 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ac30:	4a2e      	ldr	r2, [pc, #184]	; (800acec <xTaskIncrementTick+0x15c>)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ac36:	e02f      	b.n	800ac98 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	3304      	adds	r3, #4
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f7fe fd29 	bl	8009694 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d004      	beq.n	800ac54 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	3318      	adds	r3, #24
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f7fe fd20 	bl	8009694 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac58:	4b25      	ldr	r3, [pc, #148]	; (800acf0 <xTaskIncrementTick+0x160>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	429a      	cmp	r2, r3
 800ac5e:	d903      	bls.n	800ac68 <xTaskIncrementTick+0xd8>
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac64:	4a22      	ldr	r2, [pc, #136]	; (800acf0 <xTaskIncrementTick+0x160>)
 800ac66:	6013      	str	r3, [r2, #0]
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac6c:	4613      	mov	r3, r2
 800ac6e:	009b      	lsls	r3, r3, #2
 800ac70:	4413      	add	r3, r2
 800ac72:	009b      	lsls	r3, r3, #2
 800ac74:	4a1f      	ldr	r2, [pc, #124]	; (800acf4 <xTaskIncrementTick+0x164>)
 800ac76:	441a      	add	r2, r3
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	3304      	adds	r3, #4
 800ac7c:	4619      	mov	r1, r3
 800ac7e:	4610      	mov	r0, r2
 800ac80:	f7fe fcab 	bl	80095da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac88:	4b1b      	ldr	r3, [pc, #108]	; (800acf8 <xTaskIncrementTick+0x168>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	d3b8      	bcc.n	800ac04 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ac92:	2301      	movs	r3, #1
 800ac94:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac96:	e7b5      	b.n	800ac04 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ac98:	4b17      	ldr	r3, [pc, #92]	; (800acf8 <xTaskIncrementTick+0x168>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac9e:	4915      	ldr	r1, [pc, #84]	; (800acf4 <xTaskIncrementTick+0x164>)
 800aca0:	4613      	mov	r3, r2
 800aca2:	009b      	lsls	r3, r3, #2
 800aca4:	4413      	add	r3, r2
 800aca6:	009b      	lsls	r3, r3, #2
 800aca8:	440b      	add	r3, r1
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	2b01      	cmp	r3, #1
 800acae:	d901      	bls.n	800acb4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800acb0:	2301      	movs	r3, #1
 800acb2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800acb4:	4b11      	ldr	r3, [pc, #68]	; (800acfc <xTaskIncrementTick+0x16c>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d007      	beq.n	800accc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800acbc:	2301      	movs	r3, #1
 800acbe:	617b      	str	r3, [r7, #20]
 800acc0:	e004      	b.n	800accc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800acc2:	4b0f      	ldr	r3, [pc, #60]	; (800ad00 <xTaskIncrementTick+0x170>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	3301      	adds	r3, #1
 800acc8:	4a0d      	ldr	r2, [pc, #52]	; (800ad00 <xTaskIncrementTick+0x170>)
 800acca:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800accc:	697b      	ldr	r3, [r7, #20]
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3718      	adds	r7, #24
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}
 800acd6:	bf00      	nop
 800acd8:	24004db8 	.word	0x24004db8
 800acdc:	24004d94 	.word	0x24004d94
 800ace0:	24004d48 	.word	0x24004d48
 800ace4:	24004d4c 	.word	0x24004d4c
 800ace8:	24004da8 	.word	0x24004da8
 800acec:	24004db0 	.word	0x24004db0
 800acf0:	24004d98 	.word	0x24004d98
 800acf4:	240048c0 	.word	0x240048c0
 800acf8:	240048bc 	.word	0x240048bc
 800acfc:	24004da4 	.word	0x24004da4
 800ad00:	24004da0 	.word	0x24004da0

0800ad04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ad04:	b480      	push	{r7}
 800ad06:	b085      	sub	sp, #20
 800ad08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ad0a:	4b2a      	ldr	r3, [pc, #168]	; (800adb4 <vTaskSwitchContext+0xb0>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d003      	beq.n	800ad1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ad12:	4b29      	ldr	r3, [pc, #164]	; (800adb8 <vTaskSwitchContext+0xb4>)
 800ad14:	2201      	movs	r2, #1
 800ad16:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ad18:	e046      	b.n	800ada8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800ad1a:	4b27      	ldr	r3, [pc, #156]	; (800adb8 <vTaskSwitchContext+0xb4>)
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad20:	4b26      	ldr	r3, [pc, #152]	; (800adbc <vTaskSwitchContext+0xb8>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	60fb      	str	r3, [r7, #12]
 800ad26:	e010      	b.n	800ad4a <vTaskSwitchContext+0x46>
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d10a      	bne.n	800ad44 <vTaskSwitchContext+0x40>
	__asm volatile
 800ad2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad32:	f383 8811 	msr	BASEPRI, r3
 800ad36:	f3bf 8f6f 	isb	sy
 800ad3a:	f3bf 8f4f 	dsb	sy
 800ad3e:	607b      	str	r3, [r7, #4]
}
 800ad40:	bf00      	nop
 800ad42:	e7fe      	b.n	800ad42 <vTaskSwitchContext+0x3e>
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	3b01      	subs	r3, #1
 800ad48:	60fb      	str	r3, [r7, #12]
 800ad4a:	491d      	ldr	r1, [pc, #116]	; (800adc0 <vTaskSwitchContext+0xbc>)
 800ad4c:	68fa      	ldr	r2, [r7, #12]
 800ad4e:	4613      	mov	r3, r2
 800ad50:	009b      	lsls	r3, r3, #2
 800ad52:	4413      	add	r3, r2
 800ad54:	009b      	lsls	r3, r3, #2
 800ad56:	440b      	add	r3, r1
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d0e4      	beq.n	800ad28 <vTaskSwitchContext+0x24>
 800ad5e:	68fa      	ldr	r2, [r7, #12]
 800ad60:	4613      	mov	r3, r2
 800ad62:	009b      	lsls	r3, r3, #2
 800ad64:	4413      	add	r3, r2
 800ad66:	009b      	lsls	r3, r3, #2
 800ad68:	4a15      	ldr	r2, [pc, #84]	; (800adc0 <vTaskSwitchContext+0xbc>)
 800ad6a:	4413      	add	r3, r2
 800ad6c:	60bb      	str	r3, [r7, #8]
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	685a      	ldr	r2, [r3, #4]
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	605a      	str	r2, [r3, #4]
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	685a      	ldr	r2, [r3, #4]
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	3308      	adds	r3, #8
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d104      	bne.n	800ad8e <vTaskSwitchContext+0x8a>
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	685b      	ldr	r3, [r3, #4]
 800ad88:	685a      	ldr	r2, [r3, #4]
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	605a      	str	r2, [r3, #4]
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	685b      	ldr	r3, [r3, #4]
 800ad92:	68db      	ldr	r3, [r3, #12]
 800ad94:	4a0b      	ldr	r2, [pc, #44]	; (800adc4 <vTaskSwitchContext+0xc0>)
 800ad96:	6013      	str	r3, [r2, #0]
 800ad98:	4a08      	ldr	r2, [pc, #32]	; (800adbc <vTaskSwitchContext+0xb8>)
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ad9e:	4b09      	ldr	r3, [pc, #36]	; (800adc4 <vTaskSwitchContext+0xc0>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	3354      	adds	r3, #84	; 0x54
 800ada4:	4a08      	ldr	r2, [pc, #32]	; (800adc8 <vTaskSwitchContext+0xc4>)
 800ada6:	6013      	str	r3, [r2, #0]
}
 800ada8:	bf00      	nop
 800adaa:	3714      	adds	r7, #20
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr
 800adb4:	24004db8 	.word	0x24004db8
 800adb8:	24004da4 	.word	0x24004da4
 800adbc:	24004d98 	.word	0x24004d98
 800adc0:	240048c0 	.word	0x240048c0
 800adc4:	240048bc 	.word	0x240048bc
 800adc8:	2400001c 	.word	0x2400001c

0800adcc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b084      	sub	sp, #16
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d10a      	bne.n	800adf2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800addc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade0:	f383 8811 	msr	BASEPRI, r3
 800ade4:	f3bf 8f6f 	isb	sy
 800ade8:	f3bf 8f4f 	dsb	sy
 800adec:	60fb      	str	r3, [r7, #12]
}
 800adee:	bf00      	nop
 800adf0:	e7fe      	b.n	800adf0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800adf2:	4b07      	ldr	r3, [pc, #28]	; (800ae10 <vTaskPlaceOnEventList+0x44>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	3318      	adds	r3, #24
 800adf8:	4619      	mov	r1, r3
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f7fe fc11 	bl	8009622 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ae00:	2101      	movs	r1, #1
 800ae02:	6838      	ldr	r0, [r7, #0]
 800ae04:	f000 fa80 	bl	800b308 <prvAddCurrentTaskToDelayedList>
}
 800ae08:	bf00      	nop
 800ae0a:	3710      	adds	r7, #16
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}
 800ae10:	240048bc 	.word	0x240048bc

0800ae14 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b086      	sub	sp, #24
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	60f8      	str	r0, [r7, #12]
 800ae1c:	60b9      	str	r1, [r7, #8]
 800ae1e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d10a      	bne.n	800ae3c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ae26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae2a:	f383 8811 	msr	BASEPRI, r3
 800ae2e:	f3bf 8f6f 	isb	sy
 800ae32:	f3bf 8f4f 	dsb	sy
 800ae36:	617b      	str	r3, [r7, #20]
}
 800ae38:	bf00      	nop
 800ae3a:	e7fe      	b.n	800ae3a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ae3c:	4b0a      	ldr	r3, [pc, #40]	; (800ae68 <vTaskPlaceOnEventListRestricted+0x54>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	3318      	adds	r3, #24
 800ae42:	4619      	mov	r1, r3
 800ae44:	68f8      	ldr	r0, [r7, #12]
 800ae46:	f7fe fbc8 	bl	80095da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d002      	beq.n	800ae56 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ae50:	f04f 33ff 	mov.w	r3, #4294967295
 800ae54:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ae56:	6879      	ldr	r1, [r7, #4]
 800ae58:	68b8      	ldr	r0, [r7, #8]
 800ae5a:	f000 fa55 	bl	800b308 <prvAddCurrentTaskToDelayedList>
	}
 800ae5e:	bf00      	nop
 800ae60:	3718      	adds	r7, #24
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}
 800ae66:	bf00      	nop
 800ae68:	240048bc 	.word	0x240048bc

0800ae6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b086      	sub	sp, #24
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	68db      	ldr	r3, [r3, #12]
 800ae78:	68db      	ldr	r3, [r3, #12]
 800ae7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d10a      	bne.n	800ae98 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ae82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae86:	f383 8811 	msr	BASEPRI, r3
 800ae8a:	f3bf 8f6f 	isb	sy
 800ae8e:	f3bf 8f4f 	dsb	sy
 800ae92:	60fb      	str	r3, [r7, #12]
}
 800ae94:	bf00      	nop
 800ae96:	e7fe      	b.n	800ae96 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	3318      	adds	r3, #24
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f7fe fbf9 	bl	8009694 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aea2:	4b1e      	ldr	r3, [pc, #120]	; (800af1c <xTaskRemoveFromEventList+0xb0>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d11d      	bne.n	800aee6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	3304      	adds	r3, #4
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f7fe fbf0 	bl	8009694 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aeb4:	693b      	ldr	r3, [r7, #16]
 800aeb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeb8:	4b19      	ldr	r3, [pc, #100]	; (800af20 <xTaskRemoveFromEventList+0xb4>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d903      	bls.n	800aec8 <xTaskRemoveFromEventList+0x5c>
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aec4:	4a16      	ldr	r2, [pc, #88]	; (800af20 <xTaskRemoveFromEventList+0xb4>)
 800aec6:	6013      	str	r3, [r2, #0]
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aecc:	4613      	mov	r3, r2
 800aece:	009b      	lsls	r3, r3, #2
 800aed0:	4413      	add	r3, r2
 800aed2:	009b      	lsls	r3, r3, #2
 800aed4:	4a13      	ldr	r2, [pc, #76]	; (800af24 <xTaskRemoveFromEventList+0xb8>)
 800aed6:	441a      	add	r2, r3
 800aed8:	693b      	ldr	r3, [r7, #16]
 800aeda:	3304      	adds	r3, #4
 800aedc:	4619      	mov	r1, r3
 800aede:	4610      	mov	r0, r2
 800aee0:	f7fe fb7b 	bl	80095da <vListInsertEnd>
 800aee4:	e005      	b.n	800aef2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	3318      	adds	r3, #24
 800aeea:	4619      	mov	r1, r3
 800aeec:	480e      	ldr	r0, [pc, #56]	; (800af28 <xTaskRemoveFromEventList+0xbc>)
 800aeee:	f7fe fb74 	bl	80095da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aef6:	4b0d      	ldr	r3, [pc, #52]	; (800af2c <xTaskRemoveFromEventList+0xc0>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aefc:	429a      	cmp	r2, r3
 800aefe:	d905      	bls.n	800af0c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800af00:	2301      	movs	r3, #1
 800af02:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800af04:	4b0a      	ldr	r3, [pc, #40]	; (800af30 <xTaskRemoveFromEventList+0xc4>)
 800af06:	2201      	movs	r2, #1
 800af08:	601a      	str	r2, [r3, #0]
 800af0a:	e001      	b.n	800af10 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800af0c:	2300      	movs	r3, #0
 800af0e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800af10:	697b      	ldr	r3, [r7, #20]
}
 800af12:	4618      	mov	r0, r3
 800af14:	3718      	adds	r7, #24
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
 800af1a:	bf00      	nop
 800af1c:	24004db8 	.word	0x24004db8
 800af20:	24004d98 	.word	0x24004d98
 800af24:	240048c0 	.word	0x240048c0
 800af28:	24004d50 	.word	0x24004d50
 800af2c:	240048bc 	.word	0x240048bc
 800af30:	24004da4 	.word	0x24004da4

0800af34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800af34:	b480      	push	{r7}
 800af36:	b083      	sub	sp, #12
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800af3c:	4b06      	ldr	r3, [pc, #24]	; (800af58 <vTaskInternalSetTimeOutState+0x24>)
 800af3e:	681a      	ldr	r2, [r3, #0]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800af44:	4b05      	ldr	r3, [pc, #20]	; (800af5c <vTaskInternalSetTimeOutState+0x28>)
 800af46:	681a      	ldr	r2, [r3, #0]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	605a      	str	r2, [r3, #4]
}
 800af4c:	bf00      	nop
 800af4e:	370c      	adds	r7, #12
 800af50:	46bd      	mov	sp, r7
 800af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af56:	4770      	bx	lr
 800af58:	24004da8 	.word	0x24004da8
 800af5c:	24004d94 	.word	0x24004d94

0800af60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b088      	sub	sp, #32
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d10a      	bne.n	800af86 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800af70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af74:	f383 8811 	msr	BASEPRI, r3
 800af78:	f3bf 8f6f 	isb	sy
 800af7c:	f3bf 8f4f 	dsb	sy
 800af80:	613b      	str	r3, [r7, #16]
}
 800af82:	bf00      	nop
 800af84:	e7fe      	b.n	800af84 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d10a      	bne.n	800afa2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800af8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af90:	f383 8811 	msr	BASEPRI, r3
 800af94:	f3bf 8f6f 	isb	sy
 800af98:	f3bf 8f4f 	dsb	sy
 800af9c:	60fb      	str	r3, [r7, #12]
}
 800af9e:	bf00      	nop
 800afa0:	e7fe      	b.n	800afa0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800afa2:	f7fe fccf 	bl	8009944 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800afa6:	4b1d      	ldr	r3, [pc, #116]	; (800b01c <xTaskCheckForTimeOut+0xbc>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	685b      	ldr	r3, [r3, #4]
 800afb0:	69ba      	ldr	r2, [r7, #24]
 800afb2:	1ad3      	subs	r3, r2, r3
 800afb4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afbe:	d102      	bne.n	800afc6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800afc0:	2300      	movs	r3, #0
 800afc2:	61fb      	str	r3, [r7, #28]
 800afc4:	e023      	b.n	800b00e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681a      	ldr	r2, [r3, #0]
 800afca:	4b15      	ldr	r3, [pc, #84]	; (800b020 <xTaskCheckForTimeOut+0xc0>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	429a      	cmp	r2, r3
 800afd0:	d007      	beq.n	800afe2 <xTaskCheckForTimeOut+0x82>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	685b      	ldr	r3, [r3, #4]
 800afd6:	69ba      	ldr	r2, [r7, #24]
 800afd8:	429a      	cmp	r2, r3
 800afda:	d302      	bcc.n	800afe2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800afdc:	2301      	movs	r3, #1
 800afde:	61fb      	str	r3, [r7, #28]
 800afe0:	e015      	b.n	800b00e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	697a      	ldr	r2, [r7, #20]
 800afe8:	429a      	cmp	r2, r3
 800afea:	d20b      	bcs.n	800b004 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	681a      	ldr	r2, [r3, #0]
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	1ad2      	subs	r2, r2, r3
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f7ff ff9b 	bl	800af34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800affe:	2300      	movs	r3, #0
 800b000:	61fb      	str	r3, [r7, #28]
 800b002:	e004      	b.n	800b00e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	2200      	movs	r2, #0
 800b008:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b00a:	2301      	movs	r3, #1
 800b00c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b00e:	f7fe fcc9 	bl	80099a4 <vPortExitCritical>

	return xReturn;
 800b012:	69fb      	ldr	r3, [r7, #28]
}
 800b014:	4618      	mov	r0, r3
 800b016:	3720      	adds	r7, #32
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}
 800b01c:	24004d94 	.word	0x24004d94
 800b020:	24004da8 	.word	0x24004da8

0800b024 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b024:	b480      	push	{r7}
 800b026:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b028:	4b03      	ldr	r3, [pc, #12]	; (800b038 <vTaskMissedYield+0x14>)
 800b02a:	2201      	movs	r2, #1
 800b02c:	601a      	str	r2, [r3, #0]
}
 800b02e:	bf00      	nop
 800b030:	46bd      	mov	sp, r7
 800b032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b036:	4770      	bx	lr
 800b038:	24004da4 	.word	0x24004da4

0800b03c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b082      	sub	sp, #8
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b044:	f000 f852 	bl	800b0ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b048:	4b06      	ldr	r3, [pc, #24]	; (800b064 <prvIdleTask+0x28>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	2b01      	cmp	r3, #1
 800b04e:	d9f9      	bls.n	800b044 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b050:	4b05      	ldr	r3, [pc, #20]	; (800b068 <prvIdleTask+0x2c>)
 800b052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b056:	601a      	str	r2, [r3, #0]
 800b058:	f3bf 8f4f 	dsb	sy
 800b05c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b060:	e7f0      	b.n	800b044 <prvIdleTask+0x8>
 800b062:	bf00      	nop
 800b064:	240048c0 	.word	0x240048c0
 800b068:	e000ed04 	.word	0xe000ed04

0800b06c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b082      	sub	sp, #8
 800b070:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b072:	2300      	movs	r3, #0
 800b074:	607b      	str	r3, [r7, #4]
 800b076:	e00c      	b.n	800b092 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b078:	687a      	ldr	r2, [r7, #4]
 800b07a:	4613      	mov	r3, r2
 800b07c:	009b      	lsls	r3, r3, #2
 800b07e:	4413      	add	r3, r2
 800b080:	009b      	lsls	r3, r3, #2
 800b082:	4a12      	ldr	r2, [pc, #72]	; (800b0cc <prvInitialiseTaskLists+0x60>)
 800b084:	4413      	add	r3, r2
 800b086:	4618      	mov	r0, r3
 800b088:	f7fe fa7a 	bl	8009580 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	3301      	adds	r3, #1
 800b090:	607b      	str	r3, [r7, #4]
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2b37      	cmp	r3, #55	; 0x37
 800b096:	d9ef      	bls.n	800b078 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b098:	480d      	ldr	r0, [pc, #52]	; (800b0d0 <prvInitialiseTaskLists+0x64>)
 800b09a:	f7fe fa71 	bl	8009580 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b09e:	480d      	ldr	r0, [pc, #52]	; (800b0d4 <prvInitialiseTaskLists+0x68>)
 800b0a0:	f7fe fa6e 	bl	8009580 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b0a4:	480c      	ldr	r0, [pc, #48]	; (800b0d8 <prvInitialiseTaskLists+0x6c>)
 800b0a6:	f7fe fa6b 	bl	8009580 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b0aa:	480c      	ldr	r0, [pc, #48]	; (800b0dc <prvInitialiseTaskLists+0x70>)
 800b0ac:	f7fe fa68 	bl	8009580 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b0b0:	480b      	ldr	r0, [pc, #44]	; (800b0e0 <prvInitialiseTaskLists+0x74>)
 800b0b2:	f7fe fa65 	bl	8009580 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b0b6:	4b0b      	ldr	r3, [pc, #44]	; (800b0e4 <prvInitialiseTaskLists+0x78>)
 800b0b8:	4a05      	ldr	r2, [pc, #20]	; (800b0d0 <prvInitialiseTaskLists+0x64>)
 800b0ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b0bc:	4b0a      	ldr	r3, [pc, #40]	; (800b0e8 <prvInitialiseTaskLists+0x7c>)
 800b0be:	4a05      	ldr	r2, [pc, #20]	; (800b0d4 <prvInitialiseTaskLists+0x68>)
 800b0c0:	601a      	str	r2, [r3, #0]
}
 800b0c2:	bf00      	nop
 800b0c4:	3708      	adds	r7, #8
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}
 800b0ca:	bf00      	nop
 800b0cc:	240048c0 	.word	0x240048c0
 800b0d0:	24004d20 	.word	0x24004d20
 800b0d4:	24004d34 	.word	0x24004d34
 800b0d8:	24004d50 	.word	0x24004d50
 800b0dc:	24004d64 	.word	0x24004d64
 800b0e0:	24004d7c 	.word	0x24004d7c
 800b0e4:	24004d48 	.word	0x24004d48
 800b0e8:	24004d4c 	.word	0x24004d4c

0800b0ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b082      	sub	sp, #8
 800b0f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b0f2:	e019      	b.n	800b128 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b0f4:	f7fe fc26 	bl	8009944 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0f8:	4b10      	ldr	r3, [pc, #64]	; (800b13c <prvCheckTasksWaitingTermination+0x50>)
 800b0fa:	68db      	ldr	r3, [r3, #12]
 800b0fc:	68db      	ldr	r3, [r3, #12]
 800b0fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	3304      	adds	r3, #4
 800b104:	4618      	mov	r0, r3
 800b106:	f7fe fac5 	bl	8009694 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b10a:	4b0d      	ldr	r3, [pc, #52]	; (800b140 <prvCheckTasksWaitingTermination+0x54>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	3b01      	subs	r3, #1
 800b110:	4a0b      	ldr	r2, [pc, #44]	; (800b140 <prvCheckTasksWaitingTermination+0x54>)
 800b112:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b114:	4b0b      	ldr	r3, [pc, #44]	; (800b144 <prvCheckTasksWaitingTermination+0x58>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	3b01      	subs	r3, #1
 800b11a:	4a0a      	ldr	r2, [pc, #40]	; (800b144 <prvCheckTasksWaitingTermination+0x58>)
 800b11c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b11e:	f7fe fc41 	bl	80099a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f000 f810 	bl	800b148 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b128:	4b06      	ldr	r3, [pc, #24]	; (800b144 <prvCheckTasksWaitingTermination+0x58>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d1e1      	bne.n	800b0f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b130:	bf00      	nop
 800b132:	bf00      	nop
 800b134:	3708      	adds	r7, #8
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}
 800b13a:	bf00      	nop
 800b13c:	24004d64 	.word	0x24004d64
 800b140:	24004d90 	.word	0x24004d90
 800b144:	24004d78 	.word	0x24004d78

0800b148 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b084      	sub	sp, #16
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	3354      	adds	r3, #84	; 0x54
 800b154:	4618      	mov	r0, r3
 800b156:	f000 fee3 	bl	800bf20 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b160:	2b00      	cmp	r3, #0
 800b162:	d108      	bne.n	800b176 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b168:	4618      	mov	r0, r3
 800b16a:	f7fe f8eb 	bl	8009344 <vPortFree>
				vPortFree( pxTCB );
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f7fe f8e8 	bl	8009344 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b174:	e018      	b.n	800b1a8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b17c:	2b01      	cmp	r3, #1
 800b17e:	d103      	bne.n	800b188 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f7fe f8df 	bl	8009344 <vPortFree>
	}
 800b186:	e00f      	b.n	800b1a8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b18e:	2b02      	cmp	r3, #2
 800b190:	d00a      	beq.n	800b1a8 <prvDeleteTCB+0x60>
	__asm volatile
 800b192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b196:	f383 8811 	msr	BASEPRI, r3
 800b19a:	f3bf 8f6f 	isb	sy
 800b19e:	f3bf 8f4f 	dsb	sy
 800b1a2:	60fb      	str	r3, [r7, #12]
}
 800b1a4:	bf00      	nop
 800b1a6:	e7fe      	b.n	800b1a6 <prvDeleteTCB+0x5e>
	}
 800b1a8:	bf00      	nop
 800b1aa:	3710      	adds	r7, #16
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}

0800b1b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b083      	sub	sp, #12
 800b1b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b1b6:	4b0c      	ldr	r3, [pc, #48]	; (800b1e8 <prvResetNextTaskUnblockTime+0x38>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d104      	bne.n	800b1ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b1c0:	4b0a      	ldr	r3, [pc, #40]	; (800b1ec <prvResetNextTaskUnblockTime+0x3c>)
 800b1c2:	f04f 32ff 	mov.w	r2, #4294967295
 800b1c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b1c8:	e008      	b.n	800b1dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1ca:	4b07      	ldr	r3, [pc, #28]	; (800b1e8 <prvResetNextTaskUnblockTime+0x38>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	68db      	ldr	r3, [r3, #12]
 800b1d0:	68db      	ldr	r3, [r3, #12]
 800b1d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	685b      	ldr	r3, [r3, #4]
 800b1d8:	4a04      	ldr	r2, [pc, #16]	; (800b1ec <prvResetNextTaskUnblockTime+0x3c>)
 800b1da:	6013      	str	r3, [r2, #0]
}
 800b1dc:	bf00      	nop
 800b1de:	370c      	adds	r7, #12
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e6:	4770      	bx	lr
 800b1e8:	24004d48 	.word	0x24004d48
 800b1ec:	24004db0 	.word	0x24004db0

0800b1f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b083      	sub	sp, #12
 800b1f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b1f6:	4b0b      	ldr	r3, [pc, #44]	; (800b224 <xTaskGetSchedulerState+0x34>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d102      	bne.n	800b204 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b1fe:	2301      	movs	r3, #1
 800b200:	607b      	str	r3, [r7, #4]
 800b202:	e008      	b.n	800b216 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b204:	4b08      	ldr	r3, [pc, #32]	; (800b228 <xTaskGetSchedulerState+0x38>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d102      	bne.n	800b212 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b20c:	2302      	movs	r3, #2
 800b20e:	607b      	str	r3, [r7, #4]
 800b210:	e001      	b.n	800b216 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b212:	2300      	movs	r3, #0
 800b214:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b216:	687b      	ldr	r3, [r7, #4]
	}
 800b218:	4618      	mov	r0, r3
 800b21a:	370c      	adds	r7, #12
 800b21c:	46bd      	mov	sp, r7
 800b21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b222:	4770      	bx	lr
 800b224:	24004d9c 	.word	0x24004d9c
 800b228:	24004db8 	.word	0x24004db8

0800b22c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b086      	sub	sp, #24
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b238:	2300      	movs	r3, #0
 800b23a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d056      	beq.n	800b2f0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b242:	4b2e      	ldr	r3, [pc, #184]	; (800b2fc <xTaskPriorityDisinherit+0xd0>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	693a      	ldr	r2, [r7, #16]
 800b248:	429a      	cmp	r2, r3
 800b24a:	d00a      	beq.n	800b262 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b250:	f383 8811 	msr	BASEPRI, r3
 800b254:	f3bf 8f6f 	isb	sy
 800b258:	f3bf 8f4f 	dsb	sy
 800b25c:	60fb      	str	r3, [r7, #12]
}
 800b25e:	bf00      	nop
 800b260:	e7fe      	b.n	800b260 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b266:	2b00      	cmp	r3, #0
 800b268:	d10a      	bne.n	800b280 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b26e:	f383 8811 	msr	BASEPRI, r3
 800b272:	f3bf 8f6f 	isb	sy
 800b276:	f3bf 8f4f 	dsb	sy
 800b27a:	60bb      	str	r3, [r7, #8]
}
 800b27c:	bf00      	nop
 800b27e:	e7fe      	b.n	800b27e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b284:	1e5a      	subs	r2, r3, #1
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b292:	429a      	cmp	r2, r3
 800b294:	d02c      	beq.n	800b2f0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d128      	bne.n	800b2f0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	3304      	adds	r3, #4
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f7fe f9f6 	bl	8009694 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b2ac:	693b      	ldr	r3, [r7, #16]
 800b2ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2c0:	4b0f      	ldr	r3, [pc, #60]	; (800b300 <xTaskPriorityDisinherit+0xd4>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	429a      	cmp	r2, r3
 800b2c6:	d903      	bls.n	800b2d0 <xTaskPriorityDisinherit+0xa4>
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2cc:	4a0c      	ldr	r2, [pc, #48]	; (800b300 <xTaskPriorityDisinherit+0xd4>)
 800b2ce:	6013      	str	r3, [r2, #0]
 800b2d0:	693b      	ldr	r3, [r7, #16]
 800b2d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2d4:	4613      	mov	r3, r2
 800b2d6:	009b      	lsls	r3, r3, #2
 800b2d8:	4413      	add	r3, r2
 800b2da:	009b      	lsls	r3, r3, #2
 800b2dc:	4a09      	ldr	r2, [pc, #36]	; (800b304 <xTaskPriorityDisinherit+0xd8>)
 800b2de:	441a      	add	r2, r3
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	3304      	adds	r3, #4
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	4610      	mov	r0, r2
 800b2e8:	f7fe f977 	bl	80095da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b2f0:	697b      	ldr	r3, [r7, #20]
	}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3718      	adds	r7, #24
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}
 800b2fa:	bf00      	nop
 800b2fc:	240048bc 	.word	0x240048bc
 800b300:	24004d98 	.word	0x24004d98
 800b304:	240048c0 	.word	0x240048c0

0800b308 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b084      	sub	sp, #16
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
 800b310:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b312:	4b21      	ldr	r3, [pc, #132]	; (800b398 <prvAddCurrentTaskToDelayedList+0x90>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b318:	4b20      	ldr	r3, [pc, #128]	; (800b39c <prvAddCurrentTaskToDelayedList+0x94>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	3304      	adds	r3, #4
 800b31e:	4618      	mov	r0, r3
 800b320:	f7fe f9b8 	bl	8009694 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b32a:	d10a      	bne.n	800b342 <prvAddCurrentTaskToDelayedList+0x3a>
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d007      	beq.n	800b342 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b332:	4b1a      	ldr	r3, [pc, #104]	; (800b39c <prvAddCurrentTaskToDelayedList+0x94>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	3304      	adds	r3, #4
 800b338:	4619      	mov	r1, r3
 800b33a:	4819      	ldr	r0, [pc, #100]	; (800b3a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800b33c:	f7fe f94d 	bl	80095da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b340:	e026      	b.n	800b390 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b342:	68fa      	ldr	r2, [r7, #12]
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	4413      	add	r3, r2
 800b348:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b34a:	4b14      	ldr	r3, [pc, #80]	; (800b39c <prvAddCurrentTaskToDelayedList+0x94>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	68ba      	ldr	r2, [r7, #8]
 800b350:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b352:	68ba      	ldr	r2, [r7, #8]
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	429a      	cmp	r2, r3
 800b358:	d209      	bcs.n	800b36e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b35a:	4b12      	ldr	r3, [pc, #72]	; (800b3a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b35c:	681a      	ldr	r2, [r3, #0]
 800b35e:	4b0f      	ldr	r3, [pc, #60]	; (800b39c <prvAddCurrentTaskToDelayedList+0x94>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	3304      	adds	r3, #4
 800b364:	4619      	mov	r1, r3
 800b366:	4610      	mov	r0, r2
 800b368:	f7fe f95b 	bl	8009622 <vListInsert>
}
 800b36c:	e010      	b.n	800b390 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b36e:	4b0e      	ldr	r3, [pc, #56]	; (800b3a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b370:	681a      	ldr	r2, [r3, #0]
 800b372:	4b0a      	ldr	r3, [pc, #40]	; (800b39c <prvAddCurrentTaskToDelayedList+0x94>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	3304      	adds	r3, #4
 800b378:	4619      	mov	r1, r3
 800b37a:	4610      	mov	r0, r2
 800b37c:	f7fe f951 	bl	8009622 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b380:	4b0a      	ldr	r3, [pc, #40]	; (800b3ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	68ba      	ldr	r2, [r7, #8]
 800b386:	429a      	cmp	r2, r3
 800b388:	d202      	bcs.n	800b390 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b38a:	4a08      	ldr	r2, [pc, #32]	; (800b3ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	6013      	str	r3, [r2, #0]
}
 800b390:	bf00      	nop
 800b392:	3710      	adds	r7, #16
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}
 800b398:	24004d94 	.word	0x24004d94
 800b39c:	240048bc 	.word	0x240048bc
 800b3a0:	24004d7c 	.word	0x24004d7c
 800b3a4:	24004d4c 	.word	0x24004d4c
 800b3a8:	24004d48 	.word	0x24004d48
 800b3ac:	24004db0 	.word	0x24004db0

0800b3b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b08a      	sub	sp, #40	; 0x28
 800b3b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b3ba:	f000 fb07 	bl	800b9cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b3be:	4b1c      	ldr	r3, [pc, #112]	; (800b430 <xTimerCreateTimerTask+0x80>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d021      	beq.n	800b40a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b3ce:	1d3a      	adds	r2, r7, #4
 800b3d0:	f107 0108 	add.w	r1, r7, #8
 800b3d4:	f107 030c 	add.w	r3, r7, #12
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f7fd fecd 	bl	8009178 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b3de:	6879      	ldr	r1, [r7, #4]
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	68fa      	ldr	r2, [r7, #12]
 800b3e4:	9202      	str	r2, [sp, #8]
 800b3e6:	9301      	str	r3, [sp, #4]
 800b3e8:	2302      	movs	r3, #2
 800b3ea:	9300      	str	r3, [sp, #0]
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	460a      	mov	r2, r1
 800b3f0:	4910      	ldr	r1, [pc, #64]	; (800b434 <xTimerCreateTimerTask+0x84>)
 800b3f2:	4811      	ldr	r0, [pc, #68]	; (800b438 <xTimerCreateTimerTask+0x88>)
 800b3f4:	f7ff f8b4 	bl	800a560 <xTaskCreateStatic>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	4a10      	ldr	r2, [pc, #64]	; (800b43c <xTimerCreateTimerTask+0x8c>)
 800b3fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b3fe:	4b0f      	ldr	r3, [pc, #60]	; (800b43c <xTimerCreateTimerTask+0x8c>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d001      	beq.n	800b40a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b406:	2301      	movs	r3, #1
 800b408:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d10a      	bne.n	800b426 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b414:	f383 8811 	msr	BASEPRI, r3
 800b418:	f3bf 8f6f 	isb	sy
 800b41c:	f3bf 8f4f 	dsb	sy
 800b420:	613b      	str	r3, [r7, #16]
}
 800b422:	bf00      	nop
 800b424:	e7fe      	b.n	800b424 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b426:	697b      	ldr	r3, [r7, #20]
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3718      	adds	r7, #24
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}
 800b430:	24004dec 	.word	0x24004dec
 800b434:	0800d534 	.word	0x0800d534
 800b438:	0800b575 	.word	0x0800b575
 800b43c:	24004df0 	.word	0x24004df0

0800b440 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b08a      	sub	sp, #40	; 0x28
 800b444:	af00      	add	r7, sp, #0
 800b446:	60f8      	str	r0, [r7, #12]
 800b448:	60b9      	str	r1, [r7, #8]
 800b44a:	607a      	str	r2, [r7, #4]
 800b44c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b44e:	2300      	movs	r3, #0
 800b450:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d10a      	bne.n	800b46e <xTimerGenericCommand+0x2e>
	__asm volatile
 800b458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b45c:	f383 8811 	msr	BASEPRI, r3
 800b460:	f3bf 8f6f 	isb	sy
 800b464:	f3bf 8f4f 	dsb	sy
 800b468:	623b      	str	r3, [r7, #32]
}
 800b46a:	bf00      	nop
 800b46c:	e7fe      	b.n	800b46c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b46e:	4b1a      	ldr	r3, [pc, #104]	; (800b4d8 <xTimerGenericCommand+0x98>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d02a      	beq.n	800b4cc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	2b05      	cmp	r3, #5
 800b486:	dc18      	bgt.n	800b4ba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b488:	f7ff feb2 	bl	800b1f0 <xTaskGetSchedulerState>
 800b48c:	4603      	mov	r3, r0
 800b48e:	2b02      	cmp	r3, #2
 800b490:	d109      	bne.n	800b4a6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b492:	4b11      	ldr	r3, [pc, #68]	; (800b4d8 <xTimerGenericCommand+0x98>)
 800b494:	6818      	ldr	r0, [r3, #0]
 800b496:	f107 0110 	add.w	r1, r7, #16
 800b49a:	2300      	movs	r3, #0
 800b49c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b49e:	f7fe fc77 	bl	8009d90 <xQueueGenericSend>
 800b4a2:	6278      	str	r0, [r7, #36]	; 0x24
 800b4a4:	e012      	b.n	800b4cc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b4a6:	4b0c      	ldr	r3, [pc, #48]	; (800b4d8 <xTimerGenericCommand+0x98>)
 800b4a8:	6818      	ldr	r0, [r3, #0]
 800b4aa:	f107 0110 	add.w	r1, r7, #16
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	f7fe fc6d 	bl	8009d90 <xQueueGenericSend>
 800b4b6:	6278      	str	r0, [r7, #36]	; 0x24
 800b4b8:	e008      	b.n	800b4cc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b4ba:	4b07      	ldr	r3, [pc, #28]	; (800b4d8 <xTimerGenericCommand+0x98>)
 800b4bc:	6818      	ldr	r0, [r3, #0]
 800b4be:	f107 0110 	add.w	r1, r7, #16
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	683a      	ldr	r2, [r7, #0]
 800b4c6:	f7fe fd61 	bl	8009f8c <xQueueGenericSendFromISR>
 800b4ca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	3728      	adds	r7, #40	; 0x28
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}
 800b4d6:	bf00      	nop
 800b4d8:	24004dec 	.word	0x24004dec

0800b4dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b088      	sub	sp, #32
 800b4e0:	af02      	add	r7, sp, #8
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4e6:	4b22      	ldr	r3, [pc, #136]	; (800b570 <prvProcessExpiredTimer+0x94>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	68db      	ldr	r3, [r3, #12]
 800b4ec:	68db      	ldr	r3, [r3, #12]
 800b4ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	3304      	adds	r3, #4
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f7fe f8cd 	bl	8009694 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b500:	f003 0304 	and.w	r3, r3, #4
 800b504:	2b00      	cmp	r3, #0
 800b506:	d022      	beq.n	800b54e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	699a      	ldr	r2, [r3, #24]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	18d1      	adds	r1, r2, r3
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	683a      	ldr	r2, [r7, #0]
 800b514:	6978      	ldr	r0, [r7, #20]
 800b516:	f000 f8d1 	bl	800b6bc <prvInsertTimerInActiveList>
 800b51a:	4603      	mov	r3, r0
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d01f      	beq.n	800b560 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b520:	2300      	movs	r3, #0
 800b522:	9300      	str	r3, [sp, #0]
 800b524:	2300      	movs	r3, #0
 800b526:	687a      	ldr	r2, [r7, #4]
 800b528:	2100      	movs	r1, #0
 800b52a:	6978      	ldr	r0, [r7, #20]
 800b52c:	f7ff ff88 	bl	800b440 <xTimerGenericCommand>
 800b530:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b532:	693b      	ldr	r3, [r7, #16]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d113      	bne.n	800b560 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b53c:	f383 8811 	msr	BASEPRI, r3
 800b540:	f3bf 8f6f 	isb	sy
 800b544:	f3bf 8f4f 	dsb	sy
 800b548:	60fb      	str	r3, [r7, #12]
}
 800b54a:	bf00      	nop
 800b54c:	e7fe      	b.n	800b54c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b554:	f023 0301 	bic.w	r3, r3, #1
 800b558:	b2da      	uxtb	r2, r3
 800b55a:	697b      	ldr	r3, [r7, #20]
 800b55c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b560:	697b      	ldr	r3, [r7, #20]
 800b562:	6a1b      	ldr	r3, [r3, #32]
 800b564:	6978      	ldr	r0, [r7, #20]
 800b566:	4798      	blx	r3
}
 800b568:	bf00      	nop
 800b56a:	3718      	adds	r7, #24
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}
 800b570:	24004de4 	.word	0x24004de4

0800b574 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b084      	sub	sp, #16
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b57c:	f107 0308 	add.w	r3, r7, #8
 800b580:	4618      	mov	r0, r3
 800b582:	f000 f857 	bl	800b634 <prvGetNextExpireTime>
 800b586:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	4619      	mov	r1, r3
 800b58c:	68f8      	ldr	r0, [r7, #12]
 800b58e:	f000 f803 	bl	800b598 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b592:	f000 f8d5 	bl	800b740 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b596:	e7f1      	b.n	800b57c <prvTimerTask+0x8>

0800b598 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b084      	sub	sp, #16
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b5a2:	f7ff fa39 	bl	800aa18 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b5a6:	f107 0308 	add.w	r3, r7, #8
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f000 f866 	bl	800b67c <prvSampleTimeNow>
 800b5b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d130      	bne.n	800b61a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d10a      	bne.n	800b5d4 <prvProcessTimerOrBlockTask+0x3c>
 800b5be:	687a      	ldr	r2, [r7, #4]
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	d806      	bhi.n	800b5d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b5c6:	f7ff fa35 	bl	800aa34 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b5ca:	68f9      	ldr	r1, [r7, #12]
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f7ff ff85 	bl	800b4dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b5d2:	e024      	b.n	800b61e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d008      	beq.n	800b5ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b5da:	4b13      	ldr	r3, [pc, #76]	; (800b628 <prvProcessTimerOrBlockTask+0x90>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d101      	bne.n	800b5e8 <prvProcessTimerOrBlockTask+0x50>
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	e000      	b.n	800b5ea <prvProcessTimerOrBlockTask+0x52>
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b5ec:	4b0f      	ldr	r3, [pc, #60]	; (800b62c <prvProcessTimerOrBlockTask+0x94>)
 800b5ee:	6818      	ldr	r0, [r3, #0]
 800b5f0:	687a      	ldr	r2, [r7, #4]
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	1ad3      	subs	r3, r2, r3
 800b5f6:	683a      	ldr	r2, [r7, #0]
 800b5f8:	4619      	mov	r1, r3
 800b5fa:	f7fe ff7d 	bl	800a4f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b5fe:	f7ff fa19 	bl	800aa34 <xTaskResumeAll>
 800b602:	4603      	mov	r3, r0
 800b604:	2b00      	cmp	r3, #0
 800b606:	d10a      	bne.n	800b61e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b608:	4b09      	ldr	r3, [pc, #36]	; (800b630 <prvProcessTimerOrBlockTask+0x98>)
 800b60a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b60e:	601a      	str	r2, [r3, #0]
 800b610:	f3bf 8f4f 	dsb	sy
 800b614:	f3bf 8f6f 	isb	sy
}
 800b618:	e001      	b.n	800b61e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b61a:	f7ff fa0b 	bl	800aa34 <xTaskResumeAll>
}
 800b61e:	bf00      	nop
 800b620:	3710      	adds	r7, #16
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
 800b626:	bf00      	nop
 800b628:	24004de8 	.word	0x24004de8
 800b62c:	24004dec 	.word	0x24004dec
 800b630:	e000ed04 	.word	0xe000ed04

0800b634 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b634:	b480      	push	{r7}
 800b636:	b085      	sub	sp, #20
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b63c:	4b0e      	ldr	r3, [pc, #56]	; (800b678 <prvGetNextExpireTime+0x44>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d101      	bne.n	800b64a <prvGetNextExpireTime+0x16>
 800b646:	2201      	movs	r2, #1
 800b648:	e000      	b.n	800b64c <prvGetNextExpireTime+0x18>
 800b64a:	2200      	movs	r2, #0
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d105      	bne.n	800b664 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b658:	4b07      	ldr	r3, [pc, #28]	; (800b678 <prvGetNextExpireTime+0x44>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	68db      	ldr	r3, [r3, #12]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	60fb      	str	r3, [r7, #12]
 800b662:	e001      	b.n	800b668 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b664:	2300      	movs	r3, #0
 800b666:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b668:	68fb      	ldr	r3, [r7, #12]
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3714      	adds	r7, #20
 800b66e:	46bd      	mov	sp, r7
 800b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b674:	4770      	bx	lr
 800b676:	bf00      	nop
 800b678:	24004de4 	.word	0x24004de4

0800b67c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b084      	sub	sp, #16
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b684:	f7ff fa74 	bl	800ab70 <xTaskGetTickCount>
 800b688:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b68a:	4b0b      	ldr	r3, [pc, #44]	; (800b6b8 <prvSampleTimeNow+0x3c>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	68fa      	ldr	r2, [r7, #12]
 800b690:	429a      	cmp	r2, r3
 800b692:	d205      	bcs.n	800b6a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b694:	f000 f936 	bl	800b904 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2201      	movs	r2, #1
 800b69c:	601a      	str	r2, [r3, #0]
 800b69e:	e002      	b.n	800b6a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b6a6:	4a04      	ldr	r2, [pc, #16]	; (800b6b8 <prvSampleTimeNow+0x3c>)
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3710      	adds	r7, #16
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	bf00      	nop
 800b6b8:	24004df4 	.word	0x24004df4

0800b6bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b086      	sub	sp, #24
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	60b9      	str	r1, [r7, #8]
 800b6c6:	607a      	str	r2, [r7, #4]
 800b6c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	68ba      	ldr	r2, [r7, #8]
 800b6d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	68fa      	ldr	r2, [r7, #12]
 800b6d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b6da:	68ba      	ldr	r2, [r7, #8]
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	429a      	cmp	r2, r3
 800b6e0:	d812      	bhi.n	800b708 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6e2:	687a      	ldr	r2, [r7, #4]
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	1ad2      	subs	r2, r2, r3
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	699b      	ldr	r3, [r3, #24]
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d302      	bcc.n	800b6f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	617b      	str	r3, [r7, #20]
 800b6f4:	e01b      	b.n	800b72e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b6f6:	4b10      	ldr	r3, [pc, #64]	; (800b738 <prvInsertTimerInActiveList+0x7c>)
 800b6f8:	681a      	ldr	r2, [r3, #0]
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	3304      	adds	r3, #4
 800b6fe:	4619      	mov	r1, r3
 800b700:	4610      	mov	r0, r2
 800b702:	f7fd ff8e 	bl	8009622 <vListInsert>
 800b706:	e012      	b.n	800b72e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b708:	687a      	ldr	r2, [r7, #4]
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	429a      	cmp	r2, r3
 800b70e:	d206      	bcs.n	800b71e <prvInsertTimerInActiveList+0x62>
 800b710:	68ba      	ldr	r2, [r7, #8]
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	429a      	cmp	r2, r3
 800b716:	d302      	bcc.n	800b71e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b718:	2301      	movs	r3, #1
 800b71a:	617b      	str	r3, [r7, #20]
 800b71c:	e007      	b.n	800b72e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b71e:	4b07      	ldr	r3, [pc, #28]	; (800b73c <prvInsertTimerInActiveList+0x80>)
 800b720:	681a      	ldr	r2, [r3, #0]
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	3304      	adds	r3, #4
 800b726:	4619      	mov	r1, r3
 800b728:	4610      	mov	r0, r2
 800b72a:	f7fd ff7a 	bl	8009622 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b72e:	697b      	ldr	r3, [r7, #20]
}
 800b730:	4618      	mov	r0, r3
 800b732:	3718      	adds	r7, #24
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}
 800b738:	24004de8 	.word	0x24004de8
 800b73c:	24004de4 	.word	0x24004de4

0800b740 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b08e      	sub	sp, #56	; 0x38
 800b744:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b746:	e0ca      	b.n	800b8de <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	da18      	bge.n	800b780 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b74e:	1d3b      	adds	r3, r7, #4
 800b750:	3304      	adds	r3, #4
 800b752:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b756:	2b00      	cmp	r3, #0
 800b758:	d10a      	bne.n	800b770 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b75e:	f383 8811 	msr	BASEPRI, r3
 800b762:	f3bf 8f6f 	isb	sy
 800b766:	f3bf 8f4f 	dsb	sy
 800b76a:	61fb      	str	r3, [r7, #28]
}
 800b76c:	bf00      	nop
 800b76e:	e7fe      	b.n	800b76e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b776:	6850      	ldr	r0, [r2, #4]
 800b778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b77a:	6892      	ldr	r2, [r2, #8]
 800b77c:	4611      	mov	r1, r2
 800b77e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2b00      	cmp	r3, #0
 800b784:	f2c0 80aa 	blt.w	800b8dc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b78e:	695b      	ldr	r3, [r3, #20]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d004      	beq.n	800b79e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b796:	3304      	adds	r3, #4
 800b798:	4618      	mov	r0, r3
 800b79a:	f7fd ff7b 	bl	8009694 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b79e:	463b      	mov	r3, r7
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f7ff ff6b 	bl	800b67c <prvSampleTimeNow>
 800b7a6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2b09      	cmp	r3, #9
 800b7ac:	f200 8097 	bhi.w	800b8de <prvProcessReceivedCommands+0x19e>
 800b7b0:	a201      	add	r2, pc, #4	; (adr r2, 800b7b8 <prvProcessReceivedCommands+0x78>)
 800b7b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7b6:	bf00      	nop
 800b7b8:	0800b7e1 	.word	0x0800b7e1
 800b7bc:	0800b7e1 	.word	0x0800b7e1
 800b7c0:	0800b7e1 	.word	0x0800b7e1
 800b7c4:	0800b855 	.word	0x0800b855
 800b7c8:	0800b869 	.word	0x0800b869
 800b7cc:	0800b8b3 	.word	0x0800b8b3
 800b7d0:	0800b7e1 	.word	0x0800b7e1
 800b7d4:	0800b7e1 	.word	0x0800b7e1
 800b7d8:	0800b855 	.word	0x0800b855
 800b7dc:	0800b869 	.word	0x0800b869
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7e6:	f043 0301 	orr.w	r3, r3, #1
 800b7ea:	b2da      	uxtb	r2, r3
 800b7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b7f2:	68ba      	ldr	r2, [r7, #8]
 800b7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f6:	699b      	ldr	r3, [r3, #24]
 800b7f8:	18d1      	adds	r1, r2, r3
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b800:	f7ff ff5c 	bl	800b6bc <prvInsertTimerInActiveList>
 800b804:	4603      	mov	r3, r0
 800b806:	2b00      	cmp	r3, #0
 800b808:	d069      	beq.n	800b8de <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b80c:	6a1b      	ldr	r3, [r3, #32]
 800b80e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b810:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b814:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b818:	f003 0304 	and.w	r3, r3, #4
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d05e      	beq.n	800b8de <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b820:	68ba      	ldr	r2, [r7, #8]
 800b822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b824:	699b      	ldr	r3, [r3, #24]
 800b826:	441a      	add	r2, r3
 800b828:	2300      	movs	r3, #0
 800b82a:	9300      	str	r3, [sp, #0]
 800b82c:	2300      	movs	r3, #0
 800b82e:	2100      	movs	r1, #0
 800b830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b832:	f7ff fe05 	bl	800b440 <xTimerGenericCommand>
 800b836:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b838:	6a3b      	ldr	r3, [r7, #32]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d14f      	bne.n	800b8de <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b842:	f383 8811 	msr	BASEPRI, r3
 800b846:	f3bf 8f6f 	isb	sy
 800b84a:	f3bf 8f4f 	dsb	sy
 800b84e:	61bb      	str	r3, [r7, #24]
}
 800b850:	bf00      	nop
 800b852:	e7fe      	b.n	800b852 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b856:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b85a:	f023 0301 	bic.w	r3, r3, #1
 800b85e:	b2da      	uxtb	r2, r3
 800b860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b862:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b866:	e03a      	b.n	800b8de <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b86a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b86e:	f043 0301 	orr.w	r3, r3, #1
 800b872:	b2da      	uxtb	r2, r3
 800b874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b876:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b87a:	68ba      	ldr	r2, [r7, #8]
 800b87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b87e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b882:	699b      	ldr	r3, [r3, #24]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d10a      	bne.n	800b89e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b88c:	f383 8811 	msr	BASEPRI, r3
 800b890:	f3bf 8f6f 	isb	sy
 800b894:	f3bf 8f4f 	dsb	sy
 800b898:	617b      	str	r3, [r7, #20]
}
 800b89a:	bf00      	nop
 800b89c:	e7fe      	b.n	800b89c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a0:	699a      	ldr	r2, [r3, #24]
 800b8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a4:	18d1      	adds	r1, r2, r3
 800b8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8ac:	f7ff ff06 	bl	800b6bc <prvInsertTimerInActiveList>
					break;
 800b8b0:	e015      	b.n	800b8de <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8b8:	f003 0302 	and.w	r3, r3, #2
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d103      	bne.n	800b8c8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b8c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8c2:	f7fd fd3f 	bl	8009344 <vPortFree>
 800b8c6:	e00a      	b.n	800b8de <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8ce:	f023 0301 	bic.w	r3, r3, #1
 800b8d2:	b2da      	uxtb	r2, r3
 800b8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b8da:	e000      	b.n	800b8de <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b8dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b8de:	4b08      	ldr	r3, [pc, #32]	; (800b900 <prvProcessReceivedCommands+0x1c0>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	1d39      	adds	r1, r7, #4
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f7fe fbec 	bl	800a0c4 <xQueueReceive>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	f47f af2a 	bne.w	800b748 <prvProcessReceivedCommands+0x8>
	}
}
 800b8f4:	bf00      	nop
 800b8f6:	bf00      	nop
 800b8f8:	3730      	adds	r7, #48	; 0x30
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}
 800b8fe:	bf00      	nop
 800b900:	24004dec 	.word	0x24004dec

0800b904 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b088      	sub	sp, #32
 800b908:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b90a:	e048      	b.n	800b99e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b90c:	4b2d      	ldr	r3, [pc, #180]	; (800b9c4 <prvSwitchTimerLists+0xc0>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	68db      	ldr	r3, [r3, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b916:	4b2b      	ldr	r3, [pc, #172]	; (800b9c4 <prvSwitchTimerLists+0xc0>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	68db      	ldr	r3, [r3, #12]
 800b91c:	68db      	ldr	r3, [r3, #12]
 800b91e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	3304      	adds	r3, #4
 800b924:	4618      	mov	r0, r3
 800b926:	f7fd feb5 	bl	8009694 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	6a1b      	ldr	r3, [r3, #32]
 800b92e:	68f8      	ldr	r0, [r7, #12]
 800b930:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b938:	f003 0304 	and.w	r3, r3, #4
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d02e      	beq.n	800b99e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	699b      	ldr	r3, [r3, #24]
 800b944:	693a      	ldr	r2, [r7, #16]
 800b946:	4413      	add	r3, r2
 800b948:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b94a:	68ba      	ldr	r2, [r7, #8]
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	429a      	cmp	r2, r3
 800b950:	d90e      	bls.n	800b970 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	68ba      	ldr	r2, [r7, #8]
 800b956:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	68fa      	ldr	r2, [r7, #12]
 800b95c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b95e:	4b19      	ldr	r3, [pc, #100]	; (800b9c4 <prvSwitchTimerLists+0xc0>)
 800b960:	681a      	ldr	r2, [r3, #0]
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	3304      	adds	r3, #4
 800b966:	4619      	mov	r1, r3
 800b968:	4610      	mov	r0, r2
 800b96a:	f7fd fe5a 	bl	8009622 <vListInsert>
 800b96e:	e016      	b.n	800b99e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b970:	2300      	movs	r3, #0
 800b972:	9300      	str	r3, [sp, #0]
 800b974:	2300      	movs	r3, #0
 800b976:	693a      	ldr	r2, [r7, #16]
 800b978:	2100      	movs	r1, #0
 800b97a:	68f8      	ldr	r0, [r7, #12]
 800b97c:	f7ff fd60 	bl	800b440 <xTimerGenericCommand>
 800b980:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d10a      	bne.n	800b99e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b98c:	f383 8811 	msr	BASEPRI, r3
 800b990:	f3bf 8f6f 	isb	sy
 800b994:	f3bf 8f4f 	dsb	sy
 800b998:	603b      	str	r3, [r7, #0]
}
 800b99a:	bf00      	nop
 800b99c:	e7fe      	b.n	800b99c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b99e:	4b09      	ldr	r3, [pc, #36]	; (800b9c4 <prvSwitchTimerLists+0xc0>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d1b1      	bne.n	800b90c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b9a8:	4b06      	ldr	r3, [pc, #24]	; (800b9c4 <prvSwitchTimerLists+0xc0>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b9ae:	4b06      	ldr	r3, [pc, #24]	; (800b9c8 <prvSwitchTimerLists+0xc4>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	4a04      	ldr	r2, [pc, #16]	; (800b9c4 <prvSwitchTimerLists+0xc0>)
 800b9b4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b9b6:	4a04      	ldr	r2, [pc, #16]	; (800b9c8 <prvSwitchTimerLists+0xc4>)
 800b9b8:	697b      	ldr	r3, [r7, #20]
 800b9ba:	6013      	str	r3, [r2, #0]
}
 800b9bc:	bf00      	nop
 800b9be:	3718      	adds	r7, #24
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}
 800b9c4:	24004de4 	.word	0x24004de4
 800b9c8:	24004de8 	.word	0x24004de8

0800b9cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b082      	sub	sp, #8
 800b9d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b9d2:	f7fd ffb7 	bl	8009944 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b9d6:	4b15      	ldr	r3, [pc, #84]	; (800ba2c <prvCheckForValidListAndQueue+0x60>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d120      	bne.n	800ba20 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b9de:	4814      	ldr	r0, [pc, #80]	; (800ba30 <prvCheckForValidListAndQueue+0x64>)
 800b9e0:	f7fd fdce 	bl	8009580 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b9e4:	4813      	ldr	r0, [pc, #76]	; (800ba34 <prvCheckForValidListAndQueue+0x68>)
 800b9e6:	f7fd fdcb 	bl	8009580 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b9ea:	4b13      	ldr	r3, [pc, #76]	; (800ba38 <prvCheckForValidListAndQueue+0x6c>)
 800b9ec:	4a10      	ldr	r2, [pc, #64]	; (800ba30 <prvCheckForValidListAndQueue+0x64>)
 800b9ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b9f0:	4b12      	ldr	r3, [pc, #72]	; (800ba3c <prvCheckForValidListAndQueue+0x70>)
 800b9f2:	4a10      	ldr	r2, [pc, #64]	; (800ba34 <prvCheckForValidListAndQueue+0x68>)
 800b9f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	9300      	str	r3, [sp, #0]
 800b9fa:	4b11      	ldr	r3, [pc, #68]	; (800ba40 <prvCheckForValidListAndQueue+0x74>)
 800b9fc:	4a11      	ldr	r2, [pc, #68]	; (800ba44 <prvCheckForValidListAndQueue+0x78>)
 800b9fe:	2110      	movs	r1, #16
 800ba00:	200a      	movs	r0, #10
 800ba02:	f7fe f929 	bl	8009c58 <xQueueGenericCreateStatic>
 800ba06:	4603      	mov	r3, r0
 800ba08:	4a08      	ldr	r2, [pc, #32]	; (800ba2c <prvCheckForValidListAndQueue+0x60>)
 800ba0a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ba0c:	4b07      	ldr	r3, [pc, #28]	; (800ba2c <prvCheckForValidListAndQueue+0x60>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d005      	beq.n	800ba20 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ba14:	4b05      	ldr	r3, [pc, #20]	; (800ba2c <prvCheckForValidListAndQueue+0x60>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	490b      	ldr	r1, [pc, #44]	; (800ba48 <prvCheckForValidListAndQueue+0x7c>)
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f7fe fd42 	bl	800a4a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ba20:	f7fd ffc0 	bl	80099a4 <vPortExitCritical>
}
 800ba24:	bf00      	nop
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
 800ba2a:	bf00      	nop
 800ba2c:	24004dec 	.word	0x24004dec
 800ba30:	24004dbc 	.word	0x24004dbc
 800ba34:	24004dd0 	.word	0x24004dd0
 800ba38:	24004de4 	.word	0x24004de4
 800ba3c:	24004de8 	.word	0x24004de8
 800ba40:	24004e98 	.word	0x24004e98
 800ba44:	24004df8 	.word	0x24004df8
 800ba48:	0800d53c 	.word	0x0800d53c

0800ba4c <__errno>:
 800ba4c:	4b01      	ldr	r3, [pc, #4]	; (800ba54 <__errno+0x8>)
 800ba4e:	6818      	ldr	r0, [r3, #0]
 800ba50:	4770      	bx	lr
 800ba52:	bf00      	nop
 800ba54:	2400001c 	.word	0x2400001c

0800ba58 <std>:
 800ba58:	2300      	movs	r3, #0
 800ba5a:	b510      	push	{r4, lr}
 800ba5c:	4604      	mov	r4, r0
 800ba5e:	e9c0 3300 	strd	r3, r3, [r0]
 800ba62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ba66:	6083      	str	r3, [r0, #8]
 800ba68:	8181      	strh	r1, [r0, #12]
 800ba6a:	6643      	str	r3, [r0, #100]	; 0x64
 800ba6c:	81c2      	strh	r2, [r0, #14]
 800ba6e:	6183      	str	r3, [r0, #24]
 800ba70:	4619      	mov	r1, r3
 800ba72:	2208      	movs	r2, #8
 800ba74:	305c      	adds	r0, #92	; 0x5c
 800ba76:	f000 f91a 	bl	800bcae <memset>
 800ba7a:	4b05      	ldr	r3, [pc, #20]	; (800ba90 <std+0x38>)
 800ba7c:	6263      	str	r3, [r4, #36]	; 0x24
 800ba7e:	4b05      	ldr	r3, [pc, #20]	; (800ba94 <std+0x3c>)
 800ba80:	62a3      	str	r3, [r4, #40]	; 0x28
 800ba82:	4b05      	ldr	r3, [pc, #20]	; (800ba98 <std+0x40>)
 800ba84:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ba86:	4b05      	ldr	r3, [pc, #20]	; (800ba9c <std+0x44>)
 800ba88:	6224      	str	r4, [r4, #32]
 800ba8a:	6323      	str	r3, [r4, #48]	; 0x30
 800ba8c:	bd10      	pop	{r4, pc}
 800ba8e:	bf00      	nop
 800ba90:	0800c039 	.word	0x0800c039
 800ba94:	0800c05b 	.word	0x0800c05b
 800ba98:	0800c093 	.word	0x0800c093
 800ba9c:	0800c0b7 	.word	0x0800c0b7

0800baa0 <_cleanup_r>:
 800baa0:	4901      	ldr	r1, [pc, #4]	; (800baa8 <_cleanup_r+0x8>)
 800baa2:	f000 b8af 	b.w	800bc04 <_fwalk_reent>
 800baa6:	bf00      	nop
 800baa8:	0800c391 	.word	0x0800c391

0800baac <__sfmoreglue>:
 800baac:	b570      	push	{r4, r5, r6, lr}
 800baae:	2268      	movs	r2, #104	; 0x68
 800bab0:	1e4d      	subs	r5, r1, #1
 800bab2:	4355      	muls	r5, r2
 800bab4:	460e      	mov	r6, r1
 800bab6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800baba:	f000 f921 	bl	800bd00 <_malloc_r>
 800babe:	4604      	mov	r4, r0
 800bac0:	b140      	cbz	r0, 800bad4 <__sfmoreglue+0x28>
 800bac2:	2100      	movs	r1, #0
 800bac4:	e9c0 1600 	strd	r1, r6, [r0]
 800bac8:	300c      	adds	r0, #12
 800baca:	60a0      	str	r0, [r4, #8]
 800bacc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bad0:	f000 f8ed 	bl	800bcae <memset>
 800bad4:	4620      	mov	r0, r4
 800bad6:	bd70      	pop	{r4, r5, r6, pc}

0800bad8 <__sfp_lock_acquire>:
 800bad8:	4801      	ldr	r0, [pc, #4]	; (800bae0 <__sfp_lock_acquire+0x8>)
 800bada:	f000 b8d8 	b.w	800bc8e <__retarget_lock_acquire_recursive>
 800bade:	bf00      	nop
 800bae0:	24004ee9 	.word	0x24004ee9

0800bae4 <__sfp_lock_release>:
 800bae4:	4801      	ldr	r0, [pc, #4]	; (800baec <__sfp_lock_release+0x8>)
 800bae6:	f000 b8d3 	b.w	800bc90 <__retarget_lock_release_recursive>
 800baea:	bf00      	nop
 800baec:	24004ee9 	.word	0x24004ee9

0800baf0 <__sinit_lock_acquire>:
 800baf0:	4801      	ldr	r0, [pc, #4]	; (800baf8 <__sinit_lock_acquire+0x8>)
 800baf2:	f000 b8cc 	b.w	800bc8e <__retarget_lock_acquire_recursive>
 800baf6:	bf00      	nop
 800baf8:	24004eea 	.word	0x24004eea

0800bafc <__sinit_lock_release>:
 800bafc:	4801      	ldr	r0, [pc, #4]	; (800bb04 <__sinit_lock_release+0x8>)
 800bafe:	f000 b8c7 	b.w	800bc90 <__retarget_lock_release_recursive>
 800bb02:	bf00      	nop
 800bb04:	24004eea 	.word	0x24004eea

0800bb08 <__sinit>:
 800bb08:	b510      	push	{r4, lr}
 800bb0a:	4604      	mov	r4, r0
 800bb0c:	f7ff fff0 	bl	800baf0 <__sinit_lock_acquire>
 800bb10:	69a3      	ldr	r3, [r4, #24]
 800bb12:	b11b      	cbz	r3, 800bb1c <__sinit+0x14>
 800bb14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb18:	f7ff bff0 	b.w	800bafc <__sinit_lock_release>
 800bb1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bb20:	6523      	str	r3, [r4, #80]	; 0x50
 800bb22:	4b13      	ldr	r3, [pc, #76]	; (800bb70 <__sinit+0x68>)
 800bb24:	4a13      	ldr	r2, [pc, #76]	; (800bb74 <__sinit+0x6c>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	62a2      	str	r2, [r4, #40]	; 0x28
 800bb2a:	42a3      	cmp	r3, r4
 800bb2c:	bf04      	itt	eq
 800bb2e:	2301      	moveq	r3, #1
 800bb30:	61a3      	streq	r3, [r4, #24]
 800bb32:	4620      	mov	r0, r4
 800bb34:	f000 f820 	bl	800bb78 <__sfp>
 800bb38:	6060      	str	r0, [r4, #4]
 800bb3a:	4620      	mov	r0, r4
 800bb3c:	f000 f81c 	bl	800bb78 <__sfp>
 800bb40:	60a0      	str	r0, [r4, #8]
 800bb42:	4620      	mov	r0, r4
 800bb44:	f000 f818 	bl	800bb78 <__sfp>
 800bb48:	2200      	movs	r2, #0
 800bb4a:	60e0      	str	r0, [r4, #12]
 800bb4c:	2104      	movs	r1, #4
 800bb4e:	6860      	ldr	r0, [r4, #4]
 800bb50:	f7ff ff82 	bl	800ba58 <std>
 800bb54:	68a0      	ldr	r0, [r4, #8]
 800bb56:	2201      	movs	r2, #1
 800bb58:	2109      	movs	r1, #9
 800bb5a:	f7ff ff7d 	bl	800ba58 <std>
 800bb5e:	68e0      	ldr	r0, [r4, #12]
 800bb60:	2202      	movs	r2, #2
 800bb62:	2112      	movs	r1, #18
 800bb64:	f7ff ff78 	bl	800ba58 <std>
 800bb68:	2301      	movs	r3, #1
 800bb6a:	61a3      	str	r3, [r4, #24]
 800bb6c:	e7d2      	b.n	800bb14 <__sinit+0xc>
 800bb6e:	bf00      	nop
 800bb70:	0800d610 	.word	0x0800d610
 800bb74:	0800baa1 	.word	0x0800baa1

0800bb78 <__sfp>:
 800bb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb7a:	4607      	mov	r7, r0
 800bb7c:	f7ff ffac 	bl	800bad8 <__sfp_lock_acquire>
 800bb80:	4b1e      	ldr	r3, [pc, #120]	; (800bbfc <__sfp+0x84>)
 800bb82:	681e      	ldr	r6, [r3, #0]
 800bb84:	69b3      	ldr	r3, [r6, #24]
 800bb86:	b913      	cbnz	r3, 800bb8e <__sfp+0x16>
 800bb88:	4630      	mov	r0, r6
 800bb8a:	f7ff ffbd 	bl	800bb08 <__sinit>
 800bb8e:	3648      	adds	r6, #72	; 0x48
 800bb90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bb94:	3b01      	subs	r3, #1
 800bb96:	d503      	bpl.n	800bba0 <__sfp+0x28>
 800bb98:	6833      	ldr	r3, [r6, #0]
 800bb9a:	b30b      	cbz	r3, 800bbe0 <__sfp+0x68>
 800bb9c:	6836      	ldr	r6, [r6, #0]
 800bb9e:	e7f7      	b.n	800bb90 <__sfp+0x18>
 800bba0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bba4:	b9d5      	cbnz	r5, 800bbdc <__sfp+0x64>
 800bba6:	4b16      	ldr	r3, [pc, #88]	; (800bc00 <__sfp+0x88>)
 800bba8:	60e3      	str	r3, [r4, #12]
 800bbaa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bbae:	6665      	str	r5, [r4, #100]	; 0x64
 800bbb0:	f000 f86c 	bl	800bc8c <__retarget_lock_init_recursive>
 800bbb4:	f7ff ff96 	bl	800bae4 <__sfp_lock_release>
 800bbb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bbbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bbc0:	6025      	str	r5, [r4, #0]
 800bbc2:	61a5      	str	r5, [r4, #24]
 800bbc4:	2208      	movs	r2, #8
 800bbc6:	4629      	mov	r1, r5
 800bbc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bbcc:	f000 f86f 	bl	800bcae <memset>
 800bbd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bbd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bbd8:	4620      	mov	r0, r4
 800bbda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbdc:	3468      	adds	r4, #104	; 0x68
 800bbde:	e7d9      	b.n	800bb94 <__sfp+0x1c>
 800bbe0:	2104      	movs	r1, #4
 800bbe2:	4638      	mov	r0, r7
 800bbe4:	f7ff ff62 	bl	800baac <__sfmoreglue>
 800bbe8:	4604      	mov	r4, r0
 800bbea:	6030      	str	r0, [r6, #0]
 800bbec:	2800      	cmp	r0, #0
 800bbee:	d1d5      	bne.n	800bb9c <__sfp+0x24>
 800bbf0:	f7ff ff78 	bl	800bae4 <__sfp_lock_release>
 800bbf4:	230c      	movs	r3, #12
 800bbf6:	603b      	str	r3, [r7, #0]
 800bbf8:	e7ee      	b.n	800bbd8 <__sfp+0x60>
 800bbfa:	bf00      	nop
 800bbfc:	0800d610 	.word	0x0800d610
 800bc00:	ffff0001 	.word	0xffff0001

0800bc04 <_fwalk_reent>:
 800bc04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc08:	4606      	mov	r6, r0
 800bc0a:	4688      	mov	r8, r1
 800bc0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bc10:	2700      	movs	r7, #0
 800bc12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bc16:	f1b9 0901 	subs.w	r9, r9, #1
 800bc1a:	d505      	bpl.n	800bc28 <_fwalk_reent+0x24>
 800bc1c:	6824      	ldr	r4, [r4, #0]
 800bc1e:	2c00      	cmp	r4, #0
 800bc20:	d1f7      	bne.n	800bc12 <_fwalk_reent+0xe>
 800bc22:	4638      	mov	r0, r7
 800bc24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc28:	89ab      	ldrh	r3, [r5, #12]
 800bc2a:	2b01      	cmp	r3, #1
 800bc2c:	d907      	bls.n	800bc3e <_fwalk_reent+0x3a>
 800bc2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bc32:	3301      	adds	r3, #1
 800bc34:	d003      	beq.n	800bc3e <_fwalk_reent+0x3a>
 800bc36:	4629      	mov	r1, r5
 800bc38:	4630      	mov	r0, r6
 800bc3a:	47c0      	blx	r8
 800bc3c:	4307      	orrs	r7, r0
 800bc3e:	3568      	adds	r5, #104	; 0x68
 800bc40:	e7e9      	b.n	800bc16 <_fwalk_reent+0x12>
	...

0800bc44 <__libc_init_array>:
 800bc44:	b570      	push	{r4, r5, r6, lr}
 800bc46:	4d0d      	ldr	r5, [pc, #52]	; (800bc7c <__libc_init_array+0x38>)
 800bc48:	4c0d      	ldr	r4, [pc, #52]	; (800bc80 <__libc_init_array+0x3c>)
 800bc4a:	1b64      	subs	r4, r4, r5
 800bc4c:	10a4      	asrs	r4, r4, #2
 800bc4e:	2600      	movs	r6, #0
 800bc50:	42a6      	cmp	r6, r4
 800bc52:	d109      	bne.n	800bc68 <__libc_init_array+0x24>
 800bc54:	4d0b      	ldr	r5, [pc, #44]	; (800bc84 <__libc_init_array+0x40>)
 800bc56:	4c0c      	ldr	r4, [pc, #48]	; (800bc88 <__libc_init_array+0x44>)
 800bc58:	f001 f976 	bl	800cf48 <_init>
 800bc5c:	1b64      	subs	r4, r4, r5
 800bc5e:	10a4      	asrs	r4, r4, #2
 800bc60:	2600      	movs	r6, #0
 800bc62:	42a6      	cmp	r6, r4
 800bc64:	d105      	bne.n	800bc72 <__libc_init_array+0x2e>
 800bc66:	bd70      	pop	{r4, r5, r6, pc}
 800bc68:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc6c:	4798      	blx	r3
 800bc6e:	3601      	adds	r6, #1
 800bc70:	e7ee      	b.n	800bc50 <__libc_init_array+0xc>
 800bc72:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc76:	4798      	blx	r3
 800bc78:	3601      	adds	r6, #1
 800bc7a:	e7f2      	b.n	800bc62 <__libc_init_array+0x1e>
 800bc7c:	0800d650 	.word	0x0800d650
 800bc80:	0800d650 	.word	0x0800d650
 800bc84:	0800d650 	.word	0x0800d650
 800bc88:	0800d654 	.word	0x0800d654

0800bc8c <__retarget_lock_init_recursive>:
 800bc8c:	4770      	bx	lr

0800bc8e <__retarget_lock_acquire_recursive>:
 800bc8e:	4770      	bx	lr

0800bc90 <__retarget_lock_release_recursive>:
 800bc90:	4770      	bx	lr

0800bc92 <memcpy>:
 800bc92:	440a      	add	r2, r1
 800bc94:	4291      	cmp	r1, r2
 800bc96:	f100 33ff 	add.w	r3, r0, #4294967295
 800bc9a:	d100      	bne.n	800bc9e <memcpy+0xc>
 800bc9c:	4770      	bx	lr
 800bc9e:	b510      	push	{r4, lr}
 800bca0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bca4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bca8:	4291      	cmp	r1, r2
 800bcaa:	d1f9      	bne.n	800bca0 <memcpy+0xe>
 800bcac:	bd10      	pop	{r4, pc}

0800bcae <memset>:
 800bcae:	4402      	add	r2, r0
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	d100      	bne.n	800bcb8 <memset+0xa>
 800bcb6:	4770      	bx	lr
 800bcb8:	f803 1b01 	strb.w	r1, [r3], #1
 800bcbc:	e7f9      	b.n	800bcb2 <memset+0x4>
	...

0800bcc0 <sbrk_aligned>:
 800bcc0:	b570      	push	{r4, r5, r6, lr}
 800bcc2:	4e0e      	ldr	r6, [pc, #56]	; (800bcfc <sbrk_aligned+0x3c>)
 800bcc4:	460c      	mov	r4, r1
 800bcc6:	6831      	ldr	r1, [r6, #0]
 800bcc8:	4605      	mov	r5, r0
 800bcca:	b911      	cbnz	r1, 800bcd2 <sbrk_aligned+0x12>
 800bccc:	f000 f984 	bl	800bfd8 <_sbrk_r>
 800bcd0:	6030      	str	r0, [r6, #0]
 800bcd2:	4621      	mov	r1, r4
 800bcd4:	4628      	mov	r0, r5
 800bcd6:	f000 f97f 	bl	800bfd8 <_sbrk_r>
 800bcda:	1c43      	adds	r3, r0, #1
 800bcdc:	d00a      	beq.n	800bcf4 <sbrk_aligned+0x34>
 800bcde:	1cc4      	adds	r4, r0, #3
 800bce0:	f024 0403 	bic.w	r4, r4, #3
 800bce4:	42a0      	cmp	r0, r4
 800bce6:	d007      	beq.n	800bcf8 <sbrk_aligned+0x38>
 800bce8:	1a21      	subs	r1, r4, r0
 800bcea:	4628      	mov	r0, r5
 800bcec:	f000 f974 	bl	800bfd8 <_sbrk_r>
 800bcf0:	3001      	adds	r0, #1
 800bcf2:	d101      	bne.n	800bcf8 <sbrk_aligned+0x38>
 800bcf4:	f04f 34ff 	mov.w	r4, #4294967295
 800bcf8:	4620      	mov	r0, r4
 800bcfa:	bd70      	pop	{r4, r5, r6, pc}
 800bcfc:	24004ef0 	.word	0x24004ef0

0800bd00 <_malloc_r>:
 800bd00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd04:	1ccd      	adds	r5, r1, #3
 800bd06:	f025 0503 	bic.w	r5, r5, #3
 800bd0a:	3508      	adds	r5, #8
 800bd0c:	2d0c      	cmp	r5, #12
 800bd0e:	bf38      	it	cc
 800bd10:	250c      	movcc	r5, #12
 800bd12:	2d00      	cmp	r5, #0
 800bd14:	4607      	mov	r7, r0
 800bd16:	db01      	blt.n	800bd1c <_malloc_r+0x1c>
 800bd18:	42a9      	cmp	r1, r5
 800bd1a:	d905      	bls.n	800bd28 <_malloc_r+0x28>
 800bd1c:	230c      	movs	r3, #12
 800bd1e:	603b      	str	r3, [r7, #0]
 800bd20:	2600      	movs	r6, #0
 800bd22:	4630      	mov	r0, r6
 800bd24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd28:	4e2e      	ldr	r6, [pc, #184]	; (800bde4 <_malloc_r+0xe4>)
 800bd2a:	f000 fbe5 	bl	800c4f8 <__malloc_lock>
 800bd2e:	6833      	ldr	r3, [r6, #0]
 800bd30:	461c      	mov	r4, r3
 800bd32:	bb34      	cbnz	r4, 800bd82 <_malloc_r+0x82>
 800bd34:	4629      	mov	r1, r5
 800bd36:	4638      	mov	r0, r7
 800bd38:	f7ff ffc2 	bl	800bcc0 <sbrk_aligned>
 800bd3c:	1c43      	adds	r3, r0, #1
 800bd3e:	4604      	mov	r4, r0
 800bd40:	d14d      	bne.n	800bdde <_malloc_r+0xde>
 800bd42:	6834      	ldr	r4, [r6, #0]
 800bd44:	4626      	mov	r6, r4
 800bd46:	2e00      	cmp	r6, #0
 800bd48:	d140      	bne.n	800bdcc <_malloc_r+0xcc>
 800bd4a:	6823      	ldr	r3, [r4, #0]
 800bd4c:	4631      	mov	r1, r6
 800bd4e:	4638      	mov	r0, r7
 800bd50:	eb04 0803 	add.w	r8, r4, r3
 800bd54:	f000 f940 	bl	800bfd8 <_sbrk_r>
 800bd58:	4580      	cmp	r8, r0
 800bd5a:	d13a      	bne.n	800bdd2 <_malloc_r+0xd2>
 800bd5c:	6821      	ldr	r1, [r4, #0]
 800bd5e:	3503      	adds	r5, #3
 800bd60:	1a6d      	subs	r5, r5, r1
 800bd62:	f025 0503 	bic.w	r5, r5, #3
 800bd66:	3508      	adds	r5, #8
 800bd68:	2d0c      	cmp	r5, #12
 800bd6a:	bf38      	it	cc
 800bd6c:	250c      	movcc	r5, #12
 800bd6e:	4629      	mov	r1, r5
 800bd70:	4638      	mov	r0, r7
 800bd72:	f7ff ffa5 	bl	800bcc0 <sbrk_aligned>
 800bd76:	3001      	adds	r0, #1
 800bd78:	d02b      	beq.n	800bdd2 <_malloc_r+0xd2>
 800bd7a:	6823      	ldr	r3, [r4, #0]
 800bd7c:	442b      	add	r3, r5
 800bd7e:	6023      	str	r3, [r4, #0]
 800bd80:	e00e      	b.n	800bda0 <_malloc_r+0xa0>
 800bd82:	6822      	ldr	r2, [r4, #0]
 800bd84:	1b52      	subs	r2, r2, r5
 800bd86:	d41e      	bmi.n	800bdc6 <_malloc_r+0xc6>
 800bd88:	2a0b      	cmp	r2, #11
 800bd8a:	d916      	bls.n	800bdba <_malloc_r+0xba>
 800bd8c:	1961      	adds	r1, r4, r5
 800bd8e:	42a3      	cmp	r3, r4
 800bd90:	6025      	str	r5, [r4, #0]
 800bd92:	bf18      	it	ne
 800bd94:	6059      	strne	r1, [r3, #4]
 800bd96:	6863      	ldr	r3, [r4, #4]
 800bd98:	bf08      	it	eq
 800bd9a:	6031      	streq	r1, [r6, #0]
 800bd9c:	5162      	str	r2, [r4, r5]
 800bd9e:	604b      	str	r3, [r1, #4]
 800bda0:	4638      	mov	r0, r7
 800bda2:	f104 060b 	add.w	r6, r4, #11
 800bda6:	f000 fbad 	bl	800c504 <__malloc_unlock>
 800bdaa:	f026 0607 	bic.w	r6, r6, #7
 800bdae:	1d23      	adds	r3, r4, #4
 800bdb0:	1af2      	subs	r2, r6, r3
 800bdb2:	d0b6      	beq.n	800bd22 <_malloc_r+0x22>
 800bdb4:	1b9b      	subs	r3, r3, r6
 800bdb6:	50a3      	str	r3, [r4, r2]
 800bdb8:	e7b3      	b.n	800bd22 <_malloc_r+0x22>
 800bdba:	6862      	ldr	r2, [r4, #4]
 800bdbc:	42a3      	cmp	r3, r4
 800bdbe:	bf0c      	ite	eq
 800bdc0:	6032      	streq	r2, [r6, #0]
 800bdc2:	605a      	strne	r2, [r3, #4]
 800bdc4:	e7ec      	b.n	800bda0 <_malloc_r+0xa0>
 800bdc6:	4623      	mov	r3, r4
 800bdc8:	6864      	ldr	r4, [r4, #4]
 800bdca:	e7b2      	b.n	800bd32 <_malloc_r+0x32>
 800bdcc:	4634      	mov	r4, r6
 800bdce:	6876      	ldr	r6, [r6, #4]
 800bdd0:	e7b9      	b.n	800bd46 <_malloc_r+0x46>
 800bdd2:	230c      	movs	r3, #12
 800bdd4:	603b      	str	r3, [r7, #0]
 800bdd6:	4638      	mov	r0, r7
 800bdd8:	f000 fb94 	bl	800c504 <__malloc_unlock>
 800bddc:	e7a1      	b.n	800bd22 <_malloc_r+0x22>
 800bdde:	6025      	str	r5, [r4, #0]
 800bde0:	e7de      	b.n	800bda0 <_malloc_r+0xa0>
 800bde2:	bf00      	nop
 800bde4:	24004eec 	.word	0x24004eec

0800bde8 <iprintf>:
 800bde8:	b40f      	push	{r0, r1, r2, r3}
 800bdea:	4b0a      	ldr	r3, [pc, #40]	; (800be14 <iprintf+0x2c>)
 800bdec:	b513      	push	{r0, r1, r4, lr}
 800bdee:	681c      	ldr	r4, [r3, #0]
 800bdf0:	b124      	cbz	r4, 800bdfc <iprintf+0x14>
 800bdf2:	69a3      	ldr	r3, [r4, #24]
 800bdf4:	b913      	cbnz	r3, 800bdfc <iprintf+0x14>
 800bdf6:	4620      	mov	r0, r4
 800bdf8:	f7ff fe86 	bl	800bb08 <__sinit>
 800bdfc:	ab05      	add	r3, sp, #20
 800bdfe:	9a04      	ldr	r2, [sp, #16]
 800be00:	68a1      	ldr	r1, [r4, #8]
 800be02:	9301      	str	r3, [sp, #4]
 800be04:	4620      	mov	r0, r4
 800be06:	f000 fd55 	bl	800c8b4 <_vfiprintf_r>
 800be0a:	b002      	add	sp, #8
 800be0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be10:	b004      	add	sp, #16
 800be12:	4770      	bx	lr
 800be14:	2400001c 	.word	0x2400001c

0800be18 <_puts_r>:
 800be18:	b570      	push	{r4, r5, r6, lr}
 800be1a:	460e      	mov	r6, r1
 800be1c:	4605      	mov	r5, r0
 800be1e:	b118      	cbz	r0, 800be28 <_puts_r+0x10>
 800be20:	6983      	ldr	r3, [r0, #24]
 800be22:	b90b      	cbnz	r3, 800be28 <_puts_r+0x10>
 800be24:	f7ff fe70 	bl	800bb08 <__sinit>
 800be28:	69ab      	ldr	r3, [r5, #24]
 800be2a:	68ac      	ldr	r4, [r5, #8]
 800be2c:	b913      	cbnz	r3, 800be34 <_puts_r+0x1c>
 800be2e:	4628      	mov	r0, r5
 800be30:	f7ff fe6a 	bl	800bb08 <__sinit>
 800be34:	4b2c      	ldr	r3, [pc, #176]	; (800bee8 <_puts_r+0xd0>)
 800be36:	429c      	cmp	r4, r3
 800be38:	d120      	bne.n	800be7c <_puts_r+0x64>
 800be3a:	686c      	ldr	r4, [r5, #4]
 800be3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be3e:	07db      	lsls	r3, r3, #31
 800be40:	d405      	bmi.n	800be4e <_puts_r+0x36>
 800be42:	89a3      	ldrh	r3, [r4, #12]
 800be44:	0598      	lsls	r0, r3, #22
 800be46:	d402      	bmi.n	800be4e <_puts_r+0x36>
 800be48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be4a:	f7ff ff20 	bl	800bc8e <__retarget_lock_acquire_recursive>
 800be4e:	89a3      	ldrh	r3, [r4, #12]
 800be50:	0719      	lsls	r1, r3, #28
 800be52:	d51d      	bpl.n	800be90 <_puts_r+0x78>
 800be54:	6923      	ldr	r3, [r4, #16]
 800be56:	b1db      	cbz	r3, 800be90 <_puts_r+0x78>
 800be58:	3e01      	subs	r6, #1
 800be5a:	68a3      	ldr	r3, [r4, #8]
 800be5c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800be60:	3b01      	subs	r3, #1
 800be62:	60a3      	str	r3, [r4, #8]
 800be64:	bb39      	cbnz	r1, 800beb6 <_puts_r+0x9e>
 800be66:	2b00      	cmp	r3, #0
 800be68:	da38      	bge.n	800bedc <_puts_r+0xc4>
 800be6a:	4622      	mov	r2, r4
 800be6c:	210a      	movs	r1, #10
 800be6e:	4628      	mov	r0, r5
 800be70:	f000 f926 	bl	800c0c0 <__swbuf_r>
 800be74:	3001      	adds	r0, #1
 800be76:	d011      	beq.n	800be9c <_puts_r+0x84>
 800be78:	250a      	movs	r5, #10
 800be7a:	e011      	b.n	800bea0 <_puts_r+0x88>
 800be7c:	4b1b      	ldr	r3, [pc, #108]	; (800beec <_puts_r+0xd4>)
 800be7e:	429c      	cmp	r4, r3
 800be80:	d101      	bne.n	800be86 <_puts_r+0x6e>
 800be82:	68ac      	ldr	r4, [r5, #8]
 800be84:	e7da      	b.n	800be3c <_puts_r+0x24>
 800be86:	4b1a      	ldr	r3, [pc, #104]	; (800bef0 <_puts_r+0xd8>)
 800be88:	429c      	cmp	r4, r3
 800be8a:	bf08      	it	eq
 800be8c:	68ec      	ldreq	r4, [r5, #12]
 800be8e:	e7d5      	b.n	800be3c <_puts_r+0x24>
 800be90:	4621      	mov	r1, r4
 800be92:	4628      	mov	r0, r5
 800be94:	f000 f978 	bl	800c188 <__swsetup_r>
 800be98:	2800      	cmp	r0, #0
 800be9a:	d0dd      	beq.n	800be58 <_puts_r+0x40>
 800be9c:	f04f 35ff 	mov.w	r5, #4294967295
 800bea0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bea2:	07da      	lsls	r2, r3, #31
 800bea4:	d405      	bmi.n	800beb2 <_puts_r+0x9a>
 800bea6:	89a3      	ldrh	r3, [r4, #12]
 800bea8:	059b      	lsls	r3, r3, #22
 800beaa:	d402      	bmi.n	800beb2 <_puts_r+0x9a>
 800beac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800beae:	f7ff feef 	bl	800bc90 <__retarget_lock_release_recursive>
 800beb2:	4628      	mov	r0, r5
 800beb4:	bd70      	pop	{r4, r5, r6, pc}
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	da04      	bge.n	800bec4 <_puts_r+0xac>
 800beba:	69a2      	ldr	r2, [r4, #24]
 800bebc:	429a      	cmp	r2, r3
 800bebe:	dc06      	bgt.n	800bece <_puts_r+0xb6>
 800bec0:	290a      	cmp	r1, #10
 800bec2:	d004      	beq.n	800bece <_puts_r+0xb6>
 800bec4:	6823      	ldr	r3, [r4, #0]
 800bec6:	1c5a      	adds	r2, r3, #1
 800bec8:	6022      	str	r2, [r4, #0]
 800beca:	7019      	strb	r1, [r3, #0]
 800becc:	e7c5      	b.n	800be5a <_puts_r+0x42>
 800bece:	4622      	mov	r2, r4
 800bed0:	4628      	mov	r0, r5
 800bed2:	f000 f8f5 	bl	800c0c0 <__swbuf_r>
 800bed6:	3001      	adds	r0, #1
 800bed8:	d1bf      	bne.n	800be5a <_puts_r+0x42>
 800beda:	e7df      	b.n	800be9c <_puts_r+0x84>
 800bedc:	6823      	ldr	r3, [r4, #0]
 800bede:	250a      	movs	r5, #10
 800bee0:	1c5a      	adds	r2, r3, #1
 800bee2:	6022      	str	r2, [r4, #0]
 800bee4:	701d      	strb	r5, [r3, #0]
 800bee6:	e7db      	b.n	800bea0 <_puts_r+0x88>
 800bee8:	0800d5d0 	.word	0x0800d5d0
 800beec:	0800d5f0 	.word	0x0800d5f0
 800bef0:	0800d5b0 	.word	0x0800d5b0

0800bef4 <puts>:
 800bef4:	4b02      	ldr	r3, [pc, #8]	; (800bf00 <puts+0xc>)
 800bef6:	4601      	mov	r1, r0
 800bef8:	6818      	ldr	r0, [r3, #0]
 800befa:	f7ff bf8d 	b.w	800be18 <_puts_r>
 800befe:	bf00      	nop
 800bf00:	2400001c 	.word	0x2400001c

0800bf04 <cleanup_glue>:
 800bf04:	b538      	push	{r3, r4, r5, lr}
 800bf06:	460c      	mov	r4, r1
 800bf08:	6809      	ldr	r1, [r1, #0]
 800bf0a:	4605      	mov	r5, r0
 800bf0c:	b109      	cbz	r1, 800bf12 <cleanup_glue+0xe>
 800bf0e:	f7ff fff9 	bl	800bf04 <cleanup_glue>
 800bf12:	4621      	mov	r1, r4
 800bf14:	4628      	mov	r0, r5
 800bf16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf1a:	f000 baf9 	b.w	800c510 <_free_r>
	...

0800bf20 <_reclaim_reent>:
 800bf20:	4b2c      	ldr	r3, [pc, #176]	; (800bfd4 <_reclaim_reent+0xb4>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	4283      	cmp	r3, r0
 800bf26:	b570      	push	{r4, r5, r6, lr}
 800bf28:	4604      	mov	r4, r0
 800bf2a:	d051      	beq.n	800bfd0 <_reclaim_reent+0xb0>
 800bf2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bf2e:	b143      	cbz	r3, 800bf42 <_reclaim_reent+0x22>
 800bf30:	68db      	ldr	r3, [r3, #12]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d14a      	bne.n	800bfcc <_reclaim_reent+0xac>
 800bf36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf38:	6819      	ldr	r1, [r3, #0]
 800bf3a:	b111      	cbz	r1, 800bf42 <_reclaim_reent+0x22>
 800bf3c:	4620      	mov	r0, r4
 800bf3e:	f000 fae7 	bl	800c510 <_free_r>
 800bf42:	6961      	ldr	r1, [r4, #20]
 800bf44:	b111      	cbz	r1, 800bf4c <_reclaim_reent+0x2c>
 800bf46:	4620      	mov	r0, r4
 800bf48:	f000 fae2 	bl	800c510 <_free_r>
 800bf4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bf4e:	b111      	cbz	r1, 800bf56 <_reclaim_reent+0x36>
 800bf50:	4620      	mov	r0, r4
 800bf52:	f000 fadd 	bl	800c510 <_free_r>
 800bf56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bf58:	b111      	cbz	r1, 800bf60 <_reclaim_reent+0x40>
 800bf5a:	4620      	mov	r0, r4
 800bf5c:	f000 fad8 	bl	800c510 <_free_r>
 800bf60:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bf62:	b111      	cbz	r1, 800bf6a <_reclaim_reent+0x4a>
 800bf64:	4620      	mov	r0, r4
 800bf66:	f000 fad3 	bl	800c510 <_free_r>
 800bf6a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bf6c:	b111      	cbz	r1, 800bf74 <_reclaim_reent+0x54>
 800bf6e:	4620      	mov	r0, r4
 800bf70:	f000 face 	bl	800c510 <_free_r>
 800bf74:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800bf76:	b111      	cbz	r1, 800bf7e <_reclaim_reent+0x5e>
 800bf78:	4620      	mov	r0, r4
 800bf7a:	f000 fac9 	bl	800c510 <_free_r>
 800bf7e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800bf80:	b111      	cbz	r1, 800bf88 <_reclaim_reent+0x68>
 800bf82:	4620      	mov	r0, r4
 800bf84:	f000 fac4 	bl	800c510 <_free_r>
 800bf88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf8a:	b111      	cbz	r1, 800bf92 <_reclaim_reent+0x72>
 800bf8c:	4620      	mov	r0, r4
 800bf8e:	f000 fabf 	bl	800c510 <_free_r>
 800bf92:	69a3      	ldr	r3, [r4, #24]
 800bf94:	b1e3      	cbz	r3, 800bfd0 <_reclaim_reent+0xb0>
 800bf96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bf98:	4620      	mov	r0, r4
 800bf9a:	4798      	blx	r3
 800bf9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bf9e:	b1b9      	cbz	r1, 800bfd0 <_reclaim_reent+0xb0>
 800bfa0:	4620      	mov	r0, r4
 800bfa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bfa6:	f7ff bfad 	b.w	800bf04 <cleanup_glue>
 800bfaa:	5949      	ldr	r1, [r1, r5]
 800bfac:	b941      	cbnz	r1, 800bfc0 <_reclaim_reent+0xa0>
 800bfae:	3504      	adds	r5, #4
 800bfb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfb2:	2d80      	cmp	r5, #128	; 0x80
 800bfb4:	68d9      	ldr	r1, [r3, #12]
 800bfb6:	d1f8      	bne.n	800bfaa <_reclaim_reent+0x8a>
 800bfb8:	4620      	mov	r0, r4
 800bfba:	f000 faa9 	bl	800c510 <_free_r>
 800bfbe:	e7ba      	b.n	800bf36 <_reclaim_reent+0x16>
 800bfc0:	680e      	ldr	r6, [r1, #0]
 800bfc2:	4620      	mov	r0, r4
 800bfc4:	f000 faa4 	bl	800c510 <_free_r>
 800bfc8:	4631      	mov	r1, r6
 800bfca:	e7ef      	b.n	800bfac <_reclaim_reent+0x8c>
 800bfcc:	2500      	movs	r5, #0
 800bfce:	e7ef      	b.n	800bfb0 <_reclaim_reent+0x90>
 800bfd0:	bd70      	pop	{r4, r5, r6, pc}
 800bfd2:	bf00      	nop
 800bfd4:	2400001c 	.word	0x2400001c

0800bfd8 <_sbrk_r>:
 800bfd8:	b538      	push	{r3, r4, r5, lr}
 800bfda:	4d06      	ldr	r5, [pc, #24]	; (800bff4 <_sbrk_r+0x1c>)
 800bfdc:	2300      	movs	r3, #0
 800bfde:	4604      	mov	r4, r0
 800bfe0:	4608      	mov	r0, r1
 800bfe2:	602b      	str	r3, [r5, #0]
 800bfe4:	f7f6 fb92 	bl	800270c <_sbrk>
 800bfe8:	1c43      	adds	r3, r0, #1
 800bfea:	d102      	bne.n	800bff2 <_sbrk_r+0x1a>
 800bfec:	682b      	ldr	r3, [r5, #0]
 800bfee:	b103      	cbz	r3, 800bff2 <_sbrk_r+0x1a>
 800bff0:	6023      	str	r3, [r4, #0]
 800bff2:	bd38      	pop	{r3, r4, r5, pc}
 800bff4:	24004ef4 	.word	0x24004ef4

0800bff8 <siprintf>:
 800bff8:	b40e      	push	{r1, r2, r3}
 800bffa:	b500      	push	{lr}
 800bffc:	b09c      	sub	sp, #112	; 0x70
 800bffe:	ab1d      	add	r3, sp, #116	; 0x74
 800c000:	9002      	str	r0, [sp, #8]
 800c002:	9006      	str	r0, [sp, #24]
 800c004:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c008:	4809      	ldr	r0, [pc, #36]	; (800c030 <siprintf+0x38>)
 800c00a:	9107      	str	r1, [sp, #28]
 800c00c:	9104      	str	r1, [sp, #16]
 800c00e:	4909      	ldr	r1, [pc, #36]	; (800c034 <siprintf+0x3c>)
 800c010:	f853 2b04 	ldr.w	r2, [r3], #4
 800c014:	9105      	str	r1, [sp, #20]
 800c016:	6800      	ldr	r0, [r0, #0]
 800c018:	9301      	str	r3, [sp, #4]
 800c01a:	a902      	add	r1, sp, #8
 800c01c:	f000 fb20 	bl	800c660 <_svfiprintf_r>
 800c020:	9b02      	ldr	r3, [sp, #8]
 800c022:	2200      	movs	r2, #0
 800c024:	701a      	strb	r2, [r3, #0]
 800c026:	b01c      	add	sp, #112	; 0x70
 800c028:	f85d eb04 	ldr.w	lr, [sp], #4
 800c02c:	b003      	add	sp, #12
 800c02e:	4770      	bx	lr
 800c030:	2400001c 	.word	0x2400001c
 800c034:	ffff0208 	.word	0xffff0208

0800c038 <__sread>:
 800c038:	b510      	push	{r4, lr}
 800c03a:	460c      	mov	r4, r1
 800c03c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c040:	f000 fefc 	bl	800ce3c <_read_r>
 800c044:	2800      	cmp	r0, #0
 800c046:	bfab      	itete	ge
 800c048:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c04a:	89a3      	ldrhlt	r3, [r4, #12]
 800c04c:	181b      	addge	r3, r3, r0
 800c04e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c052:	bfac      	ite	ge
 800c054:	6563      	strge	r3, [r4, #84]	; 0x54
 800c056:	81a3      	strhlt	r3, [r4, #12]
 800c058:	bd10      	pop	{r4, pc}

0800c05a <__swrite>:
 800c05a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c05e:	461f      	mov	r7, r3
 800c060:	898b      	ldrh	r3, [r1, #12]
 800c062:	05db      	lsls	r3, r3, #23
 800c064:	4605      	mov	r5, r0
 800c066:	460c      	mov	r4, r1
 800c068:	4616      	mov	r6, r2
 800c06a:	d505      	bpl.n	800c078 <__swrite+0x1e>
 800c06c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c070:	2302      	movs	r3, #2
 800c072:	2200      	movs	r2, #0
 800c074:	f000 f9c8 	bl	800c408 <_lseek_r>
 800c078:	89a3      	ldrh	r3, [r4, #12]
 800c07a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c07e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c082:	81a3      	strh	r3, [r4, #12]
 800c084:	4632      	mov	r2, r6
 800c086:	463b      	mov	r3, r7
 800c088:	4628      	mov	r0, r5
 800c08a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c08e:	f000 b869 	b.w	800c164 <_write_r>

0800c092 <__sseek>:
 800c092:	b510      	push	{r4, lr}
 800c094:	460c      	mov	r4, r1
 800c096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c09a:	f000 f9b5 	bl	800c408 <_lseek_r>
 800c09e:	1c43      	adds	r3, r0, #1
 800c0a0:	89a3      	ldrh	r3, [r4, #12]
 800c0a2:	bf15      	itete	ne
 800c0a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c0a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c0aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c0ae:	81a3      	strheq	r3, [r4, #12]
 800c0b0:	bf18      	it	ne
 800c0b2:	81a3      	strhne	r3, [r4, #12]
 800c0b4:	bd10      	pop	{r4, pc}

0800c0b6 <__sclose>:
 800c0b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0ba:	f000 b8d3 	b.w	800c264 <_close_r>
	...

0800c0c0 <__swbuf_r>:
 800c0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0c2:	460e      	mov	r6, r1
 800c0c4:	4614      	mov	r4, r2
 800c0c6:	4605      	mov	r5, r0
 800c0c8:	b118      	cbz	r0, 800c0d2 <__swbuf_r+0x12>
 800c0ca:	6983      	ldr	r3, [r0, #24]
 800c0cc:	b90b      	cbnz	r3, 800c0d2 <__swbuf_r+0x12>
 800c0ce:	f7ff fd1b 	bl	800bb08 <__sinit>
 800c0d2:	4b21      	ldr	r3, [pc, #132]	; (800c158 <__swbuf_r+0x98>)
 800c0d4:	429c      	cmp	r4, r3
 800c0d6:	d12b      	bne.n	800c130 <__swbuf_r+0x70>
 800c0d8:	686c      	ldr	r4, [r5, #4]
 800c0da:	69a3      	ldr	r3, [r4, #24]
 800c0dc:	60a3      	str	r3, [r4, #8]
 800c0de:	89a3      	ldrh	r3, [r4, #12]
 800c0e0:	071a      	lsls	r2, r3, #28
 800c0e2:	d52f      	bpl.n	800c144 <__swbuf_r+0x84>
 800c0e4:	6923      	ldr	r3, [r4, #16]
 800c0e6:	b36b      	cbz	r3, 800c144 <__swbuf_r+0x84>
 800c0e8:	6923      	ldr	r3, [r4, #16]
 800c0ea:	6820      	ldr	r0, [r4, #0]
 800c0ec:	1ac0      	subs	r0, r0, r3
 800c0ee:	6963      	ldr	r3, [r4, #20]
 800c0f0:	b2f6      	uxtb	r6, r6
 800c0f2:	4283      	cmp	r3, r0
 800c0f4:	4637      	mov	r7, r6
 800c0f6:	dc04      	bgt.n	800c102 <__swbuf_r+0x42>
 800c0f8:	4621      	mov	r1, r4
 800c0fa:	4628      	mov	r0, r5
 800c0fc:	f000 f948 	bl	800c390 <_fflush_r>
 800c100:	bb30      	cbnz	r0, 800c150 <__swbuf_r+0x90>
 800c102:	68a3      	ldr	r3, [r4, #8]
 800c104:	3b01      	subs	r3, #1
 800c106:	60a3      	str	r3, [r4, #8]
 800c108:	6823      	ldr	r3, [r4, #0]
 800c10a:	1c5a      	adds	r2, r3, #1
 800c10c:	6022      	str	r2, [r4, #0]
 800c10e:	701e      	strb	r6, [r3, #0]
 800c110:	6963      	ldr	r3, [r4, #20]
 800c112:	3001      	adds	r0, #1
 800c114:	4283      	cmp	r3, r0
 800c116:	d004      	beq.n	800c122 <__swbuf_r+0x62>
 800c118:	89a3      	ldrh	r3, [r4, #12]
 800c11a:	07db      	lsls	r3, r3, #31
 800c11c:	d506      	bpl.n	800c12c <__swbuf_r+0x6c>
 800c11e:	2e0a      	cmp	r6, #10
 800c120:	d104      	bne.n	800c12c <__swbuf_r+0x6c>
 800c122:	4621      	mov	r1, r4
 800c124:	4628      	mov	r0, r5
 800c126:	f000 f933 	bl	800c390 <_fflush_r>
 800c12a:	b988      	cbnz	r0, 800c150 <__swbuf_r+0x90>
 800c12c:	4638      	mov	r0, r7
 800c12e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c130:	4b0a      	ldr	r3, [pc, #40]	; (800c15c <__swbuf_r+0x9c>)
 800c132:	429c      	cmp	r4, r3
 800c134:	d101      	bne.n	800c13a <__swbuf_r+0x7a>
 800c136:	68ac      	ldr	r4, [r5, #8]
 800c138:	e7cf      	b.n	800c0da <__swbuf_r+0x1a>
 800c13a:	4b09      	ldr	r3, [pc, #36]	; (800c160 <__swbuf_r+0xa0>)
 800c13c:	429c      	cmp	r4, r3
 800c13e:	bf08      	it	eq
 800c140:	68ec      	ldreq	r4, [r5, #12]
 800c142:	e7ca      	b.n	800c0da <__swbuf_r+0x1a>
 800c144:	4621      	mov	r1, r4
 800c146:	4628      	mov	r0, r5
 800c148:	f000 f81e 	bl	800c188 <__swsetup_r>
 800c14c:	2800      	cmp	r0, #0
 800c14e:	d0cb      	beq.n	800c0e8 <__swbuf_r+0x28>
 800c150:	f04f 37ff 	mov.w	r7, #4294967295
 800c154:	e7ea      	b.n	800c12c <__swbuf_r+0x6c>
 800c156:	bf00      	nop
 800c158:	0800d5d0 	.word	0x0800d5d0
 800c15c:	0800d5f0 	.word	0x0800d5f0
 800c160:	0800d5b0 	.word	0x0800d5b0

0800c164 <_write_r>:
 800c164:	b538      	push	{r3, r4, r5, lr}
 800c166:	4d07      	ldr	r5, [pc, #28]	; (800c184 <_write_r+0x20>)
 800c168:	4604      	mov	r4, r0
 800c16a:	4608      	mov	r0, r1
 800c16c:	4611      	mov	r1, r2
 800c16e:	2200      	movs	r2, #0
 800c170:	602a      	str	r2, [r5, #0]
 800c172:	461a      	mov	r2, r3
 800c174:	f7f6 fa79 	bl	800266a <_write>
 800c178:	1c43      	adds	r3, r0, #1
 800c17a:	d102      	bne.n	800c182 <_write_r+0x1e>
 800c17c:	682b      	ldr	r3, [r5, #0]
 800c17e:	b103      	cbz	r3, 800c182 <_write_r+0x1e>
 800c180:	6023      	str	r3, [r4, #0]
 800c182:	bd38      	pop	{r3, r4, r5, pc}
 800c184:	24004ef4 	.word	0x24004ef4

0800c188 <__swsetup_r>:
 800c188:	4b32      	ldr	r3, [pc, #200]	; (800c254 <__swsetup_r+0xcc>)
 800c18a:	b570      	push	{r4, r5, r6, lr}
 800c18c:	681d      	ldr	r5, [r3, #0]
 800c18e:	4606      	mov	r6, r0
 800c190:	460c      	mov	r4, r1
 800c192:	b125      	cbz	r5, 800c19e <__swsetup_r+0x16>
 800c194:	69ab      	ldr	r3, [r5, #24]
 800c196:	b913      	cbnz	r3, 800c19e <__swsetup_r+0x16>
 800c198:	4628      	mov	r0, r5
 800c19a:	f7ff fcb5 	bl	800bb08 <__sinit>
 800c19e:	4b2e      	ldr	r3, [pc, #184]	; (800c258 <__swsetup_r+0xd0>)
 800c1a0:	429c      	cmp	r4, r3
 800c1a2:	d10f      	bne.n	800c1c4 <__swsetup_r+0x3c>
 800c1a4:	686c      	ldr	r4, [r5, #4]
 800c1a6:	89a3      	ldrh	r3, [r4, #12]
 800c1a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c1ac:	0719      	lsls	r1, r3, #28
 800c1ae:	d42c      	bmi.n	800c20a <__swsetup_r+0x82>
 800c1b0:	06dd      	lsls	r5, r3, #27
 800c1b2:	d411      	bmi.n	800c1d8 <__swsetup_r+0x50>
 800c1b4:	2309      	movs	r3, #9
 800c1b6:	6033      	str	r3, [r6, #0]
 800c1b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c1bc:	81a3      	strh	r3, [r4, #12]
 800c1be:	f04f 30ff 	mov.w	r0, #4294967295
 800c1c2:	e03e      	b.n	800c242 <__swsetup_r+0xba>
 800c1c4:	4b25      	ldr	r3, [pc, #148]	; (800c25c <__swsetup_r+0xd4>)
 800c1c6:	429c      	cmp	r4, r3
 800c1c8:	d101      	bne.n	800c1ce <__swsetup_r+0x46>
 800c1ca:	68ac      	ldr	r4, [r5, #8]
 800c1cc:	e7eb      	b.n	800c1a6 <__swsetup_r+0x1e>
 800c1ce:	4b24      	ldr	r3, [pc, #144]	; (800c260 <__swsetup_r+0xd8>)
 800c1d0:	429c      	cmp	r4, r3
 800c1d2:	bf08      	it	eq
 800c1d4:	68ec      	ldreq	r4, [r5, #12]
 800c1d6:	e7e6      	b.n	800c1a6 <__swsetup_r+0x1e>
 800c1d8:	0758      	lsls	r0, r3, #29
 800c1da:	d512      	bpl.n	800c202 <__swsetup_r+0x7a>
 800c1dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c1de:	b141      	cbz	r1, 800c1f2 <__swsetup_r+0x6a>
 800c1e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c1e4:	4299      	cmp	r1, r3
 800c1e6:	d002      	beq.n	800c1ee <__swsetup_r+0x66>
 800c1e8:	4630      	mov	r0, r6
 800c1ea:	f000 f991 	bl	800c510 <_free_r>
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	6363      	str	r3, [r4, #52]	; 0x34
 800c1f2:	89a3      	ldrh	r3, [r4, #12]
 800c1f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c1f8:	81a3      	strh	r3, [r4, #12]
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	6063      	str	r3, [r4, #4]
 800c1fe:	6923      	ldr	r3, [r4, #16]
 800c200:	6023      	str	r3, [r4, #0]
 800c202:	89a3      	ldrh	r3, [r4, #12]
 800c204:	f043 0308 	orr.w	r3, r3, #8
 800c208:	81a3      	strh	r3, [r4, #12]
 800c20a:	6923      	ldr	r3, [r4, #16]
 800c20c:	b94b      	cbnz	r3, 800c222 <__swsetup_r+0x9a>
 800c20e:	89a3      	ldrh	r3, [r4, #12]
 800c210:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c218:	d003      	beq.n	800c222 <__swsetup_r+0x9a>
 800c21a:	4621      	mov	r1, r4
 800c21c:	4630      	mov	r0, r6
 800c21e:	f000 f92b 	bl	800c478 <__smakebuf_r>
 800c222:	89a0      	ldrh	r0, [r4, #12]
 800c224:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c228:	f010 0301 	ands.w	r3, r0, #1
 800c22c:	d00a      	beq.n	800c244 <__swsetup_r+0xbc>
 800c22e:	2300      	movs	r3, #0
 800c230:	60a3      	str	r3, [r4, #8]
 800c232:	6963      	ldr	r3, [r4, #20]
 800c234:	425b      	negs	r3, r3
 800c236:	61a3      	str	r3, [r4, #24]
 800c238:	6923      	ldr	r3, [r4, #16]
 800c23a:	b943      	cbnz	r3, 800c24e <__swsetup_r+0xc6>
 800c23c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c240:	d1ba      	bne.n	800c1b8 <__swsetup_r+0x30>
 800c242:	bd70      	pop	{r4, r5, r6, pc}
 800c244:	0781      	lsls	r1, r0, #30
 800c246:	bf58      	it	pl
 800c248:	6963      	ldrpl	r3, [r4, #20]
 800c24a:	60a3      	str	r3, [r4, #8]
 800c24c:	e7f4      	b.n	800c238 <__swsetup_r+0xb0>
 800c24e:	2000      	movs	r0, #0
 800c250:	e7f7      	b.n	800c242 <__swsetup_r+0xba>
 800c252:	bf00      	nop
 800c254:	2400001c 	.word	0x2400001c
 800c258:	0800d5d0 	.word	0x0800d5d0
 800c25c:	0800d5f0 	.word	0x0800d5f0
 800c260:	0800d5b0 	.word	0x0800d5b0

0800c264 <_close_r>:
 800c264:	b538      	push	{r3, r4, r5, lr}
 800c266:	4d06      	ldr	r5, [pc, #24]	; (800c280 <_close_r+0x1c>)
 800c268:	2300      	movs	r3, #0
 800c26a:	4604      	mov	r4, r0
 800c26c:	4608      	mov	r0, r1
 800c26e:	602b      	str	r3, [r5, #0]
 800c270:	f7f6 fa17 	bl	80026a2 <_close>
 800c274:	1c43      	adds	r3, r0, #1
 800c276:	d102      	bne.n	800c27e <_close_r+0x1a>
 800c278:	682b      	ldr	r3, [r5, #0]
 800c27a:	b103      	cbz	r3, 800c27e <_close_r+0x1a>
 800c27c:	6023      	str	r3, [r4, #0]
 800c27e:	bd38      	pop	{r3, r4, r5, pc}
 800c280:	24004ef4 	.word	0x24004ef4

0800c284 <__sflush_r>:
 800c284:	898a      	ldrh	r2, [r1, #12]
 800c286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c28a:	4605      	mov	r5, r0
 800c28c:	0710      	lsls	r0, r2, #28
 800c28e:	460c      	mov	r4, r1
 800c290:	d458      	bmi.n	800c344 <__sflush_r+0xc0>
 800c292:	684b      	ldr	r3, [r1, #4]
 800c294:	2b00      	cmp	r3, #0
 800c296:	dc05      	bgt.n	800c2a4 <__sflush_r+0x20>
 800c298:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	dc02      	bgt.n	800c2a4 <__sflush_r+0x20>
 800c29e:	2000      	movs	r0, #0
 800c2a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2a6:	2e00      	cmp	r6, #0
 800c2a8:	d0f9      	beq.n	800c29e <__sflush_r+0x1a>
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c2b0:	682f      	ldr	r7, [r5, #0]
 800c2b2:	602b      	str	r3, [r5, #0]
 800c2b4:	d032      	beq.n	800c31c <__sflush_r+0x98>
 800c2b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c2b8:	89a3      	ldrh	r3, [r4, #12]
 800c2ba:	075a      	lsls	r2, r3, #29
 800c2bc:	d505      	bpl.n	800c2ca <__sflush_r+0x46>
 800c2be:	6863      	ldr	r3, [r4, #4]
 800c2c0:	1ac0      	subs	r0, r0, r3
 800c2c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c2c4:	b10b      	cbz	r3, 800c2ca <__sflush_r+0x46>
 800c2c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c2c8:	1ac0      	subs	r0, r0, r3
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	4602      	mov	r2, r0
 800c2ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2d0:	6a21      	ldr	r1, [r4, #32]
 800c2d2:	4628      	mov	r0, r5
 800c2d4:	47b0      	blx	r6
 800c2d6:	1c43      	adds	r3, r0, #1
 800c2d8:	89a3      	ldrh	r3, [r4, #12]
 800c2da:	d106      	bne.n	800c2ea <__sflush_r+0x66>
 800c2dc:	6829      	ldr	r1, [r5, #0]
 800c2de:	291d      	cmp	r1, #29
 800c2e0:	d82c      	bhi.n	800c33c <__sflush_r+0xb8>
 800c2e2:	4a2a      	ldr	r2, [pc, #168]	; (800c38c <__sflush_r+0x108>)
 800c2e4:	40ca      	lsrs	r2, r1
 800c2e6:	07d6      	lsls	r6, r2, #31
 800c2e8:	d528      	bpl.n	800c33c <__sflush_r+0xb8>
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	6062      	str	r2, [r4, #4]
 800c2ee:	04d9      	lsls	r1, r3, #19
 800c2f0:	6922      	ldr	r2, [r4, #16]
 800c2f2:	6022      	str	r2, [r4, #0]
 800c2f4:	d504      	bpl.n	800c300 <__sflush_r+0x7c>
 800c2f6:	1c42      	adds	r2, r0, #1
 800c2f8:	d101      	bne.n	800c2fe <__sflush_r+0x7a>
 800c2fa:	682b      	ldr	r3, [r5, #0]
 800c2fc:	b903      	cbnz	r3, 800c300 <__sflush_r+0x7c>
 800c2fe:	6560      	str	r0, [r4, #84]	; 0x54
 800c300:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c302:	602f      	str	r7, [r5, #0]
 800c304:	2900      	cmp	r1, #0
 800c306:	d0ca      	beq.n	800c29e <__sflush_r+0x1a>
 800c308:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c30c:	4299      	cmp	r1, r3
 800c30e:	d002      	beq.n	800c316 <__sflush_r+0x92>
 800c310:	4628      	mov	r0, r5
 800c312:	f000 f8fd 	bl	800c510 <_free_r>
 800c316:	2000      	movs	r0, #0
 800c318:	6360      	str	r0, [r4, #52]	; 0x34
 800c31a:	e7c1      	b.n	800c2a0 <__sflush_r+0x1c>
 800c31c:	6a21      	ldr	r1, [r4, #32]
 800c31e:	2301      	movs	r3, #1
 800c320:	4628      	mov	r0, r5
 800c322:	47b0      	blx	r6
 800c324:	1c41      	adds	r1, r0, #1
 800c326:	d1c7      	bne.n	800c2b8 <__sflush_r+0x34>
 800c328:	682b      	ldr	r3, [r5, #0]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d0c4      	beq.n	800c2b8 <__sflush_r+0x34>
 800c32e:	2b1d      	cmp	r3, #29
 800c330:	d001      	beq.n	800c336 <__sflush_r+0xb2>
 800c332:	2b16      	cmp	r3, #22
 800c334:	d101      	bne.n	800c33a <__sflush_r+0xb6>
 800c336:	602f      	str	r7, [r5, #0]
 800c338:	e7b1      	b.n	800c29e <__sflush_r+0x1a>
 800c33a:	89a3      	ldrh	r3, [r4, #12]
 800c33c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c340:	81a3      	strh	r3, [r4, #12]
 800c342:	e7ad      	b.n	800c2a0 <__sflush_r+0x1c>
 800c344:	690f      	ldr	r7, [r1, #16]
 800c346:	2f00      	cmp	r7, #0
 800c348:	d0a9      	beq.n	800c29e <__sflush_r+0x1a>
 800c34a:	0793      	lsls	r3, r2, #30
 800c34c:	680e      	ldr	r6, [r1, #0]
 800c34e:	bf08      	it	eq
 800c350:	694b      	ldreq	r3, [r1, #20]
 800c352:	600f      	str	r7, [r1, #0]
 800c354:	bf18      	it	ne
 800c356:	2300      	movne	r3, #0
 800c358:	eba6 0807 	sub.w	r8, r6, r7
 800c35c:	608b      	str	r3, [r1, #8]
 800c35e:	f1b8 0f00 	cmp.w	r8, #0
 800c362:	dd9c      	ble.n	800c29e <__sflush_r+0x1a>
 800c364:	6a21      	ldr	r1, [r4, #32]
 800c366:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c368:	4643      	mov	r3, r8
 800c36a:	463a      	mov	r2, r7
 800c36c:	4628      	mov	r0, r5
 800c36e:	47b0      	blx	r6
 800c370:	2800      	cmp	r0, #0
 800c372:	dc06      	bgt.n	800c382 <__sflush_r+0xfe>
 800c374:	89a3      	ldrh	r3, [r4, #12]
 800c376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c37a:	81a3      	strh	r3, [r4, #12]
 800c37c:	f04f 30ff 	mov.w	r0, #4294967295
 800c380:	e78e      	b.n	800c2a0 <__sflush_r+0x1c>
 800c382:	4407      	add	r7, r0
 800c384:	eba8 0800 	sub.w	r8, r8, r0
 800c388:	e7e9      	b.n	800c35e <__sflush_r+0xda>
 800c38a:	bf00      	nop
 800c38c:	20400001 	.word	0x20400001

0800c390 <_fflush_r>:
 800c390:	b538      	push	{r3, r4, r5, lr}
 800c392:	690b      	ldr	r3, [r1, #16]
 800c394:	4605      	mov	r5, r0
 800c396:	460c      	mov	r4, r1
 800c398:	b913      	cbnz	r3, 800c3a0 <_fflush_r+0x10>
 800c39a:	2500      	movs	r5, #0
 800c39c:	4628      	mov	r0, r5
 800c39e:	bd38      	pop	{r3, r4, r5, pc}
 800c3a0:	b118      	cbz	r0, 800c3aa <_fflush_r+0x1a>
 800c3a2:	6983      	ldr	r3, [r0, #24]
 800c3a4:	b90b      	cbnz	r3, 800c3aa <_fflush_r+0x1a>
 800c3a6:	f7ff fbaf 	bl	800bb08 <__sinit>
 800c3aa:	4b14      	ldr	r3, [pc, #80]	; (800c3fc <_fflush_r+0x6c>)
 800c3ac:	429c      	cmp	r4, r3
 800c3ae:	d11b      	bne.n	800c3e8 <_fflush_r+0x58>
 800c3b0:	686c      	ldr	r4, [r5, #4]
 800c3b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d0ef      	beq.n	800c39a <_fflush_r+0xa>
 800c3ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c3bc:	07d0      	lsls	r0, r2, #31
 800c3be:	d404      	bmi.n	800c3ca <_fflush_r+0x3a>
 800c3c0:	0599      	lsls	r1, r3, #22
 800c3c2:	d402      	bmi.n	800c3ca <_fflush_r+0x3a>
 800c3c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3c6:	f7ff fc62 	bl	800bc8e <__retarget_lock_acquire_recursive>
 800c3ca:	4628      	mov	r0, r5
 800c3cc:	4621      	mov	r1, r4
 800c3ce:	f7ff ff59 	bl	800c284 <__sflush_r>
 800c3d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c3d4:	07da      	lsls	r2, r3, #31
 800c3d6:	4605      	mov	r5, r0
 800c3d8:	d4e0      	bmi.n	800c39c <_fflush_r+0xc>
 800c3da:	89a3      	ldrh	r3, [r4, #12]
 800c3dc:	059b      	lsls	r3, r3, #22
 800c3de:	d4dd      	bmi.n	800c39c <_fflush_r+0xc>
 800c3e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3e2:	f7ff fc55 	bl	800bc90 <__retarget_lock_release_recursive>
 800c3e6:	e7d9      	b.n	800c39c <_fflush_r+0xc>
 800c3e8:	4b05      	ldr	r3, [pc, #20]	; (800c400 <_fflush_r+0x70>)
 800c3ea:	429c      	cmp	r4, r3
 800c3ec:	d101      	bne.n	800c3f2 <_fflush_r+0x62>
 800c3ee:	68ac      	ldr	r4, [r5, #8]
 800c3f0:	e7df      	b.n	800c3b2 <_fflush_r+0x22>
 800c3f2:	4b04      	ldr	r3, [pc, #16]	; (800c404 <_fflush_r+0x74>)
 800c3f4:	429c      	cmp	r4, r3
 800c3f6:	bf08      	it	eq
 800c3f8:	68ec      	ldreq	r4, [r5, #12]
 800c3fa:	e7da      	b.n	800c3b2 <_fflush_r+0x22>
 800c3fc:	0800d5d0 	.word	0x0800d5d0
 800c400:	0800d5f0 	.word	0x0800d5f0
 800c404:	0800d5b0 	.word	0x0800d5b0

0800c408 <_lseek_r>:
 800c408:	b538      	push	{r3, r4, r5, lr}
 800c40a:	4d07      	ldr	r5, [pc, #28]	; (800c428 <_lseek_r+0x20>)
 800c40c:	4604      	mov	r4, r0
 800c40e:	4608      	mov	r0, r1
 800c410:	4611      	mov	r1, r2
 800c412:	2200      	movs	r2, #0
 800c414:	602a      	str	r2, [r5, #0]
 800c416:	461a      	mov	r2, r3
 800c418:	f7f6 f96a 	bl	80026f0 <_lseek>
 800c41c:	1c43      	adds	r3, r0, #1
 800c41e:	d102      	bne.n	800c426 <_lseek_r+0x1e>
 800c420:	682b      	ldr	r3, [r5, #0]
 800c422:	b103      	cbz	r3, 800c426 <_lseek_r+0x1e>
 800c424:	6023      	str	r3, [r4, #0]
 800c426:	bd38      	pop	{r3, r4, r5, pc}
 800c428:	24004ef4 	.word	0x24004ef4

0800c42c <__swhatbuf_r>:
 800c42c:	b570      	push	{r4, r5, r6, lr}
 800c42e:	460e      	mov	r6, r1
 800c430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c434:	2900      	cmp	r1, #0
 800c436:	b096      	sub	sp, #88	; 0x58
 800c438:	4614      	mov	r4, r2
 800c43a:	461d      	mov	r5, r3
 800c43c:	da08      	bge.n	800c450 <__swhatbuf_r+0x24>
 800c43e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c442:	2200      	movs	r2, #0
 800c444:	602a      	str	r2, [r5, #0]
 800c446:	061a      	lsls	r2, r3, #24
 800c448:	d410      	bmi.n	800c46c <__swhatbuf_r+0x40>
 800c44a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c44e:	e00e      	b.n	800c46e <__swhatbuf_r+0x42>
 800c450:	466a      	mov	r2, sp
 800c452:	f000 fd05 	bl	800ce60 <_fstat_r>
 800c456:	2800      	cmp	r0, #0
 800c458:	dbf1      	blt.n	800c43e <__swhatbuf_r+0x12>
 800c45a:	9a01      	ldr	r2, [sp, #4]
 800c45c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c460:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c464:	425a      	negs	r2, r3
 800c466:	415a      	adcs	r2, r3
 800c468:	602a      	str	r2, [r5, #0]
 800c46a:	e7ee      	b.n	800c44a <__swhatbuf_r+0x1e>
 800c46c:	2340      	movs	r3, #64	; 0x40
 800c46e:	2000      	movs	r0, #0
 800c470:	6023      	str	r3, [r4, #0]
 800c472:	b016      	add	sp, #88	; 0x58
 800c474:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c478 <__smakebuf_r>:
 800c478:	898b      	ldrh	r3, [r1, #12]
 800c47a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c47c:	079d      	lsls	r5, r3, #30
 800c47e:	4606      	mov	r6, r0
 800c480:	460c      	mov	r4, r1
 800c482:	d507      	bpl.n	800c494 <__smakebuf_r+0x1c>
 800c484:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c488:	6023      	str	r3, [r4, #0]
 800c48a:	6123      	str	r3, [r4, #16]
 800c48c:	2301      	movs	r3, #1
 800c48e:	6163      	str	r3, [r4, #20]
 800c490:	b002      	add	sp, #8
 800c492:	bd70      	pop	{r4, r5, r6, pc}
 800c494:	ab01      	add	r3, sp, #4
 800c496:	466a      	mov	r2, sp
 800c498:	f7ff ffc8 	bl	800c42c <__swhatbuf_r>
 800c49c:	9900      	ldr	r1, [sp, #0]
 800c49e:	4605      	mov	r5, r0
 800c4a0:	4630      	mov	r0, r6
 800c4a2:	f7ff fc2d 	bl	800bd00 <_malloc_r>
 800c4a6:	b948      	cbnz	r0, 800c4bc <__smakebuf_r+0x44>
 800c4a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4ac:	059a      	lsls	r2, r3, #22
 800c4ae:	d4ef      	bmi.n	800c490 <__smakebuf_r+0x18>
 800c4b0:	f023 0303 	bic.w	r3, r3, #3
 800c4b4:	f043 0302 	orr.w	r3, r3, #2
 800c4b8:	81a3      	strh	r3, [r4, #12]
 800c4ba:	e7e3      	b.n	800c484 <__smakebuf_r+0xc>
 800c4bc:	4b0d      	ldr	r3, [pc, #52]	; (800c4f4 <__smakebuf_r+0x7c>)
 800c4be:	62b3      	str	r3, [r6, #40]	; 0x28
 800c4c0:	89a3      	ldrh	r3, [r4, #12]
 800c4c2:	6020      	str	r0, [r4, #0]
 800c4c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4c8:	81a3      	strh	r3, [r4, #12]
 800c4ca:	9b00      	ldr	r3, [sp, #0]
 800c4cc:	6163      	str	r3, [r4, #20]
 800c4ce:	9b01      	ldr	r3, [sp, #4]
 800c4d0:	6120      	str	r0, [r4, #16]
 800c4d2:	b15b      	cbz	r3, 800c4ec <__smakebuf_r+0x74>
 800c4d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4d8:	4630      	mov	r0, r6
 800c4da:	f000 fcd3 	bl	800ce84 <_isatty_r>
 800c4de:	b128      	cbz	r0, 800c4ec <__smakebuf_r+0x74>
 800c4e0:	89a3      	ldrh	r3, [r4, #12]
 800c4e2:	f023 0303 	bic.w	r3, r3, #3
 800c4e6:	f043 0301 	orr.w	r3, r3, #1
 800c4ea:	81a3      	strh	r3, [r4, #12]
 800c4ec:	89a0      	ldrh	r0, [r4, #12]
 800c4ee:	4305      	orrs	r5, r0
 800c4f0:	81a5      	strh	r5, [r4, #12]
 800c4f2:	e7cd      	b.n	800c490 <__smakebuf_r+0x18>
 800c4f4:	0800baa1 	.word	0x0800baa1

0800c4f8 <__malloc_lock>:
 800c4f8:	4801      	ldr	r0, [pc, #4]	; (800c500 <__malloc_lock+0x8>)
 800c4fa:	f7ff bbc8 	b.w	800bc8e <__retarget_lock_acquire_recursive>
 800c4fe:	bf00      	nop
 800c500:	24004ee8 	.word	0x24004ee8

0800c504 <__malloc_unlock>:
 800c504:	4801      	ldr	r0, [pc, #4]	; (800c50c <__malloc_unlock+0x8>)
 800c506:	f7ff bbc3 	b.w	800bc90 <__retarget_lock_release_recursive>
 800c50a:	bf00      	nop
 800c50c:	24004ee8 	.word	0x24004ee8

0800c510 <_free_r>:
 800c510:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c512:	2900      	cmp	r1, #0
 800c514:	d044      	beq.n	800c5a0 <_free_r+0x90>
 800c516:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c51a:	9001      	str	r0, [sp, #4]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	f1a1 0404 	sub.w	r4, r1, #4
 800c522:	bfb8      	it	lt
 800c524:	18e4      	addlt	r4, r4, r3
 800c526:	f7ff ffe7 	bl	800c4f8 <__malloc_lock>
 800c52a:	4a1e      	ldr	r2, [pc, #120]	; (800c5a4 <_free_r+0x94>)
 800c52c:	9801      	ldr	r0, [sp, #4]
 800c52e:	6813      	ldr	r3, [r2, #0]
 800c530:	b933      	cbnz	r3, 800c540 <_free_r+0x30>
 800c532:	6063      	str	r3, [r4, #4]
 800c534:	6014      	str	r4, [r2, #0]
 800c536:	b003      	add	sp, #12
 800c538:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c53c:	f7ff bfe2 	b.w	800c504 <__malloc_unlock>
 800c540:	42a3      	cmp	r3, r4
 800c542:	d908      	bls.n	800c556 <_free_r+0x46>
 800c544:	6825      	ldr	r5, [r4, #0]
 800c546:	1961      	adds	r1, r4, r5
 800c548:	428b      	cmp	r3, r1
 800c54a:	bf01      	itttt	eq
 800c54c:	6819      	ldreq	r1, [r3, #0]
 800c54e:	685b      	ldreq	r3, [r3, #4]
 800c550:	1949      	addeq	r1, r1, r5
 800c552:	6021      	streq	r1, [r4, #0]
 800c554:	e7ed      	b.n	800c532 <_free_r+0x22>
 800c556:	461a      	mov	r2, r3
 800c558:	685b      	ldr	r3, [r3, #4]
 800c55a:	b10b      	cbz	r3, 800c560 <_free_r+0x50>
 800c55c:	42a3      	cmp	r3, r4
 800c55e:	d9fa      	bls.n	800c556 <_free_r+0x46>
 800c560:	6811      	ldr	r1, [r2, #0]
 800c562:	1855      	adds	r5, r2, r1
 800c564:	42a5      	cmp	r5, r4
 800c566:	d10b      	bne.n	800c580 <_free_r+0x70>
 800c568:	6824      	ldr	r4, [r4, #0]
 800c56a:	4421      	add	r1, r4
 800c56c:	1854      	adds	r4, r2, r1
 800c56e:	42a3      	cmp	r3, r4
 800c570:	6011      	str	r1, [r2, #0]
 800c572:	d1e0      	bne.n	800c536 <_free_r+0x26>
 800c574:	681c      	ldr	r4, [r3, #0]
 800c576:	685b      	ldr	r3, [r3, #4]
 800c578:	6053      	str	r3, [r2, #4]
 800c57a:	4421      	add	r1, r4
 800c57c:	6011      	str	r1, [r2, #0]
 800c57e:	e7da      	b.n	800c536 <_free_r+0x26>
 800c580:	d902      	bls.n	800c588 <_free_r+0x78>
 800c582:	230c      	movs	r3, #12
 800c584:	6003      	str	r3, [r0, #0]
 800c586:	e7d6      	b.n	800c536 <_free_r+0x26>
 800c588:	6825      	ldr	r5, [r4, #0]
 800c58a:	1961      	adds	r1, r4, r5
 800c58c:	428b      	cmp	r3, r1
 800c58e:	bf04      	itt	eq
 800c590:	6819      	ldreq	r1, [r3, #0]
 800c592:	685b      	ldreq	r3, [r3, #4]
 800c594:	6063      	str	r3, [r4, #4]
 800c596:	bf04      	itt	eq
 800c598:	1949      	addeq	r1, r1, r5
 800c59a:	6021      	streq	r1, [r4, #0]
 800c59c:	6054      	str	r4, [r2, #4]
 800c59e:	e7ca      	b.n	800c536 <_free_r+0x26>
 800c5a0:	b003      	add	sp, #12
 800c5a2:	bd30      	pop	{r4, r5, pc}
 800c5a4:	24004eec 	.word	0x24004eec

0800c5a8 <__ssputs_r>:
 800c5a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5ac:	688e      	ldr	r6, [r1, #8]
 800c5ae:	429e      	cmp	r6, r3
 800c5b0:	4682      	mov	sl, r0
 800c5b2:	460c      	mov	r4, r1
 800c5b4:	4690      	mov	r8, r2
 800c5b6:	461f      	mov	r7, r3
 800c5b8:	d838      	bhi.n	800c62c <__ssputs_r+0x84>
 800c5ba:	898a      	ldrh	r2, [r1, #12]
 800c5bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c5c0:	d032      	beq.n	800c628 <__ssputs_r+0x80>
 800c5c2:	6825      	ldr	r5, [r4, #0]
 800c5c4:	6909      	ldr	r1, [r1, #16]
 800c5c6:	eba5 0901 	sub.w	r9, r5, r1
 800c5ca:	6965      	ldr	r5, [r4, #20]
 800c5cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c5d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c5d4:	3301      	adds	r3, #1
 800c5d6:	444b      	add	r3, r9
 800c5d8:	106d      	asrs	r5, r5, #1
 800c5da:	429d      	cmp	r5, r3
 800c5dc:	bf38      	it	cc
 800c5de:	461d      	movcc	r5, r3
 800c5e0:	0553      	lsls	r3, r2, #21
 800c5e2:	d531      	bpl.n	800c648 <__ssputs_r+0xa0>
 800c5e4:	4629      	mov	r1, r5
 800c5e6:	f7ff fb8b 	bl	800bd00 <_malloc_r>
 800c5ea:	4606      	mov	r6, r0
 800c5ec:	b950      	cbnz	r0, 800c604 <__ssputs_r+0x5c>
 800c5ee:	230c      	movs	r3, #12
 800c5f0:	f8ca 3000 	str.w	r3, [sl]
 800c5f4:	89a3      	ldrh	r3, [r4, #12]
 800c5f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5fa:	81a3      	strh	r3, [r4, #12]
 800c5fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c604:	6921      	ldr	r1, [r4, #16]
 800c606:	464a      	mov	r2, r9
 800c608:	f7ff fb43 	bl	800bc92 <memcpy>
 800c60c:	89a3      	ldrh	r3, [r4, #12]
 800c60e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c616:	81a3      	strh	r3, [r4, #12]
 800c618:	6126      	str	r6, [r4, #16]
 800c61a:	6165      	str	r5, [r4, #20]
 800c61c:	444e      	add	r6, r9
 800c61e:	eba5 0509 	sub.w	r5, r5, r9
 800c622:	6026      	str	r6, [r4, #0]
 800c624:	60a5      	str	r5, [r4, #8]
 800c626:	463e      	mov	r6, r7
 800c628:	42be      	cmp	r6, r7
 800c62a:	d900      	bls.n	800c62e <__ssputs_r+0x86>
 800c62c:	463e      	mov	r6, r7
 800c62e:	6820      	ldr	r0, [r4, #0]
 800c630:	4632      	mov	r2, r6
 800c632:	4641      	mov	r1, r8
 800c634:	f000 fc36 	bl	800cea4 <memmove>
 800c638:	68a3      	ldr	r3, [r4, #8]
 800c63a:	1b9b      	subs	r3, r3, r6
 800c63c:	60a3      	str	r3, [r4, #8]
 800c63e:	6823      	ldr	r3, [r4, #0]
 800c640:	4433      	add	r3, r6
 800c642:	6023      	str	r3, [r4, #0]
 800c644:	2000      	movs	r0, #0
 800c646:	e7db      	b.n	800c600 <__ssputs_r+0x58>
 800c648:	462a      	mov	r2, r5
 800c64a:	f000 fc45 	bl	800ced8 <_realloc_r>
 800c64e:	4606      	mov	r6, r0
 800c650:	2800      	cmp	r0, #0
 800c652:	d1e1      	bne.n	800c618 <__ssputs_r+0x70>
 800c654:	6921      	ldr	r1, [r4, #16]
 800c656:	4650      	mov	r0, sl
 800c658:	f7ff ff5a 	bl	800c510 <_free_r>
 800c65c:	e7c7      	b.n	800c5ee <__ssputs_r+0x46>
	...

0800c660 <_svfiprintf_r>:
 800c660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c664:	4698      	mov	r8, r3
 800c666:	898b      	ldrh	r3, [r1, #12]
 800c668:	061b      	lsls	r3, r3, #24
 800c66a:	b09d      	sub	sp, #116	; 0x74
 800c66c:	4607      	mov	r7, r0
 800c66e:	460d      	mov	r5, r1
 800c670:	4614      	mov	r4, r2
 800c672:	d50e      	bpl.n	800c692 <_svfiprintf_r+0x32>
 800c674:	690b      	ldr	r3, [r1, #16]
 800c676:	b963      	cbnz	r3, 800c692 <_svfiprintf_r+0x32>
 800c678:	2140      	movs	r1, #64	; 0x40
 800c67a:	f7ff fb41 	bl	800bd00 <_malloc_r>
 800c67e:	6028      	str	r0, [r5, #0]
 800c680:	6128      	str	r0, [r5, #16]
 800c682:	b920      	cbnz	r0, 800c68e <_svfiprintf_r+0x2e>
 800c684:	230c      	movs	r3, #12
 800c686:	603b      	str	r3, [r7, #0]
 800c688:	f04f 30ff 	mov.w	r0, #4294967295
 800c68c:	e0d1      	b.n	800c832 <_svfiprintf_r+0x1d2>
 800c68e:	2340      	movs	r3, #64	; 0x40
 800c690:	616b      	str	r3, [r5, #20]
 800c692:	2300      	movs	r3, #0
 800c694:	9309      	str	r3, [sp, #36]	; 0x24
 800c696:	2320      	movs	r3, #32
 800c698:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c69c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6a0:	2330      	movs	r3, #48	; 0x30
 800c6a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c84c <_svfiprintf_r+0x1ec>
 800c6a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c6aa:	f04f 0901 	mov.w	r9, #1
 800c6ae:	4623      	mov	r3, r4
 800c6b0:	469a      	mov	sl, r3
 800c6b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6b6:	b10a      	cbz	r2, 800c6bc <_svfiprintf_r+0x5c>
 800c6b8:	2a25      	cmp	r2, #37	; 0x25
 800c6ba:	d1f9      	bne.n	800c6b0 <_svfiprintf_r+0x50>
 800c6bc:	ebba 0b04 	subs.w	fp, sl, r4
 800c6c0:	d00b      	beq.n	800c6da <_svfiprintf_r+0x7a>
 800c6c2:	465b      	mov	r3, fp
 800c6c4:	4622      	mov	r2, r4
 800c6c6:	4629      	mov	r1, r5
 800c6c8:	4638      	mov	r0, r7
 800c6ca:	f7ff ff6d 	bl	800c5a8 <__ssputs_r>
 800c6ce:	3001      	adds	r0, #1
 800c6d0:	f000 80aa 	beq.w	800c828 <_svfiprintf_r+0x1c8>
 800c6d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6d6:	445a      	add	r2, fp
 800c6d8:	9209      	str	r2, [sp, #36]	; 0x24
 800c6da:	f89a 3000 	ldrb.w	r3, [sl]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	f000 80a2 	beq.w	800c828 <_svfiprintf_r+0x1c8>
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	f04f 32ff 	mov.w	r2, #4294967295
 800c6ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6ee:	f10a 0a01 	add.w	sl, sl, #1
 800c6f2:	9304      	str	r3, [sp, #16]
 800c6f4:	9307      	str	r3, [sp, #28]
 800c6f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c6fa:	931a      	str	r3, [sp, #104]	; 0x68
 800c6fc:	4654      	mov	r4, sl
 800c6fe:	2205      	movs	r2, #5
 800c700:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c704:	4851      	ldr	r0, [pc, #324]	; (800c84c <_svfiprintf_r+0x1ec>)
 800c706:	f7f3 fdf3 	bl	80002f0 <memchr>
 800c70a:	9a04      	ldr	r2, [sp, #16]
 800c70c:	b9d8      	cbnz	r0, 800c746 <_svfiprintf_r+0xe6>
 800c70e:	06d0      	lsls	r0, r2, #27
 800c710:	bf44      	itt	mi
 800c712:	2320      	movmi	r3, #32
 800c714:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c718:	0711      	lsls	r1, r2, #28
 800c71a:	bf44      	itt	mi
 800c71c:	232b      	movmi	r3, #43	; 0x2b
 800c71e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c722:	f89a 3000 	ldrb.w	r3, [sl]
 800c726:	2b2a      	cmp	r3, #42	; 0x2a
 800c728:	d015      	beq.n	800c756 <_svfiprintf_r+0xf6>
 800c72a:	9a07      	ldr	r2, [sp, #28]
 800c72c:	4654      	mov	r4, sl
 800c72e:	2000      	movs	r0, #0
 800c730:	f04f 0c0a 	mov.w	ip, #10
 800c734:	4621      	mov	r1, r4
 800c736:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c73a:	3b30      	subs	r3, #48	; 0x30
 800c73c:	2b09      	cmp	r3, #9
 800c73e:	d94e      	bls.n	800c7de <_svfiprintf_r+0x17e>
 800c740:	b1b0      	cbz	r0, 800c770 <_svfiprintf_r+0x110>
 800c742:	9207      	str	r2, [sp, #28]
 800c744:	e014      	b.n	800c770 <_svfiprintf_r+0x110>
 800c746:	eba0 0308 	sub.w	r3, r0, r8
 800c74a:	fa09 f303 	lsl.w	r3, r9, r3
 800c74e:	4313      	orrs	r3, r2
 800c750:	9304      	str	r3, [sp, #16]
 800c752:	46a2      	mov	sl, r4
 800c754:	e7d2      	b.n	800c6fc <_svfiprintf_r+0x9c>
 800c756:	9b03      	ldr	r3, [sp, #12]
 800c758:	1d19      	adds	r1, r3, #4
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	9103      	str	r1, [sp, #12]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	bfbb      	ittet	lt
 800c762:	425b      	neglt	r3, r3
 800c764:	f042 0202 	orrlt.w	r2, r2, #2
 800c768:	9307      	strge	r3, [sp, #28]
 800c76a:	9307      	strlt	r3, [sp, #28]
 800c76c:	bfb8      	it	lt
 800c76e:	9204      	strlt	r2, [sp, #16]
 800c770:	7823      	ldrb	r3, [r4, #0]
 800c772:	2b2e      	cmp	r3, #46	; 0x2e
 800c774:	d10c      	bne.n	800c790 <_svfiprintf_r+0x130>
 800c776:	7863      	ldrb	r3, [r4, #1]
 800c778:	2b2a      	cmp	r3, #42	; 0x2a
 800c77a:	d135      	bne.n	800c7e8 <_svfiprintf_r+0x188>
 800c77c:	9b03      	ldr	r3, [sp, #12]
 800c77e:	1d1a      	adds	r2, r3, #4
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	9203      	str	r2, [sp, #12]
 800c784:	2b00      	cmp	r3, #0
 800c786:	bfb8      	it	lt
 800c788:	f04f 33ff 	movlt.w	r3, #4294967295
 800c78c:	3402      	adds	r4, #2
 800c78e:	9305      	str	r3, [sp, #20]
 800c790:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c85c <_svfiprintf_r+0x1fc>
 800c794:	7821      	ldrb	r1, [r4, #0]
 800c796:	2203      	movs	r2, #3
 800c798:	4650      	mov	r0, sl
 800c79a:	f7f3 fda9 	bl	80002f0 <memchr>
 800c79e:	b140      	cbz	r0, 800c7b2 <_svfiprintf_r+0x152>
 800c7a0:	2340      	movs	r3, #64	; 0x40
 800c7a2:	eba0 000a 	sub.w	r0, r0, sl
 800c7a6:	fa03 f000 	lsl.w	r0, r3, r0
 800c7aa:	9b04      	ldr	r3, [sp, #16]
 800c7ac:	4303      	orrs	r3, r0
 800c7ae:	3401      	adds	r4, #1
 800c7b0:	9304      	str	r3, [sp, #16]
 800c7b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7b6:	4826      	ldr	r0, [pc, #152]	; (800c850 <_svfiprintf_r+0x1f0>)
 800c7b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c7bc:	2206      	movs	r2, #6
 800c7be:	f7f3 fd97 	bl	80002f0 <memchr>
 800c7c2:	2800      	cmp	r0, #0
 800c7c4:	d038      	beq.n	800c838 <_svfiprintf_r+0x1d8>
 800c7c6:	4b23      	ldr	r3, [pc, #140]	; (800c854 <_svfiprintf_r+0x1f4>)
 800c7c8:	bb1b      	cbnz	r3, 800c812 <_svfiprintf_r+0x1b2>
 800c7ca:	9b03      	ldr	r3, [sp, #12]
 800c7cc:	3307      	adds	r3, #7
 800c7ce:	f023 0307 	bic.w	r3, r3, #7
 800c7d2:	3308      	adds	r3, #8
 800c7d4:	9303      	str	r3, [sp, #12]
 800c7d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7d8:	4433      	add	r3, r6
 800c7da:	9309      	str	r3, [sp, #36]	; 0x24
 800c7dc:	e767      	b.n	800c6ae <_svfiprintf_r+0x4e>
 800c7de:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7e2:	460c      	mov	r4, r1
 800c7e4:	2001      	movs	r0, #1
 800c7e6:	e7a5      	b.n	800c734 <_svfiprintf_r+0xd4>
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	3401      	adds	r4, #1
 800c7ec:	9305      	str	r3, [sp, #20]
 800c7ee:	4619      	mov	r1, r3
 800c7f0:	f04f 0c0a 	mov.w	ip, #10
 800c7f4:	4620      	mov	r0, r4
 800c7f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7fa:	3a30      	subs	r2, #48	; 0x30
 800c7fc:	2a09      	cmp	r2, #9
 800c7fe:	d903      	bls.n	800c808 <_svfiprintf_r+0x1a8>
 800c800:	2b00      	cmp	r3, #0
 800c802:	d0c5      	beq.n	800c790 <_svfiprintf_r+0x130>
 800c804:	9105      	str	r1, [sp, #20]
 800c806:	e7c3      	b.n	800c790 <_svfiprintf_r+0x130>
 800c808:	fb0c 2101 	mla	r1, ip, r1, r2
 800c80c:	4604      	mov	r4, r0
 800c80e:	2301      	movs	r3, #1
 800c810:	e7f0      	b.n	800c7f4 <_svfiprintf_r+0x194>
 800c812:	ab03      	add	r3, sp, #12
 800c814:	9300      	str	r3, [sp, #0]
 800c816:	462a      	mov	r2, r5
 800c818:	4b0f      	ldr	r3, [pc, #60]	; (800c858 <_svfiprintf_r+0x1f8>)
 800c81a:	a904      	add	r1, sp, #16
 800c81c:	4638      	mov	r0, r7
 800c81e:	f3af 8000 	nop.w
 800c822:	1c42      	adds	r2, r0, #1
 800c824:	4606      	mov	r6, r0
 800c826:	d1d6      	bne.n	800c7d6 <_svfiprintf_r+0x176>
 800c828:	89ab      	ldrh	r3, [r5, #12]
 800c82a:	065b      	lsls	r3, r3, #25
 800c82c:	f53f af2c 	bmi.w	800c688 <_svfiprintf_r+0x28>
 800c830:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c832:	b01d      	add	sp, #116	; 0x74
 800c834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c838:	ab03      	add	r3, sp, #12
 800c83a:	9300      	str	r3, [sp, #0]
 800c83c:	462a      	mov	r2, r5
 800c83e:	4b06      	ldr	r3, [pc, #24]	; (800c858 <_svfiprintf_r+0x1f8>)
 800c840:	a904      	add	r1, sp, #16
 800c842:	4638      	mov	r0, r7
 800c844:	f000 f9d4 	bl	800cbf0 <_printf_i>
 800c848:	e7eb      	b.n	800c822 <_svfiprintf_r+0x1c2>
 800c84a:	bf00      	nop
 800c84c:	0800d614 	.word	0x0800d614
 800c850:	0800d61e 	.word	0x0800d61e
 800c854:	00000000 	.word	0x00000000
 800c858:	0800c5a9 	.word	0x0800c5a9
 800c85c:	0800d61a 	.word	0x0800d61a

0800c860 <__sfputc_r>:
 800c860:	6893      	ldr	r3, [r2, #8]
 800c862:	3b01      	subs	r3, #1
 800c864:	2b00      	cmp	r3, #0
 800c866:	b410      	push	{r4}
 800c868:	6093      	str	r3, [r2, #8]
 800c86a:	da08      	bge.n	800c87e <__sfputc_r+0x1e>
 800c86c:	6994      	ldr	r4, [r2, #24]
 800c86e:	42a3      	cmp	r3, r4
 800c870:	db01      	blt.n	800c876 <__sfputc_r+0x16>
 800c872:	290a      	cmp	r1, #10
 800c874:	d103      	bne.n	800c87e <__sfputc_r+0x1e>
 800c876:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c87a:	f7ff bc21 	b.w	800c0c0 <__swbuf_r>
 800c87e:	6813      	ldr	r3, [r2, #0]
 800c880:	1c58      	adds	r0, r3, #1
 800c882:	6010      	str	r0, [r2, #0]
 800c884:	7019      	strb	r1, [r3, #0]
 800c886:	4608      	mov	r0, r1
 800c888:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c88c:	4770      	bx	lr

0800c88e <__sfputs_r>:
 800c88e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c890:	4606      	mov	r6, r0
 800c892:	460f      	mov	r7, r1
 800c894:	4614      	mov	r4, r2
 800c896:	18d5      	adds	r5, r2, r3
 800c898:	42ac      	cmp	r4, r5
 800c89a:	d101      	bne.n	800c8a0 <__sfputs_r+0x12>
 800c89c:	2000      	movs	r0, #0
 800c89e:	e007      	b.n	800c8b0 <__sfputs_r+0x22>
 800c8a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8a4:	463a      	mov	r2, r7
 800c8a6:	4630      	mov	r0, r6
 800c8a8:	f7ff ffda 	bl	800c860 <__sfputc_r>
 800c8ac:	1c43      	adds	r3, r0, #1
 800c8ae:	d1f3      	bne.n	800c898 <__sfputs_r+0xa>
 800c8b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c8b4 <_vfiprintf_r>:
 800c8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8b8:	460d      	mov	r5, r1
 800c8ba:	b09d      	sub	sp, #116	; 0x74
 800c8bc:	4614      	mov	r4, r2
 800c8be:	4698      	mov	r8, r3
 800c8c0:	4606      	mov	r6, r0
 800c8c2:	b118      	cbz	r0, 800c8cc <_vfiprintf_r+0x18>
 800c8c4:	6983      	ldr	r3, [r0, #24]
 800c8c6:	b90b      	cbnz	r3, 800c8cc <_vfiprintf_r+0x18>
 800c8c8:	f7ff f91e 	bl	800bb08 <__sinit>
 800c8cc:	4b89      	ldr	r3, [pc, #548]	; (800caf4 <_vfiprintf_r+0x240>)
 800c8ce:	429d      	cmp	r5, r3
 800c8d0:	d11b      	bne.n	800c90a <_vfiprintf_r+0x56>
 800c8d2:	6875      	ldr	r5, [r6, #4]
 800c8d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8d6:	07d9      	lsls	r1, r3, #31
 800c8d8:	d405      	bmi.n	800c8e6 <_vfiprintf_r+0x32>
 800c8da:	89ab      	ldrh	r3, [r5, #12]
 800c8dc:	059a      	lsls	r2, r3, #22
 800c8de:	d402      	bmi.n	800c8e6 <_vfiprintf_r+0x32>
 800c8e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c8e2:	f7ff f9d4 	bl	800bc8e <__retarget_lock_acquire_recursive>
 800c8e6:	89ab      	ldrh	r3, [r5, #12]
 800c8e8:	071b      	lsls	r3, r3, #28
 800c8ea:	d501      	bpl.n	800c8f0 <_vfiprintf_r+0x3c>
 800c8ec:	692b      	ldr	r3, [r5, #16]
 800c8ee:	b9eb      	cbnz	r3, 800c92c <_vfiprintf_r+0x78>
 800c8f0:	4629      	mov	r1, r5
 800c8f2:	4630      	mov	r0, r6
 800c8f4:	f7ff fc48 	bl	800c188 <__swsetup_r>
 800c8f8:	b1c0      	cbz	r0, 800c92c <_vfiprintf_r+0x78>
 800c8fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8fc:	07dc      	lsls	r4, r3, #31
 800c8fe:	d50e      	bpl.n	800c91e <_vfiprintf_r+0x6a>
 800c900:	f04f 30ff 	mov.w	r0, #4294967295
 800c904:	b01d      	add	sp, #116	; 0x74
 800c906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c90a:	4b7b      	ldr	r3, [pc, #492]	; (800caf8 <_vfiprintf_r+0x244>)
 800c90c:	429d      	cmp	r5, r3
 800c90e:	d101      	bne.n	800c914 <_vfiprintf_r+0x60>
 800c910:	68b5      	ldr	r5, [r6, #8]
 800c912:	e7df      	b.n	800c8d4 <_vfiprintf_r+0x20>
 800c914:	4b79      	ldr	r3, [pc, #484]	; (800cafc <_vfiprintf_r+0x248>)
 800c916:	429d      	cmp	r5, r3
 800c918:	bf08      	it	eq
 800c91a:	68f5      	ldreq	r5, [r6, #12]
 800c91c:	e7da      	b.n	800c8d4 <_vfiprintf_r+0x20>
 800c91e:	89ab      	ldrh	r3, [r5, #12]
 800c920:	0598      	lsls	r0, r3, #22
 800c922:	d4ed      	bmi.n	800c900 <_vfiprintf_r+0x4c>
 800c924:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c926:	f7ff f9b3 	bl	800bc90 <__retarget_lock_release_recursive>
 800c92a:	e7e9      	b.n	800c900 <_vfiprintf_r+0x4c>
 800c92c:	2300      	movs	r3, #0
 800c92e:	9309      	str	r3, [sp, #36]	; 0x24
 800c930:	2320      	movs	r3, #32
 800c932:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c936:	f8cd 800c 	str.w	r8, [sp, #12]
 800c93a:	2330      	movs	r3, #48	; 0x30
 800c93c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cb00 <_vfiprintf_r+0x24c>
 800c940:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c944:	f04f 0901 	mov.w	r9, #1
 800c948:	4623      	mov	r3, r4
 800c94a:	469a      	mov	sl, r3
 800c94c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c950:	b10a      	cbz	r2, 800c956 <_vfiprintf_r+0xa2>
 800c952:	2a25      	cmp	r2, #37	; 0x25
 800c954:	d1f9      	bne.n	800c94a <_vfiprintf_r+0x96>
 800c956:	ebba 0b04 	subs.w	fp, sl, r4
 800c95a:	d00b      	beq.n	800c974 <_vfiprintf_r+0xc0>
 800c95c:	465b      	mov	r3, fp
 800c95e:	4622      	mov	r2, r4
 800c960:	4629      	mov	r1, r5
 800c962:	4630      	mov	r0, r6
 800c964:	f7ff ff93 	bl	800c88e <__sfputs_r>
 800c968:	3001      	adds	r0, #1
 800c96a:	f000 80aa 	beq.w	800cac2 <_vfiprintf_r+0x20e>
 800c96e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c970:	445a      	add	r2, fp
 800c972:	9209      	str	r2, [sp, #36]	; 0x24
 800c974:	f89a 3000 	ldrb.w	r3, [sl]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	f000 80a2 	beq.w	800cac2 <_vfiprintf_r+0x20e>
 800c97e:	2300      	movs	r3, #0
 800c980:	f04f 32ff 	mov.w	r2, #4294967295
 800c984:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c988:	f10a 0a01 	add.w	sl, sl, #1
 800c98c:	9304      	str	r3, [sp, #16]
 800c98e:	9307      	str	r3, [sp, #28]
 800c990:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c994:	931a      	str	r3, [sp, #104]	; 0x68
 800c996:	4654      	mov	r4, sl
 800c998:	2205      	movs	r2, #5
 800c99a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c99e:	4858      	ldr	r0, [pc, #352]	; (800cb00 <_vfiprintf_r+0x24c>)
 800c9a0:	f7f3 fca6 	bl	80002f0 <memchr>
 800c9a4:	9a04      	ldr	r2, [sp, #16]
 800c9a6:	b9d8      	cbnz	r0, 800c9e0 <_vfiprintf_r+0x12c>
 800c9a8:	06d1      	lsls	r1, r2, #27
 800c9aa:	bf44      	itt	mi
 800c9ac:	2320      	movmi	r3, #32
 800c9ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9b2:	0713      	lsls	r3, r2, #28
 800c9b4:	bf44      	itt	mi
 800c9b6:	232b      	movmi	r3, #43	; 0x2b
 800c9b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9bc:	f89a 3000 	ldrb.w	r3, [sl]
 800c9c0:	2b2a      	cmp	r3, #42	; 0x2a
 800c9c2:	d015      	beq.n	800c9f0 <_vfiprintf_r+0x13c>
 800c9c4:	9a07      	ldr	r2, [sp, #28]
 800c9c6:	4654      	mov	r4, sl
 800c9c8:	2000      	movs	r0, #0
 800c9ca:	f04f 0c0a 	mov.w	ip, #10
 800c9ce:	4621      	mov	r1, r4
 800c9d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c9d4:	3b30      	subs	r3, #48	; 0x30
 800c9d6:	2b09      	cmp	r3, #9
 800c9d8:	d94e      	bls.n	800ca78 <_vfiprintf_r+0x1c4>
 800c9da:	b1b0      	cbz	r0, 800ca0a <_vfiprintf_r+0x156>
 800c9dc:	9207      	str	r2, [sp, #28]
 800c9de:	e014      	b.n	800ca0a <_vfiprintf_r+0x156>
 800c9e0:	eba0 0308 	sub.w	r3, r0, r8
 800c9e4:	fa09 f303 	lsl.w	r3, r9, r3
 800c9e8:	4313      	orrs	r3, r2
 800c9ea:	9304      	str	r3, [sp, #16]
 800c9ec:	46a2      	mov	sl, r4
 800c9ee:	e7d2      	b.n	800c996 <_vfiprintf_r+0xe2>
 800c9f0:	9b03      	ldr	r3, [sp, #12]
 800c9f2:	1d19      	adds	r1, r3, #4
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	9103      	str	r1, [sp, #12]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	bfbb      	ittet	lt
 800c9fc:	425b      	neglt	r3, r3
 800c9fe:	f042 0202 	orrlt.w	r2, r2, #2
 800ca02:	9307      	strge	r3, [sp, #28]
 800ca04:	9307      	strlt	r3, [sp, #28]
 800ca06:	bfb8      	it	lt
 800ca08:	9204      	strlt	r2, [sp, #16]
 800ca0a:	7823      	ldrb	r3, [r4, #0]
 800ca0c:	2b2e      	cmp	r3, #46	; 0x2e
 800ca0e:	d10c      	bne.n	800ca2a <_vfiprintf_r+0x176>
 800ca10:	7863      	ldrb	r3, [r4, #1]
 800ca12:	2b2a      	cmp	r3, #42	; 0x2a
 800ca14:	d135      	bne.n	800ca82 <_vfiprintf_r+0x1ce>
 800ca16:	9b03      	ldr	r3, [sp, #12]
 800ca18:	1d1a      	adds	r2, r3, #4
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	9203      	str	r2, [sp, #12]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	bfb8      	it	lt
 800ca22:	f04f 33ff 	movlt.w	r3, #4294967295
 800ca26:	3402      	adds	r4, #2
 800ca28:	9305      	str	r3, [sp, #20]
 800ca2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cb10 <_vfiprintf_r+0x25c>
 800ca2e:	7821      	ldrb	r1, [r4, #0]
 800ca30:	2203      	movs	r2, #3
 800ca32:	4650      	mov	r0, sl
 800ca34:	f7f3 fc5c 	bl	80002f0 <memchr>
 800ca38:	b140      	cbz	r0, 800ca4c <_vfiprintf_r+0x198>
 800ca3a:	2340      	movs	r3, #64	; 0x40
 800ca3c:	eba0 000a 	sub.w	r0, r0, sl
 800ca40:	fa03 f000 	lsl.w	r0, r3, r0
 800ca44:	9b04      	ldr	r3, [sp, #16]
 800ca46:	4303      	orrs	r3, r0
 800ca48:	3401      	adds	r4, #1
 800ca4a:	9304      	str	r3, [sp, #16]
 800ca4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca50:	482c      	ldr	r0, [pc, #176]	; (800cb04 <_vfiprintf_r+0x250>)
 800ca52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca56:	2206      	movs	r2, #6
 800ca58:	f7f3 fc4a 	bl	80002f0 <memchr>
 800ca5c:	2800      	cmp	r0, #0
 800ca5e:	d03f      	beq.n	800cae0 <_vfiprintf_r+0x22c>
 800ca60:	4b29      	ldr	r3, [pc, #164]	; (800cb08 <_vfiprintf_r+0x254>)
 800ca62:	bb1b      	cbnz	r3, 800caac <_vfiprintf_r+0x1f8>
 800ca64:	9b03      	ldr	r3, [sp, #12]
 800ca66:	3307      	adds	r3, #7
 800ca68:	f023 0307 	bic.w	r3, r3, #7
 800ca6c:	3308      	adds	r3, #8
 800ca6e:	9303      	str	r3, [sp, #12]
 800ca70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca72:	443b      	add	r3, r7
 800ca74:	9309      	str	r3, [sp, #36]	; 0x24
 800ca76:	e767      	b.n	800c948 <_vfiprintf_r+0x94>
 800ca78:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca7c:	460c      	mov	r4, r1
 800ca7e:	2001      	movs	r0, #1
 800ca80:	e7a5      	b.n	800c9ce <_vfiprintf_r+0x11a>
 800ca82:	2300      	movs	r3, #0
 800ca84:	3401      	adds	r4, #1
 800ca86:	9305      	str	r3, [sp, #20]
 800ca88:	4619      	mov	r1, r3
 800ca8a:	f04f 0c0a 	mov.w	ip, #10
 800ca8e:	4620      	mov	r0, r4
 800ca90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca94:	3a30      	subs	r2, #48	; 0x30
 800ca96:	2a09      	cmp	r2, #9
 800ca98:	d903      	bls.n	800caa2 <_vfiprintf_r+0x1ee>
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d0c5      	beq.n	800ca2a <_vfiprintf_r+0x176>
 800ca9e:	9105      	str	r1, [sp, #20]
 800caa0:	e7c3      	b.n	800ca2a <_vfiprintf_r+0x176>
 800caa2:	fb0c 2101 	mla	r1, ip, r1, r2
 800caa6:	4604      	mov	r4, r0
 800caa8:	2301      	movs	r3, #1
 800caaa:	e7f0      	b.n	800ca8e <_vfiprintf_r+0x1da>
 800caac:	ab03      	add	r3, sp, #12
 800caae:	9300      	str	r3, [sp, #0]
 800cab0:	462a      	mov	r2, r5
 800cab2:	4b16      	ldr	r3, [pc, #88]	; (800cb0c <_vfiprintf_r+0x258>)
 800cab4:	a904      	add	r1, sp, #16
 800cab6:	4630      	mov	r0, r6
 800cab8:	f3af 8000 	nop.w
 800cabc:	4607      	mov	r7, r0
 800cabe:	1c78      	adds	r0, r7, #1
 800cac0:	d1d6      	bne.n	800ca70 <_vfiprintf_r+0x1bc>
 800cac2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cac4:	07d9      	lsls	r1, r3, #31
 800cac6:	d405      	bmi.n	800cad4 <_vfiprintf_r+0x220>
 800cac8:	89ab      	ldrh	r3, [r5, #12]
 800caca:	059a      	lsls	r2, r3, #22
 800cacc:	d402      	bmi.n	800cad4 <_vfiprintf_r+0x220>
 800cace:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cad0:	f7ff f8de 	bl	800bc90 <__retarget_lock_release_recursive>
 800cad4:	89ab      	ldrh	r3, [r5, #12]
 800cad6:	065b      	lsls	r3, r3, #25
 800cad8:	f53f af12 	bmi.w	800c900 <_vfiprintf_r+0x4c>
 800cadc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cade:	e711      	b.n	800c904 <_vfiprintf_r+0x50>
 800cae0:	ab03      	add	r3, sp, #12
 800cae2:	9300      	str	r3, [sp, #0]
 800cae4:	462a      	mov	r2, r5
 800cae6:	4b09      	ldr	r3, [pc, #36]	; (800cb0c <_vfiprintf_r+0x258>)
 800cae8:	a904      	add	r1, sp, #16
 800caea:	4630      	mov	r0, r6
 800caec:	f000 f880 	bl	800cbf0 <_printf_i>
 800caf0:	e7e4      	b.n	800cabc <_vfiprintf_r+0x208>
 800caf2:	bf00      	nop
 800caf4:	0800d5d0 	.word	0x0800d5d0
 800caf8:	0800d5f0 	.word	0x0800d5f0
 800cafc:	0800d5b0 	.word	0x0800d5b0
 800cb00:	0800d614 	.word	0x0800d614
 800cb04:	0800d61e 	.word	0x0800d61e
 800cb08:	00000000 	.word	0x00000000
 800cb0c:	0800c88f 	.word	0x0800c88f
 800cb10:	0800d61a 	.word	0x0800d61a

0800cb14 <_printf_common>:
 800cb14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb18:	4616      	mov	r6, r2
 800cb1a:	4699      	mov	r9, r3
 800cb1c:	688a      	ldr	r2, [r1, #8]
 800cb1e:	690b      	ldr	r3, [r1, #16]
 800cb20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cb24:	4293      	cmp	r3, r2
 800cb26:	bfb8      	it	lt
 800cb28:	4613      	movlt	r3, r2
 800cb2a:	6033      	str	r3, [r6, #0]
 800cb2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cb30:	4607      	mov	r7, r0
 800cb32:	460c      	mov	r4, r1
 800cb34:	b10a      	cbz	r2, 800cb3a <_printf_common+0x26>
 800cb36:	3301      	adds	r3, #1
 800cb38:	6033      	str	r3, [r6, #0]
 800cb3a:	6823      	ldr	r3, [r4, #0]
 800cb3c:	0699      	lsls	r1, r3, #26
 800cb3e:	bf42      	ittt	mi
 800cb40:	6833      	ldrmi	r3, [r6, #0]
 800cb42:	3302      	addmi	r3, #2
 800cb44:	6033      	strmi	r3, [r6, #0]
 800cb46:	6825      	ldr	r5, [r4, #0]
 800cb48:	f015 0506 	ands.w	r5, r5, #6
 800cb4c:	d106      	bne.n	800cb5c <_printf_common+0x48>
 800cb4e:	f104 0a19 	add.w	sl, r4, #25
 800cb52:	68e3      	ldr	r3, [r4, #12]
 800cb54:	6832      	ldr	r2, [r6, #0]
 800cb56:	1a9b      	subs	r3, r3, r2
 800cb58:	42ab      	cmp	r3, r5
 800cb5a:	dc26      	bgt.n	800cbaa <_printf_common+0x96>
 800cb5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cb60:	1e13      	subs	r3, r2, #0
 800cb62:	6822      	ldr	r2, [r4, #0]
 800cb64:	bf18      	it	ne
 800cb66:	2301      	movne	r3, #1
 800cb68:	0692      	lsls	r2, r2, #26
 800cb6a:	d42b      	bmi.n	800cbc4 <_printf_common+0xb0>
 800cb6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cb70:	4649      	mov	r1, r9
 800cb72:	4638      	mov	r0, r7
 800cb74:	47c0      	blx	r8
 800cb76:	3001      	adds	r0, #1
 800cb78:	d01e      	beq.n	800cbb8 <_printf_common+0xa4>
 800cb7a:	6823      	ldr	r3, [r4, #0]
 800cb7c:	68e5      	ldr	r5, [r4, #12]
 800cb7e:	6832      	ldr	r2, [r6, #0]
 800cb80:	f003 0306 	and.w	r3, r3, #6
 800cb84:	2b04      	cmp	r3, #4
 800cb86:	bf08      	it	eq
 800cb88:	1aad      	subeq	r5, r5, r2
 800cb8a:	68a3      	ldr	r3, [r4, #8]
 800cb8c:	6922      	ldr	r2, [r4, #16]
 800cb8e:	bf0c      	ite	eq
 800cb90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cb94:	2500      	movne	r5, #0
 800cb96:	4293      	cmp	r3, r2
 800cb98:	bfc4      	itt	gt
 800cb9a:	1a9b      	subgt	r3, r3, r2
 800cb9c:	18ed      	addgt	r5, r5, r3
 800cb9e:	2600      	movs	r6, #0
 800cba0:	341a      	adds	r4, #26
 800cba2:	42b5      	cmp	r5, r6
 800cba4:	d11a      	bne.n	800cbdc <_printf_common+0xc8>
 800cba6:	2000      	movs	r0, #0
 800cba8:	e008      	b.n	800cbbc <_printf_common+0xa8>
 800cbaa:	2301      	movs	r3, #1
 800cbac:	4652      	mov	r2, sl
 800cbae:	4649      	mov	r1, r9
 800cbb0:	4638      	mov	r0, r7
 800cbb2:	47c0      	blx	r8
 800cbb4:	3001      	adds	r0, #1
 800cbb6:	d103      	bne.n	800cbc0 <_printf_common+0xac>
 800cbb8:	f04f 30ff 	mov.w	r0, #4294967295
 800cbbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbc0:	3501      	adds	r5, #1
 800cbc2:	e7c6      	b.n	800cb52 <_printf_common+0x3e>
 800cbc4:	18e1      	adds	r1, r4, r3
 800cbc6:	1c5a      	adds	r2, r3, #1
 800cbc8:	2030      	movs	r0, #48	; 0x30
 800cbca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cbce:	4422      	add	r2, r4
 800cbd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cbd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cbd8:	3302      	adds	r3, #2
 800cbda:	e7c7      	b.n	800cb6c <_printf_common+0x58>
 800cbdc:	2301      	movs	r3, #1
 800cbde:	4622      	mov	r2, r4
 800cbe0:	4649      	mov	r1, r9
 800cbe2:	4638      	mov	r0, r7
 800cbe4:	47c0      	blx	r8
 800cbe6:	3001      	adds	r0, #1
 800cbe8:	d0e6      	beq.n	800cbb8 <_printf_common+0xa4>
 800cbea:	3601      	adds	r6, #1
 800cbec:	e7d9      	b.n	800cba2 <_printf_common+0x8e>
	...

0800cbf0 <_printf_i>:
 800cbf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cbf4:	7e0f      	ldrb	r7, [r1, #24]
 800cbf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cbf8:	2f78      	cmp	r7, #120	; 0x78
 800cbfa:	4691      	mov	r9, r2
 800cbfc:	4680      	mov	r8, r0
 800cbfe:	460c      	mov	r4, r1
 800cc00:	469a      	mov	sl, r3
 800cc02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cc06:	d807      	bhi.n	800cc18 <_printf_i+0x28>
 800cc08:	2f62      	cmp	r7, #98	; 0x62
 800cc0a:	d80a      	bhi.n	800cc22 <_printf_i+0x32>
 800cc0c:	2f00      	cmp	r7, #0
 800cc0e:	f000 80d8 	beq.w	800cdc2 <_printf_i+0x1d2>
 800cc12:	2f58      	cmp	r7, #88	; 0x58
 800cc14:	f000 80a3 	beq.w	800cd5e <_printf_i+0x16e>
 800cc18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cc20:	e03a      	b.n	800cc98 <_printf_i+0xa8>
 800cc22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cc26:	2b15      	cmp	r3, #21
 800cc28:	d8f6      	bhi.n	800cc18 <_printf_i+0x28>
 800cc2a:	a101      	add	r1, pc, #4	; (adr r1, 800cc30 <_printf_i+0x40>)
 800cc2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cc30:	0800cc89 	.word	0x0800cc89
 800cc34:	0800cc9d 	.word	0x0800cc9d
 800cc38:	0800cc19 	.word	0x0800cc19
 800cc3c:	0800cc19 	.word	0x0800cc19
 800cc40:	0800cc19 	.word	0x0800cc19
 800cc44:	0800cc19 	.word	0x0800cc19
 800cc48:	0800cc9d 	.word	0x0800cc9d
 800cc4c:	0800cc19 	.word	0x0800cc19
 800cc50:	0800cc19 	.word	0x0800cc19
 800cc54:	0800cc19 	.word	0x0800cc19
 800cc58:	0800cc19 	.word	0x0800cc19
 800cc5c:	0800cda9 	.word	0x0800cda9
 800cc60:	0800cccd 	.word	0x0800cccd
 800cc64:	0800cd8b 	.word	0x0800cd8b
 800cc68:	0800cc19 	.word	0x0800cc19
 800cc6c:	0800cc19 	.word	0x0800cc19
 800cc70:	0800cdcb 	.word	0x0800cdcb
 800cc74:	0800cc19 	.word	0x0800cc19
 800cc78:	0800cccd 	.word	0x0800cccd
 800cc7c:	0800cc19 	.word	0x0800cc19
 800cc80:	0800cc19 	.word	0x0800cc19
 800cc84:	0800cd93 	.word	0x0800cd93
 800cc88:	682b      	ldr	r3, [r5, #0]
 800cc8a:	1d1a      	adds	r2, r3, #4
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	602a      	str	r2, [r5, #0]
 800cc90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cc98:	2301      	movs	r3, #1
 800cc9a:	e0a3      	b.n	800cde4 <_printf_i+0x1f4>
 800cc9c:	6820      	ldr	r0, [r4, #0]
 800cc9e:	6829      	ldr	r1, [r5, #0]
 800cca0:	0606      	lsls	r6, r0, #24
 800cca2:	f101 0304 	add.w	r3, r1, #4
 800cca6:	d50a      	bpl.n	800ccbe <_printf_i+0xce>
 800cca8:	680e      	ldr	r6, [r1, #0]
 800ccaa:	602b      	str	r3, [r5, #0]
 800ccac:	2e00      	cmp	r6, #0
 800ccae:	da03      	bge.n	800ccb8 <_printf_i+0xc8>
 800ccb0:	232d      	movs	r3, #45	; 0x2d
 800ccb2:	4276      	negs	r6, r6
 800ccb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccb8:	485e      	ldr	r0, [pc, #376]	; (800ce34 <_printf_i+0x244>)
 800ccba:	230a      	movs	r3, #10
 800ccbc:	e019      	b.n	800ccf2 <_printf_i+0x102>
 800ccbe:	680e      	ldr	r6, [r1, #0]
 800ccc0:	602b      	str	r3, [r5, #0]
 800ccc2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ccc6:	bf18      	it	ne
 800ccc8:	b236      	sxthne	r6, r6
 800ccca:	e7ef      	b.n	800ccac <_printf_i+0xbc>
 800cccc:	682b      	ldr	r3, [r5, #0]
 800ccce:	6820      	ldr	r0, [r4, #0]
 800ccd0:	1d19      	adds	r1, r3, #4
 800ccd2:	6029      	str	r1, [r5, #0]
 800ccd4:	0601      	lsls	r1, r0, #24
 800ccd6:	d501      	bpl.n	800ccdc <_printf_i+0xec>
 800ccd8:	681e      	ldr	r6, [r3, #0]
 800ccda:	e002      	b.n	800cce2 <_printf_i+0xf2>
 800ccdc:	0646      	lsls	r6, r0, #25
 800ccde:	d5fb      	bpl.n	800ccd8 <_printf_i+0xe8>
 800cce0:	881e      	ldrh	r6, [r3, #0]
 800cce2:	4854      	ldr	r0, [pc, #336]	; (800ce34 <_printf_i+0x244>)
 800cce4:	2f6f      	cmp	r7, #111	; 0x6f
 800cce6:	bf0c      	ite	eq
 800cce8:	2308      	moveq	r3, #8
 800ccea:	230a      	movne	r3, #10
 800ccec:	2100      	movs	r1, #0
 800ccee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ccf2:	6865      	ldr	r5, [r4, #4]
 800ccf4:	60a5      	str	r5, [r4, #8]
 800ccf6:	2d00      	cmp	r5, #0
 800ccf8:	bfa2      	ittt	ge
 800ccfa:	6821      	ldrge	r1, [r4, #0]
 800ccfc:	f021 0104 	bicge.w	r1, r1, #4
 800cd00:	6021      	strge	r1, [r4, #0]
 800cd02:	b90e      	cbnz	r6, 800cd08 <_printf_i+0x118>
 800cd04:	2d00      	cmp	r5, #0
 800cd06:	d04d      	beq.n	800cda4 <_printf_i+0x1b4>
 800cd08:	4615      	mov	r5, r2
 800cd0a:	fbb6 f1f3 	udiv	r1, r6, r3
 800cd0e:	fb03 6711 	mls	r7, r3, r1, r6
 800cd12:	5dc7      	ldrb	r7, [r0, r7]
 800cd14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cd18:	4637      	mov	r7, r6
 800cd1a:	42bb      	cmp	r3, r7
 800cd1c:	460e      	mov	r6, r1
 800cd1e:	d9f4      	bls.n	800cd0a <_printf_i+0x11a>
 800cd20:	2b08      	cmp	r3, #8
 800cd22:	d10b      	bne.n	800cd3c <_printf_i+0x14c>
 800cd24:	6823      	ldr	r3, [r4, #0]
 800cd26:	07de      	lsls	r6, r3, #31
 800cd28:	d508      	bpl.n	800cd3c <_printf_i+0x14c>
 800cd2a:	6923      	ldr	r3, [r4, #16]
 800cd2c:	6861      	ldr	r1, [r4, #4]
 800cd2e:	4299      	cmp	r1, r3
 800cd30:	bfde      	ittt	le
 800cd32:	2330      	movle	r3, #48	; 0x30
 800cd34:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cd38:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cd3c:	1b52      	subs	r2, r2, r5
 800cd3e:	6122      	str	r2, [r4, #16]
 800cd40:	f8cd a000 	str.w	sl, [sp]
 800cd44:	464b      	mov	r3, r9
 800cd46:	aa03      	add	r2, sp, #12
 800cd48:	4621      	mov	r1, r4
 800cd4a:	4640      	mov	r0, r8
 800cd4c:	f7ff fee2 	bl	800cb14 <_printf_common>
 800cd50:	3001      	adds	r0, #1
 800cd52:	d14c      	bne.n	800cdee <_printf_i+0x1fe>
 800cd54:	f04f 30ff 	mov.w	r0, #4294967295
 800cd58:	b004      	add	sp, #16
 800cd5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd5e:	4835      	ldr	r0, [pc, #212]	; (800ce34 <_printf_i+0x244>)
 800cd60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cd64:	6829      	ldr	r1, [r5, #0]
 800cd66:	6823      	ldr	r3, [r4, #0]
 800cd68:	f851 6b04 	ldr.w	r6, [r1], #4
 800cd6c:	6029      	str	r1, [r5, #0]
 800cd6e:	061d      	lsls	r5, r3, #24
 800cd70:	d514      	bpl.n	800cd9c <_printf_i+0x1ac>
 800cd72:	07df      	lsls	r7, r3, #31
 800cd74:	bf44      	itt	mi
 800cd76:	f043 0320 	orrmi.w	r3, r3, #32
 800cd7a:	6023      	strmi	r3, [r4, #0]
 800cd7c:	b91e      	cbnz	r6, 800cd86 <_printf_i+0x196>
 800cd7e:	6823      	ldr	r3, [r4, #0]
 800cd80:	f023 0320 	bic.w	r3, r3, #32
 800cd84:	6023      	str	r3, [r4, #0]
 800cd86:	2310      	movs	r3, #16
 800cd88:	e7b0      	b.n	800ccec <_printf_i+0xfc>
 800cd8a:	6823      	ldr	r3, [r4, #0]
 800cd8c:	f043 0320 	orr.w	r3, r3, #32
 800cd90:	6023      	str	r3, [r4, #0]
 800cd92:	2378      	movs	r3, #120	; 0x78
 800cd94:	4828      	ldr	r0, [pc, #160]	; (800ce38 <_printf_i+0x248>)
 800cd96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cd9a:	e7e3      	b.n	800cd64 <_printf_i+0x174>
 800cd9c:	0659      	lsls	r1, r3, #25
 800cd9e:	bf48      	it	mi
 800cda0:	b2b6      	uxthmi	r6, r6
 800cda2:	e7e6      	b.n	800cd72 <_printf_i+0x182>
 800cda4:	4615      	mov	r5, r2
 800cda6:	e7bb      	b.n	800cd20 <_printf_i+0x130>
 800cda8:	682b      	ldr	r3, [r5, #0]
 800cdaa:	6826      	ldr	r6, [r4, #0]
 800cdac:	6961      	ldr	r1, [r4, #20]
 800cdae:	1d18      	adds	r0, r3, #4
 800cdb0:	6028      	str	r0, [r5, #0]
 800cdb2:	0635      	lsls	r5, r6, #24
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	d501      	bpl.n	800cdbc <_printf_i+0x1cc>
 800cdb8:	6019      	str	r1, [r3, #0]
 800cdba:	e002      	b.n	800cdc2 <_printf_i+0x1d2>
 800cdbc:	0670      	lsls	r0, r6, #25
 800cdbe:	d5fb      	bpl.n	800cdb8 <_printf_i+0x1c8>
 800cdc0:	8019      	strh	r1, [r3, #0]
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	6123      	str	r3, [r4, #16]
 800cdc6:	4615      	mov	r5, r2
 800cdc8:	e7ba      	b.n	800cd40 <_printf_i+0x150>
 800cdca:	682b      	ldr	r3, [r5, #0]
 800cdcc:	1d1a      	adds	r2, r3, #4
 800cdce:	602a      	str	r2, [r5, #0]
 800cdd0:	681d      	ldr	r5, [r3, #0]
 800cdd2:	6862      	ldr	r2, [r4, #4]
 800cdd4:	2100      	movs	r1, #0
 800cdd6:	4628      	mov	r0, r5
 800cdd8:	f7f3 fa8a 	bl	80002f0 <memchr>
 800cddc:	b108      	cbz	r0, 800cde2 <_printf_i+0x1f2>
 800cdde:	1b40      	subs	r0, r0, r5
 800cde0:	6060      	str	r0, [r4, #4]
 800cde2:	6863      	ldr	r3, [r4, #4]
 800cde4:	6123      	str	r3, [r4, #16]
 800cde6:	2300      	movs	r3, #0
 800cde8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cdec:	e7a8      	b.n	800cd40 <_printf_i+0x150>
 800cdee:	6923      	ldr	r3, [r4, #16]
 800cdf0:	462a      	mov	r2, r5
 800cdf2:	4649      	mov	r1, r9
 800cdf4:	4640      	mov	r0, r8
 800cdf6:	47d0      	blx	sl
 800cdf8:	3001      	adds	r0, #1
 800cdfa:	d0ab      	beq.n	800cd54 <_printf_i+0x164>
 800cdfc:	6823      	ldr	r3, [r4, #0]
 800cdfe:	079b      	lsls	r3, r3, #30
 800ce00:	d413      	bmi.n	800ce2a <_printf_i+0x23a>
 800ce02:	68e0      	ldr	r0, [r4, #12]
 800ce04:	9b03      	ldr	r3, [sp, #12]
 800ce06:	4298      	cmp	r0, r3
 800ce08:	bfb8      	it	lt
 800ce0a:	4618      	movlt	r0, r3
 800ce0c:	e7a4      	b.n	800cd58 <_printf_i+0x168>
 800ce0e:	2301      	movs	r3, #1
 800ce10:	4632      	mov	r2, r6
 800ce12:	4649      	mov	r1, r9
 800ce14:	4640      	mov	r0, r8
 800ce16:	47d0      	blx	sl
 800ce18:	3001      	adds	r0, #1
 800ce1a:	d09b      	beq.n	800cd54 <_printf_i+0x164>
 800ce1c:	3501      	adds	r5, #1
 800ce1e:	68e3      	ldr	r3, [r4, #12]
 800ce20:	9903      	ldr	r1, [sp, #12]
 800ce22:	1a5b      	subs	r3, r3, r1
 800ce24:	42ab      	cmp	r3, r5
 800ce26:	dcf2      	bgt.n	800ce0e <_printf_i+0x21e>
 800ce28:	e7eb      	b.n	800ce02 <_printf_i+0x212>
 800ce2a:	2500      	movs	r5, #0
 800ce2c:	f104 0619 	add.w	r6, r4, #25
 800ce30:	e7f5      	b.n	800ce1e <_printf_i+0x22e>
 800ce32:	bf00      	nop
 800ce34:	0800d625 	.word	0x0800d625
 800ce38:	0800d636 	.word	0x0800d636

0800ce3c <_read_r>:
 800ce3c:	b538      	push	{r3, r4, r5, lr}
 800ce3e:	4d07      	ldr	r5, [pc, #28]	; (800ce5c <_read_r+0x20>)
 800ce40:	4604      	mov	r4, r0
 800ce42:	4608      	mov	r0, r1
 800ce44:	4611      	mov	r1, r2
 800ce46:	2200      	movs	r2, #0
 800ce48:	602a      	str	r2, [r5, #0]
 800ce4a:	461a      	mov	r2, r3
 800ce4c:	f7f5 fbf0 	bl	8002630 <_read>
 800ce50:	1c43      	adds	r3, r0, #1
 800ce52:	d102      	bne.n	800ce5a <_read_r+0x1e>
 800ce54:	682b      	ldr	r3, [r5, #0]
 800ce56:	b103      	cbz	r3, 800ce5a <_read_r+0x1e>
 800ce58:	6023      	str	r3, [r4, #0]
 800ce5a:	bd38      	pop	{r3, r4, r5, pc}
 800ce5c:	24004ef4 	.word	0x24004ef4

0800ce60 <_fstat_r>:
 800ce60:	b538      	push	{r3, r4, r5, lr}
 800ce62:	4d07      	ldr	r5, [pc, #28]	; (800ce80 <_fstat_r+0x20>)
 800ce64:	2300      	movs	r3, #0
 800ce66:	4604      	mov	r4, r0
 800ce68:	4608      	mov	r0, r1
 800ce6a:	4611      	mov	r1, r2
 800ce6c:	602b      	str	r3, [r5, #0]
 800ce6e:	f7f5 fc24 	bl	80026ba <_fstat>
 800ce72:	1c43      	adds	r3, r0, #1
 800ce74:	d102      	bne.n	800ce7c <_fstat_r+0x1c>
 800ce76:	682b      	ldr	r3, [r5, #0]
 800ce78:	b103      	cbz	r3, 800ce7c <_fstat_r+0x1c>
 800ce7a:	6023      	str	r3, [r4, #0]
 800ce7c:	bd38      	pop	{r3, r4, r5, pc}
 800ce7e:	bf00      	nop
 800ce80:	24004ef4 	.word	0x24004ef4

0800ce84 <_isatty_r>:
 800ce84:	b538      	push	{r3, r4, r5, lr}
 800ce86:	4d06      	ldr	r5, [pc, #24]	; (800cea0 <_isatty_r+0x1c>)
 800ce88:	2300      	movs	r3, #0
 800ce8a:	4604      	mov	r4, r0
 800ce8c:	4608      	mov	r0, r1
 800ce8e:	602b      	str	r3, [r5, #0]
 800ce90:	f7f5 fc23 	bl	80026da <_isatty>
 800ce94:	1c43      	adds	r3, r0, #1
 800ce96:	d102      	bne.n	800ce9e <_isatty_r+0x1a>
 800ce98:	682b      	ldr	r3, [r5, #0]
 800ce9a:	b103      	cbz	r3, 800ce9e <_isatty_r+0x1a>
 800ce9c:	6023      	str	r3, [r4, #0]
 800ce9e:	bd38      	pop	{r3, r4, r5, pc}
 800cea0:	24004ef4 	.word	0x24004ef4

0800cea4 <memmove>:
 800cea4:	4288      	cmp	r0, r1
 800cea6:	b510      	push	{r4, lr}
 800cea8:	eb01 0402 	add.w	r4, r1, r2
 800ceac:	d902      	bls.n	800ceb4 <memmove+0x10>
 800ceae:	4284      	cmp	r4, r0
 800ceb0:	4623      	mov	r3, r4
 800ceb2:	d807      	bhi.n	800cec4 <memmove+0x20>
 800ceb4:	1e43      	subs	r3, r0, #1
 800ceb6:	42a1      	cmp	r1, r4
 800ceb8:	d008      	beq.n	800cecc <memmove+0x28>
 800ceba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cebe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cec2:	e7f8      	b.n	800ceb6 <memmove+0x12>
 800cec4:	4402      	add	r2, r0
 800cec6:	4601      	mov	r1, r0
 800cec8:	428a      	cmp	r2, r1
 800ceca:	d100      	bne.n	800cece <memmove+0x2a>
 800cecc:	bd10      	pop	{r4, pc}
 800cece:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ced2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ced6:	e7f7      	b.n	800cec8 <memmove+0x24>

0800ced8 <_realloc_r>:
 800ced8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cedc:	4680      	mov	r8, r0
 800cede:	4614      	mov	r4, r2
 800cee0:	460e      	mov	r6, r1
 800cee2:	b921      	cbnz	r1, 800ceee <_realloc_r+0x16>
 800cee4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cee8:	4611      	mov	r1, r2
 800ceea:	f7fe bf09 	b.w	800bd00 <_malloc_r>
 800ceee:	b92a      	cbnz	r2, 800cefc <_realloc_r+0x24>
 800cef0:	f7ff fb0e 	bl	800c510 <_free_r>
 800cef4:	4625      	mov	r5, r4
 800cef6:	4628      	mov	r0, r5
 800cef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cefc:	f000 f81b 	bl	800cf36 <_malloc_usable_size_r>
 800cf00:	4284      	cmp	r4, r0
 800cf02:	4607      	mov	r7, r0
 800cf04:	d802      	bhi.n	800cf0c <_realloc_r+0x34>
 800cf06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cf0a:	d812      	bhi.n	800cf32 <_realloc_r+0x5a>
 800cf0c:	4621      	mov	r1, r4
 800cf0e:	4640      	mov	r0, r8
 800cf10:	f7fe fef6 	bl	800bd00 <_malloc_r>
 800cf14:	4605      	mov	r5, r0
 800cf16:	2800      	cmp	r0, #0
 800cf18:	d0ed      	beq.n	800cef6 <_realloc_r+0x1e>
 800cf1a:	42bc      	cmp	r4, r7
 800cf1c:	4622      	mov	r2, r4
 800cf1e:	4631      	mov	r1, r6
 800cf20:	bf28      	it	cs
 800cf22:	463a      	movcs	r2, r7
 800cf24:	f7fe feb5 	bl	800bc92 <memcpy>
 800cf28:	4631      	mov	r1, r6
 800cf2a:	4640      	mov	r0, r8
 800cf2c:	f7ff faf0 	bl	800c510 <_free_r>
 800cf30:	e7e1      	b.n	800cef6 <_realloc_r+0x1e>
 800cf32:	4635      	mov	r5, r6
 800cf34:	e7df      	b.n	800cef6 <_realloc_r+0x1e>

0800cf36 <_malloc_usable_size_r>:
 800cf36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf3a:	1f18      	subs	r0, r3, #4
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	bfbc      	itt	lt
 800cf40:	580b      	ldrlt	r3, [r1, r0]
 800cf42:	18c0      	addlt	r0, r0, r3
 800cf44:	4770      	bx	lr
	...

0800cf48 <_init>:
 800cf48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf4a:	bf00      	nop
 800cf4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf4e:	bc08      	pop	{r3}
 800cf50:	469e      	mov	lr, r3
 800cf52:	4770      	bx	lr

0800cf54 <_fini>:
 800cf54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf56:	bf00      	nop
 800cf58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf5a:	bc08      	pop	{r3}
 800cf5c:	469e      	mov	lr, r3
 800cf5e:	4770      	bx	lr
